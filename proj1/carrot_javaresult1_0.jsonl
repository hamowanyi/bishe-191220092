{"code":"protected final void fastPathOrderedEmit(U value, boolean delayError, Disposable disposable) {\r\n        final Observer<? super V> observer = downstream;\r\n        final SimplePlainQueue<U> q = queue;\r\n        if (wip.get() == 0 && wip.compareAndSet(0, 1)) {\r\n            if (q.isEmpty()) {\r\n                accept(observer, value);\r\n                if (leave(-1) == 0) {\r\n                    return;\r\n                }\r\n            } else {\r\n                q.offer(value);\r\n            }\r\n        } else {\r\n            q.offer(value);\r\n            if (!enter()) {\r\n                return;\r\n            }\r\n        }\r\n        QueueDrainHelper.drainLoop(q, observer, delayError, disposable, this);\r\n    }\r\n\r\n\/*This method is used to","code-length":174,"reference":"Makes sure the fast-path emits in order.","result":"Handle the case where the queue is empty .","score":[0.1219,0.0694]}
{"code":"@CheckReturnValue\r\n    @SchedulerSupport(SchedulerSupport.NONE)\r\n    public static <T> Observable<T> wrap(ObservableSource<T> source) {\r\n        ObjectHelper.requireNonNull(source, \"source is null\");\r\n        if (source instanceof Observable) {\r\n            return RxJavaPlugins.onAssembly((Observable<T>)source);\r\n        }\r\n        return RxJavaPlugins.onAssembly(new ObservableFromUnsafeSource<T>(source));\r\n    }\r\n\r\n\/*This method is used to","code-length":112,"reference":"Wraps an ObservableSource into an Observable if not already an Observable.","result":"Convert a Java source to a Java object.","score":[0,0.0]}
{"code":"@CheckReturnValue\r\n    @SchedulerSupport(SchedulerSupport.NONE)\r\n    public final Observable<T> sorted(Comparator<? super T> sortFunction) {\r\n        ObjectHelper.requireNonNull(sortFunction, \"sortFunction is null\");\r\n        return toList().toObservable().map(Functions.listSorter(sortFunction)).flatMapIterable(Functions.<List<T>>identity());\r\n    }\r\n\r\n\/*This method is used to","code-length":93,"reference":"Returns an Observable that emits the events emitted by source ObservableSource, in asorted order based on a specified comparison function.","result":"Sort the list of functions in the order of the list .","score":[0.0602,0.0781]}
{"code":"public static <T> ConnectableObservable<T> observeOn(final ConnectableObservable<T> co, final Scheduler scheduler) {\r\n        final Observable<T> observable = co.observeOn(scheduler);\r\n        return RxJavaPlugins.onAssembly(new Replay<T>(co, observable));\r\n    }\r\n\r\n\/*This method is used to","code-length":80,"reference":"Child Observers will observe the events of the ConnectableObservable on thespecified scheduler.","result":"Create a new Replay<T> that create a new Scheduler<T> that create a.","score":[0,0.0]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    public static <T> UnicastProcessor<T> create(int capacityHint) {\r\n        return new UnicastProcessor<T>(capacityHint);\r\n    }\r\n\r\n\/*This method is used to","code-length":51,"reference":"Creates an UnicastProcessor with the given internal buffer capacity hint.","result":"Create a new processor instance.","score":[0,0.0526]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    public static <T> UnicastProcessor<T> create(int capacityHint, Runnable onCancelled) {\r\n        ObjectHelper.requireNonNull(onCancelled, \"onTerminate\");\r\n        return new UnicastProcessor<T>(capacityHint, onCancelled);\r\n    }\r\n\r\n\/*This method is used to","code-length":75,"reference":"Creates an UnicastProcessor with the given internal buffer capacity hint and a callback forthe case when the single Subscriber cancels its subscription.","result":"Create a new thread for each thread.","score":[0.0189,0.0488]}
{"code":"@SuppressWarnings(\"unchecked\")\r\n    public static <T, R> boolean tryScalarXMapSubscribe(Publisher<T> source,\r\n            Subscriber<? super R> subscriber,\r\n            Function<? super T, ? extends Publisher<? extends R>> mapper) {\r\n        if (source instanceof Callable) {\r\n            T t;\r\n            try {\r\n                t = ((Callable<T>)source).call();\r\n            } catch (Throwable ex) {\r\n                Exceptions.throwIfFatal(ex);\r\n                EmptySubscription.error(ex, subscriber);\r\n                return true;\r\n            }\r\n            if (t == null) {\r\n                EmptySubscription.complete(subscriber);\r\n                return true;\r\n            }\r\n            Publisher<? extends R> r;\r\n            try {\r\n                r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null Publisher\");\r\n            } catch (Throwable ex) {\r\n                Exceptions.throwIfFatal(ex);\r\n                EmptySubscription.error(ex, subscriber);\r\n                return true;\r\n            }\r\n            if (r instanceof Callable) {\r\n                R u;\r\n                try {\r\n                    u = ((Callable<R>)r).call();\r\n                } catch (Throwable ex) {\r\n                    Exceptions.throwIfFatal(ex);\r\n                    EmptySubscription.error(ex, subscriber);\r\n                    return true;\r\n                }\r\n                if (u == null) {\r\n                    EmptySubscription.complete(subscriber);\r\n                    return true;\r\n                }\r\n                subscriber.onSubscribe(new ScalarSubscription<R>(subscriber, u));\r\n            } else {\r\n                r.subscribe(subscriber);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\/*This method is used to","code-length":351,"reference":"Tries to subscribe to a possibly Callable source's mapped Publisher.","result":"Convert a Python object to a Java one.","score":[0.153,0.1913]}
{"code":"public static <T, U> Flowable<U> scalarXMap(final T value, final Function<? super T, ? extends Publisher<? extends U>> mapper) {\r\n        return RxJavaPlugins.onAssembly(new ScalarXMapFlowable<T, U>(value, mapper));\r\n    }\r\n\r\n\/*This method is used to","code-length":74,"reference":"Maps a scalar value into a Publisher and emits its values.","result":"Convert a value to a string .","score":[0.12,0.1415]}
{"code":"public static void reset() {\r\n        setErrorHandler(null);\r\n        setScheduleHandler(null);\r\n        setComputationSchedulerHandler(null);\r\n        setInitComputationSchedulerHandler(null);\r\n        setIoSchedulerHandler(null);\r\n        setInitIoSchedulerHandler(null);\r\n        setSingleSchedulerHandler(null);\r\n        setInitSingleSchedulerHandler(null);\r\n        setNewThreadSchedulerHandler(null);\r\n        setInitNewThreadSchedulerHandler(null);\r\n        setOnFlowableAssembly(null);\r\n        setOnFlowableSubscribe(null);\r\n        setOnObservableAssembly(null);\r\n        setOnObservableSubscribe(null);\r\n        setOnSingleAssembly(null);\r\n        setOnSingleSubscribe(null);\r\n        setOnCompletableAssembly(null);\r\n        setOnCompletableSubscribe(null);\r\n        setOnConnectableFlowableAssembly(null);\r\n        setOnConnectableObservableAssembly(null);\r\n        setOnMaybeAssembly(null);\r\n        setOnMaybeSubscribe(null);\r\n        setOnParallelAssembly(null);\r\n        setFailOnNonBlockingScheduler(false);\r\n        setOnBeforeBlocking(null);\r\n    }\r\n\r\n\/*This method is used to","code-length":242,"reference":"Removes all handlers and resets to default behavior.","result":"Create a new thread that will be used by the simulator.","score":[0,0.0]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    @SchedulerSupport(SchedulerSupport.NONE)\r\n    public static <T> Maybe<T> fromCompletable(CompletableSource completableSource) {\r\n        ObjectHelper.requireNonNull(completableSource, \"completableSource is null\");\r\n        return RxJavaPlugins.onAssembly(new MaybeFromCompletable<T>(completableSource));\r\n    }\r\n\r\n\/*This method is used to","code-length":91,"reference":"Wraps a CompletableSource into a Maybe.","result":"Create a new completable object.","score":[0.1967,0.0847]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    @SchedulerSupport(SchedulerSupport.NONE)\r\n    public static <T> Maybe<T> fromSingle(SingleSource<T> singleSource) {\r\n        ObjectHelper.requireNonNull(singleSource, \"singleSource is null\");\r\n        return RxJavaPlugins.onAssembly(new MaybeFromSingle<T>(singleSource));\r\n    }\r\n\r\n\/*This method is used to","code-length":87,"reference":"Wraps a SingleSource into a Maybe.","result":"Create a new instance of the given class.","score":[0.1389,0.0806]}
{"code":"@CheckReturnValue\r\n    @SchedulerSupport(SchedulerSupport.NONE)\r\n    public final Maybe<T> retry(long times, Predicate<? super Throwable> predicate) {\r\n        return toFlowable().retry(times, predicate).singleElement();\r\n    }\r\n\r\n\/*This method is used to","code-length":63,"reference":"Retries at most times or until the predicate returns false, whichever happens first.","result":"Implement the {@link #get} method of {@link #set} and {@link #del} methods.","score":[0.082,0.0388]}
{"code":"public static <T> T requireNonNull(T object, String message) {\r\n        if (object == null) {\r\n            throw new NullPointerException(message);\r\n        }\r\n        return object;\r\n    }\r\n\r\n\/*This method is used to","code-length":50,"reference":"Verifies if the object is not null and returns it or throws a NullPointerExceptionwith the given message.","result":"Synthesize a pointer to an array .","score":[0.0387,0.0312]}
{"code":"@SuppressWarnings(\"unchecked\")\r\n    public static <T> Function<T, T> identity() {\r\n        return (Function<T, T>)IDENTITY;\r\n    }\r\n\r\n\/*This method is used to","code-length":44,"reference":"Returns an identity function that simply returns its argument.","result":"Check if a given function is a member of a given class .","score":[0.0818,0.1596]}
{"code":"public static <T> Callable<T> justCallable(T value) {\r\n        return new JustValue<Object, T>(value);\r\n    }\r\n\r\n\/*This method is used to","code-length":38,"reference":"Returns a Callable that returns the given value.","result":"Create a new instance of a class.","score":[0.14,0.0633]}
{"code":"public static <T, U> Function<T, U> justFunction(U value) {\r\n        return new JustValue<T, U>(value);\r\n    }\r\n\r\n\/*This method is used to","code-length":42,"reference":"Returns a Function that ignores its parameter and returns the given value.","result":"Convert a function to a C++ class .","score":[0.0842,0.0862]}
{"code":"public static <T, U> Function<T, U> castFunction(Class<U> target) {\r\n        return new CastToClass<T, U>(target);\r\n    }\r\n\r\n\/*This method is used to","code-length":47,"reference":"Returns a function that cast the incoming values via a Class object.","result":"Convert a Cast to a CastToClass<T, U> to a CastToClass<U, U.","score":[0.1063,0.1261]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    public static <T> UnicastSubject<T> create() {\r\n        return new UnicastSubject<T>(bufferSize(), true);\r\n    }\r\n\r\n\/*This method is used to","code-length":49,"reference":"Creates an UnicastSubject with an internal buffer capacity hint 16.","result":"Create a new subject.","score":[0,0.0532]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    public static <T> UnicastSubject<T> create(int capacityHint) {\r\n        return new UnicastSubject<T>(capacityHint, true);\r\n    }\r\n\r\n\/*This method is used to","code-length":53,"reference":"Creates an UnicastSubject with the given internal buffer capacity hint.","result":"Create a new subject.","score":[0,0.0532]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    public static <T> UnicastSubject<T> create(int capacityHint, Runnable onTerminate) {\r\n        return new UnicastSubject<T>(capacityHint, onTerminate, true);\r\n    }\r\n\r\n\/*This method is used to","code-length":63,"reference":"Creates an UnicastSubject with the given internal buffer capacity hint and a callback forthe case when the single Subscriber cancels its subscription.","result":"Create a new subject.","score":[0.0035,0.0495]}
{"code":"@CheckReturnValue\r\n    @NonNull\r\n    public static <T> UnicastSubject<T> create(boolean delayError) {\r\n        return new UnicastSubject<T>(bufferSize(), delayError);\r\n    }\r\n\r\n\/*This method is used to","code-length":54,"reference":"Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag.","result":"Create a new subject.","score":[0,0.036]}
{"code":"public Throwable blockingGetError() {\r\n        if (getCount() != 0) {\r\n            try {\r\n                BlockingHelper.verifyNonBlocking();\r\n                await();\r\n            } catch (InterruptedException ex) {\r\n                dispose();\r\n                return ex;\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n\/*This method is used to","code-length":70,"reference":"Block until the latch is counted down and return the error received or null if noerror happened.","result":"Get the current thread's stack.","score":[0.0218,0.0316]}
{"code":"public Throwable blockingGetError(long timeout, TimeUnit unit) {\r\n        if (getCount() != 0) {\r\n            try {\r\n                BlockingHelper.verifyNonBlocking();\r\n                if (!await(timeout, unit)) {\r\n                    dispose();\r\n                    throw ExceptionHelper.wrapOrThrow(new TimeoutException(timeoutMessage(timeout, unit)));\r\n                }\r\n            } catch (InterruptedException ex) {\r\n                dispose();\r\n                throw ExceptionHelper.wrapOrThrow(ex);\r\n            }\r\n        }\r\n        return error;\r\n    }\r\n\r\n\/*This method is used to","code-length":120,"reference":"Block until the latch is counted down and return the error received orwhen the wait is interrupted or times out, null otherwise.","result":"Get the current time in milliseconds.","score":[0.0134,0.049]}
{"code":"public boolean blockingAwait(long timeout, TimeUnit unit) {\r\n        if (getCount() != 0) {\r\n            try {\r\n                BlockingHelper.verifyNonBlocking();\r\n                if (!await(timeout, unit)) {\r\n                    dispose();\r\n                    return false;\r\n                }\r\n            } catch (InterruptedException ex) {\r\n                dispose();\r\n                throw ExceptionHelper.wrapOrThrow(ex);\r\n            }\r\n        }\r\n        Throwable ex = error;\r\n        if (ex != null) {\r\n            throw ExceptionHelper.wrapOrThrow(ex);\r\n        }\r\n        return true;\r\n    }\r\n\r\n\/*This method is used to","code-length":130,"reference":"the wait times out.","result":"Wrap an asynchronous function.","score":[0,0.0]}
{"code":"public static <T, U> void drainMaxLoop(SimplePlainQueue<T> q, Subscriber<? super U> a, boolean delayError,\r\n            Disposable dispose, QueueDrain<T, U> qd) {\r\n        int missed = 1;\r\n        for (;;) {\r\n            for (;;) {\r\n                boolean d = qd.done();\r\n                T v = q.poll();\r\n                boolean empty = v == null;\r\n                if (checkTerminated(d, empty, a, delayError, q, qd)) {\r\n                    if (dispose != null) {\r\n                        dispose.dispose();\r\n                    }\r\n                    return;\r\n                }\r\n                if (empty) {\r\n                    break;\r\n                }\r\n                long r = qd.requested();\r\n                if (r != 0L) {\r\n                    if (qd.accept(a, v)) {\r\n                        if (r != Long.MAX_VALUE) {\r\n                            qd.produced(1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    q.clear();\r\n                    if (dispose != null) {\r\n                        dispose.dispose();\r\n                    }\r\n                    a.onError(new MissingBackpressureException(\"Could not emit value due to lack of requests.\"));\r\n                    return;\r\n                }\r\n            }\r\n            missed = qd.leave(-missed);\r\n            if (missed == 0) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":299,"reference":"Drain the queue but give up with an error if there aren't enough requests.","result":"Send a message to the client.","score":[0.0509,0.0379]}
{"code":"public static void request(Subscription s, int prefetch) {\r\n        s.request(prefetch < 0 ? Long.MAX_VALUE : prefetch);\r\n    }\r\n\r\n\/*This method is used to","code-length":39,"reference":"Requests Long.","result":"Send a subscription to a server.","score":[0,0.0]}
{"code":"public static <T> void postComplete(Subscriber<? super T> actual,\r\n                                        Queue<T> queue,\r\n                                        AtomicLong state,\r\n                                        BooleanSupplier isCancelled) {\r\n        if (queue.isEmpty()) {\r\n            actual.onComplete();\r\n            return;\r\n        }\r\n        if (postCompleteDrain(state.get(), actual, queue, state, isCancelled)) {\r\n            return;\r\n        }\r\n        for (; ; ) {\r\n            long r = state.get();\r\n            if ((r & COMPLETED_MASK) != 0L) {\r\n                return;\r\n            }\r\n            long u = r | COMPLETED_MASK;\r\n            if (state.compareAndSet(r, u)) {\r\n                if (r != 0L) {\r\n                    postCompleteDrain(u, actual, queue, state, isCancelled);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":194,"reference":"Signals the completion of the main sequence and switches to post-completion replay mode.","result":"Implement the {@link #getState} and {@link #setState} *method for the {@link #get.","score":[0.1079,0.1163]}
{"code":"protected final void complete(R n) {\r\n        long p = produced;\r\n        if (p != 0) {\r\n            BackpressureHelper.produced(this, p);\r\n        }\r\n        for (;;) {\r\n            long r = get();\r\n            if ((r & COMPLETE_MASK) != 0) {\r\n                onDrop(n);\r\n                return;\r\n            }\r\n            if ((r & REQUEST_MASK) != 0) {\r\n                lazySet(COMPLETE_MASK + 1);\r\n                downstream.onNext(n);\r\n                downstream.onComplete();\r\n                return;\r\n            }\r\n            value = n;\r\n            if (compareAndSet(0, COMPLETE_MASK)) {\r\n                return;\r\n            }\r\n            value = null;\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":162,"reference":"Signals the given value and an onComplete if the downstream is ready to receive the final value.","result":"Implement the \"complete\" phase of the implementation.","score":[0.046,0.0625]}
{"code":"@SuppressWarnings(\"unchecked\")\r\n    @Nullable\r\n    public T getValue() {\r\n        Object o = value;\r\n        if (o != null && !NotificationLite.isError(o)) {\r\n            return (T)value;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\/*This method is used to","code-length":64,"reference":"Returns the contained value if this notification is an onNextsignal, null otherwise.","result":"Get the value of a property .","score":[0.094,0.087]}
{"code":"@Nullable\r\n    public Throwable getError() {\r\n        Object o = value;\r\n        if (NotificationLite.isError(o)) {\r\n            return NotificationLite.getError(o);\r\n        }\r\n        return null;\r\n    }\r\n\r\n\/*This method is used to","code-length":56,"reference":"Returns the container Throwable error if this notification is an onErrorsignal, null otherwise.","result":"Get the error message .","score":[0.0577,0.082]}
{"code":"public static boolean validate(Disposable upstream, Disposable next, Class<?> observer) {\r\n        ObjectHelper.requireNonNull(next, \"next is null\");\r\n        if (upstream != null) {\r\n            next.dispose();\r\n            if (upstream != DisposableHelper.DISPOSED) {\r\n                reportDoubleSubscription(observer);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\/*This method is used to","code-length":94,"reference":"Ensures that the upstream Disposable is null and returns true, otherwisedisposes the next Disposable and if the upstream is not the shareddisposed instance, reports a ProtocolViolationException due tomultiple subscribe attempts.","result":"Check if a given object is a valid object .","score":[0.0193,0.0714]}
{"code":"public static boolean setOnce(AtomicReference<Disposable> upstream, Disposable next, Class<?> observer) {\r\n        ObjectHelper.requireNonNull(next, \"next is null\");\r\n        if (!upstream.compareAndSet(null, next)) {\r\n            next.dispose();\r\n            if (upstream.get() != DisposableHelper.DISPOSED) {\r\n                reportDoubleSubscription(observer);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\/*This method is used to","code-length":108,"reference":"Atomically updates the target upstream AtomicReference from null to the non-nullnext Disposable, otherwise disposes next and reports a ProtocolViolationExceptionif the AtomicReference doesn't contain the shared disposed indicator.","result":"Implement the {@link #set} operator .","score":[0.0058,0.0201]}
{"code":"public static boolean validate(Subscription upstream, Subscription next, Class<?> subscriber) {\r\n        ObjectHelper.requireNonNull(next, \"next is null\");\r\n        if (upstream != null) {\r\n            next.cancel();\r\n            if (upstream != SubscriptionHelper.CANCELLED) {\r\n                reportDoubleSubscription(subscriber);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\/*This method is used to","code-length":87,"reference":"Ensures that the upstream Subscription is null and returns true, otherwisecancels the next Subscription and if the upstream is not the sharedcancelled instance, reports a ProtocolViolationException due tomultiple subscribe attempts.","result":"Check if a subscription is valid .","score":[0.008,0.0722]}
{"code":"public static boolean setOnce(AtomicReference<Subscription> upstream, Subscription next, Class<?> subscriber) {\r\n        ObjectHelper.requireNonNull(next, \"next is null\");\r\n        if (!upstream.compareAndSet(null, next)) {\r\n            next.cancel();\r\n            if (upstream.get() != SubscriptionHelper.CANCELLED) {\r\n                reportDoubleSubscription(subscriber);\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\/*This method is used to","code-length":101,"reference":"Atomically updates the target upstream AtomicReference from null to the non-nullnext Subscription, otherwise cancels next and reports a ProtocolViolationExceptionif the AtomicReference doesn't contain the shared cancelled indicator.","result":"Check if a subscription is valid .","score":[0.0093,0.04]}
{"code":"public static long addCap(long a, long b) {\r\n        long u = a + b;\r\n        if (u < 0L) {\r\n            return Long.MAX_VALUE;\r\n        }\r\n        return u;\r\n    }\r\n\r\n\/*This method is used to","code-length":54,"reference":"Adds two long values and caps the sum at Long.","result":"Convert a string to a number.","score":[0,0.0]}
{"code":"public static long multiplyCap(long a, long b) {\r\n        long u = a * b;\r\n        if (((a | b) >>> 31) != 0) {\r\n            if (u \/ a != b) {\r\n                return Long.MAX_VALUE;\r\n            }\r\n        }\r\n        return u;\r\n    }\r\n\r\n\/*This method is used to","code-length":71,"reference":"Multiplies two long values and caps the product at Long.","result":"Compute the number of bits needed to store the result .","score":[0.0979,0.0495]}
{"code":"public static long add(AtomicLong requested, long n) {\r\n        for (;;) {\r\n            long r = requested.get();\r\n            if (r == Long.MAX_VALUE) {\r\n                return Long.MAX_VALUE;\r\n            }\r\n            long u = addCap(r, n);\r\n            if (requested.compareAndSet(r, u)) {\r\n                return r;\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":92,"reference":"Atomically adds the positive value n to the requested value in the AtomicLong andcaps the result at Long.","result":"Implement the C++ version of the C++ implementation.","score":[0.0473,0.0588]}
{"code":"private static NullPointerException toNpe(Throwable ex) {\r\n        NullPointerException npe = new NullPointerException(\"Actually not, but can't pass out an exception otherwise...\");\r\n        npe.initCause(ex);\r\n        return npe;\r\n    }\r\n\r\n\/*This method is used to","code-length":66,"reference":"Creates a NullPointerException instance and sets the given Throwable as its initial cause.","result":"Get the interface prototype object .","score":[0.0601,0.0407]}
{"code":"public void add(Object o) {\r\n        if (size == 0) {\r\n            head = new Object[capacityHint + 1];\r\n            tail = head;\r\n            head[0] = o;\r\n            indexInTail = 1;\r\n            size = 1;\r\n        } else\r\n        if (indexInTail == capacityHint) {\r\n            Object[] t = new Object[capacityHint + 1];\r\n            t[0] = o;\r\n            tail[capacityHint] = t;\r\n            tail = t;\r\n            indexInTail = 1;\r\n            size++;\r\n        } else {\r\n            tail[indexInTail] = o;\r\n            indexInTail++;\r\n            size++;\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":153,"reference":"Adds a new element to this list.","result":"Add an object to the list of objects.","score":[0.1389,0.1408]}
{"code":"public static void shutdown() {\r\n        ScheduledExecutorService exec = PURGE_THREAD.getAndSet(null);\r\n        if (exec != null) {\r\n            exec.shutdownNow();\r\n        }\r\n        POOLS.clear();\r\n    }\r\n\r\n\/*This method is used to","code-length":57,"reference":"Stops the purge thread.","result":"Stop the service.","score":[0.2925,0.4808]}
{"code":"public static ScheduledExecutorService create(ThreadFactory factory) {\r\n        final ScheduledExecutorService exec = Executors.newScheduledThreadPool(1, factory);\r\n        tryPutIntoPool(PURGE_ENABLED, exec);\r\n        return exec;\r\n    }\r\n\r\n\/*This method is used to","code-length":62,"reference":"Creates a ScheduledExecutorService with the given factory.","result":" The thread pool is automatically created when the thread pool is created.","score":[0.0891,0.1333]}
{"code":"public final void setSubscription(Subscription s) {\r\n        if (cancelled) {\r\n            s.cancel();\r\n            return;\r\n        }\r\n        ObjectHelper.requireNonNull(s, \"s is null\");\r\n        if (get() == 0 && compareAndSet(0, 1)) {\r\n            Subscription a = actual;\r\n            if (a != null && cancelOnReplace) {\r\n                a.cancel();\r\n            }\r\n            actual = s;\r\n            long r = requested;\r\n            if (decrementAndGet() != 0) {\r\n                drainLoop();\r\n            }\r\n            if (r != 0L) {\r\n                s.request(r);\r\n            }\r\n            return;\r\n        }\r\n        Subscription a = missedSubscription.getAndSet(s);\r\n        if (a != null && cancelOnReplace) {\r\n            a.cancel();\r\n        }\r\n        drain();\r\n    }\r\n\r\n\/*This method is used to","code-length":183,"reference":"Atomically sets a new subscription.","result":"Send a subscription to a server.","score":[0.193,0.098]}
{"code":"void emitLoop() {\r\n        for (;;) {\r\n            AppendOnlyLinkedArrayList<Object> q;\r\n            synchronized (this) {\r\n                q = queue;\r\n                if (q == null) {\r\n                    emitting = false;\r\n                    return;\r\n                }\r\n                queue = null;\r\n            }\r\n            q.forEachWhile(this);\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":81,"reference":"Loops until all notifications in the queue has been processed.","result":"Generate the code for the generated code.","score":[0.1052,0.0515]}
{"code":"public static RuntimeException wrapOrThrow(Throwable error) {\r\n        if (error instanceof Error) {\r\n            throw (Error)error;\r\n        }\r\n        if (error instanceof RuntimeException) {\r\n            return (RuntimeException)error;\r\n        }\r\n        return new RuntimeException(error);\r\n    }\r\n\r\n\/*This method is used to","code-length":71,"reference":"If the provided Throwable is an Error this methodthrows it, otherwise returns a RuntimeException wrapping the errorif that error is a checked exception.","result":"Wrap an IDL error in a callback .","score":[0.028,0.093]}
{"code":"public static List<Throwable> flatten(Throwable t) {\r\n        List<Throwable> list = new ArrayList<Throwable>();\r\n        ArrayDeque<Throwable> deque = new ArrayDeque<Throwable>();\r\n        deque.offer(t);\r\n        while (!deque.isEmpty()) {\r\n            Throwable e = deque.removeFirst();\r\n            if (e instanceof CompositeException) {\r\n                CompositeException ce = (CompositeException) e;\r\n                List<Throwable> exceptions = ce.getExceptions();\r\n                for (int i = exceptions.size() - 1; i >= 0; i--) {\r\n                    deque.offerFirst(exceptions.get(i));\r\n                }\r\n            } else {\r\n                list.add(e);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n\/*This method is used to","code-length":183,"reference":"Returns a flattened list of Throwables from tree-like CompositeException chain.","result":"Create a new array.","score":[0.0713,0.0532]}
{"code":"@SuppressWarnings(\"unchecked\")\r\n    public static <E extends Throwable> Exception throwIfThrowable(Throwable e) throws E {\r\n        if (e instanceof Exception) {\r\n            return (Exception)e;\r\n        }\r\n        throw (E)e;\r\n    }\r\n\r\n\/*This method is used to","code-length":67,"reference":"Workaround for Java 6 not supporting throwing a final Throwable from a catch block.","result":"Check if a given exception is a C++ exception .","score":[0.0865,0.1103]}
{"code":"public void clear() {\r\n        if (disposed) {\r\n            return;\r\n        }\r\n        OpenHashSet<Disposable> set;\r\n        synchronized (this) {\r\n            if (disposed) {\r\n                return;\r\n            }\r\n            set = resources;\r\n            resources = null;\r\n        }\r\n        dispose(set);\r\n    }\r\n\r\n\/*This method is used to","code-length":75,"reference":"Atomically clears the container, then disposes all the previously contained Disposables.","result":"Free the resources used by the program .","score":[0.1135,0.0935]}
{"code":"public int size() {\r\n        if (disposed) {\r\n            return 0;\r\n        }\r\n        synchronized (this) {\r\n            if (disposed) {\r\n                return 0;\r\n            }\r\n            OpenHashSet<Disposable> set = resources;\r\n            return set != null ? set.size() : 0;\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":76,"reference":"Returns the number of currently held Disposables.","result":"Implement the {@link #get_hash_set} function.","score":[0.1611,0.0735]}
{"code":"@SuppressWarnings(\"unchecked\")\r\n    public static <T, R> boolean tryScalarXMapSubscribe(ObservableSource<T> source,\r\n            Observer<? super R> observer,\r\n            Function<? super T, ? extends ObservableSource<? extends R>> mapper) {\r\n        if (source instanceof Callable) {\r\n            T t;\r\n            try {\r\n                t = ((Callable<T>)source).call();\r\n            } catch (Throwable ex) {\r\n                Exceptions.throwIfFatal(ex);\r\n                EmptyDisposable.error(ex, observer);\r\n                return true;\r\n            }\r\n            if (t == null) {\r\n                EmptyDisposable.complete(observer);\r\n                return true;\r\n            }\r\n            ObservableSource<? extends R> r;\r\n            try {\r\n                r = ObjectHelper.requireNonNull(mapper.apply(t), \"The mapper returned a null ObservableSource\");\r\n            } catch (Throwable ex) {\r\n                Exceptions.throwIfFatal(ex);\r\n                EmptyDisposable.error(ex, observer);\r\n                return true;\r\n            }\r\n            if (r instanceof Callable) {\r\n                R u;\r\n                try {\r\n                    u = ((Callable<R>)r).call();\r\n                } catch (Throwable ex) {\r\n                    Exceptions.throwIfFatal(ex);\r\n                    EmptyDisposable.error(ex, observer);\r\n                    return true;\r\n                }\r\n                if (u == null) {\r\n                    EmptyDisposable.complete(observer);\r\n                    return true;\r\n                }\r\n                ScalarDisposable<R> sd = new ScalarDisposable<R>(observer, u);\r\n                observer.onSubscribe(sd);\r\n                sd.run();\r\n            } else {\r\n                r.subscribe(observer);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\/*This method is used to","code-length":385,"reference":"Tries to subscribe to a possibly Callable source's mapped ObservableSource.","result":"Implement the \"is\" operator.","score":[0,0.0]}
{"code":"public static <T, U> Observable<U> scalarXMap(T value,\r\n            Function<? super T, ? extends ObservableSource<? extends U>> mapper) {\r\n        return RxJavaPlugins.onAssembly(new ScalarXMapObservable<T, U>(value, mapper));\r\n    }\r\n\r\n\/*This method is used to","code-length":74,"reference":"Maps a scalar value into an Observable and emits its values.","result":"Convert a function into a Java type.","score":[0.1085,0.1415]}
