{"code":"protected function getAdministratorRole()\r\n    {\r\n        $role = Voyager::model('Role')->firstOrNew([\r\n            'name' => 'admin',\r\n        ]);\r\n        if (!$role->exists) {\r\n            $role->fill([\r\n                'display_name' => 'Administrator',\r\n            ])->save();\r\n        }\r\n        return $role;\r\n    }\r\n\r\n\/*This method is used to","code-length":83,"reference":"Get the administrator role, create it if it does not exists.","result":"Get the list of all roles that the user has permissions to.","score":[0.1261,0.0901]}
{"code":"protected function getUser($create = false)\r\n    {\r\n        $email = $this->argument('email');\r\n        $model = config('voyager.user.namespace') ?: config('auth.providers.users.model');\r\n        if ($create) {\r\n            $name = $this->ask('Enter the admin name');\r\n            $password = $this->secret('Enter admin password');\r\n            $confirmPassword = $this->secret('Confirm Password');\r\n            if (!$email) {\r\n                $email = $this->ask('Enter the admin email');\r\n            }\r\n            if ($password != $confirmPassword) {\r\n                $this->info(\"Passwords don't match\");\r\n                return;\r\n            }\r\n            $this->info('Creating admin account');\r\n            return $model::create([\r\n                'name'     => $name,\r\n                'email'    => $email,\r\n                'password' => Hash::make($password),\r\n            ]);\r\n        }\r\n        return $model::where('email', $email)->firstOrFail();\r\n    }\r\n\r\n\/*This method is used to","code-length":223,"reference":"Get or create user.","result":"Create a new user.","score":[0.3195,0.25]}
{"code":"public function handle(BreadDeleted $bread)\r\n    {\r\n        if (config('voyager.bread.add_menu_item')) {\r\n            $menuItem = Voyager::model('MenuItem')->where('route', 'voyager.'.$bread->dataType->slug.'.index');\r\n            if ($menuItem->exists()) {\r\n                $menuItem->delete();\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":97,"reference":"Delete a MenuItem for a given BREAD.","result":"Delete the menu item.","score":[0.1509,0.0746]}
{"code":"private function categoriesTranslations()\r\n    {\r\n        $cat = Category::where('slug', 'category-1')->firstOrFail();\r\n        if ($cat->exists) {\r\n            $this->trans('pt', $this->arr(['categories', 'slug'], $cat->id), 'categoria-1');\r\n            $this->trans('pt', $this->arr(['categories', 'name'], $cat->id), 'Categoria 1');\r\n        }\r\n        $cat = Category::where('slug', 'category-2')->firstOrFail();\r\n        if ($cat->exists) {\r\n            $this->trans('pt', $this->arr(['categories', 'slug'], $cat->id), 'categoria-2');\r\n            $this->trans('pt', $this->arr(['categories', 'name'], $cat->id), 'Categoria 2');\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":196,"reference":"Auto generate Categories Translations.","result":"Create a new category in the database.","score":[0,0.1163]}
{"code":"public function highestOrderMenuItem($parent = null)\r\n    {\r\n        $order = 1;\r\n        $item = $this->where('parent_id', '=', $parent)\r\n            ->orderBy('order', 'DESC')\r\n            ->first();\r\n        if (!is_null($item)) {\r\n            $order = intval($item->order) + 1;\r\n        }\r\n        return $order;\r\n    }\r\n\r\n\/*This method is used to","code-length":89,"reference":"Return the Highest Order Menu Item.","result":"Get the order of the item .","score":[0.1615,0.1639]}
{"code":"public static function createName(array $columns, $type, $table = null)\r\n    {\r\n        $table = isset($table) ? trim($table).'_' : '';\r\n        $type = trim($type);\r\n        $name = strtolower($table.implode('_', $columns).'_'.$type);\r\n        return str_replace(['-', '.'], '_', $name);\r\n    }\r\n\r\n\/*This method is used to","code-length":91,"reference":"Create a default index name.","result":"Generate the function declaration for the given table .","score":[0,0.0]}
{"code":"public function handle(BreadAdded $bread)\r\n    {\r\n        if (config('voyager.bread.add_menu_item') && file_exists(base_path('routes\/web.php'))) {\r\n            require base_path('routes\/web.php');\r\n            $menu = Voyager::model('Menu')->where('name', config('voyager.bread.default_menu'))->firstOrFail();\r\n            $menuItem = Voyager::model('MenuItem')->firstOrNew([\r\n                'menu_id' => $menu->id,\r\n                'title'   => $bread->dataType->display_name_plural,\r\n                'url'     => '',\r\n                'route'   => 'voyager.'.$bread->dataType->slug.'.index',\r\n            ]);\r\n            $order = Voyager::model('MenuItem')->highestOrderMenuItem();\r\n            if (!$menuItem->exists) {\r\n                $menuItem->fill([\r\n                    'target'     => '_self',\r\n                    'icon_class' => $bread->dataType->icon,\r\n                    'color'      => null,\r\n                    'parent_id'  => null,\r\n                    'order'      => $order,\r\n                ])->save();\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":280,"reference":"Create a MenuItem for a given BREAD.","result":"Add a menu item to the menu bar .","score":[0.1219,0.0694]}
{"code":"public static function update($table)\r\n    {\r\n        if (!is_array($table)) {\r\n            $table = json_decode($table, true);\r\n        }\r\n        if (!SchemaManager::tableExists($table['oldName'])) {\r\n            throw SchemaException::tableDoesNotExist($table['oldName']);\r\n        }\r\n        $updater = new self($table);\r\n        $updater->updateTable();\r\n    }\r\n\r\n\/*This method is used to","code-length":90,"reference":"Update the table.","result":"Update the table with the new name .","score":[0.1964,0.2857]}
{"code":"public function updateTable()\r\n    {\r\n        if (($newName = $this->table->getName()) != $this->originalTable->getName()) {\r\n            if (SchemaManager::tableExists($newName)) {\r\n                throw SchemaException::tableAlreadyExists($newName);\r\n            }\r\n        } else {\r\n            $newName = false;\r\n        }\r\n        if ($renamedColumnsDiff = $this->getRenamedColumnsDiff()) {\r\n            SchemaManager::alterTable($renamedColumnsDiff);\r\n            $this->originalTable = SchemaManager::listTableDetails($this->tableArr['oldName']);\r\n        }\r\n        $tableDiff = $this->originalTable->diff($this->table);\r\n        if ($newName) {\r\n            if (!$tableDiff) {\r\n                $tableDiff = new TableDiff($this->tableArr['oldName']);\r\n                $tableDiff->fromTable = $this->originalTable;\r\n            }\r\n            $tableDiff->newName = $newName;\r\n        }\r\n        if ($tableDiff) {\r\n            SchemaManager::alterTable($tableDiff);\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":236,"reference":"Updates the table.","result":"Update the table name of a table.","score":[0.1921,0.7516]}
{"code":"protected function getRenamedColumnsDiff()\r\n    {\r\n        $renamedColumns = $this->getRenamedColumns();\r\n        if (empty($renamedColumns)) {\r\n            return false;\r\n        }\r\n        $renamedColumnsDiff = new TableDiff($this->tableArr['oldName']);\r\n        $renamedColumnsDiff->fromTable = $this->originalTable;\r\n        foreach ($renamedColumns as $oldName => $newName) {\r\n            $renamedColumnsDiff->renamedColumns[$oldName] = $this->table->getColumn($newName);\r\n        }\r\n        return $renamedColumnsDiff;\r\n    }\r\n\r\n\/*This method is used to","code-length":133,"reference":"Get the table diff to rename columns.","result":"Get the column names of the columns in the table .","score":[0.1696,0.3453]}
{"code":"protected function getRenamedDiff()\r\n    {\r\n        $renamedColumns = $this->getRenamedColumns();\r\n        $renamedIndexes = $this->getRenamedIndexes();\r\n        if (empty($renamedColumns) && empty($renamedIndexes)) {\r\n            return false;\r\n        }\r\n        $renamedDiff = new TableDiff($this->tableArr['oldName']);\r\n        $renamedDiff->fromTable = $this->originalTable;\r\n        foreach ($renamedColumns as $oldName => $newName) {\r\n            $renamedDiff->renamedColumns[$oldName] = $this->table->getColumn($newName);\r\n        }\r\n        foreach ($renamedIndexes as $oldName => $newName) {\r\n            $renamedDiff->renamedIndexes[$oldName] = $this->table->getIndex($newName);\r\n        }\r\n        return $renamedDiff;\r\n    }\r\n\r\n\/*This method is used to","code-length":195,"reference":"Get the table diff to rename columns and indexes.","result":"Generate the new table name for the given table .","score":[0.1291,0.1099]}
{"code":"protected function getRenamedColumns()\r\n    {\r\n        $renamedColumns = [];\r\n        foreach ($this->tableArr['columns'] as $column) {\r\n            $oldName = $column['oldName'];\r\n            if ($this->originalTable->hasColumn($oldName)) {\r\n                $name = $column['name'];\r\n                if ($name != $oldName) {\r\n                    $renamedColumns[$oldName] = $name;\r\n                }\r\n            }\r\n        }\r\n        return $renamedColumns;\r\n    }\r\n\r\n\/*This method is used to","code-length":116,"reference":"Get columns that were renamed.","result":"Get the list of columns that are renamed .","score":[0.1907,0.4733]}
{"code":"protected function getRenamedIndexes()\r\n    {\r\n        $renamedIndexes = [];\r\n        foreach ($this->tableArr['indexes'] as $index) {\r\n            $oldName = $index['oldName'];\r\n            if ($this->originalTable->hasIndex($oldName)) {\r\n                $name = $index['name'];\r\n                if ($name != $oldName) {\r\n                    $renamedIndexes[$oldName] = $name;\r\n                }\r\n            }\r\n        }\r\n        return $renamedIndexes;\r\n    }\r\n\r\n\/*This method is used to","code-length":120,"reference":"Get indexes that were renamed.","result":"Get the index of the table that is being renamed .","score":[0.1164,0.2679]}
{"code":"public function thumbnail($type, $attribute = 'image')\r\n    {\r\n        if (!isset($this->attributes[$attribute])) {\r\n            return '';\r\n        }\r\n        $image = $this->attributes[$attribute];\r\n        return $this->getThumbnail($image, $type);\r\n    }\r\n\r\n\/*This method is used to","code-length":70,"reference":"Method for returning specific thumbnail for model.","result":"Get the width and height of a thumbnail.","score":[0,0.0]}
{"code":"public function getThumbnail($image, $type)\r\n    {\r\n        $ext = pathinfo($image, PATHINFO_EXTENSION);\r\n        $name = Str::replaceLast('.'.$ext, '', $image);\r\n        return $name.'-'.$type.'.'.$ext;\r\n    }\r\n\r\n\/*This method is used to","code-length":68,"reference":"Generate thumbnail URL.","result":"Convert a path to a path relative to the current directory .","score":[0,0.0]}
{"code":"public function editRoles(User $user, $model)\r\n    {\r\n        $another = $user->id != $model->id;\r\n        return $another && $user->hasPermission('edit_users');\r\n    }\r\n\r\n\/*This method is used to","code-length":54,"reference":"Determine if the given user can change a user a role.","result":"Delete a user from the database.","score":[0.1313,0.1429]}
{"code":"public function dimmers()\r\n    {\r\n        $widgetClasses = config('voyager.dashboard.widgets');\r\n        $dimmers = Widget::group('voyager::dimmers');\r\n        foreach ($widgetClasses as $widgetClass) {\r\n            $widget = app($widgetClass);\r\n            if ($widget->shouldBeDisplayed()) {\r\n                $dimmers->addWidget($widgetClass);\r\n            }\r\n        }\r\n        return $dimmers;\r\n    }\r\n\r\n\/*This method is used to","code-length":102,"reference":"Get a collection of the dashboard widgets.","result":"Create the widget for the widget that is displayed in the widget list .","score":[0.0756,0.0649]}
{"code":"protected function prepareMenuTranslations(&$data)\r\n    {\r\n        $trans = json_decode($data['title_i18n'], true);\r\n        $data['title'] = $trans[config('voyager.multilingual.default', 'en')];\r\n        unset($data['title_i18n']);\r\n        unset($data['i18n_selector']);\r\n        return $trans;\r\n    }\r\n\r\n\/*This method is used to","code-length":95,"reference":"Prepare menu translations.","result":"Get the current language .","score":[0,0.0]}
{"code":"public function save()\r\n    {\r\n        $attributes = $this->getModifiedAttributes();\r\n        $savings = [];\r\n        foreach ($attributes as $key => $attribute) {\r\n            if ($attribute['exists']) {\r\n                $translation = $this->getTranslationModel($key);\r\n            } else {\r\n                $translation = VoyagerFacade::model('Translation')->where('table_name', $this->model->getTable())\r\n                    ->where('column_name', $key)\r\n                    ->where('foreign_key', $this->model->getKey())\r\n                    ->where('locale', $this->locale)\r\n                    ->first();\r\n            }\r\n            if (is_null($translation)) {\r\n                $translation = VoyagerFacade::model('Translation');\r\n            }\r\n            $translation->fill([\r\n                'table_name'  => $this->model->getTable(),\r\n                'column_name' => $key,\r\n                'foreign_key' => $this->model->getKey(),\r\n                'value'       => $attribute['value'],\r\n                'locale'      => $this->locale,\r\n            ]);\r\n            $savings[] = $translation->save();\r\n            $this->attributes[$key]['locale'] = $this->locale;\r\n            $this->attributes[$key]['exists'] = true;\r\n            $this->attributes[$key]['modified'] = false;\r\n        }\r\n        return in_array(false, $savings);\r\n    }\r\n\r\n\/*This method is used to","code-length":316,"reference":"Save changes made to the translator attributes.","result":"Save the current translation to a file.","score":[0.2125,0.2857]}
{"code":"public function read(User $user, $model)\r\n    {\r\n        $current = $user->id === $model->author_id;\r\n        return $current || $this->checkPermission($user, $model, 'read');\r\n    }\r\n\r\n\/*This method is used to","code-length":58,"reference":"Determine if the given model can be viewed by the user.","result":"Check if the user has the permission to perform the action .","score":[0.1395,0.1351]}
{"code":"public function create(Request $request, $table)\r\n    {\r\n        $this->authorize('browse_bread');\r\n        $dataType = Voyager::model('DataType')->whereName($table)->first();\r\n        $data = $this->prepopulateBreadInfo($table);\r\n        $data['fieldOptions'] = SchemaManager::describeTable((isset($dataType) && strlen($dataType->model_name) != 0)\r\n            ? app($dataType->model_name)->getTable()\r\n            : $table\r\n        );\r\n        return Voyager::view('voyager::tools.bread.edit-add', $data);\r\n    }\r\n\r\n\/*This method is used to","code-length":148,"reference":"Create BREAD.","result":"Create a new Bread instance.","score":[0.2403,0.2174]}
{"code":"public function store(Request $request)\r\n    {\r\n        $this->authorize('browse_bread');\r\n        try {\r\n            $dataType = Voyager::model('DataType');\r\n            $res = $dataType->updateDataType($request->all(), true);\r\n            $data = $res\r\n                ? $this->alertSuccess(__('voyager::bread.success_created_bread'))\r\n                : $this->alertError(__('voyager::bread.error_creating_bread'));\r\n            if ($res) {\r\n                event(new BreadAdded($dataType, $data));\r\n            }\r\n            return redirect()->route('voyager.bread.index')->with($data);\r\n        } catch (Exception $e) {\r\n            return redirect()->route('voyager.bread.index')->with($this->alertException($e, 'Saving Failed'));\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":203,"reference":"Store BREAD.","result":"Delete a Bread from the database.","score":[0,0.0]}
{"code":"public function edit($table)\r\n    {\r\n        $this->authorize('browse_bread');\r\n        $dataType = Voyager::model('DataType')->whereName($table)->first();\r\n        $fieldOptions = SchemaManager::describeTable((strlen($dataType->model_name) != 0)\r\n            ? app($dataType->model_name)->getTable()\r\n            : $dataType->name\r\n        );\r\n        $isModelTranslatable = is_bread_translatable($dataType);\r\n        $tables = SchemaManager::listTableNames();\r\n        $dataTypeRelationships = Voyager::model('DataRow')->where('data_type_id', '=', $dataType->id)->where('type', '=', 'relationship')->get();\r\n        $scopes = [];\r\n        if ($dataType->model_name != '') {\r\n            $scopes = $this->getModelScopes($dataType->model_name);\r\n        }\r\n        return Voyager::view('voyager::tools.bread.edit-add', compact('dataType', 'fieldOptions', 'isModelTranslatable', 'tables', 'dataTypeRelationships', 'scopes'));\r\n    }\r\n\r\n\/*This method is used to","code-length":257,"reference":"Edit BREAD.","result":"Edit a field .","score":[0.3195,0.2273]}
{"code":"public function update(Request $request, $id)\r\n    {\r\n        $this->authorize('browse_bread');\r\n                try {\r\n            $dataType = Voyager::model('DataType')->find($id);\r\n            $translations = is_bread_translatable($dataType)\r\n                ? $dataType->prepareTranslations($request)\r\n                : [];\r\n            $res = $dataType->updateDataType($request->all(), true);\r\n            $data = $res\r\n                ? $this->alertSuccess(__('voyager::bread.success_update_bread', ['datatype' => $dataType->name]))\r\n                : $this->alertError(__('voyager::bread.error_updating_bread'));\r\n            if ($res) {\r\n                event(new BreadUpdated($dataType, $data));\r\n            }\r\n            $dataType->saveTranslations($translations);\r\n            return redirect()->route('voyager.bread.index')->with($data);\r\n        } catch (Exception $e) {\r\n            return back()->with($this->alertException($e, __('voyager::generic.update_failed')));\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":258,"reference":"Update BREAD.","result":"Update the data type of a voyager.","score":[0.1615,0.2]}
{"code":"public function destroy($id)\r\n    {\r\n        $this->authorize('browse_bread');\r\n                $dataType = Voyager::model('DataType')->find($id);\r\n        if (is_bread_translatable($dataType)) {\r\n            $dataType->deleteAttributeTranslations($dataType->getTranslatableAttributes());\r\n        }\r\n        $res = Voyager::model('DataType')->destroy($id);\r\n        $data = $res\r\n            ? $this->alertSuccess(__('voyager::bread.success_remove_bread', ['datatype' => $dataType->name]))\r\n            : $this->alertError(__('voyager::bread.error_updating_bread'));\r\n        if ($res) {\r\n            event(new BreadDeleted($dataType, $data));\r\n        }\r\n        if (!is_null($dataType)) {\r\n            Voyager::model('Permission')->removeFrom($dataType->name);\r\n        }\r\n        return redirect()->route('voyager.bread.index')->with($data);\r\n    }\r\n\r\n\/*This method is used to","code-length":237,"reference":"Delete BREAD.","result":"Delete a Bread.","score":[0.4082,0.4762]}
{"code":"public function addRelationship(Request $request)\r\n    {\r\n        $relationshipField = $this->getRelationshipField($request);\r\n        if (!class_exists($request->relationship_model)) {\r\n            return back()->with([\r\n                'message'    => 'Model Class '.$request->relationship_model.' does not exist. Please create Model before creating relationship.',\r\n                'alert-type' => 'error',\r\n            ]);\r\n        }\r\n        try {\r\n            DB::beginTransaction();\r\n            $relationship_column = $request->relationship_column_belongs_to;\r\n            if ($request->relationship_type == 'hasOne' || $request->relationship_type == 'hasMany') {\r\n                $relationship_column = $request->relationship_column;\r\n            }\r\n            $relationshipDetails = [\r\n                'model'       => $request->relationship_model,\r\n                'table'       => $request->relationship_table,\r\n                'type'        => $request->relationship_type,\r\n                'column'      => $relationship_column,\r\n                'key'         => $request->relationship_key,\r\n                'label'       => $request->relationship_label,\r\n                'pivot_table' => $request->relationship_pivot,\r\n                'pivot'       => ($request->relationship_type == 'belongsToMany') ? '1' : '0',\r\n                'taggable'    => $request->relationship_taggable,\r\n            ];\r\n            $className = Voyager::modelClass('DataRow');\r\n            $newRow = new $className();\r\n            $newRow->data_type_id = $request->data_type_id;\r\n            $newRow->field = $relationshipField;\r\n            $newRow->type = 'relationship';\r\n            $newRow->display_name = $request->relationship_table;\r\n            $newRow->required = 0;\r\n            foreach (['browse', 'read', 'edit', 'add', 'delete'] as $check) {\r\n                $newRow->{$check} = 1;\r\n            }\r\n            $newRow->details = $relationshipDetails;\r\n            $newRow->order = intval(Voyager::model('DataType')->find($request->data_type_id)->lastRow()->order) + 1;\r\n            if (!$newRow->save()) {\r\n                return back()->with([\r\n                    'message'    => 'Error saving new relationship row for '.$request->relationship_table,\r\n                    'alert-type' => 'error',\r\n                ]);\r\n            }\r\n            DB::commit();\r\n            return back()->with([\r\n                'message'    => 'Successfully created new relationship for '.$request->relationship_table,\r\n                'alert-type' => 'success',\r\n            ]);\r\n        } catch (\\Exception $e) {\r\n            DB::rollBack();\r\n            return back()->with([\r\n                'message'    => 'Error creating new relationship: '.$e->getMessage(),\r\n                'alert-type' => 'error',\r\n            ]);\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":639,"reference":"Add Relationship.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"private function getRelationshipField($request)\r\n    {\r\n        $dataType = Voyager::model('DataType')->find($request->data_type_id);\r\n        $field = Str::singular($dataType->name).'_'.$request->relationship_type.'_'.Str::singular($request->relationship_table).'_relationship';\r\n        $relationshipFieldOriginal = $relationshipField = strtolower($field);\r\n        $existingRow = Voyager::model('DataRow')->where('field', '=', $relationshipField)->first();\r\n        $index = 1;\r\n        while (isset($existingRow->id)) {\r\n            $relationshipField = $relationshipFieldOriginal.'_'.$index;\r\n            $existingRow = Voyager::model('DataRow')->where('field', '=', $relationshipField)->first();\r\n            $index += 1;\r\n        }\r\n        return $relationshipField;\r\n    }\r\n\r\n\/*This method is used to","code-length":196,"reference":"Get Relationship Field.","result":"Get the relationship field of the given table.","score":[0.1389,0.2857]}
{"code":"public function handle()\r\n    {\r\n        return empty($this->request->input($this->row->field)) ? null :\r\n            bcrypt($this->request->input($this->row->field));\r\n    }\r\n\r\n\/*This method is used to","code-length":51,"reference":"Handle password fields.","result":"Convert a string to a number.","score":[0,0.0]}
{"code":"public function store(Request $request)\r\n    {\r\n        $this->authorize('browse_database');\r\n        try {\r\n            $conn = 'database.connections.'.config('database.default');\r\n            Type::registerCustomPlatformTypes();\r\n            $table = $request->table;\r\n            if (!is_array($request->table)) {\r\n                $table = json_decode($request->table, true);\r\n            }\r\n            $table['options']['collate'] = config($conn.'.collation', 'utf8mb4_unicode_ci');\r\n            $table['options']['charset'] = config($conn.'.charset', 'utf8mb4');\r\n            $table = Table::make($table);\r\n            SchemaManager::createTable($table);\r\n            if (isset($request->create_model) && $request->create_model == 'on') {\r\n                $modelNamespace = config('voyager.models.namespace', app()->getNamespace());\r\n                $params = [\r\n                    'name' => $modelNamespace.Str::studly(Str::singular($table->name)),\r\n                ];\r\n                if (isset($request->create_migration) && $request->create_migration == 'on') {\r\n                    $params['--migration'] = true;\r\n                }\r\n                Artisan::call('voyager:make:model', $params);\r\n            } elseif (isset($request->create_migration) && $request->create_migration == 'on') {\r\n                Artisan::call('make:migration', [\r\n                    'name'    => 'create_'.$table->name.'_table',\r\n                    '--table' => $table->name,\r\n                ]);\r\n            }\r\n            event(new TableAdded($table));\r\n            return redirect()\r\n               ->route('voyager.database.index')\r\n               ->with($this->alertSuccess(__('voyager::database.success_create_table', ['table' => $table->name])));\r\n        } catch (Exception $e) {\r\n            return back()->with($this->alertException($e))->withInput();\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":447,"reference":"Store new database table.","result":"Create a new table.","score":[0.3799,0.25]}
{"code":"public function edit($table)\r\n    {\r\n        $this->authorize('browse_database');\r\n        if (!SchemaManager::tableExists($table)) {\r\n            return redirect()\r\n                ->route('voyager.database.index')\r\n                ->with($this->alertError(__('voyager::database.edit_table_not_exist')));\r\n        }\r\n        $db = $this->prepareDbManager('update', $table);\r\n        return Voyager::view('voyager::tools.database.edit-add', compact('db'));\r\n    }\r\n\r\n\/*This method is used to","code-length":124,"reference":"Edit database table.","result":"Delete a database.","score":[0,0.0]}
{"code":"public function update(Request $request)\r\n    {\r\n        $this->authorize('browse_database');\r\n        $table = json_decode($request->table, true);\r\n        try {\r\n            DatabaseUpdater::update($table);\r\n            event(new TableUpdated($table));\r\n        } catch (Exception $e) {\r\n            return back()->with($this->alertException($e))->withInput();\r\n        }\r\n        return redirect()\r\n               ->route('voyager.database.index')\r\n               ->with($this->alertSuccess(__('voyager::database.success_create_table', ['table' => $table['name']])));\r\n    }\r\n\r\n\/*This method is used to","code-length":143,"reference":"Update database table.","result":" It is called by the client to create a new table.","score":[0.0979,0.1316]}
{"code":"public function show($table)\r\n    {\r\n        $this->authorize('browse_database');\r\n        $additional_attributes = [];\r\n        $model_name = Voyager::model('DataType')->where('name', $table)->pluck('model_name')->first();\r\n        if (isset($model_name)) {\r\n            $model = app($model_name);\r\n            if (isset($model->additional_attributes)) {\r\n                foreach ($model->additional_attributes as $attribute) {\r\n                    $additional_attributes[$attribute] = [];\r\n                }\r\n            }\r\n        }\r\n        return response()->json(collect(SchemaManager::describeTable($table))->merge($additional_attributes));\r\n    }\r\n\r\n\/*This method is used to","code-length":157,"reference":"Show table.","result":"Get the list of all tables in the database.","score":[0,0.0]}
{"code":"public function destroy($table)\r\n    {\r\n        $this->authorize('browse_database');\r\n        try {\r\n            SchemaManager::dropTable($table);\r\n            event(new TableDeleted($table));\r\n            return redirect()\r\n                ->route('voyager.database.index')\r\n                ->with($this->alertSuccess(__('voyager::database.success_delete_table', ['table' => $table])));\r\n        } catch (Exception $e) {\r\n            return back()->with($this->alertException($e));\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":120,"reference":"Destroy table.","result":"Delete a table.","score":[0.4082,0.2381]}
{"code":"public function sortByUrl($orderBy, $sortOrder)\r\n    {\r\n        $params = [];\r\n        $isDesc = $sortOrder != 'asc';\r\n        if ($this->isCurrentSortField($orderBy) && $isDesc) {\r\n            $params['sort_order'] = 'asc';\r\n        } else {\r\n            $params['sort_order'] = 'desc';\r\n        }\r\n        $params['order_by'] = $this->field;\r\n        return url()->current().'?'.http_build_query(array_merge(\\Request::all(), $params));\r\n    }\r\n\r\n\/*This method is used to","code-length":132,"reference":"Build the URL to sort data type by this field.","result":"Sort the data in the order of the data in the table.","score":[0.106,0.1471]}
{"code":"public static function display($menuName, $type = null, array $options = [])\r\n    {\r\n        $menu = \\Cache::remember('voyager_menu_'.$menuName, \\Carbon\\Carbon::now()->addDays(30), function () use ($menuName) {\r\n            return static::where('name', '=', $menuName)\r\n            ->with(['parent_items.children' => function ($q) {\r\n                $q->orderBy('order');\r\n            }])\r\n            ->first();\r\n        });\r\n        if (!isset($menu)) {\r\n            return false;\r\n        }\r\n        event(new MenuDisplay($menu));\r\n        $options = (object) $options;\r\n        $items = $menu->parent_items->sortBy('order');\r\n        if ($menuName == 'admin' && $type == '_json') {\r\n            $items = static::processItems($items);\r\n        }\r\n        if ($type == 'admin') {\r\n            $type = 'voyager::menu.'.$type;\r\n        } else {\r\n            if (is_null($type)) {\r\n                $type = 'voyager::menu.default';\r\n            } elseif ($type == 'bootstrap' && !view()->exists($type)) {\r\n                $type = 'voyager::menu.bootstrap';\r\n            }\r\n        }\r\n        if (!isset($options->locale)) {\r\n            $options->locale = app()->getLocale();\r\n        }\r\n        if ($type === '_json') {\r\n            return $items;\r\n        }\r\n        return new \\Illuminate\\Support\\HtmlString(\r\n            \\Illuminate\\Support\\Facades\\View::make($type, ['items' => $items, 'options' => $options])->render()\r\n        );\r\n    }\r\n\r\n\/*This method is used to","code-length":388,"reference":"Display menu.","result":"Create the menu items for the admin menu .","score":[0,0.0]}
{"code":"public function translatable()\r\n    {\r\n        if (isset($this->translatable) && $this->translatable == false) {\r\n            return false;\r\n        }\r\n        return !empty($this->getTranslatableAttributes());\r\n    }\r\n\r\n\/*This method is used to","code-length":56,"reference":"Check if this model can translate.","result":"Get the translatable attributes of the current element .","score":[0,0.0]}
{"code":"public function translations()\r\n    {\r\n        return $this->hasMany(Voyager::model('Translation'), 'foreign_key', $this->getKeyName())\r\n            ->where('table_name', $this->getTable())\r\n            ->whereIn('locale', config('voyager.multilingual.locales', []));\r\n    }\r\n\r\n\/*This method is used to","code-length":79,"reference":"Load translations relation.","result":"Get the list of all translations for a given locale.","score":[0.1086,0.1351]}
{"code":"public function getTranslatedAttribute($attribute, $language = null, $fallback = true)\r\n    {\r\n        list($value) = $this->getTranslatedAttributeMeta($attribute, $language, $fallback);\r\n        return $value;\r\n    }\r\n\r\n\/*This method is used to","code-length":59,"reference":"Get a single translated attribute.","result":" The translatable attribute get the value of a translatable attribute.","score":[0.1291,0.5739]}
{"code":"public static function scopeWhereTranslation($query, $field, $operator, $value = null, $locales = null, $default = true)\r\n    {\r\n        if ($locales && !is_array($locales)) {\r\n            $locales = [$locales];\r\n        }\r\n        if (!isset($value)) {\r\n            $value = $operator;\r\n            $operator = '=';\r\n        }\r\n        $self = new static();\r\n        $table = $self->getTable();\r\n        return $query->whereIn($self->getKeyName(), Translation::where('table_name', $table)\r\n            ->where('column_name', $field)\r\n            ->where('value', $operator, $value)\r\n            ->when(!is_null($locales), function ($query) use ($locales) {\r\n                return $query->whereIn('locale', $locales);\r\n            })\r\n            ->pluck('foreign_key')\r\n        )->when($default, function ($query) use ($field, $operator, $value) {\r\n            return $query->orWhere($field, $operator, $value);\r\n        });\r\n    }\r\n\r\n\/*This method is used to","code-length":244,"reference":"Get entries filtered by translated value.","result":"Create a new table with the given name.","score":[0,0.0]}
{"code":"public function saveTranslations($translations)\r\n    {\r\n        foreach ($translations as $field => $locales) {\r\n            foreach ($locales as $locale => $translation) {\r\n                $translation->save();\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":58,"reference":"Save translations.","result":"Save the translations to the database.","score":[0.193,0.2083]}
{"code":"public static function describeTable($tableName)\r\n    {\r\n        Type::registerCustomPlatformTypes();\r\n        $table = static::listTableDetails($tableName);\r\n        return collect($table->columns)->map(function ($column) use ($table) {\r\n            $columnArr = Column::toArray($column);\r\n            $columnArr['field'] = $columnArr['name'];\r\n            $columnArr['type'] = $columnArr['type']['name'];\r\n            $columnArr['indexes'] = [];\r\n            $columnArr['key'] = null;\r\n            if ($columnArr['indexes'] = $table->getColumnsIndexes($columnArr['name'], true)) {\r\n                foreach ($columnArr['indexes'] as $name => $index) {\r\n                    $columnArr['indexes'][$name] = Index::toArray($index);\r\n                }\r\n                $indexType = array_values($columnArr['indexes'])[0]['type'];\r\n                $columnArr['key'] = substr($indexType, 0, 3);\r\n            }\r\n            return $columnArr;\r\n        });\r\n    }\r\n\r\n\/*This method is used to","code-length":238,"reference":"Describes given table.","result":"Generate the table for the given table name.","score":[0.1389,0.1429]}
{"code":"public function handle(BreadAdded $bread)\r\n    {\r\n        if (config('voyager.bread.add_permission') && file_exists(base_path('routes\/web.php'))) {\r\n            $role = Voyager::model('Role')->where('name', config('voyager.bread.default_role'))->firstOrFail();\r\n            $permissions = Voyager::model('Permission')->where(['table_name' => $bread->dataType->name])->get()->pluck('id')->all();\r\n            $role->permissions()->attach($permissions);\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":144,"reference":"Create Permission for a given BREAD.","result":"Add a new permission to a user.","score":[0.1615,0.1639]}
{"code":"protected function addStorageSymlinkAlert()\r\n    {\r\n        if (app('router')->current() !== null) {\r\n            $currentRouteAction = app('router')->current()->getAction();\r\n        } else {\r\n            $currentRouteAction = null;\r\n        }\r\n        $routeName = is_array($currentRouteAction) ? Arr::get($currentRouteAction, 'as') : null;\r\n        if ($routeName != 'voyager.dashboard') {\r\n            return;\r\n        }\r\n        $storage_disk = (!empty(config('voyager.storage.disk'))) ? config('voyager.storage.disk') : 'public';\r\n        if (request()->has('fix-missing-storage-symlink')) {\r\n            if (file_exists(public_path('storage'))) {\r\n                if (@readlink(public_path('storage')) == public_path('storage')) {\r\n                    rename(public_path('storage'), 'storage_old');\r\n                }\r\n            }\r\n            if (!file_exists(public_path('storage'))) {\r\n                $this->fixMissingStorageSymlink();\r\n            }\r\n        } elseif ($storage_disk == 'public') {\r\n            if (!file_exists(public_path('storage')) || @readlink(public_path('storage')) == public_path('storage')) {\r\n                $alert = (new Alert('missing-storage-symlink', 'warning'))\r\n                    ->title(__('voyager::error.symlink_missing_title'))\r\n                    ->text(__('voyager::error.symlink_missing_text'))\r\n                    ->button(__('voyager::error.symlink_missing_button'), '?fix-missing-storage-symlink=1');\r\n                VoyagerFacade::addAlert($alert);\r\n            }\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":384,"reference":"Add storage symlink alert.","result":"Create a new storage directory.","score":[0.2403,0.122]}
{"code":"private function registerConsoleCommands()\r\n    {\r\n        $this->commands(Commands\\InstallCommand::class);\r\n        $this->commands(Commands\\ControllersCommand::class);\r\n        $this->commands(Commands\\AdminCommand::class);\r\n    }\r\n\r\n\/*This method is used to","code-length":58,"reference":"Register the commands accessible from the Console.","result":"Register the commands in the console.","score":[0.3617,0.7014]}
{"code":"protected function cleanup($dataType, $data)\r\n    {\r\n        if (is_bread_translatable($data)) {\r\n            $data->deleteAttributeTranslations($data->getTranslatableAttributes());\r\n        }\r\n        $this->deleteBreadImages($data, $dataType->deleteRows->where('type', 'image'));\r\n        foreach ($dataType->deleteRows->where('type', 'file') as $row) {\r\n            if (isset($data->{$row->field})) {\r\n                foreach (json_decode($data->{$row->field}) as $file) {\r\n                    $this->deleteFileIfExists($file->download_link);\r\n                }\r\n            }\r\n        }\r\n        $dataType->rows->where('type', 'media_picker')->where('details.delete_files', true)->each(function ($row) use ($data) {\r\n            $content = $data->{$row->field};\r\n            if (isset($content)) {\r\n                if (!is_array($content)) {\r\n                    $content = json_decode($content);\r\n                }\r\n                if (is_array($content)) {\r\n                    foreach ($content as $file) {\r\n                        $this->deleteFileIfExists($file);\r\n                    }\r\n                } else {\r\n                    $this->deleteFileIfExists($content);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\/*This method is used to","code-length":301,"reference":"Remove translations, images and files related to a BREAD item.","result":"Delete the files that are not in the database.","score":[0.109,0.0505]}
{"code":"public function deleteBreadImages($data, $rows)\r\n    {\r\n        foreach ($rows as $row) {\r\n            if ($data->{$row->field} != config('voyager.user.default_avatar')) {\r\n                $this->deleteFileIfExists($data->{$row->field});\r\n            }\r\n            if (isset($row->details->thumbnails)) {\r\n                foreach ($row->details->thumbnails as $thumbnail) {\r\n                    $ext = explode('.', $data->{$row->field});\r\n                    $extension = '.'.$ext[count($ext) - 1];\r\n                    $path = str_replace($extension, '', $data->{$row->field});\r\n                    $thumb_name = $thumbnail->name;\r\n                    $this->deleteFileIfExists($path.'-'.$thumb_name.$extension);\r\n                }\r\n            }\r\n        }\r\n        if ($rows->count() > 0) {\r\n            event(new BreadImagesDeleted($data, $rows));\r\n        }\r\n    }\r\n\r\n\/*This method is used to","code-length":227,"reference":"Delete all images related to a BREAD item.","result":"Delete all the images in the database.","score":[0.2191,0.3235]}
{"code":"public function order(Request $request)\r\n    {\r\n        $slug = $this->getSlug($request);\r\n        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\r\n        $this->authorize('edit', app($dataType->model_name));\r\n        if (!isset($dataType->order_column) || !isset($dataType->order_display_column)) {\r\n            return redirect()\r\n            ->route(\"voyager.{$dataType->slug}.index\")\r\n            ->with([\r\n                'message'    => __('voyager::bread.ordering_not_set'),\r\n                'alert-type' => 'error',\r\n            ]);\r\n        }\r\n        $model = app($dataType->model_name);\r\n        if ($model && in_array(SoftDeletes::class, class_uses($model))) {\r\n            $model = $model->withTrashed();\r\n        }\r\n        $results = $model->orderBy($dataType->order_column, $dataType->order_direction)->get();\r\n        $display_column = $dataType->order_display_column;\r\n        $dataRow = Voyager::model('DataRow')->whereDataTypeId($dataType->id)->whereField($display_column)->first();\r\n        $view = 'voyager::bread.order';\r\n        if (view()->exists(\"voyager::$slug.order\")) {\r\n            $view = \"voyager::$slug.order\";\r\n        }\r\n        return Voyager::view($view, compact(\r\n            'dataType',\r\n            'display_column',\r\n            'dataRow',\r\n            'results'\r\n        ));\r\n    }\r\n\r\n\/*This method is used to","code-length":368,"reference":"Order BREAD items.","result":"Create a new Voyager::view($view) that display the data in the view.","score":[0,0.0]}
{"code":"public function relation(Request $request)\r\n    {\r\n        $slug = $this->getSlug($request);\r\n        $page = $request->input('page');\r\n        $on_page = 50;\r\n        $search = $request->input('search', false);\r\n        $dataType = Voyager::model('DataType')->where('slug', '=', $slug)->first();\r\n        foreach ($dataType->editRows as $key => $row) {\r\n            if ($row->field === $request->input('type')) {\r\n                $options = $row->details;\r\n                $skip = $on_page * ($page - 1);\r\n                if ($search) {\r\n                    $total_count = app($options->model)->where($options->label, 'LIKE', '%'.$search.'%')->count();\r\n                    $relationshipOptions = app($options->model)->take($on_page)->skip($skip)\r\n                        ->where($options->label, 'LIKE', '%'.$search.'%')\r\n                        ->get();\r\n                } else {\r\n                    $total_count = app($options->model)->count();\r\n                    $relationshipOptions = app($options->model)->take($on_page)->skip($skip)->get();\r\n                }\r\n                $results = [];\r\n                foreach ($relationshipOptions as $relationshipOption) {\r\n                    $results[] = [\r\n                        'id'   => $relationshipOption->{$options->key},\r\n                        'text' => $relationshipOption->{$options->label},\r\n                    ];\r\n                }\r\n                return response()->json([\r\n                    'results'    => $results,\r\n                    'pagination' => [\r\n                        'more' => ($total_count > ($skip + $on_page)),\r\n                    ],\r\n                ]);\r\n            }\r\n        }\r\n        return response()->json([], 404);\r\n    }\r\n\r\n\/*This method is used to","code-length":390,"reference":"Get BREAD relations data.","result":"Get the list of all the voyager's data types.","score":[0.1219,0.1111]}
{"code":"protected function resolveRelations($dataTypeContent, DataType $dataType)\r\n    {\r\n        if ($dataTypeContent instanceof LengthAwarePaginator) {\r\n            $dataTypeCollection = $dataTypeContent->getCollection();\r\n        }\r\n        elseif ($dataTypeContent instanceof Model) {\r\n            return $dataTypeContent;\r\n        }\r\n        else {\r\n            $dataTypeCollection = $dataTypeContent;\r\n        }\r\n        return $dataTypeContent instanceof LengthAwarePaginator ? $dataTypeContent->setCollection($dataTypeCollection) : $dataTypeCollection;\r\n    }\r\n\r\n\/*This method is used to","code-length":128,"reference":"Replace relationships' keys for labels and create READ links if a slug is provided.","result":"Convert the $dataTypeContent to a $dataTypeCollection.","score":[0.0509,0.0379]}
{"code":"protected function addSoftDelete(&$stub)\r\n    {\r\n        $traitIncl = $trait = '';\r\n        if ($this->option('softdelete')) {\r\n            $traitIncl = 'use Illuminate\\Database\\Eloquent\\SoftDeletes;';\r\n            $trait = 'use SoftDeletes;';\r\n        }\r\n        $stub = str_replace('\r\n        $stub = str_replace('\r\n        return $this;\r\n    }\r\n\r\n\/*This method is used to","code-length":100,"reference":"Add SoftDelete to the given stub.","result":"Remove the $stub from the generated code .","score":[0.1389,0.0806]}
