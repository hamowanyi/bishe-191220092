{"code":"\/*is used to<extra_id_0>\r\nfunction createInstance(defaultConfig) {\r\n  var context = new Axios(defaultConfig);\r\n  var instance = bind(Axios.prototype.request, context);\r\n  utils.extend(instance, Axios.prototype, context);\r\n  utils.extend(instance, context);\r\n  return instance;\r\n}","code-length":82,"reference":"Create an instance of Axios\n\n","result":"Create an instance.","score":[0.2964,0.3906]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CancelToken(executor) {\r\n  if (typeof executor !== 'function') {\r\n    throw new TypeError('executor must be a function.');\r\n  }\r\n  var resolvePromise;\r\n  this.promise = new Promise(function promiseExecutor(resolve) {\r\n    resolvePromise = resolve;\r\n  });\r\n  var token = this;\r\n  executor(function cancel(message) {\r\n    if (token.reason) {\r\n      return;\r\n    }\r\n    token.reason = new Cancel(message);\r\n    resolvePromise(token.reason);\r\n  });\r\n}","code-length":149,"reference":"A `CancelToken` is an object that can be used to request cancellation of an operation.\n\n","result":"Create a token for cancellation.","score":[0,0.0357]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isArrayBufferView(val) {\r\n  var result;\r\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\r\n    result = ArrayBuffer.isView(val);\r\n  } else {\r\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\r\n  }\r\n  return result;\r\n}","code-length":99,"reference":"Determine if a value is a view on an ArrayBuffer\n\n","result":"Detect ArrayBuffer views.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isStandardBrowserEnv() {\r\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\r\n                                           navigator.product === 'NativeScript' ||\r\n                                           navigator.product === 'NS')) {\r\n    return false;\r\n  }\r\n  return (\r\n    typeof window !== 'undefined' &&\r\n    typeof document !== 'undefined'\r\n  );\r\n}","code-length":105,"reference":"Both environments support XMLHttpRequest, but not fully standard globals.","result":"Detect the standard browser env.","score":[0.108,0.0581]}
{"code":"\/*is used to<extra_id_0>\r\nfunction forEach(obj, fn) {\r\n  if (obj === null || typeof obj === 'undefined') {\r\n    return;\r\n  }\r\n  if (typeof obj !== 'object') {\r\n        obj = [obj];\r\n  }\r\n  if (isArray(obj)) {\r\n    for (var i = 0, l = obj.length; i < l; i++) {\r\n      fn.call(null, obj[i], i, obj);\r\n    }\r\n  } else {\r\n    for (var key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        fn.call(null, obj[key], key, obj);\r\n      }\r\n    }\r\n  }\r\n}","code-length":189,"reference":"Iterate over an Array or an Object invoking a function for each item.\n\nIf `obj` is an Array callback will be called passing\nthe value, index, and complete array for each item.\n\nIf 'obj' is an Object callback will be called passing\nthe value, key, and complete object for each property.\n\n","result":"Avoid the use of `forEach` function.","score":[0.0001,0.0215]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extend(a, b, thisArg) {\r\n  forEach(b, function assignValue(val, key) {\r\n    if (thisArg && typeof val === 'function') {\r\n      a[key] = bind(val, thisArg);\r\n    } else {\r\n      a[key] = val;\r\n    }\r\n  });\r\n  return a;\r\n}","code-length":97,"reference":"Extends object a by mutably adding to it the properties of object b.\n\n","result":"Extend objects.","score":[0,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writePackageManifest (packageName) {\r\n  const packagePath = require.resolve(packageName + '\/package.json')\r\n  let { name, main, author, license, types, typings } = require(packagePath)\r\n  if (!main) {\r\n    main = 'index.js'\r\n  }\r\n  let typesFile = types || typings\r\n  if (typesFile) {\r\n    typesFile = require.resolve(join(packageName, typesFile))\r\n  }\r\n  const compiledPackagePath = join(__dirname, `dist\/compiled\/${packageName}`)\r\n  const potentialLicensePath = join(dirname(packagePath), '.\/LICENSE')\r\n  if (existsSync(potentialLicensePath)) {\r\n    this._.files.push({\r\n      dir: compiledPackagePath,\r\n      base: 'LICENSE',\r\n      data: readFileSync(potentialLicensePath, 'utf8')\r\n    })\r\n  }\r\n  this._.files.push({\r\n    dir: compiledPackagePath,\r\n    base: 'package.json',\r\n    data:\r\n      JSON.stringify(\r\n        Object.assign(\r\n          {},\r\n          { name, main: `${basename(main, '.' + extname(main))}` },\r\n          author ? { author } : undefined,\r\n          license ? { license } : undefined,\r\n          typesFile\r\n            ? {\r\n              types: relative(compiledPackagePath, typesFile)\r\n            }\r\n            : undefined\r\n        )\r\n      ) + '\\n'\r\n  })\r\n}","code-length":380,"reference":"This function writes a minimal `package.json` file for a compiled package. It defines `name`, `main`, `author`, and `license`. It also defines `types`. n.b. types intended for development usage only.","result":"Write the package manifest.","score":[0,0.0189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processMessage (e) {\r\n  const obj = JSON.parse(e.data)\r\n  switch (obj.action) {\r\n    case 'building': {\r\n      console.log(\r\n        '[HMR] bundle ' + (obj.name ? \"'\" + obj.name + \"' \" : '') +\r\n        'rebuilding'\r\n      )\r\n      break\r\n    }\r\n    case 'built':\r\n    case 'sync': {\r\n      clearOutdatedErrors()\r\n      if (obj.hash) {\r\n        handleAvailableHash(obj.hash)\r\n      }\r\n      if (obj.warnings.length > 0) {\r\n        handleWarnings(obj.warnings)\r\n      }\r\n      if (obj.errors.length > 0) {\r\n        if (obj.action === 'sync') {\r\n          hadRuntimeError = true\r\n        }\r\n        handleErrors(obj.errors)\r\n        break\r\n      }\r\n      handleSuccess()\r\n      break\r\n    }\r\n    default: {\r\n      if (customHmrEventHandler) {\r\n        customHmrEventHandler(obj)\r\n        break\r\n      }\r\n      break\r\n    }\r\n  }\r\n}","code-length":299,"reference":"Handle messages from the server.","result":"Handle messages from the server.","score":[1.0,0.996]}
{"code":"\/*is used to<extra_id_0>\r\nasync function tryApplyUpdates (onHotUpdateSuccess) {\r\n  if (!module.hot) {\r\n    console.error('HotModuleReplacementPlugin is not in Webpack configuration.')\r\n    return\r\n  }\r\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\r\n    return\r\n  }\r\n  function handleApplyUpdates (err, updatedModules) {\r\n    if (err || hadRuntimeError) {\r\n      if (err) {\r\n        console.warn('Error while applying updates, reloading page', err)\r\n      }\r\n      if (hadRuntimeError) {\r\n        console.warn('Had runtime error previously, reloading page')\r\n      }\r\n      window.location.reload()\r\n      return\r\n    }\r\n    if (typeof onHotUpdateSuccess === 'function') {\r\n      onHotUpdateSuccess()\r\n    }\r\n    if (isUpdateAvailable()) {\r\n      tryApplyUpdates()\r\n    }\r\n  }\r\n( {\r\n      ignoreUnaccepted: true\r\n    })\r\n    if (updatedModules) {\r\n      handleApplyUpdates(null, updatedModules)\r\n    }\r\n  } catch (err) {\r\n    handleApplyUpdates(err, null)\r\n  }\r\n}","code-length":308,"reference":"Attempt to update code on the fly, fall back to a hard reload.","result":"Apply updates on hot module reloads.","score":[0.0601,0.0813]}
{"code":"\/*is used to<extra_id_0>\r\nasync function tryApplyUpdates () {\r\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\r\n    return\r\n  }\r\n  try {\r\n    const res = await fetch(`${hotUpdatePath}${curHash}.hot-update.json`)\r\n    const data = await res.json()\r\n    const curPage = page === '\/' ? 'index' : page\r\n    const pageUpdated = Object.keys(data.c)\r\n      .some(mod => {\r\n        return (\r\n          mod.indexOf(`pages${curPage.substr(0, 1) === '\/' ? curPage : `\/${curPage}`}`) !== -1 ||\r\n          mod.indexOf(`pages${curPage.substr(0, 1) === '\/' ? curPage : `\/${curPage}`}`.replace(\/\\\r\n        )\r\n      })\r\n    if (pageUpdated) {\r\n      document.location.reload(true)\r\n    } else {\r\n      curHash = mostRecentHash\r\n    }\r\n  } catch (err) {\r\n    console.error('Error occurred checking for update', err)\r\n    document.location.reload(true)\r\n  }\r\n}","code-length":289,"reference":"This function reads code updates on the fly and hard reloads the page when it has changed.","result":"Check for updates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatMessage (message, isError) {\r\n  let lines = message.split('\\n')\r\nt(line))\r\n  lines = lines.map(line => {\r\n    const parsingError = \/Line (\\d+):(?:(\\d+):)?\\s*Parsing error: (.+)$\/.exec(\r\n      line\r\n    )\r\n    if (!parsingError) {\r\n      return line\r\n    }\r\n    const [, errorLine, errorColumn, errorMessage] = parsingError\r\n    return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`\r\n  })\r\n  message = lines.join('\\n')\r\n  message = message.replace(\r\n    \/SyntaxError\\s+\\((\\d+):(\\d+)\\)\\s*(.+?)\\n\/g,\r\n    `${friendlySyntaxErrorLabel} $3 ($1:$2)\\n`\r\n  )\r\n  message = message.replace(\/Line (\\d+):\\d+:\/g, 'Line $1:')\r\n  message = message.replace(\r\n    \/^.*export '(.+?)' was not found in '(.+?)'.*$\/gm,\r\n    `Attempted import error: '$1' is not exported from '$2'.`\r\n  )\r\n  message = message.replace(\r\n    \/^.*export 'default' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$\/gm,\r\n    `Attempted import error: '$2' does not contain a default export (imported as '$1').`\r\n  )\r\n  message = message.replace(\r\n    \/^.*export '(.+?)' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$\/gm,\r\n    `Attempted import error: '$1' is not exported from '$3' (imported as '$2').`\r\n  )\r\n  lines = message.split('\\n')\r\n  if (lines.length > 2 && lines[1].trim() === '') {\r\n    lines.splice(1, 1)\r\n  }\r\n  lines[0] = lines[0].replace(\/^(.*) \\d+:\\d+-\\d+$\/, '$1')\r\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\r\n    lines = [\r\n      lines[0],\r\n      lines[1]\r\n        .replace('Error: ', '')\r\n        .replace('Module not found: Cannot find file:', 'Cannot find file:')\r\n    ]\r\n  }\r\n  message = lines.join('\\n')\r\nebpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)\/gm,\r\n    ''\r\n  )\r\n  message = message.replace(\/^\\s*at\\s<anonymous>(\\n|$)\/gm, '')\r\n  lines = message.split('\\n')\r\n  lines = lines.filter(\r\n    (line, index, arr) =>\r\n      index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()\r\n  )\r\n  message = lines.join('\\n')\r\n  return message.trim()\r\n}","code-length":747,"reference":"Cleans up webpack error messages. eslint-disable-next-line no-unused-vars","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction UDecimalPad(num, precision) {\r\n    var value = UDecimalString(num);\r\n    assert.equal(\"number\", typeof precision === 'undefined' ? 'undefined' : (0, _typeof3.default)(precision), \"precision\");\r\n    var part = value.split(\".\");\r\n    if (precision === 0 && part.length === 1) {\r\n        return part[0];\r\n    }\r\n    if (part.length === 1) {\r\n        return part[0] + '.' + \"0\".repeat(precision);\r\n    } else {\r\n        var pad = precision - part[1].length;\r\n        assert(pad >= 0, 'decimal \\'' + value + '\\' exceeds precision ' + precision);\r\n        return part[0] + '.' + part[1] + \"0\".repeat(pad);\r\n    }\r\n}","code-length":207,"reference":"Ensure a fixed number of decimal places.  Safe for large numbers.\n\n","result":"Pad decimal numbers.","score":[0.0337,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseSegment(buffer, offset) {\r\n    let typeKey = buffer[offset];\r\n    if (typeKey <= 20) {\r\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: No value for uint8\");\r\n        return { typeKey: typeKey, value: buffer[offset + 1], bufferLength: 2 };\r\n    }\r\n    if (typeKey <= 40) {\r\n        if (buffer[offset + 2] == undefined) throw new Error(\"ParseError: Incomplete value for uint16\");\r\n        return { typeKey: typeKey, value: buffer.readUInt16BE(offset + 1), bufferLength: 3 };\r\n    }\r\n    else if (typeKey <= 90) {\r\n        if (buffer[offset + 4] == undefined) throw new Error(\"ParseError: Incomplete value for uint32\");\r\n        return { typeKey: typeKey, value: buffer.readUInt32BE(offset + 1), bufferLength: 5 };\r\n    }\r\n    else if (typeKey <= 155) {\r\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: Incomplete length value for string\");\r\n        let len = buffer.readUInt8(offset + 1);\r\n        if (buffer[offset + 1 + len] == undefined) throw new Error(\"ParseError: Incomplete value for string\");\r\n        let value = buffer.toString(\"utf8\", offset + 2, offset + 2 + len);\r\n        return { typeKey: typeKey, value: value, bufferLength: 2 + len };\r\n    }\r\n    else if (typeKey <= 165) {\r\n        if (buffer[offset + 16] == undefined) throw new Error(\"ParseError: Incomplete value for uuid\");\r\n        let len = 16;\r\n        let value = new Buffer(len);\r\n        buffer.copy(value, 0, offset + 1, offset + 1 + len);\r\n        return { typeKey: typeKey, value: value, bufferLength: 1 + len };\r\n    }\r\n    else if (typeKey <= 180) {\r\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: Incomplete length value for byte string\");\r\n        let len = buffer.readUInt8(offset + 1);\r\n        if (buffer[offset + len + 1] == undefined) throw new Error(\"ParseError: Incomplete value for byte string\");\r\n        let value = new Buffer(len);\r\n        buffer.copy(value, 0, offset + 2, offset + 2 + len);\r\n        return { typeKey: typeKey, value: value, bufferLength: 2 + len };\r\n    }\r\n    else {\r\n        throw new Error(\"typeKey not supported\");\r\n    }\r\n}","code-length":648,"reference":"Parse a segment and convert it into json.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseSegments(buffer) {\r\n    if (buffer.length == 0) throw new Error(\"bad segments stream\");\r\n    let pointer = 0;\r\n    let segments = [ ];\r\n    while (pointer < buffer.length) {\r\n        let seg = parseSegment(buffer, pointer);\r\n        segments.push(seg);\r\n        pointer += seg.bufferLength;\r\n        delete seg.bufferLength;\r\n    }\r\n    if (pointer != buffer.length) {\r\n        throw new Error(\"Bad \/ incomplete segments\");\r\n    }\r\n    return segments;\r\n}","code-length":146,"reference":"Parse a buffer to a array of segments\n","result":"Parse segments stream.","score":[0.0917,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseQRCode(text, options) {\r\n    if (text.length < 3 || text.length > 2000) throw new Error(\"Invalid length of EvtLink\");\r\n    let textSplited = text.split(\"_\");\r\n    if (textSplited.length > 2) return null;\r\n    let rawText;\r\n    if (textSplited[0].startsWith(qrPrefix)) {\r\n        rawText = textSplited[0].substr(qrPrefix.length);\r\n    }\r\n    else {\r\n        rawText = textSplited[0];\r\n    }\r\n        let segmentsBytes = EvtLink.dec2b(rawText);\r\n    if (segmentsBytes.length < 2) throw new Error(\"no flag in segment\");\r\n    let flag = segmentsBytes.readInt16BE(0);\r\n        if ((flag & 1) == 0) {\r\n        throw new Error(\"The EvtLink is invalid or its version is newer than version 1 and is not supported by evtjs yet\");\r\n    }\r\n    let segmentsBytesRaw = new Buffer(segmentsBytes.length - 2);\r\n    segmentsBytes.copy(segmentsBytesRaw, 0, 2, segmentsBytes.length);\r\n    let publicKeys = [ ];\r\n    let signatures = [ ];\r\n    if (textSplited[1]) {\r\n        let buf = EvtLink.dec2b(textSplited[1]);\r\n        let i = 0;\r\n        if (buf.length % 65 !== 0) {\r\n            throw new Error(\"length of signature is invalid\");\r\n        }\r\n        while (i * 65 < buf.length) {\r\n            let current = new Buffer(65);\r\n            buf.copy(current, 0, i * 65, i * 65 + 65);\r\n            let signature = ecc.Signature.fromBuffer(current);\r\n            signatures.push(signature.toString());\r\n            if (!options || options.recoverPublicKeys) {\r\n                publicKeys.push(signature.recover(segmentsBytes).toString());\r\n            }\r\n            ++i;\r\n        }\r\n    }\r\n    return { flag, segments: parseSegments(segmentsBytesRaw), publicKeys, signatures };\r\n}","code-length":525,"reference":"Parse a everiToken's QRCode Text\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function __calcKeyProvider(keyProvider) {\r\n    if (!keyProvider) { return []; }\r\n    if (keyProvider.apply && keyProvider.call) {\r\n        keyProvider = keyProvider();\r\n    }\r\n    keyProvider = await Promise.resolve(keyProvider);\r\n    if (!Array.isArray(keyProvider)) {\r\n        keyProvider = [ keyProvider ];\r\n    }\r\n    for (let key of keyProvider) {\r\n        if (!EvtKey.isValidPrivateKey(key)) {\r\n            throw new Error(\"Invalid private key\");\r\n        }\r\n    }\r\n    return keyProvider;\r\n}","code-length":160,"reference":"Calculate the value of keyProvider\n","result":"Calculate the key provider.","score":[0.3519,0.3827]}
{"code":"\/*is used to<extra_id_0>\r\nfunction random32ByteBuffer({cpuEntropyBits = 0, safe = true} = {}) {\r\n    assert.equal(typeof cpuEntropyBits, \"number\", \"cpuEntropyBits\");\r\n    assert.equal(typeof safe, \"boolean\", \"boolean\");\r\n    if(safe) {\r\n        assert(entropyCount >= 128, \"Call initialize() to add entropy (current: \" + entropyCount + \")\");\r\n    }\r\n    const hash_array = [];\r\n    hash_array.push(randomBytes(32));\r\n    hash_array.push(Buffer.from(cpuEntropy(cpuEntropyBits)));\r\n    hash_array.push(externalEntropyArray);\r\n    hash_array.push(browserEntropy());\r\n    return hash.sha256(Buffer.concat(hash_array));\r\n}","code-length":193,"reference":"Additional forms of entropy are used.  A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.\n\n","result":"Generate random .","score":[0.0001,0.0379]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addEntropy(...ints) {\r\n    assert.equal(externalEntropyArray.length, 101, \"externalEntropyArray\");\r\n    entropyCount += ints.length;\r\n    for(const i of ints) {\r\n        const pos = entropyPos++ % 101;\r\n        const i2 = externalEntropyArray[pos] += i;\r\n        if(i2 > 9007199254740991)\r\n            externalEntropyArray[pos] = 0;\r\n    }\r\n}","code-length":122,"reference":"Adds entropy.  This may be called many times while the amount of data saved\nis accumulatively reduced to 101 integers.  Data is retained in RAM for the\nlife of this module.\n\n","result":"Add entropy to the external entropy array.","score":[0.0062,0.0524]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cpuEntropy(cpuEntropyBits = 128) {\r\n    let collected = [];\r\n    let lastCount = null;\r\n    let lowEntropySamples = 0;\r\n    while(collected.length < cpuEntropyBits) {\r\n        const count = floatingPointCount();\r\n        if(lastCount != null) {\r\n            const delta = count - lastCount;\r\n            if(Math.abs(delta) < 1) {\r\n                lowEntropySamples++;\r\n                continue;\r\n            }\r\n            const bits = Math.floor(log2(Math.abs(delta)) + 1);\r\n            if(bits < 4) {\r\n                if(bits < 2) {\r\n                    lowEntropySamples++;\r\n                }\r\n                continue;\r\n            }\r\n            collected.push(delta);\r\n        }\r\n        lastCount = count;\r\n    }\r\n    if(lowEntropySamples > 10) {\r\n        const pct = Number(lowEntropySamples \/ cpuEntropyBits * 100).toFixed(2);\r\n        console.warn(`WARN: ${pct}% low CPU entropy re-sampled`);\r\n    }\r\n    return collected;\r\n}","code-length":286,"reference":"This runs in just under 1 second and ensures a minimum of cpuEntropyBits\nbits of entropy are gathered.\n\nBased on more-entropy. ","result":"Calculate the CPU entropy.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cryptoJsDecrypt(message, key, iv) {\r\n    assert(message, \"Missing cipher text\");\r\n    message = toBinaryBuffer(message);\r\n    const decipher = crypto.createDecipheriv(\"aes-256-cbc\", key, iv);\r\n    message = Buffer.concat([decipher.update(message), decipher.final()]);\r\n    return message;\r\n}","code-length":99,"reference":"This method does not use a checksum, the returned data must be validated some other way.\n\n","result":"Decrypt messages.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initialize() {\r\n    if(initialized) {\r\n        return;\r\n    }\r\n    unitTest();\r\n    keyUtils.addEntropy(...keyUtils.cpuEntropy());\r\n    assert(keyUtils.entropyCount() >= 128, \"insufficient entropy\");\r\n    initialized = true;\r\n}","code-length":80,"reference":"Run self-checking code and gather CPU entropy.\n\nInitialization happens once even if called multiple times.\n\n","result":"Initialize the library.","score":[0,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction montConvert(x) {\r\n  var r = new BigInteger()\r\n  x.abs()\r\n    .dlShiftTo(this.m.t, r)\r\n  r.divRemTo(this.m, null, r)\r\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\r\n  return r\r\n}","code-length":108,"reference":"xR mod m","result":"Convert montConvert to mont.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction verify(data, pubkey, encoding = \"utf8\") {\r\n        if (typeof data === \"string\") {\r\n            data = Buffer.from(data, encoding);\r\n        }\r\n        assert(Buffer.isBuffer(data), \"data is a required String or Buffer\");\r\n        data = hash.sha256(data);\r\n        return verifyHash(data, pubkey);\r\n    }","code-length":100,"reference":"Verify signed data.\n\n","result":"Verify the signature.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction recover(data, encoding = \"utf8\") {\r\n        if (typeof data === \"string\") {\r\n            data = Buffer.from(data, encoding);\r\n        }\r\n        assert(Buffer.isBuffer(data), \"data is a required String or Buffer\");\r\n        data = hash.sha256(data);\r\n        return recoverHash(data);\r\n    }","code-length":96,"reference":"Recover the public key used to create this signature using full data.\n\n","result":"Recover a string or Buffer.","score":[0.0593,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction invokeWith(msg) {\r\n\t\r\n\tprint('Finding comments in ' + msg.getRequestHeader().getURI().toString()); \r\n\tvar body = msg.getResponseBody().toString()\r\n\t\r\n\tif (body.indexOf('<!--') > 0) {\r\n\t\tvar o = body.indexOf('<!--');\r\n\t\twhile (o > 0) {\r\n\t\t\tvar e = body.indexOf('-->', o);\r\n\t\t\tprint(\"\\t\" + body.substr(o,e-o+3)) \r\n\t\t\to = body.indexOf('<!--', e);\r\n\t\t}\r\n\t}\r\n}","code-length":161,"reference":"Targeted scripts can only be invoked by you, the user, eg via a right-click option on the Sites or History tabs","result":"Invoke the with function.","score":[0.0046,0.0518]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FormGroup(props) {\r\n  const { children, className, grouped, inline, unstackable, widths } = props\r\n  const classes = cx(\r\n    useKeyOnly(grouped, 'grouped'),\r\n    useKeyOnly(inline, 'inline'),\r\n    useKeyOnly(unstackable, 'unstackable'),\r\n    useWidthProp(widths, null, true),\r\n    'fields',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(FormGroup, props)\r\n  const ElementType = getElementType(FormGroup, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":181,"reference":"A set of fields can appear grouped together.\n","result":"Render the form .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Loader(props) {\r\n  const {\r\n    active,\r\n    children,\r\n    className,\r\n    content,\r\n    disabled,\r\n    indeterminate,\r\n    inline,\r\n    inverted,\r\n    size,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    size,\r\n    useKeyOnly(active, 'active'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(indeterminate, 'indeterminate'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(children || content, 'text'),\r\n    useKeyOrValueAndKey(inline, 'inline'),\r\n    'loader',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Loader, props)\r\n  const ElementType = getElementType(Loader, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":267,"reference":"A loader alerts a user to wait for an activity to complete.\n","result":"Render the loader .","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ItemContent(props) {\r\n  const { children, className, content, description, extra, header, meta, verticalAlign } = props\r\n  const classes = cx(useVerticalAlignProp(verticalAlign), 'content', className)\r\n  const rest = getUnhandledProps(ItemContent, props)\r\n  const ElementType = getElementType(ItemContent, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {ItemHeader.create(header, { autoGenerateKey: false })}\r\n      {ItemMeta.create(meta, { autoGenerateKey: false })}\r\n      {ItemDescription.create(description, { autoGenerateKey: false })}\r\n      {ItemExtra.create(extra, { autoGenerateKey: false })}\r\n      {content}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":258,"reference":"An item can contain content.","result":"Render the item content.","score":[0.2959,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Table(props) {\r\n  const {\r\n    attached,\r\n    basic,\r\n    celled,\r\n    children,\r\n    className,\r\n    collapsing,\r\n    color,\r\n    columns,\r\n    compact,\r\n    definition,\r\n    fixed,\r\n    footerRow,\r\n    headerRow,\r\n    headerRows,\r\n    inverted,\r\n    padded,\r\n    renderBodyRow,\r\n    selectable,\r\n    singleLine,\r\n    size,\r\n    sortable,\r\n    stackable,\r\n    striped,\r\n    structured,\r\n    tableData,\r\n    textAlign,\r\n    unstackable,\r\n    verticalAlign,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useKeyOnly(celled, 'celled'),\r\n    useKeyOnly(collapsing, 'collapsing'),\r\n    useKeyOnly(definition, 'definition'),\r\n    useKeyOnly(fixed, 'fixed'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(selectable, 'selectable'),\r\n    useKeyOnly(singleLine, 'single line'),\r\n    useKeyOnly(sortable, 'sortable'),\r\n    useKeyOnly(stackable, 'stackable'),\r\n    useKeyOnly(striped, 'striped'),\r\n    useKeyOnly(structured, 'structured'),\r\n    useKeyOnly(unstackable, 'unstackable'),\r\n    useKeyOrValueAndKey(attached, 'attached'),\r\n    useKeyOrValueAndKey(basic, 'basic'),\r\n    useKeyOrValueAndKey(compact, 'compact'),\r\n    useKeyOrValueAndKey(padded, 'padded'),\r\n    useTextAlignProp(textAlign),\r\n    useVerticalAlignProp(verticalAlign),\r\n    useWidthProp(columns, 'column'),\r\n    'table',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Table, props)\r\n  const ElementType = getElementType(Table, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const hasHeaderRows = headerRow || headerRows\r\n  const headerShorthandOptions = { defaultProps: { cellAs: 'th' } }\r\n  const headerElement = hasHeaderRows && (\r\n    <TableHeader>\r\n      {TableRow.create(headerRow, headerShorthandOptions)}\r\n      {_.map(headerRows, (data) => TableRow.create(data, headerShorthandOptions))}\r\n    <\/TableHeader>\r\n  )\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {headerElement}\r\n      <TableBody>\r\n        {renderBodyRow &&\r\n          _.map(tableData, (data, index) => TableRow.create(renderBodyRow(data, index)))}\r\n      <\/TableBody>\r\n      {footerRow && <TableFooter>{TableRow.create(footerRow)}<\/TableFooter>}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":779,"reference":"A table displays a collections of data grouped into rows.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Rail(props) {\r\n  const {\r\n    attached,\r\n    children,\r\n    className,\r\n    close,\r\n    content,\r\n    dividing,\r\n    internal,\r\n    position,\r\n    size,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    position,\r\n    size,\r\n    useKeyOnly(attached, 'attached'),\r\n    useKeyOnly(dividing, 'dividing'),\r\n    useKeyOnly(internal, 'internal'),\r\n    useKeyOrValueAndKey(close, 'close'),\r\n    'rail',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Rail, props)\r\n  const ElementType = getElementType(Rail, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":245,"reference":"A rail is used to show accompanying content outside the boundaries of the main view of a site.","result":"Render the Rail .","score":[0.0096,0.0904]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ButtonGroup(props) {\r\n  const {\r\n    attached,\r\n    basic,\r\n    buttons,\r\n    children,\r\n    className,\r\n    color,\r\n    compact,\r\n    content,\r\n    floated,\r\n    fluid,\r\n    icon,\r\n    inverted,\r\n    labeled,\r\n    negative,\r\n    positive,\r\n    primary,\r\n    secondary,\r\n    size,\r\n    toggle,\r\n    vertical,\r\n    widths,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useKeyOnly(basic, 'basic'),\r\n    useKeyOnly(compact, 'compact'),\r\n    useKeyOnly(fluid, 'fluid'),\r\n    useKeyOnly(icon, 'icon'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(labeled, 'labeled'),\r\n    useKeyOnly(negative, 'negative'),\r\n    useKeyOnly(positive, 'positive'),\r\n    useKeyOnly(primary, 'primary'),\r\n    useKeyOnly(secondary, 'secondary'),\r\n    useKeyOnly(toggle, 'toggle'),\r\n    useKeyOnly(vertical, 'vertical'),\r\n    useKeyOrValueAndKey(attached, 'attached'),\r\n    useValueAndKey(floated, 'floated'),\r\n    useWidthProp(widths),\r\n    'buttons',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(ButtonGroup, props)\r\n  const ElementType = getElementType(ButtonGroup, props)\r\n  if (_.isNil(buttons)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {childrenUtils.isNil(children) ? content : children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {_.map(buttons, button => Button.create(button))}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":505,"reference":"Buttons can be grouped.","result":"Render the button group .","score":[0,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GridRow(props) {\r\n  const {\r\n    centered,\r\n    children,\r\n    className,\r\n    color,\r\n    columns,\r\n    divided,\r\n    only,\r\n    reversed,\r\n    stretched,\r\n    textAlign,\r\n    verticalAlign,\r\n  } = props\r\n  const classes = cx(\r\n    color,\r\n    useKeyOnly(centered, 'centered'),\r\n    useKeyOnly(divided, 'divided'),\r\n    useKeyOnly(stretched, 'stretched'),\r\n    useMultipleProp(only, 'only'),\r\n    useMultipleProp(reversed, 'reversed'),\r\n    useTextAlignProp(textAlign),\r\n    useVerticalAlignProp(verticalAlign),\r\n    useWidthProp(columns, 'column', true),\r\n    'row',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(GridRow, props)\r\n  const ElementType = getElementType(GridRow, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":288,"reference":"A row sub-component for Grid.","result":"Render the grid row .","score":[0.2403,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FormField(props) {\r\n  const {\r\n    children,\r\n    className,\r\n    content,\r\n    control,\r\n    disabled,\r\n    error,\r\n    inline,\r\n    label,\r\n    required,\r\n    type,\r\n    width,\r\n  } = props\r\n  const classes = cx(\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(error, 'error'),\r\n    useKeyOnly(inline, 'inline'),\r\n    useKeyOnly(required, 'required'),\r\n    useWidthProp(width, 'wide'),\r\n    'field',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(FormField, props)\r\n  const ElementType = getElementType(FormField, props)\r\n  if (_.isNil(control)) {\r\n    if (_.isNil(label)) {\r\n      return (\r\n        <ElementType {...rest} className={classes}>\r\n          {childrenUtils.isNil(children) ? content : children}\r\n        <\/ElementType>\r\n      )\r\n    }\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {createHTMLLabel(label, { autoGenerateKey: false })}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const controlProps = { ...rest, content, children, disabled, required, type }\r\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\r\n    return (\r\n      <ElementType className={classes}>\r\n        <label>\r\n          {createElement(control, controlProps)} {label}\r\n        <\/label>\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (control === Checkbox || control === Radio) {\r\n    return (\r\n      <ElementType className={classes}>\r\n        {createElement(control, { ...controlProps, label })}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType className={classes}>\r\n      {createHTMLLabel(label, {\r\n        defaultProps: { htmlFor: _.get(controlProps, 'id') },\r\n        autoGenerateKey: false,\r\n      })}\r\n      {createElement(control, controlProps)}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":564,"reference":"A field is a form element containing a label and an input.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CardContent(props) {\r\n  const { children, className, content, description, extra, header, meta, textAlign } = props\r\n  const classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className)\r\n  const rest = getUnhandledProps(CardContent, props)\r\n  const ElementType = getElementType(CardContent, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {createShorthand(CardHeader, val => ({ content: val }), header, { autoGenerateKey: false })}\r\n      {createShorthand(CardMeta, val => ({ content: val }), meta, { autoGenerateKey: false })}\r\n      {createShorthand(CardDescription, val => ({ content: val }), description, {\r\n        autoGenerateKey: false,\r\n      })}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":332,"reference":"A card can contain blocks of content or extra content meant to be formatted separately from the main content.","result":"Render the card content.","score":[0.0099,0.0857]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Item(props) {\r\n  const { children, className, content, description, extra, header, image, meta } = props\r\n  const classes = cx('item', className)\r\n  const rest = getUnhandledProps(Item, props)\r\n  const ElementType = getElementType(Item, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {ItemImage.create(image, { autoGenerateKey: false })}\r\n      <ItemContent\r\n        content={content}\r\n        description={description}\r\n        extra={extra}\r\n        header={header}\r\n        meta={meta}\r\n      \/>\r\n    <\/ElementType>\r\n  )\r\n}","code-length":227,"reference":"An item view presents large collections of site content for display.","result":"Render the item.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CommentAvatar(props) {\r\n  const { className, src } = props\r\n  const classes = cx('avatar', className)\r\n  const rest = getUnhandledProps(CommentAvatar, props)\r\n  const [imageProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\r\n  const ElementType = getElementType(CommentAvatar, props)\r\n  return (\r\n    <ElementType {...rootProps} className={classes}>\r\n      {createHTMLImage(src, { autoGenerateKey: false, defaultProps: imageProps })}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":153,"reference":"A comment can contain an image or avatar.","result":"Render the comment avatar .","score":[0.1319,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction StatisticLabel(props) {\r\n  const { children, className, content } = props\r\n  const classes = cx('label', className)\r\n  const rest = getUnhandledProps(StatisticLabel, props)\r\n  const ElementType = getElementType(StatisticLabel, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":121,"reference":"A statistic can contain a label to help provide context for the presented value.","result":"Render the StatisticLabel .","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FeedMeta(props) {\r\n  const { children, className, content, like } = props\r\n  const classes = cx('meta', className)\r\n  const rest = getUnhandledProps(FeedMeta, props)\r\n  const ElementType = getElementType(FeedMeta, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {createShorthand(FeedLike, val => ({ content: val }), like, { autoGenerateKey: false })}\r\n      {content}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":193,"reference":"A feed can contain a meta.","result":"Render the feed meta .","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Container(props) {\r\n  const { children, className, content, fluid, text, textAlign } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(text, 'text'),\r\n    useKeyOnly(fluid, 'fluid'),\r\n    useTextAlignProp(textAlign),\r\n    'container',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Container, props)\r\n  const ElementType = getElementType(Container, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":178,"reference":"A container limits content to a maximum width.","result":"Render the container .","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction StepGroup(props) {\r\n  const {\r\n    attached,\r\n    children,\r\n    className,\r\n    content,\r\n    fluid,\r\n    items,\r\n    ordered,\r\n    size,\r\n    stackable,\r\n    unstackable,\r\n    vertical,\r\n    widths,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    size,\r\n    useKeyOnly(fluid, 'fluid'),\r\n    useKeyOnly(ordered, 'ordered'),\r\n    useKeyOnly(unstackable, 'unstackable'),\r\n    useKeyOnly(vertical, 'vertical'),\r\n    useKeyOrValueAndKey(attached, 'attached'),\r\n    useValueAndKey(stackable, 'stackable'),\r\n    useWidthProp(widths),\r\n    'steps',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(StepGroup, props)\r\n  const ElementType = getElementType(StepGroup, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {_.map(items, item => Step.create(item))}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":403,"reference":"A set of steps.","result":"Render the step group .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Divider(props) {\r\n  const {\r\n    children,\r\n    className,\r\n    clearing,\r\n    content,\r\n    fitted,\r\n    hidden,\r\n    horizontal,\r\n    inverted,\r\n    section,\r\n    vertical,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(clearing, 'clearing'),\r\n    useKeyOnly(fitted, 'fitted'),\r\n    useKeyOnly(hidden, 'hidden'),\r\n    useKeyOnly(horizontal, 'horizontal'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(section, 'section'),\r\n    useKeyOnly(vertical, 'vertical'),\r\n    'divider',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Divider, props)\r\n  const ElementType = getElementType(Divider, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":274,"reference":"A divider visually segments content into groups.","result":"Render the divider .","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Header(props) {\r\n  const {\r\n    attached,\r\n    block,\r\n    children,\r\n    className,\r\n    color,\r\n    content,\r\n    disabled,\r\n    dividing,\r\n    floated,\r\n    icon,\r\n    image,\r\n    inverted,\r\n    size,\r\n    sub,\r\n    subheader,\r\n    textAlign,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useKeyOnly(block, 'block'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(dividing, 'dividing'),\r\n    useValueAndKey(floated, 'floated'),\r\n    useKeyOnly(icon === true, 'icon'),\r\n    useKeyOnly(image === true, 'image'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(sub, 'sub'),\r\n    useKeyOrValueAndKey(attached, 'attached'),\r\n    useTextAlignProp(textAlign),\r\n    'header',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Header, props)\r\n  const ElementType = getElementType(Header, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const iconElement = Icon.create(icon, { autoGenerateKey: false })\r\n  const imageElement = Image.create(image, { autoGenerateKey: false })\r\n  const subheaderElement = HeaderSubheader.create(subheader, { autoGenerateKey: false })\r\n  if (iconElement || imageElement) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {iconElement || imageElement}\r\n        {(content || subheaderElement) && (\r\n          <HeaderContent>\r\n            {content}\r\n            {subheaderElement}\r\n          <\/HeaderContent>\r\n        )}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {content}\r\n      {subheaderElement}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":579,"reference":"A header provides a short summary of content","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Grid(props) {\r\n  const {\r\n    celled,\r\n    centered,\r\n    children,\r\n    className,\r\n    columns,\r\n    container,\r\n    divided,\r\n    doubling,\r\n    inverted,\r\n    padded,\r\n    relaxed,\r\n    reversed,\r\n    stackable,\r\n    stretched,\r\n    textAlign,\r\n    verticalAlign,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(centered, 'centered'),\r\n    useKeyOnly(container, 'container'),\r\n    useKeyOnly(doubling, 'doubling'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(stackable, 'stackable'),\r\n    useKeyOnly(stretched, 'stretched'),\r\n    useKeyOrValueAndKey(celled, 'celled'),\r\n    useKeyOrValueAndKey(divided, 'divided'),\r\n    useKeyOrValueAndKey(padded, 'padded'),\r\n    useKeyOrValueAndKey(relaxed, 'relaxed'),\r\n    useMultipleProp(reversed, 'reversed'),\r\n    useTextAlignProp(textAlign),\r\n    useVerticalAlignProp(verticalAlign),\r\n    useWidthProp(columns, 'column', true),\r\n    'grid',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Grid, props)\r\n  const ElementType = getElementType(Grid, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":416,"reference":"A grid is used to harmonize negative space in a layout.","result":"Render the grid .","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Breadcrumb(props) {\r\n  const { children, className, divider, icon, sections, size } = props\r\n  const classes = cx('ui', size, 'breadcrumb', className)\r\n  const rest = getUnhandledProps(Breadcrumb, props)\r\n  const ElementType = getElementType(Breadcrumb, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const childElements = []\r\n  _.each(sections, (section, index) => {\r\n    const breadcrumbElement = BreadcrumbSection.create(section)\r\n    childElements.push(breadcrumbElement)\r\n    if (index !== sections.length - 1) {\r\n      const key = `${breadcrumbElement.key}_divider` || JSON.stringify(section)\r\n      childElements.push(BreadcrumbDivider.create({ content: divider, icon, key }))\r\n    }\r\n  })\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childElements}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":295,"reference":"A breadcrumb is used to show hierarchy between content.","result":"Render the breadcrumb.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CardDescription(props) {\r\n  const { children, className, content, textAlign } = props\r\n  const classes = cx(useTextAlignProp(textAlign), 'description', className)\r\n  const rest = getUnhandledProps(CardDescription, props)\r\n  const ElementType = getElementType(CardDescription, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":132,"reference":"A card can contain a description with one or more paragraphs.","result":"Render the card description .","score":[0.0861,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ItemGroup(props) {\r\n  const { children, className, content, divided, items, link, relaxed, unstackable } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(divided, 'divided'),\r\n    useKeyOnly(link, 'link'),\r\n    useKeyOnly(unstackable, 'unstackable'),\r\n    useKeyOrValueAndKey(relaxed, 'relaxed'),\r\n    'items',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(ItemGroup, props)\r\n  const ElementType = getElementType(ItemGroup, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const itemsJSX = _.map(items, (item) => {\r\n    const { childKey, ...itemProps } = item\r\n    const finalKey =\r\n      childKey ||\r\n      [itemProps.content, itemProps.description, itemProps.header, itemProps.meta].join('-')\r\n    return <Item {...itemProps} key={finalKey} \/>\r\n  })\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {itemsJSX}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":403,"reference":"A group of items.","result":"Render the ItemGroup .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GridColumn(props) {\r\n  const {\r\n    children,\r\n    className,\r\n    computer,\r\n    color,\r\n    floated,\r\n    largeScreen,\r\n    mobile,\r\n    only,\r\n    stretched,\r\n    tablet,\r\n    textAlign,\r\n    verticalAlign,\r\n    widescreen,\r\n    width,\r\n  } = props\r\n  const classes = cx(\r\n    color,\r\n    useKeyOnly(stretched, 'stretched'),\r\n    useMultipleProp(only, 'only'),\r\n    useTextAlignProp(textAlign),\r\n    useValueAndKey(floated, 'floated'),\r\n    useVerticalAlignProp(verticalAlign),\r\n    useWidthProp(computer, 'wide computer'),\r\n    useWidthProp(largeScreen, 'wide large screen'),\r\n    useWidthProp(mobile, 'wide mobile'),\r\n    useWidthProp(tablet, 'wide tablet'),\r\n    useWidthProp(widescreen, 'wide widescreen'),\r\n    useWidthProp(width, 'wide'),\r\n    'column',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(GridColumn, props)\r\n  const ElementType = getElementType(GridColumn, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":353,"reference":"A column sub-component for Grid.","result":"Render the column .","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ItemImage(props) {\r\n  const { size } = props\r\n  const rest = getUnhandledProps(ItemImage, props)\r\n  return <Image {...rest} size={size} ui={!!size} wrapped \/>\r\n}","code-length":64,"reference":"An item can contain an image.","result":"Render the image .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CardGroup(props) {\r\n  const {\r\n    centered,\r\n    children,\r\n    className,\r\n    content,\r\n    doubling,\r\n    items,\r\n    itemsPerRow,\r\n    stackable,\r\n    textAlign,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(centered, 'centered'),\r\n    useKeyOnly(doubling, 'doubling'),\r\n    useKeyOnly(stackable, 'stackable'),\r\n    useTextAlignProp(textAlign),\r\n    useWidthProp(itemsPerRow),\r\n    'cards',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(CardGroup, props)\r\n  const ElementType = getElementType(CardGroup, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const itemsJSX = _.map(items, (item) => {\r\n    const key = item.key || [item.header, item.description].join('-')\r\n    return <Card key={key} {...item} \/>\r\n  })\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {itemsJSX}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":411,"reference":"A group of cards.","result":"Render the card group.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TableRow(props) {\r\n  const {\r\n    active,\r\n    cellAs,\r\n    cells,\r\n    children,\r\n    className,\r\n    disabled,\r\n    error,\r\n    negative,\r\n    positive,\r\n    textAlign,\r\n    verticalAlign,\r\n    warning,\r\n  } = props\r\n  const classes = cx(\r\n    useKeyOnly(active, 'active'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(error, 'error'),\r\n    useKeyOnly(negative, 'negative'),\r\n    useKeyOnly(positive, 'positive'),\r\n    useKeyOnly(warning, 'warning'),\r\n    useTextAlignProp(textAlign),\r\n    useVerticalAlignProp(verticalAlign),\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(TableRow, props)\r\n  const ElementType = getElementType(TableRow, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {_.map(cells, cell => TableCell.create(cell, { defaultProps: { as: cellAs } }))}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":345,"reference":"A table can have rows.","result":"Render the table row.","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FeedEvent(props) {\r\n  const {\r\n    content,\r\n    children,\r\n    className,\r\n    date,\r\n    extraImages,\r\n    extraText,\r\n    image,\r\n    icon,\r\n    meta,\r\n    summary,\r\n  } = props\r\n  const classes = cx('event', className)\r\n  const rest = getUnhandledProps(FeedEvent, props)\r\n  const ElementType = getElementType(FeedEvent, props)\r\n  const hasContentProp = content || date || extraImages || extraText || meta || summary\r\n  const contentProps = { content, date, extraImages, extraText, meta, summary }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {createShorthand(FeedLabel, val => ({ icon: val }), icon, { autoGenerateKey: false })}\r\n      {createShorthand(FeedLabel, val => ({ image: val }), image, { autoGenerateKey: false })}\r\n      {hasContentProp && <FeedContent {...contentProps} \/>}\r\n      {children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":278,"reference":"A feed contains an event.","result":"Render the feed event .","score":[0.2403,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TabPane(props) {\r\n  const { active, children, className, content, loading } = props\r\n  const classes = cx(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className)\r\n  const rest = getUnhandledProps(TabPane, props)\r\n  const ElementType = getElementType(TabPane, props)\r\n  const calculatedDefaultProps = {}\r\n  if (ElementType === Segment) {\r\n    calculatedDefaultProps.attached = 'bottom'\r\n  }\r\n  return (\r\n    <ElementType {...calculatedDefaultProps} {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":184,"reference":"A tab pane holds the content of a tab.","result":"Render tab pane .","score":[0.1294,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ListContent(props) {\r\n  const { children, className, content, description, floated, header, verticalAlign } = props\r\n  const classes = cx(\r\n    useValueAndKey(floated, 'floated'),\r\n    useVerticalAlignProp(verticalAlign),\r\n    'content',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(ListContent, props)\r\n  const ElementType = getElementType(ListContent, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {ListHeader.create(header)}\r\n      {ListDescription.create(description)}\r\n      {content}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":233,"reference":"A list item can contain a content.","result":"Render the list.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ButtonOr(props) {\r\n  const { className, text } = props\r\n  const classes = cx('or', className)\r\n  const rest = getUnhandledProps(ButtonOr, props)\r\n  const ElementType = getElementType(ButtonOr, props)\r\n  return <ElementType {...rest} className={classes} data-text={text} \/>\r\n}","code-length":93,"reference":"Button groups can contain conditionals.","result":"Render the button.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TableCell(props) {\r\n  const {\r\n    active,\r\n    children,\r\n    className,\r\n    collapsing,\r\n    content,\r\n    disabled,\r\n    error,\r\n    icon,\r\n    negative,\r\n    positive,\r\n    selectable,\r\n    singleLine,\r\n    textAlign,\r\n    verticalAlign,\r\n    warning,\r\n    width,\r\n  } = props\r\n  const classes = cx(\r\n    useKeyOnly(active, 'active'),\r\n    useKeyOnly(collapsing, 'collapsing'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(error, 'error'),\r\n    useKeyOnly(negative, 'negative'),\r\n    useKeyOnly(positive, 'positive'),\r\n    useKeyOnly(selectable, 'selectable'),\r\n    useKeyOnly(singleLine, 'single line'),\r\n    useKeyOnly(warning, 'warning'),\r\n    useTextAlignProp(textAlign),\r\n    useVerticalAlignProp(verticalAlign),\r\n    useWidthProp(width, 'wide'),\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(TableCell, props)\r\n  const ElementType = getElementType(TableCell, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {Icon.create(icon)}\r\n      {content}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":409,"reference":"A table row can have cells.","result":"Render the table cell .","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction BreadcrumbDivider(props) {\r\n  const { children, className, content, icon } = props\r\n  const classes = cx('divider', className)\r\n  const rest = getUnhandledProps(BreadcrumbDivider, props)\r\n  const ElementType = getElementType(BreadcrumbDivider, props)\r\n  if (!_.isNil(icon)) {\r\n    return Icon.create(icon, {\r\n      defaultProps: { ...rest, className: classes },\r\n      autoGenerateKey: false,\r\n    })\r\n  }\r\n  if (!_.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? '\/' : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":232,"reference":"A divider sub-component for Breadcrumb component.","result":"Render the breadcrumb.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MessageList(props) {\r\n  const { children, className, items } = props\r\n  const classes = cx('list', className)\r\n  const rest = getUnhandledProps(MessageList, props)\r\n  const ElementType = getElementType(MessageList, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? _.map(items, MessageItem.create) : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":129,"reference":"A message can contain a list of items.","result":"Render the list of messages.","score":[0.1865,0.2435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TableFooter(props) {\r\n  const { as } = props\r\n  const rest = getUnhandledProps(TableFooter, props)\r\n  return <TableHeader {...rest} as={as} \/>\r\n}","code-length":59,"reference":"A table can have a footer.","result":"Render the table footer.","score":[0.2304,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CommentGroup(props) {\r\n  const { className, children, collapsed, content, minimal, size, threaded } = props\r\n  const classes = cx(\r\n    'ui',\r\n    size,\r\n    useKeyOnly(collapsed, 'collapsed'),\r\n    useKeyOnly(minimal, 'minimal'),\r\n    useKeyOnly(threaded, 'threaded'),\r\n    'comments',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(CommentGroup, props)\r\n  const ElementType = getElementType(CommentGroup, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":193,"reference":"Comments can be grouped.","result":"Render the comment group.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Reveal(props) {\r\n  const { active, animated, children, className, content, disabled, instant } = props\r\n  const classes = cx(\r\n    'ui',\r\n    animated,\r\n    useKeyOnly(active, 'active'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(instant, 'instant'),\r\n    'reveal',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Reveal, props)\r\n  const ElementType = getElementType(Reveal, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":187,"reference":"A reveal displays additional content in place of previous content when activated.","result":"Render the component .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Segment(props) {\r\n  const {\r\n    attached,\r\n    basic,\r\n    children,\r\n    circular,\r\n    className,\r\n    clearing,\r\n    color,\r\n    compact,\r\n    content,\r\n    disabled,\r\n    floated,\r\n    inverted,\r\n    loading,\r\n    placeholder,\r\n    padded,\r\n    piled,\r\n    raised,\r\n    secondary,\r\n    size,\r\n    stacked,\r\n    tertiary,\r\n    textAlign,\r\n    vertical,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useKeyOnly(basic, 'basic'),\r\n    useKeyOnly(circular, 'circular'),\r\n    useKeyOnly(clearing, 'clearing'),\r\n    useKeyOnly(compact, 'compact'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(loading, 'loading'),\r\n    useKeyOnly(placeholder, 'placeholder'),\r\n    useKeyOnly(piled, 'piled'),\r\n    useKeyOnly(raised, 'raised'),\r\n    useKeyOnly(secondary, 'secondary'),\r\n    useKeyOnly(stacked, 'stacked'),\r\n    useKeyOnly(tertiary, 'tertiary'),\r\n    useKeyOnly(vertical, 'vertical'),\r\n    useKeyOrValueAndKey(attached, 'attached'),\r\n    useKeyOrValueAndKey(padded, 'padded'),\r\n    useTextAlignProp(textAlign),\r\n    useValueAndKey(floated, 'floated'),\r\n    'segment',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Segment, props)\r\n  const ElementType = getElementType(Segment, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":507,"reference":"A segment is used to create a grouping of related content.","result":"Render the segment .","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PlaceholderLine(props) {\r\n  const { className, length } = props\r\n  const classes = cx('line', length, className)\r\n  const rest = getUnhandledProps(PlaceholderLine, props)\r\n  const ElementType = getElementType(PlaceholderLine, props)\r\n  return <ElementType {...rest} className={classes} \/>\r\n}","code-length":90,"reference":"A placeholder can contain have lines of text.","result":"Render the placeholder line .","score":[0.1319,0.1299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RevealContent(props) {\r\n  const { children, className, content, hidden, visible } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(hidden, 'hidden'),\r\n    useKeyOnly(visible, 'visible'),\r\n    'content',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(RevealContent, props)\r\n  const ElementType = getElementType(RevealContent, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":168,"reference":"A content sub-component for the Reveal.","result":"Render the content.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FeedLike(props) {\r\n  const { children, className, content, icon } = props\r\n  const classes = cx('like', className)\r\n  const rest = getUnhandledProps(FeedLike, props)\r\n  const ElementType = getElementType(FeedLike, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {Icon.create(icon, { autoGenerateKey: false })}\r\n      {content}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":182,"reference":"A feed can contain a like element.","result":"Render the feed like .","score":[0.1915,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Placeholder(props) {\r\n  const { children, className, content, fluid, inverted } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(fluid, 'fluid'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    'placeholder',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Placeholder, props)\r\n  const ElementType = getElementType(Placeholder, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":167,"reference":"A placeholder is used to reserve splace for content that soon will appear in a layout.","result":"Render the placeholder .","score":[0.0159,0.0338]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Accordion(props) {\r\n  const { className, fluid, inverted, styled } = props\r\n  const classes = cx(\r\n    'ui',\r\n    useKeyOnly(fluid, 'fluid'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useKeyOnly(styled, 'styled'),\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Accordion, props)\r\n  return <AccordionAccordion {...rest} className={classes} \/>\r\n}","code-length":139,"reference":"An accordion allows users to toggle the display of sections of content.","result":"Render the component .","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PlaceholderImage(props) {\r\n  const { className, square, rectangular } = props\r\n  const classes = cx(\r\n    useKeyOnly(square, 'square'),\r\n    useKeyOnly(rectangular, 'rectangular'),\r\n    'image',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(PlaceholderImage, props)\r\n  const ElementType = getElementType(PlaceholderImage, props)\r\n  return <ElementType {...rest} className={classes} \/>\r\n}","code-length":128,"reference":"A placeholder can contain an image.","result":"Render the image .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction DropdownMenu(props) {\r\n  const { children, className, content, direction, open, scrolling } = props\r\n  const classes = cx(\r\n    direction,\r\n    useKeyOnly(open, 'visible'),\r\n    useKeyOnly(scrolling, 'scrolling'),\r\n    'menu transition',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(DropdownMenu, props)\r\n  const ElementType = getElementType(DropdownMenu, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":170,"reference":"A dropdown menu can contain a menu.","result":"Render the menu .","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ListIcon(props) {\r\n  const { className, verticalAlign } = props\r\n  const classes = cx(useVerticalAlignProp(verticalAlign), className)\r\n  const rest = getUnhandledProps(ListIcon, props)\r\n  return <Icon {...rest} className={classes} \/>\r\n}","code-length":79,"reference":"A list item can contain an icon.","result":"Render the list icon .","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Advertisement(props) {\r\n  const { centered, children, className, content, test, unit } = props\r\n  const classes = cx(\r\n    'ui',\r\n    unit,\r\n    useKeyOnly(centered, 'centered'),\r\n    useKeyOnly(test, 'test'),\r\n    'ad',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Advertisement, props)\r\n  const ElementType = getElementType(Advertisement, props)\r\n  return (\r\n    <ElementType {...rest} className={classes} data-text={test}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":186,"reference":"An ad displays third-party promotional content.","result":"Render the advertisement .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction StatisticGroup(props) {\r\n  const { children, className, color, content, horizontal, inverted, items, size, widths } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useKeyOnly(horizontal, 'horizontal'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    useWidthProp(widths),\r\n    'statistics',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(StatisticGroup, props)\r\n  const ElementType = getElementType(StatisticGroup, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {_.map(items, item => Statistic.create(item))}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":303,"reference":"A group of statistics.","result":"Render the StatisticGroup .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Statistic(props) {\r\n  const {\r\n    children,\r\n    className,\r\n    color,\r\n    content,\r\n    floated,\r\n    horizontal,\r\n    inverted,\r\n    label,\r\n    size,\r\n    text,\r\n    value,\r\n  } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useValueAndKey(floated, 'floated'),\r\n    useKeyOnly(horizontal, 'horizontal'),\r\n    useKeyOnly(inverted, 'inverted'),\r\n    'statistic',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Statistic, props)\r\n  const ElementType = getElementType(Statistic, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {StatisticValue.create(value, {\r\n        defaultProps: { text },\r\n        autoGenerateKey: false,\r\n      })}\r\n      {StatisticLabel.create(label, { autoGenerateKey: false })}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":386,"reference":"A statistic emphasizes the current value of an attribute.","result":"Render the Statistic component.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SegmentGroup(props) {\r\n  const { children, className, compact, content, horizontal, piled, raised, size, stacked } = props\r\n  const classes = cx(\r\n    'ui',\r\n    size,\r\n    useKeyOnly(compact, 'compact'),\r\n    useKeyOnly(horizontal, 'horizontal'),\r\n    useKeyOnly(piled, 'piled'),\r\n    useKeyOnly(raised, 'raised'),\r\n    useKeyOnly(stacked, 'stacked'),\r\n    'segments',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(SegmentGroup, props)\r\n  const ElementType = getElementType(SegmentGroup, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":221,"reference":"A group of segments can be formatted to appear together.","result":"Render the segment group .","score":[0.0884,0.1053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TableHeaderCell(props) {\r\n  const { as, className, sorted } = props\r\n  const classes = cx(useValueAndKey(sorted, 'sorted'), className)\r\n  const rest = getUnhandledProps(TableHeaderCell, props)\r\n  return <TableCell {...rest} as={as} className={classes} \/>\r\n}","code-length":89,"reference":"A table can have a header cell.","result":"Render the table cell .","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Feed(props) {\r\n  const { children, className, events, size } = props\r\n  const classes = cx('ui', size, 'feed', className)\r\n  const rest = getUnhandledProps(Feed, props)\r\n  const ElementType = getElementType(Feed, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const eventElements = _.map(events, (eventProps) => {\r\n    const { childKey, date, meta, summary, ...eventData } = eventProps\r\n    const finalKey = childKey || [date, meta, summary].join('-')\r\n    return <FeedEvent date={date} key={finalKey} meta={meta} summary={summary} {...eventData} \/>\r\n  })\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {eventElements}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":262,"reference":"A feed presents user activity chronologically.","result":"Render the feed .","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction LabelGroup(props) {\r\n  const { children, circular, className, color, content, size, tag } = props\r\n  const classes = cx(\r\n    'ui',\r\n    color,\r\n    size,\r\n    useKeyOnly(circular, 'circular'),\r\n    useKeyOnly(tag, 'tag'),\r\n    'labels',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(LabelGroup, props)\r\n  const ElementType = getElementType(LabelGroup, props)\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {childrenUtils.isNil(children) ? content : children}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":181,"reference":"A label can be grouped.","result":"Render the labels.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FeedExtra(props) {\r\n  const { children, className, content, images, text } = props\r\n  const classes = cx(\r\n    useKeyOnly(images, 'images'),\r\n    useKeyOnly(content || text, 'text'),\r\n    'extra',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(FeedExtra, props)\r\n  const ElementType = getElementType(FeedExtra, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  const imageElements = _.map(images, (image, index) => {\r\n    const key = [index, image].join('-')\r\n    return createHTMLImage(image, { key })\r\n  })\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {content}\r\n      {imageElements}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":263,"reference":"A feed can contain an extra content.","result":"Render the feed extra.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction DropdownDivider(props) {\r\n  const { className } = props\r\n  const classes = cx('divider', className)\r\n  const rest = getUnhandledProps(DropdownDivider, props)\r\n  const ElementType = getElementType(DropdownDivider, props)\r\n  return <ElementType {...rest} className={classes} \/>\r\n}","code-length":87,"reference":"A dropdown menu can contain dividers to separate related content.","result":"Render the dropdown.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FeedSummary(props) {\r\n  const { children, className, content, date, user } = props\r\n  const classes = cx('summary', className)\r\n  const rest = getUnhandledProps(FeedSummary, props)\r\n  const ElementType = getElementType(FeedSummary, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {createShorthand(FeedUser, val => ({ content: val }), user, { autoGenerateKey: false })}\r\n      {content}\r\n      {createShorthand(FeedDate, val => ({ content: val }), date, { autoGenerateKey: false })}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":224,"reference":"A feed can contain a summary.","result":"Render the feed summary .","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction StepContent(props) {\r\n  const { children, className, content, description, title } = props\r\n  const classes = cx('content', className)\r\n  const rest = getUnhandledProps(StepContent, props)\r\n  const ElementType = getElementType(StepContent, props)\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  return (\r\n    <ElementType {...rest} className={classes}>\r\n      {StepTitle.create(title, { autoGenerateKey: false })}\r\n      {StepDescription.create(description, { autoGenerateKey: false })}\r\n    <\/ElementType>\r\n  )\r\n}","code-length":251,"reference":"A step can contain a content.","result":"Render the StepContent .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Image(props) {\r\n  const {\r\n    avatar,\r\n    bordered,\r\n    centered,\r\n    children,\r\n    circular,\r\n    className,\r\n    content,\r\n    dimmer,\r\n    disabled,\r\n    floated,\r\n    fluid,\r\n    hidden,\r\n    href,\r\n    inline,\r\n    label,\r\n    rounded,\r\n    size,\r\n    spaced,\r\n    verticalAlign,\r\n    wrapped,\r\n    ui,\r\n  } = props\r\n  const classes = cx(\r\n    useKeyOnly(ui, 'ui'),\r\n    size,\r\n    useKeyOnly(avatar, 'avatar'),\r\n    useKeyOnly(bordered, 'bordered'),\r\n    useKeyOnly(circular, 'circular'),\r\n    useKeyOnly(centered, 'centered'),\r\n    useKeyOnly(disabled, 'disabled'),\r\n    useKeyOnly(fluid, 'fluid'),\r\n    useKeyOnly(hidden, 'hidden'),\r\n    useKeyOnly(inline, 'inline'),\r\n    useKeyOnly(rounded, 'rounded'),\r\n    useKeyOrValueAndKey(spaced, 'spaced'),\r\n    useValueAndKey(floated, 'floated'),\r\n    useVerticalAlignProp(verticalAlign, 'aligned'),\r\n    'image',\r\n    className,\r\n  )\r\n  const rest = getUnhandledProps(Image, props)\r\n  const [imgTagProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\r\n  const ElementType = getElementType(Image, props, () => {\r\n    if (\r\n      !_.isNil(dimmer) ||\r\n      !_.isNil(label) ||\r\n      !_.isNil(wrapped) ||\r\n      !childrenUtils.isNil(children)\r\n    ) {\r\n      return 'div'\r\n    }\r\n  })\r\n  if (!childrenUtils.isNil(children)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {children}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (!childrenUtils.isNil(content)) {\r\n    return (\r\n      <ElementType {...rest} className={classes}>\r\n        {content}\r\n      <\/ElementType>\r\n    )\r\n  }\r\n  if (ElementType === 'img') {\r\n    return <ElementType {...rootProps} {...imgTagProps} className={classes} \/>\r\n  }\r\n  return (\r\n    <ElementType {...rootProps} className={classes} href={href}>\r\n      {Dimmer.create(dimmer, { autoGenerateKey: false })}\r\n      {Label.create(label, { autoGenerateKey: false })}\r\n      <img {...imgTagProps} \/>\r\n    <\/ElementType>\r\n  )\r\n}","code-length":701,"reference":"An image is a graphic representation of something.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(canvas) {\r\n        var context = canvas.getContext('2d'),\r\n            devicePixelRatio = window.devicePixelRatio || 1,\r\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\r\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\r\n                                      || context.backingStorePixelRatio || 1;\r\n        return devicePixelRatio \/ backingStorePixelRatio;\r\n    }","code-length":122,"reference":"Gets the pixel ratio of the canvas.\n","result":"Calculate the ratio of the canvas to the backing store.","score":[0.2403,0.4324]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(render, background) {\r\n        var cssBackground = background;\r\n        if (\/(jpg|gif|png)$\/.test(background))\r\n            cssBackground = 'url(' + background + ')';\r\n        render.canvas.style.background = cssBackground;\r\n        render.canvas.style.backgroundSize = \"contain\";\r\n        render.currentBackground = background;\r\n    }","code-length":101,"reference":"Applies the background to the canvas using CSS.\n","result":"Set the background.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(render, body) {\r\n        var bodyRender = body.render,\r\n            texturePath = bodyRender.sprite.texture,\r\n            texture = _getTexture(render, texturePath),\r\n            sprite = new PIXI.Sprite(texture);\r\n        sprite.anchor.x = body.render.sprite.xOffset;\r\n        sprite.anchor.y = body.render.sprite.yOffset;\r\n        return sprite;\r\n    }","code-length":120,"reference":"Creates a body sprite\n","result":"Create a sprite for rendering.","score":[0.2857,0.6233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(render, body) {\r\n        var bodyRender = body.render,\r\n            options = render.options,\r\n            primitive = new PIXI.Graphics(),\r\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\r\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\r\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\r\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\r\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\r\n            part;\r\n        primitive.clear();\r\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\r\n            part = body.parts[k];\r\n            if (!options.wireframes) {\r\n                primitive.beginFill(fillStyle, 1);\r\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\r\n            } else {\r\n                primitive.beginFill(0, 0);\r\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\r\n            }\r\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\r\n            for (var j = 1; j < part.vertices.length; j++) {\r\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\r\n            }\r\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\r\n            primitive.endFill();\r\n            if (options.showAngleIndicator || options.showAxes) {\r\n                primitive.beginFill(0, 0);\r\n                if (options.wireframes) {\r\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\r\n                } else {\r\n                    primitive.lineStyle(1, strokeStyleIndicator);\r\n                }\r\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\r\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) \/ 2 - body.position.x), \r\n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) \/ 2 - body.position.y));\r\n                primitive.endFill();\r\n            }\r\n        }\r\n        return primitive;\r\n    }","code-length":635,"reference":"Creates a body primitive\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(body, options) {\r\n        options = options || {};\r\n        Body.set(body, {\r\n            bounds: body.bounds || Bounds.create(body.vertices),\r\n            positionPrev: body.positionPrev || Vector.clone(body.position),\r\n            anglePrev: body.anglePrev || body.angle,\r\n            vertices: body.vertices,\r\n            parts: body.parts || [body],\r\n            isStatic: body.isStatic,\r\n            isSleeping: body.isSleeping,\r\n            parent: body.parent || body\r\n        });\r\n        Vertices.rotate(body.vertices, body.angle, body.position);\r\n        Axes.rotate(body.axes, body.angle);\r\n        Bounds.update(body.bounds, body.vertices, body.velocity);\r\n        Body.set(body, {\r\n            axes: options.axes || body.axes,\r\n            area: options.area || body.area,\r\n            mass: options.mass || body.mass,\r\n            inertia: options.inertia || body.inertia\r\n        });\r\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\r\n            defaultStrokeStyle = '#000';\r\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\r\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\r\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) \/ (body.bounds.max.x - body.bounds.min.x);\r\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) \/ (body.bounds.max.y - body.bounds.min.y);\r\n    }","code-length":475,"reference":"Initialises body properties.\n","result":"Create a sprite for the body.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function createPages({ actions, graphql }) {\r\n\tconst retrieveMarkdownPages = () =>\r\n\t\tgraphql(`\r\n\t\t\t{\r\n\t\t\t\tallMarkdownRemark(limit: 1000) {\r\n\t\t\t\t\tedges {\r\n\t\t\t\t\t\tnode {\r\n\t\t\t\t\t\t\tfrontmatter {\r\n\t\t\t\t\t\t\t\tpath\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t`)\r\n\tconst exampleTemplate = path.resolve(`src\/templates\/exampleTemplate.tsx`)\r\n\tconst docTemplate = path.resolve(`src\/templates\/docTemplate.tsx`)\r\n\tconst result = await retrieveMarkdownPages()\r\n\tif (result.errors) {\r\n\t\tconsole.error('graphql error', result.errors)\r\n\t\tthrow new Error('Error invoking graphql for pages')\r\n\t}\r\n\tresult.data.allMarkdownRemark.edges.forEach(({ node }) => {\r\n\t\tconst {\r\n\t\t\tfrontmatter: { path: pagePath },\r\n\t\t} = node\r\n\t\tconst category = (pagePath || '\/').split('\/').filter(t => !!t)[0]\r\n\t\tconst isExample = category === 'examples'\r\n\t\tconsole.log(`create page for ${pagePath} - type is ${category}`)\r\n\t\tactions.createPage({\r\n\t\t\tpath: pagePath,\r\n\t\t\tcomponent: isExample ? exampleTemplate : docTemplate,\r\n\t\t\tcontext: {},\r\n\t\t})\r\n\t})\r\n}","code-length":377,"reference":"Dynamically creates pages in the static website","result":"Create pages.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isWindow(val) {\r\n  if (typeof val !== \"object\") {\r\n    return false;\r\n  }\r\n  const wrapper = idlUtils.wrapperForImpl(val);\r\n  if (typeof wrapper === \"object\") {\r\n    return wrapper === wrapper._globalProxy;\r\n  }\r\n  return isWindow(idlUtils.implForWrapper(val));\r\n}","code-length":101,"reference":"Until webidl2js gains support for checking for Window, this would have to do.","result":"Determine if the value is a window object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeEventHandlerOptions(options, defaultBoolKeys) {\r\n  const returnValue = {};\r\n  if (typeof options === \"boolean\" || options === null || typeof options === \"undefined\") {\r\n    returnValue.capture = Boolean(options);\r\n    return returnValue;\r\n  }\r\n  if (typeof options !== \"object\") {\r\n    returnValue.capture = Boolean(options);\r\n    defaultBoolKeys = defaultBoolKeys.filter(k => k !== \"capture\");\r\n  }\r\n  for (const key of defaultBoolKeys) {\r\n    returnValue[key] = Boolean(options[key]);\r\n  }\r\n  return returnValue;\r\n}","code-length":160,"reference":"Normalize the event listeners options argument in order to get always a valid options object\n","result":"Normalize event handlers.","score":[0.0089,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sammary() {\r\n  const nodeFn = function ({ parentPaths, lang, item, isDir, result }) {\r\n    const navTitle = generateNavTitle({ parentPaths, item, sign: isDir ? '-' : '*', lang });\r\n    result.push(navTitle);\r\n  };\r\n  langs.forEach(dir => {\r\n    const SUMMARY = 'SUMMARY.md';\r\n    const targetFile = path.join(docsDir, `${dir}\/${SUMMARY}`);\r\n    const result = walk({\r\n      catalog: docConfig.catalog,\r\n      lang: dir,\r\n      result: [],\r\n      parentPaths: [],\r\n      fn: nodeFn\r\n    });\r\n    if (result && result.length) {\r\n      result.unshift('# whistle\\n');\r\n      fs.writeFileSync(targetFile, result.join('\\n'));\r\n    }\r\n  });\r\n}","code-length":231,"reference":"generate `SUMMARY.md` by `config.json`","result":"Generate the sammary nav title.","score":[0,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createItemString(data, limit) {\r\n  var count = 0;\r\n  var hasMore = false;\r\n  if ((0, _isSafeInteger2['default'])(data.size)) {\r\n    count = data.size;\r\n  } else {\r\n    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3['default'])(_iterator);;) {\r\n      var _ref;\r\n      if (_isArray) {\r\n        if (_i >= _iterator.length) break;\r\n        _ref = _iterator[_i++];\r\n      } else {\r\n        _i = _iterator.next();\r\n        if (_i.done) break;\r\n        _ref = _i.value;\r\n      }\r\n      var entry = _ref;\r\n      if (limit && count + 1 > limit) {\r\n        hasMore = true;\r\n        break;\r\n      }\r\n      count += 1;\r\n    }\r\n  }\r\n  return '' + (hasMore ? '>' : '') + count + ' ' + (count !== 1 ? 'entries' : 'entry');\r\n}","code-length":299,"reference":"Returns the \"n Items\" string for this node, generating and caching it if it hasn't been created yet.","result":"Create a string from a data object.","score":[0.0336,0.0592]}
{"code":"\/*is used to<extra_id_0>\r\nfunction kw(name, options = {}) {\r\n  options.keyword = name\r\n  return keywords[name] = new TokenType(name, options)\r\n}","code-length":46,"reference":"Succinct definitions of keyword token types","result":"Create a new token.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isInAstralSet(code, set) {\r\n  let pos = 0x10000\r\n  for (let i = 0; i < set.length; i += 2) {\r\n    pos += set[i]\r\n    if (pos > code) return false\r\n    pos += set[i + 1]\r\n    if (pos >= code) return true\r\n  }\r\n}","code-length":100,"reference":"This has a complexity linear to the value of the code. The assumption is that looking up astral identifier characters is rare.","result":"Check if code is in a set.","score":[0.0225,0.0488]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformMetadata(metadata) {\r\n  const namesRegEx = new RegExp(\r\n    metadata.tokens.map(token => token.name).join('|'),\r\n    'g'\r\n  );\r\n  const replaceMap = {};\r\n  metadata.tokens.map(token => {\r\n    replaceMap[token.name] = formatTokenName(token.name);\r\n  });\r\n  metadata.tokens.forEach((token, i) => {\r\n    if (token.role) {\r\n      token.role.forEach((role, j) => {\r\n        metadata.tokens[i].role[j] = role.replace(namesRegEx, match => {\r\n          return '`$' + replaceMap[match] + '`';\r\n        });\r\n      });\r\n    }\r\n    if (token.alias) {\r\n      token.alias = formatTokenName(token.alias);\r\n    }\r\n  });\r\n  return metadata;\r\n}","code-length":236,"reference":"Transform token names to formats expected by Sassdoc for descriptions and\naliases\n","result":"Transform metadata.","score":[0.0034,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nasync function findPackageFor(filepath) {\r\n  let directory = filepath;\r\n  while (directory !== '\/') {\r\n    const directoryToSearch = path.dirname(directory);\r\n    const files = await fs.readdir(directoryToSearch);\r\n    if (files.indexOf('package.json') !== -1) {\r\n      const packageJson = await fs.readJson(\r\n        path.join(directoryToSearch, 'package.json')\r\n      );\r\n      return packageJson.name;\r\n    }\r\n    directory = path.resolve(directory, '..');\r\n  }\r\n  throw new Error(`Unable to find package for: ${filepath}`);\r\n}","code-length":168,"reference":"Rough heuristic used to find the package name for a given file. Idea is to move upwards looking for directories that have a `package.json` file. Once we find one, we report back the name from that file.","result":"Find the package for a given filepath.","score":[0.0056,0.0882]}
{"code":"\/*is used to<extra_id_0>\r\nfunction svgToggleClass(svg, name, forceAdd) {\r\n  const list = svg\r\n    .getAttribute('class')\r\n    .trim()\r\n    .split(\/\\s+\/);\r\n  const uniqueList = Object.keys(list.reduce((o, item) => Object.assign(o, { [item]: 1 }), {}));\r\n  const index = uniqueList.indexOf(name);\r\n  const found = index >= 0;\r\n  const add = forceAdd === undefined ? !found : forceAdd;\r\n  if (found === !add) {\r\n    if (add) {\r\n      uniqueList.push(name);\r\n    } else {\r\n      uniqueList.splice(index, 1);\r\n    }\r\n    svg.setAttribute('class', uniqueList.join(' '));\r\n  }\r\n}","code-length":204,"reference":"Copyright IBM Corp.","result":"Toggle the class of a SVG element.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function flatMapAsync(source, mapFn) {\r\n  const results = await Promise.all(source.map(mapFn));\r\n  return results.reduce((acc, result) => acc.concat(result), []);\r\n}","code-length":62,"reference":"Copyright IBM Corp.","result":"Create a function to async.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function createJson(sourceDir, config) {\r\n  config = config || {};\r\n  return sassdoc.parse(sourceDir, config).then(\r\n    data => {\r\n      return data;\r\n    },\r\n    err => {\r\n      console.error(err);\r\n    }\r\n  );\r\n}","code-length":87,"reference":"Create a JSON file of documented Sass items\n","result":"Create json files.","score":[0.0771,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dedupeArray(arr) {\r\n  return arr.reduce(\r\n    (p, item) => {\r\n      const type = item.type || item.context.type;\r\n      const name = item.name || item.context.name;\r\n      const id = [type, name].join('|');\r\n      if (p.temp.indexOf(id) === -1) {\r\n        p.out.push(item);\r\n        p.temp.push(id);\r\n      }\r\n      return p;\r\n    },\r\n    { temp: [], out: [] }\r\n  ).out;\r\n}","code-length":159,"reference":"Remove duplicate objects in `require` and `usedBy` arrays. Array objects have\n`name` and `type` properties, sometimes nested in a `context` object.\n","result":"Dedupe array.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function createMarkdown(sourceDir, config) {\r\n  config = config || {};\r\n  return sassdoc.parse(sourceDir, config).then(\r\n    data => {\r\n      let markdownFile = '';\r\n      const documentedItems = data.filter(\r\n        (item, index) => item.access === 'public' || item.access === 'private'\r\n      );\r\n      markdownFile += `# Sass API\r\n| Mark | Description |\r\n| --- | --- |\r\n| \u2705 | Public functions, mixins, placeholders, and variables |\r\n| \u274c | Private items - not supported outside package's build |\r\n| \u26a0\ufe0f | Deprecated items - may not be available in future releases |\r\n<!-- toc -->\r\n<!-- tocstop -->`;\r\n      let currentGroup = '';\r\n      documentedItems.forEach(item => {\r\n        const itemGroup = createGroupName(item.group);\r\n        if (itemGroup !== currentGroup) {\r\n          markdownFile += `\\n\\n## ${itemGroup}`;\r\n          currentGroup = itemGroup;\r\n        }\r\n        markdownFile += createMarkdownItem(item);\r\n      });\r\n      return prettier.format(\r\n        toc.insert(markdownFile, { slugify }),\r\n        prettierOptions\r\n      );\r\n    },\r\n    err => {\r\n      console.error(err);\r\n    }\r\n  );\r\n}","code-length":352,"reference":"Create a markdown file of documented Sass items\n","result":"Create markdown files for.","score":[0.1398,0.3363]}
{"code":"\/*is used to<extra_id_0>\r\nfunction flattenOptions(options) {\r\n  const o = {};\r\n  for (const key in options) {\r\n    o[key] = options[key];\r\n  }\r\n  return o;\r\n}","code-length":60,"reference":"`this.options` create-component mix-in creates prototype chain so that `options` given in constructor argument wins over the one defined in static `options` property 'Flatpickr' wants flat structure of object instead","result":"Flatten options.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction append(str, prefix = '') {\r\n  const item = document.createElement('li');\r\n  item.textContent = prefix + str;\r\n  list.appendChild(item);\r\n}","code-length":56,"reference":"Append list item\n\n","result":"Append to the list.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction multiresNodeSort(a, b) {\r\n        if (a.level == 1 && b.level != 1) {\r\n            return -1;\r\n        }\r\n        if (b. level == 1 && a.level != 1) {\r\n            return 1;\r\n        }\r\n                return b.timestamp - a.timestamp;\r\n    }","code-length":93,"reference":"Sorting method for multires nodes.\n","result":"Sort multires nodes.","score":[0.2964,0.5324]}
{"code":"\/*is used to<extra_id_0>\r\nfunction multiresNodeRenderSort(a, b) {\r\n        if (a.level != b.level) {\r\n            return a.level - b.level;\r\n        }\r\n                return a.diff - b.diff;\r\n    }","code-length":67,"reference":"Sorting method for multires node rendering.\n","result":"Sort nodes by render order.","score":[0,0.1695]}
{"code":"\/*is used to<extra_id_0>\r\nfunction multiresDraw() {\r\n        if (!program.drawInProgress) {\r\n            program.drawInProgress = true;\r\n            gl.clear(gl.COLOR_BUFFER_BIT);\r\n            for ( var i = 0; i < program.currentNodes.length; i++ ) {\r\n                if (program.currentNodes[i].textureLoaded > 1) {\r\n                                        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertBuf);\r\n                    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(program.currentNodes[i].vertices), gl.STATIC_DRAW);\r\n                    gl.vertexAttribPointer(program.vertPosLocation, 3, gl.FLOAT, false, 0, 0);\r\n                                        gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertTexCoordBuf);\r\n                    gl.vertexAttribPointer(program.texCoordLocation, 2, gl.FLOAT, false, 0, 0);\r\n                                        gl.bindTexture(gl.TEXTURE_2D, program.currentNodes[i].texture);\r\n                    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\r\n                }\r\n            }\r\n            program.drawInProgress = false;\r\n        }\r\n    }","code-length":299,"reference":"Draws multires nodes.\n","result":"Draw multiple multires.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MultiresNode(vertices, side, level, x, y, path) {\r\n        this.vertices = vertices;\r\n        this.side = side;\r\n        this.level = level;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.path = path.replace('%s',side).replace('%l',level).replace('%x',x).replace('%y',y);\r\n    }","code-length":109,"reference":"Creates new multires node.\n","result":"Create a node for multires.","score":[0,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rotateMatrix(m, angle, axis) {\r\n        var s = Math.sin(angle);\r\n        var c = Math.cos(angle);\r\n        if (axis == 'x') {\r\n            return [\r\n                m[0], c*m[1] + s*m[2], c*m[2] - s*m[1],\r\n                m[3], c*m[4] + s*m[5], c*m[5] - s*m[4],\r\n                m[6], c*m[7] + s*m[8], c*m[8] - s*m[7]\r\n            ];\r\n        }\r\n        if (axis == 'y') {\r\n            return [\r\n                c*m[0] - s*m[2], m[1], c*m[2] + s*m[0],\r\n                c*m[3] - s*m[5], m[4], c*m[5] + s*m[3],\r\n                c*m[6] - s*m[8], m[7], c*m[8] + s*m[6]\r\n            ];\r\n        }\r\n        if (axis == 'z') {\r\n            return [\r\n                c*m[0] + s*m[1], c*m[1] - s*m[0], m[2],\r\n                c*m[3] + s*m[4], c*m[4] - s*m[3], m[5],\r\n                c*m[6] + s*m[7], c*m[7] - s*m[6], m[8]\r\n            ];\r\n        }\r\n    }","code-length":420,"reference":"Rotates a 3x3 matrix.\n","result":"Rotate a matrix in place.","score":[0.2403,0.4573]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeMatrix4(m) {\r\n        return [\r\n            m[0], m[1], m[2],    0,\r\n            m[3], m[4], m[5],    0,\r\n            m[6], m[7], m[8],    0,\r\n               0,    0,    0,    1\r\n        ];\r\n    }","code-length":98,"reference":"Turns a 3x3 matrix into a 4x4 matrix.\n","result":"Create a matrix.","score":[0.0917,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makePersp(hfov, aspect, znear, zfar) {\r\n        var fovy = 2 * Math.atan(Math.tan(hfov\/2) * gl.drawingBufferHeight \/ gl.drawingBufferWidth);\r\n        var f = 1 \/ Math.tan(fovy\/2);\r\n        return [\r\n            f\/aspect,   0,  0,  0,\r\n                   0,   f,  0,  0,\r\n                   0,   0,  (zfar+znear)\/(znear-zfar), (2*zfar*znear)\/(znear-zfar),\r\n                   0,   0, -1,  0\r\n        ];\r\n    }","code-length":181,"reference":"Creates a perspective matrix.\n","result":"Create the perspective perspective.","score":[0.3195,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processLoadedTexture(img, tex) {\r\n        gl.bindTexture(gl.TEXTURE_2D, tex);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, img);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }","code-length":218,"reference":"Processes a loaded texture image into a WebGL texture.\n","result":"Process the texture data.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkZoom(hfov) {\r\n        var newLevel = 1;\r\n        while ( newLevel < image.maxLevel &&\r\n            gl.drawingBufferWidth > image.tileResolution *\r\n            Math.pow(2, newLevel - 1) * Math.tan(hfov \/ 2) * 0.707 ) {\r\n            newLevel++;\r\n        }\r\n                program.level = newLevel;\r\n    }","code-length":113,"reference":"Finds and applies optimal multires zoom level.\n","result":"Check zoom.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rotatePersp(p, r) {\r\n        return [\r\n            p[ 0]*r[0], p[ 0]*r[1], p[ 0]*r[ 2],     0,\r\n            p[ 5]*r[4], p[ 5]*r[5], p[ 5]*r[ 6],     0,\r\n            p[10]*r[8], p[10]*r[9], p[10]*r[10], p[11],\r\n                 -r[8],      -r[9],      -r[10],     0\r\n        ];\r\n    }","code-length":146,"reference":"Rotates perspective matrix.\n","result":"Rotate the perspective.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkInView(m, v) {\r\n        var vpp = applyRotPerspToVec(m, v);\r\n        var winX = vpp[0]*vpp[3];\r\n        var winY = vpp[1]*vpp[3];\r\n        var winZ = vpp[2]*vpp[3];\r\n        var ret = [0, 0, 0];\r\n                if ( winX < -1 )\r\n            ret[0] = -1;\r\n        if ( winX > 1 )\r\n            ret[0] = 1;\r\n        if ( winY < -1 )\r\n            ret[1] = -1;\r\n        if ( winY > 1 )\r\n            ret[1] = 1;\r\n        if ( winZ < -1 || winZ > 1 )\r\n            ret[2] = 1;\r\n        return ret;\r\n    }","code-length":221,"reference":"Checks if a vertex is visible.\n","result":"Check if a point is in the view.","score":[0.2174,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onImageLoad() {\r\n    if (!renderer)\r\n        renderer = new libpannellum.renderer(renderContainer);\r\n    if (!listenersAdded) {\r\n        listenersAdded = true;\r\n        dragFix.addEventListener('mousedown', onDocumentMouseDown, false);\r\n        document.addEventListener('mousemove', onDocumentMouseMove, false);\r\n        document.addEventListener('mouseup', onDocumentMouseUp, false);\r\n        if (config.mouseZoom) {\r\n            uiContainer.addEventListener('mousewheel', onDocumentMouseWheel, false);\r\n            uiContainer.addEventListener('DOMMouseScroll', onDocumentMouseWheel, false);\r\n        }\r\n        if (config.doubleClickZoom) {\r\n            dragFix.addEventListener('dblclick', onDocumentDoubleClick, false);\r\n        }\r\n        container.addEventListener('mozfullscreenchange', onFullScreenChange, false);\r\n        container.addEventListener('webkitfullscreenchange', onFullScreenChange, false);\r\n        container.addEventListener('msfullscreenchange', onFullScreenChange, false);\r\n        container.addEventListener('fullscreenchange', onFullScreenChange, false);\r\n        window.addEventListener('resize', onDocumentResize, false);\r\n        window.addEventListener('orientationchange', onDocumentResize, false);\r\n        if (!config.disableKeyboardCtrl) {\r\n            container.addEventListener('keydown', onDocumentKeyPress, false);\r\n            container.addEventListener('keyup', onDocumentKeyUp, false);\r\n            container.addEventListener('blur', clearKeys, false);\r\n        }\r\n        document.addEventListener('mouseleave', onDocumentMouseUp, false);\r\n        if (document.documentElement.style.pointerAction === '' &&\r\n            document.documentElement.style.touchAction === '') {\r\n            dragFix.addEventListener('pointerdown', onDocumentPointerDown, false);\r\n            dragFix.addEventListener('pointermove', onDocumentPointerMove, false);\r\n            dragFix.addEventListener('pointerup', onDocumentPointerUp, false);\r\n            dragFix.addEventListener('pointerleave', onDocumentPointerUp, false);\r\n        } else {\r\n            dragFix.addEventListener('touchstart', onDocumentTouchStart, false);\r\n            dragFix.addEventListener('touchmove', onDocumentTouchMove, false);\r\n            dragFix.addEventListener('touchend', onDocumentTouchEnd, false);\r\n        }\r\n        if (window.navigator.pointerEnabled)\r\n            container.style.touchAction = 'none';\r\n    }\r\n    renderInit();\r\n    setHfov(config.hfov);\r\n    setTimeout(function(){isTimedOut = true;}, 500);\r\n}","code-length":644,"reference":"Create renderer and initialize event listeners once image is loaded.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(tag) {\r\n                var result;\r\n                if (xmpData.indexOf(tag + '=\"') >= 0) {\r\n                    result = xmpData.substring(xmpData.indexOf(tag + '=\"') + tag.length + 2);\r\n                    result = result.substring(0, result.indexOf('\"'));\r\n                } else if (xmpData.indexOf(tag + '>') >= 0) {\r\n                    result = xmpData.substring(xmpData.indexOf(tag + '>') + tag.length + 1);\r\n                    result = result.substring(0, result.indexOf('<'));\r\n                }\r\n                if (result !== undefined) {\r\n                    return Number(result);\r\n                }\r\n                return null;\r\n            }","code-length":187,"reference":"Extract the requested tag from the XMP data","result":"Parse xmp data .","score":[0.1175,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction anError(errorMsg) {\r\n    if (errorMsg === undefined)\r\n        errorMsg = config.strings.genericWebGLError;\r\n    infoDisplay.errorMsg.innerHTML = '<p>' + errorMsg + '<\/p>';\r\n    controls.load.style.display = 'none';\r\n    infoDisplay.load.box.style.display = 'none';\r\n    infoDisplay.errorMsg.style.display = 'table';\r\n    error = true;\r\n    renderContainer.style.display = 'none';\r\n    fireEvent('error', errorMsg);\r\n}","code-length":142,"reference":"Displays an error message.\n","result":"Prevent the error event.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearError() {\r\n    if (error) {\r\n        infoDisplay.load.box.style.display = 'none';\r\n        infoDisplay.errorMsg.style.display = 'none';\r\n        error = false;\r\n        fireEvent('errorcleared');\r\n    }\r\n}","code-length":78,"reference":"Hides error message display.\n","result":"Clear error.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction aboutMessage(event) {\r\n    var pos = mousePosition(event);\r\n    aboutMsg.style.left = pos.x + 'px';\r\n    aboutMsg.style.top = pos.y + 'px';\r\n    clearTimeout(aboutMessage.t1);\r\n    clearTimeout(aboutMessage.t2);\r\n    aboutMsg.style.display = 'block';\r\n    aboutMsg.style.opacity = 1;\r\n    aboutMessage.t1 = setTimeout(function() {aboutMsg.style.opacity = 0;}, 2000);\r\n    aboutMessage.t2 = setTimeout(function() {aboutMsg.style.display = 'none';}, 2500);\r\n    event.preventDefault();\r\n}","code-length":173,"reference":"Displays about message.\n","result":"Show message about.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mousePosition(event) {\r\n    var bounds = container.getBoundingClientRect();\r\n    var pos = {};\r\n    pos.x = (event.clientX || event.pageX) - bounds.left;\r\n    pos.y = (event.clientY || event.pageY) - bounds.top;\r\n    return pos;\r\n}","code-length":91,"reference":"Calculate mouse position relative to top left of viewer container.\n","result":"Get the mouse position.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentMouseDown(event) {\r\n    event.preventDefault();\r\n    container.focus();\r\n        if (!loaded || !config.draggable) {\r\n        return;\r\n    }\r\n        var pos = mousePosition(event);\r\n    if (config.hotSpotDebug) {\r\n        var coords = mouseEventToCoords(event);\r\n        console.log('Pitch: ' + coords[0] + ', Yaw: ' + coords[1] + ', Center Pitch: ' +\r\n            config.pitch + ', Center Yaw: ' + config.yaw + ', HFOV: ' + config.hfov);\r\n    }\r\n        stopAnimation();\r\n    stopOrientation();\r\n    config.roll = 0;\r\n    speed.hfov = 0;\r\n    isUserInteracting = true;\r\n    latestInteraction = Date.now();\r\n        onPointerDownPointerX = pos.x;\r\n    onPointerDownPointerY = pos.y;\r\n        onPointerDownYaw = config.yaw;\r\n    onPointerDownPitch = config.pitch;\r\n        uiContainer.classList.add('pnlm-grabbing');\r\n    uiContainer.classList.remove('pnlm-grab');\r\n        fireEvent('mousedown', event);\r\n    animateInit();\r\n}","code-length":321,"reference":"Event handler for mouse clicks. Initializes panning. Prints center and click\nlocation coordinates when hot spot debugging is enabled.\n","result":"Prevent document scrolling.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentDoubleClick(event) {\r\n    if (config.minHfov === config.hfov) {\r\n        _this.setHfov(origHfov, 1000);\r\n    } else {\r\n        var coords = mouseEventToCoords(event);\r\n        _this.lookAt(coords[0], coords[1], config.minHfov, 1000);\r\n    }\r\n}","code-length":107,"reference":"Event handler for double clicks. Zooms in at clicked location\n","result":"Prevent double click on the document.","score":[0.0991,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mouseEventToCoords(event) {\r\n    var pos = mousePosition(event);\r\n    var canvas = renderer.getCanvas();\r\n    var canvasWidth = canvas.clientWidth,\r\n        canvasHeight = canvas.clientHeight;\r\n    var x = pos.x \/ canvasWidth * 2 - 1;\r\n    var y = (1 - pos.y \/ canvasHeight * 2) * canvasHeight \/ canvasWidth;\r\n    var focal = 1 \/ Math.tan(config.hfov * Math.PI \/ 360);\r\n    var s = Math.sin(config.pitch * Math.PI \/ 180);\r\n    var c = Math.cos(config.pitch * Math.PI \/ 180);\r\n    var a = focal * c - y * s;\r\n    var root = Math.sqrt(x*x + a*a);\r\n    var pitch = Math.atan((y * c + focal * s) \/ root) * 180 \/ Math.PI;\r\n    var yaw = Math.atan2(x \/ root, a \/ root) * 180 \/ Math.PI + config.yaw;\r\n    if (yaw < -180)\r\n        yaw += 360;\r\n    if (yaw > 180)\r\n        yaw -= 360;\r\n    return [pitch, yaw];\r\n}","code-length":317,"reference":"Calculate panorama pitch and yaw from location of mouse event.\n","result":"Convert mouse events to coordinates.","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentMouseMove(event) {\r\n    if (isUserInteracting && loaded) {\r\n        latestInteraction = Date.now();\r\n        var canvas = renderer.getCanvas();\r\n        var canvasWidth = canvas.clientWidth,\r\n            canvasHeight = canvas.clientHeight;\r\n        var pos = mousePosition(event);\r\n        var yaw = ((Math.atan(onPointerDownPointerX \/ canvasWidth * 2 - 1) - Math.atan(pos.x \/ canvasWidth * 2 - 1)) * 180 \/ Math.PI * config.hfov \/ 90) + onPointerDownYaw;\r\n        speed.yaw = (yaw - config.yaw) % 360 * 0.2;\r\n        config.yaw = yaw;\r\n                var vfov = 2 * Math.atan(Math.tan(config.hfov\/360*Math.PI) * canvasHeight \/ canvasWidth) * 180 \/ Math.PI;\r\n                var pitch = ((Math.atan(pos.y \/ canvasHeight * 2 - 1) - Math.atan(onPointerDownPointerY \/ canvasHeight * 2 - 1)) * 180 \/ Math.PI * vfov \/ 90) + onPointerDownPitch;\r\n        speed.pitch = (pitch - config.pitch) * 0.2;\r\n        config.pitch = pitch;\r\n    }\r\n}","code-length":330,"reference":"Event handler for mouse moves. Pans center of view.\n","result":"Detect mouse movement on the document.","score":[0.1171,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentMouseUp(event) {\r\n    if (!isUserInteracting) {\r\n        return;\r\n    }\r\n    isUserInteracting = false;\r\n    if (Date.now() - latestInteraction > 15) {\r\n        speed.pitch = speed.yaw = 0;\r\n    }\r\n    uiContainer.classList.add('pnlm-grab');\r\n    uiContainer.classList.remove('pnlm-grabbing');\r\n    latestInteraction = Date.now();\r\n    fireEvent('mouseup', event);\r\n}","code-length":141,"reference":"Event handler for mouse up events. Stops panning.\n","result":"Prevent document scrolling.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentTouchStart(event) {\r\n    if (!loaded || !config.draggable) {\r\n        return;\r\n    }\r\n    stopAnimation();\r\n    stopOrientation();\r\n    config.roll = 0;\r\n    speed.hfov = 0;\r\n    var pos0 = mousePosition(event.targetTouches[0]);\r\n    onPointerDownPointerX = pos0.x;\r\n    onPointerDownPointerY = pos0.y;\r\n        if (event.targetTouches.length == 2) {\r\n        var pos1 = mousePosition(event.targetTouches[1]);\r\n        onPointerDownPointerX += (pos1.x - pos0.x) * 0.5;\r\n        onPointerDownPointerY += (pos1.y - pos0.y) * 0.5;\r\n        onPointerDownPointerDist = Math.sqrt((pos0.x - pos1.x) * (pos0.x - pos1.x) +\r\n                                             (pos0.y - pos1.y) * (pos0.y - pos1.y));\r\n    }\r\n    isUserInteracting = true;\r\n    latestInteraction = Date.now();\r\n        onPointerDownYaw = config.yaw;\r\n    onPointerDownPitch = config.pitch;\r\n    fireEvent('touchstart', event);\r\n    animateInit();\r\n}","code-length":333,"reference":"Event handler for touches. Initializes panning if one touch or zooming if\ntwo touches.\n","result":"Detect touch events.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentTouchMove(event) {\r\n    if (!config.draggable) {\r\n        return;\r\n    }\r\n    event.preventDefault();\r\n    if (loaded) {\r\n        latestInteraction = Date.now();\r\n    }\r\n    if (isUserInteracting && loaded) {\r\n        var pos0 = mousePosition(event.targetTouches[0]);\r\n        var clientX = pos0.x;\r\n        var clientY = pos0.y;\r\n                if (event.targetTouches.length == 2 && onPointerDownPointerDist != -1) {\r\n            var pos1 = mousePosition(event.targetTouches[1]);\r\n            clientX += (pos1.x - pos0.x) * 0.5;\r\n            clientY += (pos1.y - pos0.y) * 0.5;\r\n            var clientDist = Math.sqrt((pos0.x - pos1.x) * (pos0.x - pos1.x) +\r\n                                       (pos0.y - pos1.y) * (pos0.y - pos1.y));\r\n            setHfov(config.hfov + (onPointerDownPointerDist - clientDist) * 0.1);\r\n            onPointerDownPointerDist = clientDist;\r\n        }\r\n        var touchmovePanSpeedCoeff = (config.hfov \/ 360) * config.touchPanSpeedCoeffFactor;\r\n        var yaw = (onPointerDownPointerX - clientX) * touchmovePanSpeedCoeff + onPointerDownYaw;\r\n        speed.yaw = (yaw - config.yaw) % 360 * 0.2;\r\n        config.yaw = yaw;\r\n        var pitch = (clientY - onPointerDownPointerY) * touchmovePanSpeedCoeff + onPointerDownPitch;\r\n        speed.pitch = (pitch - config.pitch) * 0.2;\r\n        config.pitch = pitch;\r\n    }\r\n}","code-length":470,"reference":"Event handler for touch movements. Pans center of view if one touch or\nadjusts zoom if two touches.\n","result":"Detect touchmove events on the document.","score":[0,0.0298]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentMouseWheel(event) {\r\n    if (!loaded || (config.mouseZoom == 'fullscreenonly' && !fullscreenActive)) {\r\n        return;\r\n    }\r\n    event.preventDefault();\r\n    stopAnimation();\r\n    latestInteraction = Date.now();\r\n    if (event.wheelDeltaY) {\r\n        setHfov(config.hfov - event.wheelDeltaY * 0.05);\r\n        speed.hfov = event.wheelDelta < 0 ? 1 : -1;\r\n    } else if (event.wheelDelta) {\r\n        setHfov(config.hfov - event.wheelDelta * 0.05);\r\n        speed.hfov = event.wheelDelta < 0 ? 1 : -1;\r\n    } else if (event.detail) {\r\n        setHfov(config.hfov + event.detail * 1.5);\r\n        speed.hfov = event.detail > 0 ? 1 : -1;\r\n    }\r\n    animateInit();\r\n}","code-length":258,"reference":"Event handler for mouse wheel. Changes zoom.\n","result":"Detect mouse wheel events.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentKeyPress(event) {\r\n    stopAnimation();\r\n    latestInteraction = Date.now();\r\n    stopOrientation();\r\n    config.roll = 0;\r\n    var keynumber = event.which || event.keycode;\r\n    if (config.capturedKeyNumbers.indexOf(keynumber) < 0)\r\n        return;\r\n    event.preventDefault();\r\n        if (keynumber == 27) {\r\n        if (fullscreenActive) {\r\n            toggleFullscreen();\r\n        }\r\n    } else {\r\n        changeKey(keynumber, true);\r\n    }\r\n}","code-length":155,"reference":"Event handler for key presses. Updates list of currently pressed keys.\n","result":"Detect keypress events on the document.","score":[0,0.0476]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDocumentKeyUp(event) {\r\n    var keynumber = event.which || event.keycode;\r\n        if (config.capturedKeyNumbers.indexOf(keynumber) < 0)\r\n        return;\r\n    event.preventDefault();\r\n        changeKey(keynumber, false);\r\n}","code-length":82,"reference":"Event handler for key releases. Updates list of currently pressed keys.\n","result":"Prevent document key events.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction changeKey(keynumber, value) {\r\n    var keyChanged = false;\r\n    switch(keynumber) {\r\n        case 109: case 189: case 17: case 173:\r\n            if (keysDown[0] != value) { keyChanged = true; }\r\n            keysDown[0] = value; break;\r\n                case 107: case 187: case 16: case 61:\r\n            if (keysDown[1] != value) { keyChanged = true; }\r\n            keysDown[1] = value; break;\r\n                case 38:\r\n            if (keysDown[2] != value) { keyChanged = true; }\r\n            keysDown[2] = value; break;\r\n                case 87:\r\n            if (keysDown[6] != value) { keyChanged = true; }\r\n            keysDown[6] = value; break;\r\n                case 40:\r\n            if (keysDown[3] != value) { keyChanged = true; }\r\n            keysDown[3] = value; break;\r\n                case 83:\r\n            if (keysDown[7] != value) { keyChanged = true; }\r\n            keysDown[7] = value; break;\r\n                case 37:\r\n            if (keysDown[4] != value) { keyChanged = true; }\r\n            keysDown[4] = value; break;\r\n                case 65:\r\n            if (keysDown[8] != value) { keyChanged = true; }\r\n            keysDown[8] = value; break;\r\n                case 39:\r\n            if (keysDown[5] != value) { keyChanged = true; }\r\n            keysDown[5] = value; break;\r\n                case 68:\r\n            if (keysDown[9] != value) { keyChanged = true; }\r\n            keysDown[9] = value;\r\n    }\r\n        if (keyChanged && value) {\r\n        if (typeof performance !== 'undefined' && performance.now()) {\r\n            prevTime = performance.now();\r\n        } else {\r\n            prevTime = Date.now();\r\n        }\r\n        animateInit();\r\n    }\r\n}","code-length":523,"reference":"Updates list of currently pressed keys.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction animateMove(axis) {\r\n    var t = animatedMove[axis];\r\n    var normTime = Math.min(1, Math.max((Date.now() - t.startTime) \/ 1000 \/ (t.duration \/ 1000), 0));\r\n    var result = t.startPosition + config.animationTimingFunction(normTime) * (t.endPosition - t.startPosition);\r\n    if ((t.endPosition > t.startPosition && result >= t.endPosition) ||\r\n        (t.endPosition < t.startPosition && result <= t.endPosition) ||\r\n        t.endPosition === t.startPosition) {\r\n        result = t.endPosition;\r\n        speed[axis] = 0;\r\n        delete animatedMove[axis];\r\n    }\r\n    config[axis] = result;\r\n}","code-length":203,"reference":"Animates moves.\n","result":"Animate move .","score":[0,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction animate() {\r\n    render();\r\n    if (autoRotateStart)\r\n        clearTimeout(autoRotateStart);\r\n    if (isUserInteracting || orientation === true) {\r\n        requestAnimationFrame(animate);\r\n    } else if (keysDown[0] || keysDown[1] || keysDown[2] || keysDown[3] ||\r\n        keysDown[4] || keysDown[5] || keysDown[6] || keysDown[7] ||\r\n        keysDown[8] || keysDown[9] || config.autoRotate ||\r\n        animatedMove.pitch || animatedMove.yaw || animatedMove.hfov ||\r\n        Math.abs(speed.yaw) > 0.01 || Math.abs(speed.pitch) > 0.01 ||\r\n        Math.abs(speed.hfov) > 0.01) {\r\n        keyRepeat();\r\n        if (config.autoRotateInactivityDelay >= 0 && autoRotateSpeed &&\r\n            Date.now() - latestInteraction > config.autoRotateInactivityDelay &&\r\n            !config.autoRotate) {\r\n            config.autoRotate = autoRotateSpeed;\r\n            _this.lookAt(origPitch, undefined, origHfov, 3000);\r\n        }\r\n        requestAnimationFrame(animate);\r\n    } else if (renderer && (renderer.isLoading() || (config.dynamic === true && update))) {\r\n        requestAnimationFrame(animate);\r\n    } else {\r\n        fireEvent('animatefinished', {pitch: _this.getPitch(), yaw: _this.getYaw(), hfov: _this.getHfov()});\r\n        animating = false;\r\n        prevTime = undefined;\r\n        var autoRotateStartTime = config.autoRotateInactivityDelay -\r\n            (Date.now() - latestInteraction);\r\n        if (autoRotateStartTime > 0) {\r\n            autoRotateStart = setTimeout(function() {\r\n                config.autoRotate = autoRotateSpeed;\r\n                _this.lookAt(origPitch, undefined, origHfov, 3000);\r\n                animateInit();\r\n            }, autoRotateStartTime);\r\n        } else if (config.autoRotateInactivityDelay >= 0 && autoRotateSpeed) {\r\n            config.autoRotate = autoRotateSpeed;\r\n            _this.lookAt(origPitch, undefined, origHfov, 3000);\r\n            animateInit();\r\n        }\r\n    }\r\n}","code-length":585,"reference":"Animates view, using requestAnimationFrame to trigger rendering.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction taitBryanToQuaternion(alpha, beta, gamma) {\r\n    var r = [beta ? beta * Math.PI \/ 180 \/ 2 : 0,\r\n             gamma ? gamma * Math.PI \/ 180 \/ 2 : 0,\r\n             alpha ? alpha * Math.PI \/ 180 \/ 2 : 0];\r\n    var c = [Math.cos(r[0]), Math.cos(r[1]), Math.cos(r[2])],\r\n        s = [Math.sin(r[0]), Math.sin(r[1]), Math.sin(r[2])];\r\n    return new Quaternion(c[0]*c[1]*c[2] - s[0]*s[1]*s[2],\r\n                          s[0]*c[1]*c[2] - c[0]*s[1]*s[2],\r\n                          c[0]*s[1]*c[2] + s[0]*c[1]*s[2],\r\n                          c[0]*c[1]*s[2] + s[0]*s[1]*c[2]);\r\n}","code-length":268,"reference":"Converts device orientation API Tait-Bryan angles to a quaternion.\n","result":"Convert taitBryan to quaternion.","score":[0.1088,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction computeQuaternion(alpha, beta, gamma) {\r\n    var quaternion = taitBryanToQuaternion(alpha, beta, gamma);\r\n    quaternion = quaternion.multiply(new Quaternion(Math.sqrt(0.5), -Math.sqrt(0.5), 0, 0));\r\n    var angle = window.orientation ? -window.orientation * Math.PI \/ 180 \/ 2 : 0;\r\n    return quaternion.multiply(new Quaternion(Math.cos(angle), 0, -Math.sin(angle), 0));\r\n}","code-length":135,"reference":"Computes current device orientation quaternion from device orientation API\nTait-Bryan angles.\n","result":"Compute quaternion.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction orientationListener(e) {\r\n    var q = computeQuaternion(e.alpha, e.beta, e.gamma).toEulerAngles();\r\n    if (typeof(orientation) == 'number' && orientation < 10) {\r\n        orientation += 1;\r\n    } else if (orientation === 10) {\r\n        orientationYawOffset = q[2] \/ Math.PI * 180 + config.yaw;\r\n        orientation = true;\r\n        requestAnimationFrame(animate);\r\n    } else {\r\n        config.pitch = q[0] \/ Math.PI * 180;\r\n        config.roll = -q[1] \/ Math.PI * 180;\r\n        config.yaw = -q[2] \/ Math.PI * 180 + orientationYawOffset;\r\n    }\r\n}","code-length":198,"reference":"Event handler for device orientation API. Controls pointing.\n","result":"Listen to orientation events.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renderInit() {\r\n    try {\r\n        var params = {};\r\n        if (config.horizonPitch !== undefined)\r\n            params.horizonPitch = config.horizonPitch * Math.PI \/ 180;\r\n        if (config.horizonRoll !== undefined)\r\n            params.horizonRoll = config.horizonRoll * Math.PI \/ 180;\r\n        if (config.backgroundColor !== undefined)\r\n            params.backgroundColor = config.backgroundColor;\r\n        renderer.init(panoImage, config.type, config.dynamic, config.haov * Math.PI \/ 180, config.vaov * Math.PI \/ 180, config.vOffset * Math.PI \/ 180, renderInitCallback, params);\r\n        if (config.dynamic !== true) {\r\n            panoImage = undefined;\r\n        }\r\n    } catch(event) {\r\n                if (event.type == 'webgl error' || event.type == 'no webgl') {\r\n            anError();\r\n        } else if (event.type == 'webgl size error') {\r\n            anError(config.strings.textureSizeError.replace('%s', event.width).replace('%s', event.maxWidth));\r\n        } else {\r\n            anError(config.strings.unknownError);\r\n            throw event;\r\n        }\r\n    }\r\n}","code-length":332,"reference":"Initializes renderer.\n","result":"Initialize the renderer.","score":[0.4082,0.4762]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renderInitCallback() {\r\n    if (config.sceneFadeDuration && renderer.fadeImg !== undefined) {\r\n        renderer.fadeImg.style.opacity = 0;\r\n        var fadeImg = renderer.fadeImg;\r\n        delete renderer.fadeImg;\r\n        setTimeout(function() {\r\n            renderContainer.removeChild(fadeImg);\r\n            fireEvent('scenechangefadedone');\r\n        }, config.sceneFadeDuration);\r\n    }\r\n        if (config.compass) {\r\n        compass.style.display = 'inline';\r\n    } else {\r\n        compass.style.display = 'none';\r\n    }\r\n        createHotSpots();\r\n        infoDisplay.load.box.style.display = 'none';\r\n    if (preview !== undefined) {\r\n        renderContainer.removeChild(preview);\r\n        preview = undefined;\r\n    }\r\n    loaded = true;\r\n    fireEvent('load');\r\n        animateInit();\r\n}","code-length":248,"reference":"Triggered when render initialization finishes. Handles fading between\nscenes as well as showing the compass and hotspots and hiding the loading\ndisplay.\n","result":"Create the render container.","score":[0.0042,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createHotSpots() {\r\n    if (hotspotsCreated) return;\r\n    if (!config.hotSpots) {\r\n        config.hotSpots = [];\r\n    } else {\r\n        config.hotSpots = config.hotSpots.sort(function(a, b) {\r\n            return a.pitch < b.pitch;\r\n        });\r\n        config.hotSpots.forEach(createHotSpot);\r\n    }\r\n    hotspotsCreated = true;\r\n    renderHotSpots();\r\n}","code-length":138,"reference":"Creates hot spot elements for the current scene.\n","result":"Create hot spots.","score":[0.0771,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction destroyHotSpots() {\r\n    var hs = config.hotSpots;\r\n    hotspotsCreated = false;\r\n    delete config.hotSpots;\r\n    if (hs) {\r\n        for (var i = 0; i < hs.length; i++) {\r\n            var current = hs[i].div;\r\n            if (current) {\r\n                while (current.parentNode && current.parentNode != renderContainer) {\r\n                    current = current.parentNode;\r\n                }\r\n                renderContainer.removeChild(current);\r\n            }\r\n            delete hs[i].div;\r\n        }\r\n    }\r\n}","code-length":164,"reference":"Destroys currently created hot spot elements.\n","result":"Destroy hotspots.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renderHotSpot(hs) {\r\n    var hsPitchSin = Math.sin(hs.pitch * Math.PI \/ 180),\r\n        hsPitchCos = Math.cos(hs.pitch * Math.PI \/ 180),\r\n        configPitchSin = Math.sin(config.pitch * Math.PI \/ 180),\r\n        configPitchCos = Math.cos(config.pitch * Math.PI \/ 180),\r\n        yawCos = Math.cos((-hs.yaw + config.yaw) * Math.PI \/ 180);\r\n    var z = hsPitchSin * configPitchSin + hsPitchCos * yawCos * configPitchCos;\r\n    if ((hs.yaw <= 90 && hs.yaw > -90 && z <= 0) ||\r\n      ((hs.yaw > 90 || hs.yaw <= -90) && z <= 0)) {\r\n        hs.div.style.visibility = 'hidden';\r\n    } else {\r\n        var yawSin = Math.sin((-hs.yaw + config.yaw) * Math.PI \/ 180),\r\n            hfovTan = Math.tan(config.hfov * Math.PI \/ 360);\r\n        hs.div.style.visibility = 'visible';\r\n           canvasWidth = canvas.clientWidth,\r\n            canvasHeight = canvas.clientHeight;\r\n        var coord = [-canvasWidth \/ hfovTan * yawSin * hsPitchCos \/ z \/ 2,\r\n            -canvasWidth \/ hfovTan * (hsPitchSin * configPitchCos -\r\n            hsPitchCos * yawCos * configPitchSin) \/ z \/ 2];\r\n        var rollSin = Math.sin(config.roll * Math.PI \/ 180),\r\n            rollCos = Math.cos(config.roll * Math.PI \/ 180);\r\n        coord = [coord[0] * rollCos - coord[1] * rollSin,\r\n                 coord[0] * rollSin + coord[1] * rollCos];\r\n        coord[0] += (canvasWidth - hs.div.offsetWidth) \/ 2;\r\n        coord[1] += (canvasHeight - hs.div.offsetHeight) \/ 2;\r\n        var transform = 'translate(' + coord[0] + 'px, ' + coord[1] +\r\n            'px) translateZ(9999px) rotate(' + config.roll + 'deg)';\r\n        hs.div.style.webkitTransform = transform;\r\n        hs.div.style.MozTransform = transform;\r\n        hs.div.style.transform = transform;\r\n    }\r\n}","code-length":649,"reference":"Renders hot spot, updating its position and visibility.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeConfig(sceneId) {\r\n    config = {};\r\n    var k, s;\r\n    var photoSphereExcludes = ['haov', 'vaov', 'vOffset', 'northOffset', 'horizonPitch', 'horizonRoll'];\r\n    specifiedPhotoSphereExcludes = [];\r\n        for (k in defaultConfig) {\r\n        if (defaultConfig.hasOwnProperty(k)) {\r\n            config[k] = defaultConfig[k];\r\n        }\r\n    }\r\n        for (k in initialConfig.default) {\r\n        if (initialConfig.default.hasOwnProperty(k)) {\r\n            if (k == 'strings') {\r\n                for (s in initialConfig.default.strings) {\r\n                    if (initialConfig.default.strings.hasOwnProperty(s)) {\r\n                        config.strings[s] = escapeHTML(initialConfig.default.strings[s]);\r\n                    }\r\n                }\r\n            } else {\r\n                config[k] = initialConfig.default[k];\r\n                if (photoSphereExcludes.indexOf(k) >= 0) {\r\n                    specifiedPhotoSphereExcludes.push(k);\r\n                }\r\n            }\r\n        }\r\n    }\r\n        if ((sceneId !== null) && (sceneId !== '') && (initialConfig.scenes) && (initialConfig.scenes[sceneId])) {\r\n        var scene = initialConfig.scenes[sceneId];\r\n        for (k in scene) {\r\n            if (scene.hasOwnProperty(k)) {\r\n                if (k == 'strings') {\r\n                    for (s in scene.strings) {\r\n                        if (scene.strings.hasOwnProperty(s)) {\r\n                            config.strings[s] = escapeHTML(scene.strings[s]);\r\n                        }\r\n                    }\r\n                } else {\r\n                    config[k] = scene[k];\r\n                    if (photoSphereExcludes.indexOf(k) >= 0) {\r\n                        specifiedPhotoSphereExcludes.push(k);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        config.scene = sceneId;\r\n    }\r\n        for (k in initialConfig) {\r\n        if (initialConfig.hasOwnProperty(k)) {\r\n            if (k == 'strings') {\r\n                for (s in initialConfig.strings) {\r\n                    if (initialConfig.strings.hasOwnProperty(s)) {\r\n                        config.strings[s] = escapeHTML(initialConfig.strings[s]);\r\n                    }\r\n                }\r\n            } else {\r\n                config[k] = initialConfig[k];\r\n                if (photoSphereExcludes.indexOf(k) >= 0) {\r\n                    specifiedPhotoSphereExcludes.push(k);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","code-length":671,"reference":"Merges a scene configuration into the current configuration.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toggleFullscreen() {\r\n    if (loaded && !error) {\r\n        if (!fullscreenActive) {\r\n            try {\r\n                if (container.requestFullscreen) {\r\n                    container.requestFullscreen();\r\n                } else if (container.mozRequestFullScreen) {\r\n                    container.mozRequestFullScreen();\r\n                } else if (container.msRequestFullscreen) {\r\n                    container.msRequestFullscreen();\r\n                } else {\r\n                    container.webkitRequestFullScreen();\r\n                }\r\n            } catch(event) {\r\n            }\r\n        } else {\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            } else if (document.mozCancelFullScreen) {\r\n                document.mozCancelFullScreen();\r\n            } else if (document.webkitCancelFullScreen) {\r\n                document.webkitCancelFullScreen();\r\n            } else if (document.msExitFullscreen) {\r\n                document.msExitFullscreen();\r\n            }\r\n        }\r\n    }\r\n}","code-length":266,"reference":"Toggles fullscreen mode.\n","result":"Toggle the fullscreen state.","score":[0.3195,0.3226]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onFullScreenChange(resize) {\r\n    if (document.fullscreenElement || document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement) {\r\n        controls.fullscreen.classList.add('pnlm-fullscreen-toggle-button-active');\r\n        fullscreenActive = true;\r\n    } else {\r\n        controls.fullscreen.classList.remove('pnlm-fullscreen-toggle-button-active');\r\n        fullscreenActive = false;\r\n    }\r\n    if (resize !== 'resize')\r\n        fireEvent('fullscreenchange', fullscreenActive);\r\n    renderer.resize();\r\n    setHfov(config.hfov);\r\n    animateInit();\r\n}","code-length":187,"reference":"Event handler for fullscreen changes.\n","result":"Detect when the window is resized.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction constrainHfov(hfov) {\r\n    var minHfov = config.minHfov;\r\n    if (config.type == 'multires' && renderer && config.multiResMinHfov) {\r\n        minHfov = Math.min(minHfov, renderer.getCanvas().width \/ (config.multiRes.cubeResolution \/ 90 * 0.9));\r\n    }\r\n    if (minHfov > config.maxHfov) {\r\n        console.log('HFOV bounds do not make sense (minHfov > maxHfov).')\r\n        return config.hfov;\r\n    }\r\n    var newHfov = config.hfov;\r\n    if (hfov < minHfov) {\r\n        newHfov = minHfov;\r\n    } else if (hfov > config.maxHfov) {\r\n        newHfov = config.maxHfov;\r\n    } else {\r\n        newHfov = hfov;\r\n    }\r\n    if (config.avoidShowingBackground && renderer) {\r\n        var canvas = renderer.getCanvas();\r\n        newHfov = Math.min(newHfov,\r\n                           Math.atan(Math.tan((config.maxPitch - config.minPitch) \/ 360 * Math.PI) \/\r\n                                     canvas.height * canvas.width)\r\n                               * 360 \/ Math.PI);\r\n    }\r\n    return newHfov;\r\n}","code-length":378,"reference":"Clamps horzontal field of view to viewer's limits.\n","result":"Constrain the hfov to the maxHfov.","score":[0.1383,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stopAnimation() {\r\n    animatedMove = {};\r\n    autoRotateSpeed = config.autoRotate ? config.autoRotate : autoRotateSpeed;\r\n    config.autoRotate = false;\r\n}","code-length":56,"reference":"Stops auto rotation and animated moves.\n","result":"Stop the animation.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction load() {\r\n    clearError();\r\n    loaded = false;\r\n    controls.load.style.display = 'none';\r\n    infoDisplay.load.box.style.display = 'inline';\r\n    init();\r\n}","code-length":65,"reference":"Loads panorama.\n","result":"Load the library.","score":[0,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadScene(sceneId, targetPitch, targetYaw, targetHfov, fadeDone) {\r\n    loaded = false;\r\n    animatedMove = {};\r\n        var fadeImg, workingPitch, workingYaw, workingHfov;\r\n    if (config.sceneFadeDuration && !fadeDone) {\r\n        var data = renderer.render(config.pitch * Math.PI \/ 180, config.yaw * Math.PI \/ 180, config.hfov * Math.PI \/ 180, {returnImage: true});\r\n        if (data !== undefined) {\r\n            fadeImg = new Image();\r\n            fadeImg.className = 'pnlm-fade-img';\r\n            fadeImg.style.transition = 'opacity ' + (config.sceneFadeDuration \/ 1000) + 's';\r\n            fadeImg.style.width = '100%';\r\n            fadeImg.style.height = '100%';\r\n            fadeImg.onload = function() {\r\n                loadScene(sceneId, targetPitch, targetYaw, targetHfov, true);\r\n            };\r\n            fadeImg.src = data;\r\n            renderContainer.appendChild(fadeImg);\r\n            renderer.fadeImg = fadeImg;\r\n            return;\r\n        }\r\n    }\r\n        if (targetPitch === 'same') {\r\n        workingPitch = config.pitch;\r\n    } else {\r\n        workingPitch = targetPitch;\r\n    }\r\n    if (targetYaw === 'same') {\r\n        workingYaw = config.yaw;\r\n    } else if (targetYaw === 'sameAzimuth') {\r\n        workingYaw = config.yaw + (config.northOffset || 0) - (initialConfig.scenes[sceneId].northOffset || 0);\r\n    } else {\r\n        workingYaw = targetYaw;\r\n    }\r\n    if (targetHfov === 'same') {\r\n        workingHfov = config.hfov;\r\n    } else {\r\n        workingHfov = targetHfov;\r\n    }\r\n        destroyHotSpots();\r\n        mergeConfig(sceneId);\r\n    speed.yaw = speed.pitch = speed.hfov = 0;\r\n    processOptions();\r\n    if (workingPitch !== undefined) {\r\n        config.pitch = workingPitch;\r\n    }\r\n    if (workingYaw !== undefined) {\r\n        config.yaw = workingYaw;\r\n    }\r\n    if (workingHfov !== undefined) {\r\n        config.hfov = workingHfov;\r\n    }\r\n    fireEvent('scenechange', sceneId);\r\n    load();\r\n    update = config.dynamicUpdate === true;\r\n    if (config.dynamic) {\r\n        panoImage = config.panorama;\r\n        onImageLoad();\r\n    }\r\n}","code-length":709,"reference":"Loads scene.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stopOrientation() {\r\n    window.removeEventListener('deviceorientation', orientationListener);\r\n    controls.orientation.classList.remove('pnlm-orientation-button-active');\r\n    orientation = false;\r\n}","code-length":59,"reference":"Stop using device orientation.\n","result":"Stop the orientation.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fireEvent(type) {\r\n    if (type in externalEventListeners) {\r\n        for (var i = externalEventListeners[type].length; i > 0; i--) {\r\n            externalEventListeners[type][externalEventListeners[type].length - i].apply(null, [].slice.call(arguments, 1));\r\n        }\r\n    }\r\n}","code-length":91,"reference":"Fire listeners attached to specified event.\n","result":"Prevent external event listeners from firing.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(latchFunction, optional_timeoutMessage, optional_timeout) {\r\n  jasmine.getEnv().currentSpec.waitsFor.apply(jasmine.getEnv().currentSpec, arguments);\r\n}","code-length":59,"reference":"Waits for the latchFunction to return true before proceeding to the next block.\n\n","result":"Test the function .","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction $getMouseOffset(target, ev){\r\n    ev = ev || _window.event;\r\n    var docPos    = $getPosition(target);\r\n    var mousePos  = $mouseCoords(ev);\r\n    return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y};\r\n}","code-length":91,"reference":"cross-browser utility functions","result":"Calculate mouse offsets.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(val, flags){\r\n    number_check(val)\r\n    if(! flags.precision){\r\n        if(! flags.decimal_point){\r\n            flags.precision = 6\r\n        }else{\r\n            flags.precision = 0\r\n        }\r\n    }else{\r\n        flags.precision = parseInt(flags.precision, 10)\r\n        validate_precision(flags.precision)\r\n    }\r\n    return parseFloat(val)\r\n}","code-length":119,"reference":"converts val to float and sets precision if missing","result":"Validate the number.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(self, other){\r\n    if(_b_.isinstance(other, int)) {\r\n        if(other.__class__ === $B.long_int){\r\n            return $B.long_int.__sub__($B.long_int.$factory(self),\r\n                $B.long_int.$factory(other))\r\n        }\r\n        other = int_value(other)\r\n        if(self > $B.max_int32 || self < $B.min_int32 ||\r\n                other > $B.max_int32 || other < $B.min_int32){\r\n            return $B.long_int.__sub__($B.long_int.$factory(self),\r\n                $B.long_int.$factory(other))\r\n        }\r\n        return self - other\r\n    }\r\n    if(_b_.isinstance(other, _b_.bool)){return self - other}\r\n    var rsub = $B.$getattr(other, \"__rsub__\", _b_.None)\r\n    if(rsub !== _b_.None){return rsub(self)}\r\n    $err(\"-\", other)\r\n}","code-length":281,"reference":"code for operands & | ^","result":"Compare two long ints.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(self, other){\r\n    if(_b_.isinstance(other, int)){\r\n        other = int_value(other)\r\n        if(typeof other == \"number\"){\r\n            var res = self.valueOf() - other.valueOf()\r\n            if(res > $B.min_int && res < $B.max_int){return res}\r\n            else{return $B.long_int.__sub__($B.long_int.$factory(self),\r\n                $B.long_int.$factory(other))}\r\n        }else if(typeof other == \"boolean\"){\r\n            return other ? self - 1 : self\r\n        }else{\r\n            return $B.long_int.__sub__($B.long_int.$factory(self),\r\n                $B.long_int.$factory(other))\r\n        }\r\n    }\r\n    if(_b_.isinstance(other, _b_.float)){\r\n        return new Number(self - other)\r\n    }\r\n    if(_b_.isinstance(other, _b_.complex)){\r\n        return $B.make_complex(self - other.$real, -other.$imag)\r\n    }\r\n    if(_b_.isinstance(other, _b_.bool)){\r\n         var bool_value = 0;\r\n         if(other.valueOf()){bool_value = 1}\r\n         return self - bool_value\r\n    }\r\n    if(_b_.isinstance(other, _b_.complex)){\r\n        return $B.make_complex(self.valueOf() - other.$real, other.$imag)\r\n    }\r\n    var rsub = $B.$getattr(other, \"__rsub__\", _b_.None)\r\n    if(rsub !== _b_.None){return rsub(self)}\r\n    throw $err(\"-\", other)\r\n}","code-length":454,"reference":"code for + and -","result":"Take a subtraction of two numbers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inlineResourcesFromString(content, urlResolver) {\r\n  return [\r\n    inlineTemplate,\r\n    inlineStyle,\r\n    removeModuleId\r\n  ].reduce((content, fn) => fn(content, urlResolver), content);\r\n}","code-length":67,"reference":"Inline resources from a string content.\n","result":"Remove module ids.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildSass(content, sourceFile) {\r\n  try {\r\n    const result = sass.renderSync({\r\n      data: content,\r\n      file: sourceFile,\r\n      importer: tildeImporter\r\n    });\r\n    return result.css.toString()\r\n  } catch (e) {\r\n    console.error('\\x1b[41m');\r\n    console.error('at ' + sourceFile + ':' + e.line + \":\" + e.column);\r\n    console.error(e.formatted);\r\n    console.error('\\x1b[0m');\r\n    return \"\";\r\n  }\r\n}","code-length":159,"reference":"build sass content to css\n","result":"Build the sass file.","score":[0.2488,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FormioResourceRoutes(config) {\r\n    config = config || {};\r\n    return [\r\n        {\r\n            path: '',\r\n            component: config.index || index_component_1.FormioResourceIndexComponent\r\n        },\r\n        {\r\n            path: 'new',\r\n            component: config.create || create_component_1.FormioResourceCreateComponent\r\n        },\r\n        {\r\n            path: ':id',\r\n            component: config.resource || resource_component_1.FormioResourceComponent,\r\n            children: [\r\n                {\r\n                    path: '',\r\n                    redirectTo: 'view',\r\n                    pathMatch: 'full'\r\n                },\r\n                {\r\n                    path: 'view',\r\n                    component: config.view || view_component_1.FormioResourceViewComponent\r\n                },\r\n                {\r\n                    path: 'edit',\r\n                    component: config.edit || edit_component_1.FormioResourceEditComponent\r\n                },\r\n                {\r\n                    path: 'delete',\r\n                    component: config.delete || delete_component_1.FormioResourceDeleteComponent\r\n                }\r\n            ]\r\n        }\r\n    ];\r\n}","code-length":295,"reference":"The routes used to define a resource.","result":"Resolve all the routes that are defined in the app.","score":[0.1086,0.2055]}
{"code":"\/*is used to<extra_id_0>\r\nfunction BaseProducer (client, options, defaultPartitionerType, customPartitioner) {\r\n  EventEmitter.call(this);\r\n  options = options || {};\r\n  this.ready = false;\r\n  this.client = client;\r\n  this.requireAcks = options.requireAcks === undefined ? DEFAULTS.requireAcks : options.requireAcks;\r\n  this.ackTimeoutMs = options.ackTimeoutMs === undefined ? DEFAULTS.ackTimeoutMs : options.ackTimeoutMs;\r\n  if (customPartitioner !== undefined && options.partitionerType !== PARTITIONER_TYPES.custom) {\r\n    throw new Error('Partitioner Type must be custom if providing a customPartitioner.');\r\n  } else if (customPartitioner === undefined && options.partitionerType === PARTITIONER_TYPES.custom) {\r\n    throw new Error('No customer partitioner defined');\r\n  }\r\n  var partitionerType = PARTITIONER_MAP[options.partitionerType] || PARTITIONER_MAP[defaultPartitionerType];\r\n  this.partitioner = new partitionerType(customPartitioner);\r\n  this.connect();\r\n}","code-length":274,"reference":"Provides common functionality for a kafka producer\n\n","result":"Create a new producer.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Context (options) {\r\n  if (!options) options = { body: '', hostname: '' };\r\n  const body = options.body;\r\n  const href = 'http:\r\n  const cache = Object.create(null);\r\n  const keys = [];\r\n  this.atob = function (str) {\r\n    return Buffer.from(str, 'base64').toString('binary');\r\n  };\r\n  this.location = { reload: function () {} };\r\n  this.document = {\r\n    createElement: function () {\r\n      return { firstChild: { href: href } };\r\n    },\r\n    getElementById: function (id) {\r\n      if (keys.indexOf(id) === -1) {\r\n        const re = new RegExp(' id=[\\'\"]?' + id + '[^>]*>([^<]*)');\r\n        const match = body.match(re);\r\n        keys.push(id);\r\n        cache[id] = match === null ? match : { innerHTML: match[1] };\r\n      }\r\n      return cache[id];\r\n    }\r\n  };\r\n}","code-length":277,"reference":"Global context used to evaluate standard IUAM JS challenge","result":"Create a new Context.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction alternative (options, { captcha: { url, siteKey } }) {\r\n  console.error('The url is \"' + url + '\"');\r\n  console.error('The site key is \"' + siteKey + '\"');\r\n  return Promise.reject(new Error('This is a dummy function'));\r\n}","code-length":81,"reference":"An example handler with destructuring arguments","result":"Create the alternative function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction performRequest (options, isFirstRequest) {\r\n  const requester = options.requester;\r\n  const request = requester(options);\r\n  if (request.getHeader('host') === HOST) {\r\n    request.setHeader('host', request.uri.host);\r\n  }\r\n  if (typeof request.callback !== 'function') {\r\n    throw new TypeError('Expected a callback function, got ' +\r\n        typeof (request.callback) + ' instead.');\r\n  }\r\n  if (isFirstRequest) {\r\n    options.callback = request.callback;\r\n  }\r\n  request.removeAllListeners('error')\r\n    .once('error', function (error) {\r\n      onRequestResponse(options, error);\r\n    });\r\n  request.removeAllListeners('complete')\r\n    .once('complete', function (response, body) {\r\n      onRequestResponse(options, null, response, body);\r\n    });\r\n  request.cloudscraper = true;\r\n  return request;\r\n}","code-length":251,"reference":"This function is wrapped to ensure that we get new options on first call. The options object is reused in subsequent calls when calling it directly.","result":"Perform a request.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onRequestResponse (options, error, response, body) {\r\n  const callback = options.callback;\r\n  if (error || !body || !body.toString) {\r\n    return callback(new RequestError(error, options, response));\r\n  }\r\n  response.responseStartTime = Date.now();\r\n  response.isCloudflare = \/^cloudflare\/i.test('' + response.caseless.get('server'));\r\n  response.isHTML = \/text\\\/html\/i.test('' + response.caseless.get('content-type'));\r\n  if (!Buffer.isBuffer(body)) {\r\n    return callback(null, response, body);\r\n  }\r\n  if (\/\\bbr\\b\/i.test('' + response.caseless.get('content-encoding'))) {\r\n    if (!brotli.isAvailable) {\r\n      const cause = 'Received a Brotli compressed response. Please install brotli';\r\n      return callback(new RequestError(cause, options, response));\r\n    }\r\n    response.body = body = brotli.decompress(body);\r\n  }\r\n  if (response.isCloudflare && response.isHTML) {\r\n    onCloudflareResponse(options, response, body);\r\n  } else {\r\n    onRequestComplete(options, response, body);\r\n  }\r\n}","code-length":338,"reference":"The argument convention is options first where possible, options always before response, and body always after response.","result":"Detect if a request has been made to a server.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onCaptcha (options, response, body) {\r\n  const callback = options.callback;\r\n  const handler = options.onCaptcha;\r\n  const payload = {  };\r\n  let cause;\r\n  let match;\r\n  match = body.match(\/<form(?: [^<>]*)? id=[\"']?challenge-form['\"]?(?: [^<>]*)?>([\\S\\s]*?)<\\\/form>\/);\r\n  if (!match) {\r\n    cause = 'Challenge form extraction failed';\r\n    return callback(new ParserError(cause, options, response));\r\n  }\r\n  const form = response.challengeForm = match[1];\r\n  match = form.match(\/\\\/recaptcha\\\/api\\\/fallback\\?k=([^\\s\"'<>]*)\/);\r\n  if (!match) {\r\n    match = body.match(\/data-sitekey=[\"']?([^\\s\"'<>]*)\/);\r\n    if (!match) {\r\n      cause = 'Unable to find the reCAPTCHA site key';\r\n      return callback(new ParserError(cause, options, response));\r\n    }\r\n  }\r\n  response.captcha = {\r\n    url: response.request.uri.href,\r\n    siteKey: match[1],\r\n    form: payload\r\n  };\r\n  match = form.match(\/<input(?: [^<>]*)? name=[^<>]+>\/g);\r\n  if (!match) {\r\n    cause = 'Challenge form is missing inputs';\r\n    return callback(new ParserError(cause, options, response));\r\n  }\r\n  const inputs = match;\r\n  for (let name, value, i = 0; i < inputs.length; i++) {\r\n    name = inputs[i].match(\/name=[\"']?([^\\s\"'<>]*)\/);\r\n    if (name) {\r\n      value = inputs[i].match(\/value=[\"']?([^\\s\"'<>]*)\/);\r\n      if (value) {\r\n        payload[name[1]] = value[1];\r\n      }\r\n    }\r\n  }\r\n  if (!payload['s']) {\r\n    cause = 'Challenge form is missing secret input';\r\n    return callback(new ParserError(cause, options, response));\r\n  }\r\n  const submit = function (error) {\r\n    if (error) {\r\n      return callback(new CaptchaError(error, options, response));\r\n    }\r\n    onSubmitCaptcha(options, response, body);\r\n  };\r\n  response.captcha.submit = submit;\r\n  const thenable = handler(options, response, body);\r\n  if (thenable && typeof thenable.then === 'function') {\r\n    thenable.then(submit, function (error) {\r\n      if (!error) {\r\n        submit(new Error('Falsy error'));\r\n      } else {\r\n        submit(error);\r\n      }\r\n    });\r\n  }\r\n}","code-length":706,"reference":"Parses the reCAPTCHA form and hands control over to the user","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (error) {\r\n    if (error) {\r\n      return callback(new CaptchaError(error, options, response));\r\n    }\r\n    onSubmitCaptcha(options, response, body);\r\n  }","code-length":60,"reference":"The callback used to green light form submission","result":"Validate the captcha.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assets(userOptions = {}) {\r\n  const options = {\r\n    ...defaults,\r\n    ...userOptions,\r\n  };\r\n  return (files, metalsmith, cb) => {\r\n    const src = metalsmith.path(options.source);\r\n    const dest = options.destination;\r\nirError) {\r\n        cb(readDirError);\r\n        return;\r\n      }\r\n      each(arr, read, err => cb(err, files));\r\n    });\r\n    function read(file, done) {\r\n      const name = path.join(dest, path.relative(src, file));\r\n      fs.stat(file, (statError, stats) => {\r\n        if (statError) {\r\n          done(statError);\r\n          return;\r\n        }\r\n        fs.readFile(file, (err, buffer) => {\r\n          if (err) {\r\n            done(err);\r\n            return;\r\n          }\r\n          const newFile = {};\r\n          newFile.contents = buffer;\r\n          newFile.stats = stats;\r\n          newFile.mode = mode(stats).toOctal();\r\n          files[name] = newFile;\r\n          done();\r\n        });\r\n      });\r\n    }\r\n  };\r\n}","code-length":322,"reference":"Metalsmith plugin to include static assets.\n\n","result":"Generate the assets.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getStartStopBoundaries(parent, sidebar, topOffset) {\r\n  const bbox = parent.getBoundingClientRect();\r\n  const sidebarBbox = sidebar.getBoundingClientRect();\r\n  const bodyBbox = document.body.getBoundingClientRect();\r\n  const containerAbsoluteTop = bbox.top - bodyBbox.top;\r\n  const sidebarAbsoluteTop = sidebarBbox.top - bodyBbox.top;\r\n  const marginTop = sidebarAbsoluteTop - containerAbsoluteTop;\r\n  const start = containerAbsoluteTop - topOffset;\r\n  const stop = bbox.height + containerAbsoluteTop - sidebarBbox.height - marginTop - topOffset;\r\n  return {\r\n    start,\r\n    stop,\r\n  };\r\n}","code-length":179,"reference":"Defines the limits where to start or stop the stickiness\n","result":"Create the start.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction around (obj, method, fn) {\r\n  var old = obj[method]\r\n  obj[method] = function () {\r\n    var args = new Array(arguments.length)\r\n    for (var i = 0; i < args.length; i++) args[i] = arguments[i]\r\n    return fn.call(this, old, args)\r\n  }\r\n}","code-length":101,"reference":"Install an around function; AOP.","result":"Wrap functions in an object.","score":[0.2403,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction before (obj, method, fn) {\r\n  var old = obj[method]\r\n  obj[method] = function () {\r\n    fn.call(this)\r\n    old.apply(this, arguments)\r\n  }\r\n}","code-length":67,"reference":"Install a before function; AOP.","result":"Run the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyTemplate (from, to) {\r\n  write(to, fs.readFileSync(path.join(TEMPLATE_DIR, from), 'utf-8'))\r\n}","code-length":49,"reference":"Copy file from template directory.","result":"Copy the template.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyTemplateMulti (fromDir, toDir, nameGlob) {\r\n  fs.readdirSync(path.join(TEMPLATE_DIR, fromDir))\r\n    .filter(minimatch.filter(nameGlob, { matchBase: true }))\r\n    .forEach(function (name) {\r\n      copyTemplate(path.join(fromDir, name), path.join(toDir, name))\r\n    })\r\n}","code-length":110,"reference":"Copy multiple files from template directory.","result":"Copy multiple templates.","score":[0.2124,0.3289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createAppName (pathName) {\r\n  return path.basename(pathName)\r\n    .replace(\/[^A-Za-z0-9.-]+\/g, '-')\r\n    .replace(\/^[-_.]+|-+$\/g, '')\r\n    .toLowerCase()\r\n}","code-length":77,"reference":"Create an app name from a directory path, fitting npm naming requirements.\n\n","result":"Create a new application name.","score":[0.0705,0.0885]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emptyDirectory (dir, fn) {\r\n  fs.readdir(dir, function (err, files) {\r\n    if (err && err.code !== 'ENOENT') throw err\r\n    fn(!files || !files.length)\r\n  })\r\n}","code-length":74,"reference":"Check if the given directory `dir` is empty.\n\n","result":"Remove empty directories.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exit (code) {\r\nstderr]\r\n  exit.exited = true\r\n  streams.forEach(function (stream) {\r\n    draining += 1\r\n    stream.write('', done)\r\n  })\r\n  done()\r\n}","code-length":71,"reference":"Graceful exit for async STDIO","result":"Exit the process.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadTemplate (name) {\r\n  var contents = fs.readFileSync(path.join(__dirname, '..', 'templates', (name + '.ejs')), 'utf-8')\r\n  var locals = Object.create(null)\r\n  function render () {\r\n    return ejs.render(contents, locals, {\r\n      escape: util.inspect\r\n    })\r\n  }\r\n  return {\r\n    locals: locals,\r\n    render: render\r\n  }\r\n}","code-length":127,"reference":"Load template file.","result":"Load templates.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction main () {\r\n  var destinationPath = program.args.shift() || '.'\r\n  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'\r\n  if (program.view === true) {\r\n    if (program.ejs) program.view = 'ejs'\r\n    if (program.hbs) program.view = 'hbs'\r\n    if (program.hogan) program.view = 'hjs'\r\n    if (program.pug) program.view = 'pug'\r\n  }\r\n  if (program.view === true) {\r\n    warning('the default view engine will not be jade in future releases\\n' +\r\n      \"use `--view=jade' or `--help' for additional options\")\r\n    program.view = 'jade'\r\n  }\r\n  emptyDirectory(destinationPath, function (empty) {\r\n    if (empty || program.force) {\r\n      createApplication(appName, destinationPath)\r\n    } else {\r\n      confirm('destination is not empty, continue? [y\/N] ', function (ok) {\r\n        if (ok) {\r\n          process.stdin.destroy()\r\n          createApplication(appName, destinationPath)\r\n        } else {\r\n          console.error('aborting')\r\n          exit(1)\r\n        }\r\n      })\r\n    }\r\n  })\r\n}","code-length":346,"reference":"Main program.","result":"Create a new application.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mkdir (base, dir) {\r\n  var loc = path.join(base, dir)\r\n  console.log('   \\x1b[36mcreate\\x1b[0m : ' + loc + path.sep)\r\n  mkdirp.sync(loc, MODE_0755)\r\n}","code-length":81,"reference":"Make the given dir relative to base.\n\n","result":"Create a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renamedOption (originalName, newName) {\r\n  return function (val) {\r\n    warning(util.format(\"option `%s' has been renamed to `%s'\", originalName, newName))\r\n    return val\r\n  }\r\n}","code-length":66,"reference":"Generate a callback function for commander to warn about renamed option.\n\n","result":"Rename options.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction warning (message) {\r\n  console.error()\r\n  message.split('\\n').forEach(function (line) {\r\n    console.error('  warning: %s', line)\r\n  })\r\n  console.error()\r\n}","code-length":70,"reference":"Display a warning similar to how errors are displayed by commander.\n\n","result":"Suppress warning.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction write (file, str, mode) {\r\n  fs.writeFileSync(file, str, { mode: mode || MODE_0666 })\r\n  console.log('   \\x1b[36mcreate\\x1b[0m : ' + file)\r\n}","code-length":74,"reference":"echo str > file.\n\n","result":"Create a file.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bind_d3(f, context) {\r\n    return function() {\r\n        var args = [this].concat([].slice.call(arguments))\r\n        f.apply(context, args)\r\n    }\r\n}","code-length":63,"reference":"similar to _.bind, except it puts this as first argument to f, followed be other arguments, and make context f's this","result":"Functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction adjustOptions(options) {\r\n  const directory = process.cwd();\r\n  const configPath = getWebpackConfigPath(directory, options.config);\r\n  const haulOptions = getHaulConfig(configPath, logger);\r\n  if (haulOptions.platforms) {\r\n    const platformOption =\r\n      command.options && command.options.find(_ => _.name === 'platform');\r\n    if (platformOption) {\r\n      platformOption.choices = [];\r\n      for (const platformName in haulOptions.platforms) {\r\n        if (\r\n          Object.prototype.hasOwnProperty.call(\r\n            haulOptions.platforms,\r\n            platformName\r\n          )\r\n        ) {\r\n          if (platformOption.choices) {\r\n            platformOption.choices.push({\r\n              value: platformName,\r\n              description: `Builds ${haulOptions.platforms[\r\n                platformName\r\n              ]} bundle`,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","code-length":260,"reference":"Allow config file to override the list of availiable platforms","result":"Adjust options.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction devToolsMiddleware(debuggerProxy) {\r\n  return (req, res, next) => {\r\n    switch (req.cleanPath) {\r\n            case '\/debugger-ui\/':\r\n      case '\/debugger-ui': {\r\n        const readStream = fs.createReadStream(\r\n          path.join(__dirname, '..\/assets\/debugger.html')\r\n        );\r\n        res.writeHead(200, { 'Content-Type': 'text\/html' });\r\n        readStream.pipe(res);\r\n        break;\r\n      }\r\n            case '\/debugger-ui\/debuggerWorker.js':\r\n      case '\/debuggerWorker.js': {\r\n        const readStream = fs.createReadStream(\r\n          path.join(__dirname, '..\/assets\/debuggerWorker.js')\r\n        );\r\n        res.writeHead(200, { 'Content-Type': 'application\/javascript' });\r\n        readStream.pipe(res);\r\n        break;\r\n      }\r\n            case '\/launch-js-devtools': {\r\n        if (!debuggerProxy.isDebuggerConnected()) {\r\n          launchBrowser(`http:\r\n        }\r\n        res.end('OK');\r\n        break;\r\n      }\r\n      default:\r\n        next();\r\n    }\r\n  };\r\n}","code-length":326,"reference":"Devtools middleware compatible with default React Native implementation","result":"Enable debugging.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onLoad(event) {\r\n\t\r\n\tevent.demo.renderPass.camera = event.demo.camera;\r\n\tdocument.getElementById(\"viewport\").children[0].style.display = \"none\";\r\n}","code-length":60,"reference":"Handles demo load events.\n\n","result":"Load the demo.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prefixSubstrings(prefix, substrings, strings) {\r\n\tlet prefixed, regExp;\r\n\tfor(const substring of substrings) {\r\n\t\tprefixed = \"$1\" + prefix + substring.charAt(0).toUpperCase() + substring.slice(1);\r\n\t\tregExp = new RegExp(\"([^\\\\.])(\\\\b\" + substring + \"\\\\b)\", \"g\");\r\n\t\tfor(const entry of strings.entries()) {\r\n\t\t\tif(entry[1] !== null) {\r\n\t\t\t\tstrings.set(entry[0], entry[1].replace(regExp, prefixed));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","code-length":166,"reference":"Prefixes substrings within the given strings.\n\n","result":"Prefix substrings in strings.","score":[0.2304,0.4406]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createCanvas(width, height, data, channels) {\r\n\tconst canvas = document.createElementNS(\"http:\r\n\tconst context = canvas.getContext(\"2d\");\r\n\tconst imageData = context.createImageData(width, height);\r\n\tconst target = imageData.data;\r\n\tlet x, y;\r\n\tlet i, j;\r\n\tfor(y = 0; y < height; ++y) {\r\n\t\tfor(x = 0; x < width; ++x) {\r\n\t\t\ti = (y * width + x) * 4;\r\n\t\t\tj = (y * width + x) * channels;\r\n\t\t\ttarget[i] = (channels > 0) ? data[j] : 0;\r\n\t\t\ttarget[i + 1] = (channels > 1) ? data[j + 1] : 0;\r\n\t\t\ttarget[i + 2] = (channels > 2) ? data[j + 2] : 0;\r\n\t\t\ttarget[i + 3] = (channels > 3) ? data[j + 3] : 255;\r\n\t\t}\r\n\t}\r\n\tcanvas.width = width;\r\n\tcanvas.height = height;\r\n\tcontext.putImageData(imageData, 0, 0);\r\n\treturn canvas;\r\n}","code-length":310,"reference":"Creates a new canvas from raw image data.\n\n","result":"Create a canvas with the given data.","score":[0.1843,0.3995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction smoothArea(d, b) {\r\n\tconst a1 = b.min;\r\n\tconst a2 = b.max;\r\n\tconst b1X = Math.sqrt(a1.x * 2.0) * 0.5;\r\n\tconst b1Y = Math.sqrt(a1.y * 2.0) * 0.5;\r\n\tconst b2X = Math.sqrt(a2.x * 2.0) * 0.5;\r\n\tconst b2Y = Math.sqrt(a2.y * 2.0) * 0.5;\r\n\tconst p = saturate(d \/ SMOOTH_MAX_DISTANCE);\r\n\ta1.set(lerp(b1X, a1.x, p), lerp(b1Y, a1.y, p));\r\n\ta2.set(lerp(b2X, a2.x, p), lerp(b2Y, a2.y, p));\r\n\treturn b;\r\n}","code-length":248,"reference":"A smoothing function for small U-patterns.\n\n","result":"Smooth the area.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction calculateDiagonalAreaForPixel(p1, p2, pX, pY) {\r\n\tlet a;\r\n\tlet x, y;\r\n\tlet offsetX, offsetY;\r\n\tfor(a = 0, y = 0; y < DIAGONAL_SAMPLES; ++y) {\r\n\t\tfor(x = 0; x < DIAGONAL_SAMPLES; ++x) {\r\n\t\t\toffsetX = x \/ (DIAGONAL_SAMPLES - 1.0);\r\n\t\t\toffsetY = y \/ (DIAGONAL_SAMPLES - 1.0);\r\n\t\t\tif(isInsideArea(p1, p2, pX + offsetX, pY + offsetY)) {\r\n\t\t\t\t++a;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn a \/ (DIAGONAL_SAMPLES * DIAGONAL_SAMPLES);\r\n}","code-length":227,"reference":"Calculates the area under the line p1 -> p2 for the pixel p using brute force\nsampling.\n\n","result":"Calculate the diagonal area for a given pixel.","score":[0.0593,0.1242]}
{"code":"\/*is used to<extra_id_0>\r\nfunction calculateDiagonalArea(pattern, p1, p2, left, offset, result) {\r\n\tconst e = diagonalEdges[pattern];\r\n\tconst e1 = e[0];\r\n\tconst e2 = e[1];\r\n\tif(e1 > 0) {\r\n\t\tp1.x += offset[0];\r\n\t\tp1.y += offset[1];\r\n\t}\r\n\tif(e2 > 0) {\r\n\t\tp2.x += offset[0];\r\n\t\tp2.y += offset[1];\r\n\t}\r\n\treturn result.set(\r\n\t\t1.0 - calculateDiagonalAreaForPixel(p1, p2, 1.0 + left, 0.0 + left),\r\n\t\tcalculateDiagonalAreaForPixel(p1, p2, 1.0 + left, 1.0 + left)\r\n\t);\r\n}","code-length":222,"reference":"Calculates the area under the line p1 -> p2. This includes the pixel and its\nopposite.\n\n","result":"Calculate the diagonal area.","score":[0.0159,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generatePatterns(patterns, offset, orthogonal) {\r\n\tconst result = new Vector2();\r\n\tlet i, l;\r\n\tlet x, y;\r\n\tlet c;\r\n\tlet pattern;\r\n\tlet data, size;\r\n\tfor(i = 0, l = patterns.length; i < l; ++i) {\r\n\t\tpattern = patterns[i];\r\n\t\tdata = pattern.data;\r\n\t\tsize = pattern.width;\r\n\t\tfor(y = 0; y < size; ++y) {\r\n\t\t\tfor(x = 0; x < size; ++x) {\r\n\t\t\t\tif(orthogonal) {\r\n\t\t\t\t\tcalculateOrthogonalAreaForPattern(i, x, y, offset, result);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcalculateDiagonalAreaForPattern(i, x, y, offset, result);\r\n\t\t\t\t}\r\n\t\t\t\tc = (y * size + x) * 2;\r\n\t\t\t\tdata[c] = result.x * 255;\r\n\t\t\t\tdata[c + 1] = result.y * 255;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","code-length":286,"reference":"Calculates orthogonal or diagonal patterns for a given offset.\n\n","result":"Generate the patterns.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assemble(base, patterns, edges, size, orthogonal, target) {\r\n\tconst p = new Vector2();\r\n\tconst dstData = target.data;\r\n\tconst dstWidth = target.width;\r\n\tlet i, l;\r\n\tlet x, y;\r\n\tlet c, d;\r\n\tlet edge;\r\n\tlet pattern;\r\n\tlet srcData, srcWidth;\r\n\tfor(i = 0, l = patterns.length; i < l; ++i) {\r\n\t\tedge = edges[i];\r\n\t\tpattern = patterns[i];\r\n\t\tsrcData = pattern.data;\r\n\t\tsrcWidth = pattern.width;\r\n\t\tfor(y = 0; y < size; ++y) {\r\n\t\t\tfor(x = 0; x < size; ++x) {\r\n\t\t\t\tp.fromArray(edge).multiplyScalar(size);\r\n\t\t\t\tp.add(base);\r\n\t\t\t\tp.x += x;\r\n\t\t\t\tp.y += y;\r\n\t\t\t\tc = (p.y * dstWidth + p.x) * 2;\r\n\t\t\t\t\r\n\t\t\t\td = orthogonal ? ((y * y * srcWidth + x * x) * 2) :\r\n\t\t\t\t\t((y * srcWidth + x) * 2);\r\n\t\t\t\tdstData[c] = srcData[d];\r\n\t\t\t\tdstData[c + 1] = srcData[d + 1];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","code-length":367,"reference":"Assembles orthogonal or diagonal patterns into the final area image.\n\n","result":"Assemble the pattern graph.","score":[0.0713,0.1596]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deltaRight(left, top) {\r\n\tlet d = 0;\r\n\t\r\n\tif(top[3] === 1 && left[1] !== 1 && left[3] !== 1) {\r\n\t\td += 1;\r\n\t}\r\n\t\r\n\tif(d === 1 && top[2] === 1 && left[0] !== 1 && left[2] !== 1) {\r\n\t\td += 1;\r\n\t}\r\n\treturn d;\r\n}","code-length":123,"reference":"Computes the delta distance to add in the last step of searches to the right.\n\n","result":"Calculate the deltaRight function.","score":[0.0204,0.036]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bilinear(e) {\r\n\tconst a = lerp(e[0], e[1], 1.0 - 0.25);\r\n\tconst b = lerp(e[2], e[3], 1.0 - 0.25);\r\n\treturn lerp(a, b, 1.0 - 0.125);\r\n}","code-length":92,"reference":"Calculates the bilinear fetch for a certain edge combination.\n\ne[0]       e[1]\n\nx <-------- Sample Position: (-0.25, -0.125)\ne[2]       e[3] <--- Current Pixel [3]: (0.0, 0.0)\n\n","result":"Create the bilinear function.","score":[0.0024,0.0819]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkForm(that) {\r\n    var newValue = $(that).val()\r\n    var matches = newValue != '' ? newValue.match(timeRegEx) : ''\r\n    var error = $(that)\r\n      .closest('.time-spinner')\r\n      .find('.error_container')\r\n    var $closerTimeSpinner = $(that)\r\n      .closest('.time-spinner')\r\n      .find('.spinner-control')\r\n    if (matches) {\r\n      $(error).html('')\r\n      return true\r\n    } else {\r\n      var errMsg = 'Formato data non valido'\r\n      $(error).html(errMsg)\r\n      return false\r\n    }\r\n  }","code-length":183,"reference":"TIME VALIDATION FOR DATA ENTRY","result":"Check form .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resetToMove(contextControl) {\r\n    var left = contextControl.find('.source .transfer-group')\r\n    var right = contextControl.find('.target .transfer-group')\r\n    var textLeft = contextControl.find('.source .transfer-header span.num')\r\n    var textRight = contextControl.find('.target .transfer-header span.num')\r\n    var header = contextControl.find('.transfer-header input')\r\n    $(left).html(elemLeft)\r\n    $(right).html(elemRight)\r\n    $(textLeft).text(elemLeftNum)\r\n    $(textRight).text(elemRightNum)\r\n    $(header).prop('disabled', false)\r\n  }","code-length":179,"reference":"ripristino stato iniziale","result":"Reset the context to move.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkIfActive(\r\n    targetControl,\r\n    targetHeaderControl,\r\n    containerTypeControl,\r\n    addButtonControl\r\n  ) {\r\n    $(targetControl).each(function(el) {\r\n      if ($(this).prop('checked')) {\r\n        if (!$(targetHeaderControl).hasClass('semi-checked')) {\r\n          $(targetHeaderControl).addClass('semi-checked')\r\n          $(targetHeaderControl).prop('checked', false)\r\n          if (containerTypeControl.hasClass('source')) {\r\n            $(addButtonControl).addClass('active')\r\n          }\r\n          if (containerTypeControl.hasClass('target')) {\r\n            $(inverseButton).addClass('active')\r\n          }\r\n        }\r\n        return false\r\n      } else {\r\n        $(targetHeaderControl).removeClass('semi-checked')\r\n        if (containerTypeControl.hasClass('source')) {\r\n          $(addButtonControl).removeClass('active')\r\n        }\r\n        if (containerTypeControl.hasClass('target')) {\r\n          $(inverseButton).removeClass('active')\r\n        }\r\n      }\r\n    })\r\n  }","code-length":291,"reference":"control active check & header check","result":"Check if the checkbox is active.","score":[0,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sourceControl(contextControl) {\r\n    var tocheck = contextControl.find('.transfer-scroll').find('input')\r\n    var checknum = tocheck.length\r\n    var targetText = contextControl\r\n      .find('.transfer-header')\r\n      .find('label span.num')\r\n    var header = contextControl.find('.transfer-header input')\r\n    $(header)\r\n      .prop('checked', false)\r\n      .removeClass('semi-checked')\r\n    if (checknum < 1) {\r\n      $(header).prop('disabled', true)\r\n    } else {\r\n      $(header).prop('disabled', false)\r\n    }\r\n    $(targetText).text(checknum)\r\n  }","code-length":186,"reference":"controllo elementi source","result":"Create a source control.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction targetControl(targetControl) {\r\n    var tocheck = targetControl.find('input')\r\n    var checknum = tocheck.length\r\n    var targetText = tocheck\r\n      .closest('.it-transfer-wrapper')\r\n      .find('.transfer-header')\r\n      .find('label span.num')\r\n    var header = $(targetControl).find('.transfer-header input')\r\n    if (checknum < 1) {\r\n      $(header).prop('disabled', true)\r\n    } else {\r\n      $(header).prop('disabled', false)\r\n    }\r\n    $(targetText).text(checknum)\r\n  }","code-length":166,"reference":"controllo elementi target","result":"Set the targetControl .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkToMove(contextControl, targetControl) {\r\n    var elements = contextControl.find('.transfer-group').find('input:checked')\r\n    var sourceTag = $(elements).closest('.form-check')\r\n    $(elements).each(function() {\r\n      $(this).prop('checked', false)\r\n      $(sourceTag)\r\n        .detach()\r\n        .appendTo(targetControl)\r\n        .addClass('added')\r\n    })\r\n  }","code-length":126,"reference":"elementi da aggiungere","result":"Check to move transfer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateScrollPos() {\r\n    if (!stickies.length) {\r\n      return\r\n    }\r\n    lastKnownScrollTop =\r\n      document.documentElement.scrollTop || document.body.scrollTop\r\n    if (!isAnimationRequested) {\r\n      isAnimationRequested = true\r\n      if (requestAnimationFrame) {\r\n        requestAnimationFrame(setPositions)\r\n      } else {\r\n        if (timeout) {\r\n          clearTimeout(timeout)\r\n        }\r\n        timeout = setTimeout(setPositions, 15)\r\n      }\r\n    }\r\n  }","code-length":147,"reference":"Debounced scroll handling","result":"Update the scroll position.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scoreText(score) {\r\n      if (score === -1) {\r\n        return options.shortPass\r\n      }\r\n      score = score < 0 ? 0 : score\r\n      if (score < 26) {\r\n        return options.shortPass\r\n      }\r\n      if (score < 51) {\r\n        return options.badPass\r\n      }\r\n      if (score < 76) {\r\n        return options.goodPass\r\n      }\r\n      return options.strongPass\r\n    }","code-length":129,"reference":"Returns strings based on the score given.\n\n","result":"Generate the scoreText function.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction calculateScore(password) {\r\n      var score = 0\r\n      if (password.length < options.minimumLength) {\r\n        return -1\r\n      }\r\n      score += password.length * 4\r\n      score += checkRepetition(1, password).length - password.length\r\n      score += checkRepetition(2, password).length - password.length\r\n      score += checkRepetition(3, password).length - password.length\r\n      score += checkRepetition(4, password).length - password.length\r\n      if (password.match(\/(.*[0-9].*[0-9].*[0-9])\/)) {\r\n        score += 5\r\n      }\r\n      var symbols = '.*[!,@,#,$,%,^,&,*,?,_,~]'\r\n      symbols = new RegExp('(' + symbols + symbols + ')')\r\n      if (password.match(symbols)) {\r\n        score += 5\r\n      }\r\n      if (password.match(\/([a-z].*[A-Z])|([A-Z].*[a-z])\/)) {\r\n        score += 10\r\n      }\r\n      if (password.match(\/([a-zA-Z])\/) && password.match(\/([0-9])\/)) {\r\n        score += 15\r\n      }\r\n      if (\r\n        password.match(\/([!,@,#,$,%,^,&,*,?,_,~])\/) &&\r\n        password.match(\/([0-9])\/)\r\n      ) {\r\n        score += 15\r\n      }\r\n      if (\r\n        password.match(\/([!,@,#,$,%,^,&,*,?,_,~])\/) &&\r\n        password.match(\/([a-zA-Z])\/)\r\n      ) {\r\n        score += 15\r\n      }\r\n      if (password.match(\/^\\w+$\/) || password.match(\/^\\d+$\/)) {\r\n        score -= 10\r\n      }\r\n      if (score > 100) {\r\n        score = 100\r\n      }\r\n      if (score < 0) {\r\n        score = 0\r\n      }\r\n      return score\r\n    }","code-length":542,"reference":"Returns a value between -1 and 100 to score\nthe user's password.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkRepetition(rLen, str) {\r\n      var res = '',\r\n        repeated = false\r\n      for (var i = 0; i < str.length; i++) {\r\n        repeated = true\r\n        for (var j = 0; j < rLen && j + i + rLen < str.length; j++) {\r\n          repeated = repeated && str.charAt(j + i) === str.charAt(j + i + rLen)\r\n        }\r\n        if (j < rLen) {\r\n          repeated = false\r\n        }\r\n        if (repeated) {\r\n          i += rLen - 1\r\n          repeated = false\r\n        } else {\r\n          res += str.charAt(i)\r\n        }\r\n      }\r\n      return res\r\n    }","code-length":201,"reference":"Checks for repetition of characters in\na string\n\n","result":"Check repetitions of strings.","score":[0.1175,0.3363]}
{"code":"\/*is used to<extra_id_0>\r\nfunction init() {\r\n      var shown = true\r\n      var $text = options.showText\r\n      var $graybar = $('<div>').addClass(\r\n        'password-meter progress rounded-0 position-absolute'\r\n      )\r\n      $graybar.append(`<div class=\"row position-absolute w-100 m-0\">\r\n        <div class=\"col-3 border-left border-right border-white\"><\/div>\r\n        <div class=\"col-3 border-left border-right border-white\"><\/div>\r\n        <div class=\"col-3 border-left border-right border-white\"><\/div>\r\n        <div class=\"col-3 border-left border-right border-white\"><\/div>\r\n      <\/div>`)\r\n      var $colorbar = $('<div>').attr({\r\n        class: 'progress-bar',\r\n        role: 'progressbar',\r\n        'aria-valuenow': '0',\r\n        'aria-valuemin': '0',\r\n        'aria-valuemax': '100',\r\n      })\r\n      var $insert = $('<div>').append($graybar.append($colorbar))\r\n      if (options.showText) {\r\n        $text = $('<small>')\r\n          .addClass('form-text text-muted')\r\n          .html(options.enterPass)\r\n        $insert.prepend($text)\r\n      }\r\n      $object.after($insert)\r\n      $object.keyup(function() {\r\n        var score = calculateScore($object.val())\r\n        $object.trigger('password.score', [score])\r\n        var perc = score < 0 ? 0 : score\r\n        $colorbar.removeClass(function(index, className) {\r\n          return (className.match(\/(^|\\s)bg-\\S+\/g) || []).join(' ')\r\n        })\r\n        $colorbar.addClass('bg-' + scoreColor(score))\r\n        $colorbar.css({\r\n          width: perc + '%',\r\n        })\r\n        $colorbar.attr('aria-valuenow', perc)\r\n        if (options.showText) {\r\n          var text = scoreText(score)\r\n          if (!$object.val().length && score <= 0) {\r\n            text = options.enterPass\r\n          }\r\n          if (\r\n            $text.html() !==\r\n            $('<div>')\r\n              .html(text)\r\n              .html()\r\n          ) {\r\n            $text.html(text)\r\n            $text.removeClass(function(index, className) {\r\n              return (className.match(\/(^|\\s)text-\\S+\/g) || []).join(' ')\r\n            })\r\n            $text.addClass('text-' + scoreColor(score))\r\n            $object.trigger('password.text', [text, score])\r\n          }\r\n        }\r\n      })\r\n      return this\r\n    }","code-length":727,"reference":"Initializes the plugin creating and binding the\nrequired layers and events.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction LevelUpArrayAdapter(name, db, serializer) {\r\n  this.db = Sublevel(db);\r\n  this.db = this.db.sublevel(name);\r\n  this.name = name;\r\n  this.serializer = serializer || {\r\n    encode: function(val, callback) {\r\n      callback(null, val);\r\n    },\r\n    decode: function(val, callback) {\r\n      callback(null, val);\r\n    }\r\n  };\r\n}","code-length":129,"reference":"Level up adapter that looks like an array. Doesn't support inserts.","result":"Create LevelUpArrayAdapter objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixProps(tx, data) {\r\n\"gasPrice\", \"gasLimit\", \"value\"];\r\n  fieldNames.forEach((fieldName) => configZeroableField(tx, fieldName, 32));\r\n  const vDescriptors = Object.getOwnPropertyDescriptor(tx, \"v\");\r\n  Object.defineProperty(tx, \"v\", {\r\n    set: (v) => {\r\n      vDescriptors.set.call(tx, v);\r\n      const sigV = ethUtil.bufferToInt(tx.v);\r\n      let chainId = Math.floor((sigV - 35) \/ 2);\r\n      if (chainId < 0) {\r\n        chainId = 0;\r\n      }\r\n      tx._chainId = chainId || 0;\r\n    }\r\n  });\r\n  if (tx.isFake()) {\r\n        Object.defineProperty(tx, \"from\", {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get: tx.getSenderAddress.bind(tx),\r\n      set: (val) => {\r\n        if (val) {\r\n          tx._from = ethUtil.toBuffer(val);\r\n        } else {\r\n          tx._from = null;\r\n        }\r\n      }\r\n    });\r\n    if (data && data.from) {\r\n      tx.from = data.from;\r\n    }\r\n    tx.hash = fakeHash;\r\n  }\r\n}","code-length":349,"reference":"etheruemjs-tx's Transactions don't behave quite like we need them to, so\nwe're monkey-patching them to do what we want here.\n","result":"Fix the tx properties.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initData(tx, data) {\r\n  if (data) {\r\n    if (typeof data === \"string\") {\r\n      data = to.buffer(data);\r\n    }\r\n    if (Buffer.isBuffer(data)) {\r\n      data = rlp.decode(data);\r\n    }\r\n    const self = tx;\r\n    if (Array.isArray(data)) {\r\n      if (data.length > tx._fields.length) {\r\n        throw new Error(\"wrong number of fields in data\");\r\n      }\r\n      data.forEach((d, i) => {\r\n        self[self._fields[i]] = ethUtil.toBuffer(d);\r\n      });\r\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\r\n      const keys = Object.keys(data);\r\n      tx._fields.forEach(function(field) {\r\n        if (keys.indexOf(field) !== -1) {\r\n          self[field] = data[field];\r\n        }\r\n        if (field === \"gasLimit\") {\r\n          if (keys.indexOf(\"gas\") !== -1) {\r\n            self[\"gas\"] = data[\"gas\"];\r\n          }\r\n        } else if (field === \"data\") {\r\n          if (keys.indexOf(\"input\") !== -1) {\r\n            self[\"input\"] = data[\"input\"];\r\n          }\r\n        }\r\n      });\r\n      if (!tx._chainId && data && data.chainId != null) {\r\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\r\n      }\r\n    } else {\r\n      throw new Error(\"invalid data\");\r\n    }\r\n  }\r\n}","code-length":438,"reference":"Parses the given data object and adds its properties to the given tx.\n","result":"Initialize the transaction data.","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TXRejectedError(message) {\r\nme = this.constructor.name;\r\n  this.message = message;\r\n}","code-length":39,"reference":"raised when the transaction is rejected prior to running it in the EVM.","result":"Identify the error type.","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RequestFunnel() {\r\n  this.methods = {\r\n    eth_call: true,\r\n    eth_getStorageAt: true,\r\n    eth_sendTransaction: true,\r\n    eth_sendRawTransaction: true,\r\n    eth_newBlockFilter: true,\r\n    eth_getFilterChanges: true,\r\n    eth_getFilterLogs: true\r\n  };\r\n  this.queue = [];\r\n  this.isWorking = false;\r\n}","code-length":123,"reference":"See if any payloads for the specified methods are marked as external. If they are external, and match the method list, process them one at a time.","result":"Create a request funnel.","score":[0.001,0.0202]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileSass(_path, ext, data, callback) {\r\n  const compiledCss = sass.renderSync({\r\n    data: data,\r\n    outputStyle: 'expanded',\r\n    importer: function (url, prev, done) {\r\n      if (url.startsWith('~')) {\r\n        const newUrl = path.join(__dirname, 'node_modules', url.substr(1));\r\n        return { file: newUrl };\r\n      } else {\r\n        return { file: url };\r\n      }\r\n    }\r\n  });\r\n  callback(null, compiledCss.css);\r\n}","code-length":157,"reference":"Compile SASS to CSS.\n","result":"Compile sass files.","score":[0.2925,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requireBrocfile(brocfilePath) {\r\n  let brocfile;\r\n  if (brocfilePath.match(\/\\.ts$\/)) {\r\n    try {\r\n      require.resolve('ts-node');\r\n    } catch (e) {\r\n      throw new Error(`Cannot find module 'ts-node', please install`);\r\n    }\r\n    try {\r\n      require.resolve('typescript');\r\n    } catch (e) {\r\n      throw new Error(`Cannot find module 'typescript', please install`);\r\n    }\r\n    require('ts-node').register();\r\n    brocfile = require(brocfilePath);\r\n  } else {\r\n    brocfile = esmRequire(brocfilePath);\r\n  }\r\n  if (brocfile !== null && typeof brocfile === 'object' && brocfile.hasOwnProperty('default')) {\r\n    brocfile = brocfile.default;\r\n  }\r\n  return brocfile;\r\n}","code-length":248,"reference":"Require a brocfile via either ESM or TypeScript\n\n","result":"Resolve the module .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runmath(s) {\r\n    var ans;\r\n    try {\r\n        ans = new nearley.Parser(grammar.ParserRules, grammar.ParserStart)\r\n            .feed(s);\r\n                if (ans.results.length) {\r\n            return ans.results[0].toString();\r\n        } else {\r\n            var out = \"Error: incomplete input, parse failed. :(\";\r\n            return out;\r\n        }\r\n    } catch(e) {\r\n        var out = new Array(PROMPT.length + e.offset + 1).join(\"-\") + \"^  Error.\";\r\n        return out;\r\n    }\r\n}","code-length":167,"reference":"This is where the action is.","result":"Run math .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(arr, isSigned) {\r\n        if (this.type !== Pbf.Bytes) return arr.push(this.readVarint(isSigned));\r\n        var end = readPackedEnd(this);\r\n        arr = arr || [];\r\n        while (this.pos < end) arr.push(this.readVarint(isSigned));\r\n        return arr;\r\n    }","code-length":99,"reference":"verbose for performance reasons; doesn't affect gzipped size","result":"Read packed values.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleUnionSelections(\r\n  sqlASTNode,\r\n  children,\r\n  selections,\r\n  gqlType,\r\n  namespace,\r\n  depth,\r\n  options,\r\n  context,\r\n  internalOptions = {}\r\n) {\r\n  for (let selection of selections) {\r\n    switch (selection.kind) {\r\n    case 'Field':\r\n      const existingNode = children.find(child => child.fieldName === selection.name.value && child.type === 'table')\r\n      let newNode = new SQLASTNode(sqlASTNode)\r\n      if (existingNode) {\r\n        newNode = existingNode\r\n      } else {\r\n        children.push(newNode)\r\n      }\r\n      if (internalOptions.defferedFrom) {\r\n        newNode.defferedFrom = internalOptions.defferedFrom\r\n      }\r\n      populateASTNode.call(this, selection, gqlType, newNode, namespace, depth + 1, options, context)\r\n      break\r\n    case 'InlineFragment':\r\n      {\r\n        const selectionNameOfType = selection.typeCondition.name.value\r\n        const deferredType = this.schema._typeMap[selectionNameOfType]\r\n        const deferToObjectType = deferredType.constructor.name === 'GraphQLObjectType'\r\n        const handler = deferToObjectType ? handleSelections : handleUnionSelections\r\n        if (deferToObjectType) {\r\n          const typedChildren = sqlASTNode.typedChildren\r\n          children = typedChildren[deferredType.name] = typedChildren[deferredType.name] || []\r\n          internalOptions.defferedFrom = gqlType\r\n        }\r\n        handler.call(\r\n          this, sqlASTNode, children,\r\n          selection.selectionSet.selections, deferredType, namespace,\r\n          depth, options, context,\r\n          internalOptions\r\n        )\r\n      }\r\n      break\r\n    case 'FragmentSpread':\r\n      {\r\n        const fragmentName = selection.name.value\r\n        const fragment = this.fragments[fragmentName]\r\n        const fragmentNameOfType = fragment.typeCondition.name.value\r\n        const deferredType = this.schema._typeMap[fragmentNameOfType]\r\n        const deferToObjectType = deferredType.constructor.name === 'GraphQLObjectType'\r\n        const handler = deferToObjectType ? handleSelections : handleUnionSelections\r\n        if (deferToObjectType) {\r\n          const typedChildren = sqlASTNode.typedChildren\r\n          children = typedChildren[deferredType.name] = typedChildren[deferredType.name] || []\r\n          internalOptions.defferedFrom = gqlType\r\n        }\r\n        handler.call(\r\n          this, sqlASTNode, children,\r\n          fragment.selectionSet.selections, deferredType, namespace,\r\n          depth, options, context,\r\n          internalOptions\r\n        )\r\n      }\r\n      break\r\n        default:\r\n      throw new Error('Unknown selection kind: ' + selection.kind)\r\n    }\r\n  }\r\n}","code-length":718,"reference":"we need to collect all fields from all the fragments requested in the union type and ask for them in SQL","result":"Code too long,keep in 512.","score":[0.0098,0.0258]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleSelections(\r\n  sqlASTNode,\r\n  children,\r\n  selections,\r\n  gqlType,\r\n  namespace,\r\n  depth,\r\n  options,\r\n  context,\r\n  internalOptions = {},\r\n) {\r\n  for (let selection of selections) {\r\n    switch (selection.kind) {\r\n    case 'Field':\r\n      const existingNode = children.find(child => child.fieldName === selection.name.value && child.type === 'table')\r\n      let newNode = new SQLASTNode(sqlASTNode)\r\n      if (existingNode) {\r\n        newNode = existingNode\r\n      } else {\r\n        children.push(newNode)\r\n      }\r\n      if (internalOptions.defferedFrom) {\r\n        newNode.defferedFrom = internalOptions.defferedFrom\r\n      }\r\n      populateASTNode.call(this, selection, gqlType, newNode, namespace, depth + 1, options, context)\r\n      break\r\n    case 'InlineFragment':\r\n      {\r\n        const selectionNameOfType = selection.typeCondition.name.value\r\n        const sameType = selectionNameOfType === gqlType.name\r\n        const interfaceType = (gqlType._interfaces || []).map(iface => iface.name).includes(selectionNameOfType)\r\n        if (sameType || interfaceType) {\r\n          handleSelections.call(\r\n            this, sqlASTNode, children,\r\n            selection.selectionSet.selections, gqlType, namespace,\r\n            depth, options, context,\r\n            internalOptions\r\n          )\r\n        }\r\n      }\r\n      break\r\n    case 'FragmentSpread':\r\n      {\r\n        const fragmentName = selection.name.value\r\n        const fragment = this.fragments[fragmentName]\r\n        const fragmentNameOfType = fragment.typeCondition.name.value\r\n        const sameType = fragmentNameOfType === gqlType.name\r\n        const interfaceType = gqlType._interfaces.map(iface => iface.name).indexOf(fragmentNameOfType) >= 0\r\n        if (sameType || interfaceType) {\r\n          handleSelections.call(\r\n            this, sqlASTNode, children,\r\n            fragment.selectionSet.selections, gqlType, namespace,\r\n            depth, options, context,\r\n            internalOptions\r\n          )\r\n        }\r\n      }\r\n      break\r\n        default:\r\n      throw new Error('Unknown selection kind: ' + selection.kind)\r\n    }\r\n  }\r\n}","code-length":606,"reference":"the selections could be several types, recursively handle each type here","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction columnToASTChild(columnName, namespace) {\r\n  return {\r\n    type: 'column',\r\n    name: columnName,\r\n    fieldName: columnName,\r\n    as: namespace.generate('column', columnName)\r\n  }\r\n}","code-length":68,"reference":"tell the AST we need a column that perhaps the user didnt ask for, but may be necessary for join monster to ID objects or associate ones across batches","result":"Generate column names.","score":[0.0001,0.0189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction keyToASTChild(key, namespace) {\r\n  if (typeof key === 'string') {\r\n    return columnToASTChild(key, namespace)\r\n  }\r\n  if (Array.isArray(key)) {\r\n    const clumsyName = toClumsyName(key)\r\n    return {\r\n      type: 'composite',\r\n      name: key,\r\n      fieldName: clumsyName,\r\n      as: namespace.generate('column', clumsyName)\r\n    }\r\n  }\r\n}","code-length":136,"reference":"keys are necessary for deduplication during the hydration process this will handle singular or composite keys","result":"Generate the key to ASTChild objects.","score":[0.0365,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stripRelayConnection(gqlType, queryASTNode, fragments) {\r\n  const edgeType = stripNonNullType(gqlType._fields.edges.type)\r\n  const strippedType = stripNonNullType(stripNonNullType(edgeType.ofType)._fields.node.type)\r\n  const args = queryASTNode.arguments\r\n  const edges = spreadFragments(queryASTNode.selectionSet.selections, fragments, gqlType.name)\r\n    .find(selection => selection.name.value === 'edges')\r\n  if (edges) {\r\n    queryASTNode = spreadFragments(edges.selectionSet.selections, fragments, gqlType.name)\r\n      .find(selection => selection.name.value === 'node') || {}\r\n  } else {\r\n    queryASTNode = {}\r\n  }\r\n  queryASTNode.arguments = args\r\n  return { gqlType: strippedType, queryASTNode }\r\n}","code-length":229,"reference":"if its a connection type, we need to look up the Node type inside their to find the relevant SQL info","result":"Strip relay connections.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction spreadFragments(selections, fragments, typeName) {\r\n  return flatMap(selections, selection => {\r\n    switch (selection.kind) {\r\n    case 'FragmentSpread':\r\n      const fragmentName = selection.name.value\r\n      const fragment = fragments[fragmentName]\r\n      return spreadFragments(fragment.selectionSet.selections, fragments, typeName)\r\n    case 'InlineFragment':\r\n      if (selection.typeCondition.name.value === typeName) {\r\n        return spreadFragments(selection.selectionSet.selections, fragments, typeName)\r\n      }\r\n      return []\r\n    default:\r\n      return selection\r\n    }\r\n  })\r\n}","code-length":168,"reference":"instead of fields, selections can be fragments, which is another group of selections fragments can be arbitrarily nested this function recurses through and gets the relevant fields","result":"Spread fragments in a fragment.","score":[0.003,0.0202]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getNode(typeName, resolveInfo, context, condition, dbCall, options = {}) {\r\n  const type = resolveInfo.schema._typeMap[typeName]\r\n  assert(type, `Type \"${typeName}\" not found in your schema.`)\r\n  assert(type._typeConfig.sqlTable, `joinMonster can't fetch a ${typeName} as a Node unless it has \"sqlTable\" tagged.`)\r\n  let where = buildWhereFunction(type, condition, options)\r\n  const fakeParentNode = {\r\n    _fields: {\r\n      node: {\r\n        type,\r\n        name: type.name.toLowerCase(),\r\n        where\r\n      }\r\n    }\r\n  }\r\n  const namespace = new AliasNamespace(options.minify)\r\n  const sqlAST = {}\r\n  const fieldNodes = resolveInfo.fieldNodes || resolveInfo.fieldASTs\r\n  queryAST.populateASTNode.call(resolveInfo, fieldNodes[0], fakeParentNode, sqlAST, namespace, 0, options, context)\r\n  queryAST.pruneDuplicateSqlDeps(sqlAST, namespace)\r\n  const { sql, shapeDefinition } = await compileSqlAST(sqlAST, context, options)\r\n  const data = arrToConnection(await handleUserDbCall(dbCall, sql, sqlAST, shapeDefinition), sqlAST)\r\n  await nextBatch(sqlAST, data, dbCall, context, options)\r\n  if (!data) return data\r\n  data.__type__ = type\r\n  return data\r\n}","code-length":368,"reference":"A helper for resolving the Node type in Relay.\n","result":"Fetch a Node from the database.","score":[0.1392,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrToConnection(data, sqlAST) {\r\n  for (let astChild of sqlAST.children || []) {\r\n    if (Array.isArray(data)) {\r\n      for (let dataItem of data) {\r\n        recurseOnObjInData(dataItem, astChild)\r\n      }\r\n    } else if (data) {\r\n      recurseOnObjInData(data, astChild)\r\n    }\r\n  }\r\n  const pageInfo = {\r\n    hasNextPage: false,\r\n    hasPreviousPage: false\r\n  }\r\n  if (!data) {\r\n    if (sqlAST.paginate) {\r\n      return {\r\n        pageInfo,\r\n        edges: []\r\n      }\r\n    }\r\n    return null\r\n  }\r\n  if (sqlAST.paginate && !data._paginated) {\r\n    if (sqlAST.sortKey || idx(sqlAST, _ => _.junction.sortKey)) {\r\n      if (idx(sqlAST, _ => _.args.first)) {\r\n        if (data.length > sqlAST.args.first) {\r\n          pageInfo.hasNextPage = true\r\n          data.pop()\r\n        }\r\n      } else if (sqlAST.args && sqlAST.args.last) {\r\n        if (data.length > sqlAST.args.last) {\r\n          pageInfo.hasPreviousPage = true\r\n          data.pop()\r\n        }\r\n        data.reverse()\r\n      }\r\n      const sortKey = sqlAST.sortKey || sqlAST.junction.sortKey\r\n      const edges = data.map(obj => {\r\n        const cursor = {}\r\n        const key = sortKey.key\r\n        for (let column of wrap(key)) {\r\n          cursor[column] = obj[column]\r\n        }\r\n        return { cursor: objToCursor(cursor), node: obj }\r\n      })\r\n      if (data.length) {\r\n        pageInfo.startCursor = edges[0].cursor\r\n        pageInfo.endCursor = last(edges).cursor\r\n      }\r\n      return { edges, pageInfo, _paginated: true }\r\n    }\r\n    if (sqlAST.orderBy || (sqlAST.junction && sqlAST.junction.orderBy)) {\r\n      let offset = 0\r\n      if (idx(sqlAST, _ => _.args.after)) {\r\n        offset = cursorToOffset(sqlAST.args.after) + 1\r\n      }\r\n      const arrayLength = data[0] && parseInt(data[0].$total, 10)\r\n      const connection = connectionFromArraySlice(data, sqlAST.args || {}, { sliceStart: offset, arrayLength })\r\n      connection.total = arrayLength || 0\r\n      connection._paginated = true\r\n      return connection\r\n    }\r\n  }\r\n  return data\r\n}","code-length":689,"reference":"a function for data manipulation AFTER its nested. this is only necessary when using the SQL pagination we have to interpret the slice that comes back and generate the Connection Object type","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validate(rows) {\r\n  if (Array.isArray(rows)) return rows\r\n  if (rows && rows.rows) return rows.rows\r\n  throw new Error(\r\n    `\"dbCall\" function must return\/resolve an array of objects where each object is a row from the result set.\r\n    Instead got ${util.inspect(rows, { depth: 3 })}`\r\n  )\r\n}","code-length":104,"reference":"validate the data they gave us","result":"Validate the return.","score":[0.1502,0.3289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortKeyToWhereCondition(keyObj, descending, sortTable, dialect) {\r\n  const { name, quote: q } = dialect\r\n  const sortColumns = []\r\n  const sortValues = []\r\n  for (let key in keyObj) {\r\n    sortColumns.push(`${q(sortTable)}.${q(key)}`)\r\n    sortValues.push(maybeQuote(keyObj[key], name))\r\n  }\r\n  const operator = descending ? '<' : '>'\r\n  return name === 'oracle'\r\n    ? recursiveWhereJoin(sortColumns, sortValues, operator)\r\n    : `(${sortColumns.join(', ')}) ${operator} (${sortValues.join(', ')})`\r\n}","code-length":182,"reference":"take the sort key and translate that for the where clause","result":"Generate the where condition for sorting.","score":[0.1313,0.2434]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clone(frm, to) {\r\n\tif (frm === null || typeof frm !== \"object\") {\r\n\t\treturn frm;\r\n\t}\r\n\tif (frm.constructor !== Object && frm.constructor !== Array) {\r\n\t\treturn frm;\r\n\t}\r\n\tif (frm.constructor === Date || frm.constructor === RegExp || frm.constructor === Function ||\r\n\t\tfrm.constructor === String || frm.constructor === Number || frm.constructor === Boolean) {\r\n\t\treturn new frm.constructor(frm);\r\n\t}\r\n\tto = to || new frm.constructor();\r\n\tfor (var name in frm) {\r\n\t\tto[name] = typeof to[name] === \"undefined\" ? clone(frm[name], null) : to[name];\r\n\t}\r\n\treturn to;\r\n}","code-length":210,"reference":"this is utilized by some of the global state functionality in order to get a clone that will not continue to be modified as the GlobalState mutates","result":"Clone a JavaScript object.","score":[0.001,0.0405]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildString (length, str) {\r\n  return Array.apply(null, new Array(length)).map(String.prototype.valueOf, str).join('')\r\n}","code-length":51,"reference":"Create an string of given length filled with blank spaces\n\n","result":"Build a string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction concatArray (arr, pretty, indentation, indentLevel) {\r\n  var currentIndent = buildString(indentLevel, indentation)\r\n  var closingBraceIndent = buildString(indentLevel - 1, indentation)\r\n  var join = pretty ? ',\\n' + currentIndent : ', '\r\n  if (pretty) {\r\n    return '[\\n' + currentIndent + arr.join(join) + '\\n' + closingBraceIndent + ']'\r\n  } else {\r\n    return '[' + arr.join(join) + ']'\r\n  }\r\n}","code-length":137,"reference":"Create a string corresponding to a Dictionary or Array literal representation with pretty optionand indentation.","result":"Concatenate arrays.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (value, opts, indentLevel) {\r\n    indentLevel = indentLevel === undefined ? 1 : indentLevel + 1\r\n    switch (Object.prototype.toString.call(value)) {\r\n      case '[object Number]':\r\n        return value\r\n      case '[object Array]':\r\n        var pretty = false\r\n        var valuesRepresentation = value.map(function (v) {\r\n          if (Object.prototype.toString.call(v) === '[object Object]') {\r\n            pretty = Object.keys(v).length > 1\r\n          }\r\n          return this.literalRepresentation(v, opts, indentLevel)\r\n        }.bind(this))\r\n        return concatArray(valuesRepresentation, pretty, opts.indent, indentLevel)\r\n      case '[object Object]':\r\n        var keyValuePairs = []\r\n        for (var k in value) {\r\n          keyValuePairs.push(util.format('\"%s\": %s', k, this.literalRepresentation(value[k], opts, indentLevel)))\r\n        }\r\n        return concatArray(keyValuePairs, opts.pretty && keyValuePairs.length > 1, opts.indent, indentLevel)\r\n      case '[object Boolean]':\r\n        return value.toString()\r\n      default:\r\n        if (value === null || value === undefined) {\r\n          return ''\r\n        }\r\n        return '\"' + value.toString().replace(\/\"\/g, '\\\\\"') + '\"'\r\n    }\r\n  }","code-length":351,"reference":"Create a valid Swift string of a literal value according to its type.\n\n","result":"Var concatArray .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(text, placeholders) {\r\n        if (text[text.length - 1] == \"]\" && text.lastIndexOf(\" [\") != -1) {\r\n            text = text.substr(0, text.lastIndexOf(\" [\"));\r\n        }\r\n        var replaceAll = function(str, substr, replacement) {\r\n            return str.replace(\r\n                new RegExp(\r\n                    substr.replace(\/([.*+?^=!:${}()|\\[\\]\\\/\\\\])\/g, \"\\\\$1\"), \"g\"),\r\n                replacement);\r\n        }\r\n        var localeReplace = function(text, placeholders) {\r\n            for (var key in placeholders) {\r\n                text = replaceAll(text, \"%(\" + key + \")s\", placeholders[key]);\r\n            }\r\n            return text;\r\n        };\r\n        var reactLocaleReplace = function(text, placeholders) {\r\n            var start;\r\n            var expanded = [text];\r\n            for (var key in placeholders) {\r\n                start = expanded;\r\n                expanded = [];\r\n                for (var i = 0; i < start.length; i++) {\r\n                    if (typeof start[i] == \"string\") {\r\n                        var keyStr = \"%(\" + key + \")s\";\r\n                        var parts = start[i].split(keyStr);\r\n                        var replaced = [];\r\n                        for (var j = 0; j < parts.length - 1; j++) {\r\n                            replaced.push(parts[j]);\r\n                            replaced.push(placeholders[key]);\r\n                        }\r\n                        replaced.push(parts[parts.length - 1]);\r\n                        replaced = replaced.filter(function (str) {\r\n                            return str != \"\";\r\n                        });\r\n                        expanded.push.apply(expanded, replaced)\r\n                    } else {\r\n                        expanded.push(start[i]);\r\n                    }\r\n                }\r\n            }\r\n            return expanded;\r\n        }\r\n        if (placeholders) {\r\n            var hasReactElements = false;\r\n            for (var key in placeholders) {\r\n                var val = placeholders[key];\r\n                if (typeof val !== \"string\" && React.isValidElement(val)) {\r\n                    hasReactElements = true;\r\n                    break;\r\n                }\r\n            }\r\n            return (hasReactElements ?\r\n                reactLocaleReplace(text, placeholders) :\r\n                localeReplace(text, placeholders));\r\n        }\r\n        return text;\r\n    }","code-length":594,"reference":"For quiptext, introduced in 0.1.044","result":"Code too long,keep in 512.","score":[0.2403,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createNode (media) {\r\n    var node = new Audio();\r\n    node.onplay = function () {\r\n        Media.onStatus(media.id, Media.MEDIA_STATE, Media.MEDIA_STARTING);\r\n    };\r\n    node.onplaying = function () {\r\n        Media.onStatus(media.id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\r\n    };\r\n    node.ondurationchange = function (e) {\r\n        Media.onStatus(media.id, Media.MEDIA_DURATION, e.target.duration || -1);\r\n    };\r\n    node.onerror = function (e) {\r\n        var err = e.target.error.code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED ?\r\n            { code: MediaError.MEDIA_ERR_ABORTED } :\r\n            e.target.error;\r\n        Media.onStatus(media.id, Media.MEDIA_ERROR, err);\r\n    };\r\n    node.onended = function () {\r\n        Media.onStatus(media.id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\r\n    };\r\n    if (media.src) {\r\n        node.src = media.src;\r\n    }\r\n    return node;\r\n}","code-length":318,"reference":"Creates new Audio node and with necessary event listeners attached\n","result":"Create an Audio node.","score":[0.0713,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var srcUri = processUri(args[1]);\r\n        var createAudioNode = !!args[2];\r\n        var thisM = Media.get(id);\r\n        Media.prototype.node = null;\r\n        var prefix = args[1].split(':').shift();\r\n        var extension = srcUri.extension;\r\n        if (thisM.node === null) {\r\n            if (SUPPORTED_EXTENSIONS.indexOf(extension) === -1 && SUPPORTED_PREFIXES.indexOf(prefix) === -1) {\r\n                if (lose) {\r\n                    lose({ code: MediaError.MEDIA_ERR_ABORTED });\r\n                }\r\n                return false;\r\n            }\r\n            if (createAudioNode === true) {\r\n                thisM.node = new Audio();\r\n                thisM.node.msAudioCategory = \"BackgroundCapableMedia\";\r\n                thisM.node.src = srcUri.absoluteCanonicalUri;\r\n                thisM.node.onloadstart = function () {\r\n                    Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STARTING);\r\n                };\r\n                thisM.node.ontimeupdate = function (e) {\r\n                    Media.onStatus(id, Media.MEDIA_POSITION, e.target.currentTime);\r\n                };\r\n                thisM.node.onplaying = function () {\r\n                    Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\r\n                };\r\n                thisM.node.ondurationchange = function (e) {\r\n                    Media.onStatus(id, Media.MEDIA_DURATION, e.target.duration || -1);\r\n                };\r\n                thisM.node.onerror = function (e) {\r\n                    var err = e.target.error.code === MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED ?\r\n                        { code: MediaError.MEDIA_ERR_ABORTED } :\r\n                        e.target.error;\r\n                    Media.onStatus(id, Media.MEDIA_ERROR, err);\r\n                };\r\n                thisM.node.onended = function () {\r\n                    Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\r\n                };\r\n            }\r\n        }\r\n        return true;\r\n    }","code-length":578,"reference":"Initiates the audio file","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var thisM = Media.get(id);\r\n        if (!thisM.node) {\r\n            args[2] = true;\r\n            if (!module.exports.create(win, lose, args)) {\r\n                return;\r\n            }\r\n        }\r\n        try {\r\n            thisM.node.play();\r\n        } catch (err) {\r\n            if (lose) {\r\n                lose({code:MediaError.MEDIA_ERR_ABORTED});\r\n            }\r\n        }\r\n    }","code-length":154,"reference":"Start playing the audio","result":"Create a new media.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var milliseconds = args[1];\r\n        var thisM = Media.get(id);\r\n        try {\r\n            thisM.node.currentTime = milliseconds \/ 1000;\r\n            win(thisM.node.currentTime);\r\n        } catch (err) {\r\n            lose(\"Failed to seek: \"+err);\r\n        }\r\n    }","code-length":113,"reference":"Seeks to the position in the audio","result":"Seek media.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var thisM = Media.get(id);\r\n        try {\r\n            thisM.node.pause();\r\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_PAUSED);\r\n        } catch (err) {\r\n            lose(\"Failed to pause: \"+err);\r\n        }\r\n    }","code-length":108,"reference":"Pauses the playing audio","result":"Pause a media.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        try {\r\n            var p = (Media.get(id)).node.currentTime;\r\n            win(p);\r\n        } catch (err) {\r\n            lose(err);\r\n        }\r\n    }","code-length":83,"reference":"Gets current position in the audio","result":"Get the media.","score":[0.1502,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var srcUri = processUri(args[1]);\r\n        var dest = parseUriToPathAndFilename(srcUri);\r\n        var destFileName = dest.fileName;\r\n        var success = function () {\r\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_RUNNING);\r\n        };\r\n        var error = function (reason) {\r\n            Media.onStatus(id, Media.MEDIA_ERROR, reason);\r\n        };\r\n        Media.prototype.mediaCaptureMgr = null;\r\n        var thisM = (Media.get(id));\r\n        var captureInitSettings = new Windows.Media.Capture.MediaCaptureInitializationSettings();\r\n        captureInitSettings.streamingCaptureMode = Windows.Media.Capture.StreamingCaptureMode.audio;\r\n        thisM.mediaCaptureMgr = new Windows.Media.Capture.MediaCapture();\r\n        thisM.mediaCaptureMgr.addEventListener(\"failed\", error);\r\n        thisM.mediaCaptureMgr.initializeAsync(captureInitSettings).done(function (result) {\r\n            thisM.mediaCaptureMgr.addEventListener(\"recordlimitationexceeded\", error);\r\n            thisM.mediaCaptureMgr.addEventListener(\"failed\", error);\r\n            Windows.Storage.ApplicationData.current.temporaryFolder.createFileAsync(destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(function (newFile) {\r\n                recordedFile = newFile;\r\n                var encodingProfile = null;\r\n                switch (newFile.fileType) {\r\n                    case '.m4a':\r\n                        encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createM4a(Windows.Media.MediaProperties.AudioEncodingQuality.auto);\r\n                        break;\r\n                    case '.mp3':\r\n                        encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createMp3(Windows.Media.MediaProperties.AudioEncodingQuality.auto);\r\n                        break;\r\n                    case '.wma':\r\n                        encodingProfile = Windows.Media.MediaProperties.MediaEncodingProfile.createWma(Windows.Media.MediaProperties.AudioEncodingQuality.auto);\r\n                        break;\r\n                    default:\r\n                        error(\"Invalid file type for record\");\r\n                        break;\r\n                }\r\n                thisM.mediaCaptureMgr.startRecordToStorageFileAsync(encodingProfile, newFile).done(success, error);\r\n            }, error);\r\n        }, error);\r\n    }","code-length":592,"reference":"Start recording audio","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var thisM = Media.get(id);\r\n        var srcUri = processUri(thisM.src);\r\n        var dest = parseUriToPathAndFilename(srcUri);\r\n        var destPath = dest.path;\r\n        var destFileName = dest.fileName;\r\n        var fsType = dest.fsType;\r\n        var success = function () {\r\n            Media.onStatus(id, Media.MEDIA_STATE, Media.MEDIA_STOPPED);\r\n        };\r\n        var error = function (reason) {\r\n            Media.onStatus(id, Media.MEDIA_ERROR, reason);\r\n        };\r\n        thisM.mediaCaptureMgr.stopRecordAsync().done(function () {\r\n            if (fsType === fsTypes.TEMPORARY) {\r\n                if (!destPath) {\r\n                    success();\r\n                } else {\r\n                    Windows.Storage.ApplicationData.current.temporaryFolder.getFolderAsync(destPath).done(function (destFolder) {\r\n                        recordedFile.copyAsync(destFolder, destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(success, error);\r\n                    }, error);\r\n                }\r\n            } else {\r\n                if (!destPath) {\r\n                    recordedFile.copyAsync(Windows.Storage.ApplicationData.current.localFolder, destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(success, error);\r\n                } else {\r\n                    Windows.Storage.ApplicationData.current.localFolder.getFolderAsync(destPath).done(function (destFolder) {\r\n                        recordedFile.copyAsync(destFolder, destFileName, Windows.Storage.CreationCollisionOption.replaceExisting).done(success, error);\r\n                    }, error);\r\n                }\r\n            }\r\n        }, error);\r\n    }","code-length":453,"reference":"Stop recording audio","result":"Stop recording.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(win, lose, args) {\r\n        var id = args[0];\r\n        var thisM = Media.get(id);\r\n        try {\r\n            if (thisM.node) {\r\n                thisM.node.onloadedmetadata = null;\r\n                thisM.node.onerror = null;\r\n                thisM.node.src = null;\r\n                delete thisM.node;\r\n            }\r\n        } catch (err) {\r\n            lose(\"Failed to release: \"+err);\r\n        }\r\n    }","code-length":138,"reference":"Release the media object","result":"Release a media.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fullPathToAppData(uri) {\r\n    if (uri.schemeName === 'file') {\r\n        if (uri.rawUri.indexOf(Windows.Storage.ApplicationData.current.localFolder.path) !== -1) {\r\n            uri = new Windows.Foundation.Uri(localFolderAppDataBasePath, uri.rawUri.replace(localFolderFullPath, '').replace(\/^[\\\\\\\/]{1,2}\/, ''));\r\n        } else if (uri.rawUri.indexOf(Windows.Storage.ApplicationData.current.temporaryFolder.path) !== -1) {\r\n            uri = new Windows.Foundation.Uri(tempFolderAppDataBasePath, uri.rawUri.replace(tempFolderFullPath, '').replace(\/^[\\\\\\\/]{1,2}\/, ''));\r\n        } else {\r\n            throw new Error('Not supported file uri: ' + uri.rawUri);\r\n        }\r\n    }\r\n    return uri;\r\n}","code-length":228,"reference":"Convert native full path to ms-appdata path\n","result":"Convert the full path to app data.","score":[0.3575,0.2857]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cdvfileToAppData(uri) {\r\n    var cdvFsRoot;\r\n    if (uri.schemeName === 'cdvfile') {\r\n        cdvFsRoot = uri.path.split('\/')[1];\r\n        if (cdvFsRoot === 'temporary') {\r\n            return new Windows.Foundation.Uri(tempFolderAppDataBasePath, uri.path.split('\/').slice(2).join('\/'));\r\n        } else if (cdvFsRoot === 'persistent') {\r\n            return new Windows.Foundation.Uri(localFolderAppDataBasePath, uri.path.split('\/').slice(2).join('\/'));\r\n        } else {\r\n            throw new Error(cdvFsRoot + ' cdvfile root is not supported on Windows');\r\n        }\r\n    }\r\n    return uri;\r\n}","code-length":205,"reference":"Converts cdvfile paths to ms-appdata path\n","result":"Convert a cdvfile to app data.","score":[0.2296,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processUri(src) {\r\nathToAppData(uri);\r\n    uri = cdvfileToAppData(uri);\r\n    return uri;\r\n}","code-length":48,"reference":"Prepares media src for internal usage\n","result":"Process the source .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseUriToPathAndFilename(uri) {\r\nice(2).join('\\\\');\r\n    var path = normalizedSrc.substr(0, normalizedSrc.lastIndexOf('\\\\'));\r\n    var fileName = normalizedSrc.replace(path + '\\\\', '');\r\n    var fsType;\r\n    if (uri.path.split('\/')[1] === 'local') {\r\n        fsType = fsTypes.PERSISTENT;\r\n    } else if (uri.path.split('\/')[1] === 'temp') {\r\n        fsType = fsTypes.TEMPORARY;\r\n    }\r\n    return {\r\n        path: path,\r\n        fileName: fileName,\r\n        fsType: fsType\r\n    };\r\n}","code-length":180,"reference":"Extracts path, filename and filesystem type from Uri\n","result":"Parse the URI.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Context (hook, opts) {\r\n    this.hook = hook;\r\n    this.opts = Object.assign({}, opts);\r\n    this.cmdLine = process.argv.join(' ');\r\n    Object.defineProperty(this, 'cordova', {\r\n        get () { return this.requireCordovaModule('cordova-lib').cordova; }\r\n    });\r\n}","code-length":100,"reference":"Creates hook script context\n","result":"Create a context.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getUniqueCapabilities(capabilities) {\r\n    return capabilities.reduce(function(uniqueCaps, currCap) {\r\n        var isRepeated = uniqueCaps.some(function(cap) {\r\n            return getCapabilityName(cap) === getCapabilityName(currCap);\r\n        });\r\n        return isRepeated ? uniqueCaps : uniqueCaps.concat([currCap]);\r\n    }, []);\r\n}","code-length":99,"reference":"Remove capabilities with same names\n","result":"Generate unique capabilities.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareCapabilities(firstCap, secondCap) {\r\n    var firstCapName = getCapabilityName(firstCap);\r\n    var secondCapName = getCapabilityName(secondCap);\r\n    if (firstCapName < secondCapName) {\r\n        return -1;\r\n    }\r\n    if (firstCapName > secondCapName) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}","code-length":108,"reference":"Comparator function to pass to Array.sort\n","result":"Compare capabilities.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isCordova (dir) {\r\n    if (!dir) {\r\n        var pwd = process.env.PWD;\r\n        var cwd = process.cwd();\r\n        if (pwd && pwd !== cwd && pwd !== 'undefined') {\r\n            return this.isCordova(pwd) || this.isCordova(cwd);\r\n        }\r\n        return this.isCordova(cwd);\r\n    }\r\n    var bestReturnValueSoFar = false;\r\n    for (var i = 0; i < 1000; ++i) {\r\n        var result = isRootDir(dir);\r\n        if (result === 2) {\r\n            return dir;\r\n        }\r\n        if (result === 1) {\r\n            bestReturnValueSoFar = dir;\r\n        }\r\n        var parentDir = path.normalize(path.join(dir, '..'));\r\n        if (parentDir === dir) {\r\n            return bestReturnValueSoFar;\r\n        }\r\n        dir = parentDir;\r\n    }\r\n    console.error('Hit an unhandled case in util.isCordova');\r\n    return false;\r\n}","code-length":268,"reference":"Runs up the directory chain looking for a .cordova directory. IF it is found we are in a Cordova project. Omit argument to use CWD.","result":"Detect if a directory is a Cordova project.","score":[0.0406,0.2457]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cdProjectRoot () {\r\n    const projectRoot = this.getProjectRoot();\r\n    if (!origCwd) {\r\n        origCwd = process.env.PWD || process.cwd();\r\n    }\r\n    process.env.PWD = projectRoot;\r\n    process.chdir(projectRoot);\r\n    return projectRoot;\r\n}","code-length":89,"reference":"Cd to project root dir and return its path. Throw CordovaError if not in a Corodva project.","result":"Cd project root.","score":[0.0046,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deleteSvnFolders (dir) {\r\n    var contents = fs.readdirSync(dir);\r\n    contents.forEach(function (entry) {\r\n        var fullpath = path.join(dir, entry);\r\n        if (isDirectory(fullpath)) {\r\n            if (entry === '.svn') {\r\n                fs.removeSync(fullpath);\r\n            } else module.exports.deleteSvnFolders(fullpath);\r\n        }\r\n    });\r\n}","code-length":121,"reference":"Recursively deletes .svn folders from a target path","result":"Delete the.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findPlugins (pluginDir) {\r\n    var plugins = [];\r\n    if (fs.existsSync(pluginDir)) {\r\n        plugins = fs.readdirSync(pluginDir).filter(function (fileName) {\r\n            var pluginPath = path.join(pluginDir, fileName);\r\n            var isPlugin = isDirectory(pluginPath) || isSymbolicLink(pluginPath);\r\n            return fileName !== '.svn' && fileName !== 'CVS' && isPlugin;\r\n        });\r\n    }\r\n    return plugins;\r\n}","code-length":134,"reference":"list the directories in the path, ignoring any files","result":"Find plugins in a plugin directory.","score":[0.1171,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction HooksRunner (projectRoot) {\r\n    var root = cordovaUtil.isCordova(projectRoot);\r\n    if (!root) throw new CordovaError('Not a Cordova project (\"' + projectRoot + '\"), can\\'t use hooks.');\r\n    else this.projectRoot = root;\r\n}","code-length":81,"reference":"Tries to create a HooksRunner for passed project root.\n","result":"Run the hooks.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractSheBangInterpreter (fullpath) {\r\n    const chunkSize = 4096;\r\n    const fileData = readChunk.sync(fullpath, 0, chunkSize);\r\n    const fileChunk = fileData.toString();\r\n    const hookCmd = shebangCommand(fileChunk);\r\n    if (hookCmd && fileData.length === chunkSize && !fileChunk.match(\/[\\r\\n]\/)) {\r\n        events.emit('warn', 'shebang is too long for \"' + fullpath + '\"');\r\n    }\r\n    return hookCmd;\r\n}","code-length":138,"reference":"Extracts shebang interpreter from script' source.","result":"Extract the shebang interpreter.","score":[0.1938,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isHookDisabled (opts, hook) {\r\n    if (opts === undefined || opts.nohooks === undefined) {\r\n        return false;\r\n    }\r\n    var disabledHooks = opts.nohooks;\r\n    var length = disabledHooks.length;\r\n    for (var i = 0; i < length; i++) {\r\n        if (hook.match(disabledHooks[i]) !== null) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","code-length":127,"reference":"Checks if the given hook type is disabled at the command line option.\n","result":"Check if a hook is disabled.","score":[0.0791,0.2566]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var modulemapper = require('cordova\/modulemapper');\r\n        var channel = require('cordova\/channel');\r\n        modulemapper.clobbers('cordova\/exec\/proxy', 'cordova.commandProxy');\r\n        channel.onNativeReady.fire();\r\n        document.addEventListener(\"visibilitychange\", function(){\r\n            if(document.hidden) {\r\n                channel.onPause.fire();\r\n            }\r\n            else {\r\n                channel.onResume.fire();\r\n            }\r\n        });\r\n    }","code-length":140,"reference":"cordova-js","result":"Test the native code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (hook, opts) {\r\n        if (!hook) {\r\n            throw new Error('hook type is not specified');\r\n        }\r\n        return getApplicationHookScripts(hook, opts)\r\n            .concat(getPluginsHookScripts(hook, opts));\r\n    }","code-length":72,"reference":"Returns all script files for the hook type specified.","result":"Create a new hook.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPluginsHookScripts (hook, opts) {\r\n    if (!hook) {\r\n        throw new Error('hook type is not specified');\r\n    }\r\n    if (opts.plugin) {\r\n        events.emit('verbose', 'Finding scripts for \"' + hook + '\" hook from plugin ' + opts.plugin.id + ' on ' + opts.plugin.platform + ' platform only.');\r\n        return getPluginScriptFiles(opts.plugin, hook, opts.plugin.platform ? [opts.plugin.platform] : opts.cordova.platforms);\r\n    }\r\n    return getAllPluginsHookScriptFiles(hook, opts);\r\n}","code-length":156,"reference":"Returns script files defined by plugin developers as part of plugin.xml.","result":"Find all plugins hook scripts.","score":[0,0.0481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getApplicationHookScriptsFromDir (dir) {\r\n    if (!(fs.existsSync(dir))) {\r\n        return [];\r\n    }\r\n    var compareNumbers = function (a, b) {\r\n        return isNaN(parseInt(a, 10)) ? a.toLowerCase().localeCompare(b.toLowerCase ? b.toLowerCase() : b)\r\n            : parseInt(a, 10) > parseInt(b, 10) ? 1 : parseInt(a, 10) < parseInt(b, 10) ? -1 : 0;\r\n    };\r\n    var scripts = fs.readdirSync(dir).sort(compareNumbers).filter(function (s) {\r\n        return s[0] !== '.';\r\n    });\r\n    return scripts.map(function (scriptPath) {\r\n        return { path: scriptPath, fullPath: path.join(dir, scriptPath), useModuleLoader: false };\r\n    });\r\n}","code-length":226,"reference":"Gets application level hooks from the directrory specified.","result":"Load application hooks from a directory.","score":[0.2165,0.3276]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getScriptsFromConfigXml (hook, opts) {\r\n    var configPath = cordovaUtil.projectConfig(opts.projectRoot);\r\n    var configXml = new ConfigParser(configPath);\r\n    return configXml.getHookScripts(hook, opts.cordova.platforms).map(function (scriptElement) {\r\n        return {\r\n            path: scriptElement.attrib.src,\r\n            fullPath: path.join(opts.projectRoot, scriptElement.attrib.src)\r\n        };\r\n    });\r\n}","code-length":130,"reference":"Gets all scripts defined in config.xml with the specified type and platforms.","result":"Get the scripts from the config.","score":[0.0845,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPluginScriptFiles (plugin, hook, platforms) {\r\n    var scriptElements = plugin.pluginInfo.getHookScripts(hook, platforms);\r\n    return scriptElements.map(function (scriptElement) {\r\n        return {\r\n            path: scriptElement.attrib.src,\r\n            fullPath: path.join(plugin.dir, scriptElement.attrib.src),\r\n            plugin: plugin\r\n        };\r\n    });\r\n}","code-length":111,"reference":"Gets hook scripts defined by the plugin.","result":"Load plugin scripts.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getAllPluginsHookScriptFiles (hook, opts) {\r\n    var scripts = [];\r\n    var currentPluginOptions;\r\n    var plugins = (new PluginInfoProvider()).getAllWithinSearchPath(path.join(opts.projectRoot, 'plugins'));\r\n    plugins.forEach(function (pluginInfo) {\r\n        currentPluginOptions = {\r\n            id: pluginInfo.id,\r\n            pluginInfo: pluginInfo,\r\n            dir: pluginInfo.dir\r\n        };\r\n        scripts = scripts.concat(getPluginScriptFiles(currentPluginOptions, hook, opts.cordova.platforms));\r\n    });\r\n    return scripts;\r\n}","code-length":165,"reference":"Gets hook scripts defined by all plugins.","result":"Collect all hook script files.","score":[0.1915,0.3758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ensureUniqueCapabilities(capabilities) {\r\n    var uniqueCapabilities = [];\r\n    capabilities.getchildren()\r\n    .forEach(function(el) {\r\n        var name = el.attrib.Name;\r\n        if (uniqueCapabilities.indexOf(name) !== -1) {\r\n            capabilities.remove(el);\r\n        } else {\r\n            uniqueCapabilities.push(name);\r\n        }\r\n    });\r\n}","code-length":111,"reference":"Cleans up duplicate capability declarations that were generated during the prepare process\n","result":"Ensure capabilities are unique.","score":[0,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyNewFile (plugin_dir, src, project_dir, dest, link) {\r\n    var target_path = path.resolve(project_dir, dest);\r\n    if (fs.existsSync(target_path))\r\n        throw new CordovaError('\"' + target_path + '\" already exists!');\r\n    copyFile(plugin_dir, src, project_dir, dest, !!link);\r\n}","code-length":105,"reference":"Same as copy file but throws error if target exists","result":"Copy files.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PluginSpec (raw, scope, id, version) {\r\n        this.scope = scope || null;\r\n        this.id = id || raw;\r\n        this.version = version || null;\r\n        this.package = (scope ? scope + id : id) || null;\r\n}","code-length":77,"reference":"Represents a parsed specification for a plugin\n","result":"Create a plugin spec.","score":[0.2134,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPluginFilePath(plugin, pluginFile, targetDir) {\r\n    var src = path.resolve(plugin.dir, pluginFile);\r\n    return '$(ProjectDir)' + path.relative(targetDir, src);\r\n}","code-length":60,"reference":"returns relative file path for a file in the plugin's folder that can be referenced from a project file.","result":"Create a new file.","score":[0.0089,0.0571]}
{"code":"\/*is used to<extra_id_0>\r\nfunction platform (command, targets, opts) {\r\n    return Promise.resolve().then(function () {\r\n        var msg;\r\n        var projectRoot = cordova_util.cdProjectRoot();\r\n        var hooksRunner = new HooksRunner(projectRoot);\r\n        if (arguments.length === 0) command = 'ls';\r\n        if (targets && !(targets instanceof Array)) targets = [targets];\r\n        if ((command === 'add' || command === 'rm' || command === 'remove') && (!targets || (targets instanceof Array && targets.length === 0))) {\r\n            msg = 'You need to qualify `' + command + '` with one or more platforms!';\r\n            return Promise.reject(new CordovaError(msg));\r\n        }\r\n        opts = opts || {};\r\n        opts.platforms = targets;\r\n        switch (command) {\r\n        case 'add':\r\n            return module.exports.add(hooksRunner, projectRoot, targets, opts);\r\n        case 'rm':\r\n        case 'remove':\r\n            return module.exports.remove(hooksRunner, projectRoot, targets, opts);\r\n        case 'update':\r\n        case 'up':\r\n            return module.exports.update(hooksRunner, projectRoot, targets, opts);\r\n        case 'check':\r\n            return module.exports.check(hooksRunner, projectRoot);\r\n        default:\r\n            return module.exports.list(hooksRunner, projectRoot, opts);\r\n        }\r\n    });\r\n}","code-length":356,"reference":"Handles all cordova platform commands.\n","result":"Run the platform command .","score":[0.2403,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPlatforms (projectRoot) {\r\n    var xml = cordova_util.projectConfig(projectRoot);\r\n    var cfg = new ConfigParser(xml);\r\n    var engines = cfg.getEngines().map(function (engine) {\r\n        var result = {\r\n            name: engine.name\r\n        };\r\n        if (semver.validRange(engine.spec, true)) {\r\n            result.version = engine.spec;\r\n        } else {\r\n            result.src = engine.spec;\r\n        }\r\n        return result;\r\n    });\r\n    return Promise.resolve(engines);\r\n}","code-length":158,"reference":"Returns all the platforms that are currently saved into config.xml\n","result":"Get platforms from config.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPlugins (projectRoot) {\r\n    var xml = cordova_util.projectConfig(projectRoot);\r\n    var cfg = new ConfigParser(xml);\r\n    var plugins = cfg.getPlugins().map(function (plugin) {\r\n        var result = {\r\n            name: plugin.name\r\n        };\r\n        if (semver.validRange(plugin.spec, true)) {\r\n            result.version = plugin.spec;\r\n        } else {\r\n            result.src = plugin.spec;\r\n        }\r\n        var variablesObject = plugin.variables;\r\n        var variablesArray = [];\r\n        if (variablesObject) {\r\n            for (var variable in variablesObject) {\r\n                variablesArray.push({\r\n                    name: variable,\r\n                    value: variablesObject[variable]\r\n                });\r\n            }\r\n        }\r\n        result.variables = variablesArray;\r\n        return result;\r\n    });\r\n    return Promise.resolve(plugins);\r\n}","code-length":244,"reference":"Returns all the plugins that are currently saved into config.xml\n","result":"Get the plugin configurations.","score":[0.0713,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (plugin_id, plugins_dir, platformJson, pluginInfoProvider) {\r\n        var depsInfo;\r\n        if (typeof plugins_dir === 'object') { depsInfo = plugins_dir; } else { depsInfo = pkg.generateDependencyInfo(platformJson, plugins_dir, pluginInfoProvider); }\r\n        var graph = depsInfo.graph;\r\n        var dependencies = graph.getChain(plugin_id);\r\n        var tlps = depsInfo.top_level_plugins;\r\n        var diff_arr = [];\r\n        tlps.forEach(function (tlp) {\r\n            if (tlp !== plugin_id) {\r\n                diff_arr.push(graph.getChain(tlp));\r\n            }\r\n        });\r\n        diff_arr.unshift(dependencies);\r\n        var danglers = underscore.difference.apply(null, diff_arr);\r\n        danglers = danglers && danglers.filter(function (x) { return tlps.indexOf(x) < 0; });\r\n        return danglers;\r\n    }","code-length":261,"reference":"Returns a list of plugins which the given plugin depends on, for which it is the only dependent. In other words, if the given plugin were deleted, these dangling dependencies should be deleted too.","result":"Generate plugin dependencies.","score":[0.0,0.0162]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createReplacement(manifestFile, originalChange) {\r\n    var replacement = {\r\n        target:         manifestFile,\r\n        parent:         originalChange.parent,\r\n        after:          originalChange.after,\r\n        xmls:           originalChange.xmls,\r\n        versions:       originalChange.versions,\r\n        deviceTarget:   originalChange.deviceTarget\r\n    };\r\n    return replacement;\r\n}","code-length":108,"reference":"This is a local function that creates the new replacement representing the mutation.  Used to save code further down.","result":"Create a replacement for the manifest.","score":[0.0291,0.113]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkID (expectedIdAndVersion, pinfo) {\r\n    if (!expectedIdAndVersion) return;\r\n    var parsedSpec = pluginSpec.parse(expectedIdAndVersion);\r\n    if (parsedSpec.id !== pinfo.id) {\r\n        throw new Error('Expected plugin to have ID \"' + parsedSpec.id + '\" but got \"' + pinfo.id + '\".');\r\n    }\r\n    if (parsedSpec.version && !semver.satisfies(pinfo.version, parsedSpec.version)) {\r\n        throw new Error('Expected plugin ' + pinfo.id + ' to satisfy version \"' + parsedSpec.version + '\" but got \"' + pinfo.version + '\".');\r\n    }\r\n}","code-length":179,"reference":"Helper function for checking expected plugin IDs against reality.","result":"Check plugin ID and version .","score":[0.1171,0.2937]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPlatformDetailsFromDir (dir, platformIfKnown) {\r\n    var libDir = path.resolve(dir);\r\n    var platform;\r\n    var version;\r\n    try {\r\n        var pkgPath = path.join(libDir, 'package.json');\r\n        var pkg = cordova_util.requireNoCache(pkgPath);\r\n        platform = module.exports.platformFromName(pkg.name);\r\n        version = pkg.version;\r\n    } catch (e) {\r\n        return Promise.reject(new CordovaError('The provided path does not seem to contain a valid package.json or a valid Cordova platform: ' + libDir));\r\n    }\r\n    if (!version || !platform) {\r\n        return Promise.reject(new CordovaError('The provided path does not seem to contain a ' +\r\n            'Cordova platform: ' + libDir));\r\n    }\r\n    return Promise.resolve({\r\n        libDir: libDir,\r\n        platform: platform,\r\n        version: version\r\n    });\r\n}","code-length":254,"reference":"Gets platform details from a directory","result":"Resolve platform specific paths.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction platformFromName (name) {\r\n    var platName = name;\r\n    var platMatch = \/^cordova-([a-z0-9-]+)$\/.exec(name);\r\n    if (platMatch && (platMatch[1] in platforms)) {\r\n        platName = platMatch[1];\r\n        events.emit('verbose', 'Removing \"cordova-\" prefix from ' + name);\r\n    }\r\n    return platName;\r\n}","code-length":118,"reference":"Removes the cordova- prefix from the platform's name for known platforms.\n","result":"Detect the platform name.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processMessage(message) {\r\n    var firstChar = message.charAt(0);\r\n    if (firstChar == 'J') {\r\n        eval(message.slice(1));\r\n    } else if (firstChar == 'S' || firstChar == 'F') {\r\n        var success = firstChar == 'S';\r\n        var keepCallback = message.charAt(1) == '1';\r\n        var spaceIdx = message.indexOf(' ', 2);\r\n        var status = +message.slice(2, spaceIdx);\r\n        var nextSpaceIdx = message.indexOf(' ', spaceIdx + 1);\r\n        var callbackId = message.slice(spaceIdx + 1, nextSpaceIdx);\r\n        var payloadMessage = message.slice(nextSpaceIdx + 1);\r\n        var payload = [];\r\n        buildPayload(payload, payloadMessage);\r\n        cordova.callbackFromNative(callbackId, success, status, payload, keepCallback);\r\n    } else {\r\n        console.log(\"processMessage failed: invalid message: \" + JSON.stringify(message));\r\n    }\r\n}","code-length":262,"reference":"Processes a single message, as encoded by NativeToJsMessageQueue.java.","result":"Process messages.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction callEngineScripts (engines, project_dir) {\r\n    return Promise.all(\r\n        engines.map(function (engine) {\r\n            var scriptPath = engine.scriptSrc || null;\r\n            if (scriptPath && (isWindows || fs.existsSync(engine.scriptSrc))) {\r\n                if (!isWindows) {\r\n                    fs.chmodSync(engine.scriptSrc, '755');\r\n                }\r\n                return superspawn.spawn(scriptPath)\r\n                    .then(stdout => {\r\n                        engine.currentVersion = cleanVersionOutput(stdout, engine.name);\r\n                        if (engine.currentVersion === '') {\r\n                            events.emit('warn', engine.name + ' version check returned nothing (' + scriptPath + '), continuing anyways.');\r\n                            engine.currentVersion = null;\r\n                        }\r\n                    }, () => {\r\n                        events.emit('warn', engine.name + ' version check failed (' + scriptPath + '), continuing anyways.');\r\n                        engine.currentVersion = null;\r\n                    })\r\n                    .then(_ => engine);\r\n            } else {\r\n                if (engine.currentVersion) {\r\n                    engine.currentVersion = cleanVersionOutput(engine.currentVersion, engine.name);\r\n                } else {\r\n                    events.emit('warn', engine.name + ' version not detected (lacks script ' + scriptPath + ' ), continuing.');\r\n                }\r\n                return Promise.resolve(engine);\r\n            }\r\n        })\r\n    );\r\n}","code-length":373,"reference":"exec engine scripts in order to get the current engine version Returns a promise for the array of engines.","result":"Call engines scripts in a.","score":[0.0207,0.1452]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createPackageJson (plugin_path) {\r\n    var pluginInfo = new PluginInfo(plugin_path);\r\n    var defaults = {\r\n        id: pluginInfo.id,\r\n        version: pluginInfo.version,\r\n        description: pluginInfo.description,\r\n        license: pluginInfo.license,\r\n        keywords: pluginInfo.getKeywordsAndPlatforms(),\r\n        repository: pluginInfo.repo,\r\n        engines: pluginInfo.getEngines(),\r\n        platforms: pluginInfo.getPlatformsArray()\r\n    };\r\n    var initFile = require.resolve('.\/init-defaults');\r\n    return initPkgJson(plugin_path, initFile, defaults)\r\n        .then(_ => {\r\n            events.emit('verbose', 'Package.json successfully created');\r\n        });\r\n}","code-length":200,"reference":"returns a promise","result":"Create a new package.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preparePlatforms (platformList, projectRoot, options) {\r\n    return Promise.all(platformList.map(function (platform) {\r\n        var project = {\r\n            root: projectRoot,\r\n            projectConfig: new ConfigParser(cordova_util.projectConfig(projectRoot)),\r\n            locations: {\r\n                plugins: path.join(projectRoot, 'plugins'),\r\n                www: cordova_util.projectWww(projectRoot),\r\n                rootConfigXml: cordova_util.projectConfig(projectRoot)\r\n            }\r\n        };\r\n        return module.exports.restoreMissingPluginsForPlatform(platform, projectRoot, options)\r\n            .then(function () {\r\n                var platformApi = platforms.getPlatformApi(platform);\r\n                return platformApi.prepare(project, _.clone(options))\r\n                    .then(function () {\r\n                        var platformRoot = path.join(projectRoot, 'platforms', platform);\r\n                        var platformJson = PlatformJson.load(platformRoot, platform);\r\n                        var munger = new PlatformMunger(platform, platformRoot, platformJson);\r\n                        munger.add_config_changes(project.projectConfig, true).save_all();\r\n                    });\r\n            });\r\n    }));\r\n}","code-length":308,"reference":"Calls `platformApi.prepare` for each platform in project\n\n","result":"Prepare platforms.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(icon, icon_size) {\r\n        var density = icon.density || sizeToDensityMap[icon_size];\r\n        if (!density) {\r\n            return;\r\n        }\r\n        var previous = android_icons[density];\r\n        if (previous && previous.platform) {\r\n            return;\r\n        }\r\n        android_icons[density] = icon;\r\n    }","code-length":103,"reference":"find the best matching icon for a given density or size ","result":"Detect android icons.","score":[0,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mapImageResources(rootDir, subDir, type, resourceName) {\r\n    var pathMap = {};\r\n    shell.ls(path.join(rootDir, subDir, type + '-*'))\r\n    .forEach(function (drawableFolder) {\r\n        var imagePath = path.join(subDir, path.basename(drawableFolder), resourceName);\r\n        pathMap[imagePath] = null;\r\n    });\r\n    return pathMap;\r\n}","code-length":119,"reference":"Gets a map containing resources of a specified name from all drawable folders in a directory.","result":"Map image resources to images.","score":[0.0266,0.0671]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findAndroidLaunchModePreference(platformConfig) {\r\n    var launchMode = platformConfig.getPreference('AndroidLaunchMode');\r\n    if (!launchMode) {\r\n        return 'singleTop';\r\n    }\r\n    var expectedValues = ['standard', 'singleTop', 'singleTask', 'singleInstance'];\r\n    var valid = expectedValues.indexOf(launchMode) >= 0;\r\n    if (!valid) {\r\n        events.emit('warn', 'Unrecognized value for AndroidLaunchMode preference: ' +\r\n            launchMode + '. Expected values are: ' + expectedValues.join(', '));\r\n    }\r\n    return launchMode;\r\n}","code-length":161,"reference":"Gets and validates 'AndroidLaunchMode' prepference from config.xml. Returns\npreference value and warns if it doesn't seems to be valid\n\n","result":"Find the AndroidLaunchModePreference.","score":[0,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction AndroidManifest(path) {\r\n    this.path = path;\r\n    this.doc = xml.parseElementtreeSync(path);\r\n    if (this.doc.getroot().tag !== 'manifest') {\r\n        throw new Error('AndroidManifest at ' + path + ' has incorrect root node name (expected \"manifest\")');\r\n    }\r\n}","code-length":92,"reference":"Wraps an AndroidManifest file","result":"Create a manifest.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction expectUnmetRequirements (expected) {\r\n    const actual = unmetRequirementsCollector.store;\r\n    expect(actual).toEqual(jasmine.arrayWithExactContents(expected));\r\n}","code-length":55,"reference":"Checks the warnings that were printed by the CLI to ensure that the code is listing the correct reasons for failure. Checks against the global warnings object which is reset before each test","result":"Test unmet requirements.","score":[0,0.0167]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findVersion (versions, version) {\r\n    var cleanedVersion = semver.clean(version);\r\n    for (var i = 0; i < versions.length; i++) {\r\n        if (semver.clean(versions[i]) === cleanedVersion) {\r\n            return versions[i];\r\n        }\r\n    }\r\n    return null;\r\n}","code-length":94,"reference":"return the version if it is in the versions array return null if the version doesn't exist in the array","result":"Find the version of a package.","score":[0.0265,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction listUnmetRequirements (name, failedRequirements) {\r\n    events.emit('warn', 'Unmet project requirements for latest version of ' + name + ':');\r\n    failedRequirements.forEach(function (req) {\r\n        events.emit('warn', '    ' + req.dependency + ' (' + req.installed + ' in project, ' + req.required + ' required)');\r\n    });\r\n}","code-length":104,"reference":"emits warnings to users of failed dependnecy requirements in their projects","result":"List unmet requirements.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(folderName, task) {\r\r\n    var defer = Q.defer();\r\r\n\r\r\n    var vn = (task.name || folderName);\r\r\n\r\r\n    if (!task.id || !check.isUUID(task.id)) {\r\r\n        defer.reject(createError(vn + ': id is a required guid'));\r\r\n    };\r\r\n\r\r\n    if (!task.name || !check.isAlphanumeric(task.name)) {\r\r\n        defer.reject(createError(vn + ': name is a required alphanumeric string'));\r\r\n    }\r\r\n\r\r\n    if (!task.friendlyName || !check.isLength(task.friendlyName, 1, 40)) {\r\r\n        defer.reject(createError(vn + ': friendlyName is a required string <= 40 chars'));\r\r\n    }\r\r\n\r\r\n    if (!task.instanceNameFormat) {\r\r\n        defer.reject(createError(vn + ': instanceNameFormat is required'));    \r\r\n    }\r\r\n\r\r\n    defer.resolve();\r\r\n    return defer.promise;\r\r\n}","code-length":274,"reference":"Validates the structure of a task.json file.","result":"Create a new task.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (travisYML, newVersion, newCodeName, existingVersions) {\r\n  if (existingVersions.versions.length === 0) return travisYML\r\n  const nodeVersionIndex = getNodeVersionIndex(existingVersions.versions, newVersion, newCodeName)\r\n  const travisYMLLines = travisYML.split('\\n')\r\n  if (nodeVersionIndex === -1) {\r\n    let delimiter = ''\r\n    let leadingSpaces = ''\r\n    if (existingVersions.versions && existingVersions.versions.length > 0) {\r\n      if (existingVersions.versions[0].match(\/\"\/)) {\r\n        delimiter = '\"'\r\n      }\r\n      if (existingVersions.versions[0].match(\/'\/)) {\r\n        delimiter = \"'\"\r\n      }\r\n      leadingSpaces = existingVersions.versions[0].match(\/^([ ]*)\/)[1]\r\n    }\r\n    if (existingVersions.versions.length === 1 && existingVersions.startIndex === existingVersions.endIndex) {\r\n      travisYMLLines.splice(existingVersions.startIndex, 1, 'node_js:')\r\n      travisYMLLines.splice(existingVersions.startIndex + 1, 0, `${leadingSpaces}- ${existingVersions.versions[0]}`)\r\n      travisYMLLines.splice(existingVersions.startIndex + 2, 0, `${leadingSpaces}- ${delimiter}${newVersion}${delimiter}`)\r\n    } else {\r\n      travisYMLLines.splice(existingVersions.endIndex + 1, 0, `${leadingSpaces}- ${delimiter}${newVersion}${delimiter}`)\r\n    }\r\n  }\r\n  return travisYMLLines.join('\\n')\r\n}","code-length":414,"reference":"Stop! YAMLtime! existingVersions is the output of getNodeVersionsFromTravisYML","result":"Replace the version number in the code .","score":[0.1389,0.0625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (travisYML, newVersion, newCodeName, existingVersions) {\r\n  if (existingVersions.versions.length === 0) return travisYML\r\n  const nodeVersionIndex = getNodeVersionIndex(existingVersions.versions, newVersion, newCodeName, true)\r\n  let travisYMLLines = travisYML.split('\\n')\r\n  if (nodeVersionIndex !== -1) {\r\n    if (existingVersions.versions.length !== 1) {\r\n      const updatedVersionsArray = _.filter(existingVersions.versions.map((version) => {\r\n        return hasNodeVersion(version, newVersion, newCodeName, true) ? undefined : version\r\n      }), Boolean)\r\n      travisYMLLines.splice(existingVersions.startIndex + 1, existingVersions.endIndex - existingVersions.startIndex, updatedVersionsArray)\r\n      travisYMLLines = _.flatten(travisYMLLines)\r\n    }\r\n  }\r\n  return travisYMLLines.join('\\n')\r\n}","code-length":250,"reference":"existingVersions is the output of getNodeVersionsFromTravisYML","result":"Update the version of a travisYML file.","score":[0.1921,0.1639]}
{"code":"\/*is used to<extra_id_0>\r\nfunction travisTransform (travisYML) {\r\n    try {\r\n      var travisJSON = yaml.safeLoad(travisYML, {\r\n        schema: yaml.FAILSAFE_SCHEMA\r\n      })\r\n    } catch (e) {\r\n      return\r\n    }\r\n    if (!_.get(travisJSON, 'node_js')) return\r\n    const nodeVersionFromYaml = getNodeVersionsFromTravisYML(travisYML)\r\n    const hasNodeVersion = getNodeVersionIndex(nodeVersionFromYaml.versions, nodeVersion, codeName) !== -1\r\n    if (hasNodeVersion) return\r\n    const updatedTravisYaml = addNodeVersionToTravisYML(travisYML, nodeVersion, codeName, nodeVersionFromYaml)\r\n    return updatedTravisYaml\r\n  }","code-length":205,"reference":"1. fetch .travis.yml","result":"Transform travisYML to YAML.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isDependencyIgnoredInGroups (groups, packageFilePath, dependencyName) {\r\n  const groupName = getGroupForPackageFile(groups, packageFilePath)\r\n  return groupName && _.includes(groups[groupName].ignore, dependencyName)\r\n}","code-length":63,"reference":"Given a groups array, a package path, and a dependency name, returns whether that dep is ignored for that package in any group","result":"Test the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDependencyURL ({ repositoryURL, dependency }) {\r\n  const githubURL = url.parse(\r\n    githubFromGit(repositoryURL) || ''\r\n  )\r\n  if (dependency && !githubURL.href) {\r\n    return `https:\r\n  }\r\n  return githubURL\r\n}","code-length":82,"reference":"returns a url object if you pass in a GitHub repositoryURL, returns a string with an npm URL if you just pass in a dependency name","result":"Get the dependencyURL.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractApis(services) {\r\n                            var filterTypes = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\r\n                            services = Array.isArray(services) ? services : [services];\r\n                            var apis = services.reduce(function (total, service) {\r\n                                var obj = service.constructor === Object ? service : Object.getPrototypeOf(service);\r\n                                var keys = aggregateApisByType(obj, total, filterTypes);\r\n                                total.push.apply(total, keys);\r\n                                return total;\r\n                            }, []);\r\n                            return apis;\r\n                        }","code-length":153,"reference":"extracts lists of methods from each service object.","result":"Extract the apis from a service.","score":[0.1383,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractNormalizedFacetValues(results, attribute) {\r\n  var predicate = {name: attribute};\r\n  if (results._state.isConjunctiveFacet(attribute)) {\r\n    var facet = find(results.facets, predicate);\r\n    if (!facet) return [];\r\n    return map(facet.data, function(v, k) {\r\n      return {\r\n        name: k,\r\n        count: v,\r\n        isRefined: results._state.isFacetRefined(attribute, k),\r\n        isExcluded: results._state.isExcludeRefined(attribute, k)\r\n      };\r\n    });\r\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\r\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\r\n    if (!disjunctiveFacet) return [];\r\n    return map(disjunctiveFacet.data, function(v, k) {\r\n      return {\r\n        name: k,\r\n        count: v,\r\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, k)\r\n      };\r\n    });\r\n  } else if (results._state.isHierarchicalFacet(attribute)) {\r\n    return find(results.hierarchicalFacets, predicate);\r\n  }\r\n}","code-length":334,"reference":"Get the facet values of a specified attribute from a SearchResults object.\n","result":"Extract facet values from the results object.","score":[0.1406,0.3235]}
{"code":"\/*is used to<extra_id_0>\r\nfunction recSort(sortFn, node) {\r\n  if (!node.data || node.data.length === 0) {\r\n    return node;\r\n  }\r\n  var children = map(node.data, partial(recSort, sortFn));\r\n  var sortedChildren = sortFn(children);\r\n  var newNode = merge({}, node, {data: sortedChildren});\r\n  return newNode;\r\n}","code-length":105,"reference":"Sort nodes of a hierarchical facet results\n","result":"RecSort the tree.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(attribute, operator, v) {\r\n    var value = valToNumber(v);\r\n    if (this.isNumericRefined(attribute, operator, value)) return this;\r\n    var mod = merge({}, this.numericRefinements);\r\n    mod[attribute] = merge({}, mod[attribute]);\r\n    if (mod[attribute][operator]) {\r\n      mod[attribute][operator] = mod[attribute][operator].slice();\r\n      mod[attribute][operator].push(value);\r\n    } else {\r\n      mod[attribute][operator] = [value];\r\n    }\r\n    return this.setQueryParameters({\r\n      numericRefinements: mod\r\n    });\r\n  }","code-length":176,"reference":"Add a numeric filter for a given attribute\nWhen value is an array, they are combined with OR\nWhen value is a single value, it will combined with AND\n","result":"Set the query parameters of the refinement function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _clearNumericRefinements(attribute) {\r\n    if (isUndefined(attribute)) {\r\n      if (isEmpty(this.numericRefinements)) return this.numericRefinements;\r\n      return {};\r\n    } else if (isString(attribute)) {\r\n      if (isEmpty(this.numericRefinements[attribute])) return this.numericRefinements;\r\n      return omit(this.numericRefinements, attribute);\r\n    } else if (isFunction(attribute)) {\r\n      var hasChanged = false;\r\n      var newNumericRefinements = reduce(this.numericRefinements, function(memo, operators, key) {\r\n        var operatorList = {};\r\n        forEach(operators, function(values, operator) {\r\n          var outValues = [];\r\n          forEach(values, function(value) {\r\n            var predicateResult = attribute({val: value, op: operator}, key, 'numeric');\r\n            if (!predicateResult) outValues.push(value);\r\n          });\r\n          if (!isEmpty(outValues)) {\r\n            if (outValues.length !== values.length) hasChanged = true;\r\n            operatorList[operator] = outValues;\r\n          }\r\n          else hasChanged = true;\r\n        });\r\n        if (!isEmpty(operatorList)) memo[key] = operatorList;\r\n        return memo;\r\n      }, {});\r\n      if (hasChanged) return newNumericRefinements;\r\n      return this.numericRefinements;\r\n    }\r\n  }","code-length":373,"reference":"Clear numeric filters.\n","result":"Clear numeric refinements.","score":[0.5774,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addHierarchicalFacet(hierarchicalFacet) {\r\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\r\n      throw new Error(\r\n        'Cannot declare two hierarchical facets with the same name: `' + hierarchicalFacet.name + '`');\r\n    }\r\n    return this.setQueryParameters({\r\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet])\r\n    });\r\n  }","code-length":111,"reference":"Add a hierarchical facet to the hierarchicalFacets attribute of the helper\nconfiguration.\n","result":"Add a hierarchical facet.","score":[0.0891,0.2629]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addFacetRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\r\n    }\r\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\r\n    return this.setQueryParameters({\r\n      facetsRefinements: RefinementList.addRefinement(this.facetsRefinements, facet, value)\r\n    });\r\n  }","code-length":142,"reference":"Add a refinement on a \"normal\" facet\n","result":"Add refinements to the query parameters.","score":[0.1634,0.1449]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addExcludeRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\r\n    }\r\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\r\n    return this.setQueryParameters({\r\n      facetsExcludes: RefinementList.addRefinement(this.facetsExcludes, facet, value)\r\n    });\r\n  }","code-length":136,"reference":"Exclude a value from a \"normal\" facet\n","result":"Add the refinements to the query parameters.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addDisjunctiveFacetRefinement(facet, value) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\r\n    }\r\n    if (RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\r\n    return this.setQueryParameters({\r\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\r\n        this.disjunctiveFacetsRefinements, facet, value)\r\n    });\r\n  }","code-length":170,"reference":"Adds a refinement on a disjunctive facet.\n","result":"Add refinements to the query parameters.","score":[0,0.1449]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addTagRefinement(tag) {\r\n    if (this.isTagRefined(tag)) return this;\r\n    var modification = {\r\n      tagRefinements: this.tagRefinements.concat(tag)\r\n    };\r\n    return this.setQueryParameters(modification);\r\n  }","code-length":83,"reference":"addTagRefinement adds a tag to the list used to filter the results\n","result":"Add tag refinements.","score":[0.0203,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeFacet(facet) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      return this;\r\n    }\r\n    return this.clearRefinements(facet).setQueryParameters({\r\n      facets: filter(this.facets, function(f) {\r\n        return f !== facet;\r\n      })\r\n    });\r\n  }","code-length":98,"reference":"Remove a facet from the facets attribute of the helper configuration, if it\nis present.\n","result":"Remove facets.","score":[0.0008,0.0365]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeDisjunctiveFacet(facet) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      return this;\r\n    }\r\n    return this.clearRefinements(facet).setQueryParameters({\r\n      disjunctiveFacets: filter(this.disjunctiveFacets, function(f) {\r\n        return f !== facet;\r\n      })\r\n    });\r\n  }","code-length":111,"reference":"Remove a disjunctive facet from the disjunctiveFacets attribute of the\nhelper configuration, if it is present.\n","result":"Remove facets.","score":[0.0005,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeHierarchicalFacet(facet) {\r\n    if (!this.isHierarchicalFacet(facet)) {\r\n      return this;\r\n    }\r\n    return this.clearRefinements(facet).setQueryParameters({\r\n      hierarchicalFacets: filter(this.hierarchicalFacets, function(f) {\r\n        return f.name !== facet;\r\n      })\r\n    });\r\n  }","code-length":104,"reference":"Remove a hierarchical facet from the hierarchicalFacets attribute of the\nhelper configuration, if it is present.\n","result":"Remove a facet from the list.","score":[0.0917,0.2973]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeFacetRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\r\n    }\r\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value)) return this;\r\n    return this.setQueryParameters({\r\n      facetsRefinements: RefinementList.removeRefinement(this.facetsRefinements, facet, value)\r\n    });\r\n  }","code-length":142,"reference":"Remove a refinement set on facet. If a value is provided, it will clear the\nrefinement for the given value, otherwise it will clear all the refinement\nvalues for the faceted attribute.\n","result":"Remove facet refinements.","score":[0.0,0.0344]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeExcludeRefinement(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\r\n    }\r\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value)) return this;\r\n    return this.setQueryParameters({\r\n      facetsExcludes: RefinementList.removeRefinement(this.facetsExcludes, facet, value)\r\n    });\r\n  }","code-length":136,"reference":"Remove a negative refinement on a facet\n","result":"Remove the refinements from the query parameters.","score":[0.1615,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeDisjunctiveFacetRefinement(facet, value) {\r\n    if (!this.isDisjunctiveFacet(facet)) {\r\n      throw new Error(\r\n        facet + ' is not defined in the disjunctiveFacets attribute of the helper configuration');\r\n    }\r\n    if (!RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)) return this;\r\n    return this.setQueryParameters({\r\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\r\n        this.disjunctiveFacetsRefinements, facet, value)\r\n    });\r\n  }","code-length":170,"reference":"Remove a refinement on a disjunctive facet\n","result":"Remove refinements from the disjunctive facets.","score":[0.1943,0.2174]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeTagRefinement(tag) {\r\n    if (!this.isTagRefined(tag)) return this;\r\n    var modification = {\r\n      tagRefinements: filter(this.tagRefinements, function(t) { return t !== tag; })\r\n    };\r\n    return this.setQueryParameters(modification);\r\n  }","code-length":94,"reference":"Remove a tag from the list of tag refinements\n","result":"Remove tag refinements.","score":[0.0657,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toggleFacetRefinement(facet, value) {\r\n    if (this.isHierarchicalFacet(facet)) {\r\n      return this.toggleHierarchicalFacetRefinement(facet, value);\r\n    } else if (this.isConjunctiveFacet(facet)) {\r\n      return this.toggleConjunctiveFacetRefinement(facet, value);\r\n    } else if (this.isDisjunctiveFacet(facet)) {\r\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\r\n    }\r\n    throw new Error('Cannot refine the undeclared facet ' + facet +\r\n      '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets');\r\n  }","code-length":182,"reference":"Generic toggle refinement method to use with facet, disjunctive facets\nand hierarchical facets\n","result":"Toggle refinement of a facet.","score":[0.0485,0.1537]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(facet, path) {\r\n    if (this.isHierarchicalFacetRefined(facet)) {\r\n      throw new Error(facet + ' is already refined.');\r\n    }\r\n    var mod = {};\r\n    mod[facet] = [path];\r\n    return this.setQueryParameters({\r\n      hierarchicalFacetsRefinements: defaults({}, mod, this.hierarchicalFacetsRefinements)\r\n    });\r\n  }","code-length":116,"reference":"Adds a refinement on a hierarchical facet.\n","result":"Refine a facet.","score":[0.128,0.2273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isFacetRefined(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\r\n    }\r\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\r\n  }","code-length":94,"reference":"Returns true if the facet is refined, either for a specific value or in\ngeneral.\n","result":"Check whether a facet is refined.","score":[0.0674,0.1812]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isExcludeRefined(facet, value) {\r\n    if (!this.isConjunctiveFacet(facet)) {\r\n      throw new Error(facet + ' is not defined in the facets attribute of the helper configuration');\r\n    }\r\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\r\n  }","code-length":92,"reference":"Returns true if the facet contains exclusions or if a specific value is\nexcluded.\n\n","result":"Check whether the facet is excluded refined.","score":[0.093,0.2373]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getRefinedDisjunctiveFacets() {\r\n    var disjunctiveNumericRefinedFacets = intersection(\r\n      keys(this.numericRefinements),\r\n      this.disjunctiveFacets\r\n    );\r\n    return keys(this.disjunctiveFacetsRefinements)\r\n      .concat(disjunctiveNumericRefinedFacets)\r\n      .concat(this.getRefinedHierarchicalFacets());\r\n  }","code-length":121,"reference":"Returns the list of all disjunctive facets refined\n","result":"Create a refinement.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setParameter(parameter, value) {\r\n    if (this[parameter] === value) return this;\r\n    var modification = {};\r\n    modification[parameter] = value;\r\n    return this.setQueryParameters(modification);\r\n  }","code-length":66,"reference":"Let the user set a specific value for a given parameter. Will return the\nsame instance if the parameter is invalid or if the value is the same as the\nprevious one.\n","result":"Set a parameter.","score":[0.0,0.0515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setQueryParameters(params) {\r\n    if (!params) return this;\r\n    var error = SearchParameters.validate(this, params);\r\n    if (error) {\r\n      throw error;\r\n    }\r\n    var parsedParams = SearchParameters._parseNumbers(params);\r\n    return this.mutateMe(function mergeWith(newInstance) {\r\n      var ks = keys(params);\r\n      forEach(ks, function(k) {\r\n        newInstance[k] = parsedParams[k];\r\n      });\r\n      return newInstance;\r\n    });\r\n  }","code-length":145,"reference":"Let the user set any of the parameters with a plain object.\n","result":"Set query parameters.","score":[0,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(facetName) {\r\n    if (!this.isHierarchicalFacet(facetName)) {\r\n      throw new Error(\r\n        'Cannot get the breadcrumb of an unknown hierarchical facet: `' + facetName + '`');\r\n    }\r\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\r\n    if (!refinement) return [];\r\n    var separator = this._getHierarchicalFacetSeparator(\r\n      this.getHierarchicalFacetByName(facetName)\r\n    );\r\n    var path = refinement.split(separator);\r\n    return map(path, trim);\r\n  }","code-length":155,"reference":"Get the current breadcrumb for a hierarchical facet, as an array\n","result":"Get the breadcrumb of a facet.","score":[0.1411,0.3006]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runCommand(cmd, args) {\r\n  var prev = null;\r\n  console.log(chalk.cyanBright(cmd) + \" \" + args.map(arg => {\r\n    if (arg.startsWith(\"-\"))\r\n      return chalk.gray(\"\\\\\") + \"\\n \" + chalk.bold(arg);\r\n    return arg;\r\n  }).join(\" \") + \"\\n\");\r\n  var proc = child_process.spawnSync(cmd, args, { stdio: \"inherit\" });\r\n  if (proc.error)\r\n    throw proc.error;\r\n  if (proc.status !== 0)\r\n    throw Error(\"exited with \" + proc.status);\r\n  return proc;\r\n}","code-length":181,"reference":"Runs a command using the specified arguments.","result":"Run a command .","score":[0.2134,0.4395]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileIntrinsics() {\r\n  var target = path.join(sourceDirectory, \"passes\", \"WasmIntrinsics.cpp\");\r\n  runCommand(\"python\", [\r\n    path.join(binaryenDirectory, \"scripts\", \"embedwast.py\"),\r\n    path.join(sourceDirectory, \"passes\", \"wasm-intrinsics.wast\"),\r\n    target\r\n  ]);\r\n  sourceFiles.push(target);\r\n}","code-length":121,"reference":"Compiles embedded intrinsics used by the targets below.","result":"Compile intrinsics.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileShared() {\r\n  runCommand(\"python\", [\r\n    path.join(emscriptenDirectory, \"em++\")\r\n  ].concat(sourceFiles).concat(commonOptions).concat([\r\n    \"-o\", \"shared.bc\"\r\n  ]));\r\n}","code-length":74,"reference":"Compiles shared bitcode used to build the targets below.","result":"Compile shared.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileJs(options) {\r\n  runCommand(\"python\", [\r\n    path.join(emscriptenDirectory, \"em++\"),\r\n    \"shared.bc\"\r\n  ].concat(commonOptions).concat([\r\n    \"--post-js\", options.post,\r\n    \"--closure\", \"1\",\r\n    \"-s\", \"WASM=0\",\r\n    \"-s\", \"EXPORTED_FUNCTIONS=[\" + exportedFunctionsArg + \"]\",\r\n    \"-s\", \"ALLOW_MEMORY_GROWTH=1\",\r\n    \"-s\", \"ELIMINATE_DUPLICATE_FUNCTIONS=1\",\r\n    \"-s\", \"MODULARIZE_INSTANCE=1\",\r\n    \"-s\", \"EXPORT_NAME=\\\"Binaryen\\\"\",\r\n    \"-o\", options.out,\r\n    \"-Oz\"\r\n  ]));\r\n}","code-length":207,"reference":"Compiles the JavaScript target.","result":"Compile emscripten js.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileWasm(options) {\r\n  run(\"python\", [\r\n    path.join(emscriptenDirectory, \"em++\"),\r\n    \"shared.bc\"\r\n  ].concat(commonOptions).concat([\r\n    \"--post-js\", options.post,\r\n    \"--closure\", \"1\",\r\n    \"-s\", \"EXPORTED_FUNCTIONS=[\" + exportedFunctionsArg + \"]\",\r\n    \"-s\", \"ALLOW_MEMORY_GROWTH=1\",\r\n    \"-s\", \"BINARYEN=1\",\r\n    \"-s\", \"BINARYEN_METHOD=\\\"native-wasm\\\"\",\r\n    \"-s\", \"MODULARIZE_INSTANCE=1\",\r\n    \"-s\", \"EXPORT_NAME=\\\"Binaryen\\\"\",\r\n    \"-o\", options.out,\r\n    \"-Oz\"\r\n  ]));\r\n}","code-length":206,"reference":"Compiles the WebAssembly target.","result":"Compile the wasm .","score":[0.3195,0.4688]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pluginState () {\r\n    return {\r\n        _sync: {\r\n            signedIn: false,\r\n            userId: null,\r\n            unsubscribe: {},\r\n            pathVariables: {},\r\n            patching: false,\r\n            syncStack: {\r\n                inserts: [],\r\n                updates: {},\r\n                propDeletions: {},\r\n                deletions: [],\r\n                debounceTimer: null,\r\n            },\r\n            fetched: {},\r\n            stopPatchingTimeout: null\r\n        }\r\n    };\r\n}","code-length":137,"reference":"a function returning the state object\n\n","result":"Store state.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction helpers(originVal, newVal) {\r\n                    if (isArray(originVal) && isArrayHelper(newVal)) {\r\n                        newVal = newVal.executeOn(originVal);\r\n                    }\r\n                    if (isNumber(originVal) && isIncrementHelper(newVal)) {\r\n                        newVal = newVal.executeOn(originVal);\r\n                    }\r\n                    return newVal;\r\n                }","code-length":101,"reference":"Merge if exists","result":"Create a new object with the helpers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeBatchFromSyncstack(state, getters, Firebase, batchMaxCount) {\r\n    if (batchMaxCount === void 0) { batchMaxCount = 500; }\r\n    var firestorePath = state._conf.firestorePath;\r\n    var firestorePathComplete = getters.firestorePathComplete;\r\n    var dbRef = getters.dbRef;\r\n    var collectionMode = getters.collectionMode;\r\n    var batch = Firebase.firestore().batch();\r\n    var log = {};\r\n    var count = 0;\r\n    var updates = grabUntilApiLimit('updates', count, batchMaxCount, state);\r\n    log['updates: '] = updates;\r\n    count = count + updates.length;\r\n    updates.forEach(function (item) {\r\n        var id = item.id;\r\n        var docRef = (collectionMode) ? dbRef.doc(id) : dbRef;\r\n        if (state._conf.sync.guard.includes('id'))\r\n            delete item.id;\r\n        batch.update(docRef, item);\r\n    });\r\n    var propDeletions = grabUntilApiLimit('propDeletions', count, batchMaxCount, state);\r\n    log['prop deletions: '] = propDeletions;\r\n    count = count + propDeletions.length;\r\n    propDeletions.forEach(function (item) {\r\n        var id = item.id;\r\n        var docRef = (collectionMode) ? dbRef.doc(id) : dbRef;\r\n        if (state._conf.sync.guard.includes('id'))\r\n            delete item.id;\r\n        batch.update(docRef, item);\r\n    });\r\n    var deletions = grabUntilApiLimit('deletions', count, batchMaxCount, state);\r\n    log['deletions: '] = deletions;\r\n    count = count + deletions.length;\r\n    deletions.forEach(function (id) {\r\n        var docRef = dbRef.doc(id);\r\n        batch.delete(docRef);\r\n    });\r\n    var inserts = grabUntilApiLimit('inserts', count, batchMaxCount, state);\r\n    log['inserts: '] = inserts;\r\n    count = count + inserts.length;\r\n    inserts.forEach(function (item) {\r\n        var newRef = dbRef.doc(item.id);\r\n        batch.set(newRef, item);\r\n    });\r\n    if (state._conf.logging) {\r\n        console.group('[vuex-easy-firestore] api call batch:');\r\n        console.log(\"%cFirestore PATH: \" + firestorePathComplete + \" [\" + firestorePath + \"]\", 'color: grey');\r\n        Object.keys(log).forEach(function (key) {\r\n            console.log(key, log[key]);\r\n        });\r\n        console.groupEnd();\r\n    }\r\n    return batch;\r\n}","code-length":705,"reference":"Create a Firebase batch from a syncStack to be passed inside the state param.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction iniModule (userConfig, FirebaseDependency) {\r\n    var conf = copy(merge({ state: {}, mutations: {}, actions: {}, getters: {} }, defaultConfig, userConfig));\r\n    if (!errorCheck(conf))\r\n        return;\r\n    var userState = conf.state;\r\n    var userMutations = conf.mutations;\r\n    var userActions = conf.actions;\r\n    var userGetters = conf.getters;\r\n    delete conf.state;\r\n    delete conf.mutations;\r\n    delete conf.actions;\r\n    delete conf.getters;\r\n    var docContainer = {};\r\n    if (conf.statePropName)\r\n        docContainer[conf.statePropName] = {};\r\n    var restOfState = merge(userState, docContainer);\r\n    if (conf.firestoreRefType === 'doc') {\r\n        var defaultValsInState = (conf.statePropName)\r\n            ? restOfState[conf.statePropName]\r\n            : restOfState;\r\n        conf.sync.defaultValues = copy(merge(defaultValsInState, conf.sync.defaultValues));\r\n    }\r\n    return {\r\n        namespaced: true,\r\n        state: merge(pluginState(), restOfState, { _conf: conf }),\r\n        mutations: merge(userMutations, pluginMutations(merge(userState, { _conf: conf }))),\r\n        actions: merge(userActions, pluginActions(FirebaseDependency)),\r\n        getters: merge(userGetters, pluginGetters(FirebaseDependency))\r\n    };\r\n}","code-length":380,"reference":"A function that returns a vuex module object with seamless 2-way sync for firestore.\n\n","result":"Create the module .","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setDefaultValues (obj, defaultValues) {\r\n    if (!isWhat.isPlainObject(defaultValues))\r\n        console.error('[vuex-easy-firestore] Trying to merge target:', obj, 'onto a non-object (defaultValues):', defaultValues);\r\n    if (!isWhat.isPlainObject(obj))\r\n        console.error('[vuex-easy-firestore] Trying to merge a non-object:', obj, 'onto the defaultValues:', defaultValues);\r\n    var result = merge({ extensions: [convertTimestamps] }, defaultValues, obj);\r\n    return findAndReplaceAnything.findAndReplace(result, '%convertTimestamp%', null, { onlyPlainObjects: true });\r\n}","code-length":179,"reference":"Merge an object onto defaultValues\n\n","result":"Set default values.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getId(payloadPiece, conf, path, fullPayload) {\r\n    if (isWhat.isString(payloadPiece))\r\n        return payloadPiece;\r\n    if (isWhat.isPlainObject(payloadPiece)) {\r\n        if ('id' in payloadPiece)\r\n            return payloadPiece.id;\r\n        var keys = Object.keys(payloadPiece);\r\n        if (keys.length === 1)\r\n            return keys[0];\r\n    }\r\n    return '';\r\n}","code-length":124,"reference":"gets an ID from a single piece of payload.\n\n","result":"Identify the payloadPiece.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction vuexEasyFirestore(easyFirestoreModule, _a) {\r\n    var _b = _a === void 0 ? {\r\n        logging: false,\r\n        preventInitialDocInsertion: false,\r\n        FirebaseDependency: Firebase$2\r\n    } : _a, _c = _b.logging, logging = _c === void 0 ? false : _c, _d = _b.preventInitialDocInsertion, preventInitialDocInsertion = _d === void 0 ? false : _d, _e = _b.FirebaseDependency, FirebaseDependency = _e === void 0 ? Firebase$2 : _e;\r\n    if (FirebaseDependency) {\r\n        setFirebaseDependency(FirebaseDependency);\r\n        setFirebaseDependency$1(FirebaseDependency);\r\n    }\r\n    return function (store) {\r\n        if (!isWhat.isArray(easyFirestoreModule))\r\n            easyFirestoreModule = [easyFirestoreModule];\r\n        easyFirestoreModule.forEach(function (config) {\r\n            config.logging = logging;\r\n            if (config.sync && config.sync.preventInitialDocInsertion === undefined) {\r\n                config.sync.preventInitialDocInsertion = preventInitialDocInsertion;\r\n            }\r\n            var moduleName = vuexEasyAccess.getKeysFromPath(config.moduleName);\r\n            store.registerModule(moduleName, iniModule(config, FirebaseDependency));\r\n        });\r\n    };\r\n}","code-length":356,"reference":"Firebase \nCreate vuex-easy-firestore modules. Add as single plugin to Vuex Store.\n\n","result":"Register modules in the store.","score":[0,0.0481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseCSV(csvFilePath, attributeFields) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      csv(csvFilePath, data => resolve(_transformToHierarchy(data, attributeFields)));\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n}","code-length":87,"reference":"parseCSV - Parses a CSV file into a hierarchy structure.\n\n","result":"Parse csv files.","score":[0,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseJSON(jsonFilePath) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      json(jsonFilePath, data => resolve([data]));\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n}","code-length":77,"reference":"parseJSON - Parses a hierarchical JSON file that requires no further transformation.\n\n","result":"Parse a JSON file.","score":[0.0514,0.2282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseFlatJSON(jsonFilePath, attributeFields) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      json(jsonFilePath, data => resolve(_transformToHierarchy(data, attributeFields)));\r\n    } catch (err) {\r\n      reject(err);\r\n    }\r\n  });\r\n}","code-length":88,"reference":"parseFlatJSON - Parses a flat JSON file into a hierarchy structure.\n\n","result":"Parse a flat JSON file.","score":[0.1491,0.3035]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\r\n  if (true) {\r\n    for (var typeSpecName in typeSpecs) {\r\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\r\n        var error;\r\n        try {\r\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\r\n            var err = Error(\r\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\r\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\r\n            );\r\n            err.name = 'Invariant Violation';\r\n            throw err;\r\n          }\r\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\r\n        } catch (ex) {\r\n          error = ex;\r\n        }\r\n        if (error && !(error instanceof Error)) {\r\n          printWarning(\r\n            (componentName || 'React class') + ': type specification of ' +\r\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\r\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\r\n            'You may have forgotten to pass an argument to the type checker ' +\r\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\r\n            'shape all require an argument).'\r\n          )\r\n        }\r\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\r\n          loggedTypeFailures[error.message] = true;\r\n          var stack = getStack ? getStack() : '';\r\n          printWarning(\r\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","code-length":490,"reference":"Assert that the values match with the type specs.\nError messages are memorized and will only be shown once.\n\n","result":"Check the prop types.","score":[0.0075,0.0571]}
{"code":"\/*is used to<extra_id_0>\r\nfunction invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\r\n  hasError = false;\r\n  caughtError = null;\r\n  invokeGuardedCallbackImpl$1.apply(reporter, arguments);\r\n}","code-length":70,"reference":"Call a function while guarding against errors that happens within it.\nReturns an error if it throws, otherwise null.\n\nIn production, this is implemented using a try-catch. The reason we don't\nuse a try-catch directly is so that we can swap out a different\nimplementation in DEV mode.\n\n","result":"Invoke callback functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getClosestInstanceFromNode(node) {\r\n  if (node[internalInstanceKey]) {\r\n    return node[internalInstanceKey];\r\n  }\r\n  while (!node[internalInstanceKey]) {\r\n    if (node.parentNode) {\r\n      node = node.parentNode;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  var inst = node[internalInstanceKey];\r\n  if (inst.tag === HostComponent || inst.tag === HostText) {\r\n    return inst;\r\n  }\r\n  return null;\r\n}","code-length":149,"reference":"Given a DOM node, return the closest ReactDOMComponent or","result":"Detect the closest instance of a node in the tree.","score":[0.1699,0.1648]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getInstanceFromNode$1(node) {\r\n  var inst = node[internalInstanceKey];\r\n  if (inst) {\r\n    if (inst.tag === HostComponent || inst.tag === HostText) {\r\n      return inst;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n}","code-length":93,"reference":"Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponentinstance, or null if the node was not rendered by this React.","result":"Create a new instance.","score":[0.0059,0.0272]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNodeFromInstance$1(inst) {\r\n  if (inst.tag === HostComponent || inst.tag === HostText) {\r\n    return inst.stateNode;\r\n  }\r\n  invariant(false, 'getNodeFromInstance: Invalid argument.');\r\n}","code-length":72,"reference":"Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding","result":"Get the node from an instance.","score":[0.1383,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction traverseEnterLeave(from, to, fn, argFrom, argTo) {\r\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;\r\n  var pathFrom = [];\r\n  while (true) {\r\n    if (!from) {\r\n      break;\r\n    }\r\n    if (from === common) {\r\n      break;\r\n    }\r\n    var alternate = from.alternate;\r\n    if (alternate !== null && alternate === common) {\r\n      break;\r\n    }\r\n    pathFrom.push(from);\r\n    from = getParent(from);\r\n  }\r\n  var pathTo = [];\r\n  while (true) {\r\n    if (!to) {\r\n      break;\r\n    }\r\n    if (to === common) {\r\n      break;\r\n    }\r\n    var _alternate = to.alternate;\r\n    if (_alternate !== null && _alternate === common) {\r\n      break;\r\n    }\r\n    pathTo.push(to);\r\n    to = getParent(to);\r\n  }\r\n  for (var i = 0; i < pathFrom.length; i++) {\r\n    fn(pathFrom[i], 'bubbled', argFrom);\r\n  }\r\n  for (var _i = pathTo.length; _i-- > 0;) {\r\n    fn(pathTo[_i], 'captured', argTo);\r\n  }\r\n}","code-length":363,"reference":"Traverses the ID hierarchy and invokes the supplied `cb` on any IDs thatshould would receive a `mouseEnter` or `mouseLeave` event.","result":"Leave events in the tree.","score":[0.012,0.027]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makePrefixMap(styleProp, eventName) {\r\n  var prefixes = {};\r\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\r\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\r\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\r\n  return prefixes;\r\n}","code-length":94,"reference":"Generate a mapping of standard vendor prefixes using the defined style property and event name.\n\n","result":"Create the prefix map.","score":[0.0204,0.0719]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    var Interface = this.constructor.Interface;\r\n    for (var propName in Interface) {\r\n      {\r\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));\r\n      }\r\n    }\r\n    this.dispatchConfig = null;\r\n    this._targetInst = null;\r\n    this.nativeEvent = null;\r\n    this.isDefaultPrevented = functionThatReturnsFalse;\r\n    this.isPropagationStopped = functionThatReturnsFalse;\r\n    this._dispatchListeners = null;\r\n    this._dispatchInstances = null;\r\n    {\r\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));\r\n      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));\r\n      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));\r\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));\r\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));\r\n    }\r\n  }","code-length":306,"reference":"`PooledClass` looks for `destructor` on each instance it releases.","result":"Avoid a circular dependency.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getCompositionEventType(topLevelType) {\r\n  switch (topLevelType) {\r\n    case TOP_COMPOSITION_START:\r\n      return eventTypes.compositionStart;\r\n    case TOP_COMPOSITION_END:\r\n      return eventTypes.compositionEnd;\r\n    case TOP_COMPOSITION_UPDATE:\r\n      return eventTypes.compositionUpdate;\r\n  }\r\n}","code-length":99,"reference":"Translate native top level events into event types.\n\n","result":"Return the composition event type.","score":[0.1319,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\r\n  switch (topLevelType) {\r\n    case TOP_KEY_UP:\r\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\r\n    case TOP_KEY_DOWN:\r\n      return nativeEvent.keyCode !== START_KEYCODE;\r\n    case TOP_KEY_PRESS:\r\n    case TOP_MOUSE_DOWN:\r\n    case TOP_BLUR:\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}","code-length":143,"reference":"Does our fallback mode think that this event is the end of composition?\n\n","result":"Detect fallback composition end.","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getValueForProperty(node, name, expected, propertyInfo) {\r\n  {\r\n    if (propertyInfo.mustUseProperty) {\r\n      var propertyName = propertyInfo.propertyName;\r\n      return node[propertyName];\r\n    } else {\r\n      var attributeName = propertyInfo.attributeName;\r\n      var stringValue = null;\r\n      if (propertyInfo.type === OVERLOADED_BOOLEAN) {\r\n        if (node.hasAttribute(attributeName)) {\r\n          var value = node.getAttribute(attributeName);\r\n          if (value === '') {\r\n            return true;\r\n          }\r\n          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\r\n            return value;\r\n          }\r\n          if (value === '' + expected) {\r\n            return expected;\r\n          }\r\n          return value;\r\n        }\r\n      } else if (node.hasAttribute(attributeName)) {\r\n        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\r\n          return node.getAttribute(attributeName);\r\n        }\r\n        if (propertyInfo.type === BOOLEAN) {\r\n          return expected;\r\n        }\r\n        stringValue = node.getAttribute(attributeName);\r\n      }\r\n      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {\r\n        return stringValue === null ? expected : stringValue;\r\n      } else if (stringValue === '' + expected) {\r\n        return expected;\r\n      } else {\r\n        return stringValue;\r\n      }\r\n    }\r\n  }\r\n}","code-length":382,"reference":"Get the value for a property on a node.","result":"Detect if a node has a property with the same name as the expected property.","score":[0.1182,0.2083]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTargetInstForInputEventPolyfill(topLevelType, targetInst) {\r\n  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {\r\n    return getInstIfValueChanged(activeElementInst);\r\n  }\r\n}","code-length":82,"reference":"For IE8 and IE9.","result":"Polyfill targetInst for input event.","score":[0,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\r\n    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;\r\n    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;\r\n    if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\r\n      return null;\r\n    }\r\n    if (!isOutEvent && !isOverEvent) {\r\n      return null;\r\n    }\r\n    var win = void 0;\r\n    if (nativeEventTarget.window === nativeEventTarget) {\r\n      win = nativeEventTarget;\r\n    } else {\r\n      var doc = nativeEventTarget.ownerDocument;\r\n      if (doc) {\r\n        win = doc.defaultView || doc.parentWindow;\r\n      } else {\r\n        win = window;\r\n      }\r\n    }\r\n    var from = void 0;\r\n    var to = void 0;\r\n    if (isOutEvent) {\r\n      from = targetInst;\r\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\r\n      to = related ? getClosestInstanceFromNode(related) : null;\r\n    } else {\r\n      from = null;\r\n      to = targetInst;\r\n    }\r\n    if (from === to) {\r\n      return null;\r\n    }\r\n    var eventInterface = void 0,\r\n        leaveEventType = void 0,\r\n        enterEventType = void 0,\r\n        eventTypePrefix = void 0;\r\n    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {\r\n      eventInterface = SyntheticMouseEvent;\r\n      leaveEventType = eventTypes$2.mouseLeave;\r\n      enterEventType = eventTypes$2.mouseEnter;\r\n      eventTypePrefix = 'mouse';\r\n    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {\r\n      eventInterface = SyntheticPointerEvent;\r\n      leaveEventType = eventTypes$2.pointerLeave;\r\n      enterEventType = eventTypes$2.pointerEnter;\r\n      eventTypePrefix = 'pointer';\r\n    }\r\n    var fromNode = from == null ? win : getNodeFromInstance$1(from);\r\n    var toNode = to == null ? win : getNodeFromInstance$1(to);\r\n    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);\r\n    leave.type = eventTypePrefix + 'leave';\r\n    leave.target = fromNode;\r\n    leave.relatedTarget = toNode;\r\n    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);\r\n    enter.type = eventTypePrefix + 'enter';\r\n    enter.target = toNode;\r\n    enter.relatedTarget = fromNode;\r\n    accumulateEnterLeaveDispatches(leave, enter, from, to);\r\n    return [leave, enter];\r\n  }","code-length":737,"reference":"`mouseover` and `mouseout` event that occurs.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction listenTo(registrationName, mountAt) {\r\n  var isListening = getListeningForDocument(mountAt);\r\n  var dependencies = registrationNameDependencies[registrationName];\r\n  for (var i = 0; i < dependencies.length; i++) {\r\n    var dependency = dependencies[i];\r\n    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\r\n      switch (dependency) {\r\n        case TOP_SCROLL:\r\n          trapCapturedEvent(TOP_SCROLL, mountAt);\r\n          break;\r\n        case TOP_FOCUS:\r\n        case TOP_BLUR:\r\n          trapCapturedEvent(TOP_FOCUS, mountAt);\r\n          trapCapturedEvent(TOP_BLUR, mountAt);\r\n          isListening[TOP_BLUR] = true;\r\n          isListening[TOP_FOCUS] = true;\r\n          break;\r\n        case TOP_CANCEL:\r\n        case TOP_CLOSE:\r\n          if (isEventSupported(getRawEventName(dependency))) {\r\n            trapCapturedEvent(dependency, mountAt);\r\n          }\r\n          break;\r\n        case TOP_INVALID:\r\n        case TOP_SUBMIT:\r\n        case TOP_RESET:\r\n          break;\r\n        default:\r\n          var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;\r\n          if (!isMediaEvent) {\r\n            trapBubbledEvent(dependency, mountAt);\r\n          }\r\n          break;\r\n      }\r\n      isListening[dependency] = true;\r\n    }\r\n  }\r\n}","code-length":391,"reference":"We listen for bubbled touch events on the document object.\n\nFirefox v8.01 (and possibly others) exhibited strange behavior when\nmounting `onmousemove` events at some node that was not the document\nelement. The symptoms were that if your mouse is not moving over something\ncontained within that mount point (for example on the background) the\ntop-level listeners for `onmousemove` won't be called. However, if you\nregister the `mousemove` on the document object, then it will of course\ncatch all `mousemove`s. This along with iOS quirks, justifies restricting\ntop-level listeners to the document object only, at least for these\nmovement types of events and possibly all events.\n\n","result":"Listen to specific events on the document.","score":[0.0,0.0263]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEventTargetDocument(eventTarget) {\r\n  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;\r\n}","code-length":57,"reference":"Get document associated with the event target.\n\n","result":"Detect the document of an event target.","score":[0.2716,0.4509]}
{"code":"\/*is used to<extra_id_0>\r\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\r\n  var doc = getEventTargetDocument(nativeEventTarget);\r\n  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {\r\n    return null;\r\n  }\r\n  var currentSelection = getSelection(activeElement$1);\r\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\r\n    lastSelection = currentSelection;\r\n    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);\r\n    syntheticEvent.type = 'select';\r\n    syntheticEvent.target = activeElement$1;\r\n    accumulateTwoPhaseDispatches(syntheticEvent);\r\n    return syntheticEvent;\r\n  }\r\n  return null;\r\n}","code-length":207,"reference":"Poll selection to see whether it's changed.\n\n","result":"Construct the select event for the active element.","score":[0,0.0704]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (node, text) {\r\n  if (text) {\r\n    var firstChild = node.firstChild;\r\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {\r\n      firstChild.nodeValue = text;\r\n      return;\r\n    }\r\n  }\r\n  node.textContent = text;\r\n}","code-length":96,"reference":"Set the textContent property of a node. For text updates, it's faster\nto set the `nodeValue` of the Text node directly instead of using\n`.textContent` which will remove the existing node and create a new one.\n\n","result":"Replace text nodes.","score":[0.0,0.0153]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createDangerousStringForStyles(styles) {\r\n  {\r\n    var serialized = '';\r\n    var delimiter = '';\r\n    for (var styleName in styles) {\r\n      if (!styles.hasOwnProperty(styleName)) {\r\n        continue;\r\n      }\r\n      var styleValue = styles[styleName];\r\n      if (styleValue != null) {\r\n        var isCustomProperty = styleName.indexOf('--') === 0;\r\n        serialized += delimiter + hyphenateStyleName(styleName) + ':';\r\n        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);\r\n        delimiter = ';';\r\n      }\r\n    }\r\n    return serialized || null;\r\n  }\r\n}","code-length":181,"reference":"Operations for dealing with CSS properties.","result":"Create a dangerous string for styles.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (containerChildSet, workInProgress) {\r\n    var node = workInProgress.child;\r\n    while (node !== null) {\r\n      if (node.tag === HostComponent || node.tag === HostText) {\r\n        appendChildToContainerChildSet(containerChildSet, node.stateNode);\r\n      } else if (node.tag === HostPortal) {\r\n      } else if (node.child !== null) {\r\n        node.child.return = node;\r\n        node = node.child;\r\n        continue;\r\n      }\r\n      if (node === workInProgress) {\r\n        return;\r\n      }\r\n      while (node.sibling === null) {\r\n        if (node.return === null || node.return === workInProgress) {\r\n          return;\r\n        }\r\n        node = node.return;\r\n      }\r\n      node.sibling.return = node.return;\r\n      node = node.sibling;\r\n    }\r\n  }","code-length":239,"reference":"Persistent host tree mode An unfortunate fork of appendAllChildren because we have two different parent types.","result":"Build the containerChildSet .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction safelyCallComponentWillUnmount(current$$1, instance) {\r\n  {\r\n    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);\r\n    if (hasCaughtError()) {\r\n      var unmountError = clearCaughtError();\r\n      captureCommitPhaseError(current$$1, unmountError);\r\n    }\r\n  }\r\n}","code-length":101,"reference":"Capture errors so they don't interrupt unmounting.","result":"Call safelyCallComponentWillUnmountWithTimer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction computeUniqueAsyncExpiration() {\r\n  var currentTime = requestCurrentTime();\r\n  var result = computeAsyncExpiration(currentTime);\r\n  if (result <= lastUniqueAsyncExpiration) {\r\n    result = lastUniqueAsyncExpiration + 1;\r\n  }\r\n  lastUniqueAsyncExpiration = result;\r\n  return lastUniqueAsyncExpiration;\r\n}","code-length":90,"reference":"Creates a unique async expiration time.","result":"Compute unique async expiration.","score":[0.274,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stringify(content) {\r\n  if (typeof content === 'string' && stringifiedRegexp.test(content)) {\r\n    return content;\r\n  }\r\n  return JSON.stringify(content, null, 2);\r\n}","code-length":63,"reference":"If already stringified - return original content\n","result":"Create a new function to stringify content.","score":[0,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getLoaderOptions(loaderPath, rule) {\r\n  let multiRuleProp;\r\n  if (isWebpack1) {\r\n    multiRuleProp = 'loaders';\r\n  } else if (rule.oneOf) {\r\n    multiRuleProp = 'oneOf';\r\n  } else {\r\n    multiRuleProp = 'use';\r\n  }\r\n  const multiRule = typeof rule === 'object' && Array.isArray(rule[multiRuleProp]) ? rule[multiRuleProp] : null;\r\n  let options;\r\n  if (multiRule) {\r\n    const rules = [].concat(...multiRule.map(r => (r.use || r)));\r\n    options = rules.map(normalizeRule).find(r => loaderPath.includes(r.loader)).options;\r\n  } else {\r\n    options = normalizeRule(rule).options;\r\n  }\r\n  return options;\r\n}","code-length":228,"reference":"webpack 1 compat loader options finder. Returns normalized options.\n","result":"Get loader options.","score":[0.0657,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeRule(rule) {\r\n  if (!rule) {\r\n    throw new Error('Rule should be string or object');\r\n  }\r\n  let data;\r\n  if (typeof rule === 'string') {\r\n    const parts = rule.split('?');\r\n    data = {\r\n      loader: parts[0],\r\n      options: parts[1] ? parseQuery(`?${parts[1]}`) : null\r\n    };\r\n  } else {\r\n    const options = isWebpack1 ? rule.query : rule.options;\r\n    data = {\r\n      loader: rule.loader,\r\n      options: options || null\r\n    };\r\n  }\r\n  return data;\r\n}","code-length":182,"reference":"webpack 1 compat rule normalizer\n","result":"Normalize the rule.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findParent(node, handle) {\r\n  let current = node\r\n  while (current) {\r\n    if (handle(current)) {\r\n      return current\r\n    }\r\n    current = current.parent\r\n  }\r\n}","code-length":67,"reference":"start from node self","result":"Find the parent of a node.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pure(node, withChildren, after) {\r\n      var _this2 = this;\r\n      var t = assign$1({}, node);\r\n      delete t._id;\r\n      delete t.parent;\r\n      delete t.children;\r\n      delete t.open;\r\n      delete t.active;\r\n      delete t.style;\r\n      delete t.class;\r\n      delete t.innerStyle;\r\n      delete t.innerClass;\r\n      delete t.innerBackStyle;\r\n      delete t.innerBackClass;\r\n      var _arr = keys$1(t);\r\n      for (var _i = 0; _i < _arr.length; _i++) {\r\n        var key = _arr[_i];\r\n        if (key[0] === '_') {\r\n          delete t[key];\r\n        }\r\n      }\r\n      if (withChildren && node.children) {\r\n        t.children = node.children.slice();\r\n        t.children.forEach(function (v, k) {\r\n          t.children[k] = _this2.pure(v, withChildren);\r\n        });\r\n      }\r\n      if (after) {\r\n        return after(t, node) || t;\r\n      }\r\n      return t;\r\n    }","code-length":322,"reference":"pure node self","result":"Create a pure node .","score":[0.3398,0.5859]}
{"code":"\/*is used to<extra_id_0>\r\nfunction offset2() {\r\n      return {\r\n        x: this.offset.x + this.nodeInnerEl.offsetWidth,\r\n        y: this.offset.y + this.nodeInnerEl.offsetHeight\r\n      };\r\n    }","code-length":67,"reference":"left top point","result":"Calculate the offset.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction offsetToViewPort() {\r\n      var r = this.nodeInnerEl.getBoundingClientRect();\r\n      r.x = r.left;\r\n      r.y = r.top;\r\n      return r;\r\n    }","code-length":64,"reference":"right bottom point","result":"Offset node to view port.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction currentTreeRootSecondChildExcludingDragging() {\r\n      var _this = this;\r\n      return this.currentTree.rootData.children.slice(0, 3).filter(function (v) {\r\n        return v !== _this.node;\r\n      })[1];\r\n    }","code-length":79,"reference":"the second child of currentTree root, excluding dragging node","result":"Determine the current tree rootSecondChildExcludingDragging.","score":[0.108,0.0581]}
{"code":"\/*is used to<extra_id_0>\r\nfunction appendPrev(info) {\r\n    if (isNodeDroppable(info.targetPrev)) {\r\n      th.appendTo(info.dplh, info.targetPrev);\r\n      if (!info.targetPrev.open) info.store.toggleOpen(info.targetPrev);\r\n    } else {\r\n      insertDplhAfterTo(info.dplh, info.targetPrev, info);\r\n    }\r\n  }","code-length":112,"reference":"append to prev sibling","result":"Append previous nodes.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction appendCurrentTree(info) {\r\n    if (isNodeDroppable(info.currentTree.rootData)) {\r\n      th.appendTo(info.dplh, info.currentTree.rootData);\r\n    }\r\n  }","code-length":66,"reference":"append to current tree","result":"Append current tree to the dplh.","score":[0.3021,0.7515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stripViewFromSelector (selector) {\r\npeTextView',\r\n      'XCUIElementTypeWebView',\r\n    ].includes(selector);\r\n    if (!keepView && selector.indexOf('View') === selector.length - 4) {\r\n      return selector.substr(0, selector.length - 4);\r\n    } else {\r\n      return selector;\r\n    }\r\n  }","code-length":102,"reference":"Check if the word 'View' is appended to selector and if it is, strip it out","result":"Remove view from selector.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getPidUsingPattern (pgrepPattern) {\r\n  const args = ['-nif', pgrepPattern];\r\n  try {\r\n    const {stdout} = await exec('pgrep', args);\r\n    const pid = parseInt(stdout, 10);\r\n    if (isNaN(pid)) {\r\n      log.debug(`Cannot parse process id from 'pgrep ${args.join(' ')}' output: ${stdout}`);\r\n      return null;\r\n    }\r\n    return `${pid}`;\r\n  } catch (err) {\r\n    log.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);\r\n    return null;\r\n  }\r\n}","code-length":183,"reference":"Get the process id of the most recent running application\nhaving the particular command line pattern.\n\n","result":"Detect the process id using a pattern.","score":[0.0988,0.209]}
{"code":"\/*is used to<extra_id_0>\r\nasync function killAppUsingPattern (pgrepPattern) {\r\n  for (const signal of [2, 15, 9]) {\r\n    if (!await getPidUsingPattern(pgrepPattern)) {\r\n      return;\r\n    }\r\n    const args = [`-${signal}`, '-if', pgrepPattern];\r\n    try {\r\n      await exec('pkill', args);\r\n    } catch (err) {\r\n      log.debug(`pkill ${args.join(' ')} -> ${err.message}`);\r\n    }\r\n    await B.delay(100);\r\n  }\r\n}","code-length":152,"reference":"Kill a process having the particular command line pattern.\nThis method tries to send SIGINT, SIGTERM and SIGKILL to the\nmatched processes in this order if the process is still running.\n\n","result":"Kill app using pattern.","score":[0.0004,0.0353]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getPIDsListeningOnPort (port, filteringFunc = null) {\r\n  const result = [];\r\n  try {\r\n    const {stdout} = await exec('lsof', ['-ti', `tcp:${port}`]);\r\n    result.push(...(stdout.trim().split(\/\\n+\/)));\r\n  } catch (e) {\r\n    return result;\r\n  }\r\n  if (!_.isFunction(filteringFunc)) {\r\n    return result;\r\n  }\r\n  return await B.filter(result, async (x) => {\r\n    const {stdout} = await exec('ps', ['-p', x, '-o', 'command']);\r\n    return await filteringFunc(stdout);\r\n  });\r\n}","code-length":185,"reference":"Get the IDs of processes listening on the particular system port.\nIt is also possible to apply additional filtering based on the\nprocess command line.\n\n","result":"Filter the output of the command .","score":[0.0175,0.1078]}
{"code":"\/*is used to<extra_id_0>\r\nasync function removeAllSessionWebSocketHandlers (server, sessionId) {\r\n  if (!server || !_.isFunction(server.getWebSocketHandlers)) {\r\n    return;\r\n  }\r\n  const activeHandlers = await server.getWebSocketHandlers(sessionId);\r\n  for (const pathname of _.keys(activeHandlers)) {\r\n    await server.removeWebSocketHandler(pathname);\r\n  }\r\n}","code-length":100,"reference":"Stops and removes all web socket handlers that are listening\nin scope of the currect session.\n\n","result":"Remove all sessionWebSocketHandlers.","score":[0.0054,0.1276]}
{"code":"\/*is used to<extra_id_0>\r\nasync function verifyApplicationPlatform (app, isSimulator) {\r\n  log.debug('Verifying application platform');\r\n  const infoPlist = path.resolve(app, 'Info.plist');\r\n  if (!await fs.exists(infoPlist)) {\r\n    log.debug(`'${infoPlist}' does not exist`);\r\n    return null;\r\n  }\r\n  const {CFBundleSupportedPlatforms} = await plist.parsePlistFile(infoPlist);\r\n  log.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(CFBundleSupportedPlatforms)}`);\r\n  if (!_.isArray(CFBundleSupportedPlatforms)) {\r\n    log.debug(`CFBundleSupportedPlatforms key does not exist in '${infoPlist}'`);\r\n    return null;\r\n  }\r\n  const isAppSupported = (isSimulator && CFBundleSupportedPlatforms.includes('iPhoneSimulator'))\r\n    || (!isSimulator && CFBundleSupportedPlatforms.includes('iPhoneOS'));\r\n  if (isAppSupported) {\r\n    return true;\r\n  }\r\n  throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` +\r\n                  `Make sure the correct deployment target has been selected for its compilation in Xcode.`);\r\n}","code-length":325,"reference":"Verify whether the given application is compatible to the\nplatform where it is going to be installed and tested.\n\n","result":"Verify application platform .","score":[0.0099,0.0857]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isLocalHost (urlString) {\r\n  try {\r\n    const {hostname} = url.parse(urlString);\r\n    return ['localhost', '127.0.0.1', '::1', '::ffff:127.0.0.1'].includes(hostname);\r\n  } catch {\r\n    log.warn(`'${urlString}' cannot be parsed as a valid URL`);\r\n  }\r\n  return false;\r\n}","code-length":111,"reference":"Returns true if the urlString is localhost\n","result":"Detect if a URL is local host.","score":[0.1921,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizePlatformVersion (originalVersion) {\r\n  const normalizedVersion = util.coerceVersion(originalVersion, false);\r\n  if (!normalizedVersion) {\r\n    throw new Error(`The platform version '${originalVersion}' should be a valid version number`);\r\n  }\r\n  const {major, minor} = new semver.SemVer(normalizedVersion);\r\n  return `${major}.${minor}`;\r\n}","code-length":106,"reference":"Normalizes platformVersion to a valid iOS version string\n\n","result":"Normalize platform version numbers.","score":[0.1175,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nasync function updateProjectFile (agentPath, newBundleId) {\r\n  let projectFilePath = `${agentPath}\/${PROJECT_FILE}`;\r\n  try {\r\n    await fs.copyFile(projectFilePath, `${projectFilePath}.old`);\r\n    await replaceInFile(projectFilePath, new RegExp(WDA_RUNNER_BUNDLE_ID.replace('.', '\\.'), 'g'), newBundleId);\r\n    log.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);\r\n  } catch (err) {\r\n    log.debug(`Error updating project file: ${err.message}`);\r\n    log.warn(`Unable to update project file '${projectFilePath}' with ` +\r\n             `bundle id '${newBundleId}'. WebDriverAgent may not start`);\r\n  }\r\n}","code-length":202,"reference":"Update WebDriverAgentRunner project bundle ID with newBundleId.\nThis method assumes project file is in the correct state.\n","result":"Update the project file in the agent folder.","score":[0.0887,0.277]}
{"code":"\/*is used to<extra_id_0>\r\nasync function resetProjectFile (agentPath) {\r\n  let projectFilePath = `${agentPath}\/${PROJECT_FILE}`;\r\n  try {\r\n    if (!await fs.exists(`${projectFilePath}.old`)) {\r\n      return;\r\n    }\r\n    await fs.mv(`${projectFilePath}.old`, projectFilePath);\r\n    log.debug(`Successfully reset '${projectFilePath}' with bundle id '${WDA_RUNNER_BUNDLE_ID}'`);\r\n  } catch (err) {\r\n    log.debug(`Error resetting project file: ${err.message}`);\r\n    log.warn(`Unable to reset project file '${projectFilePath}' with ` +\r\n             `bundle id '${WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` +\r\n             `modified and not returned to the original state.`);\r\n  }\r\n}","code-length":211,"reference":"Reset WebDriverAgentRunner project bundle ID to correct state.\n","result":"Reset the project file in the agent.","score":[0.1665,0.1266]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getAdditionalRunContent (platformName, wdaRemotePort) {\r\n  const runner = `WebDriverAgentRunner${isTvOS(platformName) ? '_tvOS' : ''}`;\r\n  return {\r\n    [runner]: {\r\n      EnvironmentVariables: {\r\n        USE_PORT: wdaRemotePort\r\n      }\r\n    }\r\n  };\r\n}","code-length":98,"reference":"Return the WDA object which appends existing xctest runner content\n","result":"Run additional tests.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getWDAUpgradeTimestamp (bootstrapPath) {\r\n  const carthageRootPath = path.resolve(bootstrapPath, CARTHAGE_ROOT);\r\n  if (await fs.exists(carthageRootPath)) {\r\n    const {mtime} = await fs.stat(carthageRootPath);\r\n    return mtime.getTime();\r\n  }\r\n  return null;\r\n}","code-length":99,"reference":"Retrieves WDA upgrade timestamp\n\n","result":"Determine the upgrade timestamp.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nasync function parseContainerPath (remotePath, containerRootSupplier) {\r\n  const match = CONTAINER_PATH_PATTERN.exec(remotePath);\r\n  if (!match) {\r\n    log.errorAndThrow(`It is expected that package identifier ` +\r\n      `starts with '${CONTAINER_PATH_MARKER}' and is separated from the ` +\r\n      `relative path with a single slash. '${remotePath}' is given instead`);\r\n  }\r\n  let [, bundleId, relativePath] = match;\r\n  let containerType = null;\r\n  const typeSeparatorPos = bundleId.indexOf(CONTAINER_TYPE_SEPARATOR);\r\n  if (typeSeparatorPos > 0 && typeSeparatorPos < bundleId.length - 1) {\r\n    containerType = bundleId.substring(typeSeparatorPos + 1);\r\n    log.debug(`Parsed container type: ${containerType}`);\r\n    bundleId = bundleId.substring(0, typeSeparatorPos);\r\n  }\r\n  const containerRoot = _.isFunction(containerRootSupplier)\r\n    ? await containerRootSupplier(bundleId, containerType)\r\n    : containerRootSupplier;\r\n  const resultPath = path.posix.resolve(containerRoot, relativePath);\r\n  verifyIsSubPath(resultPath, containerRoot);\r\n  return [bundleId, resultPath];\r\n}","code-length":315,"reference":"Parses the actual path and the bundle identifier from the given path string\n\n","result":"Parse container paths.","score":[0,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nasync function pushFileToSimulator (device, remotePath, base64Data) {\r\n  const buffer = Buffer.from(base64Data, 'base64');\r\n  if (CONTAINER_PATH_PATTERN.test(remotePath)) {\r\n    const [bundleId, dstPath] = await parseContainerPath(remotePath,\r\n      async (appBundle, containerType) => await getAppContainer(device.udid, appBundle, null, containerType));\r\n    log.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` +\r\n      `Will put the data into '${dstPath}'`);\r\n    if (!await fs.exists(path.dirname(dstPath))) {\r\n      log.debug(`The destination folder '${path.dirname(dstPath)}' does not exist. Creating...`);\r\n      await mkdirp(path.dirname(dstPath));\r\n    }\r\n    await fs.writeFile(dstPath, buffer);\r\n    return;\r\n  }\r\n  const dstFolder = await tempDir.openDir();\r\n  const dstPath = path.resolve(dstFolder, path.basename(remotePath));\r\n  try {\r\n    await fs.writeFile(dstPath, buffer);\r\n    await addMedia(device.udid, dstPath);\r\n  } finally {\r\n    await fs.rimraf(dstFolder);\r\n  }\r\n}","code-length":327,"reference":"Save the given base64 data chunk as a binary file on the Simulator under test.\n\n","result":"Push files to the simulator.","score":[0.0325,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nasync function pullFromSimulator (device, remotePath, isFile) {\r\n  let pathOnServer;\r\n  if (CONTAINER_PATH_PATTERN.test(remotePath)) {\r\n    const [bundleId, dstPath] = await parseContainerPath(remotePath,\r\n      async (appBundle, containerType) => await getAppContainer(device.udid, appBundle, null, containerType));\r\n    log.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` +\r\n      `Will get the data from '${dstPath}'`);\r\n    pathOnServer = dstPath;\r\n  } else {\r\n    const simRoot = device.getDir();\r\n    pathOnServer = path.posix.join(simRoot, remotePath);\r\n    verifyIsSubPath(pathOnServer, simRoot);\r\n    log.info(`Got the full item path: ${pathOnServer}`);\r\n  }\r\n  if (!await fs.exists(pathOnServer)) {\r\n    log.errorAndThrow(`The remote ${isFile ? 'file' : 'folder'} at '${pathOnServer}' does not exist`);\r\n  }\r\n  const buffer = isFile\r\n    ? await fs.readFile(pathOnServer)\r\n    : await zip.toInMemoryZip(pathOnServer);\r\n  return Buffer.from(buffer).toString('base64');\r\n}","code-length":329,"reference":"Get the content of given file or folder from iOS Simulator and return it as base-64 encoded string.\nFolder content is recursively packed into a zip archive.\n\n","result":"Return await pullFromSimulator.","score":[0,0.0203]}
{"code":"\/*is used to<extra_id_0>\r\nasync function pullFromRealDevice (device, remotePath, isFile) {\r\n  await verifyIFusePresence();\r\n  const mntRoot = await tempDir.openDir();\r\n  let isUnmountSuccessful = true;\r\n  try {\r\n    let dstPath = path.resolve(mntRoot, remotePath);\r\n    let ifuseArgs = ['-u', device.udid, mntRoot];\r\n    if (CONTAINER_PATH_PATTERN.test(remotePath)) {\r\n      const [bundleId, pathInContainer] = await parseContainerPath(remotePath, mntRoot);\r\n      dstPath = pathInContainer;\r\n      log.info(`Parsed bundle identifier '${bundleId}' from '${remotePath}'. ` +\r\n        `Will get the data from '${dstPath}'`);\r\n      ifuseArgs = ['-u', device.udid, '--container', bundleId, mntRoot];\r\n    } else {\r\n      verifyIsSubPath(dstPath, mntRoot);\r\n    }\r\n    await mountDevice(device, ifuseArgs);\r\n    isUnmountSuccessful = false;\r\n    try {\r\n      if (!await fs.exists(dstPath)) {\r\n        log.errorAndThrow(`The remote ${isFile ? 'file' : 'folder'} at '${dstPath}' does not exist`);\r\n      }\r\n      const buffer = isFile\r\n        ? await fs.readFile(dstPath)\r\n        : await zip.toInMemoryZip(dstPath);\r\n      return Buffer.from(buffer).toString('base64');\r\n    } finally {\r\n      await exec('umount', [mntRoot]);\r\n      isUnmountSuccessful = true;\r\n    }\r\n  } finally {\r\n    if (isUnmountSuccessful) {\r\n      await fs.rimraf(mntRoot);\r\n    } else {\r\n      log.warn(`Umount has failed, so not removing '${mntRoot}'`);\r\n    }\r\n  }\r\n}","code-length":469,"reference":"Get the content of given file or folder from the real device under test and return it as base-64 encoded string.\nFolder content is recursively packed into a zip archive.\n\n","result":"Pull data from a real device.","score":[0.0047,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nasync function createSim (caps, platform = PLATFORM_NAME_IOS) {\r\n  const appiumTestDeviceName = `appiumTest-${UUID.create().toString().toUpperCase()}-${caps.deviceName}`;\r\n  const udid = await createDevice(\r\n    appiumTestDeviceName,\r\n    caps.deviceName,\r\n    caps.platformVersion,\r\n    { platform }\r\n  );\r\n  return await getSimulator(udid);\r\n}","code-length":121,"reference":"Capability set by a user\n\n","result":"Create simulator.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getExistingSim (opts) {\r\n  const devices = await getDevices(opts.platformVersion);\r\n  const appiumTestDeviceName = `appiumTest-${opts.deviceName}`;\r\n  let appiumTestDevice;\r\n  for (const device of _.values(devices)) {\r\n    if (device.name === opts.deviceName) {\r\n      return await getSimulator(device.udid);\r\n    }\r\n    if (device.name === appiumTestDeviceName) {\r\n      appiumTestDevice = device;\r\n    }\r\n  }\r\n  if (appiumTestDevice) {\r\n    log.warn(`Unable to find device '${opts.deviceName}'. Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);\r\n    return await getSimulator(appiumTestDevice.udid);\r\n  }\r\n  return null;\r\n}","code-length":231,"reference":"Get a simulator which is already running.\n\n","result":"Get the simulator that is already running.","score":[0.378,0.6371]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    const data = this.data;\r\n    let objectEls;\r\n    if (data.objects) {\r\n      objectEls = this.el.sceneEl.querySelectorAll(data.objects);\r\n    } else {\r\n      objectEls = this.el.sceneEl.children;\r\n    }\r\n    this.els = Array.prototype.slice.call(objectEls);\r\n  }","code-length":111,"reference":"Update list of entities to test for collision.","result":"Create the object elements.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction intersect (el) {\r\n        let radius, mesh, distance, extent;\r\n        if (!el.isEntity) { return; }\r\n        mesh = el.getObject3D('mesh');\r\n        if (!mesh) { return; }\r\n        box.setFromObject(mesh).getSize(size);\r\n        extent = Math.max(size.x, size.y, size.z) \/ 2;\r\n        radius = Math.sqrt(2 * extent * extent);\r\n        box.getCenter(meshPosition);\r\n        if (!radius) { return; }\r\n        distance = position.distanceTo(meshPosition);\r\n        if (distance < radius + colliderRadius) {\r\n          collisions.push(el);\r\n          distanceMap.set(el, distance);\r\n        }\r\n      }","code-length":198,"reference":"Bounding sphere collision detection","result":"Check if an entity is intersected.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    const gamepad = this.getGamepad();\r\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\r\n      return new THREE.Vector2();\r\n    }\r\n    return new THREE.Vector2(\r\n      (gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0)\r\n      + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0),\r\n      (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0)\r\n      + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0)\r\n    );\r\n  }","code-length":177,"reference":"Returns the state of the dpad as a THREE.Vector2.\n","result":"Calculate the position of the right button.","score":[0.1899,0.451]}
{"code":"\/*is used to<extra_id_0>\r\nfunction URLSearchParamsPolyfill(search) {\r\n        search = search || \"\";\r\n        if (search instanceof URLSearchParams || search instanceof URLSearchParamsPolyfill) {\r\n            search = search.toString();\r\n        }\r\n        this [__URLSearchParams__] = parseToDict(search);\r\n    }","code-length":83,"reference":"Make a URLSearchParams instance\n\n","result":"Create a URLSearchParamsPolyfill.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RequestQueue(opts) {\r\n  if (!opts || typeof (opts) !== 'object') {\r\n    opts = {};\r\n  }\r\n  this.size = (opts.size > 0) ? opts.size : Infinity;\r\n  this.timeout = (opts.timeout > 0) ? opts.timeout : 0;\r\n  this._queue = [];\r\n  this._timer = null;\r\n  this._frozen = false;\r\n}","code-length":115,"reference":"Queue to contain LDAP requests.\n\n","result":"Create a new RequestQueue.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MessageTracker(opts) {\r\n  assert.object(opts);\r\n  assert.string(opts.id);\r\n  assert.object(opts.parser);\r\n  this.id = opts.id;\r\n  this._msgid = 0;\r\n  this._messages = {};\r\n  this._abandoned = {};\r\n  this.parser = opts.parser;\r\n  var self = this;\r\n  this.__defineGetter__('pending', function () {\r\n    return Object.keys(self._messages);\r\n  });\r\n}","code-length":139,"reference":"Track message callback by messageID.","result":"Track messages.","score":[0.1116,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction connectSocket(cb) {\r\n    cb = once(cb);\r\n    function onResult(err, res) {\r\n      if (err) {\r\n        if (self.connectTimer) {\r\n          clearTimeout(self.connectTimer);\r\n          self.connectTimer = null;\r\n        }\r\n        self.emit('connectError', err);\r\n      }\r\n      cb(err, res);\r\n    }\r\n    function onConnect() {\r\n      if (self.connectTimer) {\r\n        clearTimeout(self.connectTimer);\r\n        self.connectTimer = null;\r\n      }\r\n      socket.removeAllListeners('error')\r\n        .removeAllListeners('connect')\r\n        .removeAllListeners('secureConnect');\r\n      tracker.id = nextClientId() + '__' + tracker.id;\r\n      self.log = self.log.child({ldap_id: tracker.id}, true);\r\n      setupClient(cb);\r\n    }\r\n    var port = (self.port || self.socketPath);\r\n    if (self.secure) {\r\n      socket = tls.connect(port, self.host, self.tlsOptions);\r\n      socket.once('secureConnect', onConnect);\r\n    } else {\r\n      socket = net.connect(port, self.host);\r\n      socket.once('connect', onConnect);\r\n    }\r\n    socket.once('error', onResult);\r\n    initSocket();\r\n    if (self.connectTimeout) {\r\n      self.connectTimer = setTimeout(function onConnectTimeout() {\r\n        if (!socket || !socket.readable || !socket.writeable) {\r\n          socket.destroy();\r\n          self._socket = null;\r\n          onResult(new ConnectionError('connection timeout'));\r\n        }\r\n      }, self.connectTimeout);\r\n    }\r\n  }","code-length":446,"reference":"Establish basic socket connection","result":"Connect to a server.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initSocket() {\r\n    tracker = new MessageTracker({\r\n      id: self.url ? self.url.href : self.socketPath,\r\n      parser: new Parser({log: log})\r\n    });\r\n    if (typeof (socket.setKeepAlive) !== 'function') {\r\n      socket.setKeepAlive = function setKeepAlive(enable, delay) {\r\n        return socket.socket ?\r\n          socket.socket.setKeepAlive(enable, delay) : false;\r\n      };\r\n    }\r\n    socket.on('data', function onData(data) {\r\n      if (log.trace())\r\n        log.trace('data event: %s', util.inspect(data));\r\n      tracker.parser.write(data);\r\n    });\r\n    tracker.parser.on('message', function onMessage(message) {\r\n      message.connection = self._socket;\r\n      var callback = tracker.fetch(message.messageID);\r\n      if (!callback) {\r\n        log.error({message: message.json}, 'unsolicited message');\r\n        return false;\r\n      }\r\n      return callback(message);\r\n    });\r\n    tracker.parser.on('error', function onParseError(err) {\r\n      self.emit('error', new VError(err, 'Parser error for %s',\r\n            tracker.id));\r\n      self.connected = false;\r\n      socket.end();\r\n    });\r\n  }","code-length":349,"reference":"Initialize socket events and LDAP parser.","result":"Connect to the server.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setupClient(cb) {\r\n    cb = once(cb);\r\n    function bail(err) {\r\n      socket.destroy();\r\n      cb(err || new Error('client error during setup'));\r\n    }\r\n    ((socket.socket) ? socket.socket : socket).once('close', bail);\r\n    socket.once('error', bail);\r\n    socket.once('end', bail);\r\n    socket.once('timeout', bail);\r\n    self._socket = socket;\r\n    self._tracker = tracker;\r\n    var basicClient = {\r\n      bind: function bindBypass(name, credentials, controls, callback) {\r\n        return self.bind(name, credentials, controls, callback, true);\r\n      },\r\n      search: function searchBypass(base, options, controls, callback) {\r\n        return self.search(base, options, controls, callback, true);\r\n      },\r\n      starttls: function starttlsBypass(options, controls, callback) {\r\n        return self.starttls(options, controls, callback, true);\r\n      },\r\n      unbind: self.unbind.bind(self)\r\n    };\r\n    vasync.forEachPipeline({\r\n      func: function (f, callback) {\r\n        f(basicClient, callback);\r\n      },\r\n      inputs: self.listeners('setup')\r\n    }, function (err, res) {\r\n      if (err) {\r\n        self.emit('setupError', err);\r\n      }\r\n      cb(err);\r\n    });\r\n  }","code-length":379,"reference":"After connect, register socket event handlers and run any setup actions","result":"Setup the client.","score":[0,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Graph(gridIn, options) {\r\n  options = options || {};\r\n  this.nodes = [];\r\n  this.diagonal = !!options.diagonal;\r\n  this.grid = [];\r\n  for (var x = 0; x < gridIn.length; x++) {\r\n    this.grid[x] = [];\r\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\r\n      var node = new GridNode(x, y, row[y]);\r\n      this.grid[x][y] = node;\r\n      this.nodes.push(node);\r\n    }\r\n  }\r\n  this.init();\r\n}","code-length":177,"reference":"A graph memory structure\n","result":"Create a graph.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(path, i) {\r\n        if(i >= path.length) {\r\n            return setStartClass(path, i);\r\n        }\r\n        elementFromNode(path[i]).removeClass(css.active);\r\n        setTimeout(function() {\r\n            removeClass(path, i+1);\r\n        }, timeout*path[i].getCost());\r\n    }","code-length":97,"reference":"will add start class if final","result":"Set the active class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction forEach(array, callback) {\r\n        if (array) {\r\n            for (var i = 0, len = array.length; i < len; i++) {\r\n                var result = callback(array[i], i);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }","code-length":98,"reference":"returns a truthy value, then returns that value.","result":"Iterate over an array.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayToMap(array, makeKey) {\r\n        var result = {};\r\n        forEach(array, function (value) {\r\n            result[makeKey(value)] = value;\r\n        });\r\n        return result;\r\n    }","code-length":66,"reference":"Creates a map from the elements of an array.\n\n","result":"Convert arrays to objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createWatchedFileSet(interval, chunkSize) {\r\n                if (interval === void 0) { interval = 2500; }\r\n                if (chunkSize === void 0) { chunkSize = 30; }\r\n                var watchedFiles = [];\r\n                var nextFileToCheck = 0;\r\n                var watchTimer;\r\n                function getModifiedTime(fileName) {\r\n                    return _fs.statSync(fileName).mtime;\r\n                }\r\n                function poll(checkedIndex) {\r\n                    var watchedFile = watchedFiles[checkedIndex];\r\n                    if (!watchedFile) {\r\n                        return;\r\n                    }\r\n                    _fs.stat(watchedFile.fileName, function (err, stats) {\r\n                        if (err) {\r\n                            watchedFile.callback(watchedFile.fileName);\r\n                        }\r\n                        else if (watchedFile.mtime.getTime() !== stats.mtime.getTime()) {\r\n                            watchedFile.mtime = getModifiedTime(watchedFile.fileName);\r\n                            watchedFile.callback(watchedFile.fileName, watchedFile.mtime.getTime() === 0);\r\n                        }\r\n                    });\r\n                }\r\n                function startWatchTimer() {\r\n                    watchTimer = setInterval(function () {\r\n                        var count = 0;\r\n                        var nextToCheck = nextFileToCheck;\r\n                        var firstCheck = -1;\r\n                        while ((count < chunkSize) && (nextToCheck !== firstCheck)) {\r\n                            poll(nextToCheck);\r\n                            if (firstCheck < 0) {\r\n                                firstCheck = nextToCheck;\r\n                            }\r\n                            nextToCheck++;\r\n                            if (nextToCheck === watchedFiles.length) {\r\n                                nextToCheck = 0;\r\n                            }\r\n                            count++;\r\n                        }\r\n                        nextFileToCheck = nextToCheck;\r\n                    }, interval);\r\n                }\r\n                function addFile(fileName, callback) {\r\n                    var file = {\r\n                        fileName: fileName,\r\n                        callback: callback,\r\n                        mtime: getModifiedTime(fileName)\r\n                    };\r\n                    watchedFiles.push(file);\r\n                    if (watchedFiles.length === 1) {\r\n                        startWatchTimer();\r\n                    }\r\n                    return file;\r\n                }\r\n                function removeFile(file) {\r\n                    watchedFiles = ts.copyListRemovingItem(file, watchedFiles);\r\n                }\r\n                return {\r\n                    getModifiedTime: getModifiedTime,\r\n                    poll: poll,\r\n                    startWatchTimer: startWatchTimer,\r\n                    addFile: addFile,\r\n                    removeFile: removeFile\r\n                };\r\n            }","code-length":623,"reference":"average async stat takes about 30 microseconds set chunk size to do 30 files in < 1 millisecond","result":"Code too long,keep in 512.","score":[0.0178,0.0299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startWatchTimer() {\r\n                    watchTimer = setInterval(function () {\r\n                        var count = 0;\r\n                        var nextToCheck = nextFileToCheck;\r\n                        var firstCheck = -1;\r\n                        while ((count < chunkSize) && (nextToCheck !== firstCheck)) {\r\n                            poll(nextToCheck);\r\n                            if (firstCheck < 0) {\r\n                                firstCheck = nextToCheck;\r\n                            }\r\n                            nextToCheck++;\r\n                            if (nextToCheck === watchedFiles.length) {\r\n                                nextToCheck = 0;\r\n                            }\r\n                            count++;\r\n                        }\r\n                        nextFileToCheck = nextToCheck;\r\n                    }, interval);\r\n                }","code-length":168,"reference":"this implementation uses polling and stat due to inconsistencies of fs.watch and efficiency of stat on modern filesystems","result":"No valid comments generated.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scanTemplateAndSetTokenValue() {\r\n            var startedWithBacktick = text.charCodeAt(pos) === 96 ;\r\n            pos++;\r\n            var start = pos;\r\n            var contents = \"\";\r\n            var resultingToken;\r\n            while (true) {\r\n                if (pos >= end) {\r\n                    contents += text.substring(start, pos);\r\n                    tokenIsUnterminated = true;\r\n                    error(ts.Diagnostics.Unterminated_template_literal);\r\n                    resultingToken = startedWithBacktick ? 11  : 14 ;\r\n                    break;\r\n                }\r\n                var currChar = text.charCodeAt(pos);\r\n                if (currChar === 96 ) {\r\n                    contents += text.substring(start, pos);\r\n                    pos++;\r\n                    resultingToken = startedWithBacktick ? 11  : 14 ;\r\n                    break;\r\n                }\r\n                if (currChar === 36  && pos + 1 < end && text.charCodeAt(pos + 1) === 123 ) {\r\n                    contents += text.substring(start, pos);\r\n                    pos += 2;\r\n                    resultingToken = startedWithBacktick ? 12  : 13 ;\r\n                    break;\r\n                }\r\n                if (currChar === 92 ) {\r\n                    contents += text.substring(start, pos);\r\n                    contents += scanEscapeSequence();\r\n                    start = pos;\r\n                    continue;\r\n                }\r\n                if (currChar === 13 ) {\r\n                    contents += text.substring(start, pos);\r\n                    pos++;\r\n                    if (pos < end && text.charCodeAt(pos) === 10 ) {\r\n                        pos++;\r\n                    }\r\n                    contents += \"\\n\";\r\n                    start = pos;\r\n                    continue;\r\n                }\r\n                pos++;\r\n            }\r\n            ts.Debug.assert(resultingToken !== undefined);\r\n            tokenValue = contents;\r\n            return resultingToken;\r\n        }","code-length":473,"reference":"a literal component of a TemplateExpression.","result":"Scan the template literal and set the token value to the template literal.","score":[0.0818,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction utf16EncodeAsString(codePoint) {\r\n            ts.Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);\r\n            if (codePoint <= 65535) {\r\n                return String.fromCharCode(codePoint);\r\n            }\r\n            var codeUnit1 = Math.floor((codePoint - 65536) \/ 1024) + 0xD800;\r\n            var codeUnit2 = ((codePoint - 65536) % 1024) + 0xDC00;\r\n            return String.fromCharCode(codeUnit1, codeUnit2);\r\n        }","code-length":138,"reference":"Derived from the 10.1.1 UTF16Encoding of the ES6 Spec.","result":"Encode UTF.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction peekUnicodeEscape() {\r\n            if (pos + 5 < end && text.charCodeAt(pos + 1) === 117 ) {\r\n                var start_1 = pos;\r\n                pos += 2;\r\n                var value = scanExactNumberOfHexDigits(4);\r\n                pos = start_1;\r\n                return value;\r\n            }\r\n            return -1;\r\n        }","code-length":101,"reference":"Current character is known to be a backslash. Check for Unicode escape of the form '\\uXXXX' and return code point value if valid Unicode escape is found. Otherwise return -1.","result":"Detect unicode escape.","score":[0,0.0183]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scanJsxIdentifier() {\r\n            if (tokenIsIdentifierOrKeyword(token)) {\r\n                var firstCharPosition = pos;\r\n                while (pos < end) {\r\n                    var ch = text.charCodeAt(pos);\r\n                    if (ch === 45  || ((firstCharPosition === pos) ? isIdentifierStart(ch, languageVersion) : isIdentifierPart(ch, languageVersion))) {\r\n                        pos++;\r\n                    }\r\n                    else {\r\n                        break;\r\n                    }\r\n                }\r\n                tokenValue += text.substr(firstCharPosition, pos - firstCharPosition);\r\n            }\r\n            return token;\r\n        }","code-length":162,"reference":"Scans a JSX identifier; these differ from normal identifiers in that they allow dashes","result":"Return token.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDeclarationName(node) {\r\n            if (node.name) {\r\n                if (node.kind === 218  && node.name.kind === 9 ) {\r\n                    return \"\\\"\" + node.name.text + \"\\\"\";\r\n                }\r\n                if (node.name.kind === 136 ) {\r\n                    var nameExpression = node.name.expression;\r\n                    ts.Debug.assert(ts.isWellKnownSymbolSyntactically(nameExpression));\r\n                    return ts.getPropertyNameForKnownSymbolName(nameExpression.name.text);\r\n                }\r\n                return node.name.text;\r\n            }\r\n            switch (node.kind) {\r\n                case 144 :\r\n                    return \"__constructor\";\r\n                case 152 :\r\n                case 147 :\r\n                    return \"__call\";\r\n                case 153 :\r\n                case 148 :\r\n                    return \"__new\";\r\n                case 149 :\r\n                    return \"__index\";\r\n                case 228 :\r\n                    return \"__export\";\r\n                case 227 :\r\n                    return node.isExportEquals ? \"export=\" : \"default\";\r\n                case 213 :\r\n                case 214 :\r\n                    return node.flags & 1024  ? \"default\" : undefined;\r\n            }\r\n        }","code-length":312,"reference":"Should not be called on a declaration with a computed property name, unless it is a well known Symbol.","result":"Generate the source map file .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bindChildren(node) {\r\n            var saveParent = parent;\r\n            var saveContainer = container;\r\n            var savedBlockScopeContainer = blockScopeContainer;\r\n            parent = node;\r\n            var containerFlags = getContainerFlags(node);\r\n            if (containerFlags & 1 ) {\r\n                container = blockScopeContainer = node;\r\n                if (containerFlags & 4 ) {\r\n                    container.locals = {};\r\n                }\r\n                addToContainerChain(container);\r\n            }\r\n            else if (containerFlags & 2 ) {\r\n                blockScopeContainer = node;\r\n                blockScopeContainer.locals = undefined;\r\n            }\r\n            if (node.kind === 215 ) {\r\n                seenThisKeyword = false;\r\n                ts.forEachChild(node, bind);\r\n                node.flags = seenThisKeyword ? node.flags | 524288  : node.flags & ~524288 ;\r\n            }\r\n            else {\r\n                ts.forEachChild(node, bind);\r\n            }\r\n            container = saveContainer;\r\n            parent = saveParent;\r\n            blockScopeContainer = savedBlockScopeContainer;\r\n        }","code-length":285,"reference":"All container nodes are kept on a linked list in declaration order. This list is used by the getLocalNameOfContainer function in the type checker to validate that the local name used for a container is unique.","result":"Bind children to the current node.","score":[0.0015,0.0303]}
{"code":"\/*is used to<extra_id_0>\r\nfunction nodePosToString(node) {\r\n        var file = getSourceFileOfNode(node);\r\n        var loc = ts.getLineAndCharacterOfPosition(file, node.pos);\r\n        return file.fileName + \"(\" + (loc.line + 1) + \",\" + (loc.character + 1) + \")\";\r\n    }","code-length":85,"reference":"This is a useful function for debugging purposes.","result":"Generate nodePosToString.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction unescapeIdentifier(identifier) {\r\n        return identifier.length >= 3 && identifier.charCodeAt(0) === 95  && identifier.charCodeAt(1) === 95  && identifier.charCodeAt(2) === 95  ? identifier.substr(1) : identifier;\r\n    }","code-length":75,"reference":"Remove extra underscore from escaped identifier","result":"Unescape identifiers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEnclosingBlockScopeContainer(node) {\r\n        var current = node.parent;\r\n        while (current) {\r\n            if (isFunctionLike(current)) {\r\n                return current;\r\n            }\r\n            switch (current.kind) {\r\n                case 248 :\r\n                case 220 :\r\n                case 244 :\r\n                case 218 :\r\n                case 199 :\r\n                case 200 :\r\n                case 201 :\r\n                    return current;\r\n                case 192 :\r\n                    if (!isFunctionLike(current.parent)) {\r\n                        return current;\r\n                    }\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }","code-length":172,"reference":"Gets the nearest enclosing block scope container that has the provided node as a descendant, that is not the provided node.","result":"Detect the enclosing block scope container.","score":[0.0351,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isDeclarationName(name) {\r\n        if (name.kind !== 69  && name.kind !== 9  && name.kind !== 8 ) {\r\n            return false;\r\n        }\r\n        var parent = name.parent;\r\n        if (parent.kind === 226  || parent.kind === 230 ) {\r\n            if (parent.propertyName) {\r\n                return true;\r\n            }\r\n        }\r\n        if (isDeclaration(parent)) {\r\n            return parent.name === name;\r\n        }\r\n        return false;\r\n    }","code-length":144,"reference":"True if the given identifier, string literal, or number literal is the name of a declaration node","result":"Detect if a name is a declaration name.","score":[0.0802,0.2311]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isIdentifierName(node) {\r\n        var parent = node.parent;\r\n        switch (parent.kind) {\r\n            case 141 :\r\n            case 140 :\r\n            case 143 :\r\n            case 142 :\r\n            case 145 :\r\n            case 146 :\r\n            case 247 :\r\n            case 245 :\r\n            case 166 :\r\n                return parent.name === node;\r\n            case 135 :\r\n                if (parent.right === node) {\r\n                    while (parent.kind === 135 ) {\r\n                        parent = parent.parent;\r\n                    }\r\n                    return parent.kind === 154 ;\r\n                }\r\n                return false;\r\n            case 163 :\r\n            case 226 :\r\n                return parent.propertyName === node;\r\n            case 230 :\r\n                return true;\r\n        }\r\n        return false;\r\n    }","code-length":226,"reference":"Return true if the given identifier is classified as an IdentifierName","result":"Detect if an identifier name is an identifier.","score":[0.135,0.1869]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getExpandedCharCodes(input) {\r\n        var output = [];\r\n        var length = input.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var charCode = input.charCodeAt(i);\r\n            if (charCode < 0x80) {\r\n                output.push(charCode);\r\n            }\r\n            else if (charCode < 0x800) {\r\n                output.push((charCode >> 6) | 192);\r\n                output.push((charCode & 63) | 128);\r\n            }\r\n            else if (charCode < 0x10000) {\r\n                output.push((charCode >> 12) | 224);\r\n                output.push(((charCode >> 6) & 63) | 128);\r\n                output.push((charCode & 63) | 128);\r\n            }\r\n            else if (charCode < 0x20000) {\r\n                output.push((charCode >> 18) | 240);\r\n                output.push(((charCode >> 12) & 63) | 128);\r\n                output.push(((charCode >> 6) & 63) | 128);\r\n                output.push((charCode & 63) | 128);\r\n            }\r\n            else {\r\n                ts.Debug.assert(false, \"Unexpected code point\");\r\n            }\r\n        }\r\n        return output;\r\n    }","code-length":336,"reference":"Replace each instance of non-ascii characters by one, two, three, or four escape sequences\nrepresenting the UTF-8 encoding of the character, and return the expanded char code list.","result":"Expand charCodes in the expanded form.","score":[0.007,0.0727]}
{"code":"\/*is used to<extra_id_0>\r\nfunction textSpanContainsTextSpan(span, other) {\r\n        return other.start >= span.start && textSpanEnd(other) <= textSpanEnd(span);\r\n    }","code-length":50,"reference":"Returns true if 'span' contains 'other'.","result":"Detect if text span contains other text span.","score":[0.1652,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isListTerminator(kind) {\r\n            if (token === 1 ) {\r\n                return true;\r\n            }\r\n            switch (kind) {\r\n                case 1 :\r\n                case 2 :\r\n                case 4 :\r\n                case 5 :\r\n                case 6 :\r\n                case 12 :\r\n                case 9 :\r\n                case 21 :\r\n                    return token === 16 ;\r\n                case 3 :\r\n                    return token === 16  || token === 71  || token === 77 ;\r\n                case 7 :\r\n                    return token === 15  || token === 83  || token === 106 ;\r\n                case 8 :\r\n                    return isVariableDeclaratorListTerminator();\r\n                case 17 :\r\n                    return token === 27  || token === 17  || token === 15  || token === 83  || token === 106 ;\r\n                case 11 :\r\n                    return token === 18  || token === 23 ;\r\n                case 15 :\r\n                case 19 :\r\n                case 10 :\r\n                    return token === 20 ;\r\n                case 16 :\r\n                    return token === 18  || token === 20  ;\r\n                case 18 :\r\n                    return token === 27  || token === 17 ;\r\n                case 20 :\r\n                    return token === 15  || token === 16 ;\r\n                case 13 :\r\n                    return token === 27  || token === 39 ;\r\n                case 14 :\r\n                    return token === 25  && lookAhead(nextTokenIsSlash);\r\n                case 22 :\r\n                    return token === 18  || token === 54  || token === 16 ;\r\n                case 23 :\r\n                    return token === 27  || token === 16 ;\r\n                case 25 :\r\n                    return token === 20  || token === 16 ;\r\n                case 24 :\r\n                    return token === 16 ;\r\n            }\r\n        }","code-length":429,"reference":"True if positioned at a list terminator","result":"Return isListTerminator.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseEntityName(allowReservedWords, diagnosticMessage) {\r\n            var entity = parseIdentifier(diagnosticMessage);\r\n            while (parseOptional(21 )) {\r\n                var node = createNode(135 , entity.pos);\r\n                node.left = entity;\r\n                node.right = parseRightSideOfDot(allowReservedWords);\r\n                entity = finishNode(node);\r\n            }\r\n            return entity;\r\n        }","code-length":109,"reference":"The allowReservedWords parameter controls whether reserved words are permitted after the first dot","result":"Parse a name of a entity.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findHighestListElementThatStartsAtPosition(position) {\r\n                currentArray = undefined;\r\n                currentArrayIndex = -1 ;\r\n                current = undefined;\r\n                forEachChild(sourceFile, visitNode, visitArray);\r\n                return;\r\n                function visitNode(node) {\r\n                    if (position >= node.pos && position < node.end) {\r\n                        forEachChild(node, visitNode, visitArray);\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                function visitArray(array) {\r\n                    if (position >= array.pos && position < array.end) {\r\n                        for (var i = 0, n = array.length; i < n; i++) {\r\n                            var child = array[i];\r\n                            if (child) {\r\n                                if (child.pos === position) {\r\n                                    currentArray = array;\r\n                                    currentArrayIndex = i;\r\n                                    current = child;\r\n                                    return true;\r\n                                }\r\n                                else {\r\n                                    if (child.pos < position && position < child.end) {\r\n                                        forEachChild(child, visitNode, visitArray);\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n            }","code-length":330,"reference":"Finds the highest element in the tree we can find that starts at the provided position. The element must be a direct child of some node list in the tree.  This way after we return it, we can easily return its next sibling in the list.","result":"Find the highest list element that starts at position.","score":[0.0056,0.1627]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSymbolOfPartOfRightHandSideOfImportEquals(entityName, importDeclaration) {\r\n            if (!importDeclaration) {\r\n                importDeclaration = ts.getAncestor(entityName, 221 );\r\n                ts.Debug.assert(importDeclaration !== undefined);\r\n            }\r\nightSideOfQualifiedNameOrPropertyAccess(entityName)) {\r\n                entityName = entityName.parent;\r\n            }\r\n            if (entityName.kind === 69  || entityName.parent.kind === 135 ) {\r\n                return resolveEntityName(entityName, 1536 );\r\n            }\r\n            else {\r\n                ts.Debug.assert(entityName.parent.kind === 221 );\r\n                return resolveEntityName(entityName, 107455  | 793056  | 1536 );\r\n            }\r\n        }","code-length":194,"reference":"This function is only for imports with entity names","result":"Resolve the symbol of the symbol of the right hand side of the importEquals .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveEntityName(name, meaning, ignoreErrors) {\r\n            if (ts.nodeIsMissing(name)) {\r\n                return undefined;\r\n            }\r\n            var symbol;\r\n            if (name.kind === 69 ) {\r\n                var message = meaning === 1536  ? ts.Diagnostics.Cannot_find_namespace_0 : ts.Diagnostics.Cannot_find_name_0;\r\n                symbol = resolveName(name, name.text, meaning, ignoreErrors ? undefined : message, name);\r\n                if (!symbol) {\r\n                    return undefined;\r\n                }\r\n            }\r\n            else if (name.kind === 135  || name.kind === 166 ) {\r\n                var left = name.kind === 135  ? name.left : name.expression;\r\n                var right = name.kind === 135  ? name.right : name.name;\r\n                var namespace = resolveEntityName(left, 1536 , ignoreErrors);\r\n                if (!namespace || namespace === unknownSymbol || ts.nodeIsMissing(right)) {\r\n                    return undefined;\r\n                }\r\n                symbol = getSymbol(getExportsOfSymbol(namespace), right.text, meaning);\r\n                if (!symbol) {\r\n                    if (!ignoreErrors) {\r\n                        error(right, ts.Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(namespace), ts.declarationNameToString(right));\r\n                    }\r\n                    return undefined;\r\n                }\r\n            }\r\n            else {\r\n                ts.Debug.fail(\"Unknown entity name kind.\");\r\n            }\r\n            ts.Debug.assert((symbol.flags & 16777216 ) === 0, \"Should never get an instantiated symbol here.\");\r\n            return symbol.flags & meaning ? symbol : resolveAlias(symbol);\r\n        }","code-length":434,"reference":"Resolves a qualified name and any involved aliases","result":"Resolve the entity name.","score":[0,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isReservedMemberName(name) {\r\n            return name.charCodeAt(0) === 95  &&\r\n                name.charCodeAt(1) === 95  &&\r\n                name.charCodeAt(2) !== 95  &&\r\n                name.charCodeAt(2) !== 64 ;\r\n        }","code-length":82,"reference":"A reserved member name starts with two underscores, but the third character cannot be an underscore or the ","result":"Check if a reserved member name is reserved.","score":[0.082,0.2847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isSymbolUsedInExportAssignment(symbol) {\r\n                    if (exportAssignmentSymbol === symbol) {\r\n                        return true;\r\n                    }\r\n                    if (exportAssignmentSymbol && !!(exportAssignmentSymbol.flags & 8388608 )) {\r\n                        resolvedExportSymbol = resolvedExportSymbol || resolveAlias(exportAssignmentSymbol);\r\n                        if (resolvedExportSymbol === symbol) {\r\n                            return true;\r\n                        }\r\n                        return ts.forEach(resolvedExportSymbol.declarations, function (current) {\r\n                            while (current) {\r\n                                if (current === node) {\r\n                                    return true;\r\n                                }\r\n                                current = current.parent;\r\n                            }\r\n                        });\r\n                    }\r\n                }","code-length":181,"reference":"Check if the symbol is used in export assignment","result":"Export a symbol in an export assignment.","score":[0.1597,0.1705]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeOfPropertyOfType(type, name) {\r\n            var prop = getPropertyOfType(type, name);\r\n            return prop ? getTypeOfSymbol(prop) : undefined;\r\n        }","code-length":52,"reference":"Return the type of the given property in the given type, or undefined if no such property exists","result":"Resolve the type of the property of a type.","score":[0.1484,0.1462]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeForBindingElementParent(node) {\r\n            var symbol = getSymbolOfNode(node);\r\n            return symbol && getSymbolLinks(symbol).type || getTypeForVariableLikeDeclaration(node);\r\n        }","code-length":56,"reference":"Return the type of a binding element parent. We check SymbolLinks first to see if a type has been assigned by contextual typing.","result":"Resolve binding elements.","score":[0.0005,0.0238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeForBindingElement(declaration) {\r\n            var pattern = declaration.parent;\r\n            var parentType = getTypeForBindingElementParent(pattern.parent);\r\n            if (parentType === unknownType) {\r\n                return unknownType;\r\n            }\r\n            if (!parentType || isTypeAny(parentType)) {\r\n                if (declaration.initializer) {\r\n                    return checkExpressionCached(declaration.initializer);\r\n                }\r\n                return parentType;\r\n            }\r\n            var type;\r\n            if (pattern.kind === 161 ) {\r\n                var name_10 = declaration.propertyName || declaration.name;\r\n                type = getTypeOfPropertyOfType(parentType, name_10.text) ||\r\n                    isNumericLiteralName(name_10.text) && getIndexTypeOfType(parentType, 1 ) ||\r\n                    getIndexTypeOfType(parentType, 0 );\r\n                if (!type) {\r\n                    error(name_10, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(parentType), ts.declarationNameToString(name_10));\r\n                    return unknownType;\r\n                }\r\n            }\r\n            else {\r\n                var elementType = checkIteratedTypeOrElementType(parentType, pattern,  false);\r\n                if (!declaration.dotDotDotToken) {\r\n                    var propName = \"\" + ts.indexOf(pattern.elements, declaration);\r\n                    type = isTupleLikeType(parentType)\r\n                        ? getTypeOfPropertyOfType(parentType, propName)\r\n                        : elementType;\r\n                    if (!type) {\r\n                        if (isTupleType(parentType)) {\r\n                            error(declaration, ts.Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(parentType), parentType.elementTypes.length, pattern.elements.length);\r\n                        }\r\n                        else {\r\n                            error(declaration, ts.Diagnostics.Type_0_has_no_property_1, typeToString(parentType), propName);\r\n                        }\r\n                        return unknownType;\r\n                    }\r\n                }\r\n                else {\r\n                    type = createArrayType(elementType);\r\n                }\r\n            }\r\n            return type;\r\n        }","code-length":549,"reference":"Return the inferred type for a binding element","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeForVariableLikeDeclaration(declaration) {\r\n            if (declaration.parent.parent.kind === 200 ) {\r\n                return anyType;\r\n            }\r\n            if (declaration.parent.parent.kind === 201 ) {\r\n                return checkRightHandSideOfForOf(declaration.parent.parent.expression) || anyType;\r\n            }\r\n            if (ts.isBindingPattern(declaration.parent)) {\r\n                return getTypeForBindingElement(declaration);\r\n            }\r\n            if (declaration.type) {\r\n                return getTypeFromTypeNode(declaration.type);\r\n            }\r\n            if (declaration.kind === 138 ) {\r\n                var func = declaration.parent;\r\n                if (func.kind === 146  && !ts.hasDynamicName(func)) {\r\n                    var getter = ts.getDeclarationOfKind(declaration.parent.symbol, 145 );\r\n                    if (getter) {\r\n                        return getReturnTypeOfSignature(getSignatureFromDeclaration(getter));\r\n                    }\r\n                }\r\n                var type = getContextuallyTypedParameterType(declaration);\r\n                if (type) {\r\n                    return type;\r\n                }\r\n            }\r\n            if (declaration.initializer) {\r\n                return checkExpressionCached(declaration.initializer);\r\n            }\r\n            if (declaration.kind === 246 ) {\r\n                return checkIdentifier(declaration.name);\r\n            }\r\n            if (ts.isBindingPattern(declaration.name)) {\r\n                return getTypeFromBindingPattern(declaration.name,  false);\r\n            }\r\n            return undefined;\r\n        }","code-length":382,"reference":"Return the inferred type for a variable, parameter, or property declaration","result":"Check the type of a variable like declaration.","score":[0.1256,0.1402]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeFromBindingElement(element, includePatternInType) {\r\n            if (element.initializer) {\r\n                return getWidenedType(checkExpressionCached(element.initializer));\r\n            }\r\n            if (ts.isBindingPattern(element.name)) {\r\n                return getTypeFromBindingPattern(element.name, includePatternInType);\r\n            }\r\n            return anyType;\r\n        }","code-length":103,"reference":"Return the type implied by a binding pattern element. This is the type of the initializer of the element if one is present. Otherwise, if the element is itself a binding pattern, it is the type implied by the binding pattern. Otherwise, it is the type any.","result":"Determine the type of the binding element.","score":[0.002,0.0698]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeFromObjectBindingPattern(pattern, includePatternInType) {\r\n            var members = {};\r\n            ts.forEach(pattern.elements, function (e) {\r\n                var flags = 4  | 67108864  | (e.initializer ? 536870912  : 0);\r\n                var name = e.propertyName || e.name;\r\n                var symbol = createSymbol(flags, name.text);\r\n                symbol.type = getTypeFromBindingElement(e, includePatternInType);\r\n                symbol.bindingElement = e;\r\n                members[symbol.name] = symbol;\r\n            });\r\n            var result = createAnonymousType(undefined, members, emptyArray, emptyArray, undefined, undefined);\r\n            if (includePatternInType) {\r\n                result.pattern = pattern;\r\n            }\r\n            return result;\r\n        }","code-length":210,"reference":"Return the type implied by an object binding pattern","result":"Create a type for object binding patterns.","score":[0.1899,0.2904]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol) {\r\n            var result;\r\n            for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {\r\n                var node = _a[_i];\r\n                if (node.kind === 215  || node.kind === 214  ||\r\n                    node.kind === 186  || node.kind === 216 ) {\r\n                    var declaration = node;\r\n                    if (declaration.typeParameters) {\r\n                        result = appendTypeParameters(result, declaration.typeParameters);\r\n                    }\r\n                }\r\n            }\r\n            return result;\r\n        }","code-length":167,"reference":"The local type parameters are the combined set of type parameters from all declarations of the class, interface, or type alias.","result":"Determine local type parameters of a class or interface.","score":[0.0752,0.1263]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBaseConstructorTypeOfClass(type) {\r\n            if (!type.resolvedBaseConstructorType) {\r\n                var baseTypeNode = getBaseTypeNodeOfClass(type);\r\n                if (!baseTypeNode) {\r\n                    return type.resolvedBaseConstructorType = undefinedType;\r\n                }\r\n                if (!pushTypeResolution(type, 1 )) {\r\n                    return unknownType;\r\n                }\r\n                var baseConstructorType = checkExpression(baseTypeNode.expression);\r\n                if (baseConstructorType.flags & 80896 ) {\r\n                    resolveStructuredTypeMembers(baseConstructorType);\r\n                }\r\n                if (!popTypeResolution()) {\r\n                    error(type.symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, symbolToString(type.symbol));\r\n                    return type.resolvedBaseConstructorType = unknownType;\r\n                }\r\n                if (baseConstructorType !== unknownType && baseConstructorType !== nullType && !isConstructorType(baseConstructorType)) {\r\n                    error(baseTypeNode.expression, ts.Diagnostics.Type_0_is_not_a_constructor_function_type, typeToString(baseConstructorType));\r\n                    return type.resolvedBaseConstructorType = unknownType;\r\n                }\r\n                type.resolvedBaseConstructorType = baseConstructorType;\r\n            }\r\n            return type.resolvedBaseConstructorType;\r\n        }","code-length":345,"reference":"The base constructor of a class can resolve to undefinedType if the class has no extends clause, unknownType if an error occurred during resolution of the extends expression, nullType if the extends expression is the null value, or an object type with at least one construct signature.","result":"Resolve the base constructor function type of a class.","score":[0.0037,0.111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isIndependentTypeReference(node) {\r\n            if (node.typeArguments) {\r\n                for (var _i = 0, _a = node.typeArguments; _i < _a.length; _i++) {\r\n                    var typeNode = _a[_i];\r\n                    if (!isIndependentType(typeNode)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }","code-length":114,"reference":"A type reference is considered independent if each type argument is considered independent.","result":"Detect if a type reference is independent.","score":[0.1604,0.2419]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createInstantiatedSymbolTable(symbols, mapper, mappingThisOnly) {\r\n            var result = {};\r\n            for (var _i = 0; _i < symbols.length; _i++) {\r\n                var symbol = symbols[_i];\r\n                result[symbol.name] = mappingThisOnly && isIndependentMember(symbol) ? symbol : instantiateSymbol(symbol, mapper);\r\n            }\r\n            return result;\r\n        }","code-length":110,"reference":"The mappingThisOnly flag indicates that the only type parameter being mapped is \"this\". When the flag is true, we check symbols to see if we can quickly conclude they are free of \"this\" references, thus needing no instantiation.","result":"Create the symbol table for the generated code.","score":[0.0039,0.0429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getUnionSignatures(types, kind) {\r\n            var signatureLists = ts.map(types, function (t) { return getSignaturesOfType(t, kind); });\r\n            var result = undefined;\r\n            for (var i = 0; i < signatureLists.length; i++) {\r\n                for (var _i = 0, _a = signatureLists[i]; _i < _a.length; _i++) {\r\n                    var signature = _a[_i];\r\n                    if (!result || !findMatchingSignature(result, signature,  false,  true)) {\r\n                        var unionSignatures = findMatchingSignatures(signatureLists, signature, i);\r\n                        if (unionSignatures) {\r\n                            var s = signature;\r\n                            if (unionSignatures.length > 1) {\r\n                                s = cloneSignature(signature);\r\n                                s.resolvedReturnType = undefined;\r\n                                s.unionSignatures = unionSignatures;\r\n                            }\r\n                            (result || (result = [])).push(s);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return result || emptyArray;\r\n        }","code-length":269,"reference":"The signatures of a union type are those signatures that are present in each of the constituent types. Generic signatures must match exactly, but non-generic signatures are allowed to have extra optional parameters and may differ in return types. When signatures differ in return types, the resulting return type is the union of the constituent return types.","result":"Determine the union signature of a type .","score":[0.0006,0.0576]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPropertyOfObjectType(type, name) {\r\n            if (type.flags & 80896 ) {\r\n                var resolved = resolveStructuredTypeMembers(type);\r\n                if (ts.hasProperty(resolved.members, name)) {\r\n                    var symbol = resolved.members[name];\r\n                    if (symbolIsValue(symbol)) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n            }\r\n        }","code-length":109,"reference":"If the given type is an object type and that type has a property by the given name, return the symbol for that property.Otherwise return undefined.","result":"Resolve the type references.","score":[0.0016,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getApparentType(type) {\r\n            if (type.flags & 512 ) {\r\n                do {\r\n                    type = getConstraintOfTypeParameter(type);\r\n                } while (type && type.flags & 512 );\r\n                if (!type) {\r\n                    type = emptyObjectType;\r\n                }\r\n            }\r\n            if (type.flags & 258 ) {\r\n                type = globalStringType;\r\n            }\r\n            else if (type.flags & 132 ) {\r\n                type = globalNumberType;\r\n            }\r\n            else if (type.flags & 8 ) {\r\n                type = globalBooleanType;\r\n            }\r\n            else if (type.flags & 16777216 ) {\r\n                type = globalESSymbolType;\r\n            }\r\n            return type;\r\n        }","code-length":204,"reference":"For a type parameter, return the base constraint of the type parameter.","result":"Detect the type of an ApparentType.","score":[0.1112,0.2242]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPropertyOfType(type, name) {\r\n            type = getApparentType(type);\r\n            if (type.flags & 80896 ) {\r\n                var resolved = resolveStructuredTypeMembers(type);\r\n                if (ts.hasProperty(resolved.members, name)) {\r\n                    var symbol = resolved.members[name];\r\n                    if (symbolIsValue(symbol)) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                if (resolved === anyFunctionType || resolved.callSignatures.length || resolved.constructSignatures.length) {\r\n                    var symbol = getPropertyOfObjectType(globalFunctionType, name);\r\n                    if (symbol) {\r\n                        return symbol;\r\n                    }\r\n                }\r\n                return getPropertyOfObjectType(globalObjectType, name);\r\n            }\r\n            if (type.flags & 49152 ) {\r\n                return getPropertyOfUnionOrIntersectionType(type, name);\r\n            }\r\n            return undefined;\r\n        }","code-length":235,"reference":"Return the symbol for the property with the given name in the given type. Creates synthetic union properties when necessary, maps primitive types and type parameters are to their apparent types, and augments with properties from Object and Function as appropriate.","result":"Resolve the type references in the compiler.","score":[0.0021,0.1186]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPropagatingFlagsOfTypes(types) {\r\n            var result = 0;\r\n            for (var _i = 0; _i < types.length; _i++) {\r\n                var type = types[_i];\r\n                result |= type.flags;\r\n            }\r\n            return result & 14680064 ;\r\n        }","code-length":89,"reference":"This function is used to propagate certain flags when creating new object type references and union types. It is only necessary to do so if a constituent type might be the undefined type, the null type, the type of an object literal or the anyFunctionType. This is because there are operations in the type checker that care about the presence of such types at arbitrary depth in a containing type.","result":"Create the type propagation .","score":[0.0,0.0315]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeFromClassOrInterfaceReference(node, symbol) {\r\n            var type = getDeclaredTypeOfSymbol(symbol);\r\n            var typeParameters = type.localTypeParameters;\r\n            if (typeParameters) {\r\n                if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {\r\n                    error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, typeToString(type,  undefined, 1 ), typeParameters.length);\r\n                    return unknownType;\r\n                }\r\n                return createTypeReference(type, ts.concatenate(type.outerTypeParameters, ts.map(node.typeArguments, getTypeFromTypeNode)));\r\n            }\r\n            if (node.typeArguments) {\r\n                error(node, ts.Diagnostics.Type_0_is_not_generic, typeToString(type));\r\n                return unknownType;\r\n            }\r\n            return type;\r\n        }","code-length":233,"reference":"Get type from reference to class or interface","result":"Resolve type references in the compiler.","score":[0.1383,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTypeFromTypeAliasReference(node, symbol) {\r\n            var type = getDeclaredTypeOfSymbol(symbol);\r\n            var links = getSymbolLinks(symbol);\r\n            var typeParameters = links.typeParameters;\r\n            if (typeParameters) {\r\n                if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {\r\n                    error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, symbolToString(symbol), typeParameters.length);\r\n                    return unknownType;\r\n                }\r\n                var typeArguments = ts.map(node.typeArguments, getTypeFromTypeNode);\r\n                var id = getTypeListId(typeArguments);\r\n                return links.instantiations[id] || (links.instantiations[id] = instantiateType(type, createTypeMapper(typeParameters, typeArguments)));\r\n            }\r\n            if (node.typeArguments) {\r\n                error(node, ts.Diagnostics.Type_0_is_not_generic, symbolToString(symbol));\r\n                return unknownType;\r\n            }\r\n            return type;\r\n        }","code-length":271,"reference":"Get type from reference to type alias. When a type alias is generic, the declared type of the type alias may include references to the type parameters of the alias. We replace those with the actual type arguments by instantiating the declared type. Instantiations are cached using the type identities of the type arguments as the key.","result":"Return getTypeFromTypeNode.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addTypesToSet(typeSet, types, typeSetKind) {\r\n            for (var _i = 0; _i < types.length; _i++) {\r\n                var type = types[_i];\r\n                addTypeToSet(typeSet, type, typeSetKind);\r\n            }\r\n        }","code-length":80,"reference":"Add the given types to the given type set. Order is preserved, duplicates are removed, and nested types of the given kind are flattened into the set.","result":"Add types to a type set.","score":[0.0115,0.1004]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isKnownProperty(type, name) {\r\n                if (type.flags & 80896 ) {\r\n                    var resolved = resolveStructuredTypeMembers(type);\r\n                    if (relation === assignableRelation && (type === globalObjectType || resolved.properties.length === 0) ||\r\n                        resolved.stringIndexType || resolved.numberIndexType || getPropertyOfType(type, name)) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n                if (type.flags & 49152 ) {\r\n                    for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\r\n                        var t = _a[_i];\r\n                        if (isKnownProperty(t, name)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n                return true;\r\n            }","code-length":217,"reference":"Check if a property with the given name is known anywhere in the given type. In an object type, a property is considered known if the object type is empty and the check is for assignability, if the object type has index signatures, or if the property is actually declared in the object type. In a union or intersection type, a property is considered known if it is known in any constituent type.","result":"Detect if a property is known to the current object.","score":[0.0006,0.0766]}
{"code":"\/*is used to<extra_id_0>\r\nfunction objectTypeRelatedTo(source, target, reportErrors) {\r\n                if (overflow) {\r\n                    return 0 ;\r\n                }\r\n                var id = relation !== identityRelation || source.id < target.id ? source.id + \",\" + target.id : target.id + \",\" + source.id;\r\n                var related = relation[id];\r\n                if (related !== undefined) {\r\n                    if (!elaborateErrors || (related === 3 )) {\r\n                        return related === 1  ? -1  : 0 ;\r\n                    }\r\n                }\r\n                if (depth > 0) {\r\n                    for (var i = 0; i < depth; i++) {\r\n                        if (maybeStack[i][id]) {\r\n                            return 1 ;\r\n                        }\r\n                    }\r\n                    if (depth === 100) {\r\n                        overflow = true;\r\n                        return 0 ;\r\n                    }\r\n                }\r\n                else {\r\n                    sourceStack = [];\r\n                    targetStack = [];\r\n                    maybeStack = [];\r\n                    expandingFlags = 0;\r\n                }\r\n                sourceStack[depth] = source;\r\n                targetStack[depth] = target;\r\n                maybeStack[depth] = {};\r\n                maybeStack[depth][id] = 1 ;\r\n                depth++;\r\n                var saveExpandingFlags = expandingFlags;\r\n                if (!(expandingFlags & 1) && isDeeplyNestedGeneric(source, sourceStack, depth))\r\n                    expandingFlags |= 1;\r\n                if (!(expandingFlags & 2) && isDeeplyNestedGeneric(target, targetStack, depth))\r\n                    expandingFlags |= 2;\r\n                var result;\r\n                if (expandingFlags === 3) {\r\n                    result = 1 ;\r\n                }\r\n                else {\r\n                    result = propertiesRelatedTo(source, target, reportErrors);\r\n                    if (result) {\r\n                        result &= signaturesRelatedTo(source, target, 0 , reportErrors);\r\n                        if (result) {\r\n                            result &= signaturesRelatedTo(source, target, 1 , reportErrors);\r\n                            if (result) {\r\n                                result &= stringIndexTypesRelatedTo(source, target, reportErrors);\r\n                                if (result) {\r\n                                    result &= numberIndexTypesRelatedTo(source, target, reportErrors);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                expandingFlags = saveExpandingFlags;\r\n                depth--;\r\n                if (result) {\r\n                    var maybeCache = maybeStack[depth];\r\n                    var destinationCache = (result === -1  || depth === 0) ? relation : maybeStack[depth - 1];\r\n                    ts.copyMap(maybeCache, destinationCache);\r\n                }\r\n                else {\r\n                    relation[id] = reportErrors ? 3  : 2 ;\r\n                }\r\n                return result;\r\n            }","code-length":691,"reference":"Determine if two object types are related by structure. First, check if the result is already available in the global cache. Second, check if we have already started a comparison of the given two types in which case we assume the result to be true. Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion and issue an error. Otherwise, actually compare the structure of the two types.","result":"Code too long,keep in 512.","score":[0.0,0.0055]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isDeeplyNestedGeneric(type, stack, depth) {\r\n            if (type.flags & (4096  | 131072 ) && depth >= 5) {\r\n                var symbol = type.symbol;\r\n                var count = 0;\r\n                for (var i = 0; i < depth; i++) {\r\n                    var t = stack[i];\r\n                    if (t.flags & (4096  | 131072 ) && t.symbol === symbol) {\r\n                        count++;\r\n                        if (count >= 5)\r\n                            return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }","code-length":164,"reference":"Return true if the given type is part of a deeply nested chain of generic instantiations. We consider this to be the case when structural type comparisons have been started for 10 or more instantiations of the same generic type. It is possible, though highly unlikely, for this test to be true in a situation where a chain of instantiations is not infinitely expanding. Effectively, we will generate a false positive when two types are structurally equal to at least 10 levels, but unequal at some level beyond that.","result":"Detect deeply nested generic types.","score":[0.0,0.0317]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isVariableAssignedWithin(symbol, node) {\r\n            var links = getNodeLinks(node);\r\n            if (links.assignmentChecks) {\r\n                var cachedResult = links.assignmentChecks[symbol.id];\r\n                if (cachedResult !== undefined) {\r\n                    return cachedResult;\r\n                }\r\n            }\r\n            else {\r\n                links.assignmentChecks = {};\r\n            }\r\n            return links.assignmentChecks[symbol.id] = isAssignedIn(node);\r\n            function isAssignedInBinaryExpression(node) {\r\n                if (node.operatorToken.kind >= 56  && node.operatorToken.kind <= 68 ) {\r\n                    var n = node.left;\r\n                    while (n.kind === 172 ) {\r\n                        n = n.expression;\r\n                    }\r\n                    if (n.kind === 69  && getResolvedSymbol(n) === symbol) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return ts.forEachChild(node, isAssignedIn);\r\n            }\r\n            function isAssignedInVariableDeclaration(node) {\r\n                if (!ts.isBindingPattern(node.name) && getSymbolOfNode(node) === symbol && hasInitializer(node)) {\r\n                    return true;\r\n                }\r\n                return ts.forEachChild(node, isAssignedIn);\r\n            }\r\n            function isAssignedIn(node) {\r\n                switch (node.kind) {\r\n                    case 181 :\r\n                        return isAssignedInBinaryExpression(node);\r\n                    case 211 :\r\n                    case 163 :\r\n                        return isAssignedInVariableDeclaration(node);\r\n                    case 161 :\r\n                    case 162 :\r\n                    case 164 :\r\n                    case 165 :\r\n                    case 166 :\r\n                    case 167 :\r\n                    case 168 :\r\n                    case 169 :\r\n                    case 171 :\r\n                    case 189 :\r\n                    case 172 :\r\n                    case 179 :\r\n                    case 175 :\r\n                    case 178 :\r\n                    case 176 :\r\n                    case 177 :\r\n                    case 180 :\r\n                    case 184 :\r\n                    case 182 :\r\n                    case 185 :\r\n                    case 192 :\r\n                    case 193 :\r\n                    case 195 :\r\n                    case 196 :\r\n                    case 197 :\r\n                    case 198 :\r\n                    case 199 :\r\n                    case 200 :\r\n                    case 201 :\r\n                    case 204 :\r\n                    case 205 :\r\n                    case 206 :\r\n                    case 241 :\r\n                    case 242 :\r\n                    case 207 :\r\n                    case 208 :\r\n                    case 209 :\r\n                    case 244 :\r\n                    case 233 :\r\n                    case 234 :\r\n                    case 238 :\r\n                    case 239 :\r\n                    case 235 :\r\n                    case 240 :\r\n                        return ts.forEachChild(node, isAssignedIn);\r\n                }\r\n                return false;\r\n            }\r\n        }","code-length":723,"reference":"Check if a given variable is assigned within a given syntax node","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction narrowType(type, expr, assumeTrue) {\r\n                switch (expr.kind) {\r\n                    case 168 :\r\n                        return narrowTypeByTypePredicate(type, expr, assumeTrue);\r\n                    case 172 :\r\n                        return narrowType(type, expr.expression, assumeTrue);\r\n                    case 181 :\r\n                        var operator = expr.operatorToken.kind;\r\n                        if (operator === 32  || operator === 33 ) {\r\n                            return narrowTypeByEquality(type, expr, assumeTrue);\r\n                        }\r\n                        else if (operator === 51 ) {\r\n                            return narrowTypeByAnd(type, expr, assumeTrue);\r\n                        }\r\n                        else if (operator === 52 ) {\r\n                            return narrowTypeByOr(type, expr, assumeTrue);\r\n                        }\r\n                        else if (operator === 91 ) {\r\n                            return narrowTypeByInstanceof(type, expr, assumeTrue);\r\n                        }\r\n                        break;\r\n                    case 179 :\r\n                        if (expr.operator === 49 ) {\r\n                            return narrowType(type, expr.operand, !assumeTrue);\r\n                        }\r\n                        break;\r\n                }\r\n                return type;\r\n            }","code-length":292,"reference":"Narrow the given type based on the given expression having the assumed boolean value. The returned type will be a subtype or the same type as the argument.","result":"Narrow types by their expressions.","score":[0.0024,0.0389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getContextuallyTypedParameterType(parameter) {\r\n            var func = parameter.parent;\r\n            if (isFunctionExpressionOrArrowFunction(func) || ts.isObjectLiteralMethod(func)) {\r\n                if (isContextSensitive(func)) {\r\n                    var contextualSignature = getContextualSignature(func);\r\n                    if (contextualSignature) {\r\n                        var funcHasRestParameters = ts.hasRestParameter(func);\r\n                        var len = func.parameters.length - (funcHasRestParameters ? 1 : 0);\r\n                        var indexOfParameter = ts.indexOf(func.parameters, parameter);\r\n                        if (indexOfParameter < len) {\r\n                            return getTypeAtPosition(contextualSignature, indexOfParameter);\r\n                        }\r\n                        if (funcHasRestParameters &&\r\n                            indexOfParameter === (func.parameters.length - 1) &&\r\n                            isRestParameterIndex(contextualSignature, func.parameters.length - 1)) {\r\n                            return getTypeOfSymbol(ts.lastOrUndefined(contextualSignature.parameters));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return undefined;\r\n        }","code-length":267,"reference":"Return contextual type of parameter or undefined if no contextual type is available","result":"Return getContextuallyTypedParameterType.","score":[0.002,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getContextualTypeForInitializerExpression(node) {\r\n            var declaration = node.parent;\r\n            if (node === declaration.initializer) {\r\n                if (declaration.type) {\r\n                    return getTypeFromTypeNode(declaration.type);\r\n                }\r\n                if (declaration.kind === 138 ) {\r\n                    var type = getContextuallyTypedParameterType(declaration);\r\n                    if (type) {\r\n                        return type;\r\n                    }\r\n                }\r\n                if (ts.isBindingPattern(declaration.name)) {\r\n                    return getTypeFromBindingPattern(declaration.name,  true);\r\n                }\r\n            }\r\n            return undefined;\r\n        }","code-length":167,"reference":"In a variable, parameter or property declaration with a type annotation, the contextual type of an initializer expression is the type of the variable, parameter or property. Otherwise, in a parameter declaration of a contextually typed function expression, the contextual type of an initializer expression is the contextual type of the parameter. Otherwise, in a variable or parameter declaration with a binding pattern name, the contextual type of an initializer expression is the type implied by the binding pattern.","result":"Get contextual type for the initializer expression.","score":[0.0,0.0279]}
{"code":"\/*is used to<extra_id_0>\r\nfunction applyToContextualType(type, mapper) {\r\n            if (!(type.flags & 16384 )) {\r\n                return mapper(type);\r\n            }\r\n            var types = type.types;\r\n            var mappedType;\r\n            var mappedTypes;\r\n            for (var _i = 0; _i < types.length; _i++) {\r\n                var current = types[_i];\r\n                var t = mapper(current);\r\n                if (t) {\r\n                    if (!mappedType) {\r\n                        mappedType = t;\r\n                    }\r\n                    else if (!mappedTypes) {\r\n                        mappedTypes = [mappedType, t];\r\n                    }\r\n                    else {\r\n                        mappedTypes.push(t);\r\n                    }\r\n                }\r\n            }\r\n            return mappedTypes ? getUnionType(mappedTypes) : mappedType;\r\n        }","code-length":217,"reference":"Apply a mapping function to a contextual type and return the resulting type. If the contextual type is a union type, the mapping function is applied to each constituent type and a union of the resulting types is returned.","result":"Apply contextual types to a type.","score":[0.0015,0.084]}
{"code":"\/*is used to<extra_id_0>\r\nfunction contextualTypeHasIndexSignature(type, kind) {\r\n            return !!(type.flags & 16384  ? ts.forEach(type.types, function (t) { return getIndexTypeOfStructuredType(t, kind); }) : getIndexTypeOfStructuredType(type, kind));\r\n        }","code-length":78,"reference":"Return true if the given contextual type provides an index signature of the given kind","result":"Check if contextual type has index signature.","score":[0.0866,0.2223]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getContextualTypeForObjectLiteralMethod(node) {\r\n            ts.Debug.assert(ts.isObjectLiteralMethod(node));\r\n            if (isInsideWithStatementBody(node)) {\r\n                return undefined;\r\n            }\r\n            return getContextualTypeForObjectLiteralElement(node);\r\n        }","code-length":81,"reference":"In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one exists. Otherwise, it is the type of the string index signature in T, if one exists.","result":"Determine the contextual type of the object literal method.","score":[0.002,0.1175]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getContextualTypeForElementExpression(node) {\r\n            var arrayLiteral = node.parent;\r\n            var type = getContextualType(arrayLiteral);\r\n            if (type) {\r\n                var index = ts.indexOf(arrayLiteral.elements, node);\r\n                return getTypeOfPropertyOfContextualType(type, \"\" + index)\r\n                    || getIndexTypeOfContextualType(type, 1 )\r\n                    || (languageVersion >= 2  ? getElementTypeOfIterable(type,  undefined) : undefined);\r\n            }\r\n            return undefined;\r\n        }","code-length":139,"reference":"In an array literal contextually typed by a type T, the contextual type of an element expression at index N is the type of the property with the numeric name N in T, if one exists. Otherwise, if T has a numeric index signature, it is the type of the numeric index signature in T. Otherwise, in ES6 and higher, the contextual type is the iterated type of T.","result":"Resolve the type of the contextual type for an element expression.","score":[0.0023,0.0842]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNonGenericSignature(type) {\r\n            var signatures = getSignaturesOfStructuredType(type, 0 );\r\n            if (signatures.length === 1) {\r\n                var signature = signatures[0];\r\n                if (!signature.typeParameters) {\r\n                    return signature;\r\n                }\r\n            }\r\n        }","code-length":83,"reference":"If the given type is an object or union type, if that type has a single signature, and if that signature is non-generic, return the signature. Otherwise return undefined.","result":"Generic signature.","score":[0.0,0.019]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getContextualSignature(node) {\r\n            ts.Debug.assert(node.kind !== 143  || ts.isObjectLiteralMethod(node));\r\n            var type = ts.isObjectLiteralMethod(node)\r\n                ? getContextualTypeForObjectLiteralMethod(node)\r\n                : getContextualType(node);\r\n            if (!type) {\r\n                return undefined;\r\n            }\r\n            if (!(type.flags & 16384 )) {\r\n                return getNonGenericSignature(type);\r\n            }\r\n            var signatureList;\r\n            var types = type.types;\r\n            for (var _i = 0; _i < types.length; _i++) {\r\n                var current = types[_i];\r\n                var signature = getNonGenericSignature(current);\r\n                if (signature) {\r\n                    if (!signatureList) {\r\n                        signatureList = [signature];\r\n                    }\r\n                    else if (!compareSignatures(signatureList[0], signature,  false,  true, compareTypes)) {\r\n                        return undefined;\r\n                    }\r\n                    else {\r\n                        signatureList.push(signature);\r\n                    }\r\n                }\r\n            }\r\n            var result;\r\n            if (signatureList) {\r\n                result = cloneSignature(signatureList[0]);\r\n                result.resolvedReturnType = undefined;\r\n                result.unionSignatures = signatureList;\r\n            }\r\n            return result;\r\n        }","code-length":346,"reference":"Return the contextual signature for a given expression node. A contextual type provides a contextual signature if it has a single call signature and if that call signature is non-generic. If the contextual type is a union type, get the signature from each type possible and if they are all identical ignoring their return type, the result is same signature but with return type as union type of return types from these signatures","result":"Return getContextualType.","score":[1.912e-16,0.0076]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getJsxAttributePropertySymbol(attrib) {\r\n            var attributesType = getJsxElementAttributesType(attrib.parent);\r\n            var prop = getPropertyOfType(attributesType, attrib.name.text);\r\n            return prop || unknownSymbol;\r\n        }","code-length":69,"reference":"Given a JSX attribute, returns the symbol for the corresponds propertyof the element attributes type.","result":"Resolve the property names in the generated code.","score":[0.0688,0.0699]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkClassPropertyAccess(node, left, type, prop) {\r\n            var flags = getDeclarationFlagsFromSymbol(prop);\r\n            var declaringClass = getDeclaredTypeOfSymbol(prop.parent);\r\n            if (left.kind === 95 ) {\r\n                var errorNode = node.kind === 166  ?\r\n                    node.name :\r\n                    node.right;\r\n                if (getDeclarationKindFromSymbol(prop) !== 143 ) {\r\n                    error(errorNode, ts.Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);\r\n                    return false;\r\n                }\r\n                if (flags & 256 ) {\r\n                    error(errorNode, ts.Diagnostics.Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression, symbolToString(prop), typeToString(declaringClass));\r\n                    return false;\r\n                }\r\n            }\r\n            if (!(flags & (32  | 64 ))) {\r\n                return true;\r\n            }\r\n            var enclosingClassDeclaration = ts.getContainingClass(node);\r\n            var enclosingClass = enclosingClassDeclaration ? getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClassDeclaration)) : undefined;\r\n            if (flags & 32 ) {\r\n                if (declaringClass !== enclosingClass) {\r\n                    error(node, ts.Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(declaringClass));\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            if (left.kind === 95 ) {\r\n                return true;\r\n            }\r\n            if (!enclosingClass || !hasBaseType(enclosingClass, declaringClass)) {\r\n                error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(declaringClass));\r\n                return false;\r\n            }\r\n            if (flags & 128 ) {\r\n                return true;\r\n            }\r\n            if (type.flags & 33554432 ) {\r\n                type = getConstraintOfTypeParameter(type);\r\n            }\r\n            if (!(getTargetType(type).flags & (1024  | 2048 ) && hasBaseType(type, enclosingClass))) {\r\n                error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1, symbolToString(prop), typeToString(enclosingClass));\r\n                return false;\r\n            }\r\n            return true;\r\n        }","code-length":652,"reference":"Check whether the requested property access is valid.\nReturns true if node is a valid property access, and false otherwise.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPropertyNameForIndexedAccess(indexArgumentExpression, indexArgumentType) {\r\n            if (indexArgumentExpression.kind === 9  || indexArgumentExpression.kind === 8 ) {\r\n                return indexArgumentExpression.text;\r\n            }\r\n            if (indexArgumentExpression.kind === 167  || indexArgumentExpression.kind === 166 ) {\r\n                var value = getConstantValue(indexArgumentExpression);\r\n                if (value !== undefined) {\r\n                    return value.toString();\r\n                }\r\n            }\r\n            if (checkThatExpressionIsProperSymbolReference(indexArgumentExpression, indexArgumentType,  false)) {\r\n                var rightHandSideName = indexArgumentExpression.name.text;\r\n                return ts.getPropertyNameForKnownSymbolName(rightHandSideName);\r\n            }\r\n            return undefined;\r\n        }","code-length":200,"reference":"If indexArgumentExpression is a string literal or number literal, returns its text.","result":"Determine the property name for indexed access.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSingleCallSignature(type) {\r\n            if (type.flags & 80896 ) {\r\n                var resolved = resolveStructuredTypeMembers(type);\r\n                if (resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0 &&\r\n                    resolved.properties.length === 0 && !resolved.stringIndexType && !resolved.numberIndexType) {\r\n                    return resolved.callSignatures[0];\r\n                }\r\n            }\r\n            return undefined;\r\n        }","code-length":122,"reference":"If type has a single call signature and no other members, return that signature. Otherwise, return undefined.","result":"Resolve the call signatures of a single type.","score":[0.0706,0.2329]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEffectiveCallArguments(node) {\r\n            var args;\r\n            if (node.kind === 170 ) {\r\n                var template = node.template;\r\n                args = [undefined];\r\n                if (template.kind === 183 ) {\r\n                    ts.forEach(template.templateSpans, function (span) {\r\n                        args.push(span.expression);\r\n                    });\r\n                }\r\n            }\r\n            else if (node.kind === 139 ) {\r\n                return undefined;\r\n            }\r\n            else {\r\n                args = node.arguments || emptyArray;\r\n            }\r\n            return args;\r\n        }","code-length":162,"reference":"Returns the effective arguments for an expression that works like a function invocation.","result":"Determine the effective arguments.","score":[0.0476,0.155]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEffectiveDecoratorArgumentType(node, argIndex) {\r\n            if (argIndex === 0) {\r\n                return getEffectiveDecoratorFirstArgumentType(node.parent);\r\n            }\r\n            else if (argIndex === 1) {\r\n                return getEffectiveDecoratorSecondArgumentType(node.parent);\r\n            }\r\n            else if (argIndex === 2) {\r\n                return getEffectiveDecoratorThirdArgumentType(node.parent);\r\n            }\r\n            ts.Debug.fail(\"Decorators should not have a fourth synthetic argument.\");\r\n            return unknownType;\r\n        }","code-length":142,"reference":"Returns the effective argument type for the provided argument to a decorator.","result":"Determine the argument type of the decorated function.","score":[0.1417,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEffectiveArgumentType(node, argIndex, arg) {\r\n            if (node.kind === 139 ) {\r\n                return getEffectiveDecoratorArgumentType(node, argIndex);\r\n            }\r\n            else if (argIndex === 0 && node.kind === 170 ) {\r\n                return globalTemplateStringsArrayType;\r\n            }\r\n            return undefined;\r\n        }","code-length":95,"reference":"Gets the effective argument type for an argument in a call expression.","result":"Resolve the argument type.","score":[0.0514,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEffectiveArgument(node, args, argIndex) {\r\n            if (node.kind === 139  ||\r\n                (argIndex === 0 && node.kind === 170 )) {\r\n                return undefined;\r\n            }\r\n            return args[argIndex];\r\n        }","code-length":74,"reference":"Gets the effective argument expression for an argument in a call expression.","result":"Determine the effective argument.","score":[0.0611,0.1674]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEffectiveArgumentErrorNode(node, argIndex, arg) {\r\n            if (node.kind === 139 ) {\r\n                return node.expression;\r\n            }\r\n            else if (argIndex === 0 && node.kind === 170 ) {\r\n                return node.template;\r\n            }\r\n            else {\r\n                return arg;\r\n            }\r\n        }","code-length":98,"reference":"Gets the error node to use when reporting errors for an effective argument.","result":"Determine the effective argument error node.","score":[0.0791,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDiagnosticHeadMessageForDecoratorResolution(node) {\r\n            switch (node.parent.kind) {\r\n                case 214 :\r\n                case 186 :\r\n                    return ts.Diagnostics.Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression;\r\n                case 138 :\r\n                    return ts.Diagnostics.Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression;\r\n                case 141 :\r\n                    return ts.Diagnostics.Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression;\r\n                case 143 :\r\n                case 145 :\r\n                case 146 :\r\n                    return ts.Diagnostics.Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression;\r\n            }\r\n        }","code-length":222,"reference":"Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression.","result":"Get the diagnostic head.","score":[0.0115,0.1539]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveDecorator(node, candidatesOutArray) {\r\n            var funcType = checkExpression(node.expression);\r\n            var apparentType = getApparentType(funcType);\r\n            if (apparentType === unknownType) {\r\n                return resolveErrorCall(node);\r\n            }\r\n            var callSignatures = getSignaturesOfType(apparentType, 0 );\r\n            if (funcType === anyType || (!callSignatures.length && !(funcType.flags & 16384 ) && isTypeAssignableTo(funcType, globalFunctionType))) {\r\n                return resolveUntypedCall(node);\r\n            }\r\n            var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);\r\n            if (!callSignatures.length) {\r\n                var errorInfo;\r\n                errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\r\n                errorInfo = ts.chainDiagnosticMessages(errorInfo, headMessage);\r\n                diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(node, errorInfo));\r\n                return resolveErrorCall(node);\r\n            }\r\n            return resolveCall(node, callSignatures, candidatesOutArray, headMessage);\r\n        }","code-length":299,"reference":"Resolves a decorator as if it were a call expression.","result":"Return resolveCall.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getResolvedSignature(node, candidatesOutArray) {\r\n            var links = getNodeLinks(node);\r\n            if (!links.resolvedSignature || candidatesOutArray) {\r\n                links.resolvedSignature = anySignature;\r\n                if (node.kind === 168 ) {\r\n                    links.resolvedSignature = resolveCallExpression(node, candidatesOutArray);\r\n                }\r\n                else if (node.kind === 169 ) {\r\n                    links.resolvedSignature = resolveNewExpression(node, candidatesOutArray);\r\n                }\r\n                else if (node.kind === 170 ) {\r\n                    links.resolvedSignature = resolveTaggedTemplateExpression(node, candidatesOutArray);\r\n                }\r\n                else if (node.kind === 139 ) {\r\n                    links.resolvedSignature = resolveDecorator(node, candidatesOutArray);\r\n                }\r\n                else {\r\n                    ts.Debug.fail(\"Branch in 'getResolvedSignature' should be unreachable.\");\r\n                }\r\n            }\r\n            return links.resolvedSignature;\r\n        }","code-length":247,"reference":"candidatesOutArray is passed by signature help in the language service, and collectCandidates must fill it up with the appropriate candidate signatures","result":"Resolve the signature of a function .","score":[0.026,0.051]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkCallExpression(node) {\r\n            checkGrammarTypeArguments(node, node.typeArguments) || checkGrammarArguments(node, node.arguments);\r\n            var signature = getResolvedSignature(node);\r\n            if (node.expression.kind === 95 ) {\r\n                return voidType;\r\n            }\r\n            if (node.kind === 169 ) {\r\n                var declaration = signature.declaration;\r\n                if (declaration &&\r\n                    declaration.kind !== 144  &&\r\n                    declaration.kind !== 148  &&\r\n                    declaration.kind !== 153 ) {\r\n                    if (compilerOptions.noImplicitAny) {\r\n                        error(node, ts.Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);\r\n                    }\r\n                    return anyType;\r\n                }\r\n            }\r\n            return getReturnTypeOfSignature(signature);\r\n        }","code-length":227,"reference":"Syntactically and semantically checks a call or new expression.\n","result":"Check the arguments of a call expression.","score":[0.1899,0.3587]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assignBindingElementTypes(node) {\r\n            if (ts.isBindingPattern(node.name)) {\r\n                for (var _i = 0, _a = node.name.elements; _i < _a.length; _i++) {\r\n                    var element = _a[_i];\r\n                    if (element.kind !== 187 ) {\r\n                        if (element.name.kind === 69 ) {\r\n                            getSymbolLinks(getSymbolOfNode(element)).type = getTypeForBindingElement(element);\r\n                        }\r\n                        assignBindingElementTypes(element);\r\n                    }\r\n                }\r\n            }\r\n        }","code-length":158,"reference":"When contextual typing assigns a type to a parameter that contains a binding pattern, we also need to push the destructured type into the contained binding elements.","result":"Detect if a node is a binding pattern.","score":[0.0202,0.0598]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkTypeParameter(node) {\r\n            if (node.expression) {\r\n                grammarErrorOnFirstToken(node.expression, ts.Diagnostics.Type_expected);\r\n            }\r\n            checkSourceElement(node.constraint);\r\n            if (produceDiagnostics) {\r\n                checkTypeParameterHasIllegalReferencesInConstraint(node);\r\n                checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_parameter_name_cannot_be_0);\r\n            }\r\n        }","code-length":124,"reference":"DECLARATION AND STATEMENT TYPE CHECKING","result":"Check grammar syntax.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPromisedType(promise) {\r\nd;\r\n            }\r\n            if ((promise.flags & 4096 ) && promise.target === tryGetGlobalPromiseType()) {\r\n                return promise.typeArguments[0];\r\n            }\r\n            var globalPromiseLikeType = getInstantiatedGlobalPromiseLikeType();\r\n            if (globalPromiseLikeType === emptyObjectType || !isTypeAssignableTo(promise, globalPromiseLikeType)) {\r\n                return undefined;\r\n            }\r\n            var thenFunction = getTypeOfPropertyOfType(promise, \"then\");\r\n            if (thenFunction && (thenFunction.flags & 1 )) {\r\n                return undefined;\r\n            }\r\n            var thenSignatures = thenFunction ? getSignaturesOfType(thenFunction, 0 ) : emptyArray;\r\n            if (thenSignatures.length === 0) {\r\n                return undefined;\r\n            }\r\n            var onfulfilledParameterType = getUnionType(ts.map(thenSignatures, getTypeOfFirstParameterOfSignature));\r\n            if (onfulfilledParameterType.flags & 1 ) {\r\n                return undefined;\r\n            }\r\n            var onfulfilledParameterSignatures = getSignaturesOfType(onfulfilledParameterType, 0 );\r\n            if (onfulfilledParameterSignatures.length === 0) {\r\n                return undefined;\r\n            }\r\n            var valueParameterType = getUnionType(ts.map(onfulfilledParameterSignatures, getTypeOfFirstParameterOfSignature));\r\n            return valueParameterType;\r\n        }","code-length":346,"reference":"Gets the \"promised type\" of a promise.\n","result":"Function getPromisedType.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkDecorator(node) {\r\n            var signature = getResolvedSignature(node);\r\n            var returnType = getReturnTypeOfSignature(signature);\r\n            if (returnType.flags & 1 ) {\r\n                return;\r\n            }\r\n            var expectedReturnType;\r\n            var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);\r\n            var errorInfo;\r\n            switch (node.parent.kind) {\r\n                case 214 :\r\n                    var classSymbol = getSymbolOfNode(node.parent);\r\n                    var classConstructorType = getTypeOfSymbol(classSymbol);\r\n                    expectedReturnType = getUnionType([classConstructorType, voidType]);\r\n                    break;\r\n                case 138 :\r\n                    expectedReturnType = voidType;\r\n                    errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any);\r\n                    break;\r\n                case 141 :\r\n                    expectedReturnType = voidType;\r\n                    errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_return_type_of_a_property_decorator_function_must_be_either_void_or_any);\r\n                    break;\r\n                case 143 :\r\n                case 145 :\r\n                case 146 :\r\n                    var methodType = getTypeOfNode(node.parent);\r\n                    var descriptorType = createTypedPropertyDescriptorType(methodType);\r\n                    expectedReturnType = getUnionType([descriptorType, voidType]);\r\n                    break;\r\n            }\r\n            checkTypeAssignableTo(returnType, expectedReturnType, node, headMessage, errorInfo);\r\n        }","code-length":402,"reference":"Check a decorator","result":"Return.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkTypeNodeAsExpression(node) {\r\n            if (node && node.kind === 151 ) {\r\n                var root = getFirstIdentifier(node.typeName);\r\n                var meaning = root.parent.kind === 151  ? 793056  : 1536 ;\r\n                var rootSymbol = resolveName(root, root.text, meaning | 8388608 ,  undefined,  undefined);\r\n                if (rootSymbol && rootSymbol.flags & 8388608 ) {\r\n                    var aliasTarget = resolveAlias(rootSymbol);\r\n                    if (aliasTarget.flags & 107455  && !isConstEnumOrConstEnumOnlyModule(resolveAlias(rootSymbol))) {\r\n                        markAliasSymbolAsReferenced(rootSymbol);\r\n                    }\r\n                }\r\n            }\r\n        }","code-length":192,"reference":"Checks a type reference node as an expression.","result":"Check type node as expression.","score":[0.2218,0.4831]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkTypeAnnotationAsExpression(node) {\r\n            switch (node.kind) {\r\n                case 141 :\r\n                    checkTypeNodeAsExpression(node.type);\r\n                    break;\r\n                case 138 :\r\n                    checkTypeNodeAsExpression(node.type);\r\n                    break;\r\n                case 143 :\r\n                    checkTypeNodeAsExpression(node.type);\r\n                    break;\r\n                case 145 :\r\n                    checkTypeNodeAsExpression(node.type);\r\n                    break;\r\n                case 146 :\r\n                    checkTypeNodeAsExpression(ts.getSetAccessorTypeAnnotationNode(node));\r\n                    break;\r\n            }\r\n        }","code-length":163,"reference":"Checks the type annotation of an accessor declaration or property declaration asan expression if it is a type reference to a type with a value declaration.","result":"Check type annotations as expressions.","score":[0.0036,0.0837]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkDecorators(node) {\r\n            if (!node.decorators) {\r\n                return;\r\n            }\r\n            if (!ts.nodeCanBeDecorated(node)) {\r\n                return;\r\n            }\r\n            if (!compilerOptions.experimentalDecorators) {\r\n                error(node, ts.Diagnostics.Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Specify_experimentalDecorators_to_remove_this_warning);\r\n            }\r\n            if (compilerOptions.emitDecoratorMetadata) {\r\n                switch (node.kind) {\r\n                    case 214 :\r\n                        var constructor = ts.getFirstConstructorWithBody(node);\r\n                        if (constructor) {\r\n                            checkParameterTypeAnnotationsAsExpressions(constructor);\r\n                        }\r\n                        break;\r\n                    case 143 :\r\n                        checkParameterTypeAnnotationsAsExpressions(node);\r\n                    case 146 :\r\n                    case 145 :\r\n                    case 141 :\r\n                    case 138 :\r\n                        checkTypeAnnotationAsExpression(node);\r\n                        break;\r\n                }\r\n            }\r\n            emitDecorate = true;\r\n            if (node.kind === 138 ) {\r\n                emitParam = true;\r\n            }\r\n            ts.forEach(node.decorators, checkDecorator);\r\n        }","code-length":337,"reference":"Check the decorators of a node","result":"Check the decorators of a class.","score":[0.8034,0.83]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkIfThisIsCapturedInEnclosingScope(node) {\r\n            var current = node;\r\n            while (current) {\r\n                if (getNodeCheckFlags(current) & 4 ) {\r\n                    var isDeclaration_1 = node.kind !== 69 ;\r\n                    if (isDeclaration_1) {\r\n                        error(node.name, ts.Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);\r\n                    }\r\n                    else {\r\n                        error(node, ts.Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);\r\n                    }\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n        }","code-length":196,"reference":"this function will run after checking the source file so 'CaptureThis' is correct for all nodes","result":"Check if this is captured in the enclosing scope.","score":[0.0737,0.1307]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkParameterInitializer(node) {\r\n            if (ts.getRootDeclaration(node).kind !== 138 ) {\r\n                return;\r\n            }\r\n            var func = ts.getContainingFunction(node);\r\n            visit(node.initializer);\r\n            function visit(n) {\r\n                if (n.kind === 69 ) {\r\n                    var referencedSymbol = getNodeLinks(n).resolvedSymbol;\r\n                    if (referencedSymbol && referencedSymbol !== unknownSymbol && getSymbol(func.locals, referencedSymbol.name, 107455 ) === referencedSymbol) {\r\n                        if (referencedSymbol.valueDeclaration.kind === 138 ) {\r\n                            if (referencedSymbol.valueDeclaration === node) {\r\n                                error(n, ts.Diagnostics.Parameter_0_cannot_be_referenced_in_its_initializer, ts.declarationNameToString(node.name));\r\n                                return;\r\n                            }\r\n                            if (referencedSymbol.valueDeclaration.pos < node.pos) {\r\n                                return;\r\n                            }\r\n                        }\r\n                        error(n, ts.Diagnostics.Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it, ts.declarationNameToString(node.name), ts.declarationNameToString(n));\r\n                    }\r\n                }\r\n                else {\r\n                    ts.forEachChild(n, visit);\r\n                }\r\n            }\r\n        }","code-length":337,"reference":"Check that a parameter initializer contains no references to parameters declared to the right of itself","result":"Check parameter initializers.","score":[0.0064,0.068]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkVariableLikeDeclaration(node) {\r\n            checkDecorators(node);\r\n            checkSourceElement(node.type);\r\n            if (node.name.kind === 136 ) {\r\n                checkComputedPropertyName(node.name);\r\n                if (node.initializer) {\r\n                    checkExpressionCached(node.initializer);\r\n                }\r\n            }\r\n            if (ts.isBindingPattern(node.name)) {\r\n                ts.forEach(node.name.elements, checkSourceElement);\r\n            }\r\n            if (node.initializer && ts.getRootDeclaration(node).kind === 138  && ts.nodeIsMissing(ts.getContainingFunction(node).body)) {\r\n                error(node, ts.Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);\r\n                return;\r\n            }\r\n            if (ts.isBindingPattern(node.name)) {\r\n                if (node.initializer) {\r\n                    checkTypeAssignableTo(checkExpressionCached(node.initializer), getWidenedTypeForVariableLikeDeclaration(node), node,  undefined);\r\n                    checkParameterInitializer(node);\r\n                }\r\n                return;\r\n            }\r\n            var symbol = getSymbolOfNode(node);\r\n            var type = getTypeOfVariableOrParameterOrProperty(symbol);\r\n            if (node === symbol.valueDeclaration) {\r\n                if (node.initializer) {\r\n                    checkTypeAssignableTo(checkExpressionCached(node.initializer), type, node,  undefined);\r\n                    checkParameterInitializer(node);\r\n                }\r\n            }\r\n            else {\r\n                var declarationType = getWidenedTypeForVariableLikeDeclaration(node);\r\n                if (type !== unknownType && declarationType !== unknownType && !isTypeIdenticalTo(type, declarationType)) {\r\n                    error(node.name, ts.Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2, ts.declarationNameToString(node.name), typeToString(type), typeToString(declarationType));\r\n                }\r\n                if (node.initializer) {\r\n                    checkTypeAssignableTo(checkExpressionCached(node.initializer), declarationType, node,  undefined);\r\n                }\r\n            }\r\n            if (node.kind !== 141  && node.kind !== 140 ) {\r\n                checkExportsOnMergedDeclarations(node);\r\n                if (node.kind === 211  || node.kind === 163 ) {\r\n                    checkVarDeclaredNamesNotShadowed(node);\r\n                }\r\n                checkCollisionWithCapturedSuperVariable(node, node.name);\r\n                checkCollisionWithCapturedThisVariable(node, node.name);\r\n                checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\r\n            }\r\n        }","code-length":691,"reference":"Check variable, parameter, or property declaration","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkElementTypeOfIterable(iterable, errorNode) {\r\n            var elementType = getElementTypeOfIterable(iterable, errorNode);\r\n            if (errorNode && elementType) {\r\n                checkTypeAssignableTo(iterable, createIterableType(elementType), errorNode);\r\n            }\r\n            return elementType || anyType;\r\n        }","code-length":84,"reference":"When errorNode is undefined, it means we should not report any errors.","result":"Check the element type of an iterable.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkTypeParameters(typeParameterDeclarations) {\r\n            if (typeParameterDeclarations) {\r\n                for (var i = 0, n = typeParameterDeclarations.length; i < n; i++) {\r\n                    var node = typeParameterDeclarations[i];\r\n                    checkTypeParameter(node);\r\n                    if (produceDiagnostics) {\r\n                        for (var j = 0; j < i; j++) {\r\n                            if (typeParameterDeclarations[j].symbol === node.symbol) {\r\n                                error(node.name, ts.Diagnostics.Duplicate_identifier_0, ts.declarationNameToString(node.name));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }","code-length":173,"reference":"Check each type parameter and check that list has no duplicate type parameter declarations","result":"Check type parameters .","score":[0.0312,0.1966]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkSourceFileWorker(node) {\r\n            var links = getNodeLinks(node);\r\n            if (!(links.flags & 1 )) {\r\n                if (node.isDefaultLib && compilerOptions.skipDefaultLibCheck) {\r\n                    return;\r\n                }\r\n                checkGrammarSourceFile(node);\r\n                emitExtends = false;\r\n                emitDecorate = false;\r\n                emitParam = false;\r\n                potentialThisCollisions.length = 0;\r\n                ts.forEach(node.statements, checkSourceElement);\r\n                checkFunctionAndClassExpressionBodies(node);\r\n                if (ts.isExternalModule(node)) {\r\n                    checkExternalModuleExports(node);\r\n                }\r\n                if (potentialThisCollisions.length) {\r\n                    ts.forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);\r\n                    potentialThisCollisions.length = 0;\r\n                }\r\n                if (emitExtends) {\r\n                    links.flags |= 8 ;\r\n                }\r\n                if (emitDecorate) {\r\n                    links.flags |= 16 ;\r\n                }\r\n                if (emitParam) {\r\n                    links.flags |= 32 ;\r\n                }\r\n                if (emitAwaiter) {\r\n                    links.flags |= 64 ;\r\n                }\r\n                if (emitGenerator || (emitAwaiter && languageVersion < 2 )) {\r\n                    links.flags |= 128 ;\r\n                }\r\n                links.flags |= 1 ;\r\n            }\r\n        }","code-length":365,"reference":"Fully type check a source file and collect the relevant diagnostics.","result":"Check source files .","score":[0.0555,0.2481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copySymbol(symbol, meaning) {\r\n                if (symbol.flags & meaning) {\r\n                    var id = symbol.name;\r\n                    if (!ts.hasProperty(symbols, id)) {\r\n                        symbols[id] = symbol;\r\n                    }\r\n                }\r\n            }","code-length":77,"reference":"Copy the given symbol into symbol tables if the symbol has the given meaning\nand it doesn't already existed in the symbol table\n","result":"Copy symbol definitions.","score":[0.0006,0.0476]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getParentTypeOfClassElement(node) {\r\n            var classSymbol = getSymbolOfNode(node.parent);\r\n            return node.flags & 128 \r\n                ? getTypeOfSymbol(classSymbol)\r\n                : getDeclaredTypeOfSymbol(classSymbol);\r\n        }","code-length":70,"reference":"Gets either the static or instance type of a class element, based on","result":"Resolve the type of the class element.","score":[0.1153,0.2545]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getAugmentedPropertiesOfType(type) {\r\n            type = getApparentType(type);\r\n            var propsByName = createSymbolTable(getPropertiesOfType(type));\r\n            if (getSignaturesOfType(type, 0 ).length || getSignaturesOfType(type, 1 ).length) {\r\n                ts.forEach(getPropertiesOfType(globalFunctionType), function (p) {\r\n                    if (!ts.hasProperty(propsByName, p.name)) {\r\n                        propsByName[p.name] = p;\r\n                    }\r\n                });\r\n            }\r\n            return getNamedMembers(propsByName);\r\n        }","code-length":154,"reference":"Return the list of properties of the given type, augmented with properties from Function if the type has call or construct signatures","result":"Generate the anonymous class for the type .","score":[0.0378,0.1241]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getReferencedExportContainer(node) {\r\n            var symbol = getReferencedValueSymbol(node);\r\n            if (symbol) {\r\n                if (symbol.flags & 1048576 ) {\r\n                    var exportSymbol = getMergedSymbol(symbol.exportSymbol);\r\n                    if (exportSymbol.flags & 944 ) {\r\n                        return undefined;\r\n                    }\r\n                    symbol = exportSymbol;\r\n                }\r\n                var parentSymbol = getParentOfSymbol(symbol);\r\n                if (parentSymbol) {\r\n                    if (parentSymbol.flags & 512  && parentSymbol.valueDeclaration.kind === 248 ) {\r\n                        return parentSymbol.valueDeclaration;\r\n                    }\r\n                    for (var n = node.parent; n; n = n.parent) {\r\n                        if ((n.kind === 218  || n.kind === 217 ) && getSymbolOfNode(n) === parentSymbol) {\r\n                            return n;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }","code-length":245,"reference":"Emitter support When resolved as an expression identifier, if the given node references an exported entity, return the declaration node of the exported entity's container. Otherwise, return undefined.","result":"Find the export container of a reference .","score":[0.0136,0.1214]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getReferencedImportDeclaration(node) {\r\n            var symbol = getReferencedValueSymbol(node);\r\n            return symbol && symbol.flags & 8388608  ? getDeclarationOfAliasSymbol(symbol) : undefined;\r\n        }","code-length":62,"reference":"When resolved as an expression identifier, if the given node references an import, return the declaration of that import. Otherwise, return undefined.","result":"Resolve references to import declarations.","score":[0.008,0.0493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getReferencedNestedRedeclaration(node) {\r\n            var symbol = getReferencedValueSymbol(node);\r\n            return symbol && isNestedRedeclarationSymbol(symbol) ? symbol.valueDeclaration : undefined;\r\n        }","code-length":58,"reference":"When resolved as an expression identifier, if the given node references a nested block scoped entity with a name that hides an existing name, return the declaration of that entity. Otherwise, return undefined.","result":"Resolve references to nested redeclarations.","score":[0.0011,0.0497]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getExportDefaultTempVariableName() {\r\n            var baseName = \"_default\";\r\n            if (!ts.hasProperty(currentSourceFile.identifiers, baseName)) {\r\n                return baseName;\r\n            }\r\n            var count = 0;\r\n            while (true) {\r\n                var name_18 = baseName + \"_\" + (++count);\r\n                if (!ts.hasProperty(currentSourceFile.identifiers, name_18)) {\r\n                    return name_18;\r\n                }\r\n            }\r\n        }","code-length":125,"reference":"Return a temp variable name to be used in `export default` statements. The temp name will be of the form _default_counter. Note that export default is only allowed at most once in a module, so we do not need to keep track of created temp names.","result":"Export default temp variable names.","score":[0.0001,0.0888]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emitFiles(resolver, host, targetSourceFile) {\r\n        var extendsHelper = \"\\nvar __extends = (this && this.__extends) || function (d, b) {\\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\\n    function __() { this.constructor = d; }\\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\\n};\";\r\n        var decorateHelper = \"\\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\\n    if (typeof Reflect === \\\"object\\\" && typeof Reflect.decorate === \\\"function\\\") r = Reflect.decorate(decorators, target, key, desc);\\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\\n};\";\r\n        var metadataHelper = \"\\nvar __metadata = (this && this.__metadata) || function (k, v) {\\n    if (typeof Reflect === \\\"object\\\" && typeof Reflect.metadata === \\\"function\\\") return Reflect.metadata(k, v);\\n};\";\r\n        var paramHelper = \"\\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\\n    return function (target, key) { decorator(target, key, paramIndex); }\\n};\";\r\n        var awaiterHelper = \"\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, Promise, generator) {\\n    return new Promise(function (resolve, reject) {\\n        generator = generator.call(thisArg, _arguments);\\n        function cast(value) { return value instanceof Promise && value.constructor === Promise ? value : new Promise(function (resolve) { resolve(value); }); }\\n        function onfulfill(value) { try { step(\\\"next\\\", value); } catch (e) { reject(e); } }\\n        function onreject(value) { try { step(\\\"throw\\\", value); } catch (e) { reject(e); } }\\n        function step(verb, value) {\\n            var result = generator[verb](value);\\n            result.done ? resolve(result.value) : cast(result.value).then(onfulfill, onreject);\\n        }\\n        step(\\\"next\\\", void 0);\\n    });\\n};\";\r\n        var compilerOptions = host.getCompilerOptions();\r\n        var languageVersion = compilerOptions.target || 0 ;\r\n        var modulekind = compilerOptions.module ? compilerOptions.module : languageVersion === 2  ? 5  : 0 ;\r\n        var sourceMapDataList = compilerOptions.sourceMap || compilerOptions.inlineSourceMap ? [] : undefined;\r\n        var diagnostics = [];\r\n        var newLine = host.getNewLine();\r\n        var jsxDesugaring = host.getCompilerOptions().jsx !== 1 ;\r\n        var shouldEmitJsx = function (s) { return (s.languageVariant === 1  && !jsxDesugaring); };\r\n        if (targetSourceFile === undefined) {\r\n            ts.forEach(host.getSourceFiles(), function (sourceFile) {\r\n                if (ts.shouldEmitToOwnFile(sourceFile, compilerOptions)) {\r\n                    var jsFilePath = ts.getOwnEmitOutputFilePath(sourceFile, host, shouldEmitJsx(sourceFile) ? \".jsx\" : \".js\");\r\n                    emitFile(jsFilePath, sourceFile);\r\n                }\r\n            });\r\n            if (compilerOptions.outFile || compilerOptions.out) {\r\n                emitFile(compilerOptions.outFile || compilerOptions.out);\r\n            }\r\n        }\r\n        else {\r\n            if (ts.shouldEmitToOwnFile(targetSourceFile, compilerOptions)) {\r\n                var jsFilePath = ts.getOwnEmitOutputFilePath(targetSourceFile, host, shouldEmitJsx(targetSourceFile) ? \".jsx\" : \".js\");\r\n                emitFile(jsFilePath, targetSourceFile);\r\n            }\r\n            else if (!ts.isDeclarationFile(targetSourceFile) && (compilerOptions.outFile || compilerOptions.out)) {\r\n                emitFile(compilerOptions.outFile || compilerOptions.out);\r\n            }\r\n        }\r\n        diagnostics = ts.sortAndDeduplicateDiagnostics(diagnostics);\r\n        return {\r\n            emitSkipped: false,\r\n            diagnostics: diagnostics,\r\n            sourceMaps: sourceMapDataList\r\n        };\r\n        function isUniqueLocalName(name, container) {\r\n            for (var node = container; ts.isNodeDescendentOf(node, container); node = node.nextContainer) {\r\n                if (node.locals && ts.hasProperty(node.locals, name)) {\r\n                    if (node.locals[name].flags & (107455  | 1048576  | 8388608 )) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        function emitJavaScript(jsFilePath, root) {\r\n            var writer = ts.createTextWriter(newLine);\r\n            var write = writer.write, writeTextOfNode = writer.writeTextOfNode, writeLine = writer.writeLine, increaseIndent = writer.increaseIndent, decreaseIndent = writer.decreaseIndent;\r\n            var currentSourceFile;\r\n            var exportFunctionForFile;\r\n            var generatedNameSet = {};\r\n            var nodeToGeneratedName = [];\r\n            var computedPropertyNamesToGeneratedNames;\r\n            var extendsEmitted = false;\r\n            var decorateEmitted = false;\r\n            var paramEmitted = false;\r\n            var awaiterEmitted = false;\r\n            var tempFlags = 0;\r\n            var tempVariables;\r\n            var tempParameters;\r\n            var externalImports;\r\n            var exportSpecifiers;\r\n            var exportEquals;\r\n            var hasExportStars;\r\n                        var writeEmittedFiles = writeJavaScriptFile;\r\n            var detachedCommentsInfo;\r\n            var writeComment = ts.writeCommentRange;\r\n                        var emit = emitNodeWithCommentsAndWithoutSourcemap;\r\n                        var emitStart = function (node) { };\r\n                        var emitEnd = function (node) { };\r\n                        var emitToken = emitTokenText;\r\n                        var scopeEmitStart = function (scopeDeclaration, scopeName) { };\r\n                        var scopeEmitEnd = function () { };\r\n                        var sourceMapData;\r\n                        var emitLeadingCommentsOfPosition = compilerOptions.removeComments ? function (pos) { } : emitLeadingCommentsOfPositionWorker;\r\n            var moduleEmitDelegates = (_a = {},\r\n                    _a[5 ] = emitES6Module,\r\n                    _a[2 ] = emitAMDModule,\r\n                    _a[4 ] = emitSystemModule,\r\n                    _a[3 ] = emitUMDModule,\r\n                    _a[1 ] = emitCommonJSModule,\r\n                    _a\r\n            );\r\n            if (compilerOptions.sourceMap || compilerOptions.inlineSourceMap) {\r\n                initializeEmitterWithSourceMaps();\r\n            }\r\n            if (root) {\r\n                emitSourceFile(root);\r\n            }\r\n            else {\r\n                ts.forEach(host.getSourceFiles(), function (sourceFile) {\r\n                    if (!isExternalModuleOrDeclarationFile(sourceFile)) {\r\n                        emitSourceFile(sourceFile);\r\n                    }\r\n                });\r\n            }\r\n            writeLine();\r\n            writeEmittedFiles(writer.getText(),  compilerOptions.emitBOM);\r\n            return;\r\n            function emitSourceFile(sourceFile) {\r\n                currentSourceFile = sourceFile;\r\n                exportFunctionForFile = undefined;\r\n                emit(sourceFile);\r\n            }\r\n            function isUniqueName(name) {\r\n                return !resolver.hasGlobalName(name) &&\r\n                    !ts.hasProperty(currentSourceFile.identifiers, name) &&\r\n                    !ts.hasProperty(generatedNameSet, name);\r\n            }\r\n            function makeTempVariableName(flags) {\r\n                if (flags && !(tempFlags & flags)) {\r\n                    var name_19 = flags === 268435456  ? \"_i\" : \"_n\";\r\n                    if (isUniqueName(name_19)) {\r\n                        tempFlags |= flags;\r\n                        return name_19;\r\n                    }\r\n                }\r\n                while (true) {\r\n                    var count = tempFlags & 268435455 ;\r\n                    tempFlags++;\r\n                    if (count !== 8 && count !== 13) {\r\n                        var name_20 = count < 26 ? \"_\" + String.fromCharCode(97  + count) : \"_\" + (count - 26);\r\n                        if (isUniqueName(name_20)) {\r\n                            return name_20;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function makeUniqueName(baseName) {\r\n                if (baseName.charCodeAt(baseName.length - 1) !== 95 ) {\r\n                    baseName += \"_\";\r\n                }\r\n                var i = 1;\r\n                while (true) {\r\n                    var generatedName = baseName + i;\r\n                    if (isUniqueName(generatedName)) {\r\n                        return generatedNameSet[generatedName] = generatedName;\r\n                    }\r\n                    i++;\r\n                }\r\n            }\r\n            function generateNameForModuleOrEnum(node) {\r\n                var name = node.name.text;\r\n                return isUniqueLocalName(name, node) ? name : makeUniqueName(name);\r\n            }\r\n            function generateNameForImportOrExportDeclaration(node) {\r\n                var expr = ts.getExternalModuleName(node);\r\n                var baseName = expr.kind === 9  ?\r\n                    ts.escapeIdentifier(ts.makeIdentifierFromModuleName(expr.text)) : \"module\";\r\n                return makeUniqueName(baseName);\r\n            }\r\n            function generateNameForExportDefault() {\r\n                return makeUniqueName(\"default\");\r\n            }\r\n            function generateNameForClassExpression() {\r\n                return makeUniqueName(\"class\");\r\n            }\r\n            function generateNameForNode(node) {\r\n                switch (node.kind) {\r\n                    case 69 :\r\n                        return makeUniqueName(node.text);\r\n                    case 218 :\r\n                    case 217 :\r\n                        return generateNameForModuleOrEnum(node);\r\n                    case 222 :\r\n                    case 228 :\r\n                        return generateNameForImportOrExportDeclaration(node);\r\n                    case 213 :\r\n                    case 214 :\r\n                    case 227 :\r\n                        return generateNameForExportDefault();\r\n                    case 186 :\r\n                        return generateNameForClassExpression();\r\n                }\r\n            }\r\n            function getGeneratedNameForNode(node) {\r\n                var id = ts.getNodeId(node);\r\n                return nodeToGeneratedName[id] || (nodeToGeneratedName[id] = ts.unescapeIdentifier(generateNameForNode(node)));\r\n            }\r\n            function initializeEmitterWithSourceMaps() {\r\n                var sourceMapDir;\r\n                var sourceMapSourceIndex = -1;\r\n                var sourceMapNameIndexMap = {};\r\n                var sourceMapNameIndices = [];\r\n                function getSourceMapNameIndex() {\r\n                    return sourceMapNameIndices.length ? ts.lastOrUndefined(sourceMapNameIndices) : -1;\r\n                }\r\n                var lastRecordedSourceMapSpan;\r\n                var lastEncodedSourceMapSpan = {\r\n                    emittedLine: 1,\r\n                    emittedColumn: 1,\r\n                    sourceLine: 1,\r\n                    sourceColumn: 1,\r\n                    sourceIndex: 0\r\n                };\r\n                var lastEncodedNameIndex = 0;\r\n                function encodeLastRecordedSourceMapSpan() {\r\n                    if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan === lastEncodedSourceMapSpan) {\r\n                        return;\r\n                    }\r\n                    var prevEncodedEmittedColumn = lastEncodedSourceMapSpan.emittedColumn;\r\n                    if (lastEncodedSourceMapSpan.emittedLine === lastRecordedSourceMapSpan.emittedLine) {\r\n                        if (sourceMapData.sourceMapMappings) {\r\n                            sourceMapData.sourceMapMappings += \",\";\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (var encodedLine = lastEncodedSourceMapSpan.emittedLine; encodedLine < lastRecordedSourceMapSpan.emittedLine; encodedLine++) {\r\n                            sourceMapData.sourceMapMappings += \";\";\r\n                        }\r\n                        prevEncodedEmittedColumn = 1;\r\n                    }\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.emittedColumn - prevEncodedEmittedColumn);\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceIndex - lastEncodedSourceMapSpan.sourceIndex);\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceLine - lastEncodedSourceMapSpan.sourceLine);\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceColumn - lastEncodedSourceMapSpan.sourceColumn);\r\n                    if (lastRecordedSourceMapSpan.nameIndex >= 0) {\r\n                        sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.nameIndex - lastEncodedNameIndex);\r\n                        lastEncodedNameIndex = lastRecordedSourceMapSpan.nameIndex;\r\n                    }\r\n                    lastEncodedSourceMapSpan = lastRecordedSourceMapSpan;\r\n                    sourceMapData.sourceMapDecodedMappings.push(lastEncodedSourceMapSpan);\r\n                    function base64VLQFormatEncode(inValue) {\r\n                        function base64FormatEncode(inValue) {\r\n                            if (inValue < 64) {\r\n                                return \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/\".charAt(inValue);\r\n                            }\r\n                            throw TypeError(inValue + \": not a 64 based value\");\r\n                        }\r\n                        if (inValue < 0) {\r\n                            inValue = ((-inValue) << 1) + 1;\r\n                        }\r\n                        else {\r\n                            inValue = inValue << 1;\r\n                        }\r\n                        var encodedStr = \"\";\r\n                        do {\r\n                            var currentDigit = inValue & 31;\r\n                            inValue = inValue >> 5;\r\n                            if (inValue > 0) {\r\n                                currentDigit = currentDigit | 32;\r\n                            }\r\n                            encodedStr = encodedStr + base64FormatEncode(currentDigit);\r\n                        } while (inValue > 0);\r\n                        return encodedStr;\r\n                    }\r\n                }\r\n                function recordSourceMapSpan(pos) {\r\n                    var sourceLinePos = ts.getLineAndCharacterOfPosition(currentSourceFile, pos);\r\n                    sourceLinePos.line++;\r\n                    sourceLinePos.character++;\r\n                    var emittedLine = writer.getLine();\r\n                    var emittedColumn = writer.getColumn();\r\n                    if (!lastRecordedSourceMapSpan ||\r\n                        lastRecordedSourceMapSpan.emittedLine !== emittedLine ||\r\n                        lastRecordedSourceMapSpan.emittedColumn !== emittedColumn ||\r\n                        (lastRecordedSourceMapSpan.sourceIndex === sourceMapSourceIndex &&\r\n                        (lastRecordedSourceMapSpan.sourceLine > sourceLinePos.line ||\r\n                        (lastRecordedSourceMapSpan.sourceLine === sourceLinePos.line && lastRecordedSourceMapSpan.sourceColumn > sourceLinePos.character)))) {\r\n                        encodeLastRecordedSourceMapSpan();\r\n                        lastRecordedSourceMapSpan = {\r\n                            emittedLine: emittedLine,\r\n                            emittedColumn: emittedColumn,\r\n                            sourceLine: sourceLinePos.line,\r\n                            sourceColumn: sourceLinePos.character,\r\n                            nameIndex: getSourceMapNameIndex(),\r\n                            sourceIndex: sourceMapSourceIndex\r\n                        };\r\n                    }\r\n                    else {\r\n                        lastRecordedSourceMapSpan.sourceLine = sourceLinePos.line;\r\n                        lastRecordedSourceMapSpan.sourceColumn = sourceLinePos.character;\r\n                        lastRecordedSourceMapSpan.sourceIndex = sourceMapSourceIndex;\r\n                    }\r\n                }\r\n                function recordEmitNodeStartSpan(node) {\r\n                    recordSourceMapSpan(ts.skipTrivia(currentSourceFile.text, node.pos));\r\n                }\r\n                function recordEmitNodeEndSpan(node) {\r\n                    recordSourceMapSpan(node.end);\r\n                }\r\n                function writeTextWithSpanRecord(tokenKind, startPos, emitFn) {\r\n                    var tokenStartPos = ts.skipTrivia(currentSourceFile.text, startPos);\r\n                    recordSourceMapSpan(tokenStartPos);\r\n                    var tokenEndPos = emitTokenText(tokenKind, tokenStartPos, emitFn);\r\n                    recordSourceMapSpan(tokenEndPos);\r\n                    return tokenEndPos;\r\n                }\r\n                function recordNewSourceFileStart(node) {\r\n                    var sourcesDirectoryPath = compilerOptions.sourceRoot ? host.getCommonSourceDirectory() : sourceMapDir;\r\n                    sourceMapData.sourceMapSources.push(ts.getRelativePathToDirectoryOrUrl(sourcesDirectoryPath, node.fileName, host.getCurrentDirectory(), host.getCanonicalFileName,\r\n                         true));\r\n                    sourceMapSourceIndex = sourceMapData.sourceMapSources.length - 1;\r\n                    sourceMapData.inputSourceFileNames.push(node.fileName);\r\n                    if (compilerOptions.inlineSources) {\r\n                        if (!sourceMapData.sourceMapSourcesContent) {\r\n                            sourceMapData.sourceMapSourcesContent = [];\r\n                        }\r\n                        sourceMapData.sourceMapSourcesContent.push(node.text);\r\n                    }\r\n                }\r\n                function recordScopeNameOfNode(node, scopeName) {\r\n                    function recordScopeNameIndex(scopeNameIndex) {\r\n                        sourceMapNameIndices.push(scopeNameIndex);\r\n                    }\r\n                    function recordScopeNameStart(scopeName) {\r\n                        var scopeNameIndex = -1;\r\n                        if (scopeName) {\r\n                            var parentIndex = getSourceMapNameIndex();\r\n                            if (parentIndex !== -1) {\r\n                                var name_21 = node.name;\r\n                                if (!name_21 || name_21.kind !== 136 ) {\r\n                                    scopeName = \".\" + scopeName;\r\n                                }\r\n                                scopeName = sourceMapData.sourceMapNames[parentIndex] + scopeName;\r\n                            }\r\n                            scopeNameIndex = ts.getProperty(sourceMapNameIndexMap, scopeName);\r\n                            if (scopeNameIndex === undefined) {\r\n                                scopeNameIndex = sourceMapData.sourceMapNames.length;\r\n                                sourceMapData.sourceMapNames.push(scopeName);\r\n                                sourceMapNameIndexMap[scopeName] = scopeNameIndex;\r\n                            }\r\n                        }\r\n                        recordScopeNameIndex(scopeNameIndex);\r\n                    }\r\n                    if (scopeName) {\r\n                        recordScopeNameStart(scopeName);\r\n                    }\r\n                    else if (node.kind === 213  ||\r\n                        node.kind === 173  ||\r\n                        node.kind === 143  ||\r\n                        node.kind === 142  ||\r\n                        node.kind === 145  ||\r\n                        node.kind === 146  ||\r\n                        node.kind === 218  ||\r\n                        node.kind === 214  ||\r\n                        node.kind === 217 ) {\r\n                        if (node.name) {\r\n                            var name_22 = node.name;\r\n                            scopeName = name_22.kind === 136 \r\n                                ? ts.getTextOfNode(name_22)\r\n                                : node.name.text;\r\n                        }\r\n                        recordScopeNameStart(scopeName);\r\n                    }\r\n                    else {\r\n                        recordScopeNameIndex(getSourceMapNameIndex());\r\n                    }\r\n                }\r\n                function recordScopeNameEnd() {\r\n                    sourceMapNameIndices.pop();\r\n                }\r\n                ;\r\n                function writeCommentRangeWithMap(curentSourceFile, writer, comment, newLine) {\r\n                    recordSourceMapSpan(comment.pos);\r\n                    ts.writeCommentRange(currentSourceFile, writer, comment, newLine);\r\n                    recordSourceMapSpan(comment.end);\r\n                }\r\n                function serializeSourceMapContents(version, file, sourceRoot, sources, names, mappings, sourcesContent) {\r\n                    if (typeof JSON !== \"undefined\") {\r\n                        var map_1 = {\r\n                            version: version,\r\n                            file: file,\r\n                            sourceRoot: sourceRoot,\r\n                            sources: sources,\r\n                            names: names,\r\n                            mappings: mappings\r\n                        };\r\n                        if (sourcesContent !== undefined) {\r\n                            map_1.sourcesContent = sourcesContent;\r\n                        }\r\n                        return JSON.stringify(map_1);\r\n                    }\r\n                    return \"{\\\"version\\\":\" + version + \",\\\"file\\\":\\\"\" + ts.escapeString(file) + \"\\\",\\\"sourceRoot\\\":\\\"\" + ts.escapeString(sourceRoot) + \"\\\",\\\"sources\\\":[\" + serializeStringArray(sources) + \"],\\\"names\\\":[\" + serializeStringArray(names) + \"],\\\"mappings\\\":\\\"\" + ts.escapeString(mappings) + \"\\\" \" + (sourcesContent !== undefined ? \",\\\"sourcesContent\\\":[\" + serializeStringArray(sourcesContent) + \"]\" : \"\") + \"}\";\r\n                    function serializeStringArray(list) {\r\n                        var output = \"\";\r\n                        for (var i = 0, n = list.length; i < n; i++) {\r\n                            if (i) {\r\n                                output += \",\";\r\n                            }\r\n                            output += \"\\\"\" + ts.escapeString(list[i]) + \"\\\"\";\r\n                        }\r\n                        return output;\r\n                    }\r\n                }\r\n                function writeJavaScriptAndSourceMapFile(emitOutput, writeByteOrderMark) {\r\n                    encodeLastRecordedSourceMapSpan();\r\n                    var sourceMapText = serializeSourceMapContents(3, sourceMapData.sourceMapFile, sourceMapData.sourceMapSourceRoot, sourceMapData.sourceMapSources, sourceMapData.sourceMapNames, sourceMapData.sourceMapMappings, sourceMapData.sourceMapSourcesContent);\r\n                    sourceMapDataList.push(sourceMapData);\r\n                    var sourceMapUrl;\r\n                    if (compilerOptions.inlineSourceMap) {\r\n                        var base64SourceMapText = ts.convertToBase64(sourceMapText);\r\n                        sourceMapUrl = \"\r\n                    }\r\n                    else {\r\n                        ts.writeFile(host, diagnostics, sourceMapData.sourceMapFilePath, sourceMapText,  false);\r\n                        sourceMapUrl = \"\r\n                    }\r\n                    writeJavaScriptFile(emitOutput + sourceMapUrl, writeByteOrderMark);\r\n                }\r\n                var sourceMapJsFile = ts.getBaseFileName(ts.normalizeSlashes(jsFilePath));\r\n                sourceMapData = {\r\n                    sourceMapFilePath: jsFilePath + \".map\",\r\n                    jsSourceMappingURL: sourceMapJsFile + \".map\",\r\n                    sourceMapFile: sourceMapJsFile,\r\n                    sourceMapSourceRoot: compilerOptions.sourceRoot || \"\",\r\n                    sourceMapSources: [],\r\n                    inputSourceFileNames: [],\r\n                    sourceMapNames: [],\r\n                    sourceMapMappings: \"\",\r\n                    sourceMapSourcesContent: undefined,\r\n                    sourceMapDecodedMappings: []\r\n                };\r\n                sourceMapData.sourceMapSourceRoot = ts.normalizeSlashes(sourceMapData.sourceMapSourceRoot);\r\n                if (sourceMapData.sourceMapSourceRoot.length && sourceMapData.sourceMapSourceRoot.charCodeAt(sourceMapData.sourceMapSourceRoot.length - 1) !== 47 ) {\r\n                    sourceMapData.sourceMapSourceRoot += ts.directorySeparator;\r\n                }\r\n                if (compilerOptions.mapRoot) {\r\n                    sourceMapDir = ts.normalizeSlashes(compilerOptions.mapRoot);\r\n                    if (root) {\r\n                        sourceMapDir = ts.getDirectoryPath(ts.getSourceFilePathInNewDir(root, host, sourceMapDir));\r\n                    }\r\n                    if (!ts.isRootedDiskPath(sourceMapDir) && !ts.isUrl(sourceMapDir)) {\r\n                        sourceMapDir = ts.combinePaths(host.getCommonSourceDirectory(), sourceMapDir);\r\n                        sourceMapData.jsSourceMappingURL = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizePath(jsFilePath)),\r\n                            ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL),\r\n                            host.getCurrentDirectory(), host.getCanonicalFileName,\r\n                             true);\r\n                    }\r\n                    else {\r\n                        sourceMapData.jsSourceMappingURL = ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL);\r\n                    }\r\n                }\r\n                else {\r\n                    sourceMapDir = ts.getDirectoryPath(ts.normalizePath(jsFilePath));\r\n                }\r\n                function emitNodeWithSourceMap(node) {\r\n                    if (node) {\r\n                        if (ts.nodeIsSynthesized(node)) {\r\n                            return emitNodeWithoutSourceMap(node);\r\n                        }\r\n                        if (node.kind !== 248 ) {\r\n                            recordEmitNodeStartSpan(node);\r\n                            emitNodeWithoutSourceMap(node);\r\n                            recordEmitNodeEndSpan(node);\r\n                        }\r\n                        else {\r\n                            recordNewSourceFileStart(node);\r\n                            emitNodeWithoutSourceMap(node);\r\n                        }\r\n                    }\r\n                }\r\n                function emitNodeWithCommentsAndWithSourcemap(node) {\r\n                    emitNodeConsideringCommentsOption(node, emitNodeWithSourceMap);\r\n                }\r\n                writeEmittedFiles = writeJavaScriptAndSourceMapFile;\r\n                emit = emitNodeWithCommentsAndWithSourcemap;\r\n                emitStart = recordEmitNodeStartSpan;\r\n                emitEnd = recordEmitNodeEndSpan;\r\n                emitToken = writeTextWithSpanRecord;\r\n                scopeEmitStart = recordScopeNameOfNode;\r\n                scopeEmitEnd = recordScopeNameEnd;\r\n                writeComment = writeCommentRangeWithMap;\r\n            }\r\n            function writeJavaScriptFile(emitOutput, writeByteOrderMark) {\r\n                ts.writeFile(host, diagnostics, jsFilePath, emitOutput, writeByteOrderMark);\r\n            }\r\n            function createTempVariable(flags) {\r\n                var result = ts.createSynthesizedNode(69 );\r\n                result.text = makeTempVariableName(flags);\r\n                return result;\r\n            }\r\n            function recordTempDeclaration(name) {\r\n                if (!tempVariables) {\r\n                    tempVariables = [];\r\n                }\r\n                tempVariables.push(name);\r\n            }\r\n            function createAndRecordTempVariable(flags) {\r\n                var temp = createTempVariable(flags);\r\n                recordTempDeclaration(temp);\r\n                return temp;\r\n            }\r\n            function emitTempDeclarations(newLine) {\r\n                if (tempVariables) {\r\n                    if (newLine) {\r\n                        writeLine();\r\n                    }\r\n                    else {\r\n                        write(\" \");\r\n                    }\r\n                    write(\"var \");\r\n                    emitCommaList(tempVariables);\r\n                    write(\";\");\r\n                }\r\n            }\r\n            function emitTokenText(tokenKind, startPos, emitFn) {\r\n                var tokenString = ts.tokenToString(tokenKind);\r\n                if (emitFn) {\r\n                    emitFn();\r\n                }\r\n                else {\r\n                    write(tokenString);\r\n                }\r\n                return startPos + tokenString.length;\r\n            }\r\n            function emitOptional(prefix, node) {\r\n                if (node) {\r\n                    write(prefix);\r\n                    emit(node);\r\n                }\r\n            }\r\n            function emitParenthesizedIf(node, parenthesized) {\r\n                if (parenthesized) {\r\n                    write(\"(\");\r\n                }\r\n                emit(node);\r\n                if (parenthesized) {\r\n                    write(\")\");\r\n                }\r\n            }\r\n            function emitTrailingCommaIfPresent(nodeList) {\r\n                if (nodeList.hasTrailingComma) {\r\n                    write(\",\");\r\n                }\r\n            }\r\n            function emitLinePreservingList(parent, nodes, allowTrailingComma, spacesBetweenBraces) {\r\n                ts.Debug.assert(nodes.length > 0);\r\n                increaseIndent();\r\n                if (nodeStartPositionsAreOnSameLine(parent, nodes[0])) {\r\n                    if (spacesBetweenBraces) {\r\n                        write(\" \");\r\n                    }\r\n                }\r\n                else {\r\n                    writeLine();\r\n                }\r\n                for (var i = 0, n = nodes.length; i < n; i++) {\r\n                    if (i) {\r\n                        if (nodeEndIsOnSameLineAsNodeStart(nodes[i - 1], nodes[i])) {\r\n                            write(\", \");\r\n                        }\r\n                        else {\r\n                            write(\",\");\r\n                            writeLine();\r\n                        }\r\n                    }\r\n                    emit(nodes[i]);\r\n                }\r\n                if (nodes.hasTrailingComma && allowTrailingComma) {\r\n                    write(\",\");\r\n                }\r\n                decreaseIndent();\r\n                if (nodeEndPositionsAreOnSameLine(parent, ts.lastOrUndefined(nodes))) {\r\n                    if (spacesBetweenBraces) {\r\n                        write(\" \");\r\n                    }\r\n                }\r\n                else {\r\n                    writeLine();\r\n                }\r\n            }\r\n            function emitList(nodes, start, count, multiLine, trailingComma, leadingComma, noTrailingNewLine, emitNode) {\r\n                if (!emitNode) {\r\n                    emitNode = emit;\r\n                }\r\n                for (var i = 0; i < count; i++) {\r\n                    if (multiLine) {\r\n                        if (i || leadingComma) {\r\n                            write(\",\");\r\n                        }\r\n                        writeLine();\r\n                    }\r\n                    else {\r\n                        if (i || leadingComma) {\r\n                            write(\", \");\r\n                        }\r\n                    }\r\n                    var node = nodes[start + i];\r\n                    emitTrailingCommentsOfPosition(node.pos);\r\n                    emitNode(node);\r\n                    leadingComma = true;\r\n                }\r\n                if (trailingComma) {\r\n                    write(\",\");\r\n                }\r\n                if (multiLine && !noTrailingNewLine) {\r\n                    writeLine();\r\n                }\r\n                return count;\r\n            }\r\n            function emitCommaList(nodes) {\r\n                if (nodes) {\r\n                    emitList(nodes, 0, nodes.length,  false,  false);\r\n                }\r\n            }\r\n            function emitLines(nodes) {\r\n                emitLinesStartingAt(nodes,  0);\r\n            }\r\n            function emitLinesStartingAt(nodes, startIndex) {\r\n                for (var i = startIndex; i < nodes.length; i++) {\r\n                    writeLine();\r\n                    emit(nodes[i]);\r\n                }\r\n            }\r\n            function isBinaryOrOctalIntegerLiteral(node, text) {\r\n                if (node.kind === 8  && text.length > 1) {\r\n                    switch (text.charCodeAt(1)) {\r\n                        case 98 :\r\n                        case 66 :\r\n                        case 111 :\r\n                        case 79 :\r\n                            return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function emitLiteral(node) {\r\n                var text = getLiteralText(node);\r\n                if ((compilerOptions.sourceMap || compilerOptions.inlineSourceMap) && (node.kind === 9  || ts.isTemplateLiteralKind(node.kind))) {\r\n                    writer.writeLiteral(text);\r\n                }\r\n                else if (languageVersion < 2  && isBinaryOrOctalIntegerLiteral(node, text)) {\r\n                    write(node.text);\r\n                }\r\n                else {\r\n                    write(text);\r\n                }\r\n            }\r\n            function getLiteralText(node) {\r\n                if (languageVersion < 2  && (ts.isTemplateLiteralKind(node.kind) || node.hasExtendedUnicodeEscape)) {\r\n                    return getQuotedEscapedLiteralText(\"\\\"\", node.text, \"\\\"\");\r\n                }\r\n                if (node.parent) {\r\n                    return ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node);\r\n                }\r\n                switch (node.kind) {\r\n                    case 9 :\r\n                        return getQuotedEscapedLiteralText(\"\\\"\", node.text, \"\\\"\");\r\n                    case 11 :\r\n                        return getQuotedEscapedLiteralText(\"`\", node.text, \"`\");\r\n                    case 12 :\r\n                        return getQuotedEscapedLiteralText(\"`\", node.text, \"${\");\r\n                    case 13 :\r\n                        return getQuotedEscapedLiteralText(\"}\", node.text, \"${\");\r\n                    case 14 :\r\n                        return getQuotedEscapedLiteralText(\"}\", node.text, \"`\");\r\n                    case 8 :\r\n                        return node.text;\r\n                }\r\n                ts.Debug.fail(\"Literal kind '\" + node.kind + \"' not accounted for.\");\r\n            }\r\n            function getQuotedEscapedLiteralText(leftQuote, text, rightQuote) {\r\n                return leftQuote + ts.escapeNonAsciiCharacters(ts.escapeString(text)) + rightQuote;\r\n            }\r\n            function emitDownlevelRawTemplateLiteral(node) {\r\n                var text = ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node);\r\n                var isLast = node.kind === 11  || node.kind === 14 ;\r\n                text = text.substring(1, text.length - (isLast ? 1 : 2));\r\n                text = text.replace(\/\\r\\n?\/g, \"\\n\");\r\n                text = ts.escapeString(text);\r\n                write(\"\\\"\" + text + \"\\\"\");\r\n            }\r\n            function emitDownlevelTaggedTemplateArray(node, literalEmitter) {\r\n                write(\"[\");\r\n                if (node.template.kind === 11 ) {\r\n                    literalEmitter(node.template);\r\n                }\r\n                else {\r\n                    literalEmitter(node.template.head);\r\n                    ts.forEach(node.template.templateSpans, function (child) {\r\n                        write(\", \");\r\n                        literalEmitter(child.literal);\r\n                    });\r\n                }\r\n                write(\"]\");\r\n            }\r\n            function emitDownlevelTaggedTemplate(node) {\r\n                var tempVariable = createAndRecordTempVariable(0 );\r\n                write(\"(\");\r\n                emit(tempVariable);\r\n                write(\" = \");\r\n                emitDownlevelTaggedTemplateArray(node, emit);\r\n                write(\", \");\r\n                emit(tempVariable);\r\n                write(\".raw = \");\r\n                emitDownlevelTaggedTemplateArray(node, emitDownlevelRawTemplateLiteral);\r\n                write(\", \");\r\n                emitParenthesizedIf(node.tag, needsParenthesisForPropertyAccessOrInvocation(node.tag));\r\n                write(\"(\");\r\n                emit(tempVariable);\r\n                if (node.template.kind === 183 ) {\r\n                    ts.forEach(node.template.templateSpans, function (templateSpan) {\r\n                        write(\", \");\r\n                        var needsParens = templateSpan.expression.kind === 181 \r\n                            && templateSpan.expression.operatorToken.kind === 24 ;\r\n                        emitParenthesizedIf(templateSpan.expression, needsParens);\r\n                    });\r\n                }\r\n                write(\"))\");\r\n            }\r\n            function emitTemplateExpression(node) {\r\n                if (languageVersion >= 2 ) {\r\n                    ts.forEachChild(node, emit);\r\n                    return;\r\n                }\r\n                var emitOuterParens = ts.isExpression(node.parent)\r\n                    && templateNeedsParens(node, node.parent);\r\n                if (emitOuterParens) {\r\n                    write(\"(\");\r\n                }\r\n                var headEmitted = false;\r\n                if (shouldEmitTemplateHead()) {\r\n                    emitLiteral(node.head);\r\n                    headEmitted = true;\r\n                }\r\n                for (var i = 0, n = node.templateSpans.length; i < n; i++) {\r\n                    var templateSpan = node.templateSpans[i];\r\n                    var needsParens = templateSpan.expression.kind !== 172 \r\n                        && comparePrecedenceToBinaryPlus(templateSpan.expression) !== 1 ;\r\n                    if (i > 0 || headEmitted) {\r\n                        write(\" + \");\r\n                    }\r\n                    emitParenthesizedIf(templateSpan.expression, needsParens);\r\n                    if (templateSpan.literal.text.length !== 0) {\r\n                        write(\" + \");\r\n                        emitLiteral(templateSpan.literal);\r\n                    }\r\n                }\r\n                if (emitOuterParens) {\r\n                    write(\")\");\r\n                }\r\n                function shouldEmitTemplateHead() {\r\n                    ts.Debug.assert(node.templateSpans.length !== 0);\r\n                    return node.head.text.length !== 0 || node.templateSpans[0].literal.text.length === 0;\r\n                }\r\n                function templateNeedsParens(template, parent) {\r\n                    switch (parent.kind) {\r\n                        case 168 :\r\n                        case 169 :\r\n                            return parent.expression === template;\r\n                        case 170 :\r\n                        case 172 :\r\n                            return false;\r\n                        default:\r\n                            return comparePrecedenceToBinaryPlus(parent) !== -1 ;\r\n                    }\r\n                }\r\n                                function comparePrecedenceToBinaryPlus(expression) {\r\n                    switch (expression.kind) {\r\n                        case 181 :\r\n                            switch (expression.operatorToken.kind) {\r\n                                case 37 :\r\n                                case 39 :\r\n                                case 40 :\r\n                                    return 1 ;\r\n                                case 35 :\r\n                                case 36 :\r\n                                    return 0 ;\r\n                                default:\r\n                                    return -1 ;\r\n                            }\r\n                        case 184 :\r\n                        case 182 :\r\n                            return -1 ;\r\n                        default:\r\n                            return 1 ;\r\n                    }\r\n                }\r\n            }\r\n            function emitTemplateSpan(span) {\r\n                emit(span.expression);\r\n                emit(span.literal);\r\n            }\r\n            function jsxEmitReact(node) {\r\n                function emitTagName(name) {\r\n                    if (name.kind === 69  && ts.isIntrinsicJsxName(name.text)) {\r\n                        write(\"\\\"\");\r\n                        emit(name);\r\n                        write(\"\\\"\");\r\n                    }\r\n                    else {\r\n                        emit(name);\r\n                    }\r\n                }\r\n                function emitAttributeName(name) {\r\n                    if (\/[A-Za-z_]+[\\w*]\/.test(name.text)) {\r\n                        write(\"\\\"\");\r\n                        emit(name);\r\n                        write(\"\\\"\");\r\n                    }\r\n                    else {\r\n                        emit(name);\r\n                    }\r\n                }\r\n                function emitJsxAttribute(node) {\r\n                    emitAttributeName(node.name);\r\n                    write(\": \");\r\n                    if (node.initializer) {\r\n                        emit(node.initializer);\r\n                    }\r\n                    else {\r\n                        write(\"true\");\r\n                    }\r\n                }\r\n                function emitJsxElement(openingNode, children) {\r\n                    var syntheticReactRef = ts.createSynthesizedNode(69 );\r\n                    syntheticReactRef.text = \"React\";\r\n                    syntheticReactRef.parent = openingNode;\r\n                    emitLeadingComments(openingNode);\r\n                    emitExpressionIdentifier(syntheticReactRef);\r\n                    write(\".createElement(\");\r\n                    emitTagName(openingNode.tagName);\r\n                    write(\", \");\r\n                    if (openingNode.attributes.length === 0) {\r\n                        write(\"null\");\r\n                    }\r\n                    else {\r\n                        var attrs = openingNode.attributes;\r\n                        if (ts.forEach(attrs, function (attr) { return attr.kind === 239 ; })) {\r\n                            emitExpressionIdentifier(syntheticReactRef);\r\n                            write(\".__spread(\");\r\n                            var haveOpenedObjectLiteral = false;\r\n                            for (var i_1 = 0; i_1 < attrs.length; i_1++) {\r\n                                if (attrs[i_1].kind === 239 ) {\r\n                                    if (i_1 === 0) {\r\n                                        write(\"{}, \");\r\n                                    }\r\n                                    if (haveOpenedObjectLiteral) {\r\n                                        write(\"}\");\r\n                                        haveOpenedObjectLiteral = false;\r\n                                    }\r\n                                    if (i_1 > 0) {\r\n                                        write(\", \");\r\n                                    }\r\n                                    emit(attrs[i_1].expression);\r\n                                }\r\n                                else {\r\n                                    ts.Debug.assert(attrs[i_1].kind === 238 );\r\n                                    if (haveOpenedObjectLiteral) {\r\n                                        write(\", \");\r\n                                    }\r\n                                    else {\r\n                                        haveOpenedObjectLiteral = true;\r\n                                        if (i_1 > 0) {\r\n                                            write(\", \");\r\n                                        }\r\n                                        write(\"{\");\r\n                                    }\r\n                                    emitJsxAttribute(attrs[i_1]);\r\n                                }\r\n                            }\r\n                            if (haveOpenedObjectLiteral)\r\n                                write(\"}\");\r\n                            write(\")\");\r\n                        }\r\n                        else {\r\n                            write(\"{\");\r\n                            for (var i = 0; i < attrs.length; i++) {\r\n                                if (i > 0) {\r\n                                    write(\", \");\r\n                                }\r\n                                emitJsxAttribute(attrs[i]);\r\n                            }\r\n                            write(\"}\");\r\n                        }\r\n                    }\r\n                    if (children) {\r\n                        for (var i = 0; i < children.length; i++) {\r\n                            if (children[i].kind === 240  && !(children[i].expression)) {\r\n                                continue;\r\n                            }\r\n                            if (children[i].kind === 236 ) {\r\n                                var text = getTextToEmit(children[i]);\r\n                                if (text !== undefined) {\r\n                                    write(\", \\\"\");\r\n                                    write(text);\r\n                                    write(\"\\\"\");\r\n                                }\r\n                            }\r\n                            else {\r\n                                write(\", \");\r\n                                emit(children[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    write(\")\");\r\n                    emitTrailingComments(openingNode);\r\n                }\r\n                if (node.kind === 233 ) {\r\n                    emitJsxElement(node.openingElement, node.children);\r\n                }\r\n                else {\r\n                    ts.Debug.assert(node.kind === 234 );\r\n                    emitJsxElement(node);\r\n                }\r\n            }\r\n            function jsxEmitPreserve(node) {\r\n                function emitJsxAttribute(node) {\r\n                    emit(node.name);\r\n                    if (node.initializer) {\r\n                        write(\"=\");\r\n                        emit(node.initializer);\r\n                    }\r\n                }\r\n                function emitJsxSpreadAttribute(node) {\r\n                    write(\"{...\");\r\n                    emit(node.expression);\r\n                    write(\"}\");\r\n                }\r\n                function emitAttributes(attribs) {\r\n                    for (var i = 0, n = attribs.length; i < n; i++) {\r\n                        if (i > 0) {\r\n                            write(\" \");\r\n                        }\r\n                        if (attribs[i].kind === 239 ) {\r\n                            emitJsxSpreadAttribute(attribs[i]);\r\n                        }\r\n                        else {\r\n                            ts.Debug.assert(attribs[i].kind === 238 );\r\n                            emitJsxAttribute(attribs[i]);\r\n                        }\r\n                    }\r\n                }\r\n                function emitJsxOpeningOrSelfClosingElement(node) {\r\n                    write(\"<\");\r\n                    emit(node.tagName);\r\n                    if (node.attributes.length > 0 || (node.kind === 234 )) {\r\n                        write(\" \");\r\n                    }\r\n                    emitAttributes(node.attributes);\r\n                    if (node.kind === 234 ) {\r\n                        write(\"\/>\");\r\n                    }\r\n                    else {\r\n                        write(\">\");\r\n                    }\r\n                }\r\n                function emitJsxClosingElement(node) {\r\n                    write(\"<\/\");\r\n                    emit(node.tagName);\r\n                    write(\">\");\r\n                }\r\n                function emitJsxElement(node) {\r\n                    emitJsxOpeningOrSelfClosingElement(node.openingElement);\r\n                    for (var i = 0, n = node.children.length; i < n; i++) {\r\n                        emit(node.children[i]);\r\n                    }\r\n                    emitJsxClosingElement(node.closingElement);\r\n                }\r\n                if (node.kind === 233 ) {\r\n                    emitJsxElement(node);\r\n                }\r\n                else {\r\n                    ts.Debug.assert(node.kind === 234 );\r\n                    emitJsxOpeningOrSelfClosingElement(node);\r\n                }\r\n            }\r\n            function emitExpressionForPropertyName(node) {\r\n                ts.Debug.assert(node.kind !== 163 );\r\n                if (node.kind === 9 ) {\r\n                    emitLiteral(node);\r\n                }\r\n                else if (node.kind === 136 ) {\r\n                    if (ts.nodeIsDecorated(node.parent)) {\r\n                        if (!computedPropertyNamesToGeneratedNames) {\r\n                            computedPropertyNamesToGeneratedNames = [];\r\n                        }\r\n                        var generatedName = computedPropertyNamesToGeneratedNames[ts.getNodeId(node)];\r\n                        if (generatedName) {\r\n                            write(generatedName);\r\n                            return;\r\n                        }\r\n                        generatedName = createAndRecordTempVariable(0 ).text;\r\n                        computedPropertyNamesToGeneratedNames[ts.getNodeId(node)] = generatedName;\r\n                        write(generatedName);\r\n                        write(\" = \");\r\n                    }\r\n                    emit(node.expression);\r\n                }\r\n                else {\r\n                    write(\"\\\"\");\r\n                    if (node.kind === 8 ) {\r\n                        write(node.text);\r\n                    }\r\n                    else {\r\n                        writeTextOfNode(currentSourceFile, node);\r\n                    }\r\n                    write(\"\\\"\");\r\n                }\r\n            }\r\n            function isExpressionIdentifier(node) {\r\n                var parent = node.parent;\r\n                switch (parent.kind) {\r\n                    case 164 :\r\n                    case 189 :\r\n                    case 181 :\r\n                    case 168 :\r\n                    case 241 :\r\n                    case 136 :\r\n                    case 182 :\r\n                    case 139 :\r\n                    case 175 :\r\n                    case 197 :\r\n                    case 167 :\r\n                    case 227 :\r\n                    case 195 :\r\n                    case 188 :\r\n                    case 199 :\r\n                    case 200 :\r\n                    case 201 :\r\n                    case 196 :\r\n                    case 234 :\r\n                    case 235 :\r\n                    case 239 :\r\n                    case 240 :\r\n                    case 169 :\r\n                    case 172 :\r\n                    case 180 :\r\n                    case 179 :\r\n                    case 204 :\r\n                    case 246 :\r\n                    case 185 :\r\n                    case 206 :\r\n                    case 170 :\r\n                    case 190 :\r\n                    case 208 :\r\n                    case 171 :\r\n                    case 176 :\r\n                    case 177 :\r\n                    case 198 :\r\n                    case 205 :\r\n                    case 184 :\r\n                        return true;\r\n                    case 163 :\r\n                    case 247 :\r\n                    case 138 :\r\n                    case 245 :\r\n                    case 141 :\r\n                    case 211 :\r\n                        return parent.initializer === node;\r\n                    case 166 :\r\n                        return parent.expression === node;\r\n                    case 174 :\r\n                    case 173 :\r\n                        return parent.body === node;\r\n                    case 221 :\r\n                        return parent.moduleReference === node;\r\n                    case 135 :\r\n                        return parent.left === node;\r\n                }\r\n                return false;\r\n            }\r\n            function emitExpressionIdentifier(node) {\r\n                if (resolver.getNodeCheckFlags(node) & 2048 ) {\r\n                    write(\"_arguments\");\r\n                    return;\r\n                }\r\n                var container = resolver.getReferencedExportContainer(node);\r\n                if (container) {\r\n                    if (container.kind === 248 ) {\r\n                        if (modulekind !== 5  && modulekind !== 4 ) {\r\n                            write(\"exports.\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        write(getGeneratedNameForNode(container));\r\n                        write(\".\");\r\n                    }\r\n                }\r\n                else {\r\n                    if (modulekind !== 5 ) {\r\n                        var declaration = resolver.getReferencedImportDeclaration(node);\r\n                        if (declaration) {\r\n                            if (declaration.kind === 223 ) {\r\n                                write(getGeneratedNameForNode(declaration.parent));\r\n                                write(languageVersion === 0  ? \"[\\\"default\\\"]\" : \".default\");\r\n                                return;\r\n                            }\r\n                            else if (declaration.kind === 226 ) {\r\n                                write(getGeneratedNameForNode(declaration.parent.parent.parent));\r\n                                var name_23 = declaration.propertyName || declaration.name;\r\n                                var identifier = ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, name_23);\r\n                                if (languageVersion === 0  && identifier === \"default\") {\r\n                                    write(\"[\\\"default\\\"]\");\r\n                                }\r\n                                else {\r\n                                    write(\".\");\r\n                                    write(identifier);\r\n                                }\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (languageVersion !== 2 ) {\r\n                        var declaration = resolver.getReferencedNestedRedeclaration(node);\r\n                        if (declaration) {\r\n                            write(getGeneratedNameForNode(declaration.name));\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                if (ts.nodeIsSynthesized(node)) {\r\n                    write(node.text);\r\n                }\r\n                else {\r\n                    writeTextOfNode(currentSourceFile, node);\r\n                }\r\n            }\r\n            function isNameOfNestedRedeclaration(node) {\r\n                if (languageVersion < 2 ) {\r\n                    var parent_6 = node.parent;\r\n                    switch (parent_6.kind) {\r\n                        case 163 :\r\n                        case 214 :\r\n                        case 217 :\r\n                        case 211 :\r\n                            return parent_6.name === node && resolver.isNestedRedeclaration(parent_6);\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function emitIdentifier(node) {\r\n                if (!node.parent) {\r\n                    write(node.text);\r\n                }\r\n                else if (isExpressionIdentifier(node)) {\r\n                    emitExpressionIdentifier(node);\r\n                }\r\n                else if (isNameOfNestedRedeclaration(node)) {\r\n                    write(getGeneratedNameForNode(node));\r\n                }\r\n                else if (ts.nodeIsSynthesized(node)) {\r\n                    write(node.text);\r\n                }\r\n                else {\r\n                    writeTextOfNode(currentSourceFile, node);\r\n                }\r\n            }\r\n            function emitThis(node) {\r\n                if (resolver.getNodeCheckFlags(node) & 2 ) {\r\n                    write(\"_this\");\r\n                }\r\n                else {\r\n                    write(\"this\");\r\n                }\r\n            }\r\n            function emitSuper(node) {\r\n                if (languageVersion >= 2 ) {\r\n                    write(\"super\");\r\n                }\r\n                else {\r\n                    var flags = resolver.getNodeCheckFlags(node);\r\n                    if (flags & 256 ) {\r\n                        write(\"_super.prototype\");\r\n                    }\r\n                    else {\r\n                        write(\"_super\");\r\n                    }\r\n                }\r\n            }\r\n            function emitObjectBindingPattern(node) {\r\n                write(\"{ \");\r\n                var elements = node.elements;\r\n                emitList(elements, 0, elements.length,  false,  elements.hasTrailingComma);\r\n                write(\" }\");\r\n            }\r\n            function emitArrayBindingPattern(node) {\r\n                write(\"[\");\r\n                var elements = node.elements;\r\n                emitList(elements, 0, elements.length,  false,  elements.hasTrailingComma);\r\n                write(\"]\");\r\n            }\r\n            function emitBindingElement(node) {\r\n                if (node.propertyName) {\r\n                    emit(node.propertyName);\r\n                    write(\": \");\r\n                }\r\n                if (node.dotDotDotToken) {\r\n                    write(\"...\");\r\n                }\r\n                if (ts.isBindingPattern(node.name)) {\r\n                    emit(node.name);\r\n                }\r\n                else {\r\n                    emitModuleMemberName(node);\r\n                }\r\n                emitOptional(\" = \", node.initializer);\r\n            }\r\n            function emitSpreadElementExpression(node) {\r\n                write(\"...\");\r\n                emit(node.expression);\r\n            }\r\n            function emitYieldExpression(node) {\r\n                write(ts.tokenToString(114 ));\r\n                if (node.asteriskToken) {\r\n                    write(\"*\");\r\n                }\r\n                if (node.expression) {\r\n                    write(\" \");\r\n                    emit(node.expression);\r\n                }\r\n            }\r\n            function emitAwaitExpression(node) {\r\n                var needsParenthesis = needsParenthesisForAwaitExpressionAsYield(node);\r\n                if (needsParenthesis) {\r\n                    write(\"(\");\r\n                }\r\n                write(ts.tokenToString(114 ));\r\n                write(\" \");\r\n                emit(node.expression);\r\n                if (needsParenthesis) {\r\n                    write(\")\");\r\n                }\r\n            }\r\n            function needsParenthesisForAwaitExpressionAsYield(node) {\r\n                if (node.parent.kind === 181  && !ts.isAssignmentOperator(node.parent.operatorToken.kind)) {\r\n                    return true;\r\n                }\r\n                else if (node.parent.kind === 182  && node.parent.condition === node) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            function needsParenthesisForPropertyAccessOrInvocation(node) {\r\n                switch (node.kind) {\r\n                    case 69 :\r\n                    case 164 :\r\n                    case 166 :\r\n                    case 167 :\r\n                    case 168 :\r\n                    case 172 :\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            function emitListWithSpread(elements, needsUniqueCopy, multiLine, trailingComma, useConcat) {\r\n                var pos = 0;\r\n                var group = 0;\r\n                var length = elements.length;\r\n                while (pos < length) {\r\n                    if (group === 1 && useConcat) {\r\n                        write(\".concat(\");\r\n                    }\r\n                    else if (group > 0) {\r\n                        write(\", \");\r\n                    }\r\n                    var e = elements[pos];\r\n                    if (e.kind === 185 ) {\r\n                        e = e.expression;\r\n                        emitParenthesizedIf(e,  group === 0 && needsParenthesisForPropertyAccessOrInvocation(e));\r\n                        pos++;\r\n                        if (pos === length && group === 0 && needsUniqueCopy && e.kind !== 164 ) {\r\n                            write(\".slice()\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        var i = pos;\r\n                        while (i < length && elements[i].kind !== 185 ) {\r\n                            i++;\r\n                        }\r\n                        write(\"[\");\r\n                        if (multiLine) {\r\n                            increaseIndent();\r\n                        }\r\n                        emitList(elements, pos, i - pos, multiLine, trailingComma && i === length);\r\n                        if (multiLine) {\r\n                            decreaseIndent();\r\n                        }\r\n                        write(\"]\");\r\n                        pos = i;\r\n                    }\r\n                    group++;\r\n                }\r\n                if (group > 1) {\r\n                    if (useConcat) {\r\n                        write(\")\");\r\n                    }\r\n                }\r\n            }\r\n            function isSpreadElementExpression(node) {\r\n                return node.kind === 185 ;\r\n            }\r\n            function emitArrayLiteral(node) {\r\n                var elements = node.elements;\r\n                if (elements.length === 0) {\r\n                    write(\"[]\");\r\n                }\r\n                else if (languageVersion >= 2  || !ts.forEach(elements, isSpreadElementExpression)) {\r\n                    write(\"[\");\r\n                    emitLinePreservingList(node, node.elements, elements.hasTrailingComma,  false);\r\n                    write(\"]\");\r\n                }\r\n                else {\r\n                    emitListWithSpread(elements,  true,  (node.flags & 2048 ) !== 0,\r\n                         elements.hasTrailingComma,  true);\r\n                }\r\n            }\r\n            function emitObjectLiteralBody(node, numElements) {\r\n                if (numElements === 0) {\r\n                    write(\"{}\");\r\n                    return;\r\n                }\r\n                write(\"{\");\r\n                if (numElements > 0) {\r\n                    var properties = node.properties;\r\n                    if (numElements === properties.length) {\r\n                        emitLinePreservingList(node, properties,  languageVersion >= 1 ,  true);\r\n                    }\r\n                    else {\r\n                        var multiLine = (node.flags & 2048 ) !== 0;\r\n                        if (!multiLine) {\r\n                            write(\" \");\r\n                        }\r\n                        else {\r\n                            increaseIndent();\r\n                        }\r\n                        emitList(properties, 0, numElements,  multiLine,  false);\r\n                        if (!multiLine) {\r\n                            write(\" \");\r\n                        }\r\n                        else {\r\n                            decreaseIndent();\r\n                        }\r\n                    }\r\n                }\r\n                write(\"}\");\r\n            }\r\n            function emitDownlevelObjectLiteralWithComputedProperties(node, firstComputedPropertyIndex) {\r\n                var multiLine = (node.flags & 2048 ) !== 0;\r\n                var properties = node.properties;\r\n                write(\"(\");\r\n                if (multiLine) {\r\n                    increaseIndent();\r\n                }\r\n                var tempVar = createAndRecordTempVariable(0 );\r\n                emit(tempVar);\r\n                write(\" = \");\r\n                emitObjectLiteralBody(node, firstComputedPropertyIndex);\r\n                for (var i = firstComputedPropertyIndex, n = properties.length; i < n; i++) {\r\n                    writeComma();\r\n                    var property = properties[i];\r\n                    emitStart(property);\r\n                    if (property.kind === 145  || property.kind === 146 ) {\r\n                        var accessors = ts.getAllAccessorDeclarations(node.properties, property);\r\n                        if (property !== accessors.firstAccessor) {\r\n                            continue;\r\n                        }\r\n                        write(\"Object.defineProperty(\");\r\n                        emit(tempVar);\r\n                        write(\", \");\r\n                        emitStart(node.name);\r\n                        emitExpressionForPropertyName(property.name);\r\n                        emitEnd(property.name);\r\n                        write(\", {\");\r\n                        increaseIndent();\r\n                        if (accessors.getAccessor) {\r\n                            writeLine();\r\n                            emitLeadingComments(accessors.getAccessor);\r\n                            write(\"get: \");\r\n                            emitStart(accessors.getAccessor);\r\n                            write(\"function \");\r\n                            emitSignatureAndBody(accessors.getAccessor);\r\n                            emitEnd(accessors.getAccessor);\r\n                            emitTrailingComments(accessors.getAccessor);\r\n                            write(\",\");\r\n                        }\r\n                        if (accessors.setAccessor) {\r\n                            writeLine();\r\n                            emitLeadingComments(accessors.setAccessor);\r\n                            write(\"set: \");\r\n                            emitStart(accessors.setAccessor);\r\n                            write(\"function \");\r\n                            emitSignatureAndBody(accessors.setAccessor);\r\n                            emitEnd(accessors.setAccessor);\r\n                            emitTrailingComments(accessors.setAccessor);\r\n                            write(\",\");\r\n                        }\r\n                        writeLine();\r\n                        write(\"enumerable: true,\");\r\n                        writeLine();\r\n                        write(\"configurable: true\");\r\n                        decreaseIndent();\r\n                        writeLine();\r\n                        write(\"})\");\r\n                        emitEnd(property);\r\n                    }\r\n                    else {\r\n                        emitLeadingComments(property);\r\n                        emitStart(property.name);\r\n                        emit(tempVar);\r\n                        emitMemberAccessForPropertyName(property.name);\r\n                        emitEnd(property.name);\r\n                        write(\" = \");\r\n                        if (property.kind === 245 ) {\r\n                            emit(property.initializer);\r\n                        }\r\n                        else if (property.kind === 246 ) {\r\n                            emitExpressionIdentifier(property.name);\r\n                        }\r\n                        else if (property.kind === 143 ) {\r\n                            emitFunctionDeclaration(property);\r\n                        }\r\n                        else {\r\n                            ts.Debug.fail(\"ObjectLiteralElement type not accounted for: \" + property.kind);\r\n                        }\r\n                    }\r\n                    emitEnd(property);\r\n                }\r\n                writeComma();\r\n                emit(tempVar);\r\n                if (multiLine) {\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                }\r\n                write(\")\");\r\n                function writeComma() {\r\n                    if (multiLine) {\r\n                        write(\",\");\r\n                        writeLine();\r\n                    }\r\n                    else {\r\n                        write(\", \");\r\n                    }\r\n                }\r\n            }\r\n            function emitObjectLiteral(node) {\r\n                var properties = node.properties;\r\n                if (languageVersion < 2 ) {\r\n                    var numProperties = properties.length;\r\n                    var numInitialNonComputedProperties = numProperties;\r\n                    for (var i = 0, n = properties.length; i < n; i++) {\r\n                        if (properties[i].name.kind === 136 ) {\r\n                            numInitialNonComputedProperties = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    var hasComputedProperty = numInitialNonComputedProperties !== properties.length;\r\n                    if (hasComputedProperty) {\r\n                        emitDownlevelObjectLiteralWithComputedProperties(node, numInitialNonComputedProperties);\r\n                        return;\r\n                    }\r\n                }\r\n                emitObjectLiteralBody(node, properties.length);\r\n            }\r\n            function createBinaryExpression(left, operator, right, startsOnNewLine) {\r\n                var result = ts.createSynthesizedNode(181 , startsOnNewLine);\r\n                result.operatorToken = ts.createSynthesizedNode(operator);\r\n                result.left = left;\r\n                result.right = right;\r\n                return result;\r\n            }\r\n            function createPropertyAccessExpression(expression, name) {\r\n                var result = ts.createSynthesizedNode(166 );\r\n                result.expression = parenthesizeForAccess(expression);\r\n                result.dotToken = ts.createSynthesizedNode(21 );\r\n                result.name = name;\r\n                return result;\r\n            }\r\n            function createElementAccessExpression(expression, argumentExpression) {\r\n                var result = ts.createSynthesizedNode(167 );\r\n                result.expression = parenthesizeForAccess(expression);\r\n                result.argumentExpression = argumentExpression;\r\n                return result;\r\n            }\r\n            function parenthesizeForAccess(expr) {\r\n                while (expr.kind === 171  || expr.kind === 189 ) {\r\n                    expr = expr.expression;\r\n                }\r\n                if (ts.isLeftHandSideExpression(expr) &&\r\n                    expr.kind !== 169  &&\r\n                    expr.kind !== 8 ) {\r\n                    return expr;\r\n                }\r\n                var node = ts.createSynthesizedNode(172 );\r\n                node.expression = expr;\r\n                return node;\r\n            }\r\n            function emitComputedPropertyName(node) {\r\n                write(\"[\");\r\n                emitExpressionForPropertyName(node);\r\n                write(\"]\");\r\n            }\r\n            function emitMethod(node) {\r\n                if (languageVersion >= 2  && node.asteriskToken) {\r\n                    write(\"*\");\r\n                }\r\n                emit(node.name);\r\n                if (languageVersion < 2 ) {\r\n                    write(\": function \");\r\n                }\r\n                emitSignatureAndBody(node);\r\n            }\r\n            function emitPropertyAssignment(node) {\r\n                emit(node.name);\r\n                write(\": \");\r\n                emitTrailingCommentsOfPosition(node.initializer.pos);\r\n                emit(node.initializer);\r\n            }\r\n            function isNamespaceExportReference(node) {\r\n                var container = resolver.getReferencedExportContainer(node);\r\n                return container && container.kind !== 248 ;\r\n            }\r\n            function emitShorthandPropertyAssignment(node) {\r\n                writeTextOfNode(currentSourceFile, node.name);\r\n                if (languageVersion < 2  || isNamespaceExportReference(node.name)) {\r\n                    write(\": \");\r\n                    emit(node.name);\r\n                }\r\n                if (languageVersion >= 2  && node.objectAssignmentInitializer) {\r\n                    write(\" = \");\r\n                    emit(node.objectAssignmentInitializer);\r\n                }\r\n            }\r\n            function tryEmitConstantValue(node) {\r\n                var constantValue = tryGetConstEnumValue(node);\r\n                if (constantValue !== undefined) {\r\n                    write(constantValue.toString());\r\n                    if (!compilerOptions.removeComments) {\r\n                        var propertyName = node.kind === 166  ? ts.declarationNameToString(node.name) : ts.getTextOfNode(node.argumentExpression);\r\n                        write(\" \");\r\n                    }\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n            function tryGetConstEnumValue(node) {\r\n                if (compilerOptions.isolatedModules) {\r\n                    return undefined;\r\n                }\r\n                return node.kind === 166  || node.kind === 167 \r\n                    ? resolver.getConstantValue(node)\r\n                    : undefined;\r\n            }\r\n            function indentIfOnDifferentLines(parent, node1, node2, valueToWriteWhenNotIndenting) {\r\n                var realNodesAreOnDifferentLines = !ts.nodeIsSynthesized(parent) && !nodeEndIsOnSameLineAsNodeStart(node1, node2);\r\n                var synthesizedNodeIsOnDifferentLine = synthesizedNodeStartsOnNewLine(node2);\r\n                if (realNodesAreOnDifferentLines || synthesizedNodeIsOnDifferentLine) {\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    return true;\r\n                }\r\n                else {\r\n                    if (valueToWriteWhenNotIndenting) {\r\n                        write(valueToWriteWhenNotIndenting);\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            function emitPropertyAccess(node) {\r\n                if (tryEmitConstantValue(node)) {\r\n                    return;\r\n                }\r\n                emit(node.expression);\r\n                var indentedBeforeDot = indentIfOnDifferentLines(node, node.expression, node.dotToken);\r\n                var shouldEmitSpace;\r\n                if (!indentedBeforeDot) {\r\n                    if (node.expression.kind === 8 ) {\r\n                        var text = ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, node.expression);\r\n                        shouldEmitSpace = text.indexOf(ts.tokenToString(21 )) < 0;\r\n                    }\r\n                    else {\r\n                        var constantValue = tryGetConstEnumValue(node.expression);\r\n                        shouldEmitSpace = isFinite(constantValue) && Math.floor(constantValue) === constantValue;\r\n                    }\r\n                }\r\n                if (shouldEmitSpace) {\r\n                    write(\" .\");\r\n                }\r\n                else {\r\n                    write(\".\");\r\n                }\r\n                var indentedAfterDot = indentIfOnDifferentLines(node, node.dotToken, node.name);\r\n                emit(node.name);\r\n                decreaseIndentIf(indentedBeforeDot, indentedAfterDot);\r\n            }\r\n            function emitQualifiedName(node) {\r\n                emit(node.left);\r\n                write(\".\");\r\n                emit(node.right);\r\n            }\r\n            function emitQualifiedNameAsExpression(node, useFallback) {\r\n                if (node.left.kind === 69 ) {\r\n                    emitEntityNameAsExpression(node.left, useFallback);\r\n                }\r\n                else if (useFallback) {\r\n                    var temp = createAndRecordTempVariable(0 );\r\n                    write(\"(\");\r\n                    emitNodeWithoutSourceMap(temp);\r\n                    write(\" = \");\r\n                    emitEntityNameAsExpression(node.left,  true);\r\n                    write(\") && \");\r\n                    emitNodeWithoutSourceMap(temp);\r\n                }\r\n                else {\r\n                    emitEntityNameAsExpression(node.left,  false);\r\n                }\r\n                write(\".\");\r\n                emit(node.right);\r\n            }\r\n            function emitEntityNameAsExpression(node, useFallback) {\r\n                switch (node.kind) {\r\n                    case 69 :\r\n                        if (useFallback) {\r\n                            write(\"typeof \");\r\n                            emitExpressionIdentifier(node);\r\n                            write(\" !== 'undefined' && \");\r\n                        }\r\n                        emitExpressionIdentifier(node);\r\n                        break;\r\n                    case 135 :\r\n                        emitQualifiedNameAsExpression(node, useFallback);\r\n                        break;\r\n                }\r\n            }\r\n            function emitIndexedAccess(node) {\r\n                if (tryEmitConstantValue(node)) {\r\n                    return;\r\n                }\r\n                emit(node.expression);\r\n                write(\"[\");\r\n                emit(node.argumentExpression);\r\n                write(\"]\");\r\n            }\r\n            function hasSpreadElement(elements) {\r\n                return ts.forEach(elements, function (e) { return e.kind === 185 ; });\r\n            }\r\n            function skipParentheses(node) {\r\n                while (node.kind === 172  || node.kind === 171  || node.kind === 189 ) {\r\n                    node = node.expression;\r\n                }\r\n                return node;\r\n            }\r\n            function emitCallTarget(node) {\r\n                if (node.kind === 69  || node.kind === 97  || node.kind === 95 ) {\r\n                    emit(node);\r\n                    return node;\r\n                }\r\n                var temp = createAndRecordTempVariable(0 );\r\n                write(\"(\");\r\n                emit(temp);\r\n                write(\" = \");\r\n                emit(node);\r\n                write(\")\");\r\n                return temp;\r\n            }\r\n            function emitCallWithSpread(node) {\r\n                var target;\r\n                var expr = skipParentheses(node.expression);\r\n                if (expr.kind === 166 ) {\r\n                    target = emitCallTarget(expr.expression);\r\n                    write(\".\");\r\n                    emit(expr.name);\r\n                }\r\n                else if (expr.kind === 167 ) {\r\n                    target = emitCallTarget(expr.expression);\r\n                    write(\"[\");\r\n                    emit(expr.argumentExpression);\r\n                    write(\"]\");\r\n                }\r\n                else if (expr.kind === 95 ) {\r\n                    target = expr;\r\n                    write(\"_super\");\r\n                }\r\n                else {\r\n                    emit(node.expression);\r\n                }\r\n                write(\".apply(\");\r\n                if (target) {\r\n                    if (target.kind === 95 ) {\r\n                        emitThis(target);\r\n                    }\r\n                    else {\r\n                        emit(target);\r\n                    }\r\n                }\r\n                else {\r\n                    write(\"void 0\");\r\n                }\r\n                write(\", \");\r\n                emitListWithSpread(node.arguments,  false,  false,  false,  true);\r\n                write(\")\");\r\n            }\r\n            function emitCallExpression(node) {\r\n                if (languageVersion < 2  && hasSpreadElement(node.arguments)) {\r\n                    emitCallWithSpread(node);\r\n                    return;\r\n                }\r\n                var superCall = false;\r\n                if (node.expression.kind === 95 ) {\r\n                    emitSuper(node.expression);\r\n                    superCall = true;\r\n                }\r\n                else {\r\n                    emit(node.expression);\r\n                    superCall = node.expression.kind === 166  && node.expression.expression.kind === 95 ;\r\n                }\r\n                if (superCall && languageVersion < 2 ) {\r\n                    write(\".call(\");\r\n                    emitThis(node.expression);\r\n                    if (node.arguments.length) {\r\n                        write(\", \");\r\n                        emitCommaList(node.arguments);\r\n                    }\r\n                    write(\")\");\r\n                }\r\n                else {\r\n                    write(\"(\");\r\n                    emitCommaList(node.arguments);\r\n                    write(\")\");\r\n                }\r\n            }\r\n            function emitNewExpression(node) {\r\n                write(\"new \");\r\n                if (languageVersion === 1  &&\r\n                    node.arguments &&\r\n                    hasSpreadElement(node.arguments)) {\r\n                    write(\"(\");\r\n                    var target = emitCallTarget(node.expression);\r\n                    write(\".bind.apply(\");\r\n                    emit(target);\r\n                    write(\", [void 0].concat(\");\r\n                    emitListWithSpread(node.arguments,  false,  false,  false,  false);\r\n                    write(\")))\");\r\n                    write(\"()\");\r\n                }\r\n                else {\r\n                    emit(node.expression);\r\n                    if (node.arguments) {\r\n                        write(\"(\");\r\n                        emitCommaList(node.arguments);\r\n                        write(\")\");\r\n                    }\r\n                }\r\n            }\r\n            function emitTaggedTemplateExpression(node) {\r\n                if (languageVersion >= 2 ) {\r\n                    emit(node.tag);\r\n                    write(\" \");\r\n                    emit(node.template);\r\n                }\r\n                else {\r\n                    emitDownlevelTaggedTemplate(node);\r\n                }\r\n            }\r\n            function emitParenExpression(node) {\r\n                if (!ts.nodeIsSynthesized(node) && node.parent.kind !== 174 ) {\r\n                    if (node.expression.kind === 171  || node.expression.kind === 189 ) {\r\n                        var operand = node.expression.expression;\r\n                        while (operand.kind === 171  || operand.kind === 189 ) {\r\n                            operand = operand.expression;\r\n                        }\r\n                        if (operand.kind !== 179  &&\r\n                            operand.kind !== 177  &&\r\n                            operand.kind !== 176  &&\r\n                            operand.kind !== 175  &&\r\n                            operand.kind !== 180  &&\r\n                            operand.kind !== 169  &&\r\n                            !(operand.kind === 168  && node.parent.kind === 169 ) &&\r\n                            !(operand.kind === 173  && node.parent.kind === 168 ) &&\r\n                            !(operand.kind === 8  && node.parent.kind === 166 )) {\r\n                            emit(operand);\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                write(\"(\");\r\n                emit(node.expression);\r\n                write(\")\");\r\n            }\r\n            function emitDeleteExpression(node) {\r\n                write(ts.tokenToString(78 ));\r\n                write(\" \");\r\n                emit(node.expression);\r\n            }\r\n            function emitVoidExpression(node) {\r\n                write(ts.tokenToString(103 ));\r\n                write(\" \");\r\n                emit(node.expression);\r\n            }\r\n            function emitTypeOfExpression(node) {\r\n                write(ts.tokenToString(101 ));\r\n                write(\" \");\r\n                emit(node.expression);\r\n            }\r\n            function isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node) {\r\n                if (!isCurrentFileSystemExternalModule() || node.kind !== 69  || ts.nodeIsSynthesized(node)) {\r\n                    return false;\r\n                }\r\n                var isVariableDeclarationOrBindingElement = node.parent && (node.parent.kind === 211  || node.parent.kind === 163 );\r\n                var targetDeclaration = isVariableDeclarationOrBindingElement\r\n                    ? node.parent\r\n                    : resolver.getReferencedValueDeclaration(node);\r\n                return isSourceFileLevelDeclarationInSystemJsModule(targetDeclaration,  true);\r\n            }\r\n            function emitPrefixUnaryExpression(node) {\r\n                var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.operand);\r\n                if (exportChanged) {\r\n                    write(exportFunctionForFile + \"(\\\"\");\r\n                    emitNodeWithoutSourceMap(node.operand);\r\n                    write(\"\\\", \");\r\n                }\r\n                write(ts.tokenToString(node.operator));\r\n                if (node.operand.kind === 179 ) {\r\n                    var operand = node.operand;\r\n                    if (node.operator === 35  && (operand.operator === 35  || operand.operator === 41 )) {\r\n                        write(\" \");\r\n                    }\r\n                    else if (node.operator === 36  && (operand.operator === 36  || operand.operator === 42 )) {\r\n                        write(\" \");\r\n                    }\r\n                }\r\n                emit(node.operand);\r\n                if (exportChanged) {\r\n                    write(\")\");\r\n                }\r\n            }\r\n            function emitPostfixUnaryExpression(node) {\r\n                var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.operand);\r\n                if (exportChanged) {\r\n                    write(\"(\" + exportFunctionForFile + \"(\\\"\");\r\n                    emitNodeWithoutSourceMap(node.operand);\r\n                    write(\"\\\", \");\r\n                    write(ts.tokenToString(node.operator));\r\n                    emit(node.operand);\r\n                    if (node.operator === 41 ) {\r\n                        write(\") - 1)\");\r\n                    }\r\n                    else {\r\n                        write(\") + 1)\");\r\n                    }\r\n                }\r\n                else {\r\n                    emit(node.operand);\r\n                    write(ts.tokenToString(node.operator));\r\n                }\r\n            }\r\n            function shouldHoistDeclarationInSystemJsModule(node) {\r\n                return isSourceFileLevelDeclarationInSystemJsModule(node,  false);\r\n            }\r\n                        function isSourceFileLevelDeclarationInSystemJsModule(node, isExported) {\r\n                if (!node || languageVersion >= 2  || !isCurrentFileSystemExternalModule()) {\r\n                    return false;\r\n                }\r\n                var current = node;\r\n                while (current) {\r\n                    if (current.kind === 248 ) {\r\n                        return !isExported || ((ts.getCombinedNodeFlags(node) & 1 ) !== 0);\r\n                    }\r\n                    else if (ts.isFunctionLike(current) || current.kind === 219 ) {\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        current = current.parent;\r\n                    }\r\n                }\r\n            }\r\n                        function emitExponentiationOperator(node) {\r\n                var leftHandSideExpression = node.left;\r\n                if (node.operatorToken.kind === 60 ) {\r\n                    var synthesizedLHS;\r\n                    var shouldEmitParentheses = false;\r\n                    if (ts.isElementAccessExpression(leftHandSideExpression)) {\r\n                        shouldEmitParentheses = true;\r\n                        write(\"(\");\r\n                        synthesizedLHS = ts.createSynthesizedNode(167 ,  false);\r\n                        var identifier = emitTempVariableAssignment(leftHandSideExpression.expression,  false,  false);\r\n                        synthesizedLHS.expression = identifier;\r\n                        if (leftHandSideExpression.argumentExpression.kind !== 8  &&\r\n                            leftHandSideExpression.argumentExpression.kind !== 9 ) {\r\n                            var tempArgumentExpression = createAndRecordTempVariable(268435456 );\r\n                            synthesizedLHS.argumentExpression = tempArgumentExpression;\r\n                            emitAssignment(tempArgumentExpression, leftHandSideExpression.argumentExpression,  true);\r\n                        }\r\n                        else {\r\n                            synthesizedLHS.argumentExpression = leftHandSideExpression.argumentExpression;\r\n                        }\r\n                        write(\", \");\r\n                    }\r\n                    else if (ts.isPropertyAccessExpression(leftHandSideExpression)) {\r\n                        shouldEmitParentheses = true;\r\n                        write(\"(\");\r\n                        synthesizedLHS = ts.createSynthesizedNode(166 ,  false);\r\n                        var identifier = emitTempVariableAssignment(leftHandSideExpression.expression,  false,  false);\r\n                        synthesizedLHS.expression = identifier;\r\n                        synthesizedLHS.dotToken = leftHandSideExpression.dotToken;\r\n                        synthesizedLHS.name = leftHandSideExpression.name;\r\n                        write(\", \");\r\n                    }\r\n                    emit(synthesizedLHS || leftHandSideExpression);\r\n                    write(\" = \");\r\n                    write(\"Math.pow(\");\r\n                    emit(synthesizedLHS || leftHandSideExpression);\r\n                    write(\", \");\r\n                    emit(node.right);\r\n                    write(\")\");\r\n                    if (shouldEmitParentheses) {\r\n                        write(\")\");\r\n                    }\r\n                }\r\n                else {\r\n                    write(\"Math.pow(\");\r\n                    emit(leftHandSideExpression);\r\n                    write(\", \");\r\n                    emit(node.right);\r\n                    write(\")\");\r\n                }\r\n            }\r\n            function emitBinaryExpression(node) {\r\n                if (languageVersion < 2  && node.operatorToken.kind === 56  &&\r\n                    (node.left.kind === 165  || node.left.kind === 164 )) {\r\n                    emitDestructuring(node, node.parent.kind === 195 );\r\n                }\r\n                else {\r\n                    var exportChanged = node.operatorToken.kind >= 56  &&\r\n                        node.operatorToken.kind <= 68  &&\r\n                        isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.left);\r\n                    if (exportChanged) {\r\n                        write(exportFunctionForFile + \"(\\\"\");\r\n                        emitNodeWithoutSourceMap(node.left);\r\n                        write(\"\\\", \");\r\n                    }\r\n                    if (node.operatorToken.kind === 38  || node.operatorToken.kind === 60 ) {\r\n                        emitExponentiationOperator(node);\r\n                    }\r\n                    else {\r\n                        emit(node.left);\r\n                        var indentedBeforeOperator = indentIfOnDifferentLines(node, node.left, node.operatorToken, node.operatorToken.kind !== 24  ? \" \" : undefined);\r\n                        write(ts.tokenToString(node.operatorToken.kind));\r\n                        var indentedAfterOperator = indentIfOnDifferentLines(node, node.operatorToken, node.right, \" \");\r\n                        emit(node.right);\r\n                        decreaseIndentIf(indentedBeforeOperator, indentedAfterOperator);\r\n                    }\r\n                    if (exportChanged) {\r\n                        write(\")\");\r\n                    }\r\n                }\r\n            }\r\n            function synthesizedNodeStartsOnNewLine(node) {\r\n                return ts.nodeIsSynthesized(node) && node.startsOnNewLine;\r\n            }\r\n            function emitConditionalExpression(node) {\r\n                emit(node.condition);\r\n                var indentedBeforeQuestion = indentIfOnDifferentLines(node, node.condition, node.questionToken, \" \");\r\n                write(\"?\");\r\n                var indentedAfterQuestion = indentIfOnDifferentLines(node, node.questionToken, node.whenTrue, \" \");\r\n                emit(node.whenTrue);\r\n                decreaseIndentIf(indentedBeforeQuestion, indentedAfterQuestion);\r\n                var indentedBeforeColon = indentIfOnDifferentLines(node, node.whenTrue, node.colonToken, \" \");\r\n                write(\":\");\r\n                var indentedAfterColon = indentIfOnDifferentLines(node, node.colonToken, node.whenFalse, \" \");\r\n                emit(node.whenFalse);\r\n                decreaseIndentIf(indentedBeforeColon, indentedAfterColon);\r\n            }\r\n            function decreaseIndentIf(value1, value2) {\r\n                if (value1) {\r\n                    decreaseIndent();\r\n                }\r\n                if (value2) {\r\n                    decreaseIndent();\r\n                }\r\n            }\r\n            function isSingleLineEmptyBlock(node) {\r\n                if (node && node.kind === 192 ) {\r\n                    var block = node;\r\n                    return block.statements.length === 0 && nodeEndIsOnSameLineAsNodeStart(block, block);\r\n                }\r\n            }\r\n            function emitBlock(node) {\r\n                if (isSingleLineEmptyBlock(node)) {\r\n                    emitToken(15 , node.pos);\r\n                    write(\" \");\r\n                    emitToken(16 , node.statements.end);\r\n                    return;\r\n                }\r\n                emitToken(15 , node.pos);\r\n                increaseIndent();\r\n                scopeEmitStart(node.parent);\r\n                if (node.kind === 219 ) {\r\n                    ts.Debug.assert(node.parent.kind === 218 );\r\n                    emitCaptureThisForNodeIfNecessary(node.parent);\r\n                }\r\n                emitLines(node.statements);\r\n                if (node.kind === 219 ) {\r\n                    emitTempDeclarations( true);\r\n                }\r\n                decreaseIndent();\r\n                writeLine();\r\n                emitToken(16 , node.statements.end);\r\n                scopeEmitEnd();\r\n            }\r\n            function emitEmbeddedStatement(node) {\r\n                if (node.kind === 192 ) {\r\n                    write(\" \");\r\n                    emit(node);\r\n                }\r\n                else {\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    emit(node);\r\n                    decreaseIndent();\r\n                }\r\n            }\r\n            function emitExpressionStatement(node) {\r\n                emitParenthesizedIf(node.expression,  node.expression.kind === 174 );\r\n                write(\";\");\r\n            }\r\n            function emitIfStatement(node) {\r\n                var endPos = emitToken(88 , node.pos);\r\n                write(\" \");\r\n                endPos = emitToken(17 , endPos);\r\n                emit(node.expression);\r\n                emitToken(18 , node.expression.end);\r\n                emitEmbeddedStatement(node.thenStatement);\r\n                if (node.elseStatement) {\r\n                    writeLine();\r\n                    emitToken(80 , node.thenStatement.end);\r\n                    if (node.elseStatement.kind === 196 ) {\r\n                        write(\" \");\r\n                        emit(node.elseStatement);\r\n                    }\r\n                    else {\r\n                        emitEmbeddedStatement(node.elseStatement);\r\n                    }\r\n                }\r\n            }\r\n            function emitDoStatement(node) {\r\n                write(\"do\");\r\n                emitEmbeddedStatement(node.statement);\r\n                if (node.statement.kind === 192 ) {\r\n                    write(\" \");\r\n                }\r\n                else {\r\n                    writeLine();\r\n                }\r\n                write(\"while (\");\r\n                emit(node.expression);\r\n                write(\");\");\r\n            }\r\n            function emitWhileStatement(node) {\r\n                write(\"while (\");\r\n                emit(node.expression);\r\n                write(\")\");\r\n                emitEmbeddedStatement(node.statement);\r\n            }\r\n                        function tryEmitStartOfVariableDeclarationList(decl, startPos) {\r\n                if (shouldHoistVariable(decl,  true)) {\r\n                    return false;\r\n                }\r\n                var tokenKind = 102 ;\r\n                if (decl && languageVersion >= 2 ) {\r\n                    if (ts.isLet(decl)) {\r\n                        tokenKind = 108 ;\r\n                    }\r\n                    else if (ts.isConst(decl)) {\r\n                        tokenKind = 74 ;\r\n                    }\r\n                }\r\n                if (startPos !== undefined) {\r\n                    emitToken(tokenKind, startPos);\r\n                    write(\" \");\r\n                }\r\n                else {\r\n                    switch (tokenKind) {\r\n                        case 102 :\r\n                            write(\"var \");\r\n                            break;\r\n                        case 108 :\r\n                            write(\"let \");\r\n                            break;\r\n                        case 74 :\r\n                            write(\"const \");\r\n                            break;\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n            function emitVariableDeclarationListSkippingUninitializedEntries(list) {\r\n                var started = false;\r\n                for (var _a = 0, _b = list.declarations; _a < _b.length; _a++) {\r\n                    var decl = _b[_a];\r\n                    if (!decl.initializer) {\r\n                        continue;\r\n                    }\r\n                    if (!started) {\r\n                        started = true;\r\n                    }\r\n                    else {\r\n                        write(\", \");\r\n                    }\r\n                    emit(decl);\r\n                }\r\n                return started;\r\n            }\r\n            function emitForStatement(node) {\r\n                var endPos = emitToken(86 , node.pos);\r\n                write(\" \");\r\n                endPos = emitToken(17 , endPos);\r\n                if (node.initializer && node.initializer.kind === 212 ) {\r\n                    var variableDeclarationList = node.initializer;\r\n                    var startIsEmitted = tryEmitStartOfVariableDeclarationList(variableDeclarationList, endPos);\r\n                    if (startIsEmitted) {\r\n                        emitCommaList(variableDeclarationList.declarations);\r\n                    }\r\n                    else {\r\n                        emitVariableDeclarationListSkippingUninitializedEntries(variableDeclarationList);\r\n                    }\r\n                }\r\n                else if (node.initializer) {\r\n                    emit(node.initializer);\r\n                }\r\n                write(\";\");\r\n                emitOptional(\" \", node.condition);\r\n                write(\";\");\r\n                emitOptional(\" \", node.incrementor);\r\n                write(\")\");\r\n                emitEmbeddedStatement(node.statement);\r\n            }\r\n            function emitForInOrForOfStatement(node) {\r\n                if (languageVersion < 2  && node.kind === 201 ) {\r\n                    return emitDownLevelForOfStatement(node);\r\n                }\r\n                var endPos = emitToken(86 , node.pos);\r\n                write(\" \");\r\n                endPos = emitToken(17 , endPos);\r\n                if (node.initializer.kind === 212 ) {\r\n                    var variableDeclarationList = node.initializer;\r\n                    if (variableDeclarationList.declarations.length >= 1) {\r\n                        tryEmitStartOfVariableDeclarationList(variableDeclarationList, endPos);\r\n                        emit(variableDeclarationList.declarations[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    emit(node.initializer);\r\n                }\r\n                if (node.kind === 200 ) {\r\n                    write(\" in \");\r\n                }\r\n                else {\r\n                    write(\" of \");\r\n                }\r\n                emit(node.expression);\r\n                emitToken(18 , node.expression.end);\r\n                emitEmbeddedStatement(node.statement);\r\n            }\r\n            function emitDownLevelForOfStatement(node) {\r\n                var endPos = emitToken(86 , node.pos);\r\n                write(\" \");\r\n                endPos = emitToken(17 , endPos);\r\n                var rhsIsIdentifier = node.expression.kind === 69 ;\r\n                var counter = createTempVariable(268435456 );\r\n                var rhsReference = rhsIsIdentifier ? node.expression : createTempVariable(0 );\r\n                emitStart(node.expression);\r\n                write(\"var \");\r\n                emitNodeWithoutSourceMap(counter);\r\n                write(\" = 0\");\r\n                emitEnd(node.expression);\r\n                if (!rhsIsIdentifier) {\r\n                    write(\", \");\r\n                    emitStart(node.expression);\r\n                    emitNodeWithoutSourceMap(rhsReference);\r\n                    write(\" = \");\r\n                    emitNodeWithoutSourceMap(node.expression);\r\n                    emitEnd(node.expression);\r\n                }\r\n                write(\"; \");\r\n                emitStart(node.initializer);\r\n                emitNodeWithoutSourceMap(counter);\r\n                write(\" < \");\r\n                emitNodeWithCommentsAndWithoutSourcemap(rhsReference);\r\n                write(\".length\");\r\n                emitEnd(node.initializer);\r\n                write(\"; \");\r\n                emitStart(node.initializer);\r\n                emitNodeWithoutSourceMap(counter);\r\n                write(\"++\");\r\n                emitEnd(node.initializer);\r\n                emitToken(18 , node.expression.end);\r\n                write(\" {\");\r\n                writeLine();\r\n                increaseIndent();\r\n                var rhsIterationValue = createElementAccessExpression(rhsReference, counter);\r\n                emitStart(node.initializer);\r\n                if (node.initializer.kind === 212 ) {\r\n                    write(\"var \");\r\n                    var variableDeclarationList = node.initializer;\r\n                    if (variableDeclarationList.declarations.length > 0) {\r\n                        var declaration = variableDeclarationList.declarations[0];\r\n                        if (ts.isBindingPattern(declaration.name)) {\r\n                            emitDestructuring(declaration,  false, rhsIterationValue);\r\n                        }\r\n                        else {\r\n                            emitNodeWithCommentsAndWithoutSourcemap(declaration);\r\n                            write(\" = \");\r\n                            emitNodeWithoutSourceMap(rhsIterationValue);\r\n                        }\r\n                    }\r\n                    else {\r\n                        emitNodeWithoutSourceMap(createTempVariable(0 ));\r\n                        write(\" = \");\r\n                        emitNodeWithoutSourceMap(rhsIterationValue);\r\n                    }\r\n                }\r\n                else {\r\n                    var assignmentExpression = createBinaryExpression(node.initializer, 56 , rhsIterationValue,  false);\r\n                    if (node.initializer.kind === 164  || node.initializer.kind === 165 ) {\r\n                        emitDestructuring(assignmentExpression,  true,  undefined);\r\n                    }\r\n                    else {\r\n                        emitNodeWithCommentsAndWithoutSourcemap(assignmentExpression);\r\n                    }\r\n                }\r\n                emitEnd(node.initializer);\r\n                write(\";\");\r\n                if (node.statement.kind === 192 ) {\r\n                    emitLines(node.statement.statements);\r\n                }\r\n                else {\r\n                    writeLine();\r\n                    emit(node.statement);\r\n                }\r\n                writeLine();\r\n                decreaseIndent();\r\n                write(\"}\");\r\n            }\r\n            function emitBreakOrContinueStatement(node) {\r\n                emitToken(node.kind === 203  ? 70  : 75 , node.pos);\r\n                emitOptional(\" \", node.label);\r\n                write(\";\");\r\n            }\r\n            function emitReturnStatement(node) {\r\n                emitToken(94 , node.pos);\r\n                emitOptional(\" \", node.expression);\r\n                write(\";\");\r\n            }\r\n            function emitWithStatement(node) {\r\n                write(\"with (\");\r\n                emit(node.expression);\r\n                write(\")\");\r\n                emitEmbeddedStatement(node.statement);\r\n            }\r\n            function emitSwitchStatement(node) {\r\n                var endPos = emitToken(96 , node.pos);\r\n                write(\" \");\r\n                emitToken(17 , endPos);\r\n                emit(node.expression);\r\n                endPos = emitToken(18 , node.expression.end);\r\n                write(\" \");\r\n                emitCaseBlock(node.caseBlock, endPos);\r\n            }\r\n            function emitCaseBlock(node, startPos) {\r\n                emitToken(15 , startPos);\r\n                increaseIndent();\r\n                emitLines(node.clauses);\r\n                decreaseIndent();\r\n                writeLine();\r\n                emitToken(16 , node.clauses.end);\r\n            }\r\n            function nodeStartPositionsAreOnSameLine(node1, node2) {\r\n                return ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node1.pos)) ===\r\n                    ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node2.pos));\r\n            }\r\n            function nodeEndPositionsAreOnSameLine(node1, node2) {\r\n                return ts.getLineOfLocalPosition(currentSourceFile, node1.end) ===\r\n                    ts.getLineOfLocalPosition(currentSourceFile, node2.end);\r\n            }\r\n            function nodeEndIsOnSameLineAsNodeStart(node1, node2) {\r\n                return ts.getLineOfLocalPosition(currentSourceFile, node1.end) ===\r\n                    ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node2.pos));\r\n            }\r\n            function emitCaseOrDefaultClause(node) {\r\n                if (node.kind === 241 ) {\r\n                    write(\"case \");\r\n                    emit(node.expression);\r\n                    write(\":\");\r\n                }\r\n                else {\r\n                    write(\"default:\");\r\n                }\r\n                if (node.statements.length === 1 && nodeStartPositionsAreOnSameLine(node, node.statements[0])) {\r\n                    write(\" \");\r\n                    emit(node.statements[0]);\r\n                }\r\n                else {\r\n                    increaseIndent();\r\n                    emitLines(node.statements);\r\n                    decreaseIndent();\r\n                }\r\n            }\r\n            function emitThrowStatement(node) {\r\n                write(\"throw \");\r\n                emit(node.expression);\r\n                write(\";\");\r\n            }\r\n            function emitTryStatement(node) {\r\n                write(\"try \");\r\n                emit(node.tryBlock);\r\n                emit(node.catchClause);\r\n                if (node.finallyBlock) {\r\n                    writeLine();\r\n                    write(\"finally \");\r\n                    emit(node.finallyBlock);\r\n                }\r\n            }\r\n            function emitCatchClause(node) {\r\n                writeLine();\r\n                var endPos = emitToken(72 , node.pos);\r\n                write(\" \");\r\n                emitToken(17 , endPos);\r\n                emit(node.variableDeclaration);\r\n                emitToken(18 , node.variableDeclaration ? node.variableDeclaration.end : endPos);\r\n                write(\" \");\r\n                emitBlock(node.block);\r\n            }\r\n            function emitDebuggerStatement(node) {\r\n                emitToken(76 , node.pos);\r\n                write(\";\");\r\n            }\r\n            function emitLabelledStatement(node) {\r\n                emit(node.label);\r\n                write(\": \");\r\n                emit(node.statement);\r\n            }\r\n            function getContainingModule(node) {\r\n                do {\r\n                    node = node.parent;\r\n                } while (node && node.kind !== 218 );\r\n                return node;\r\n            }\r\n            function emitContainingModuleName(node) {\r\n                var container = getContainingModule(node);\r\n                write(container ? getGeneratedNameForNode(container) : \"exports\");\r\n            }\r\n            function emitModuleMemberName(node) {\r\n                emitStart(node.name);\r\n                if (ts.getCombinedNodeFlags(node) & 1 ) {\r\n                    var container = getContainingModule(node);\r\n                    if (container) {\r\n                        write(getGeneratedNameForNode(container));\r\n                        write(\".\");\r\n                    }\r\n                    else if (modulekind !== 5  && modulekind !== 4 ) {\r\n                        write(\"exports.\");\r\n                    }\r\n                }\r\n                emitNodeWithCommentsAndWithoutSourcemap(node.name);\r\n                emitEnd(node.name);\r\n            }\r\n            function createVoidZero() {\r\n                var zero = ts.createSynthesizedNode(8 );\r\n                zero.text = \"0\";\r\n                var result = ts.createSynthesizedNode(177 );\r\n                result.expression = zero;\r\n                return result;\r\n            }\r\n            function emitEs6ExportDefaultCompat(node) {\r\n                if (node.parent.kind === 248 ) {\r\n                    ts.Debug.assert(!!(node.flags & 1024 ) || node.kind === 227 );\r\n                    if (modulekind === 1  || modulekind === 2  || modulekind === 3 ) {\r\n                        if (!currentSourceFile.symbol.exports[\"___esModule\"]) {\r\n                            if (languageVersion === 1 ) {\r\n                                write(\"Object.defineProperty(exports, \\\"__esModule\\\", { value: true });\");\r\n                                writeLine();\r\n                            }\r\n                            else if (languageVersion === 0 ) {\r\n                                write(\"exports.__esModule = true;\");\r\n                                writeLine();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function emitExportMemberAssignment(node) {\r\n                if (node.flags & 1 ) {\r\n                    writeLine();\r\n                    emitStart(node);\r\n                    if (modulekind === 4  && node.parent === currentSourceFile) {\r\n                        write(exportFunctionForFile + \"(\\\"\");\r\n                        if (node.flags & 1024 ) {\r\n                            write(\"default\");\r\n                        }\r\n                        else {\r\n                            emitNodeWithCommentsAndWithoutSourcemap(node.name);\r\n                        }\r\n                        write(\"\\\", \");\r\n                        emitDeclarationName(node);\r\n                        write(\")\");\r\n                    }\r\n                    else {\r\n                        if (node.flags & 1024 ) {\r\n                            emitEs6ExportDefaultCompat(node);\r\n                            if (languageVersion === 0 ) {\r\n                                write(\"exports[\\\"default\\\"]\");\r\n                            }\r\n                            else {\r\n                                write(\"exports.default\");\r\n                            }\r\n                        }\r\n                        else {\r\n                            emitModuleMemberName(node);\r\n                        }\r\n                        write(\" = \");\r\n                        emitDeclarationName(node);\r\n                    }\r\n                    emitEnd(node);\r\n                    write(\";\");\r\n                }\r\n            }\r\n            function emitExportMemberAssignments(name) {\r\n                if (modulekind === 4 ) {\r\n                    return;\r\n                }\r\n                if (!exportEquals && exportSpecifiers && ts.hasProperty(exportSpecifiers, name.text)) {\r\n                    for (var _a = 0, _b = exportSpecifiers[name.text]; _a < _b.length; _a++) {\r\n                        var specifier = _b[_a];\r\n                        writeLine();\r\n                        emitStart(specifier.name);\r\n                        emitContainingModuleName(specifier);\r\n                        write(\".\");\r\n                        emitNodeWithCommentsAndWithoutSourcemap(specifier.name);\r\n                        emitEnd(specifier.name);\r\n                        write(\" = \");\r\n                        emitExpressionIdentifier(name);\r\n                        write(\";\");\r\n                    }\r\n                }\r\n            }\r\n            function emitExportSpecifierInSystemModule(specifier) {\r\n                ts.Debug.assert(modulekind === 4 );\r\n                if (!resolver.getReferencedValueDeclaration(specifier.propertyName || specifier.name) && !resolver.isValueAliasDeclaration(specifier)) {\r\n                    return;\r\n                }\r\n                writeLine();\r\n                emitStart(specifier.name);\r\n                write(exportFunctionForFile + \"(\\\"\");\r\n                emitNodeWithCommentsAndWithoutSourcemap(specifier.name);\r\n                write(\"\\\", \");\r\n                emitExpressionIdentifier(specifier.propertyName || specifier.name);\r\n                write(\")\");\r\n                emitEnd(specifier.name);\r\n                write(\";\");\r\n            }\r\n                        function emitAssignment(name, value, shouldEmitCommaBeforeAssignment) {\r\n                if (shouldEmitCommaBeforeAssignment) {\r\n                    write(\", \");\r\n                }\r\n                var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(name);\r\n                if (exportChanged) {\r\n                    write(exportFunctionForFile + \"(\\\"\");\r\n                    emitNodeWithCommentsAndWithoutSourcemap(name);\r\n                    write(\"\\\", \");\r\n                }\r\n                var isVariableDeclarationOrBindingElement = name.parent && (name.parent.kind === 211  || name.parent.kind === 163 );\r\n                if (isVariableDeclarationOrBindingElement) {\r\n                    emitModuleMemberName(name.parent);\r\n                }\r\n                else {\r\n                    emit(name);\r\n                }\r\n                write(\" = \");\r\n                emit(value);\r\n                if (exportChanged) {\r\n                    write(\")\");\r\n                }\r\n            }\r\n                        function emitTempVariableAssignment(expression, canDefineTempVariablesInPlace, shouldEmitCommaBeforeAssignment) {\r\n                var identifier = createTempVariable(0 );\r\n                if (!canDefineTempVariablesInPlace) {\r\n                    recordTempDeclaration(identifier);\r\n                }\r\n                emitAssignment(identifier, expression, shouldEmitCommaBeforeAssignment);\r\n                return identifier;\r\n            }\r\n            function emitDestructuring(root, isAssignmentExpressionStatement, value) {\r\n                var emitCount = 0;\r\n                var canDefineTempVariablesInPlace = false;\r\n                if (root.kind === 211 ) {\r\n                    var isExported = ts.getCombinedNodeFlags(root) & 1 ;\r\n                    var isSourceLevelForSystemModuleKind = shouldHoistDeclarationInSystemJsModule(root);\r\n                    canDefineTempVariablesInPlace = !isExported && !isSourceLevelForSystemModuleKind;\r\n                }\r\n                else if (root.kind === 138 ) {\r\n                    canDefineTempVariablesInPlace = true;\r\n                }\r\n                if (root.kind === 181 ) {\r\n                    emitAssignmentExpression(root);\r\n                }\r\n                else {\r\n                    ts.Debug.assert(!isAssignmentExpressionStatement);\r\n                    emitBindingElement(root, value);\r\n                }\r\n                                function ensureIdentifier(expr, reuseIdentifierExpressions) {\r\n                    if (expr.kind === 69  && reuseIdentifierExpressions) {\r\n                        return expr;\r\n                    }\r\n                    var identifier = emitTempVariableAssignment(expr, canDefineTempVariablesInPlace, emitCount > 0);\r\n                    emitCount++;\r\n                    return identifier;\r\n                }\r\n                function createDefaultValueCheck(value, defaultValue) {\r\n                    value = ensureIdentifier(value,  true);\r\n                    var equals = ts.createSynthesizedNode(181 );\r\n                    equals.left = value;\r\n                    equals.operatorToken = ts.createSynthesizedNode(32 );\r\n                    equals.right = createVoidZero();\r\n                    return createConditionalExpression(equals, defaultValue, value);\r\n                }\r\n                function createConditionalExpression(condition, whenTrue, whenFalse) {\r\n                    var cond = ts.createSynthesizedNode(182 );\r\n                    cond.condition = condition;\r\n                    cond.questionToken = ts.createSynthesizedNode(53 );\r\n                    cond.whenTrue = whenTrue;\r\n                    cond.colonToken = ts.createSynthesizedNode(54 );\r\n                    cond.whenFalse = whenFalse;\r\n                    return cond;\r\n                }\r\n                function createNumericLiteral(value) {\r\n                    var node = ts.createSynthesizedNode(8 );\r\n                    node.text = \"\" + value;\r\n                    return node;\r\n                }\r\n                function createPropertyAccessForDestructuringProperty(object, propName) {\r\n                    var syntheticName = ts.createSynthesizedNode(propName.kind);\r\n                    syntheticName.text = propName.text;\r\n                    if (syntheticName.kind !== 69 ) {\r\n                        return createElementAccessExpression(object, syntheticName);\r\n                    }\r\n                    return createPropertyAccessExpression(object, syntheticName);\r\n                }\r\n                function createSliceCall(value, sliceIndex) {\r\n                    var call = ts.createSynthesizedNode(168 );\r\n                    var sliceIdentifier = ts.createSynthesizedNode(69 );\r\n                    sliceIdentifier.text = \"slice\";\r\n                    call.expression = createPropertyAccessExpression(value, sliceIdentifier);\r\n                    call.arguments = ts.createSynthesizedNodeArray();\r\n                    call.arguments[0] = createNumericLiteral(sliceIndex);\r\n                    return call;\r\n                }\r\n                function emitObjectLiteralAssignment(target, value) {\r\n                    var properties = target.properties;\r\n                    if (properties.length !== 1) {\r\n                        value = ensureIdentifier(value,  true);\r\n                    }\r\n                    for (var _a = 0; _a < properties.length; _a++) {\r\n                        var p = properties[_a];\r\n                        if (p.kind === 245  || p.kind === 246 ) {\r\n                            var propName = p.name;\r\n                            var target_1 = p.kind === 246  ? p : p.initializer || propName;\r\n                            emitDestructuringAssignment(target_1, createPropertyAccessForDestructuringProperty(value, propName));\r\n                        }\r\n                    }\r\n                }\r\n                function emitArrayLiteralAssignment(target, value) {\r\n                    var elements = target.elements;\r\n                    if (elements.length !== 1) {\r\n                        value = ensureIdentifier(value,  true);\r\n                    }\r\n                    for (var i = 0; i < elements.length; i++) {\r\n                        var e = elements[i];\r\n                        if (e.kind !== 187 ) {\r\n                            if (e.kind !== 185 ) {\r\n                                emitDestructuringAssignment(e, createElementAccessExpression(value, createNumericLiteral(i)));\r\n                            }\r\n                            else if (i === elements.length - 1) {\r\n                                emitDestructuringAssignment(e.expression, createSliceCall(value, i));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                function emitDestructuringAssignment(target, value) {\r\n                    if (target.kind === 246 ) {\r\n                        if (target.objectAssignmentInitializer) {\r\n                            value = createDefaultValueCheck(value, target.objectAssignmentInitializer);\r\n                        }\r\n                        target = target.name;\r\n                    }\r\n                    else if (target.kind === 181  && target.operatorToken.kind === 56 ) {\r\n                        value = createDefaultValueCheck(value, target.right);\r\n                        target = target.left;\r\n                    }\r\n                    if (target.kind === 165 ) {\r\n                        emitObjectLiteralAssignment(target, value);\r\n                    }\r\n                    else if (target.kind === 164 ) {\r\n                        emitArrayLiteralAssignment(target, value);\r\n                    }\r\n                    else {\r\n                        emitAssignment(target, value,  emitCount > 0);\r\n                        emitCount++;\r\n                    }\r\n                }\r\n                function emitAssignmentExpression(root) {\r\n                    var target = root.left;\r\n                    var value = root.right;\r\n                    if (ts.isEmptyObjectLiteralOrArrayLiteral(target)) {\r\n                        emit(value);\r\n                    }\r\n                    else if (isAssignmentExpressionStatement) {\r\n                        emitDestructuringAssignment(target, value);\r\n                    }\r\n                    else {\r\n                        if (root.parent.kind !== 172 ) {\r\n                            write(\"(\");\r\n                        }\r\n                        value = ensureIdentifier(value,  true);\r\n                        emitDestructuringAssignment(target, value);\r\n                        write(\", \");\r\n                        emit(value);\r\n                        if (root.parent.kind !== 172 ) {\r\n                            write(\")\");\r\n                        }\r\n                    }\r\n                }\r\n                function emitBindingElement(target, value) {\r\n                    if (target.initializer) {\r\n                        value = value ? createDefaultValueCheck(value, target.initializer) : target.initializer;\r\n                    }\r\n                    else if (!value) {\r\n                        value = createVoidZero();\r\n                    }\r\n                    if (ts.isBindingPattern(target.name)) {\r\n                        var pattern = target.name;\r\n                        var elements = pattern.elements;\r\n                        var numElements = elements.length;\r\n                        if (numElements !== 1) {\r\n                            value = ensureIdentifier(value,  numElements !== 0);\r\n                        }\r\n                        for (var i = 0; i < numElements; i++) {\r\n                            var element = elements[i];\r\n                            if (pattern.kind === 161 ) {\r\n                                var propName = element.propertyName || element.name;\r\n                                emitBindingElement(element, createPropertyAccessForDestructuringProperty(value, propName));\r\n                            }\r\n                            else if (element.kind !== 187 ) {\r\n                                if (!element.dotDotDotToken) {\r\n                                    emitBindingElement(element, createElementAccessExpression(value, createNumericLiteral(i)));\r\n                                }\r\n                                else if (i === numElements - 1) {\r\n                                    emitBindingElement(element, createSliceCall(value, i));\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        emitAssignment(target.name, value,  emitCount > 0);\r\n                        emitCount++;\r\n                    }\r\n                }\r\n            }\r\n            function emitVariableDeclaration(node) {\r\n                if (ts.isBindingPattern(node.name)) {\r\n                    if (languageVersion < 2 ) {\r\n                        emitDestructuring(node,  false);\r\n                    }\r\n                    else {\r\n                        emit(node.name);\r\n                        emitOptional(\" = \", node.initializer);\r\n                    }\r\n                }\r\n                else {\r\n                    var initializer = node.initializer;\r\n                    if (!initializer && languageVersion < 2 ) {\r\neCheckFlags(node) & 16384 ) &&\r\n                            (getCombinedFlagsForIdentifier(node.name) & 16384 );\r\n                        if (isUninitializedLet &&\r\n                            node.parent.parent.kind !== 200  &&\r\n                            node.parent.parent.kind !== 201 ) {\r\n                            initializer = createVoidZero();\r\n                        }\r\n                    }\r\n                    var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.name);\r\n                    if (exportChanged) {\r\n                        write(exportFunctionForFile + \"(\\\"\");\r\n                        emitNodeWithCommentsAndWithoutSourcemap(node.name);\r\n                        write(\"\\\", \");\r\n                    }\r\n                    emitModuleMemberName(node);\r\n                    emitOptional(\" = \", initializer);\r\n                    if (exportChanged) {\r\n                        write(\")\");\r\n                    }\r\n                }\r\n            }\r\n            function emitExportVariableAssignments(node) {\r\n                if (node.kind === 187 ) {\r\n                    return;\r\n                }\r\n                var name = node.name;\r\n                if (name.kind === 69 ) {\r\n                    emitExportMemberAssignments(name);\r\n                }\r\n                else if (ts.isBindingPattern(name)) {\r\n                    ts.forEach(name.elements, emitExportVariableAssignments);\r\n                }\r\n            }\r\n            function getCombinedFlagsForIdentifier(node) {\r\n                if (!node.parent || (node.parent.kind !== 211  && node.parent.kind !== 163 )) {\r\n                    return 0;\r\n                }\r\n                return ts.getCombinedNodeFlags(node.parent);\r\n            }\r\n            function isES6ExportedDeclaration(node) {\r\n                return !!(node.flags & 1 ) &&\r\n                    modulekind === 5  &&\r\n                    node.parent.kind === 248 ;\r\n            }\r\n            function emitVariableStatement(node) {\r\n                var startIsEmitted = false;\r\n                if (node.flags & 1 ) {\r\n                    if (isES6ExportedDeclaration(node)) {\r\n                        write(\"export \");\r\n                        startIsEmitted = tryEmitStartOfVariableDeclarationList(node.declarationList);\r\n                    }\r\n                }\r\n                else {\r\n                    startIsEmitted = tryEmitStartOfVariableDeclarationList(node.declarationList);\r\n                }\r\n                if (startIsEmitted) {\r\n                    emitCommaList(node.declarationList.declarations);\r\n                    write(\";\");\r\n                }\r\n                else {\r\n                    var atLeastOneItem = emitVariableDeclarationListSkippingUninitializedEntries(node.declarationList);\r\n                    if (atLeastOneItem) {\r\n                        write(\";\");\r\n                    }\r\n                }\r\n                if (modulekind !== 5  && node.parent === currentSourceFile) {\r\n                    ts.forEach(node.declarationList.declarations, emitExportVariableAssignments);\r\n                }\r\n            }\r\n            function shouldEmitLeadingAndTrailingCommentsForVariableStatement(node) {\r\n                if (!(node.flags & 1 )) {\r\n                    return true;\r\n                }\r\n                if (isES6ExportedDeclaration(node)) {\r\n                    return true;\r\n                }\r\n                for (var _a = 0, _b = node.declarationList.declarations; _a < _b.length; _a++) {\r\n                    var declaration = _b[_a];\r\n                    if (declaration.initializer) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            function emitParameter(node) {\r\n                if (languageVersion < 2 ) {\r\n                    if (ts.isBindingPattern(node.name)) {\r\n                        var name_24 = createTempVariable(0 );\r\n                        if (!tempParameters) {\r\n                            tempParameters = [];\r\n                        }\r\n                        tempParameters.push(name_24);\r\n                        emit(name_24);\r\n                    }\r\n                    else {\r\n                        emit(node.name);\r\n                    }\r\n                }\r\n                else {\r\n                    if (node.dotDotDotToken) {\r\n                        write(\"...\");\r\n                    }\r\n                    emit(node.name);\r\n                    emitOptional(\" = \", node.initializer);\r\n                }\r\n            }\r\n            function emitDefaultValueAssignments(node) {\r\n                if (languageVersion < 2 ) {\r\n                    var tempIndex = 0;\r\n                    ts.forEach(node.parameters, function (parameter) {\r\n                        if (parameter.dotDotDotToken) {\r\n                            return;\r\n                        }\r\n                        var paramName = parameter.name, initializer = parameter.initializer;\r\n                        if (ts.isBindingPattern(paramName)) {\r\n                            var hasBindingElements = paramName.elements.length > 0;\r\n                            if (hasBindingElements || initializer) {\r\n                                writeLine();\r\n                                write(\"var \");\r\n                                if (hasBindingElements) {\r\n                                    emitDestructuring(parameter,  false, tempParameters[tempIndex]);\r\n                                }\r\n                                else {\r\n                                    emit(tempParameters[tempIndex]);\r\n                                    write(\" = \");\r\n                                    emit(initializer);\r\n                                }\r\n                                write(\";\");\r\n                                tempIndex++;\r\n                            }\r\n                        }\r\n                        else if (initializer) {\r\n                            writeLine();\r\n                            emitStart(parameter);\r\n                            write(\"if (\");\r\n                            emitNodeWithoutSourceMap(paramName);\r\n                            write(\" === void 0)\");\r\n                            emitEnd(parameter);\r\n                            write(\" { \");\r\n                            emitStart(parameter);\r\n                            emitNodeWithCommentsAndWithoutSourcemap(paramName);\r\n                            write(\" = \");\r\n                            emitNodeWithCommentsAndWithoutSourcemap(initializer);\r\n                            emitEnd(parameter);\r\n                            write(\"; }\");\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            function emitRestParameter(node) {\r\n                if (languageVersion < 2  && ts.hasRestParameter(node)) {\r\n                    var restIndex = node.parameters.length - 1;\r\n                    var restParam = node.parameters[restIndex];\r\n                    if (ts.isBindingPattern(restParam.name)) {\r\n                        return;\r\n                    }\r\n                    var tempName = createTempVariable(268435456 ).text;\r\n                    writeLine();\r\n                    emitLeadingComments(restParam);\r\n                    emitStart(restParam);\r\n                    write(\"var \");\r\n                    emitNodeWithCommentsAndWithoutSourcemap(restParam.name);\r\n                    write(\" = [];\");\r\n                    emitEnd(restParam);\r\n                    emitTrailingComments(restParam);\r\n                    writeLine();\r\n                    write(\"for (\");\r\n                    emitStart(restParam);\r\n                    write(\"var \" + tempName + \" = \" + restIndex + \";\");\r\n                    emitEnd(restParam);\r\n                    write(\" \");\r\n                    emitStart(restParam);\r\n                    write(tempName + \" < arguments.length;\");\r\n                    emitEnd(restParam);\r\n                    write(\" \");\r\n                    emitStart(restParam);\r\n                    write(tempName + \"++\");\r\n                    emitEnd(restParam);\r\n                    write(\") {\");\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    emitStart(restParam);\r\n                    emitNodeWithCommentsAndWithoutSourcemap(restParam.name);\r\n                    write(\"[\" + tempName + \" - \" + restIndex + \"] = arguments[\" + tempName + \"];\");\r\n                    emitEnd(restParam);\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    write(\"}\");\r\n                }\r\n            }\r\n            function emitAccessor(node) {\r\n                write(node.kind === 145  ? \"get \" : \"set \");\r\n                emit(node.name);\r\n                emitSignatureAndBody(node);\r\n            }\r\n            function shouldEmitAsArrowFunction(node) {\r\n                return node.kind === 174  && languageVersion >= 2 ;\r\n            }\r\n            function emitDeclarationName(node) {\r\n                if (node.name) {\r\n                    emitNodeWithCommentsAndWithoutSourcemap(node.name);\r\n                }\r\n                else {\r\n                    write(getGeneratedNameForNode(node));\r\n                }\r\n            }\r\n            function shouldEmitFunctionName(node) {\r\n                if (node.kind === 173 ) {\r\n                    return !!node.name;\r\n                }\r\n                if (node.kind === 213 ) {\r\n                    return !!node.name || languageVersion < 2 ;\r\n                }\r\n            }\r\n            function emitFunctionDeclaration(node) {\r\n                if (ts.nodeIsMissing(node.body)) {\r\n                    return emitCommentsOnNotEmittedNode(node);\r\n                }\r\n                if (node.kind !== 143  && node.kind !== 142  &&\r\n                    node.parent && node.parent.kind !== 245  &&\r\n                    node.parent.kind !== 168 ) {\r\n                    emitLeadingComments(node);\r\n                }\r\n                emitStart(node);\r\n                if (!shouldEmitAsArrowFunction(node)) {\r\n                    if (isES6ExportedDeclaration(node)) {\r\n                        write(\"export \");\r\n                        if (node.flags & 1024 ) {\r\n                            write(\"default \");\r\n                        }\r\n                    }\r\n                    write(\"function\");\r\n                    if (languageVersion >= 2  && node.asteriskToken) {\r\n                        write(\"*\");\r\n                    }\r\n                    write(\" \");\r\n                }\r\n                if (shouldEmitFunctionName(node)) {\r\n                    emitDeclarationName(node);\r\n                }\r\n                emitSignatureAndBody(node);\r\n                if (modulekind !== 5  && node.kind === 213  && node.parent === currentSourceFile && node.name) {\r\n                    emitExportMemberAssignments(node.name);\r\n                }\r\n                emitEnd(node);\r\n                if (node.kind !== 143  && node.kind !== 142 ) {\r\n                    emitTrailingComments(node);\r\n                }\r\n            }\r\n            function emitCaptureThisForNodeIfNecessary(node) {\r\n                if (resolver.getNodeCheckFlags(node) & 4 ) {\r\n                    writeLine();\r\n                    emitStart(node);\r\n                    write(\"var _this = this;\");\r\n                    emitEnd(node);\r\n                }\r\n            }\r\n            function emitSignatureParameters(node) {\r\n                increaseIndent();\r\n                write(\"(\");\r\n                if (node) {\r\n                    var parameters = node.parameters;\r\n                    var omitCount = languageVersion < 2  && ts.hasRestParameter(node) ? 1 : 0;\r\n                    emitList(parameters, 0, parameters.length - omitCount,  false,  false);\r\n                }\r\n                write(\")\");\r\n                decreaseIndent();\r\n            }\r\n            function emitSignatureParametersForArrow(node) {\r\n                if (node.parameters.length === 1 && node.pos === node.parameters[0].pos) {\r\n                    emit(node.parameters[0]);\r\n                    return;\r\n                }\r\n                emitSignatureParameters(node);\r\n            }\r\n            function emitAsyncFunctionBodyForES6(node) {\r\n                var promiseConstructor = ts.getEntityNameFromTypeNode(node.type);\r\n                var isArrowFunction = node.kind === 174 ;\r\n                var hasLexicalArguments = (resolver.getNodeCheckFlags(node) & 4096 ) !== 0;\r\n                var args;\r\n                    write(\" {\");\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    write(\"return\");\r\n                }\r\n                write(\" __awaiter(this\");\r\n                if (hasLexicalArguments) {\r\n                    write(\", arguments\");\r\n                }\r\n                else {\r\n                    write(\", void 0\");\r\n                }\r\n                if (promiseConstructor) {\r\n                    write(\", \");\r\n                    emitNodeWithoutSourceMap(promiseConstructor);\r\n                }\r\n                else {\r\n                    write(\", Promise\");\r\n                }\r\n                if (hasLexicalArguments) {\r\n                    write(\", function* (_arguments)\");\r\n                }\r\n                else {\r\n                    write(\", function* ()\");\r\n                }\r\n                emitFunctionBody(node);\r\n                write(\")\");\r\n                if (!isArrowFunction) {\r\n                    write(\";\");\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    write(\"}\");\r\n                }\r\n            }\r\n            function emitFunctionBody(node) {\r\n                if (!node.body) {\r\n                    write(\" { }\");\r\n                }\r\n                else {\r\n                    if (node.body.kind === 192 ) {\r\n                        emitBlockFunctionBody(node, node.body);\r\n                    }\r\n                    else {\r\n                        emitExpressionFunctionBody(node, node.body);\r\n                    }\r\n                }\r\n            }\r\n            function emitSignatureAndBody(node) {\r\n                var saveTempFlags = tempFlags;\r\n                var saveTempVariables = tempVariables;\r\n                var saveTempParameters = tempParameters;\r\n                tempFlags = 0;\r\n                tempVariables = undefined;\r\n                tempParameters = undefined;\r\n                if (shouldEmitAsArrowFunction(node)) {\r\n                    emitSignatureParametersForArrow(node);\r\n                    write(\" =>\");\r\n                }\r\n                else {\r\n                    emitSignatureParameters(node);\r\n                }\r\n                var isAsync = ts.isAsyncFunctionLike(node);\r\n                if (isAsync && languageVersion === 2 ) {\r\n                    emitAsyncFunctionBodyForES6(node);\r\n                }\r\n                else {\r\n                    emitFunctionBody(node);\r\n                }\r\n                if (!isES6ExportedDeclaration(node)) {\r\n                    emitExportMemberAssignment(node);\r\n                }\r\n                tempFlags = saveTempFlags;\r\n                tempVariables = saveTempVariables;\r\n                tempParameters = saveTempParameters;\r\n            }\r\n            function emitFunctionBodyPreamble(node) {\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                emitDefaultValueAssignments(node);\r\n                emitRestParameter(node);\r\n            }\r\n            function emitExpressionFunctionBody(node, body) {\r\n                if (languageVersion < 2  || node.flags & 512 ) {\r\n                    emitDownLevelExpressionFunctionBody(node, body);\r\n                    return;\r\n                }\r\n                write(\" \");\r\n                var current = body;\r\n                while (current.kind === 171 ) {\r\n                    current = current.expression;\r\n                }\r\n                emitParenthesizedIf(body, current.kind === 165 );\r\n            }\r\n            function emitDownLevelExpressionFunctionBody(node, body) {\r\n                write(\" {\");\r\n                scopeEmitStart(node);\r\n                increaseIndent();\r\n                var outPos = writer.getTextPos();\r\n                emitDetachedComments(node.body);\r\n                emitFunctionBodyPreamble(node);\r\n                var preambleEmitted = writer.getTextPos() !== outPos;\r\n                decreaseIndent();\r\n                if (!preambleEmitted && nodeStartPositionsAreOnSameLine(node, body)) {\r\n                    write(\" \");\r\n                    emitStart(body);\r\n                    write(\"return \");\r\n                    emit(body);\r\n                    emitEnd(body);\r\n                    write(\";\");\r\n                    emitTempDeclarations( false);\r\n                    write(\" \");\r\n                }\r\n                else {\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    emitLeadingComments(node.body);\r\n                    write(\"return \");\r\n                    emit(body);\r\n                    write(\";\");\r\n                    emitTrailingComments(node.body);\r\n                    emitTempDeclarations( true);\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                }\r\n                emitStart(node.body);\r\n                write(\"}\");\r\n                emitEnd(node.body);\r\n                scopeEmitEnd();\r\n            }\r\n            function emitBlockFunctionBody(node, body) {\r\n                write(\" {\");\r\n                scopeEmitStart(node);\r\n                var initialTextPos = writer.getTextPos();\r\n                increaseIndent();\r\n                emitDetachedComments(body.statements);\r\n                var startIndex = emitDirectivePrologues(body.statements,  true);\r\n                emitFunctionBodyPreamble(node);\r\n                decreaseIndent();\r\n                var preambleEmitted = writer.getTextPos() !== initialTextPos;\r\n                if (!preambleEmitted && nodeEndIsOnSameLineAsNodeStart(body, body)) {\r\n                    for (var _a = 0, _b = body.statements; _a < _b.length; _a++) {\r\n                        var statement = _b[_a];\r\n                        write(\" \");\r\n                        emit(statement);\r\n                    }\r\n                    emitTempDeclarations( false);\r\n                    write(\" \");\r\n                    emitLeadingCommentsOfPosition(body.statements.end);\r\n                }\r\n                else {\r\n                    increaseIndent();\r\n                    emitLinesStartingAt(body.statements, startIndex);\r\n                    emitTempDeclarations( true);\r\n                    writeLine();\r\n                    emitLeadingCommentsOfPosition(body.statements.end);\r\n                    decreaseIndent();\r\n                }\r\n                emitToken(16 , body.statements.end);\r\n                scopeEmitEnd();\r\n            }\r\n            function findInitialSuperCall(ctor) {\r\n                if (ctor.body) {\r\n                    var statement = ctor.body.statements[0];\r\n                    if (statement && statement.kind === 195 ) {\r\n                        var expr = statement.expression;\r\n                        if (expr && expr.kind === 168 ) {\r\n                            var func = expr.expression;\r\n                            if (func && func.kind === 95 ) {\r\n                                return statement;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function emitParameterPropertyAssignments(node) {\r\n                ts.forEach(node.parameters, function (param) {\r\n                    if (param.flags & 112 ) {\r\n                        writeLine();\r\n                        emitStart(param);\r\n                        emitStart(param.name);\r\n                        write(\"this.\");\r\n                        emitNodeWithoutSourceMap(param.name);\r\n                        emitEnd(param.name);\r\n                        write(\" = \");\r\n                        emit(param.name);\r\n                        write(\";\");\r\n                        emitEnd(param);\r\n                    }\r\n                });\r\n            }\r\n            function emitMemberAccessForPropertyName(memberName) {\r\n                if (memberName.kind === 9  || memberName.kind === 8 ) {\r\n                    write(\"[\");\r\n                    emitNodeWithCommentsAndWithoutSourcemap(memberName);\r\n                    write(\"]\");\r\n                }\r\n                else if (memberName.kind === 136 ) {\r\n                    emitComputedPropertyName(memberName);\r\n                }\r\n                else {\r\n                    write(\".\");\r\n                    emitNodeWithCommentsAndWithoutSourcemap(memberName);\r\n                }\r\n            }\r\n            function getInitializedProperties(node, isStatic) {\r\n                var properties = [];\r\n                for (var _a = 0, _b = node.members; _a < _b.length; _a++) {\r\n                    var member = _b[_a];\r\n                    if (member.kind === 141  && isStatic === ((member.flags & 128 ) !== 0) && member.initializer) {\r\n                        properties.push(member);\r\n                    }\r\n                }\r\n                return properties;\r\n            }\r\n            function emitPropertyDeclarations(node, properties) {\r\n                for (var _a = 0; _a < properties.length; _a++) {\r\n                    var property = properties[_a];\r\n                    emitPropertyDeclaration(node, property);\r\n                }\r\n            }\r\n            function emitPropertyDeclaration(node, property, receiver, isExpression) {\r\n                writeLine();\r\n                emitLeadingComments(property);\r\n                emitStart(property);\r\n                emitStart(property.name);\r\n                if (receiver) {\r\n                    emit(receiver);\r\n                }\r\n                else {\r\n                    if (property.flags & 128 ) {\r\n                        emitDeclarationName(node);\r\n                    }\r\n                    else {\r\n                        write(\"this\");\r\n                    }\r\n                }\r\n                emitMemberAccessForPropertyName(property.name);\r\n                emitEnd(property.name);\r\n                write(\" = \");\r\n                emit(property.initializer);\r\n                if (!isExpression) {\r\n                    write(\";\");\r\n                }\r\n                emitEnd(property);\r\n                emitTrailingComments(property);\r\n            }\r\n            function emitMemberFunctionsForES5AndLower(node) {\r\n                ts.forEach(node.members, function (member) {\r\n                    if (member.kind === 191 ) {\r\n                        writeLine();\r\n                        write(\";\");\r\n                    }\r\n                    else if (member.kind === 143  || node.kind === 142 ) {\r\n                        if (!member.body) {\r\n                            return emitCommentsOnNotEmittedNode(member);\r\n                        }\r\n                        writeLine();\r\n                        emitLeadingComments(member);\r\n                        emitStart(member);\r\n                        emitStart(member.name);\r\n                        emitClassMemberPrefix(node, member);\r\n                        emitMemberAccessForPropertyName(member.name);\r\n                        emitEnd(member.name);\r\n                        write(\" = \");\r\n                        emitFunctionDeclaration(member);\r\n                        emitEnd(member);\r\n                        write(\";\");\r\n                        emitTrailingComments(member);\r\n                    }\r\n                    else if (member.kind === 145  || member.kind === 146 ) {\r\n                        var accessors = ts.getAllAccessorDeclarations(node.members, member);\r\n                        if (member === accessors.firstAccessor) {\r\n                            writeLine();\r\n                            emitStart(member);\r\n                            write(\"Object.defineProperty(\");\r\n                            emitStart(member.name);\r\n                            emitClassMemberPrefix(node, member);\r\n                            write(\", \");\r\n                            emitExpressionForPropertyName(member.name);\r\n                            emitEnd(member.name);\r\n                            write(\", {\");\r\n                            increaseIndent();\r\n                            if (accessors.getAccessor) {\r\n                                writeLine();\r\n                                emitLeadingComments(accessors.getAccessor);\r\n                                write(\"get: \");\r\n                                emitStart(accessors.getAccessor);\r\n                                write(\"function \");\r\n                                emitSignatureAndBody(accessors.getAccessor);\r\n                                emitEnd(accessors.getAccessor);\r\n                                emitTrailingComments(accessors.getAccessor);\r\n                                write(\",\");\r\n                            }\r\n                            if (accessors.setAccessor) {\r\n                                writeLine();\r\n                                emitLeadingComments(accessors.setAccessor);\r\n                                write(\"set: \");\r\n                                emitStart(accessors.setAccessor);\r\n                                write(\"function \");\r\n                                emitSignatureAndBody(accessors.setAccessor);\r\n                                emitEnd(accessors.setAccessor);\r\n                                emitTrailingComments(accessors.setAccessor);\r\n                                write(\",\");\r\n                            }\r\n                            writeLine();\r\n                            write(\"enumerable: true,\");\r\n                            writeLine();\r\n                            write(\"configurable: true\");\r\n                            decreaseIndent();\r\n                            writeLine();\r\n                            write(\"});\");\r\n                            emitEnd(member);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            function emitMemberFunctionsForES6AndHigher(node) {\r\n                for (var _a = 0, _b = node.members; _a < _b.length; _a++) {\r\n                    var member = _b[_a];\r\n                    if ((member.kind === 143  || node.kind === 142 ) && !member.body) {\r\n                        emitCommentsOnNotEmittedNode(member);\r\n                    }\r\n                    else if (member.kind === 143  ||\r\n                        member.kind === 145  ||\r\n                        member.kind === 146 ) {\r\n                        writeLine();\r\n                        emitLeadingComments(member);\r\n                        emitStart(member);\r\n                        if (member.flags & 128 ) {\r\n                            write(\"static \");\r\n                        }\r\n                        if (member.kind === 145 ) {\r\n                            write(\"get \");\r\n                        }\r\n                        else if (member.kind === 146 ) {\r\n                            write(\"set \");\r\n                        }\r\n                        if (member.asteriskToken) {\r\n                            write(\"*\");\r\n                        }\r\n                        emit(member.name);\r\n                        emitSignatureAndBody(member);\r\n                        emitEnd(member);\r\n                        emitTrailingComments(member);\r\n                    }\r\n                    else if (member.kind === 191 ) {\r\n                        writeLine();\r\n                        write(\";\");\r\n                    }\r\n                }\r\n            }\r\n            function emitConstructor(node, baseTypeElement) {\r\n                var saveTempFlags = tempFlags;\r\n                var saveTempVariables = tempVariables;\r\n                var saveTempParameters = tempParameters;\r\n                tempFlags = 0;\r\n                tempVariables = undefined;\r\n                tempParameters = undefined;\r\n                emitConstructorWorker(node, baseTypeElement);\r\n                tempFlags = saveTempFlags;\r\n                tempVariables = saveTempVariables;\r\n                tempParameters = saveTempParameters;\r\n            }\r\n            function emitConstructorWorker(node, baseTypeElement) {\r\n                var hasInstancePropertyWithInitializer = false;\r\n                ts.forEach(node.members, function (member) {\r\n                    if (member.kind === 144  && !member.body) {\r\n                        emitCommentsOnNotEmittedNode(member);\r\n                    }\r\n                    if (member.kind === 141  && member.initializer && (member.flags & 128 ) === 0) {\r\n                        hasInstancePropertyWithInitializer = true;\r\n                    }\r\n                });\r\n                var ctor = ts.getFirstConstructorWithBody(node);\r\n                if (languageVersion >= 2  && !ctor && !hasInstancePropertyWithInitializer) {\r\n                    return;\r\n                }\r\n                if (ctor) {\r\n                    emitLeadingComments(ctor);\r\n                }\r\n                emitStart(ctor || node);\r\n                if (languageVersion < 2 ) {\r\n                    write(\"function \");\r\n                    emitDeclarationName(node);\r\n                    emitSignatureParameters(ctor);\r\n                }\r\n                else {\r\n                    write(\"constructor\");\r\n                    if (ctor) {\r\n                        emitSignatureParameters(ctor);\r\n                    }\r\n                    else {\r\n                        if (baseTypeElement) {\r\n                            write(\"(...args)\");\r\n                        }\r\n                        else {\r\n                            write(\"()\");\r\n                        }\r\n                    }\r\n                }\r\n                var startIndex = 0;\r\n                write(\" {\");\r\n                scopeEmitStart(node, \"constructor\");\r\n                increaseIndent();\r\n                if (ctor) {\r\n                    startIndex = emitDirectivePrologues(ctor.body.statements,  true);\r\n                    emitDetachedComments(ctor.body.statements);\r\n                }\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                var superCall;\r\n                if (ctor) {\r\n                    emitDefaultValueAssignments(ctor);\r\n                    emitRestParameter(ctor);\r\n                    if (baseTypeElement) {\r\n                        superCall = findInitialSuperCall(ctor);\r\n                        if (superCall) {\r\n                            writeLine();\r\n                            emit(superCall);\r\n                        }\r\n                    }\r\n                    emitParameterPropertyAssignments(ctor);\r\n                }\r\n                else {\r\n                    if (baseTypeElement) {\r\n                        writeLine();\r\n                        emitStart(baseTypeElement);\r\n                        if (languageVersion < 2 ) {\r\n                            write(\"_super.apply(this, arguments);\");\r\n                        }\r\n                        else {\r\n                            write(\"super(...args);\");\r\n                        }\r\n                        emitEnd(baseTypeElement);\r\n                    }\r\n                }\r\n                emitPropertyDeclarations(node, getInitializedProperties(node,  false));\r\n                if (ctor) {\r\n                    var statements = ctor.body.statements;\r\n                    if (superCall) {\r\n                        statements = statements.slice(1);\r\n                    }\r\n                    emitLinesStartingAt(statements, startIndex);\r\n                }\r\n                emitTempDeclarations( true);\r\n                writeLine();\r\n                if (ctor) {\r\n                    emitLeadingCommentsOfPosition(ctor.body.statements.end);\r\n                }\r\n                decreaseIndent();\r\n                emitToken(16 , ctor ? ctor.body.statements.end : node.members.end);\r\n                scopeEmitEnd();\r\n                emitEnd(ctor || node);\r\n                if (ctor) {\r\n                    emitTrailingComments(ctor);\r\n                }\r\n            }\r\n            function emitClassExpression(node) {\r\n                return emitClassLikeDeclaration(node);\r\n            }\r\n            function emitClassDeclaration(node) {\r\n                return emitClassLikeDeclaration(node);\r\n            }\r\n            function emitClassLikeDeclaration(node) {\r\n                if (languageVersion < 2 ) {\r\n                    emitClassLikeDeclarationBelowES6(node);\r\n                }\r\n                else {\r\n                    emitClassLikeDeclarationForES6AndHigher(node);\r\n                }\r\n                if (modulekind !== 5  && node.parent === currentSourceFile && node.name) {\r\n                    emitExportMemberAssignments(node.name);\r\n                }\r\n            }\r\n            function emitClassLikeDeclarationForES6AndHigher(node) {\r\n                var thisNodeIsDecorated = ts.nodeIsDecorated(node);\r\n                if (node.kind === 214 ) {\r\n                    if (thisNodeIsDecorated) {\r\n                        if (isES6ExportedDeclaration(node) && !(node.flags & 1024 )) {\r\n                            write(\"export \");\r\n                        }\r\n                        write(\"let \");\r\n                        emitDeclarationName(node);\r\n                        write(\" = \");\r\n                    }\r\n                    else if (isES6ExportedDeclaration(node)) {\r\n                        write(\"export \");\r\n                        if (node.flags & 1024 ) {\r\n                            write(\"default \");\r\n                        }\r\n                    }\r\n                }\r\n                var staticProperties = getInitializedProperties(node,  true);\r\n                var isClassExpressionWithStaticProperties = staticProperties.length > 0 && node.kind === 186 ;\r\n                var tempVariable;\r\n                if (isClassExpressionWithStaticProperties) {\r\n                    tempVariable = createAndRecordTempVariable(0 );\r\n                    write(\"(\");\r\n                    increaseIndent();\r\n                    emit(tempVariable);\r\n                    write(\" = \");\r\n                }\r\n                write(\"class\");\r\n                if ((node.name || (node.flags & 1024  && staticProperties.length > 0)) && !thisNodeIsDecorated) {\r\n                    write(\" \");\r\n                    emitDeclarationName(node);\r\n                }\r\n                var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);\r\n                if (baseTypeNode) {\r\n                    write(\" extends \");\r\n                    emit(baseTypeNode.expression);\r\n                }\r\n                write(\" {\");\r\n                increaseIndent();\r\n                scopeEmitStart(node);\r\n                writeLine();\r\n                emitConstructor(node, baseTypeNode);\r\n                emitMemberFunctionsForES6AndHigher(node);\r\n                decreaseIndent();\r\n                writeLine();\r\n                emitToken(16 , node.members.end);\r\n                scopeEmitEnd();\r\n                if (thisNodeIsDecorated) {\r\n                    write(\";\");\r\n                }\r\n                if (isClassExpressionWithStaticProperties) {\r\n                    for (var _a = 0; _a < staticProperties.length; _a++) {\r\n                        var property = staticProperties[_a];\r\n                        write(\",\");\r\n                        writeLine();\r\n                        emitPropertyDeclaration(node, property,  tempVariable,  true);\r\n                    }\r\n                    write(\",\");\r\n                    writeLine();\r\n                    emit(tempVariable);\r\n                    decreaseIndent();\r\n                    write(\")\");\r\n                }\r\n                else {\r\n                    writeLine();\r\n                    emitPropertyDeclarations(node, staticProperties);\r\n                    emitDecoratorsOfClass(node);\r\n                }\r\n                if (!isES6ExportedDeclaration(node) && (node.flags & 1 )) {\r\n                    writeLine();\r\n                    emitStart(node);\r\n                    emitModuleMemberName(node);\r\n                    write(\" = \");\r\n                    emitDeclarationName(node);\r\n                    emitEnd(node);\r\n                    write(\";\");\r\n                }\r\n                else if (isES6ExportedDeclaration(node) && (node.flags & 1024 ) && thisNodeIsDecorated) {\r\n                    writeLine();\r\n                    write(\"export default \");\r\n                    emitDeclarationName(node);\r\n                    write(\";\");\r\n                }\r\n            }\r\n            function emitClassLikeDeclarationBelowES6(node) {\r\n                if (node.kind === 214 ) {\r\n                    if (!shouldHoistDeclarationInSystemJsModule(node)) {\r\n                        write(\"var \");\r\n                    }\r\n                    emitDeclarationName(node);\r\n                    write(\" = \");\r\n                }\r\n                write(\"(function (\");\r\n                var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);\r\n                if (baseTypeNode) {\r\n                    write(\"_super\");\r\n                }\r\n                write(\") {\");\r\n                var saveTempFlags = tempFlags;\r\n                var saveTempVariables = tempVariables;\r\n                var saveTempParameters = tempParameters;\r\n                var saveComputedPropertyNamesToGeneratedNames = computedPropertyNamesToGeneratedNames;\r\n                tempFlags = 0;\r\n                tempVariables = undefined;\r\n                tempParameters = undefined;\r\n                computedPropertyNamesToGeneratedNames = undefined;\r\n                increaseIndent();\r\n                scopeEmitStart(node);\r\n                if (baseTypeNode) {\r\n                    writeLine();\r\n                    emitStart(baseTypeNode);\r\n                    write(\"__extends(\");\r\n                    emitDeclarationName(node);\r\n                    write(\", _super);\");\r\n                    emitEnd(baseTypeNode);\r\n                }\r\n                writeLine();\r\n                emitConstructor(node, baseTypeNode);\r\n                emitMemberFunctionsForES5AndLower(node);\r\n                emitPropertyDeclarations(node, getInitializedProperties(node,  true));\r\n                writeLine();\r\n                emitDecoratorsOfClass(node);\r\n                writeLine();\r\n                emitToken(16 , node.members.end, function () {\r\n                    write(\"return \");\r\n                    emitDeclarationName(node);\r\n                });\r\n                write(\";\");\r\n                emitTempDeclarations( true);\r\n                tempFlags = saveTempFlags;\r\n                tempVariables = saveTempVariables;\r\n                tempParameters = saveTempParameters;\r\n                computedPropertyNamesToGeneratedNames = saveComputedPropertyNamesToGeneratedNames;\r\n                decreaseIndent();\r\n                writeLine();\r\n                emitToken(16 , node.members.end);\r\n                scopeEmitEnd();\r\n                emitStart(node);\r\n                write(\")(\");\r\n                if (baseTypeNode) {\r\n                    emit(baseTypeNode.expression);\r\n                }\r\n                write(\")\");\r\n                if (node.kind === 214 ) {\r\n                    write(\";\");\r\n                }\r\n                emitEnd(node);\r\n                if (node.kind === 214 ) {\r\n                    emitExportMemberAssignment(node);\r\n                }\r\n            }\r\n            function emitClassMemberPrefix(node, member) {\r\n                emitDeclarationName(node);\r\n                if (!(member.flags & 128 )) {\r\n                    write(\".prototype\");\r\n                }\r\n            }\r\n            function emitDecoratorsOfClass(node) {\r\n                emitDecoratorsOfMembers(node,  0);\r\n                emitDecoratorsOfMembers(node, 128 );\r\n                emitDecoratorsOfConstructor(node);\r\n            }\r\n            function emitDecoratorsOfConstructor(node) {\r\n                var decorators = node.decorators;\r\n                var constructor = ts.getFirstConstructorWithBody(node);\r\n                var hasDecoratedParameters = constructor && ts.forEach(constructor.parameters, ts.nodeIsDecorated);\r\n                if (!decorators && !hasDecoratedParameters) {\r\n                    return;\r\n                }\r\n                writeLine();\r\n                emitStart(node);\r\n                emitDeclarationName(node);\r\n                write(\" = __decorate([\");\r\n                increaseIndent();\r\n                writeLine();\r\n                var decoratorCount = decorators ? decorators.length : 0;\r\n                var argumentsWritten = emitList(decorators, 0, decoratorCount,  true,  false,  false,  true, function (decorator) {\r\n                    emitStart(decorator);\r\n                    emit(decorator.expression);\r\n                    emitEnd(decorator);\r\n                });\r\n                argumentsWritten += emitDecoratorsOfParameters(constructor,  argumentsWritten > 0);\r\n                emitSerializedTypeMetadata(node,  argumentsWritten >= 0);\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"], \");\r\n                emitDeclarationName(node);\r\n                write(\");\");\r\n                emitEnd(node);\r\n                writeLine();\r\n            }\r\n            function emitDecoratorsOfMembers(node, staticFlag) {\r\n                for (var _a = 0, _b = node.members; _a < _b.length; _a++) {\r\n                    var member = _b[_a];\r\n                    if ((member.flags & 128 ) !== staticFlag) {\r\n                        continue;\r\n                    }\r\n                    if (!ts.nodeCanBeDecorated(member)) {\r\n                        continue;\r\n                    }\r\n                    if (!ts.nodeOrChildIsDecorated(member)) {\r\n                        continue;\r\n                    }\r\n                    var decorators = void 0;\r\n                    var functionLikeMember = void 0;\r\n                    if (ts.isAccessor(member)) {\r\n                        var accessors = ts.getAllAccessorDeclarations(node.members, member);\r\n                        if (member !== accessors.firstAccessor) {\r\n                            continue;\r\n                        }\r\n                        decorators = accessors.firstAccessor.decorators;\r\n                        if (!decorators && accessors.secondAccessor) {\r\n                            decorators = accessors.secondAccessor.decorators;\r\n                        }\r\n                        functionLikeMember = accessors.setAccessor;\r\n                    }\r\n                    else {\r\n                        decorators = member.decorators;\r\n                        if (member.kind === 143 ) {\r\n                            functionLikeMember = member;\r\n                        }\r\n                    }\r\n                    writeLine();\r\n                    emitStart(member);\r\n                    write(\"__decorate([\");\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    var decoratorCount = decorators ? decorators.length : 0;\r\n                    var argumentsWritten = emitList(decorators, 0, decoratorCount,  true,  false,  false,  true, function (decorator) {\r\n                        emitStart(decorator);\r\n                        emit(decorator.expression);\r\n                        emitEnd(decorator);\r\n                    });\r\n                    argumentsWritten += emitDecoratorsOfParameters(functionLikeMember, argumentsWritten > 0);\r\n                    emitSerializedTypeMetadata(member, argumentsWritten > 0);\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    write(\"], \");\r\n                    emitStart(member.name);\r\n                    emitClassMemberPrefix(node, member);\r\n                    write(\", \");\r\n                    emitExpressionForPropertyName(member.name);\r\n                    emitEnd(member.name);\r\n                    if (languageVersion > 0 ) {\r\n                        if (member.kind !== 141 ) {\r\n                            write(\", null\");\r\n                        }\r\n                        else {\r\n                            write(\", void 0\");\r\n                        }\r\n                    }\r\n                    write(\");\");\r\n                    emitEnd(member);\r\n                    writeLine();\r\n                }\r\n            }\r\n            function emitDecoratorsOfParameters(node, leadingComma) {\r\n                var argumentsWritten = 0;\r\n                if (node) {\r\n                    var parameterIndex = 0;\r\n                    for (var _a = 0, _b = node.parameters; _a < _b.length; _a++) {\r\n                        var parameter = _b[_a];\r\n                        if (ts.nodeIsDecorated(parameter)) {\r\n                            var decorators = parameter.decorators;\r\n                            argumentsWritten += emitList(decorators, 0, decorators.length,  true,  false,  leadingComma,  true, function (decorator) {\r\n                                emitStart(decorator);\r\n                                write(\"__param(\" + parameterIndex + \", \");\r\n                                emit(decorator.expression);\r\n                                write(\")\");\r\n                                emitEnd(decorator);\r\n                            });\r\n                            leadingComma = true;\r\n                        }\r\n                        ++parameterIndex;\r\n                    }\r\n                }\r\n                return argumentsWritten;\r\n            }\r\n            function shouldEmitTypeMetadata(node) {\r\n                switch (node.kind) {\r\n                    case 143 :\r\n                    case 145 :\r\n                    case 146 :\r\n                    case 141 :\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n            function shouldEmitReturnTypeMetadata(node) {\r\n                switch (node.kind) {\r\n                    case 143 :\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n            function shouldEmitParamTypesMetadata(node) {\r\n                switch (node.kind) {\r\n                    case 214 :\r\n                    case 143 :\r\n                    case 146 :\r\n                        return true;\r\n                }\r\n                return false;\r\n            }\r\n                        function emitSerializedTypeOfNode(node) {\r\n                switch (node.kind) {\r\n                    case 214 :\r\n                        write(\"Function\");\r\n                        return;\r\n                    case 141 :\r\n                        emitSerializedTypeNode(node.type);\r\n                        return;\r\n                    case 138 :\r\n                        emitSerializedTypeNode(node.type);\r\n                        return;\r\n                    case 145 :\r\n                        emitSerializedTypeNode(node.type);\r\n                        return;\r\n                    case 146 :\r\n                        emitSerializedTypeNode(ts.getSetAccessorTypeAnnotationNode(node));\r\n                        return;\r\n                }\r\n                if (ts.isFunctionLike(node)) {\r\n                    write(\"Function\");\r\n                    return;\r\n                }\r\n                write(\"void 0\");\r\n            }\r\n            function emitSerializedTypeNode(node) {\r\n                if (node) {\r\n                    switch (node.kind) {\r\n                        case 103 :\r\n                            write(\"void 0\");\r\n                            return;\r\n                        case 160 :\r\n                            emitSerializedTypeNode(node.type);\r\n                            return;\r\n                        case 152 :\r\n                        case 153 :\r\n                            write(\"Function\");\r\n                            return;\r\n                        case 156 :\r\n                        case 157 :\r\n                            write(\"Array\");\r\n                            return;\r\n                        case 150 :\r\n                        case 120 :\r\n                            write(\"Boolean\");\r\n                            return;\r\n                        case 130 :\r\n                        case 9 :\r\n                            write(\"String\");\r\n                            return;\r\n                        case 128 :\r\n                            write(\"Number\");\r\n                            return;\r\n                        case 131 :\r\n                            write(\"Symbol\");\r\n                            return;\r\n                        case 151 :\r\n                            emitSerializedTypeReferenceNode(node);\r\n                            return;\r\n                        case 154 :\r\n                        case 155 :\r\n                        case 158 :\r\n                        case 159 :\r\n                        case 117 :\r\n                            break;\r\n                        default:\r\n                            ts.Debug.fail(\"Cannot serialize unexpected type node.\");\r\n                            break;\r\n                    }\r\n                }\r\n                write(\"Object\");\r\n            }\r\n                        function emitSerializedTypeReferenceNode(node) {\r\n                var location = node.parent;\r\n                while (ts.isDeclaration(location) || ts.isTypeNode(location)) {\r\n                    location = location.parent;\r\n                }\r\n                var typeName = ts.cloneEntityName(node.typeName);\r\n                typeName.parent = location;\r\n                var result = resolver.getTypeReferenceSerializationKind(typeName);\r\n                switch (result) {\r\n                    case ts.TypeReferenceSerializationKind.Unknown:\r\n                        var temp = createAndRecordTempVariable(0 );\r\n                        write(\"(typeof (\");\r\n                        emitNodeWithoutSourceMap(temp);\r\n                        write(\" = \");\r\n                        emitEntityNameAsExpression(typeName,  true);\r\n                        write(\") === 'function' && \");\r\n                        emitNodeWithoutSourceMap(temp);\r\n                        write(\") || Object\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue:\r\n                        emitEntityNameAsExpression(typeName,  false);\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.VoidType:\r\n                        write(\"void 0\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.BooleanType:\r\n                        write(\"Boolean\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.NumberLikeType:\r\n                        write(\"Number\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.StringLikeType:\r\n                        write(\"String\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.ArrayLikeType:\r\n                        write(\"Array\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.ESSymbolType:\r\n                        if (languageVersion < 2 ) {\r\n                            write(\"typeof Symbol === 'function' ? Symbol : Object\");\r\n                        }\r\n                        else {\r\n                            write(\"Symbol\");\r\n                        }\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.TypeWithCallSignature:\r\n                        write(\"Function\");\r\n                        break;\r\n                    case ts.TypeReferenceSerializationKind.ObjectType:\r\n                        write(\"Object\");\r\n                        break;\r\n                }\r\n            }\r\n                        function emitSerializedParameterTypesOfNode(node) {\r\n                if (node) {\r\n                    var valueDeclaration;\r\n                    if (node.kind === 214 ) {\r\n                        valueDeclaration = ts.getFirstConstructorWithBody(node);\r\n                    }\r\n                    else if (ts.isFunctionLike(node) && ts.nodeIsPresent(node.body)) {\r\n                        valueDeclaration = node;\r\n                    }\r\n                    if (valueDeclaration) {\r\n                        var parameters = valueDeclaration.parameters;\r\n                        var parameterCount = parameters.length;\r\n                        if (parameterCount > 0) {\r\n                            for (var i = 0; i < parameterCount; i++) {\r\n                                if (i > 0) {\r\n                                    write(\", \");\r\n                                }\r\n                                if (parameters[i].dotDotDotToken) {\r\n                                    var parameterType = parameters[i].type;\r\n                                    if (parameterType.kind === 156 ) {\r\n                                        parameterType = parameterType.elementType;\r\n                                    }\r\n                                    else if (parameterType.kind === 151  && parameterType.typeArguments && parameterType.typeArguments.length === 1) {\r\n                                        parameterType = parameterType.typeArguments[0];\r\n                                    }\r\n                                    else {\r\n                                        parameterType = undefined;\r\n                                    }\r\n                                    emitSerializedTypeNode(parameterType);\r\n                                }\r\n                                else {\r\n                                    emitSerializedTypeOfNode(parameters[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n                        function emitSerializedReturnTypeOfNode(node) {\r\n                if (node && ts.isFunctionLike(node) && node.type) {\r\n                    emitSerializedTypeNode(node.type);\r\n                    return;\r\n                }\r\n                write(\"void 0\");\r\n            }\r\n            function emitSerializedTypeMetadata(node, writeComma) {\r\n                var argumentsWritten = 0;\r\n                if (compilerOptions.emitDecoratorMetadata) {\r\n                    if (shouldEmitTypeMetadata(node)) {\r\n                        if (writeComma) {\r\n                            write(\", \");\r\n                        }\r\n                        writeLine();\r\n                        write(\"__metadata('design:type', \");\r\n                        emitSerializedTypeOfNode(node);\r\n                        write(\")\");\r\n                        argumentsWritten++;\r\n                    }\r\n                    if (shouldEmitParamTypesMetadata(node)) {\r\n                        if (writeComma || argumentsWritten) {\r\n                            write(\", \");\r\n                        }\r\n                        writeLine();\r\n                        write(\"__metadata('design:paramtypes', [\");\r\n                        emitSerializedParameterTypesOfNode(node);\r\n                        write(\"])\");\r\n                        argumentsWritten++;\r\n                    }\r\n                    if (shouldEmitReturnTypeMetadata(node)) {\r\n                        if (writeComma || argumentsWritten) {\r\n                            write(\", \");\r\n                        }\r\n                        writeLine();\r\n                        write(\"__metadata('design:returntype', \");\r\n                        emitSerializedReturnTypeOfNode(node);\r\n                        write(\")\");\r\n                        argumentsWritten++;\r\n                    }\r\n                }\r\n                return argumentsWritten;\r\n            }\r\n            function emitInterfaceDeclaration(node) {\r\n                emitCommentsOnNotEmittedNode(node);\r\n            }\r\n            function shouldEmitEnumDeclaration(node) {\r\n                var isConstEnum = ts.isConst(node);\r\n                return !isConstEnum || compilerOptions.preserveConstEnums || compilerOptions.isolatedModules;\r\n            }\r\n            function emitEnumDeclaration(node) {\r\n                if (!shouldEmitEnumDeclaration(node)) {\r\n                    return;\r\n                }\r\n                if (!shouldHoistDeclarationInSystemJsModule(node)) {\r\n                    if (!(node.flags & 1 ) || isES6ExportedDeclaration(node)) {\r\n                        emitStart(node);\r\n                        if (isES6ExportedDeclaration(node)) {\r\n                            write(\"export \");\r\n                        }\r\n                        write(\"var \");\r\n                        emit(node.name);\r\n                        emitEnd(node);\r\n                        write(\";\");\r\n                    }\r\n                }\r\n                writeLine();\r\n                emitStart(node);\r\n                write(\"(function (\");\r\n                emitStart(node.name);\r\n                write(getGeneratedNameForNode(node));\r\n                emitEnd(node.name);\r\n                write(\") {\");\r\n                increaseIndent();\r\n                scopeEmitStart(node);\r\n                emitLines(node.members);\r\n                decreaseIndent();\r\n                writeLine();\r\n                emitToken(16 , node.members.end);\r\n                scopeEmitEnd();\r\n                write(\")(\");\r\n                emitModuleMemberName(node);\r\n                write(\" || (\");\r\n                emitModuleMemberName(node);\r\n                write(\" = {}));\");\r\n                emitEnd(node);\r\n                if (!isES6ExportedDeclaration(node) && node.flags & 1  && !shouldHoistDeclarationInSystemJsModule(node)) {\r\n                    writeLine();\r\n                    emitStart(node);\r\n                    write(\"var \");\r\n                    emit(node.name);\r\n                    write(\" = \");\r\n                    emitModuleMemberName(node);\r\n                    emitEnd(node);\r\n                    write(\";\");\r\n                }\r\n                if (modulekind !== 5  && node.parent === currentSourceFile) {\r\n                    if (modulekind === 4  && (node.flags & 1 )) {\r\n                        writeLine();\r\n                        write(exportFunctionForFile + \"(\\\"\");\r\n                        emitDeclarationName(node);\r\n                        write(\"\\\", \");\r\n                        emitDeclarationName(node);\r\n                        write(\");\");\r\n                    }\r\n                    emitExportMemberAssignments(node.name);\r\n                }\r\n            }\r\n            function emitEnumMember(node) {\r\n                var enumParent = node.parent;\r\n                emitStart(node);\r\n                write(getGeneratedNameForNode(enumParent));\r\n                write(\"[\");\r\n                write(getGeneratedNameForNode(enumParent));\r\n                write(\"[\");\r\n                emitExpressionForPropertyName(node.name);\r\n                write(\"] = \");\r\n                writeEnumMemberDeclarationValue(node);\r\n                write(\"] = \");\r\n                emitExpressionForPropertyName(node.name);\r\n                emitEnd(node);\r\n                write(\";\");\r\n            }\r\n            function writeEnumMemberDeclarationValue(member) {\r\n                var value = resolver.getConstantValue(member);\r\n                if (value !== undefined) {\r\n                    write(value.toString());\r\n                    return;\r\n                }\r\n                else if (member.initializer) {\r\n                    emit(member.initializer);\r\n                }\r\n                else {\r\n                    write(\"undefined\");\r\n                }\r\n            }\r\n            function getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration) {\r\n                if (moduleDeclaration.body.kind === 218 ) {\r\n                    var recursiveInnerModule = getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration.body);\r\n                    return recursiveInnerModule || moduleDeclaration.body;\r\n                }\r\n            }\r\n            function shouldEmitModuleDeclaration(node) {\r\n                return ts.isInstantiatedModule(node, compilerOptions.preserveConstEnums || compilerOptions.isolatedModules);\r\n            }\r\n            function isModuleMergedWithES6Class(node) {\r\n                return languageVersion === 2  && !!(resolver.getNodeCheckFlags(node) & 32768 );\r\n            }\r\n            function emitModuleDeclaration(node) {\r\n                var shouldEmit = shouldEmitModuleDeclaration(node);\r\n                if (!shouldEmit) {\r\n                    return emitCommentsOnNotEmittedNode(node);\r\n                }\r\n                var hoistedInDeclarationScope = shouldHoistDeclarationInSystemJsModule(node);\r\n                var emitVarForModule = !hoistedInDeclarationScope && !isModuleMergedWithES6Class(node);\r\n                if (emitVarForModule) {\r\n                    emitStart(node);\r\n                    if (isES6ExportedDeclaration(node)) {\r\n                        write(\"export \");\r\n                    }\r\n                    write(\"var \");\r\n                    emit(node.name);\r\n                    write(\";\");\r\n                    emitEnd(node);\r\n                    writeLine();\r\n                }\r\n                emitStart(node);\r\n                write(\"(function (\");\r\n                emitStart(node.name);\r\n                write(getGeneratedNameForNode(node));\r\n                emitEnd(node.name);\r\n                write(\") \");\r\n                if (node.body.kind === 219 ) {\r\n                    var saveTempFlags = tempFlags;\r\n                    var saveTempVariables = tempVariables;\r\n                    tempFlags = 0;\r\n                    tempVariables = undefined;\r\n                    emit(node.body);\r\n                    tempFlags = saveTempFlags;\r\n                    tempVariables = saveTempVariables;\r\n                }\r\n                else {\r\n                    write(\"{\");\r\n                    increaseIndent();\r\n                    scopeEmitStart(node);\r\n                    emitCaptureThisForNodeIfNecessary(node);\r\n                    writeLine();\r\n                    emit(node.body);\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    var moduleBlock = getInnerMostModuleDeclarationFromDottedModule(node).body;\r\n                    emitToken(16 , moduleBlock.statements.end);\r\n                    scopeEmitEnd();\r\n                }\r\n                write(\")(\");\r\n                if ((node.flags & 1 ) && !isES6ExportedDeclaration(node)) {\r\n                    emit(node.name);\r\n                    write(\" = \");\r\n                }\r\n                emitModuleMemberName(node);\r\n                write(\" || (\");\r\n                emitModuleMemberName(node);\r\n                write(\" = {}));\");\r\n                emitEnd(node);\r\n                if (!isES6ExportedDeclaration(node) && node.name.kind === 69  && node.parent === currentSourceFile) {\r\n                    if (modulekind === 4  && (node.flags & 1 )) {\r\n                        writeLine();\r\n                        write(exportFunctionForFile + \"(\\\"\");\r\n                        emitDeclarationName(node);\r\n                        write(\"\\\", \");\r\n                        emitDeclarationName(node);\r\n                        write(\");\");\r\n                    }\r\n                    emitExportMemberAssignments(node.name);\r\n                }\r\n            }\r\n                        function tryRenameExternalModule(moduleName) {\r\n                if (currentSourceFile.renamedDependencies && ts.hasProperty(currentSourceFile.renamedDependencies, moduleName.text)) {\r\n                    return \"\\\"\" + currentSourceFile.renamedDependencies[moduleName.text] + \"\\\"\";\r\n                }\r\n                return undefined;\r\n            }\r\n            function emitRequire(moduleName) {\r\n                if (moduleName.kind === 9 ) {\r\n                    write(\"require(\");\r\n                    var text = tryRenameExternalModule(moduleName);\r\n                    if (text) {\r\n                        write(text);\r\n                    }\r\n                    else {\r\n                        emitStart(moduleName);\r\n                        emitLiteral(moduleName);\r\n                        emitEnd(moduleName);\r\n                    }\r\n                    emitToken(18 , moduleName.end);\r\n                }\r\n                else {\r\n                    write(\"require()\");\r\n                }\r\n            }\r\n            function getNamespaceDeclarationNode(node) {\r\n                if (node.kind === 221 ) {\r\n                    return node;\r\n                }\r\n                var importClause = node.importClause;\r\n                if (importClause && importClause.namedBindings && importClause.namedBindings.kind === 224 ) {\r\n                    return importClause.namedBindings;\r\n                }\r\n            }\r\n            function isDefaultImport(node) {\r\n                return node.kind === 222  && node.importClause && !!node.importClause.name;\r\n            }\r\n            function emitExportImportAssignments(node) {\r\n                if (ts.isAliasSymbolDeclaration(node) && resolver.isValueAliasDeclaration(node)) {\r\n                    emitExportMemberAssignments(node.name);\r\n                }\r\n                ts.forEachChild(node, emitExportImportAssignments);\r\n            }\r\n            function emitImportDeclaration(node) {\r\n                if (modulekind !== 5 ) {\r\n                    return emitExternalImportDeclaration(node);\r\n                }\r\n                if (node.importClause) {\r\n                    var shouldEmitDefaultBindings = resolver.isReferencedAliasDeclaration(node.importClause);\r\n                    var shouldEmitNamedBindings = node.importClause.namedBindings && resolver.isReferencedAliasDeclaration(node.importClause.namedBindings,  true);\r\n                    if (shouldEmitDefaultBindings || shouldEmitNamedBindings) {\r\n                        write(\"import \");\r\n                        emitStart(node.importClause);\r\n                        if (shouldEmitDefaultBindings) {\r\n                            emit(node.importClause.name);\r\n                            if (shouldEmitNamedBindings) {\r\n                                write(\", \");\r\n                            }\r\n                        }\r\n                        if (shouldEmitNamedBindings) {\r\n                            emitLeadingComments(node.importClause.namedBindings);\r\n                            emitStart(node.importClause.namedBindings);\r\n                            if (node.importClause.namedBindings.kind === 224 ) {\r\n                                write(\"* as \");\r\n                                emit(node.importClause.namedBindings.name);\r\n                            }\r\n                            else {\r\n                                write(\"{ \");\r\n                                emitExportOrImportSpecifierList(node.importClause.namedBindings.elements, resolver.isReferencedAliasDeclaration);\r\n                                write(\" }\");\r\n                            }\r\n                            emitEnd(node.importClause.namedBindings);\r\n                            emitTrailingComments(node.importClause.namedBindings);\r\n                        }\r\n                        emitEnd(node.importClause);\r\n                        write(\" from \");\r\n                        emit(node.moduleSpecifier);\r\n                        write(\";\");\r\n                    }\r\n                }\r\n                else {\r\n                    write(\"import \");\r\n                    emit(node.moduleSpecifier);\r\n                    write(\";\");\r\n                }\r\n            }\r\n            function emitExternalImportDeclaration(node) {\r\n                if (ts.contains(externalImports, node)) {\r\n                    var isExportedImport = node.kind === 221  && (node.flags & 1 ) !== 0;\r\n                    var namespaceDeclaration = getNamespaceDeclarationNode(node);\r\n                    if (modulekind !== 2 ) {\r\n                        emitLeadingComments(node);\r\n                        emitStart(node);\r\n                        if (namespaceDeclaration && !isDefaultImport(node)) {\r\n                            if (!isExportedImport)\r\n                                write(\"var \");\r\n                            emitModuleMemberName(namespaceDeclaration);\r\n                            write(\" = \");\r\n                        }\r\n                        else {\r\n                            var isNakedImport = 222  && !node.importClause;\r\n                            if (!isNakedImport) {\r\n                                write(\"var \");\r\n                                write(getGeneratedNameForNode(node));\r\n                                write(\" = \");\r\n                            }\r\n                        }\r\n                        emitRequire(ts.getExternalModuleName(node));\r\n                        if (namespaceDeclaration && isDefaultImport(node)) {\r\n                            write(\", \");\r\n                            emitModuleMemberName(namespaceDeclaration);\r\n                            write(\" = \");\r\n                            write(getGeneratedNameForNode(node));\r\n                        }\r\n                        write(\";\");\r\n                        emitEnd(node);\r\n                        emitExportImportAssignments(node);\r\n                        emitTrailingComments(node);\r\n                    }\r\n                    else {\r\n                        if (isExportedImport) {\r\n                            emitModuleMemberName(namespaceDeclaration);\r\n                            write(\" = \");\r\n                            emit(namespaceDeclaration.name);\r\n                            write(\";\");\r\n                        }\r\n                        else if (namespaceDeclaration && isDefaultImport(node)) {\r\n                            write(\"var \");\r\n                            emitModuleMemberName(namespaceDeclaration);\r\n                            write(\" = \");\r\n                            write(getGeneratedNameForNode(node));\r\n                            write(\";\");\r\n                        }\r\n                        emitExportImportAssignments(node);\r\n                    }\r\n                }\r\n            }\r\n            function emitImportEqualsDeclaration(node) {\r\n                if (ts.isExternalModuleImportEqualsDeclaration(node)) {\r\n                    emitExternalImportDeclaration(node);\r\n                    return;\r\n                }\r\n                if (resolver.isReferencedAliasDeclaration(node) ||\r\n                    (!ts.isExternalModule(currentSourceFile) && resolver.isTopLevelValueImportEqualsWithEntityName(node))) {\r\n                    emitLeadingComments(node);\r\n                    emitStart(node);\r\n                    var variableDeclarationIsHoisted = shouldHoistVariable(node,  true);\r\n                    var isExported = isSourceFileLevelDeclarationInSystemJsModule(node,  true);\r\n                    if (!variableDeclarationIsHoisted) {\r\n                        ts.Debug.assert(!isExported);\r\n                        if (isES6ExportedDeclaration(node)) {\r\n                            write(\"export \");\r\n                            write(\"var \");\r\n                        }\r\n                        else if (!(node.flags & 1 )) {\r\n                            write(\"var \");\r\n                        }\r\n                    }\r\n                    if (isExported) {\r\n                        write(exportFunctionForFile + \"(\\\"\");\r\n                        emitNodeWithoutSourceMap(node.name);\r\n                        write(\"\\\", \");\r\n                    }\r\n                    emitModuleMemberName(node);\r\n                    write(\" = \");\r\n                    emit(node.moduleReference);\r\n                    if (isExported) {\r\n                        write(\")\");\r\n                    }\r\n                    write(\";\");\r\n                    emitEnd(node);\r\n                    emitExportImportAssignments(node);\r\n                    emitTrailingComments(node);\r\n                }\r\n            }\r\n            function emitExportDeclaration(node) {\r\n                ts.Debug.assert(modulekind !== 4 );\r\n                if (modulekind !== 5 ) {\r\n                    if (node.moduleSpecifier && (!node.exportClause || resolver.isValueAliasDeclaration(node))) {\r\n                        emitStart(node);\r\n                        var generatedName = getGeneratedNameForNode(node);\r\n                        if (node.exportClause) {\r\n                            if (modulekind !== 2 ) {\r\n                                write(\"var \");\r\n                                write(generatedName);\r\n                                write(\" = \");\r\n                                emitRequire(ts.getExternalModuleName(node));\r\n                                write(\";\");\r\n                            }\r\n                            for (var _a = 0, _b = node.exportClause.elements; _a < _b.length; _a++) {\r\n                                var specifier = _b[_a];\r\n                                if (resolver.isValueAliasDeclaration(specifier)) {\r\n                                    writeLine();\r\n                                    emitStart(specifier);\r\n                                    emitContainingModuleName(specifier);\r\n                                    write(\".\");\r\n                                    emitNodeWithCommentsAndWithoutSourcemap(specifier.name);\r\n                                    write(\" = \");\r\n                                    write(generatedName);\r\n                                    write(\".\");\r\n                                    emitNodeWithCommentsAndWithoutSourcemap(specifier.propertyName || specifier.name);\r\n                                    write(\";\");\r\n                                    emitEnd(specifier);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            writeLine();\r\n                            write(\"__export(\");\r\n                            if (modulekind !== 2 ) {\r\n                                emitRequire(ts.getExternalModuleName(node));\r\n                            }\r\n                            else {\r\n                                write(generatedName);\r\n                            }\r\n                            write(\");\");\r\n                        }\r\n                        emitEnd(node);\r\n                    }\r\n                }\r\n                else {\r\n                    if (!node.exportClause || resolver.isValueAliasDeclaration(node)) {\r\n                        write(\"export \");\r\n                        if (node.exportClause) {\r\n                            write(\"{ \");\r\n                            emitExportOrImportSpecifierList(node.exportClause.elements, resolver.isValueAliasDeclaration);\r\n                            write(\" }\");\r\n                        }\r\n                        else {\r\n                            write(\"*\");\r\n                        }\r\n                        if (node.moduleSpecifier) {\r\n                            write(\" from \");\r\n                            emit(node.moduleSpecifier);\r\n                        }\r\n                        write(\";\");\r\n                    }\r\n                }\r\n            }\r\n            function emitExportOrImportSpecifierList(specifiers, shouldEmit) {\r\n                ts.Debug.assert(modulekind === 5 );\r\n                var needsComma = false;\r\n                for (var _a = 0; _a < specifiers.length; _a++) {\r\n                    var specifier = specifiers[_a];\r\n                    if (shouldEmit(specifier)) {\r\n                        if (needsComma) {\r\n                            write(\", \");\r\n                        }\r\n                        if (specifier.propertyName) {\r\n                            emit(specifier.propertyName);\r\n                            write(\" as \");\r\n                        }\r\n                        emit(specifier.name);\r\n                        needsComma = true;\r\n                    }\r\n                }\r\n            }\r\n            function emitExportAssignment(node) {\r\n                if (!node.isExportEquals && resolver.isValueAliasDeclaration(node)) {\r\n                    if (modulekind === 5 ) {\r\n                        writeLine();\r\n                        emitStart(node);\r\n                        write(\"export default \");\r\n                        var expression = node.expression;\r\n                        emit(expression);\r\n                        if (expression.kind !== 213  &&\r\n                            expression.kind !== 214 ) {\r\n                            write(\";\");\r\n                        }\r\n                        emitEnd(node);\r\n                    }\r\n                    else {\r\n                        writeLine();\r\n                        emitStart(node);\r\n                        if (modulekind === 4 ) {\r\n                            write(exportFunctionForFile + \"(\\\"default\\\",\");\r\n                            emit(node.expression);\r\n                            write(\")\");\r\n                        }\r\n                        else {\r\n                            emitEs6ExportDefaultCompat(node);\r\n                            emitContainingModuleName(node);\r\n                            if (languageVersion === 0 ) {\r\n                                write(\"[\\\"default\\\"] = \");\r\n                            }\r\n                            else {\r\n                                write(\".default = \");\r\n                            }\r\n                            emit(node.expression);\r\n                        }\r\n                        write(\";\");\r\n                        emitEnd(node);\r\n                    }\r\n                }\r\n            }\r\n            function collectExternalModuleInfo(sourceFile) {\r\n                externalImports = [];\r\n                exportSpecifiers = {};\r\n                exportEquals = undefined;\r\n                hasExportStars = false;\r\n                for (var _a = 0, _b = sourceFile.statements; _a < _b.length; _a++) {\r\n                    var node = _b[_a];\r\n                    switch (node.kind) {\r\n                        case 222 :\r\n                            if (!node.importClause ||\r\n                                resolver.isReferencedAliasDeclaration(node.importClause,  true)) {\r\n                                externalImports.push(node);\r\n                            }\r\n                            break;\r\n                        case 221 :\r\n                            if (node.moduleReference.kind === 232  && resolver.isReferencedAliasDeclaration(node)) {\r\n                                externalImports.push(node);\r\n                            }\r\n                            break;\r\n                        case 228 :\r\n                            if (node.moduleSpecifier) {\r\n                                if (!node.exportClause) {\r\n                                    externalImports.push(node);\r\n                                    hasExportStars = true;\r\n                                }\r\n                                else if (resolver.isValueAliasDeclaration(node)) {\r\n                                    externalImports.push(node);\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (var _c = 0, _d = node.exportClause.elements; _c < _d.length; _c++) {\r\n                                    var specifier = _d[_c];\r\n                                    var name_25 = (specifier.propertyName || specifier.name).text;\r\n                                    (exportSpecifiers[name_25] || (exportSpecifiers[name_25] = [])).push(specifier);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 227 :\r\n                            if (node.isExportEquals && !exportEquals) {\r\n                                exportEquals = node;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            function emitExportStarHelper() {\r\n                if (hasExportStars) {\r\n                    writeLine();\r\n                    write(\"function __export(m) {\");\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    write(\"for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\");\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    write(\"}\");\r\n                }\r\n            }\r\n            function getLocalNameForExternalImport(node) {\r\n                var namespaceDeclaration = getNamespaceDeclarationNode(node);\r\n                if (namespaceDeclaration && !isDefaultImport(node)) {\r\n                    return ts.getSourceTextOfNodeFromSourceFile(currentSourceFile, namespaceDeclaration.name);\r\n                }\r\n                if (node.kind === 222  && node.importClause) {\r\n                    return getGeneratedNameForNode(node);\r\n                }\r\n                if (node.kind === 228  && node.moduleSpecifier) {\r\n                    return getGeneratedNameForNode(node);\r\n                }\r\n            }\r\n            function getExternalModuleNameText(importNode) {\r\n                var moduleName = ts.getExternalModuleName(importNode);\r\n                if (moduleName.kind === 9 ) {\r\n                    return tryRenameExternalModule(moduleName) || getLiteralText(moduleName);\r\n                }\r\n                return undefined;\r\n            }\r\n            function emitVariableDeclarationsForImports() {\r\n                if (externalImports.length === 0) {\r\n                    return;\r\n                }\r\n                writeLine();\r\n                var started = false;\r\n                for (var _a = 0; _a < externalImports.length; _a++) {\r\n                    var importNode = externalImports[_a];\r\n                    var skipNode = importNode.kind === 228  ||\r\n                        (importNode.kind === 222  && !importNode.importClause);\r\n                    if (skipNode) {\r\n                        continue;\r\n                    }\r\n                    if (!started) {\r\n                        write(\"var \");\r\n                        started = true;\r\n                    }\r\n                    else {\r\n                        write(\", \");\r\n                    }\r\n                    write(getLocalNameForExternalImport(importNode));\r\n                }\r\n                if (started) {\r\n                    write(\";\");\r\n                }\r\n            }\r\n            function emitLocalStorageForExportedNamesIfNecessary(exportedDeclarations) {\r\n                if (!hasExportStars) {\r\n                    return undefined;\r\n                }\r\n                if (!exportedDeclarations && ts.isEmpty(exportSpecifiers)) {\r\n                    var hasExportDeclarationWithExportClause = false;\r\n                    for (var _a = 0; _a < externalImports.length; _a++) {\r\n                        var externalImport = externalImports[_a];\r\n                        if (externalImport.kind === 228  && externalImport.exportClause) {\r\n                            hasExportDeclarationWithExportClause = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!hasExportDeclarationWithExportClause) {\r\n                        return emitExportStarFunction( undefined);\r\n                    }\r\n                }\r\n                var exportedNamesStorageRef = makeUniqueName(\"exportedNames\");\r\n                writeLine();\r\n                write(\"var \" + exportedNamesStorageRef + \" = {\");\r\n                increaseIndent();\r\n                var started = false;\r\n                if (exportedDeclarations) {\r\n                    for (var i = 0; i < exportedDeclarations.length; ++i) {\r\n                        writeExportedName(exportedDeclarations[i]);\r\n                    }\r\n                }\r\n                if (exportSpecifiers) {\r\n                    for (var n in exportSpecifiers) {\r\n                        for (var _b = 0, _c = exportSpecifiers[n]; _b < _c.length; _b++) {\r\n                            var specifier = _c[_b];\r\n                            writeExportedName(specifier.name);\r\n                        }\r\n                    }\r\n                }\r\n                for (var _d = 0; _d < externalImports.length; _d++) {\r\n                    var externalImport = externalImports[_d];\r\n                    if (externalImport.kind !== 228 ) {\r\n                        continue;\r\n                    }\r\n                    var exportDecl = externalImport;\r\n                    if (!exportDecl.exportClause) {\r\n                        continue;\r\n                    }\r\n                    for (var _e = 0, _f = exportDecl.exportClause.elements; _e < _f.length; _e++) {\r\n                        var element = _f[_e];\r\n                        writeExportedName(element.name || element.propertyName);\r\n                    }\r\n                }\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"};\");\r\n                return emitExportStarFunction(exportedNamesStorageRef);\r\n                function emitExportStarFunction(localNames) {\r\n                    var exportStarFunction = makeUniqueName(\"exportStar\");\r\n                    writeLine();\r\n                    write(\"function \" + exportStarFunction + \"(m) {\");\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    write(\"var exports = {};\");\r\n                    writeLine();\r\n                    write(\"for(var n in m) {\");\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    write(\"if (n !== \\\"default\\\"\");\r\n                    if (localNames) {\r\n                        write(\"&& !\" + localNames + \".hasOwnProperty(n)\");\r\n                    }\r\n                    write(\") exports[n] = m[n];\");\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    write(\"}\");\r\n                    writeLine();\r\n                    write(exportFunctionForFile + \"(exports);\");\r\n                    decreaseIndent();\r\n                    writeLine();\r\n                    write(\"}\");\r\n                    return exportStarFunction;\r\n                }\r\n                function writeExportedName(node) {\r\n                    if (node.kind !== 69  && node.flags & 1024 ) {\r\n                        return;\r\n                    }\r\n                    if (started) {\r\n                        write(\",\");\r\n                    }\r\n                    else {\r\n                        started = true;\r\n                    }\r\n                    writeLine();\r\n                    write(\"'\");\r\n                    if (node.kind === 69 ) {\r\n                        emitNodeWithCommentsAndWithoutSourcemap(node);\r\n                    }\r\n                    else {\r\n                        emitDeclarationName(node);\r\n                    }\r\n                    write(\"': true\");\r\n                }\r\n            }\r\n            function processTopLevelVariableAndFunctionDeclarations(node) {\r\n                var hoistedVars;\r\n                var hoistedFunctionDeclarations;\r\n                var exportedDeclarations;\r\n                visit(node);\r\n                if (hoistedVars) {\r\n                    writeLine();\r\n                    write(\"var \");\r\n                    var seen = {};\r\n                    for (var i = 0; i < hoistedVars.length; ++i) {\r\n                        var local = hoistedVars[i];\r\n                        var name_26 = local.kind === 69 \r\n                            ? local\r\n                            : local.name;\r\n                        if (name_26) {\r\n                            var text = ts.unescapeIdentifier(name_26.text);\r\n                            if (ts.hasProperty(seen, text)) {\r\n                                continue;\r\n                            }\r\n                            else {\r\n                                seen[text] = text;\r\n                            }\r\n                        }\r\n                        if (i !== 0) {\r\n                            write(\", \");\r\n                        }\r\n                        if (local.kind === 214  || local.kind === 218  || local.kind === 217 ) {\r\n                            emitDeclarationName(local);\r\n                        }\r\n                        else {\r\n                            emit(local);\r\n                        }\r\n                        var flags = ts.getCombinedNodeFlags(local.kind === 69  ? local.parent : local);\r\n                        if (flags & 1 ) {\r\n                            if (!exportedDeclarations) {\r\n                                exportedDeclarations = [];\r\n                            }\r\n                            exportedDeclarations.push(local);\r\n                        }\r\n                    }\r\n                    write(\";\");\r\n                }\r\n                if (hoistedFunctionDeclarations) {\r\n                    for (var _a = 0; _a < hoistedFunctionDeclarations.length; _a++) {\r\n                        var f = hoistedFunctionDeclarations[_a];\r\n                        writeLine();\r\n                        emit(f);\r\n                        if (f.flags & 1 ) {\r\n                            if (!exportedDeclarations) {\r\n                                exportedDeclarations = [];\r\n                            }\r\n                            exportedDeclarations.push(f);\r\n                        }\r\n                    }\r\n                }\r\n                return exportedDeclarations;\r\n                function visit(node) {\r\n                    if (node.flags & 2 ) {\r\n                        return;\r\n                    }\r\n                    if (node.kind === 213 ) {\r\n                        if (!hoistedFunctionDeclarations) {\r\n                            hoistedFunctionDeclarations = [];\r\n                        }\r\n                        hoistedFunctionDeclarations.push(node);\r\n                        return;\r\n                    }\r\n                    if (node.kind === 214 ) {\r\n                        if (!hoistedVars) {\r\n                            hoistedVars = [];\r\n                        }\r\n                        hoistedVars.push(node);\r\n                        return;\r\n                    }\r\n                    if (node.kind === 217 ) {\r\n                        if (shouldEmitEnumDeclaration(node)) {\r\n                            if (!hoistedVars) {\r\n                                hoistedVars = [];\r\n                            }\r\n                            hoistedVars.push(node);\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (node.kind === 218 ) {\r\n                        if (shouldEmitModuleDeclaration(node)) {\r\n                            if (!hoistedVars) {\r\n                                hoistedVars = [];\r\n                            }\r\n                            hoistedVars.push(node);\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (node.kind === 211  || node.kind === 163 ) {\r\n                        if (shouldHoistVariable(node,  false)) {\r\n                            var name_27 = node.name;\r\n                            if (name_27.kind === 69 ) {\r\n                                if (!hoistedVars) {\r\n                                    hoistedVars = [];\r\n                                }\r\n                                hoistedVars.push(name_27);\r\n                            }\r\n                            else {\r\n                                ts.forEachChild(name_27, visit);\r\n                            }\r\n                        }\r\n                        return;\r\n                    }\r\n                    if (ts.isInternalModuleImportEqualsDeclaration(node) && resolver.isValueAliasDeclaration(node)) {\r\n                        if (!hoistedVars) {\r\n                            hoistedVars = [];\r\n                        }\r\n                        hoistedVars.push(node.name);\r\n                        return;\r\n                    }\r\n                    if (ts.isBindingPattern(node)) {\r\n                        ts.forEach(node.elements, visit);\r\n                        return;\r\n                    }\r\n                    if (!ts.isDeclaration(node)) {\r\n                        ts.forEachChild(node, visit);\r\n                    }\r\n                }\r\n            }\r\n            function shouldHoistVariable(node, checkIfSourceFileLevelDecl) {\r\n                if (checkIfSourceFileLevelDecl && !shouldHoistDeclarationInSystemJsModule(node)) {\r\n                    return false;\r\n                }\r\n                return (ts.getCombinedNodeFlags(node) & 49152 ) === 0 ||\r\n                    ts.getEnclosingBlockScopeContainer(node).kind === 248 ;\r\n            }\r\n            function isCurrentFileSystemExternalModule() {\r\n                return modulekind === 4  && ts.isExternalModule(currentSourceFile);\r\n            }\r\n            function emitSystemModuleBody(node, dependencyGroups, startIndex) {\r\n               emitVariableDeclarationsForImports();\r\n                writeLine();\r\n                var exportedDeclarations = processTopLevelVariableAndFunctionDeclarations(node);\r\n                var exportStarFunction = emitLocalStorageForExportedNamesIfNecessary(exportedDeclarations);\r\n                writeLine();\r\n                write(\"return {\");\r\n                increaseIndent();\r\n                writeLine();\r\n                emitSetters(exportStarFunction, dependencyGroups);\r\n                writeLine();\r\n                emitExecute(node, startIndex);\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"}\");\r\n                emitTempDeclarations( true);\r\n            }\r\n            function emitSetters(exportStarFunction, dependencyGroups) {\r\n                write(\"setters:[\");\r\n                for (var i = 0; i < dependencyGroups.length; ++i) {\r\n                    if (i !== 0) {\r\n                        write(\",\");\r\n                    }\r\n                    writeLine();\r\n                    increaseIndent();\r\n                    var group = dependencyGroups[i];\r\n                    var parameterName = makeUniqueName(ts.forEach(group, getLocalNameForExternalImport) || \"\");\r\n                    write(\"function (\" + parameterName + \") {\");\r\n                    increaseIndent();\r\n                    for (var _a = 0; _a < group.length; _a++) {\r\n                        var entry = group[_a];\r\n                        var importVariableName = getLocalNameForExternalImport(entry) || \"\";\r\n                        switch (entry.kind) {\r\n                            case 222 :\r\n                                if (!entry.importClause) {\r\n                                    break;\r\n                                }\r\n                            case 221 :\r\n                                ts.Debug.assert(importVariableName !== \"\");\r\n                                writeLine();\r\n                                write(importVariableName + \" = \" + parameterName + \";\");\r\n                                writeLine();\r\n                                break;\r\n                            case 228 :\r\n                                ts.Debug.assert(importVariableName !== \"\");\r\n                                if (entry.exportClause) {\r\n                                    writeLine();\r\n                                    write(exportFunctionForFile + \"({\");\r\n                                    writeLine();\r\n                                    increaseIndent();\r\n                                    for (var i_2 = 0, len = entry.exportClause.elements.length; i_2 < len; ++i_2) {\r\n                                        if (i_2 !== 0) {\r\n                                            write(\",\");\r\n                                            writeLine();\r\n                                        }\r\n                                        var e = entry.exportClause.elements[i_2];\r\n                                        write(\"\\\"\");\r\n                                        emitNodeWithCommentsAndWithoutSourcemap(e.name);\r\n                                        write(\"\\\": \" + parameterName + \"[\\\"\");\r\n                                        emitNodeWithCommentsAndWithoutSourcemap(e.propertyName || e.name);\r\n                                        write(\"\\\"]\");\r\n                                    }\r\n                                    decreaseIndent();\r\n                                    writeLine();\r\n                                    write(\"});\");\r\n                                }\r\n                                else {\r\n                                    writeLine();\r\n                                    write(exportStarFunction + \"(\" + parameterName + \");\");\r\n                                }\r\n                                writeLine();\r\n                                break;\r\n                        }\r\n                    }\r\n                    decreaseIndent();\r\n                    write(\"}\");\r\n                    decreaseIndent();\r\n                }\r\n                write(\"],\");\r\n            }\r\n            function emitExecute(node, startIndex) {\r\n                write(\"execute: function() {\");\r\n                increaseIndent();\r\n                writeLine();\r\n                for (var i = startIndex; i < node.statements.length; ++i) {\r\n                    var statement = node.statements[i];\r\n                    switch (statement.kind) {\r\n                        case 213 :\r\n                        case 222 :\r\n                            continue;\r\n                        case 228 :\r\n                            if (!statement.moduleSpecifier) {\r\n                                for (var _a = 0, _b = statement.exportClause.elements; _a < _b.length; _a++) {\r\n                                    var element = _b[_a];\r\n                                    emitExportSpecifierInSystemModule(element);\r\n                                }\r\n                            }\r\n                            continue;\r\n                        case 221 :\r\n                            if (!ts.isInternalModuleImportEqualsDeclaration(statement)) {\r\n                                continue;\r\n                            }\r\n                        default:\r\n                            writeLine();\r\n                            emit(statement);\r\n                    }\r\n                }\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"}\");\r\n            }\r\n            function emitSystemModule(node) {\r\n                collectExternalModuleInfo(node);\r\n                ts.Debug.assert(!exportFunctionForFile);\r\n                exportFunctionForFile = makeUniqueName(\"exports\");\r\n                writeLine();\r\n                write(\"System.register(\");\r\n                if (node.moduleName) {\r\n                    write(\"\\\"\" + node.moduleName + \"\\\", \");\r\n                }\r\n                write(\"[\");\r\n                var groupIndices = {};\r\n                var dependencyGroups = [];\r\n                for (var i = 0; i < externalImports.length; ++i) {\r\n                    var text = getExternalModuleNameText(externalImports[i]);\r\n                    if (ts.hasProperty(groupIndices, text)) {\r\n                        var groupIndex = groupIndices[text];\r\n                        dependencyGroups[groupIndex].push(externalImports[i]);\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        groupIndices[text] = dependencyGroups.length;\r\n                        dependencyGroups.push([externalImports[i]]);\r\n                    }\r\n                    if (i !== 0) {\r\n                        write(\", \");\r\n                    }\r\n                    write(text);\r\n                }\r\n                write(\"], function(\" + exportFunctionForFile + \") {\");\r\n                writeLine();\r\n                increaseIndent();\r\n                var startIndex = emitDirectivePrologues(node.statements,  true);\r\n                emitEmitHelpers(node);\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                emitSystemModuleBody(node, dependencyGroups, startIndex);\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"});\");\r\n            }\r\n            function getAMDDependencyNames(node, includeNonAmdDependencies) {\r\n                var aliasedModuleNames = [];\r\n                var unaliasedModuleNames = [];\r\n                var importAliasNames = [];\r\n                for (var _a = 0, _b = node.amdDependencies; _a < _b.length; _a++) {\r\n                    var amdDependency = _b[_a];\r\n                    if (amdDependency.name) {\r\n                        aliasedModuleNames.push(\"\\\"\" + amdDependency.path + \"\\\"\");\r\n                        importAliasNames.push(amdDependency.name);\r\n                    }\r\n                    else {\r\n                        unaliasedModuleNames.push(\"\\\"\" + amdDependency.path + \"\\\"\");\r\n                    }\r\n                }\r\n                for (var _c = 0; _c < externalImports.length; _c++) {\r\n                    var importNode = externalImports[_c];\r\n                    var externalModuleName = getExternalModuleNameText(importNode);\r\n                    var importAliasName = getLocalNameForExternalImport(importNode);\r\n                    if (includeNonAmdDependencies && importAliasName) {\r\n                        aliasedModuleNames.push(externalModuleName);\r\n                        importAliasNames.push(importAliasName);\r\n                    }\r\n                    else {\r\n                        unaliasedModuleNames.push(externalModuleName);\r\n                    }\r\n                }\r\n                return { aliasedModuleNames: aliasedModuleNames, unaliasedModuleNames: unaliasedModuleNames, importAliasNames: importAliasNames };\r\n            }\r\n            function emitAMDDependencies(node, includeNonAmdDependencies) {\r\n                var dependencyNames = getAMDDependencyNames(node, includeNonAmdDependencies);\r\n                emitAMDDependencyList(dependencyNames);\r\n                write(\", \");\r\n                emitAMDFactoryHeader(dependencyNames);\r\n            }\r\n            function emitAMDDependencyList(_a) {\r\n                var aliasedModuleNames = _a.aliasedModuleNames, unaliasedModuleNames = _a.unaliasedModuleNames;\r\n                write(\"[\\\"require\\\", \\\"exports\\\"\");\r\n                if (aliasedModuleNames.length) {\r\n                    write(\", \");\r\n                    write(aliasedModuleNames.join(\", \"));\r\n                }\r\n                if (unaliasedModuleNames.length) {\r\n                    write(\", \");\r\n                    write(unaliasedModuleNames.join(\", \"));\r\n                }\r\n                write(\"]\");\r\n            }\r\n            function emitAMDFactoryHeader(_a) {\r\n                var importAliasNames = _a.importAliasNames;\r\n                write(\"function (require, exports\");\r\n                if (importAliasNames.length) {\r\n                    write(\", \");\r\n                    write(importAliasNames.join(\", \"));\r\n                }\r\n                write(\") {\");\r\n            }\r\n            function emitAMDModule(node) {\r\n                emitEmitHelpers(node);\r\n                collectExternalModuleInfo(node);\r\n                writeLine();\r\n                write(\"define(\");\r\n                if (node.moduleName) {\r\n                    write(\"\\\"\" + node.moduleName + \"\\\", \");\r\n                }\r\n                emitAMDDependencies(node,  true);\r\n                increaseIndent();\r\n                var startIndex = emitDirectivePrologues(node.statements,  true);\r\n                emitExportStarHelper();\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                emitLinesStartingAt(node.statements, startIndex);\r\n                emitTempDeclarations( true);\r\n                emitExportEquals( true);\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"});\");\r\n            }\r\n            function emitCommonJSModule(node) {\r\n                var startIndex = emitDirectivePrologues(node.statements,  false);\r\n                emitEmitHelpers(node);\r\n                collectExternalModuleInfo(node);\r\n                emitExportStarHelper();\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                emitLinesStartingAt(node.statements, startIndex);\r\n                emitTempDeclarations( true);\r\n                emitExportEquals( false);\r\n            }\r\n            function emitUMDModule(node) {\r\n                emitEmitHelpers(node);\r\n                collectExternalModuleInfo(node);\r\n                var dependencyNames = getAMDDependencyNames(node,  false);\r\n                writeLines(\"(function (factory) {\\n    if (typeof module === 'object' && typeof module.exports === 'object') {\\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\\n    }\\n    else if (typeof define === 'function' && define.amd) {\\n        define(\");\r\n                emitAMDDependencyList(dependencyNames);\r\n                write(\", factory);\");\r\n                writeLines(\"    }\\n})(\");\r\n                emitAMDFactoryHeader(dependencyNames);\r\n                increaseIndent();\r\n                var startIndex = emitDirectivePrologues(node.statements,  true);\r\n                emitExportStarHelper();\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                emitLinesStartingAt(node.statements, startIndex);\r\n                emitTempDeclarations( true);\r\n                emitExportEquals( true);\r\n                decreaseIndent();\r\n                writeLine();\r\n                write(\"});\");\r\n            }\r\n            function emitES6Module(node) {\r\n                externalImports = undefined;\r\n                exportSpecifiers = undefined;\r\n                exportEquals = undefined;\r\n                hasExportStars = false;\r\n                var startIndex = emitDirectivePrologues(node.statements,  false);\r\n                emitEmitHelpers(node);\r\n                emitCaptureThisForNodeIfNecessary(node);\r\n                emitLinesStartingAt(node.statements, startIndex);\r\n                emitTempDeclarations( true);\r\n            }\r\n            function emitExportEquals(emitAsReturn) {\r\n                if (exportEquals && resolver.isValueAliasDeclaration(exportEquals)) {\r\n                    writeLine();\r\n                    emitStart(exportEquals);\r\n                    write(emitAsReturn ? \"return \" : \"module.exports = \");\r\n                    emit(exportEquals.expression);\r\n                    write(\";\");\r\n                    emitEnd(exportEquals);\r\n                }\r\n            }\r\n            function emitJsxElement(node) {\r\n                switch (compilerOptions.jsx) {\r\n                    case 2 :\r\n                        jsxEmitReact(node);\r\n                        break;\r\n                    case 1 :\r\n                    default:\r\n                        jsxEmitPreserve(node);\r\n                        break;\r\n                }\r\n            }\r\n            function trimReactWhitespaceAndApplyEntities(node) {\r\n                var result = undefined;\r\n                var text = ts.getTextOfNode(node,  true);\r\n                var firstNonWhitespace = 0;\r\n                var lastNonWhitespace = -1;\r\n                for (var i = 0; i < text.length; i++) {\r\n                    var c = text.charCodeAt(i);\r\n                    if (ts.isLineBreak(c)) {\r\n                        if (firstNonWhitespace !== -1 && (lastNonWhitespace - firstNonWhitespace + 1 > 0)) {\r\n                            var part = text.substr(firstNonWhitespace, lastNonWhitespace - firstNonWhitespace + 1);\r\n                            result = (result ? result + \"\\\" + ' ' + \\\"\" : \"\") + ts.escapeString(part);\r\n                        }\r\n                        firstNonWhitespace = -1;\r\n                    }\r\n                    else if (!ts.isWhiteSpace(c)) {\r\n                        lastNonWhitespace = i;\r\n                        if (firstNonWhitespace === -1) {\r\n                            firstNonWhitespace = i;\r\n                        }\r\n                    }\r\n                }\r\n                if (firstNonWhitespace !== -1) {\r\n                    var part = text.substr(firstNonWhitespace);\r\n                    result = (result ? result + \"\\\" + ' ' + \\\"\" : \"\") + ts.escapeString(part);\r\n                }\r\n                if (result) {\r\n                    result = result.replace(\/&(\\w+);\/g, function (s, m) {\r\n                        if (entities[m] !== undefined) {\r\n                            return String.fromCharCode(entities[m]);\r\n                        }\r\n                        else {\r\n                            return s;\r\n                        }\r\n                    });\r\n                }\r\n                return result;\r\n            }\r\n            function getTextToEmit(node) {\r\n                switch (compilerOptions.jsx) {\r\n                    case 2 :\r\n                        var text = trimReactWhitespaceAndApplyEntities(node);\r\n                        if (text === undefined || text.length === 0) {\r\n                            return undefined;\r\n                        }\r\n                        else {\r\n                            return text;\r\n                        }\r\n                    case 1 :\r\n                    default:\r\n                        return ts.getTextOfNode(node,  true);\r\n                }\r\n            }\r\n            function emitJsxText(node) {\r\n                switch (compilerOptions.jsx) {\r\n                    case 2 :\r\n                        write(\"\\\"\");\r\n                        write(trimReactWhitespaceAndApplyEntities(node));\r\n                        write(\"\\\"\");\r\n                        break;\r\n                    case 1 :\r\n                    default:\r\n                        writer.writeLiteral(ts.getTextOfNode(node,  true));\r\n                        break;\r\n                }\r\n            }\r\n            function emitJsxExpression(node) {\r\n                if (node.expression) {\r\n                    switch (compilerOptions.jsx) {\r\n                        case 1 :\r\n                        default:\r\n                            write(\"{\");\r\n                            emit(node.expression);\r\n                            write(\"}\");\r\n                            break;\r\n                        case 2 :\r\n                            emit(node.expression);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            function emitDirectivePrologues(statements, startWithNewLine) {\r\n                for (var i = 0; i < statements.length; ++i) {\r\n                    if (ts.isPrologueDirective(statements[i])) {\r\n                        if (startWithNewLine || i > 0) {\r\n                            writeLine();\r\n                        }\r\n                        emit(statements[i]);\r\n                    }\r\n                    else {\r\n                        return i;\r\n                    }\r\n                }\r\n                return statements.length;\r\n            }\r\n            function writeLines(text) {\r\n                var lines = text.split(\/\\r\\n|\\r|\\n\/g);\r\n                for (var i = 0; i < lines.length; ++i) {\r\n                    var line = lines[i];\r\n                    if (line.length) {\r\n                        writeLine();\r\n                        write(line);\r\n                    }\r\n                }\r\n            }\r\n            function emitEmitHelpers(node) {\r\n                if (!compilerOptions.noEmitHelpers) {\r\n                    if ((languageVersion < 2 ) && (!extendsEmitted && resolver.getNodeCheckFlags(node) & 8 )) {\r\n                        writeLines(extendsHelper);\r\n                        extendsEmitted = true;\r\n                    }\r\n                    if (!decorateEmitted && resolver.getNodeCheckFlags(node) & 16 ) {\r\n                        writeLines(decorateHelper);\r\n                        if (compilerOptions.emitDecoratorMetadata) {\r\n                            writeLines(metadataHelper);\r\n                        }\r\n                        decorateEmitted = true;\r\n                    }\r\n                    if (!paramEmitted && resolver.getNodeCheckFlags(node) & 32 ) {\r\n                        writeLines(paramHelper);\r\n                        paramEmitted = true;\r\n                    }\r\n                    if (!awaiterEmitted && resolver.getNodeCheckFlags(node) & 64 ) {\r\n                        writeLines(awaiterHelper);\r\n                        awaiterEmitted = true;\r\n                    }\r\n                }\r\n            }\r\n            function emitSourceFileNode(node) {\r\n                writeLine();\r\n                emitShebang();\r\n                emitDetachedComments(node);\r\n                if (ts.isExternalModule(node) || compilerOptions.isolatedModules) {\r\n                    var emitModule = moduleEmitDelegates[modulekind] || moduleEmitDelegates[1 ];\r\n                    emitModule(node);\r\n                }\r\n                else {\r\n                    var startIndex = emitDirectivePrologues(node.statements,  false);\r\n                    externalImports = undefined;\r\n                    exportSpecifiers = undefined;\r\n                    exportEquals = undefined;\r\n                    hasExportStars = false;\r\n                    emitEmitHelpers(node);\r\n                    emitCaptureThisForNodeIfNecessary(node);\r\n                    emitLinesStartingAt(node.statements, startIndex);\r\n                    emitTempDeclarations( true);\r\n                }\r\n                emitLeadingComments(node.endOfFileToken);\r\n            }\r\n            function emitNodeWithCommentsAndWithoutSourcemap(node) {\r\n                emitNodeConsideringCommentsOption(node, emitNodeWithoutSourceMap);\r\n            }\r\n            function emitNodeConsideringCommentsOption(node, emitNodeConsideringSourcemap) {\r\n                if (node) {\r\n                    if (node.flags & 2 ) {\r\n                        return emitCommentsOnNotEmittedNode(node);\r\n                    }\r\n                    if (isSpecializedCommentHandling(node)) {\r\n                        return emitNodeWithoutSourceMap(node);\r\n                    }\r\n                    var emitComments_1 = shouldEmitLeadingAndTrailingComments(node);\r\n                    if (emitComments_1) {\r\n                        emitLeadingComments(node);\r\n                    }\r\n                    emitNodeConsideringSourcemap(node);\r\n                    if (emitComments_1) {\r\n                        emitTrailingComments(node);\r\n                    }\r\n                }\r\n            }\r\n            function emitNodeWithoutSourceMap(node) {\r\n                if (node) {\r\n                    emitJavaScriptWorker(node);\r\n                }\r\n            }\r\n            function isSpecializedCommentHandling(node) {\r\n                switch (node.kind) {\r\n                    case 215 :\r\n                    case 213 :\r\n                    case 222 :\r\n                    case 221 :\r\n                    case 216 :\r\n                    case 227 :\r\n                        return true;\r\n                }\r\n            }\r\n            function shouldEmitLeadingAndTrailingComments(node) {\r\n                switch (node.kind) {\r\n                    case 193 :\r\n                        return shouldEmitLeadingAndTrailingCommentsForVariableStatement(node);\r\n                    case 218 :\r\n                        return shouldEmitModuleDeclaration(node);\r\n                    case 217 :\r\n                        return shouldEmitEnumDeclaration(node);\r\n                }\r\n                ts.Debug.assert(!isSpecializedCommentHandling(node));\r\n                if (node.kind !== 192  &&\r\n                    node.parent &&\r\n                    node.parent.kind === 174  &&\r\n                    node.parent.body === node &&\r\n                    compilerOptions.target <= 1 ) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            }\r\n            function emitJavaScriptWorker(node) {\r\n                switch (node.kind) {\r\n                    case 69 :\r\n                        return emitIdentifier(node);\r\n                    case 138 :\r\n                        return emitParameter(node);\r\n                    case 143 :\r\n                    case 142 :\r\n                        return emitMethod(node);\r\n                    case 145 :\r\n                    case 146 :\r\n                        return emitAccessor(node);\r\n                    case 97 :\r\n                        return emitThis(node);\r\n                    case 95 :\r\n                        return emitSuper(node);\r\n                    case 93 :\r\n                        return write(\"null\");\r\n                    case 99 :\r\n                        return write(\"true\");\r\n                    case 84 :\r\n                        return write(\"false\");\r\n                    case 8 :\r\n                    case 9 :\r\n                    case 10 :\r\n                    case 11 :\r\n                    case 12 :\r\n                    case 13 :\r\n                    case 14 :\r\n                        return emitLiteral(node);\r\n                    case 183 :\r\n                        return emitTemplateExpression(node);\r\n                    case 190 :\r\n                        return emitTemplateSpan(node);\r\n                    case 233 :\r\n                    case 234 :\r\n                        return emitJsxElement(node);\r\n                    case 236 :\r\n                        return emitJsxText(node);\r\n                    case 240 :\r\n                        return emitJsxExpression(node);\r\n                    case 135 :\r\n                        return emitQualifiedName(node);\r\n                    case 161 :\r\n                        return emitObjectBindingPattern(node);\r\n                    case 162 :\r\n                        return emitArrayBindingPattern(node);\r\n                    case 163 :\r\n                        return emitBindingElement(node);\r\n                    case 164 :\r\n                        return emitArrayLiteral(node);\r\n                    case 165 :\r\n                        return emitObjectLiteral(node);\r\n                    case 245 :\r\n                        return emitPropertyAssignment(node);\r\n                    case 246 :\r\n                        return emitShorthandPropertyAssignment(node);\r\n                    case 136 :\r\n                        return emitComputedPropertyName(node);\r\n                    case 166 :\r\n                        return emitPropertyAccess(node);\r\n                    case 167 :\r\n                        return emitIndexedAccess(node);\r\n                    case 168 :\r\n                        return emitCallExpression(node);\r\n                    case 169 :\r\n                        return emitNewExpression(node);\r\n                    case 170 :\r\n                        return emitTaggedTemplateExpression(node);\r\n                    case 171 :\r\n                        return emit(node.expression);\r\n                    case 189 :\r\n                        return emit(node.expression);\r\n                    case 172 :\r\n                        return emitParenExpression(node);\r\n                    case 213 :\r\n                    case 173 :\r\n                    case 174 :\r\n                        return emitFunctionDeclaration(node);\r\n                    case 175 :\r\n                        return emitDeleteExpression(node);\r\n                    case 176 :\r\n                        return emitTypeOfExpression(node);\r\n                    case 177 :\r\n                        return emitVoidExpression(node);\r\n                    case 178 :\r\n                        return emitAwaitExpression(node);\r\n                    case 179 :\r\n                        return emitPrefixUnaryExpression(node);\r\n                    case 180 :\r\n                        return emitPostfixUnaryExpression(node);\r\n                    case 181 :\r\n                        return emitBinaryExpression(node);\r\n                    case 182 :\r\n                        return emitConditionalExpression(node);\r\n                    case 185 :\r\n                        return emitSpreadElementExpression(node);\r\n                    case 184 :\r\n                        return emitYieldExpression(node);\r\n                    case 187 :\r\n                        return;\r\n                    case 192 :\r\n                    case 219 :\r\n                        return emitBlock(node);\r\n                    case 193 :\r\n                        return emitVariableStatement(node);\r\n                    case 194 :\r\n                        return write(\";\");\r\n                    case 195 :\r\n                        return emitExpressionStatement(node);\r\n                    case 196 :\r\n                        return emitIfStatement(node);\r\n                    case 197 :\r\n                        return emitDoStatement(node);\r\n                    case 198 :\r\n                        return emitWhileStatement(node);\r\n                    case 199 :\r\n                        return emitForStatement(node);\r\n                    case 201 :\r\n                    case 200 :\r\n                        return emitForInOrForOfStatement(node);\r\n                    case 202 :\r\n                    case 203 :\r\n                        return emitBreakOrContinueStatement(node);\r\n                    case 204 :\r\n                        return emitReturnStatement(node);\r\n                    case 205 :\r\n                        return emitWithStatement(node);\r\n                    case 206 :\r\n                        return emitSwitchStatement(node);\r\n                    case 241 :\r\n                    case 242 :\r\n                        return emitCaseOrDefaultClause(node);\r\n                    case 207 :\r\n                        return emitLabelledStatement(node);\r\n                    case 208 :\r\n                        return emitThrowStatement(node);\r\n                    case 209 :\r\n                        return emitTryStatement(node);\r\n                    case 244 :\r\n                        return emitCatchClause(node);\r\n                    case 210 :\r\n                        return emitDebuggerStatement(node);\r\n                    case 211 :\r\n                        return emitVariableDeclaration(node);\r\n                    case 186 :\r\n                        return emitClassExpression(node);\r\n                    case 214 :\r\n                        return emitClassDeclaration(node);\r\n                    case 215 :\r\n                        return emitInterfaceDeclaration(node);\r\n                    case 217 :\r\n                        return emitEnumDeclaration(node);\r\n                    case 247 :\r\n                        return emitEnumMember(node);\r\n                    case 218 :\r\n                        return emitModuleDeclaration(node);\r\n                    case 222 :\r\n                        return emitImportDeclaration(node);\r\n                    case 221 :\r\n                        return emitImportEqualsDeclaration(node);\r\n                    case 228 :\r\n                        return emitExportDeclaration(node);\r\n                    case 227 :\r\n                        return emitExportAssignment(node);\r\n                    case 248 :\r\n                        return emitSourceFileNode(node);\r\n                }\r\n            }\r\n            function hasDetachedComments(pos) {\r\n                return detachedCommentsInfo !== undefined && ts.lastOrUndefined(detachedCommentsInfo).nodePos === pos;\r\n            }\r\n            function getLeadingCommentsWithoutDetachedComments() {\r\n                var leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, ts.lastOrUndefined(detachedCommentsInfo).detachedCommentEndPos);\r\n                if (detachedCommentsInfo.length - 1) {\r\n                    detachedCommentsInfo.pop();\r\n                }\r\n                else {\r\n                    detachedCommentsInfo = undefined;\r\n                }\r\n                return leadingComments;\r\n            }\r\n            function isPinnedComments(comment) {\r\n                return currentSourceFile.text.charCodeAt(comment.pos + 1) === 42  &&\r\n                    currentSourceFile.text.charCodeAt(comment.pos + 2) === 33 ;\r\n            }\r\n                        function isTripleSlashComment(comment) {\r\nment.end &&\r\n                    currentSourceFile.text.charCodeAt(comment.pos + 2) === 47 ) {\r\n                    var textSubStr = currentSourceFile.text.substring(comment.pos, comment.end);\r\n                    return textSubStr.match(ts.fullTripleSlashReferencePathRegEx) ||\r\n                    textSubStr.match(ts.fullTripleSlashAMDReferencePathRegEx) ?\r\n                        true : false;\r\n                }\r\n                return false;\r\n            }\r\n            function getLeadingCommentsToEmit(node) {\r\n                if (node.parent) {\r\n                    if (node.parent.kind === 248  || node.pos !== node.parent.pos) {\r\n                        if (hasDetachedComments(node.pos)) {\r\n                            return getLeadingCommentsWithoutDetachedComments();\r\n                        }\r\n                        else {\r\n                            return ts.getLeadingCommentRangesOfNode(node, currentSourceFile);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function getTrailingCommentsToEmit(node) {\r\n                if (node.parent) {\r\n                    if (node.parent.kind === 248  || node.end !== node.parent.end) {\r\n                        return ts.getTrailingCommentRanges(currentSourceFile.text, node.end);\r\n                    }\r\n                }\r\n            }\r\n                        function emitCommentsOnNotEmittedNode(node) {\r\n                emitLeadingCommentsWorker(node,  false);\r\n            }\r\n            function emitLeadingComments(node) {\r\n                return emitLeadingCommentsWorker(node,  true);\r\n            }\r\n            function emitLeadingCommentsWorker(node, isEmittedNode) {\r\n                if (compilerOptions.removeComments) {\r\n                    return;\r\n                }\r\n                var leadingComments;\r\n                if (isEmittedNode) {\r\n                    leadingComments = getLeadingCommentsToEmit(node);\r\n                }\r\n                else {\r\n  }\r\n                ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments);\r\n                ts.emitComments(currentSourceFile, writer, leadingComments,  true, newLine, writeComment);\r\n            }\r\n            function emitTrailingComments(node) {\r\n                if (compilerOptions.removeComments) {\r\n                    return;\r\n                }\r\n                var trailingComments = getTrailingCommentsToEmit(node);\r\n                ts.emitComments(currentSourceFile, writer, trailingComments,  false, newLine, writeComment);\r\n            }\r\n                        function emitTrailingCommentsOfPosition(pos) {\r\n                if (compilerOptions.removeComments) {\r\n                    return;\r\n                }\r\n                var trailingComments = ts.getTrailingCommentRanges(currentSourceFile.text, pos);\r\n                ts.emitComments(currentSourceFile, writer, trailingComments,  true, newLine, writeComment);\r\n            }\r\n            function emitLeadingCommentsOfPositionWorker(pos) {\r\n                if (compilerOptions.removeComments) {\r\n                    return;\r\n                }\r\n                var leadingComments;\r\n                if (hasDetachedComments(pos)) {\r\n                    leadingComments = getLeadingCommentsWithoutDetachedComments();\r\n                }\r\n                else {\r\n                    leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, pos);\r\n                }\r\n                ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, { pos: pos, end: pos }, leadingComments);\r\n                ts.emitComments(currentSourceFile, writer, leadingComments,  true, newLine, writeComment);\r\n            }\r\n            function emitDetachedComments(node) {\r\n                var leadingComments;\r\n                if (compilerOptions.removeComments) {\r\n                    if (node.pos === 0) {\r\n                        leadingComments = ts.filter(ts.getLeadingCommentRanges(currentSourceFile.text, node.pos), isPinnedComments);\r\n                    }\r\n                }\r\n                else {\r\n                    leadingComments = ts.getLeadingCommentRanges(currentSourceFile.text, node.pos);\r\n                }\r\n                if (leadingComments) {\r\n                    var detachedComments = [];\r\n                    var lastComment;\r\n                    ts.forEach(leadingComments, function (comment) {\r\n                        if (lastComment) {\r\n                            var lastCommentLine = ts.getLineOfLocalPosition(currentSourceFile, lastComment.end);\r\n                            var commentLine = ts.getLineOfLocalPosition(currentSourceFile, comment.pos);\r\n                            if (commentLine >= lastCommentLine + 2) {\r\n                                return detachedComments;\r\n                            }\r\n                        }\r\n                        detachedComments.push(comment);\r\n                        lastComment = comment;\r\n                    });\r\n                    if (detachedComments.length) {\r\n                        var lastCommentLine = ts.getLineOfLocalPosition(currentSourceFile, ts.lastOrUndefined(detachedComments).end);\r\n                        var nodeLine = ts.getLineOfLocalPosition(currentSourceFile, ts.skipTrivia(currentSourceFile.text, node.pos));\r\n                        if (nodeLine >= lastCommentLine + 2) {\r\n                            ts.emitNewLineBeforeLeadingComments(currentSourceFile, writer, node, leadingComments);\r\n                            ts.emitComments(currentSourceFile, writer, detachedComments,  true, newLine, writeComment);\r\n                            var currentDetachedCommentInfo = { nodePos: node.pos, detachedCommentEndPos: ts.lastOrUndefined(detachedComments).end };\r\n                            if (detachedCommentsInfo) {\r\n                                detachedCommentsInfo.push(currentDetachedCommentInfo);\r\n                            }\r\n                            else {\r\n                                detachedCommentsInfo = [currentDetachedCommentInfo];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            function emitShebang() {\r\n                var shebang = ts.getShebang(currentSourceFile.text);\r\n                if (shebang) {\r\n                    write(shebang);\r\n                }\r\n            }\r\n            var _a;\r\n        }\r\n        function emitFile(jsFilePath, sourceFile) {\r\n            emitJavaScript(jsFilePath, sourceFile);\r\n            if (compilerOptions.declaration) {\r\n                ts.writeDeclarationFile(jsFilePath, sourceFile, host, resolver, diagnostics);\r\n            }\r\n        }\r\n    }","code-length":54568,"reference":"targetSourceFile is when users only want one file in entire project to be emitted. This is used in compileOnSave feature","result":"Code too long,keep in 512.","score":[0.012,0.027]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeTempVariableName(flags) {\r\n                if (flags && !(tempFlags & flags)) {\r\n                    var name_19 = flags === 268435456  ? \"_i\" : \"_n\";\r\n                    if (isUniqueName(name_19)) {\r\n                        tempFlags |= flags;\r\n                        return name_19;\r\n                    }\r\n                }\r\n                while (true) {\r\n                    var count = tempFlags & 268435455 ;\r\n                    tempFlags++;\r\n                    if (count !== 8 && count !== 13) {\r\n                        var name_20 = count < 26 ? \"_\" + String.fromCharCode(97  + count) : \"_\" + (count - 26);\r\n                        if (isUniqueName(name_20)) {\r\n                            return name_20;\r\n                        }\r\n                    }\r\n                }\r\n            }","code-length":208,"reference":"Return the next available name in the pattern _a ... _z, _0, _1, ... TempFlags._i or TempFlags._n may be used to express a preference for that dedicated name. Note that names generated by makeTempVariableName and makeUniqueName will never conflict.","result":"Create a temporary variable name.","score":[0.0003,0.0281]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeUniqueName(baseName) {\r\n                if (baseName.charCodeAt(baseName.length - 1) !== 95 ) {\r\n                    baseName += \"_\";\r\n                }\r\n                var i = 1;\r\n                while (true) {\r\n                    var generatedName = baseName + i;\r\n                    if (isUniqueName(generatedName)) {\r\n                        return generatedNameSet[generatedName] = generatedName;\r\n                    }\r\n                    i++;\r\n                }\r\n            }","code-length":125,"reference":"Generate a name that is unique within the current file and doesn't conflict with any names in global scope. The name is formed by adding an '_n' suffix to the specified base name, where n is a positive integer. Note that names generated by makeTempVariableName and makeUniqueName are guaranteed to never conflict.","result":"Return generatedNameSet[baseName] .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encodeLastRecordedSourceMapSpan() {\r\n                    if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan === lastEncodedSourceMapSpan) {\r\n                        return;\r\n                    }\r\n                    var prevEncodedEmittedColumn = lastEncodedSourceMapSpan.emittedColumn;\r\n                    if (lastEncodedSourceMapSpan.emittedLine === lastRecordedSourceMapSpan.emittedLine) {\r\n                        if (sourceMapData.sourceMapMappings) {\r\n                            sourceMapData.sourceMapMappings += \",\";\r\n                        }\r\n                    }\r\n                    else {\r\n                        for (var encodedLine = lastEncodedSourceMapSpan.emittedLine; encodedLine < lastRecordedSourceMapSpan.emittedLine; encodedLine++) {\r\n                            sourceMapData.sourceMapMappings += \";\";\r\n                        }\r\n                        prevEncodedEmittedColumn = 1;\r\n                    }\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.emittedColumn - prevEncodedEmittedColumn);\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceIndex - lastEncodedSourceMapSpan.sourceIndex);\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceLine - lastEncodedSourceMapSpan.sourceLine);\r\n                    sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceColumn - lastEncodedSourceMapSpan.sourceColumn);\r\n                    if (lastRecordedSourceMapSpan.nameIndex >= 0) {\r\n                        sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.nameIndex - lastEncodedNameIndex);\r\n                        lastEncodedNameIndex = lastRecordedSourceMapSpan.nameIndex;\r\n                    }\r\n                    lastEncodedSourceMapSpan = lastRecordedSourceMapSpan;\r\n                    sourceMapData.sourceMapDecodedMappings.push(lastEncodedSourceMapSpan);\r\n                    function base64VLQFormatEncode(inValue) {\r\n                        function base64FormatEncode(inValue) {\r\n                            if (inValue < 64) {\r\n                                return \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/\".charAt(inValue);\r\n                            }\r\n                            throw TypeError(inValue + \": not a 64 based value\");\r\n                        }\r\n                        if (inValue < 0) {\r\n                            inValue = ((-inValue) << 1) + 1;\r\n                        }\r\n                        else {\r\n                            inValue = inValue << 1;\r\n                        }\r\n                        var encodedStr = \"\";\r\n                        do {\r\n                            var currentDigit = inValue & 31;\r\n                            inValue = inValue >> 5;\r\n                            if (inValue > 0) {\r\n                                currentDigit = currentDigit | 32;\r\n                            }\r\n                            encodedStr = encodedStr + base64FormatEncode(currentDigit);\r\n                        } while (inValue > 0);\r\n                        return encodedStr;\r\n                    }\r\n                }","code-length":734,"reference":"Encoding for sourcemap span","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createTempVariable(flags) {\r\n                var result = ts.createSynthesizedNode(69 );\r\n                result.text = makeTempVariableName(flags);\r\n                return result;\r\n            }","code-length":56,"reference":"Create a temporary variable with a unique unused name.","result":"Create a temporary variable.","score":[0.1885,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction indentIfOnDifferentLines(parent, node1, node2, valueToWriteWhenNotIndenting) {\r\n                var realNodesAreOnDifferentLines = !ts.nodeIsSynthesized(parent) && !nodeEndIsOnSameLineAsNodeStart(node1, node2);\r\n                var synthesizedNodeIsOnDifferentLine = synthesizedNodeStartsOnNewLine(node2);\r\n                if (realNodesAreOnDifferentLines || synthesizedNodeIsOnDifferentLine) {\r\n                    increaseIndent();\r\n                    writeLine();\r\n                    return true;\r\n                }\r\n                else {\r\n                    if (valueToWriteWhenNotIndenting) {\r\n                        write(valueToWriteWhenNotIndenting);\r\n                    }\r\n                    return false;\r\n                }\r\n            }","code-length":187,"reference":"Returns 'true' if the code was actually indented, false otherwise. If the code is not indented, an optional valueToWriteWhenNotIndenting will be emitted instead.","result":"Indent if on different lines .","score":[0.0114,0.0235]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emitExponentiationOperator(node) {\r\n                var leftHandSideExpression = node.left;\r\n                if (node.operatorToken.kind === 60 ) {\r\n                    var synthesizedLHS;\r\n                    var shouldEmitParentheses = false;\r\n                    if (ts.isElementAccessExpression(leftHandSideExpression)) {\r\n                        shouldEmitParentheses = true;\r\n                        write(\"(\");\r\n                        synthesizedLHS = ts.createSynthesizedNode(167 ,  false);\r\n                        var identifier = emitTempVariableAssignment(leftHandSideExpression.expression,  false,  false);\r\n                        synthesizedLHS.expression = identifier;\r\n                        if (leftHandSideExpression.argumentExpression.kind !== 8  &&\r\n                            leftHandSideExpression.argumentExpression.kind !== 9 ) {\r\n                            var tempArgumentExpression = createAndRecordTempVariable(268435456 );\r\n                            synthesizedLHS.argumentExpression = tempArgumentExpression;\r\n                            emitAssignment(tempArgumentExpression, leftHandSideExpression.argumentExpression,  true);\r\n                        }\r\n                        else {\r\n                            synthesizedLHS.argumentExpression = leftHandSideExpression.argumentExpression;\r\n                        }\r\n                        write(\", \");\r\n                    }\r\n                    else if (ts.isPropertyAccessExpression(leftHandSideExpression)) {\r\n                        shouldEmitParentheses = true;\r\n                        write(\"(\");\r\n                        synthesizedLHS = ts.createSynthesizedNode(166 ,  false);\r\n                        var identifier = emitTempVariableAssignment(leftHandSideExpression.expression,  false,  false);\r\n                        synthesizedLHS.expression = identifier;\r\n                        synthesizedLHS.dotToken = leftHandSideExpression.dotToken;\r\n                        synthesizedLHS.name = leftHandSideExpression.name;\r\n                        write(\", \");\r\n                    }\r\n                    emit(synthesizedLHS || leftHandSideExpression);\r\n                    write(\" = \");\r\n                    write(\"Math.pow(\");\r\n                    emit(synthesizedLHS || leftHandSideExpression);\r\n                    write(\", \");\r\n                    emit(node.right);\r\n                    write(\")\");\r\n                    if (shouldEmitParentheses) {\r\n                        write(\")\");\r\n                    }\r\n                }\r\n                else {\r\n                    write(\"Math.pow(\");\r\n                    emit(leftHandSideExpression);\r\n                    write(\", \");\r\n                    emit(node.right);\r\n                    write(\")\");\r\n                }\r\n            }","code-length":598,"reference":"Emit ES7 exponentiation operator downlevel using Math.pow\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tryEmitStartOfVariableDeclarationList(decl, startPos) {\r\n                if (shouldHoistVariable(decl,  true)) {\r\n                    return false;\r\n                }\r\n                var tokenKind = 102 ;\r\n                if (decl && languageVersion >= 2 ) {\r\n                    if (ts.isLet(decl)) {\r\n                        tokenKind = 108 ;\r\n                    }\r\n                    else if (ts.isConst(decl)) {\r\n                        tokenKind = 74 ;\r\n                    }\r\n                }\r\n                if (startPos !== undefined) {\r\n                    emitToken(tokenKind, startPos);\r\n                    write(\" \");\r\n                }\r\n                else {\r\n                    switch (tokenKind) {\r\n                        case 102 :\r\n                            write(\"var \");\r\n                            break;\r\n                        case 108 :\r\n                            write(\"let \");\r\n                            break;\r\n                        case 74 :\r\n                            write(\"const \");\r\n                            break;\r\n                    }\r\n                }\r\n                return true;\r\n            }","code-length":248,"reference":"Returns true if start of variable declaration list was emitted.","result":"Emit the start of a variable declaration list.","score":[0.2013,0.3827]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emitAssignment(name, value, shouldEmitCommaBeforeAssignment) {\r\n                if (shouldEmitCommaBeforeAssignment) {\r\n                    write(\", \");\r\n                }\r\n                var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(name);\r\n                if (exportChanged) {\r\n                    write(exportFunctionForFile + \"(\\\"\");\r\n                    emitNodeWithCommentsAndWithoutSourcemap(name);\r\n                    write(\"\\\", \");\r\n                }\r\n                var isVariableDeclarationOrBindingElement = name.parent && (name.parent.kind === 211  || name.parent.kind === 163 );\r\n                if (isVariableDeclarationOrBindingElement) {\r\n                    emitModuleMemberName(name.parent);\r\n                }\r\n                else {\r\n                    emit(name);\r\n                }\r\n                write(\" = \");\r\n                emit(value);\r\n                if (exportChanged) {\r\n                    write(\")\");\r\n                }\r\n            }","code-length":233,"reference":"Emit an assignment to a given identifier, 'name', with a given expression, 'value'.\n","result":"Emit an assignment to a variable declaration.","score":[0.2852,0.3903]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emitTempVariableAssignment(expression, canDefineTempVariablesInPlace, shouldEmitCommaBeforeAssignment) {\r\n                var identifier = createTempVariable(0 );\r\n                if (!canDefineTempVariablesInPlace) {\r\n                    recordTempDeclaration(identifier);\r\n                }\r\n                emitAssignment(identifier, expression, shouldEmitCommaBeforeAssignment);\r\n                return identifier;\r\n            }","code-length":95,"reference":"Create temporary variable, emit an assignment of the variable the given expression\n","result":"Emit temp variable assignments.","score":[0.0432,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ensureIdentifier(expr, reuseIdentifierExpressions) {\r\n                    if (expr.kind === 69  && reuseIdentifierExpressions) {\r\n                        return expr;\r\n                    }\r\n                    var identifier = emitTempVariableAssignment(expr, canDefineTempVariablesInPlace, emitCount > 0);\r\n                    emitCount++;\r\n                    return identifier;\r\n                }","code-length":89,"reference":"Ensures that there exists a declared identifier whose value holds the given expression.\nThis function is useful to ensure that the expression's value can be read from in subsequent expressions.\nUnless 'reuseIdentifierExpressions' is false, 'expr' will be returned if it is just an identifier.\n\n","result":"Ensure a valid identifier.","score":[0.0,0.0375]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findSourceFile(fileName, isDefaultLib, refFile, refPos, refEnd) {\r\n            if (filesByName.contains(fileName)) {\r\n                return getSourceFileFromCache(fileName,  false);\r\n            }\r\n            var normalizedAbsolutePath = ts.getNormalizedAbsolutePath(fileName, host.getCurrentDirectory());\r\n            if (filesByName.contains(normalizedAbsolutePath)) {\r\n                var file_1 = getSourceFileFromCache(normalizedAbsolutePath,  true);\r\n                filesByName.set(fileName, file_1);\r\n                return file_1;\r\n            }\r\n            var file = host.getSourceFile(fileName, options.target, function (hostErrorMessage) {\r\n                if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {\r\n                    fileProcessingDiagnostics.add(ts.createFileDiagnostic(refFile, refPos, refEnd - refPos, ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, hostErrorMessage));\r\n                }\r\n                else {\r\n                    fileProcessingDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, hostErrorMessage));\r\n                }\r\n            });\r\n            filesByName.set(fileName, file);\r\n            if (file) {\r\n                skipDefaultLib = skipDefaultLib || file.hasNoDefaultLib;\r\n                filesByName.set(normalizedAbsolutePath, file);\r\n                var basePath = ts.getDirectoryPath(fileName);\r\n                if (!options.noResolve) {\r\n                    processReferencedFiles(file, basePath);\r\n                }\r\n                processImportedModules(file, basePath);\r\n                if (isDefaultLib) {\r\n                    file.isDefaultLib = true;\r\n                    files.unshift(file);\r\n                }\r\n                else {\r\n                    files.push(file);\r\n                }\r\n            }\r\n            return file;\r\n            function getSourceFileFromCache(fileName, useAbsolutePath) {\r\n                var file = filesByName.get(fileName);\r\n                if (file && host.useCaseSensitiveFileNames()) {\r\n                    var sourceFileName = useAbsolutePath ? ts.getNormalizedAbsolutePath(file.fileName, host.getCurrentDirectory()) : file.fileName;\r\n                    if (ts.normalizeSlashes(fileName) !== ts.normalizeSlashes(sourceFileName)) {\r\n                        if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {\r\n                            fileProcessingDiagnostics.add(ts.createFileDiagnostic(refFile, refPos, refEnd - refPos, ts.Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, sourceFileName));\r\n                        }\r\n                        else {\r\n                            fileProcessingDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, sourceFileName));\r\n                        }\r\n                    }\r\n                }\r\n                return file;\r\n            }\r\n        }","code-length":731,"reference":"Get source file from normalized fileName","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction readConfigFile(fileName, readFile) {\r\n        var text = \"\";\r\n        try {\r\n            text = readFile(fileName);\r\n        }\r\n        catch (e) {\r\n            return { error: ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, e.message) };\r\n        }\r\n        return parseConfigFileTextToJson(fileName, text);\r\n    }","code-length":112,"reference":"Read tsconfig.json file\n","result":"ReadFile || readFileFile.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseConfigFileTextToJson(fileName, jsonText) {\r\n        try {\r\n            return { config: \/\\S\/.test(jsonText) ? JSON.parse(jsonText) : {} };\r\n        }\r\n        catch (e) {\r\n            return { error: ts.createCompilerDiagnostic(ts.Diagnostics.Failed_to_parse_file_0_Colon_1, fileName, e.message) };\r\n        }\r\n    }","code-length":115,"reference":"Parse the text of the tsconfig.json file\n","result":"Parse the config file to json.","score":[0.2558,0.2174]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeDynamicallyNamedProperties(node) {\r\n                return ts.filter(node.members, function (member) { return !ts.hasDynamicName(member); });\r\n            }","code-length":51,"reference":"Like removeComputedProperties, but retains the properties with well known symbol names","result":"Remove dynamically named properties.","score":[0,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getImmediatelyContainingArgumentInfo(node) {\r\n                if (node.parent.kind === 168  || node.parent.kind === 169 ) {\r\n                    var callExpression = node.parent;\r\n                    if (node.kind === 25  ||\r\n                        node.kind === 17 ) {\r\n                        var list = getChildListThatStartsWithOpenerToken(callExpression, node, sourceFile);\r\n                        var isTypeArgList = callExpression.typeArguments && callExpression.typeArguments.pos === list.pos;\r\n                        ts.Debug.assert(list !== undefined);\r\n                        return {\r\n                            kind: isTypeArgList ? 0  : 1 ,\r\n                            invocation: callExpression,\r\n                            argumentsSpan: getApplicableSpanForArguments(list),\r\n                            argumentIndex: 0,\r\n                            argumentCount: getArgumentCount(list)\r\n                        };\r\n                    }\r\n                    var listItemInfo = ts.findListItemInfo(node);\r\n                    if (listItemInfo) {\r\n                        var list = listItemInfo.list;\r\n                        var isTypeArgList = callExpression.typeArguments && callExpression.typeArguments.pos === list.pos;\r\n                        var argumentIndex = getArgumentIndex(list, node);\r\n                        var argumentCount = getArgumentCount(list);\r\n                        ts.Debug.assert(argumentIndex === 0 || argumentIndex < argumentCount, \"argumentCount < argumentIndex, \" + argumentCount + \" < \" + argumentIndex);\r\n                        return {\r\n                            kind: isTypeArgList ? 0  : 1 ,\r\n                            invocation: callExpression,\r\n                            argumentsSpan: getApplicableSpanForArguments(list),\r\n                            argumentIndex: argumentIndex,\r\n                            argumentCount: argumentCount\r\n                        };\r\n                    }\r\n                }\r\n                else if (node.kind === 11  && node.parent.kind === 170 ) {\r\n                    if (ts.isInsideTemplateLiteral(node, position)) {\r\n                        return getArgumentListInfoForTemplate(node.parent,  0);\r\n                    }\r\n                }\r\n                else if (node.kind === 12  && node.parent.parent.kind === 170 ) {\r\n                    var templateExpression = node.parent;\r\n                    var tagExpression = templateExpression.parent;\r\n                    ts.Debug.assert(templateExpression.kind === 183 );\r\n                    var argumentIndex = ts.isInsideTemplateLiteral(node, position) ? 0 : 1;\r\n                    return getArgumentListInfoForTemplate(tagExpression, argumentIndex);\r\n                }\r\n                else if (node.parent.kind === 190  && node.parent.parent.parent.kind === 170 ) {\r\n                    var templateSpan = node.parent;\r\n                    var templateExpression = templateSpan.parent;\r\n                    var tagExpression = templateExpression.parent;\r\n                    ts.Debug.assert(templateExpression.kind === 183 );\r\n                    if (node.kind === 14  && !ts.isInsideTemplateLiteral(node, position)) {\r\n                        return undefined;\r\n                    }\r\n                    var spanIndex = templateExpression.templateSpans.indexOf(templateSpan);\r\n                    var argumentIndex = getArgumentIndexForTemplatePiece(spanIndex, node);\r\n                    return getArgumentListInfoForTemplate(tagExpression, argumentIndex);\r\n                }\r\n                return undefined;\r\n            }","code-length":762,"reference":"Returns relevant information for the argument list and the current argument if we are","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction selectBestInvalidOverloadIndex(candidates, argumentCount) {\r\n                var maxParamsSignatureIndex = -1;\r\n                var maxParams = -1;\r\n                for (var i = 0; i < candidates.length; i++) {\r\n                    var candidate = candidates[i];\r\n                    if (candidate.hasRestParameter || candidate.parameters.length >= argumentCount) {\r\n                        return i;\r\n                    }\r\n                    if (candidate.parameters.length > maxParams) {\r\n                        maxParams = candidate.parameters.length;\r\n                        maxParamsSignatureIndex = i;\r\n                    }\r\n                }\r\n                return maxParamsSignatureIndex;\r\n            }","code-length":163,"reference":"The selectedItemIndex could be negative for several reasons.","result":"Select the best invalid overload index.","score":[0,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTokenAtPositionWorker(sourceFile, position, allowPositionInLeadingTrivia, includeItemAtEndPosition) {\r\n        var current = sourceFile;\r\n        outer: while (true) {\r\n            if (isToken(current)) {\r\n                return current;\r\n            }\r\n            for (var i = 0, n = current.getChildCount(sourceFile); i < n; i++) {\r\n                var child = current.getChildAt(i);\r\n                var start = allowPositionInLeadingTrivia ? child.getFullStart() : child.getStart(sourceFile);\r\n                if (start <= position) {\r\n                    var end = child.getEnd();\r\n                    if (position < end || (position === end && child.kind === 1 )) {\r\n                        current = child;\r\n                        continue outer;\r\n                    }\r\n                    else if (includeItemAtEndPosition && end === position) {\r\n                        var previousToken = findPrecedingToken(position, sourceFile, child);\r\n                        if (previousToken && includeItemAtEndPosition(previousToken)) {\r\n                            return previousToken;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return current;\r\n        }\r\n    }","code-length":292,"reference":"Get the token whose text contains the position","result":"Get tokens at position in a worker function .","score":[0.1449,0.1852]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findTokenOnLeftOfPosition(file, position) {\r\n        var tokenAtPosition = getTokenAtPosition(file, position);\r\n        if (isToken(tokenAtPosition) && position > tokenAtPosition.getStart(file) && position < tokenAtPosition.getEnd()) {\r\n            return tokenAtPosition;\r\n        }\r\n        return findPrecedingToken(position, file);\r\n    }","code-length":103,"reference":"The token on the left of the position is the token that strictly includes the positionor sits to the left of the cursor if it is on a boundary.","result":"Find the token on the left of the position.","score":[0.0739,0.2351]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getJsDocTagAtPosition(sourceFile, position) {\r\n        var node = ts.getTokenAtPosition(sourceFile, position);\r\n        if (isToken(node)) {\r\n            switch (node.kind) {\r\n                case 102 :\r\n                case 108 :\r\n                case 74 :\r\n                    node = node.parent === undefined ? undefined : node.parent.parent;\r\n                    break;\r\n                default:\r\n                    node = node.parent;\r\n                    break;\r\n            }\r\n        }\r\n        if (node) {\r\n            var jsDocComment = node.jsDocComment;\r\n            if (jsDocComment) {\r\n                for (var _i = 0, _a = jsDocComment.tags; _i < _a.length; _i++) {\r\n                    var tag = _a[_i];\r\n                    if (tag.pos <= position && position <= tag.end) {\r\n                        return tag;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }","code-length":257,"reference":"Get the corresponding JSDocTag node if the position is in a jsDoc comment","result":"Find jsDoc tag at position .","score":[0.0715,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stripQuotes(name) {\r\n        var length = name.length;\r\n        if (length >= 2 &&\r\n            name.charCodeAt(0) === name.charCodeAt(length - 1) &&\r\n            (name.charCodeAt(0) === 34  || name.charCodeAt(0) === 39 )) {\r\n            return name.substring(1, length - 1);\r\n        }\r\n        ;\r\n        return name;\r\n    }","code-length":118,"reference":"Strip off existed single quotes or double quotes from a given string\n\n","result":"Strip quotes from names.","score":[0.0677,0.2282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixTokenKind(tokenInfo, container) {\r\n                if (ts.isToken(container) && tokenInfo.token.kind !== container.kind) {\r\n                    tokenInfo.token.kind = container.kind;\r\n                }\r\n                return tokenInfo;\r\n            }","code-length":74,"reference":"when containing node in the tree is token but its kind differs from the kind that was returned by the scanner, then kind needs to be fixed. This might happen in cases when parser interprets token differently, i.e keyword treated as identifier","result":"Fix token kind .","score":[0.0,0.0262]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isListElement(parent, node) {\r\n            switch (parent.kind) {\r\n                case 214 :\r\n                case 215 :\r\n                    return ts.rangeContainsRange(parent.members, node);\r\n                case 218 :\r\n                    var body = parent.body;\r\n                    return body && body.kind === 192  && ts.rangeContainsRange(body.statements, node);\r\n                case 248 :\r\n                case 192 :\r\n                case 219 :\r\n                    return ts.rangeContainsRange(parent.statements, node);\r\n                case 244 :\r\n                    return ts.rangeContainsRange(parent.block.statements, node);\r\n            }\r\n            return false;\r\n        }","code-length":174,"reference":"Returns true if node is a element in some list in parent i.e. parent is class declaration with the list of members and node is one of members.","result":"Check if a list element is a list element.","score":[0.0275,0.1149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findEnclosingNode(range, sourceFile) {\r\n            return find(sourceFile);\r\n            function find(n) {\r\n                var candidate = ts.forEachChild(n, function (c) { return ts.startEndContainsRange(c.getStart(sourceFile), c.end, range) && c; });\r\n                if (candidate) {\r\n                    var result = find(candidate);\r\n                    if (result) {\r\n                        return result;\r\n                    }\r\n                }\r\n                return n;\r\n            }\r\n        }","code-length":136,"reference":"find node that fully contains given text range","result":"Find the node containing the given range.","score":[0.1665,0.2532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareRangeContainsErrorFunction(errors, originalRange) {\r\n            if (!errors.length) {\r\n                return rangeHasNoErrors;\r\n            }\r\n            var sorted = errors\r\n                .filter(function (d) { return ts.rangeOverlapsWithStartEnd(originalRange, d.start, d.start + d.length); })\r\n                .sort(function (e1, e2) { return e1.start - e2.start; });\r\n            if (!sorted.length) {\r\n                return rangeHasNoErrors;\r\n            }\r\n            var index = 0;\r\n            return function (r) {\r\n                while (true) {\r\n                    if (index >= sorted.length) {\r\n                        return false;\r\n                    }\r\n                    var error = sorted[index];\r\n                    if (r.end <= error.start) {\r\n                        return false;\r\n                    }\r\n                    if (ts.startEndOverlapsWithStartEnd(r.pos, r.end, error.start, error.start + error.length)) {\r\n                        return true;\r\n                    }\r\n                    index++;\r\n                }\r\n            };\r\n            function rangeHasNoErrors(r) {\r\n                return false;\r\n            }\r\n        }","code-length":308,"reference":"formatting is not applied to ranges that contain parse errors.","result":"Determine if a range contains error.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isInsideComment(sourceFile, token, position) {\r\n        return position <= token.getStart(sourceFile) &&\r\n            (isInsideCommentRange(ts.getTrailingCommentRanges(sourceFile.text, token.getFullStart())) ||\r\n            isInsideCommentRange(ts.getLeadingCommentRanges(sourceFile.text, token.getFullStart())));\r\n        function isInsideCommentRange(comments) {\r\n            return ts.forEach(comments, function (comment) {\r\n                if (comment.pos < position && position < comment.end) {\r\n                    return true;\r\n                }\r\n                else if (position === comment.end) {\r\n                    var text = sourceFile.text;\r\n                    var width = comment.end - comment.pos;\r\n                    }\r\n                    else {\r\n                        return !(text.charCodeAt(comment.end - 1) === 47  &&\r\n                        text.charCodeAt(comment.end - 2) === 42 );\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n    }","code-length":262,"reference":"Returns true if the position is within a comment","result":"Detect if a comment is inside a comment.","score":[0.2061,0.2247]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSemanticDiagnostics(fileName) {\r\n            synchronizeHostData();\r\n            var targetSourceFile = getValidSourceFile(fileName);\r\n            if (ts.isJavaScript(fileName)) {\r\n                return getJavaScriptSemanticDiagnostics(targetSourceFile);\r\n            }\r\n            var semanticDiagnostics = program.getSemanticDiagnostics(targetSourceFile, cancellationToken);\r\n            if (!program.getCompilerOptions().declaration) {\r\n                return semanticDiagnostics;\r\n            }\r\n            var declarationDiagnostics = program.getDeclarationDiagnostics(targetSourceFile, cancellationToken);\r\n            return ts.concatenate(semanticDiagnostics, declarationDiagnostics);\r\n        }","code-length":161,"reference":"getSemanticDiagnostiscs return array of Diagnostics. If '-d' is not enabled, only report semantic errors\nIf '-d' enabled, report both semantic and emitter errors","result":"Get the semantic diagnostics of a file.","score":[0.0195,0.0467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getCompletionEntryDisplayName(name, target, performCharacterChecks) {\r\n            if (!name) {\r\n                return undefined;\r\n            }\r\n            name = ts.stripQuotes(name);\r\n            if (!name) {\r\n                return undefined;\r\n            }\r\n            if (performCharacterChecks) {\r\n                if (!ts.isIdentifierStart(name.charCodeAt(0), target)) {\r\n                    return undefined;\r\n                }\r\n                for (var i = 1, n = name.length; i < n; i++) {\r\n                    if (!ts.isIdentifierPart(name.charCodeAt(i), target)) {\r\n                        return undefined;\r\n                    }\r\n                }\r\n            }\r\n            return name;\r\n        }","code-length":187,"reference":"Get a displayName from a given for completion list, performing any necessary quotes strippingand checking whether the name is valid identifier name.","result":"Get the completion entry display name.","score":[0.019,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getScopeNode(initialToken, position, sourceFile) {\r\n                var scope = initialToken;\r\n                while (scope && !ts.positionBelongsToNode(scope, position, sourceFile)) {\r\n                    scope = scope.parent;\r\n                }\r\n                return scope;\r\n            }","code-length":75,"reference":"accurately aggregate locals from the closest containing scope.","result":"Find the scope node.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tryGetObjectLikeCompletionSymbols(objectLikeContainer) {\r\n                isMemberCompletion = true;\r\n                var typeForObject;\r\n                var existingMembers;\r\n                if (objectLikeContainer.kind === 165 ) {\r\n                    isNewIdentifierLocation = true;\r\n                    typeForObject = typeChecker.getContextualType(objectLikeContainer);\r\n                    existingMembers = objectLikeContainer.properties;\r\n                }\r\n                else if (objectLikeContainer.kind === 161 ) {\r\n                    isNewIdentifierLocation = false;\r\n                    var rootDeclaration = ts.getRootDeclaration(objectLikeContainer.parent);\r\n                    if (ts.isVariableLike(rootDeclaration)) {\r\n                        if (rootDeclaration.initializer || rootDeclaration.type) {\r\n                            typeForObject = typeChecker.getTypeAtLocation(objectLikeContainer);\r\n                            existingMembers = objectLikeContainer.elements;\r\n                        }\r\n                    }\r\n                    else {\r\n                        ts.Debug.fail(\"Root declaration is not variable-like.\");\r\n                    }\r\n                }\r\n                else {\r\n                    ts.Debug.fail(\"Expected object literal or binding pattern, got \" + objectLikeContainer.kind);\r\n                }\r\n                if (!typeForObject) {\r\n                    return false;\r\n                }\r\n                var typeMembers = typeChecker.getPropertiesOfType(typeForObject);\r\n                if (typeMembers && typeMembers.length > 0) {\r\n                    symbols = filterObjectMembersList(typeMembers, existingMembers);\r\n                }\r\n                return true;\r\n            }","code-length":367,"reference":"Aggregates relevant symbols for completion in object literals and object binding patterns.\nRelevant symbols are stored in the captured 'symbols' variable.\n\n","result":"TryGetObjectLikeCompletionSymbols.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tryGetImportOrExportClauseCompletionSymbols(namedImportsOrExports) {\r\n                var declarationKind = namedImportsOrExports.kind === 225  ?\r\n                    222  :\r\n                    228 ;\r\n                var importOrExportDeclaration = ts.getAncestor(namedImportsOrExports, declarationKind);\r\n                var moduleSpecifier = importOrExportDeclaration.moduleSpecifier;\r\n                if (!moduleSpecifier) {\r\n                    return false;\r\n                }\r\n                isMemberCompletion = true;\r\n                isNewIdentifierLocation = false;\r\n                var exports;\r\n                var moduleSpecifierSymbol = typeChecker.getSymbolAtLocation(importOrExportDeclaration.moduleSpecifier);\r\n                if (moduleSpecifierSymbol) {\r\n                    exports = typeChecker.getExportsOfModule(moduleSpecifierSymbol);\r\n                }\r\n                symbols = exports ? filterNamedImportOrExportCompletionItems(exports, namedImportsOrExports.elements) : emptyArray;\r\n                return true;\r\n            }","code-length":228,"reference":"Aggregates relevant symbols for completion in import clauses and export clauses\nwhose declarations have a module specifier; for instance, symbols will be aggregated for\n\nimport { | } from \"moduleName\";\nexport { a as foo, | } from \"moduleName\";\n\nbut not for\n\nexport { | };\n\nRelevant symbols are stored in the captured 'symbols' variable.\n\n","result":"Export statements.","score":[0,0.0101]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tryGetObjectLikeCompletionContainer(contextToken) {\r\n                if (contextToken) {\r\n                    switch (contextToken.kind) {\r\n                        case 15 :\r\n                        case 24 :\r\n                            var parent_10 = contextToken.parent;\r\n                            if (parent_10 && (parent_10.kind === 165  || parent_10.kind === 161 )) {\r\n                                return parent_10;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n                return undefined;\r\n            }","code-length":131,"reference":"Returns the immediate owning object literal or binding pattern of a context token,on the condition that one exists and that the context implies completion should be given.","result":"Get object like completion container.","score":[0.0035,0.0403]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filterJsxAttributes(symbols, attributes) {\r\n                var seenNames = {};\r\n                for (var _i = 0; _i < attributes.length; _i++) {\r\n                    var attr = attributes[_i];\r\n                    if (attr.getStart() <= position && position <= attr.getEnd()) {\r\n                        continue;\r\n                    }\r\n                    if (attr.kind === 238 ) {\r\n                        seenNames[attr.name.text] = true;\r\n                    }\r\n                }\r\n                return ts.filter(symbols, function (a) { return !ts.lookUp(seenNames, a.name); });\r\n            }","code-length":162,"reference":"Filters out completion suggestions from 'symbols' according to existing JSX attributes.\n\n","result":"Filter jsx attributes .","score":[0,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isWriteAccess(node) {\r\n            if (node.kind === 69  && ts.isDeclarationName(node)) {\r\n                return true;\r\n            }\r\n            var parent = node.parent;\r\n            if (parent) {\r\n                if (parent.kind === 180  || parent.kind === 179 ) {\r\n                    return true;\r\n                }\r\n                else if (parent.kind === 181  && parent.left === node) {\r\n                    var operator = parent.operatorToken.kind;\r\n                    return 56  <= operator && operator <= 68 ;\r\n                }\r\n            }\r\n            return false;\r\n        }","code-length":161,"reference":"A node is considered a writeAccess iff it is a name of a declaration or a target of an assignment","result":"Check if node is a write access .","score":[0.0537,0.0798]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSignatureHelpItems(fileName, position) {\r\n            synchronizeHostData();\r\n            var sourceFile = getValidSourceFile(fileName);\r\n            return ts.SignatureHelp.getSignatureHelpItems(program, sourceFile, position, cancellationToken);\r\n        }","code-length":64,"reference":"Signature help ","result":"Generate the signature help items.","score":[0.2403,0.8152]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hasValueSideModule(symbol) {\r\n                    return ts.forEach(symbol.declarations, function (declaration) {\r\n                        return declaration.kind === 218  &&\r\n                            ts.getModuleInstanceState(declaration) === 1 ;\r\n                    });\r\n                }","code-length":70,"reference":"Returns true if there exists a module that introduces entities on the value side.","result":"Check if value side module is present.","score":[0.0782,0.1504]}
{"code":"\/*is used to<extra_id_0>\r\nfunction classifyTokenType(tokenKind, token) {\r\n                if (ts.isKeyword(tokenKind)) {\r\n                    return 3 ;\r\n                }\r\n                if (tokenKind === 25  || tokenKind === 27 ) {\r\n                    if (token && ts.getTypeArgumentOrTypeParameterList(token.parent)) {\r\n                        return 10 ;\r\n                    }\r\n                }\r\n                if (ts.isPunctuation(tokenKind)) {\r\n                    if (token) {\r\n                        if (tokenKind === 56 ) {\r\n                            if (token.parent.kind === 211  ||\r\n                                token.parent.kind === 141  ||\r\n                                token.parent.kind === 138 ) {\r\n                                return 5 ;\r\n                            }\r\n                        }\r\n                        if (token.parent.kind === 181  ||\r\n                            token.parent.kind === 179  ||\r\n                            token.parent.kind === 180  ||\r\n                            token.parent.kind === 182 ) {\r\n                            return 5 ;\r\n                        }\r\n                    }\r\n                    return 10 ;\r\n                }\r\n                else if (tokenKind === 8 ) {\r\n                    return 4 ;\r\n                }\r\n                else if (tokenKind === 9 ) {\r\n                    return 6 ;\r\n                }\r\n                else if (tokenKind === 10 ) {\r\n                    return 6 ;\r\n                }\r\n                else if (ts.isTemplateLiteralKind(tokenKind)) {\r\n                    return 6 ;\r\n                }\r\n                else if (tokenKind === 69 ) {\r\n                    if (token) {\r\n                        switch (token.parent.kind) {\r\n                            case 214 :\r\n                                if (token.parent.name === token) {\r\n                                    return 11 ;\r\n                                }\r\n                                return;\r\n                            case 137 :\r\n                                if (token.parent.name === token) {\r\n                                    return 15 ;\r\n                                }\r\n                                return;\r\n                            case 215 :\r\n                                if (token.parent.name === token) {\r\n                                    return 13 ;\r\n                                }\r\n                                return;\r\n                            case 217 :\r\n                                if (token.parent.name === token) {\r\n                                    return 12 ;\r\n                                }\r\n                                return;\r\n                            case 218 :\r\n                                if (token.parent.name === token) {\r\n                                    return 14 ;\r\n                                }\r\n                                return;\r\n                            case 138 :\r\n                                if (token.parent.name === token) {\r\n                                    return 17 ;\r\n                                }\r\n                                return;\r\n                        }\r\n                    }\r\n                    return 2 ;\r\n                }\r\n            }","code-length":629,"reference":"for accurate classification, the actual token should be passed in.  however, for cases like 'disabled merge code' classification, we just get the token kind and classify based on that instead.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getParametersFromRightHandSideOfAssignment(rightHandSide) {\r\n            while (rightHandSide.kind === 172 ) {\r\n                rightHandSide = rightHandSide.expression;\r\n            }\r\n            switch (rightHandSide.kind) {\r\n                case 173 :\r\n                case 174 :\r\n                    return rightHandSide.parameters;\r\n                case 186 :\r\n                    for (var _i = 0, _a = rightHandSide.members; _i < _a.length; _i++) {\r\n                        var member = _a[_i];\r\n                        if (member.kind === 144 ) {\r\n                            return member.parameters;\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n            return emptyArray;\r\n        }","code-length":190,"reference":"Digs into an an initializer or RHS operand of an assignment operation\nto get the parameters of an apt signature corresponding to a\nfunction expression or a class expression.\n\n","result":"Determine the parameters of an assignment to a variable.","score":[0.0565,0.2351]}
{"code":"\/*is used to<extra_id_0>\r\nfunction score(backend, errorBasis) {\r\n    if (typeof errorBasis !== \"number\" && !errorBasis)\r\n        errorBasis = Date.now();\r\n    const timeSinceError = (errorBasis - backend.lastError);\r\n    const statuses = backend.statuses;\r\n    const timeWeight = (backend.lastError === 0 && 0) ||\r\n        ((timeSinceError < 1000) && 1) ||\r\n        ((timeSinceError < 3000) && 0.8) ||\r\n        ((timeSinceError < 5000) && 0.3) ||\r\n        ((timeSinceError < 10000) && 0.1) ||\r\n        0;\r\n    if (statuses.length == 0)\r\n        return 0;\r\n    let requests = 0;\r\n    let errors = 0;\r\n    for (let i = 0; i < statuses.length; i++) {\r\n        const status = statuses[i];\r\n        if (status && !isNaN(status)) {\r\n            requests += 1;\r\n            if (status >= 500 && status < 600) {\r\n                errors += 1;\r\n            }\r\n        }\r\n    }\r\n    const score = (1 - (timeWeight * (errors \/ requests)));\r\n    backend.healthScore = score;\r\n    backend.scoredRequestCount = backend.requestCount;\r\n    return score;\r\n}","code-length":331,"reference":"compute a backend health score with time + status codes","result":"Calculate the health score of a health check.","score":[0.1693,0.1531]}
{"code":"\/*is used to<extra_id_0>\r\nasync function origin(req, init) {\r\n  const url = new URL(req.url)\r\n  const status = parseInt(url.searchParams.get('status') || '200')\r\n  if (status === 200) {\r\n    return new Response(`hello from ${req.url} on ${new Date()}`)\r\n  } else {\r\n    return new Response(`an error! Number ${status}`, { status: status })\r\n  }\r\n}","code-length":119,"reference":"This is just a basic origin http server thatlets us control status codes.","result":"Create a proxy for the origin request.","score":[0.0815,0.0806]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(element, transform, touch) {\r\n          var t = $drag.TRANSLATE_BOTH(element, transform, touch);\r\n          var Dx = touch.distanceX;\r\n          var t0 = touch.startTransform;\r\n          var sign = Dx < 0 ? -1 : 1;\r\n          var angle = sign * Math.min((Math.abs(Dx) \/ 700) * 30, 30);\r\n          t.rotateZ = angle + (Math.round(t0.rotateZ));\r\n          return t;\r\n        }","code-length":138,"reference":"This is an example of custom transform function","result":"Return transform.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(t) {\r\n        var absAngle = abs(t.angle);\r\n        absAngle = absAngle >= 90 ? absAngle - 90 : absAngle;\r\n        var validDistance = t.total - t.distance <= TURNAROUND_MAX;\r\n        var validAngle = absAngle <= ANGLE_THRESHOLD || absAngle >= 90 - ANGLE_THRESHOLD;\r\n        var validVelocity = t.averageVelocity >= VELOCITY_THRESHOLD;\r\n        return validDistance && validAngle && validVelocity;\r\n      }","code-length":132,"reference":"start to consider only if movement exceeded MOVEMENT_THRESHOLD","result":"Test if a function is used to test if a function is used to test if a function is not .","score":[0.0588,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(element, eventHandlers, options) {\r\n        options = angular.extend({}, defaultOptions, options || {});\r\n        return $touch.bind(element, eventHandlers, options);\r\n      }","code-length":55,"reference":"Bind swipe gesture handlers for an element.\n\n``` js\nvar unbind = $swipe.bind(elem, {\nend: function(touch) {\nconsole.log('Swiped:', touch.direction);\nunbind();\n}\n});\n```\n\n**Swipes Detection**\n\nBefore consider a touch to be a swipe Mobile Angular UI verifies that:\n\n1. Movement is quick. Average touch velocity should exceed a `VELOCITY_THRESHOLD`.\n2. Movement is linear.\n3. Movement has a clear, non-ambiguous direction. So we can assume without error\nthat underlying `touch.direction` is exactly the swipe direction. For that\nmovement is checked against an `ANGLE_THRESHOLD`.\n\n","result":"Bind the touch events.","score":[0.0,0.0202]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, c, t0, tl) {\r\n      t0 = t0 || {};\r\n      tl = tl || {};\r\n      var ts = now();\r\n      var ts0 = t0.timestamp || ts;\r\n      var tsl = tl.timestamp || ts0;\r\n      var x = c.x;\r\n      var y = c.y;\r\n      var x0 = t0.x || x;\r\n      var y0 = t0.y || y;\r\n      var xl = tl.x || x0;\r\n      var yl = tl.y || y0;\r\n      var totalXl = tl.totalX || 0;\r\n      var totalYl = tl.totalY || 0;\r\n      var totalX = totalXl + abs(x - xl);\r\n      var totalY = totalYl + abs(y - yl);\r\n      var total = len(totalX, totalY);\r\n      var duration = timediff(ts, ts0);\r\n      var durationl = timediff(ts, tsl);\r\n      var dxl = x - xl;\r\n      var dyl = y - yl;\r\n      var dl = len(dxl, dyl);\r\n      var dx = x - x0;\r\n      var dy = y - y0;\r\n      var d = len(dx, dy);\r\n      var v = durationl > 0 ? abs(dl \/ (durationl \/ 1000)) : 0;\r\n      var tv = duration > 0 ? abs(total \/ (duration \/ 1000)) : 0;\r\n      var dir = abs(dx) > abs(dy) ?\r\n        (dx < 0 ? 'LEFT' : 'RIGHT') :\r\n        (dy < 0 ? 'TOP' : 'BOTTOM');\r\n      var angle = dx !== 0 || dy !== 0 ? atan2(dy, dx) * (180 \/ Math.PI) : null;\r\n      angle = angle === -180 ? 180 : angle;\r\n      return {\r\n        type: type,\r\n        timestamp: ts,\r\n        duration: duration,\r\n        startX: x0,\r\n        startY: y0,\r\n        prevX: xl,\r\n        prevY: yl,\r\n        x: c.x,\r\n        y: c.y,\r\n        step: dl,\r\n        stepX: dxl,\r\n        stepY: dyl,\r\n        velocity: v,\r\n        averageVelocity: tv,\r\n        distance: d,\r\n        distanceX: dx,\r\n        distanceY: dy,\r\n        total: total,\r\n        totalX: totalX,\r\n        totalY: totalY,\r\n        direction: dir,\r\n        angle: angle\r\n      };\r\n    }","code-length":659,"reference":"`TouchInfo` is an object containing the following extended informations about any touch\nevent.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(event) {\r\n            if (event.touches && event.touches.length > 1) {\r\n              return;\r\n            }\r\n            tl = t0 = buildTouchInfo('touchstart', getCoordinates(event));\r\n            $movementTarget.on(moveEvents, onTouchMove);\r\n            $movementTarget.on(endEvents, onTouchEnd);\r\n            if (cancelEvents) {\r\n              $movementTarget.on(cancelEvents, onTouchCancel);\r\n            }\r\n            if (startEventHandler) {\r\n              startEventHandler(t0, event);\r\n            }\r\n          }","code-length":155,"reference":"Callbacks  on touchstart","result":"Prevent the browser from firing the touchstart event.","score":[0.1389,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(e) {\r\n      e = e.length ? e[0] : e;\r\n      var tr = window\r\n        .getComputedStyle(e, null)\r\n        .getPropertyValue(transformProperty);\r\n      return tr;\r\n    }","code-length":69,"reference":"return current element transform matrix in a cross-browser way","result":"Transform a DOM element.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(elem, value) {\r\n      elem = elem.length ? elem[0] : elem;\r\n      elem.style[styleProperty] = value;\r\n    }","code-length":49,"reference":"set current element transform matrix in a cross-browser way","result":"Set the value of the style property.","score":[0,0.1136]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(e, t) {\r\n        var str = (typeof t === 'string') ? t : this.toCss(t);\r\n        setElementTransformProperty(e, str);\r\n      }","code-length":54,"reference":"Recompose a transform from decomposition `t` and apply it to element `e`","result":"Create a new function.","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (_path) {\r\n  if (\/^((pre|post)?loader)s?\/ig.test(_path)) {\r\n    return _path.replace(\/^((pre|post)?loader)s?\/ig, 'module.$1s')\r\n  }\r\n  if (\/^(plugin)s?\/g.test(_path)) {\r\n    return _path.replace(\/^(plugin)s?\/g, '$1s')\r\n  }\r\n  return _path\r\n}","code-length":124,"reference":"loader.vue => module.loaders.vue","result":"Resolve paths.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPayload(token) {\r\n  const payloadBase64 = token\r\n    .split(\".\")[1]\r\n    .replace(\"-\", \"+\")\r\n    .replace(\"_\", \"\/\");\r\n  const payloadDecoded = base64.decode(payloadBase64);\r\n  const payloadObject = JSON.parse(payloadDecoded);\r\n  if (AV.isNumber(payloadObject.exp)) {\r\n    payloadObject.exp = new Date(payloadObject.exp * 1000);\r\n  }\r\n  return payloadObject;\r\n}","code-length":132,"reference":"Retrieves the payload from a JWT\n","result":"Get the payload object.","score":[0.274,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setChapterActive($chapter, hash) {\r\n    if (!$chapter && !hash) {\r\n        $chapter = $chapters.first();\r\n    }\r\n    if (!!hash) {\r\n        if ($chapters.length > 1) {\r\n            $chapter = $chapters.filter(function() {\r\n                var titleId = getChapterHash($(this));\r\n                return titleId == hash;\r\n            }).first();\r\n        }\r\n        else {\r\n            $chapter = $chapters.first();\r\n        }\r\n    }\r\n    if ($chapter.is($activeChapter)) {\r\n        return;\r\n    }\r\n    $activeChapter = $chapter;\r\n    $chapters.removeClass('active');\r\n    $chapter.addClass('active');\r\n    hash = getChapterHash($chapter);\r\n    var oldUri = window.location.pathname + window.location.hash,\r\n        uri = window.location.pathname + hash;\r\n    if (uri != oldUri) {\r\n        history.replaceState({ path: uri }, null, uri);\r\n    }\r\n}","code-length":285,"reference":"Set a chapter as active in summary and update state","result":"Set the active chapter of the chapter list.","score":[0.1423,0.1531]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getChapterHash($chapter) {\r\n    var $link = $chapter.children('a'),\r\n        hash = $link.attr('href').split('#')[1];\r\n    if (hash) hash = '#'+hash;\r\n    return (!!hash)? hash : '';\r\n}","code-length":78,"reference":"Return the hash of link for a chapter","result":"Get the chapter hash.","score":[0.1398,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleScrolling() {\r\n    var $scroller      = getScroller(),\r\n        scrollTop      = $scroller.scrollTop(),\r\n        scrollHeight   = $scroller.prop('scrollHeight'),\r\n        clientHeight   = $scroller.prop('clientHeight'),\r\n        nbChapters     = $chapters.length,\r\n        $chapter       = null;\r\n    $($chapters.get().reverse()).each(function(index) {\r\n        var titleId = getChapterHash($(this)),\r\n            titleTop;\r\n        if (!!titleId && !$chapter) {\r\n            titleTop = getElementTopPosition(titleId);\r\n            if (scrollTop >= titleTop) {\r\n                $chapter = $(this);\r\n            }\r\n        }\r\n        if (index == (nbChapters - 1) && !$chapter) {\r\n            $chapter = $(this);\r\n        }\r\n    });\r\n    if (!$chapter && !scrollTop) {\r\n        $chapter = $chapters.first();\r\n    }\r\n    if (!!scrollTop && (scrollHeight - scrollTop == clientHeight)) {\r\n        $chapter = $chapters.last();\r\n    }\r\n    setChapterActive($chapter);\r\n}","code-length":313,"reference":"Handle user scrolling","result":"Handle scrolling .","score":[0.4855,0.3333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction insertAt(parent, selector, index, element) {\r\n    var lastIndex = parent.children(selector).length;\r\n    if (index < 0) {\r\n        index = Math.max(0, lastIndex + 1 + index);\r\n    }\r\n    parent.append(element);\r\n    if (index < lastIndex) {\r\n        parent.children(selector).eq(index).before(parent.children(selector).last());\r\n    }\r\n}","code-length":116,"reference":"Insert a jquery element at a specific position","result":"Insert elements at the specified position.","score":[0.1645,0.3276]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createDropdownMenu(dropdown) {\r\n    var $menu = $('<div>', {\r\n        'class': 'dropdown-menu',\r\n        'html': '<div class=\"dropdown-caret\"><span class=\"caret-outer\"><\/span><span class=\"caret-inner\"><\/span><\/div>'\r\n    });\r\n    if (typeof dropdown == 'string') {\r\n        $menu.append(dropdown);\r\n    } else {\r\n        var groups = dropdown.map(function(group) {\r\n            if ($.isArray(group)) return group;\r\n            else return [group];\r\n        });\r\n        groups.forEach(function(group) {\r\n            var $group = $('<div>', {\r\n                'class': 'buttons'\r\n            });\r\n            var sizeClass = 'size-'+group.length;\r\n            group.forEach(function(btn) {\r\n                btn = $.extend({\r\n                    text: '',\r\n                    className: '',\r\n                    onClick: defaultOnClick\r\n                }, btn || {});\r\n                var $btn = $('<button>', {\r\n                    'class': 'button '+sizeClass+' '+btn.className,\r\n                    'text': btn.text\r\n                });\r\n                $btn.click(btn.onClick);\r\n                $group.append($btn);\r\n            });\r\n            $menu.append($group);\r\n        });\r\n    }\r\n    return $menu;\r\n}","code-length":356,"reference":"Create a dropdown menu","result":"Create a dropdown menu .","score":[0.7521,0.968]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createButton(opts) {\r\n    opts = $.extend({\r\n        label: '',\r\n        icon: '',\r\n        text: '',\r\n        position: 'left',\r\n        className: '',\r\n        onClick: defaultOnClick,\r\n        dropdown: null,\r\n        index: null,\r\n        id: generateId()\r\n    }, opts || {});\r\n    buttons.push(opts);\r\n    updateButton(opts);\r\n    return opts.id;\r\n}","code-length":124,"reference":"Create a new button in the toolbar","result":"Create a button.","score":[0.1522,0.2841]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeButton(id) {\r\n    buttons = $.grep(buttons, function(button) {\r\n        return button.id != id;\r\n    });\r\n    updateAllButtons();\r\n}","code-length":57,"reference":"Remove a button provided its id","result":"Remove buttons.","score":[0.0677,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeButtons(ids) {\r\n    buttons = $.grep(buttons, function(button) {\r\n        return ids.indexOf(button.id) == -1;\r\n    });\r\n    updateAllButtons();\r\n}","code-length":63,"reference":"Remove multiple buttons from an array of ids","result":"Remove buttons.","score":[0.0249,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toggleSidebar(_state, animation) {\r\n    if (gitbook.state != null && isOpen() == _state) return;\r\n    if (animation == null) animation = true;\r\n    gitbook.state.$book.toggleClass('without-animation', !animation);\r\n    gitbook.state.$book.toggleClass('with-summary', _state);\r\n    gitbook.storage.set('sidebar', isOpen());\r\n}","code-length":109,"reference":"Toggle sidebar with or withour animation","result":"Toggle the sidebar.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filterSummary(paths) {\r\n    var $summary = $('.book-summary');\r\n    $summary.find('li').each(function() {\r\n        var path = $(this).data('path');\r\n        var st = paths == null || paths.indexOf(path) !== -1;\r\n        $(this).toggle(st);\r\n        if (st) $(this).parents('li').show();\r\n    });\r\n}","code-length":111,"reference":"Filter summary with a list of path","result":"Filter summary.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction init() {\r\n    $(document).on('click', '.toggle-dropdown', toggleDropdown);\r\n    $(document).on('click', '.dropdown-menu', function(e){ e.stopPropagation(); });\r\n    $(document).on('click', closeDropdown);\r\n}","code-length":72,"reference":"Bind all dropdown","result":"Initialize the plugin.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction init() {\r\n    bindShortcut(['right'], function(e) {\r\n        navigation.goNext();\r\n    });\r\n    bindShortcut(['left'], function(e) {\r\n        navigation.goPrev();\r\n    });\r\n    bindShortcut(['s'], function(e) {\r\n        sidebar.toggle();\r\n    });\r\n}","code-length":93,"reference":"Bind keyboard shortcuts","result":"Initialize the plugin.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addDirective (type) {\r\n  return function (name, directive) {\r\n    if (typeof name === 'function') {\r\n      directive = name\r\n    }\r\n    if (typeof directive !== 'function') {\r\n      throw new TypeError('Directive must be a function')\r\n    }\r\n    name = typeof name === 'string'\r\n      ? name\r\n      : directive.name\r\n    if (!name) {\r\n      throw new TypeError('Directive function must have a name')\r\n    }\r\n    directive.$name = name\r\n    Toxy[type][name] = directive\r\n    return Toxy\r\n  }\r\n}","code-length":160,"reference":"Add directive helper.\n\n","result":"Add directives.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Directive (directive) {\r\n  Rule.call(this)\r\n  this.enabled = true\r\n  this.directive = directive\r\n  this.name = directive.$name || directive.name\r\n}","code-length":57,"reference":"Directive encapsulates a directive function providing convenient\nmethods and abstractions used by toxy higher layers to manage and configure directives.\n\n","result":"Define a directive.","score":[0.0014,0.0273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Toxy (opts) {\r\n  if (!(this instanceof Toxy)) return new Toxy(opts)\r\n  opts = Object.assign({}, Toxy.defaults, opts)\r\n  Proxy.call(this, opts)\r\n  this.routes = []\r\n  this._rules = midware()\r\n  this._inPoisons = midware()\r\n  this._outPoisons = midware()\r\n  setupMiddleware(this)\r\n}","code-length":117,"reference":"Creates a new Toxy HTTP proxy.\n\n","result":"Create a proxy for the Toxy instance.","score":[0.1921,0.4189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getModifiedConfigModuleIndex(fileStr, snakedEnv, classedEnv) {\r\n  const moduleFileAst = acorn.parse(fileStr, { module: true });\r\n  if (jp.paths(moduleFileAst, `$..[?(@.value==\".\/${classedEnv}\" && @.type==\"Literal\")]`).length > 0) {\r\n    return fileStr;\r\n  }\r\n  const envImportAst = acorn.parse(`const ${snakedEnv} = require('.\/${classedEnv}');`);\r\n  const insertAt = jp.paths(moduleFileAst, '$..[?(@.name==\"require\")]').pop()[2] + 1;\r\n  moduleFileAst.body.splice(insertAt, 0, envImportAst);\r\n  const exportsAt = jp.paths(moduleFileAst, '$..[?(@.name==\"exports\")]').pop()[2];\r\n  moduleFileAst.body[exportsAt].expression.right.properties.push(createExportNode(snakedEnv));\r\n  return escodegen.generate(moduleFileAst, { format: { indent: { style: '  ' } } });\r\n}","code-length":283,"reference":"Returns updated index module requiring and exporting the newly created environment.\n\n","result":"Detect modified config module index.","score":[0.0724,0.0481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(path) {\r\n    const data = fs.readFileSync(path, 'utf8');\r\n    const ast = esprima.parse(data);\r\n    const cssDialects = [\r\n      '\\\\.cssmodule\\\\.css$',\r\n      '^.((?!cssmodule).)*\\\\.css$'\r\n    ];\r\n    const preprocessorDialects = [\r\n      '\\\\.cssmodule\\\\.(sass|scss)$',\r\n      '^.((?!cssmodule).)*\\\\.(sass|scss)$',\r\n      '\\\\.cssmodule\\\\.less$',\r\n      '^.((?!cssmodule).)*\\\\.less$',\r\n      '\\\\.cssmodule\\\\.styl$',\r\n      '^.((?!cssmodule).)*\\\\.styl$'\r\n    ];\r\n    const postcssFunction = 'var postcss = { postcss: function() { return []; } }';\r\n    const postcssAst = esprima.parse(postcssFunction);\r\n    const postcss = postcssAst.body[0].declarations[0].init.properties[0];\r\n    const postcssLoaderObject = 'var postcss = [{ loader: \\'postcss-loader\\'}]';\r\n    const postcssLoaderAst = esprima.parse(postcssLoaderObject);\r\n    const postcssLoader = postcssLoaderAst.body[0].declarations[0].init.elements[0];\r\n    walk.walkAddParent(ast, (node) => {\r\n      if(\r\n        node.type === 'MethodDefinition' &&\r\n        node.key.name === 'defaultSettings'\r\n      ) {\r\n        const returnStatement = node.value.body.body[1];\r\n        returnStatement.argument.properties.push(postcss);\r\n      }\r\n      if(\r\n        node.type === 'Property' &&\r\n        node.key.type === 'Identifier' &&\r\n        node.key.name === 'test' &&\r\n        typeof node.value.regex !== 'undefined'\r\n      ) {\r\n        if(cssDialects.indexOf(node.value.regex.pattern) !== -1) {\r\n          const loaderData = node.parent.properties[1];\r\n          loaderData.value.elements.push(postcssLoader);\r\n        }\r\n        if(preprocessorDialects.indexOf(node.value.regex.pattern) !== -1) {\r\n          const loaderData = node.parent.properties[1];\r\n          const lastElm = loaderData.value.elements.pop();\r\n          loaderData.value.elements.push(postcssLoader);\r\n          loaderData.value.elements.push(lastElm);\r\n        }\r\n      }\r\n    });\r\n    const finalCode = escodegen.generate(ast, {\r\n      format: {\r\n        indent: {\r\n          adjustMultilineComment: true,\r\n          style: '  '\r\n        }\r\n      },\r\n      comment: true\r\n    });\r\n    fs.writeFileSync(path, finalCode, 'utf8');\r\n  }","code-length":723,"reference":"Add postcss support to the given webpack base configuration object\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Metadata (options, controlConnection) {\r\n  if (!options) {\r\n    throw new errors.ArgumentError('Options are not defined');\r\n  }\r\n  Object.defineProperty(this, 'options', { value: options, enumerable: false, writable: false});\r\n  Object.defineProperty(this, 'controlConnection', { value: controlConnection, enumerable: false, writable: false});\r\n  this.keyspaces = {};\r\n  this.initialized = false;\r\n  this._schemaParser = schemaParserFactory.getByVersion(options, controlConnection, this.getUdt.bind(this));\r\n  const self = this;\r\n  this._preparedQueries = new PreparedQueries(options.maxPrepared, function () {\r\n    self.log.apply(self, arguments);\r\n  });\r\n}","code-length":198,"reference":"Represents cluster and schema information.\nThe metadata class acts as a internal state of the driver.\n","result":"Create a new instance of Metadata.","score":[0.0434,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkUdtTypes(type) {\r\n    if (type.code === types.dataTypes.udt) {\r\n      const udtName = type.info.split('.');\r\n      type.info = {\r\n        keyspace: udtName[0],\r\n        name: udtName[1]\r\n      };\r\n      if (!type.info.name) {\r\n        if (!keyspace) {\r\n          throw new TypeError('No keyspace specified for udt: ' + udtName.join('.'));\r\n        }\r\n        type.info.name = type.info.keyspace;\r\n        type.info.keyspace = keyspace;\r\n      }\r\n      udts.push(type);\r\n      return;\r\n    }\r\n    if (!type.info) {\r\n      return;\r\n    }\r\n    if (type.code === types.dataTypes.list || type.code === types.dataTypes.set) {\r\n      return checkUdtTypes(type.info);\r\n    }\r\n    if (type.code === types.dataTypes.map) {\r\n      checkUdtTypes(type.info[0]);\r\n      checkUdtTypes(type.info[1]);\r\n    }\r\n  }","code-length":304,"reference":"check for udts and get the metadata","result":"Check if a type is a udt.","score":[0,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PreparedQueries(maxPrepared, logger) {\r\n  this.length = 0;\r\n  this._maxPrepared = maxPrepared;\r\n  this._mapByKey = {};\r\n  this._mapById = {};\r\n  this._logger = logger;\r\n}","code-length":71,"reference":"Allows to store prepared queries and retrieval by query or query id.\n","result":"Create a query.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction DriverError (message) {\r\n  Error.call(this, message);\r\n  Error.captureStackTrace(this, this.constructor);\r\n  this.name = this.constructor.name;\r\n  this.info = 'Cassandra Driver Error';\r\n  this.message = message;\r\n}","code-length":79,"reference":"Contains the error classes exposed by the driver.\n","result":"Create DriverError objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction NoHostAvailableError(innerErrors, message) {\r\n  DriverError.call(this, message);\r\n  this.innerErrors = innerErrors;\r\n  this.info = 'Represents an error when a query cannot be performed because no host is available or could be reached by the driver.';\r\n  if (!message) {\r\n    this.message = 'All host(s) tried for query failed.';\r\n    if (innerErrors) {\r\n      const hostList = Object.keys(innerErrors);\r\n      if (hostList.length > 0) {\r\n        const host = hostList[0];\r\n        this.message += util.format(' First host tried, %s: %s. See innerErrors.', host, innerErrors[host]);\r\n      }\r\n    }\r\n  }\r\n}","code-length":198,"reference":"Represents an error when a query cannot be performed because no host is available or could be reached by the driver.\n","result":"Construct the error object.","score":[0.0054,0.0518]}
{"code":"\/*is used to<extra_id_0>\r\nfunction BusyConnectionError(address, maxRequestsPerConnection, connectionLength) {\r\n  const message = util.format('All connections to host %s are busy, %d requests are in-flight on %s',\r\n    address, maxRequestsPerConnection, connectionLength === 1 ? 'a single connection': 'each connection');\r\n  DriverError.call(this, message, this.constructor);\r\n  this.info = 'Represents a client-side error indicating that all connections to a certain host have reached ' +\r\n    'the maximum amount of in-flight requests supported (pooling.maxRequestsPerConnection)';\r\n}","code-length":148,"reference":"Represents a client-side error indicating that all connections to a certain host have reached\nthe maximum amount of in-flight requests supported.\n","result":"Avoid the use of the constructor.","score":[0.0188,0.0513]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extend(baseOptions, userOptions) {\r\n  if (arguments.length === 1) {\r\n    userOptions = arguments[0];\r\n    baseOptions = {};\r\n  }\r\n  const options = utils.deepExtend(baseOptions, defaultOptions(), userOptions);\r\n  if (!util.isArray(options.contactPoints) || options.contactPoints.length === 0) {\r\n    throw new TypeError('Contacts points are not defined.');\r\n  }\r\n  for (let i = 0; i < options.contactPoints.length; i++) {\r\n    const hostName = options.contactPoints[i];\r\n    if (!hostName) {\r\n      throw new TypeError(util.format('Contact point %s (%s) is not a valid host name, ' +\r\n        'the following values are valid contact points: ipAddress, hostName or ipAddress:port', i, hostName));\r\n    }\r\n  }\r\n  if (!options.logEmitter) {\r\n    options.logEmitter = function () {};\r\n  }\r\n  if (!options.queryOptions) {\r\n    throw new TypeError('queryOptions not defined in options');\r\n  }\r\n  if (options.requestTracker !== null && !(options.requestTracker instanceof tracker.RequestTracker)) {\r\n    throw new TypeError('requestTracker must be an instance of RequestTracker');\r\n  }\r\n  if (!(options.metrics instanceof metrics.ClientMetrics)) {\r\n    throw new TypeError('metrics must be an instance of ClientMetrics');\r\n  }\r\n  validatePoliciesOptions(options.policies);\r\n  validateProtocolOptions(options.protocolOptions);\r\n  validateSocketOptions(options.socketOptions);\r\n  options.encoding = options.encoding || {};\r\n  validateEncodingOptions(options.encoding);\r\n  if (options.profiles && !util.isArray(options.profiles)) {\r\n    throw new TypeError('profiles must be an Array of ExecutionProfile instances');\r\n  }\r\n  return options;\r\n}","code-length":466,"reference":"Extends and validates the user options\n","result":"Function defaultOptions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validatePoliciesOptions(policiesOptions) {\r\n  if (!policiesOptions) {\r\n    throw new TypeError('policies not defined in options');\r\n  }\r\n  if (!(policiesOptions.loadBalancing instanceof policies.loadBalancing.LoadBalancingPolicy)) {\r\n    throw new TypeError('Load balancing policy must be an instance of LoadBalancingPolicy');\r\n  }\r\n  if (!(policiesOptions.reconnection instanceof policies.reconnection.ReconnectionPolicy)) {\r\n    throw new TypeError('Reconnection policy must be an instance of ReconnectionPolicy');\r\n  }\r\n  if (!(policiesOptions.retry instanceof policies.retry.RetryPolicy)) {\r\n    throw new TypeError('Retry policy must be an instance of RetryPolicy');\r\n  }\r\n  if (!(policiesOptions.addressResolution instanceof policies.addressResolution.AddressTranslator)) {\r\n    throw new TypeError('Address resolution policy must be an instance of AddressTranslator');\r\n  }\r\n  if (policiesOptions.timestampGeneration !== null &&\r\n    !(policiesOptions.timestampGeneration instanceof policies.timestampGeneration.TimestampGenerator)) {\r\n    throw new TypeError('Timestamp generation policy must be an instance of TimestampGenerator');\r\n  }\r\n}","code-length":279,"reference":"Validates the policies from the client options.\n","result":"Validate the options.","score":[0.128,0.2273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateProtocolOptions(protocolOptions) {\r\n  if (!protocolOptions) {\r\n    throw new TypeError('protocolOptions not defined in options');\r\n  }\r\n  const version = protocolOptions.maxVersion;\r\n  if (version && (typeof version !== 'number' || !types.protocolVersion.isSupported(version))) {\r\n    throw new TypeError(util.format('protocolOptions.maxVersion provided (%s) is invalid', version));\r\n  }\r\n}","code-length":116,"reference":"Validates the protocol options.\n","result":"Validate the protocol options.","score":[0.658,0.9922]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateSocketOptions(socketOptions) {\r\n  if (!socketOptions) {\r\n    throw new TypeError('socketOptions not defined in options');\r\n  }\r\n  if (typeof socketOptions.readTimeout !== 'number') {\r\n    throw new TypeError('socketOptions.readTimeout must be a Number');\r\n  }\r\n  if (typeof socketOptions.coalescingThreshold !== 'number' || socketOptions.coalescingThreshold <= 0) {\r\n    throw new TypeError('socketOptions.coalescingThreshold must be a positive Number');\r\n  }\r\n}","code-length":141,"reference":"Validates the socket options.\n","result":"Validate socket options.","score":[0.4137,0.6553]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateEncodingOptions(encodingOptions) {\r\n  if (encodingOptions.map) {\r\n    const mapConstructor = encodingOptions.map;\r\n    if (typeof mapConstructor !== 'function' ||\r\n      typeof mapConstructor.prototype.forEach !== 'function' ||\r\n      typeof mapConstructor.prototype.set !== 'function') {\r\n      throw new TypeError('Map constructor not valid');\r\n    }\r\n  }\r\n  if (encodingOptions.set) {\r\n    const setConstructor = encodingOptions.set;\r\n    if (typeof setConstructor !== 'function' ||\r\n      typeof setConstructor.prototype.forEach !== 'function' ||\r\n      typeof setConstructor.prototype.add !== 'function') {\r\n      throw new TypeError('Set constructor not valid');\r\n    }\r\n  }\r\n  if ((encodingOptions.useBigIntAsLong || encodingOptions.useBigIntAsVarint) && typeof BigInt === 'undefined') {\r\n    throw new TypeError('BigInt is not supported by the JavaScript engine');\r\n  }\r\n}","code-length":248,"reference":"Validates the encoding options.\n","result":"Validate the encoding options.","score":[0.658,0.9922]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setProtocolDependentDefaults(options, version) {\r\n  let coreConnectionsPerHost = coreConnectionsPerHostV3;\r\n  let maxRequestsPerConnection = maxRequestsPerConnectionV3;\r\n  if (!types.protocolVersion.uses2BytesStreamIds(version)) {\r\n    coreConnectionsPerHost = coreConnectionsPerHostV2;\r\n    maxRequestsPerConnection = maxRequestsPerConnectionV2;\r\n  }\r\n  options.pooling = utils.deepExtend({}, { coreConnectionsPerHost, maxRequestsPerConnection }, options.pooling);\r\n}","code-length":138,"reference":"Sets the default options that depend on the protocol version.\n","result":"Set the default pooling options.","score":[0.125,0.1579]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name) {\r\n    name = name.toLowerCase();\r\n    if (name.indexOf('<') > 0) {\r\n      const listMatches = \/^(list|set)<(.+)>$\/.exec(name);\r\n      if (listMatches) {\r\n        return { code: this[listMatches[1]], info: this.getByName(listMatches[2])};\r\n      }\r\n      const mapMatches = \/^(map)< *(.+) *, *(.+)>$\/.exec(name);\r\n      if (mapMatches) {\r\n        return { code: this[mapMatches[1]], info: [this.getByName(mapMatches[2]), this.getByName(mapMatches[3])]};\r\n      }\r\n      const udtMatches = \/^(udt)<(.+)>$\/.exec(name);\r\n      if (udtMatches) {\r\n        return { code: this[udtMatches[1]], info: udtMatches[2]};\r\n      }\r\n      const tupleMatches = \/^(tuple)<(.+)>$\/.exec(name);\r\n      if (tupleMatches) {\r\n        return { code: this[tupleMatches[1]], info: tupleMatches[2].split(',').map(function (x) {\r\n          return this.getByName(x.trim());\r\n        }, this)};\r\n      }\r\n    }\r\n    const typeInfo = { code: this[name], info: null};\r\n    if (typeof typeInfo.code !== 'number') {\r\n      throw new TypeError('Data type with name ' + name + ' not valid');\r\n    }\r\n    return typeInfo;\r\n  }","code-length":396,"reference":"Returns the typeInfo of a given type name\n","result":"Get the data type by name .","score":[0.1843,0.1899]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDataTypeNameByCode(item) {\r\n  if (!item || typeof item.code !== 'number') {\r\n    throw new errors.ArgumentError('Invalid signature type definition');\r\n  }\r\n  const typeName = _dataTypesByCode[item.code];\r\n  if (!typeName) {\r\n    throw new errors.ArgumentError(util.format('Type with code %d not found', item.code));\r\n  }\r\n  if (!item.info) {\r\n    return typeName;\r\n  }\r\n  if (util.isArray(item.info)) {\r\n    return (typeName +\r\n      '<' +\r\n      item.info.map(function (t) {\r\n        return getDataTypeNameByCode(t);\r\n      }).join(', ') +\r\n      '>');\r\n  }\r\n  if (typeof item.info.code === 'number') {\r\n    return typeName + '<' + getDataTypeNameByCode(item.info) + '>';\r\n  }\r\n  return typeName;\r\n}","code-length":249,"reference":"Gets the data type name for a given type definition\n","result":"Generate the signature type name.","score":[0.1051,0.1053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FrameHeader(version, flags, streamId, opcode, bodyLength) {\r\n  this.version = version;\r\n  this.flags = flags;\r\n  this.streamId = streamId;\r\n  this.opcode = opcode;\r\n  this.bodyLength = bodyLength;\r\n}","code-length":77,"reference":"classes \nRepresents a frame header that could be used to read from a Buffer or to write to a Buffer\n","result":"Create a new frame.","score":[0.0059,0.0272]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateTimestamp(date, microseconds) {\r\n  if (!date) {\r\n    date = new Date();\r\n  }\r\n  let longMicro = Long.ZERO;\r\n  if (typeof microseconds === 'number' && microseconds >= 0 && microseconds < 1000) {\r\n    longMicro = Long.fromInt(microseconds);\r\n  }\r\n  else {\r\n    if (_timestampTicks > 999) {\r\n      _timestampTicks = 0;\r\n    }\r\n    longMicro = Long.fromInt(_timestampTicks);\r\n    _timestampTicks++;\r\n  }\r\n  return Long\r\n    .fromNumber(date.getTime())\r\n    .multiply(_longOneThousand)\r\n    .add(longMicro);\r\n}","code-length":186,"reference":"Generates a value representing the timestamp for the query in microseconds based on the date and the microseconds provided\n","result":"Generate timestamps.","score":[0,0.0289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MutableLong(b00, b16, b32, b48) {\r\n  this._arr = [ b00 & 0xffff, b16 & 0xffff, b32 & 0xffff, b48 & 0xffff ];\r\n}","code-length":62,"reference":"Constructs a signed int64 representation.\n","result":"Store the values in a mutable array.","score":[0.1615,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Aggregate() {\r\n    this.name = null;\r\n    this.keyspaceName = null;\r\n    this.signature = null;\r\n    this.argumentTypes = null;\r\n    this.stateFunction = null;\r\n    this.stateType = null;\r\n    this.finalFunction = null;\r\n  this.initConditionRaw = null;\r\n    this.initCondition = null;\r\n    this.returnType = null;\r\n}","code-length":116,"reference":"Creates a new Aggregate.\n","result":"Create the aggregate class.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Host(address, protocolVersion, options, metadata) {\r\n  events.EventEmitter.call(this);\r\n    this.address = address;\r\n  this.setDownAt = 0;\r\n    this.isUpSince = null;\r\n  Object.defineProperty(this, 'options', { value: options, enumerable: false, writable: false});\r\n    Object.defineProperty(this, 'pool', { value: new HostConnectionPool(this, protocolVersion), enumerable: false});\r\n  const self = this;\r\n  this.pool.on('open', this._onNewConnectionOpen.bind(this));\r\n  this.pool.on('remove', function onConnectionRemovedFromPool() {\r\n    self._checkPoolState();\r\n  });\r\n    this.cassandraVersion = null;\r\n    this.datacenter = null;\r\n    this.rack = null;\r\n    this.tokens = null;\r\n    this.hostId = null;\r\n  this._distance = types.distance.ignored;\r\n  this._healthResponseCounter = 0;\r\n  Object.defineProperty(this, '_metadata', { value: metadata, enumerable: false });\r\n  Object.defineProperty(this, '_healthResponseCountTimer', { value: null, enumerable: false, writable: true });\r\n  this.reconnectionSchedule = this.options.policies.reconnection.newSchedule();\r\n  this.reconnectionDelay = 0;\r\n}","code-length":341,"reference":"Creates a new Host instance.\n","result":"Create a new host object.","score":[0.3398,0.7938]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ConstantSpeculativeExecutionPolicy(delay, maxSpeculativeExecutions) {\r\n  if (!(delay >= 0)) {\r\n    throw new errors.ArgumentError('delay must be a positive number or zero');\r\n  }\r\n  if (!(maxSpeculativeExecutions > 0)) {\r\n    throw new errors.ArgumentError('maxSpeculativeExecutions must be a positive number');\r\n  }\r\n  this._delay = delay;\r\n  this._maxSpeculativeExecutions = maxSpeculativeExecutions;\r\n}","code-length":129,"reference":"Creates a new instance of ConstantSpeculativeExecutionPolicy.\n","result":"Create a policy for the constant speculative execution.","score":[0.1389,0.3024]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MaterializedView(name) {\r\n  DataCollection.call(this, name);\r\n    this.tableName = null;\r\n    this.whereClause = null;\r\n    this.includeAllColumns = false;\r\n}","code-length":62,"reference":"Creates a new MaterializedView.\n","result":"Create a view.","score":[0.2925,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction DataCollection(name) {\r\n  events.EventEmitter.call(this);\r\n  this.setMaxListeners(0);\r\n  Object.defineProperty(this, 'loading', { value: false, enumerable: false, writable: true });\r\n  Object.defineProperty(this, 'loaded', { value: false, enumerable: false, writable: true });\r\n    this.name = name;\r\n    this.bloomFilterFalsePositiveChance = 0;\r\n    this.caching = null;\r\n    this.comment = null;\r\n    this.gcGraceSeconds = 0;\r\n    this.compactionClass = null;\r\n    this.compactionOptions = null;\r\n    this.compression = null;\r\n    this.localReadRepairChance = 0;\r\n    this.readRepairChance = 0;\r\n    this.extensions = null;\r\n    this.crcCheckChance = null;\r\n    this.populateCacheOnFlush = false;\r\n    this.defaultTtl = 0;\r\n    this.speculativeRetry = 'NONE';\r\n    this.minIndexInterval = 128;\r\n    this.maxIndexInterval = 2048;\r\n    this.columns = null;\r\n    this.columnsByName = null;\r\n    this.partitionKeys = [];\r\n    this.clusteringKeys = [];\r\n    this.clusteringOrder = [];\r\n}","code-length":335,"reference":"Creates a new instance of DataCollection\n","result":"Create a new data collection.","score":[0.2782,0.4991]}
{"code":"\/*is used to<extra_id_0>\r\nasync function example() {\r\n  await client.connect();\r\n  await client.execute(`CREATE KEYSPACE IF NOT EXISTS examples\r\n                        WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1' }`);\r\n  await client.execute(`USE examples`);\r\n  await client.execute(`CREATE TABLE IF NOT EXISTS tbl_sample_kv (id uuid, value text, PRIMARY KEY (id))`);\r\n  const concurrencyLevel = 32;\r\n  const promises = new Array(concurrencyLevel);\r\n  const info = {\r\n    totalLength: 10000,\r\n    counter: 0\r\n  };\r\n  for (let i = 0; i < concurrencyLevel; i++) {\r\n    promises[i] = executeOneAtATime(info);\r\n  }\r\n  try {\r\n    await Promise.all(promises);\r\n    console.log(`Finished executing ${info.totalLength} queries with a concurrency level of ${concurrencyLevel}.`);\r\n  } finally {\r\n    client.shutdown();\r\n  }\r\n}","code-length":259,"reference":"Inserts multiple rows in a table limiting the amount of parallel requests.","result":"Run the example .","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TableMetadata(name) {\r\n  DataCollection.call(this, name);\r\n    this.replicateOnWrite = true;\r\n    this.memtableFlushPeriod = 0;\r\n    this.indexInterval = null;\r\n    this.isCompact = false;\r\n    this.indexes = null;\r\n    this.cdc = null;\r\n    this.virtual = false;\r\n}","code-length":104,"reference":"Creates a new instance of TableMetadata\n","result":"Create the table metadata.","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SchemaParserV1(options, cc) {\r\n  SchemaParser.call(this, options, cc);\r\n  this.selectTable = _selectTableV1;\r\n  this.selectColumns = _selectColumnsV1;\r\n  this.selectUdt = _selectUdtV1;\r\n  this.selectAggregates = _selectAggregatesV1;\r\n  this.selectFunctions = _selectFunctionsV1;\r\n}","code-length":109,"reference":"Used to parse schema information for Cassandra versions 1.2.x, and 2.x\n","result":"Generate the schema parser version .","score":[0.0839,0.0952]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SchemaParserV2(options, cc, udtResolver) {\r\n  SchemaParser.call(this, options, cc);\r\n  this.udtResolver = udtResolver;\r\n  this.selectTable = _selectTableV2;\r\n  this.selectColumns = _selectColumnsV2;\r\n  this.selectUdt = _selectUdtV2;\r\n  this.selectAggregates = _selectAggregatesV2;\r\n  this.selectFunctions = _selectFunctionsV2;\r\n  this.selectIndexes = _selectIndexesV2;\r\n}","code-length":140,"reference":"Used to parse schema information for Cassandra versions 3.x and above\n","result":"Support legacy versions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SchemaParserV3(options, cc, udtResolver) {\r\n  SchemaParserV2.call(this, options, cc, udtResolver);\r\n  this.supportsVirtual = true;\r\n}","code-length":57,"reference":"Used to parse schema information for Cassandra versions 4.x and above.\n\nThis parser similar to [SchemaParserV2] expect it also parses virtual\nkeyspaces.\n\n","result":"Parse the schema.","score":[0,0.0249]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getByVersion(options, cc, udtResolver, version, currentInstance) {\r\n  let parserConstructor = SchemaParserV1;\r\n  if (version && version[0] === 3) {\r\n    parserConstructor = SchemaParserV2;\r\n  } else if (version && version[0] >= 4) {\r\n    parserConstructor = SchemaParserV3;\r\n  }\r\n  if (!currentInstance || !(currentInstance instanceof parserConstructor)){\r\n    return new parserConstructor(options, cc, udtResolver);\r\n  }\r\n  return currentInstance;\r\n}","code-length":144,"reference":"Creates a new instance if the currentInstance is not valid for the\nprovided Cassandra version\n","result":"Create a new instance of SchemaParserV.","score":[0.0887,0.2815]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encodeRoutingKey(fromUser) {\r\n    const encoder = self._getEncoder();\r\n    try {\r\n      if (fromUser) {\r\n        encoder.setRoutingKeyFromUser(params, execOptions);\r\n      } else {\r\n        encoder.setRoutingKeyFromMeta(meta, params, execOptions);\r\n      }\r\n    }\r\n    catch (err) {\r\n      return callback(err);\r\n    }\r\n    callback();\r\n  }","code-length":120,"reference":"Wrapper function as encoding a routing key could throw a TypeError","result":"Encode routing key.","score":[0.0284,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getJsFiles(dir, fileArray) {\r\n  const files = fs.readdirSync(dir);\r\n  fileArray = fileArray || [];\r\n  files.forEach(function(file) {\r\n    if (file === 'node_modules') {\r\n      return;\r\n    }\r\n    if (fs.statSync(dir + file).isDirectory()) {\r\n      getJsFiles(dir + file + '\/', fileArray);\r\n      return;\r\n    }\r\n    if (file.substring(file.length-3, file.length) !== '.js') {\r\n      return;\r\n    }\r\n    fileArray.push(dir+file);\r\n  });\r\n  return fileArray;\r\n}","code-length":182,"reference":"This script is used to check that the samples run correctly.","result":"Get the js files from the node.","score":[0.0912,0.0472]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SchemaFunction() {\r\n    this.name = null;\r\n    this.keyspaceName = null;\r\n    this.signature = null;\r\n    this.argumentNames = null;\r\n    this.argumentTypes = null;\r\n    this.body = null;\r\n    this.calledOnNullInput = null;\r\n    this.language = null;\r\n    this.returnType = null;\r\n}","code-length":106,"reference":"Creates a new SchemaFunction.\n","result":"Create the function.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyBuffer(buf) {\r\n  const targetBuffer = allocBufferUnsafe(buf.length);\r\n  buf.copy(targetBuffer);\r\n  return targetBuffer;\r\n}","code-length":51,"reference":"Creates a copy of a buffer","result":"Copy buffer.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixStack(stackTrace, error) {\r\n  if (stackTrace) {\r\n    error.stack += '\\n  (event loop)\\n' + stackTrace.substr(stackTrace.indexOf(\"\\n\") + 1);\r\n  }\r\n  return error;\r\n}","code-length":72,"reference":"Appends the original stack trace to the error after a tick of the event loop","result":"Fix stack traces.","score":[0.0075,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction log(type, info, furtherInfo) {\r\n  if (!this.logEmitter) {\r\n    if (!this.options || !this.options.logEmitter) {\r\n      throw new Error('Log emitter not defined');\r\n    }\r\n    this.logEmitter = this.options.logEmitter;\r\n  }\r\n  this.logEmitter('log', type, this.constructor.name, info, furtherInfo || '');\r\n}","code-length":111,"reference":"Uses the logEmitter to emit log events\n","result":"Log to the console.","score":[0.1795,0.2239]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toLowerCaseProperties(obj) {\r\n  const keys = Object.keys(obj);\r\n  const result = {};\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const k = keys[i];\r\n    result[k.toLowerCase()] = obj[k];\r\n  }\r\n  return result;\r\n}","code-length":94,"reference":"Returns a new object with the property names set to lowercase.","result":"ToLowerCase properties.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deepExtend(target) {\r\n  const sources = Array.prototype.slice.call(arguments, 1);\r\n  sources.forEach(function (source) {\r\n    for (const prop in source) {\r\n      if (!source.hasOwnProperty(prop)) {\r\n        continue;\r\n      }\r\n      const targetProp = target[prop];\r\n      const targetType = (typeof targetProp);\r\n      if (!targetProp ||\r\n        targetType === 'number' ||\r\n        targetType === 'string' ||\r\n        util.isArray(targetProp) ||\r\n        util.isDate(targetProp) ||\r\n        targetProp.constructor.name !== 'Object') {\r\n        target[prop] = source[prop];\r\n      }\r\n      else {\r\n        target[prop] = deepExtend({}, targetProp, source[prop]);\r\n      }\r\n    }\r\n  });\r\n  return target;\r\n}","code-length":227,"reference":"Extends the target by the most inner props of sources\n","result":"Create deepExtend function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayIterator (arr) {\r\n  let index = 0;\r\n  return { next : function () {\r\n    if (index >= arr.length) {\r\n      return {done: true};\r\n    }\r\n    return {value: arr[index++], done: false };\r\n  }};\r\n}","code-length":84,"reference":"Uses the iterator protocol to go through the items of the Array\n","result":"Iterate over an array.","score":[0,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction iteratorToArray(iterator) {\r\n  const values = [];\r\n  let item = iterator.next();\r\n  while (!item.done) {\r\n    values.push(item.value);\r\n    item = iterator.next();\r\n  }\r\n  return values;\r\n}","code-length":77,"reference":"Convert the iterator values into an array\n","result":"Create a new iterator.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction binarySearch(arr, key, compareFunc) {\r\n  let low = 0;\r\n  let high = arr.length-1;\r\n  while (low <= high) {\r\n    const mid = (low + high) >>> 1;\r\n    const midVal = arr[mid];\r\n    const cmp = compareFunc(midVal, key);\r\n    if (cmp < 0) {\r\n      low = mid + 1;\r\n    }\r\n    else if (cmp > 0) {\r\n      high = mid - 1;\r\n    }\r\n    else\r\n    {\r\n      return mid;\r\n    }\r\n  }\r\n  return ~low;\r\n}","code-length":168,"reference":"Searches the specified Array for the provided key using the binary\nsearch algorithm.  The Array must be sorted.\n","result":"Search for a key in an array.","score":[0.0399,0.0888]}
{"code":"\/*is used to<extra_id_0>\r\nfunction insertSorted(arr, item, compareFunc) {\r\n  if (arr.length === 0) {\r\n    return arr.push(item);\r\n  }\r\n  let position = binarySearch(arr, item, compareFunc);\r\n  if (position < 0) {\r\n    position = ~position;\r\n  }\r\n  arr.splice(position, 0, item);\r\n}","code-length":100,"reference":"Inserts the value in the position determined by its natural order determined by the compare func\n","result":"Insert sorted.","score":[0,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateFn(fn, name) {\r\n  if (typeof fn !== 'function') {\r\n    throw new errors.ArgumentError(util.format('%s is not a function', name || 'callback'));\r\n  }\r\n  return fn;\r\n}","code-length":69,"reference":"Validates the provided parameter is of type function.\n","result":"Validate the callback.","score":[0.0771,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stringRepeat(val, times) {\r\n  if (!times || times < 0) {\r\n    return null;\r\n  }\r\n  if (times === 1) {\r\n    return val;\r\n  }\r\n  return new Array(times + 1).join(val);\r\n}","code-length":78,"reference":"Returns a string with a value repeated n times\n","result":"Repeat strings.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction promiseWrapper(options, originalCallback, handler) {\r\n  if (typeof originalCallback === 'function') {\r\n    handler.call(this, originalCallback);\r\n    return undefined;\r\n  }\r\n  const factory = options.promiseFactory || defaultPromiseFactory;\r\n  const self = this;\r\n  return factory(function handlerWrapper(callback) {\r\n    handler.call(self, callback);\r\n  });\r\n}","code-length":110,"reference":"Wraps the callback-based method. When no originalCallback is not defined, it returns a Promise.\n","result":"Wrap a promise in a promise.","score":[0.0509,0.1936]}
{"code":"\/*is used to<extra_id_0>\r\nfunction WhiteListPolicy (childPolicy, whiteList) {\r\n  if (!childPolicy) {\r\n    throw new Error(\"You must specify a child load balancing policy\");\r\n  }\r\n  if (!util.isArray(whiteList)) {\r\n    throw new Error(\"You must provide the white list of host addresses\");\r\n  }\r\n  this.childPolicy = childPolicy;\r\n  const map = {};\r\n  whiteList.forEach(function (address) {\r\n    map[address] = true;\r\n  });\r\n  this.whiteList = map;\r\n}","code-length":144,"reference":"Create a new policy that wraps the provided child policy but only \"allow\" hosts\nfrom the provided while list.\n","result":"Create a policy for the white list.","score":[0.0517,0.209]}
{"code":"\/*is used to<extra_id_0>\r\nfunction EventDebouncer(delay, logger) {\r\n  this._delay = delay;\r\n  this._logger = logger;\r\n  this._queue = null;\r\n  this._timeout = null;\r\n}","code-length":60,"reference":"Debounce protocol events by acting on those events with a sliding delay.\n","result":"Prevent event debouncing.","score":[0,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FrameReader(header, body, offset) {\r\n  this.header = header;\r\n  this.opcode = header.opcode;\r\n  this.offset = offset || 0;\r\n  this.buf = body;\r\n}","code-length":65,"reference":"Buffer forward reader of CQL binary frames\n","result":"Read frames.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Connection(endpoint, protocolVersion, options) {\r\n  events.EventEmitter.call(this);\r\n  this.setMaxListeners(0);\r\n  if (!options) {\r\n    throw new Error('options is not defined');\r\n  }\r\n    this.endpoint = endpoint;\r\n    this.endpointFriendlyName = endpoint;\r\n  if (!this.endpoint || this.endpoint.indexOf(':') < 0) {\r\n    throw new Error('EndPoint must contain the ip address and port separated by : symbol');\r\n  }\r\n  const portSeparatorIndex = this.endpoint.lastIndexOf(':');\r\n  this.address = this.endpoint.substr(0, portSeparatorIndex);\r\n  this.port = this.endpoint.substr(portSeparatorIndex + 1);\r\n  Object.defineProperty(this, \"options\", { value: options, enumerable: false, writable: false});\r\n  if (protocolVersion === null) {\r\n    protocolVersion = types.protocolVersion.maxSupported;\r\n    if (options.protocolOptions.maxVersion) {\r\n      protocolVersion = options.protocolOptions.maxVersion;\r\n    }\r\n    this._checkingVersion = true;\r\n  }\r\n  this.protocolVersion = protocolVersion;\r\n    this._operations = {};\r\n  this._pendingWrites = [];\r\n  this._preparing = {};\r\n    this._idleTimeout = null;\r\n  this.timedOutOperations = 0;\r\n  this._streamIds = new StreamIdStack(this.protocolVersion);\r\n  this._metrics = options.metrics;\r\n  this.encoder = new Encoder(protocolVersion, options);\r\n  this.keyspace = null;\r\n  this.emitDrain = false;\r\n    this.connected = false;\r\n    this.isSocketOpen = false;\r\n}","code-length":432,"reference":"Represents a connection to a Cassandra node\n","result":"Create a connection.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getClockId(clockId) {\r\n  let buffer = clockId;\r\n  if (typeof clockId === 'string') {\r\n    buffer = utils.allocBufferFromString(clockId, 'ascii');\r\n  }\r\n  if (!(buffer instanceof Buffer)) {\r\n    buffer = getRandomBytes(2);\r\n  }\r\n  else if (buffer.length !== 2) {\r\n    throw new Error('Clock identifier must have 2 bytes');\r\n  }\r\n  return buffer;\r\n}","code-length":126,"reference":"Returns a buffer of length 2 representing the clock identifier\n","result":"Generate the clock identifier.","score":[0.1008,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNodeId(nodeId) {\r\n  let buffer = nodeId;\r\n  if (typeof nodeId === 'string') {\r\n    buffer = utils.allocBufferFromString(nodeId, 'ascii');\r\n  }\r\n  if (!(buffer instanceof Buffer)) {\r\n    buffer = getRandomBytes(6);\r\n  }\r\n  else if (buffer.length !== 6) {\r\n    throw new Error('Node identifier must have 6 bytes');\r\n  }\r\n  return buffer;\r\n}","code-length":123,"reference":"Returns a buffer of length 6 representing the clock identifier\n","result":"Generate node identifiers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTicks(ticks) {\r\n  if (typeof ticks !== 'number'|| ticks >= _ticksInMs) {\r\n    _ticks++;\r\n    if (_ticks >= _ticksInMs) {\r\n      _ticks = 0;\r\n    }\r\n    ticks = _ticks;\r\n  }\r\n  return ticks;\r\n}","code-length":90,"reference":"Returns the ticks portion of a timestamp.  If the ticks are not provided an internal counter is used that gets reset at 10000.\n","result":"Get the ticks.","score":[0.0005,0.0476]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTimeWithTicks(date, ticks) {\r\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\r\n    date = new Date();\r\n    const time = date.getTime();\r\n    _ticksForCurrentTime++;\r\n    if(_ticksForCurrentTime > _ticksInMs || time > _lastTimestamp) {\r\n      _ticksForCurrentTime = 0;\r\n      _lastTimestamp = time;\r\n    }\r\n    ticks = _ticksForCurrentTime;\r\n  }\r\n  return {\r\n    time: date.getTime(),\r\n    ticks: getTicks(ticks)\r\n  };\r\n}","code-length":162,"reference":"Returns an object with the time representation of the date expressed in milliseconds since unix epoch\nand a ticks property for the 100-nanoseconds precision.\n","result":"Get the time with ticks.","score":[0.0084,0.0679]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateBuffer(date, ticks, nodeId, clockId) {\r\n  const timeWithTicks = getTimeWithTicks(date, ticks);\r\n  nodeId = getNodeId(nodeId);\r\n  clockId = getClockId(clockId);\r\n  const buffer = utils.allocBufferUnsafe(16);\r\n  writeTime(buffer, timeWithTicks.time, timeWithTicks.ticks);\r\n  clockId.copy(buffer, 8, 0);\r\n  nodeId.copy(buffer, 10, 0);\r\n  buffer[6] = buffer[6] & 0x0f;\r\n  buffer[6] = buffer[6] | 0x10;\r\n  buffer[8] = buffer[8] & 0x3f;\r\n  buffer[8] = buffer[8] | 0x80;\r\n  return buffer;\r\n}","code-length":203,"reference":"Generates a 16-length Buffer instance\n","result":"Generate the buffer.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Encoder(protocolVersion, options) {\r\n  this.encodingOptions = options.encoding || utils.emptyObject;\r\n  defineInstanceMembers.call(this);\r\n  this.setProtocolVersion(protocolVersion);\r\n  setEncoders.call(this);\r\n  if (this.encodingOptions.copyBuffer) {\r\n    this.handleBuffer = handleBufferCopy;\r\n  }\r\n  else {\r\n    this.handleBuffer = handleBufferRef;\r\n  }\r\n}","code-length":122,"reference":"Serializes and deserializes to and from a CQL type and a Javascript Type.\n","result":"Create a new instance of the Encoder class.","score":[0.0743,0.04]}
{"code":"\/*is used to<extra_id_0>\r\nfunction numberOfLeadingZeros(value) {\r\n    if (value.equals(Long.ZERO)) {\r\n      return 64;\r\n    }\r\n    let n = 1;\r\n    let x = value.getHighBits();\r\n    if (x === 0) {\r\n      n += 32;\r\n      x = value.getLowBits();\r\n    }\r\n    if (x >>> 16 === 0) {\r\n      n += 16;\r\n      x <<= 16;\r\n    }\r\n    if (x >>> 24 === 0) {\r\n      n += 8;\r\n      x <<= 8;\r\n    }\r\n    if (x >>> 28 === 0) {\r\n      n += 4;\r\n      x <<= 4;\r\n    }\r\n    if (x >>> 30 === 0) {\r\n      n += 2;\r\n      x <<= 2;\r\n    }\r\n    n -= x >>> 31;\r\n    return n;\r\n  }","code-length":232,"reference":"Returns the number of zero bits preceding the highest-order one-bit in the binary representation of the value.\n","result":"Calculate the number of leading zeros in a long value.","score":[0.1262,0.184]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Index(name, target, kind, options) {\r\n    this.name = name;\r\n    this.target = target;\r\n    this.kind = typeof kind === 'string' ? getKindByName(kind) : kind;\r\n    this.options = options;\r\n}","code-length":73,"reference":"Creates a new Index instance.\n","result":"Create an index.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (key) {\r\n        return _.sortBy(files, function (el) {\r\n            return Number($(el).find('span[data-lint]').attr(key)) * -1;\r\n        });\r\n    }","code-length":63,"reference":"work-horse ","result":"Sort by key.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadMode(cm) {\r\n    var doc = cm.view.doc;\r\n    cm.view.mode = CodeMirror.getMode(cm.options, cm.options.mode);\r\n    doc.iter(0, doc.size, function(line) { line.stateAfter = null; });\r\n    cm.view.frontier = 0;\r\n    startWorker(cm, 100);\r\n  }","code-length":105,"reference":"STATE UPDATES Used to get the editor into a consistent state again when options change.","result":"Load mode.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateScrollbars(d , docHeight) {\r\n    var totalHeight = docHeight + 2 * paddingTop(d);\r\n    d.sizer.style.minHeight = d.heightForcer.style.top = totalHeight + \"px\";\r\n    var scrollHeight = Math.max(totalHeight, d.scroller.scrollHeight);\r\n    var needsH = d.scroller.scrollWidth > d.scroller.clientWidth;\r\n    var needsV = scrollHeight > d.scroller.clientHeight;\r\n    if (needsV) {\r\n      d.scrollbarV.style.display = \"block\";\r\n      d.scrollbarV.style.bottom = needsH ? scrollbarWidth(d.measure) + \"px\" : \"0\";\r\n      d.scrollbarV.firstChild.style.height = \r\n        (scrollHeight - d.scroller.clientHeight + d.scrollbarV.clientHeight) + \"px\";\r\n    } else d.scrollbarV.style.display = \"\";\r\n    if (needsH) {\r\n      d.scrollbarH.style.display = \"block\";\r\n      d.scrollbarH.style.right = needsV ? scrollbarWidth(d.measure) + \"px\" : \"0\";\r\n      d.scrollbarH.firstChild.style.width =\r\n        (d.scroller.scrollWidth - d.scroller.clientWidth + d.scrollbarH.clientWidth) + \"px\";\r\n    } else d.scrollbarH.style.display = \"\";\r\n    if (needsH && needsV) {\r\n      d.scrollbarFiller.style.display = \"block\";\r\n      d.scrollbarFiller.style.height = d.scrollbarFiller.style.width = scrollbarWidth(d.measure) + \"px\";\r\n    } else d.scrollbarFiller.style.display = \"\";\r\n    if (mac_geLion && scrollbarWidth(d.measure) === 0)\r\n      d.scrollbarV.style.minWidth = d.scrollbarH.style.minHeight = mac_geMountainLion ? \"18px\" : \"12px\";\r\n  }","code-length":518,"reference":"Re-synchronize the fake scrollbars with the actual size of the content. Optionally force a scrollTop.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction restartBlink(cm) {\r\n    var display = cm.display;\r\n    clearInterval(display.blinker);\r\n    var on = true;\r\n    display.cursor.style.visibility = display.otherCursor.style.visibility = \"\";\r\n    display.blinker = setInterval(function() {\r\n      if (!display.cursor.offsetHeight) return;\r\n      display.cursor.style.visibility = display.otherCursor.style.visibility = (on = !on) ? \"\" : \"hidden\";\r\n    }, cm.options.cursorBlinkRate);\r\n  }","code-length":146,"reference":"Cursor-blinking","result":"Restart the cursor blinker.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction coordsChar(cm, x, y) {\r\n    var doc = cm.view.doc;\r\n    y += cm.display.viewOffset;\r\n    if (y < 0) return {line: 0, ch: 0, outside: true};\r\n    var lineNo = lineAtHeight(doc, y);\r\n    if (lineNo >= doc.size) return {line: doc.size - 1, ch: getLine(doc, doc.size - 1).text.length};\r\n    if (x < 0) x = 0;\r\n    for (;;) {\r\n      var lineObj = getLine(doc, lineNo);\r\n      var found = coordsCharInner(cm, lineObj, lineNo, x, y);\r\n      var merged = collapsedSpanAtEnd(lineObj);\r\n      if (merged && found.ch == lineRight(lineObj))\r\n        lineNo = merged.find().to.line;\r\n      else\r\n        return found;\r\n    }\r\n  }","code-length":240,"reference":"Coords must be lineSpace-local","result":"Detect line breaks in the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateDoc(cm, from, to, newText, selUpdate, origin) {\r\n    var split = sawReadOnlySpans &&\r\n      removeReadOnlyRanges(cm.view.doc, from, to);\r\n    if (split) {\r\n      for (var i = split.length - 1; i >= 1; --i)\r\n        updateDocInner(cm, split[i].from, split[i].to, [\"\"], origin);\r\n      if (split.length)\r\n        return updateDocInner(cm, split[0].from, split[0].to, newText, selUpdate, origin);\r\n    } else {\r\n      return updateDocInner(cm, from, to, newText, selUpdate, origin);\r\n    }\r\n  }","code-length":185,"reference":"Replace the range from from to to by the strings in newText. Afterwards, set the selection to selFrom, selTo.","result":"Update the doc in.","score":[0.0075,0.0286]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setSelection(cm, anchor, head, bias, checkAtomic) {\r\n    cm.view.goalColumn = null;\r\n    var sel = cm.view.sel;\r\n    if (checkAtomic || !posEq(anchor, sel.anchor))\r\n      anchor = skipAtomic(cm, anchor, bias, checkAtomic != \"push\");\r\n    if (checkAtomic || !posEq(head, sel.head))\r\n      head = skipAtomic(cm, head, bias, checkAtomic != \"push\");\r\n    if (posEq(sel.anchor, anchor) && posEq(sel.head, head)) return;\r\n    sel.anchor = anchor; sel.head = head;\r\n    var inv = posLess(head, anchor);\r\n    sel.from = inv ? head : anchor;\r\n    sel.to = inv ? anchor : head;\r\n    cm.curOp.updateInput = true;\r\n    cm.curOp.selectionChanged = true;\r\n  }","code-length":235,"reference":"Update the selection. Last two args are only used by updateDoc, since they have to be expressed in the line numbers before the update.","result":"Set the selection in.","score":[0.0022,0.0227]}
{"code":"\/*is used to<extra_id_0>\r\nfunction highlightLine(cm, line, state) {\r\n    var mode = cm.view.mode, flattenSpans = cm.options.flattenSpans;\r\n    var changed = !line.styles, pos = 0, curText = \"\", curStyle = null;\r\n    var stream = new StringStream(line.text, cm.options.tabSize), st = line.styles || (line.styles = []);\r\n    if (line.text == \"\" && mode.blankLine) mode.blankLine(state);\r\n    while (!stream.eol()) {\r\n      var style = mode.token(stream, state), substr = stream.current();\r\n      stream.start = stream.pos;\r\n      if (!flattenSpans || curStyle != style) {\r\n        if (curText) {\r\n          changed = changed || pos >= st.length || curText != st[pos] || curStyle != st[pos+1];\r\n          st[pos++] = curText; st[pos++] = curStyle;\r\n        }\r\n        curText = substr; curStyle = style;\r\n      } else curText = curText + substr;\r\n      if (stream.pos > 5000) break;\r\n    }\r\n    if (curText) {\r\n      changed = changed || pos >= st.length || curText != st[pos] || curStyle != st[pos+1];\r\n      st[pos++] = curText; st[pos++] = curStyle;\r\n    }\r\n    if (stream.pos > 5000) { st[pos++] = line.text.slice(stream.pos); st[pos++] = null; }\r\n    if (pos != st.length) { st.length = pos; changed = true; }\r\n    return changed;\r\n  }","code-length":419,"reference":"Run the given mode's parser over a line, update the styles array, which contains alternating fragments of text and CSS classes.","result":"Detect line highlights.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction e_prop(e, prop) {\r\n    var overridden = e.override && e.override.hasOwnProperty(prop);\r\n    return overridden ? e.override[prop] : e[prop];\r\n  }","code-length":59,"reference":"Allow 3rd-party code to override event properties by adding an override object to an event object.","result":"Define properties in the e object.","score":[0.0434,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Flow(opts) {\r\n        this.support = (\r\n        typeof File !== 'undefined' &&\r\n        typeof Blob !== 'undefined' &&\r\n        typeof FileList !== 'undefined' &&\r\n        (\r\n          !!Blob.prototype.slice || !!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice ||\r\n          false\r\n        )\r\n    );\r\n    if (!this.support) {\r\n      return ;\r\n    }\r\n        this.supportDirectory = (\r\n        \/Chrome\/.test(window.navigator.userAgent) ||\r\n        \/Firefox\/.test(window.navigator.userAgent) ||\r\n        \/Edge\/.test(window.navigator.userAgent)\r\n    );\r\n        this.files = [];\r\n        this.defaults = {\r\n      chunkSize: 1024 * 1024,\r\n      forceChunkSize: false,\r\n      simultaneousUploads: 3,\r\n      singleFile: false,\r\n      fileParameterName: 'file',\r\n      progressCallbacksInterval: 500,\r\n      speedSmoothingFactor: 0.1,\r\n      query: {},\r\n      headers: {},\r\n      withCredentials: false,\r\n      preprocess: null,\r\n      method: 'multipart',\r\n      testMethod: 'GET',\r\n      uploadMethod: 'POST',\r\n      prioritizeFirstAndLastChunk: false,\r\n      allowDuplicateUploads: false,\r\n      target: '\/',\r\n      testChunks: true,\r\n      generateUniqueIdentifier: null,\r\n      maxChunkRetries: 0,\r\n      chunkRetryInterval: null,\r\n      permanentErrors: [404, 413, 415, 500, 501],\r\n      successStatuses: [200, 201, 202],\r\n      onDropStopPropagation: false,\r\n      initFileFn: null,\r\n      readFileFn: webAPIFileRead\r\n    };\r\n        this.opts = {};\r\n        this.events = {};\r\n    var $ = this;\r\n        this.onDrop = function (event) {\r\n      if ($.opts.onDropStopPropagation) {\r\n        event.stopPropagation();\r\n      }\r\n      event.preventDefault();\r\n      var dataTransfer = event.dataTransfer;\r\n      if (dataTransfer.items && dataTransfer.items[0] &&\r\n        dataTransfer.items[0].webkitGetAsEntry) {\r\n        $.webkitReadDataTransfer(event);\r\n      } else {\r\n        $.addFiles(dataTransfer.files, event);\r\n      }\r\n    };\r\n        this.preventEvent = function (event) {\r\n      event.preventDefault();\r\n    };\r\n        this.opts = Flow.extend({}, this.defaults, opts || {});\r\n  }","code-length":654,"reference":"Flow.js is a library providing multiple simultaneous, stable and\nresumable uploads via the HTML5 File API.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (event, fn) {\r\n      if (event !== undefined) {\r\n        event = event.toLowerCase();\r\n        if (fn !== undefined) {\r\n          if (this.events.hasOwnProperty(event)) {\r\n            arrayRemove(this.events[event], fn);\r\n          }\r\n        } else {\r\n          delete this.events[event];\r\n        }\r\n      } else {\r\n        this.events = {};\r\n      }\r\n    }","code-length":122,"reference":"Remove event callback\n","result":"Remove a listener.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (event, args) {\r\n      args = Array.prototype.slice.call(arguments);\r\n      event = event.toLowerCase();\r\n      var preventDefault = false;\r\n      if (this.events.hasOwnProperty(event)) {\r\n        each(this.events[event], function (callback) {\r\n          preventDefault = callback.apply(this, args.slice(1)) === false || preventDefault;\r\n        }, this);\r\n      }\r\n      if (event != 'catchall') {\r\n        args.unshift('catchAll');\r\n        preventDefault = this.fire.apply(this, args) === false || preventDefault;\r\n      }\r\n      return !preventDefault;\r\n    }","code-length":170,"reference":"Fire an event\n","result":"Prevent default event firing.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (event) {\r\n      var $ = this;\r\n      var queue = event.dataTransfer.items.length;\r\n      var files = [];\r\n      each(event.dataTransfer.items, function (item) {\r\n        var entry = item.webkitGetAsEntry();\r\n        if (!entry) {\r\n          decrement();\r\n          return ;\r\n        }\r\n        if (entry.isFile) {\r\n          fileReadSuccess(item.getAsFile(), entry.fullPath);\r\n        } else {\r\n          readDirectory(entry.createReader());\r\n        }\r\n      });\r\n      function readDirectory(reader) {\r\n        reader.readEntries(function (entries) {\r\n          if (entries.length) {\r\n            queue += entries.length;\r\n            each(entries, function(entry) {\r\n              if (entry.isFile) {\r\n                var fullPath = entry.fullPath;\r\n                entry.file(function (file) {\r\n                  fileReadSuccess(file, fullPath);\r\n                }, readError);\r\n              } else if (entry.isDirectory) {\r\n                readDirectory(entry.createReader());\r\n              }\r\n            });\r\n            readDirectory(reader);\r\n          } else {\r\n            decrement();\r\n          }\r\n        }, readError);\r\n      }\r\n      function fileReadSuccess(file, fullPath) {\r\n        file.relativePath = fullPath.substring(1);\r\n        files.push(file);\r\n        decrement();\r\n      }\r\n      function readError(fileError) {\r\n        throw fileError;\r\n      }\r\n      function decrement() {\r\n        if (--queue == 0) {\r\n          $.addFiles(files, event);\r\n        }\r\n      }\r\n    }","code-length":432,"reference":"Read webkit dataTransfer object\n","result":"Detect changes in the browser.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (file) {\r\n      var custom = this.opts.generateUniqueIdentifier;\r\n      if (typeof custom === 'function') {\r\n        return custom(file);\r\n      }\r\n      var relativePath = file.relativePath || file.webkitRelativePath || file.fileName || file.name;\r\n      return file.size + '-' + relativePath.replace(\/[^0-9a-zA-Z_-]\/img, '');\r\n    }","code-length":109,"reference":"Generate unique identifier for a file\n","result":"Generate a unique identifier.","score":[0.255,0.2586]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (preventEvents) {\r\n      var found = false;\r\n      if (this.opts.prioritizeFirstAndLastChunk) {\r\n        each(this.files, function (file) {\r\n          if (!file.paused && file.chunks.length &&\r\n            file.chunks[0].status() === 'pending') {\r\n            file.chunks[0].send();\r\n            found = true;\r\n            return false;\r\n          }\r\n          if (!file.paused && file.chunks.length > 1 &&\r\n            file.chunks[file.chunks.length - 1].status() === 'pending') {\r\n            file.chunks[file.chunks.length - 1].send();\r\n            found = true;\r\n            return false;\r\n          }\r\n        });\r\n        if (found) {\r\n          return found;\r\n        }\r\n      }\r\n      each(this.files, function (file) {\r\n        if (!file.paused) {\r\n          each(file.chunks, function (chunk) {\r\n            if (chunk.status() === 'pending') {\r\n              chunk.send();\r\n              found = true;\r\n              return false;\r\n            }\r\n          });\r\n        }\r\n        if (found) {\r\n          return false;\r\n        }\r\n      });\r\n      if (found) {\r\n        return true;\r\n      }\r\n      var outstanding = false;\r\n      each(this.files, function (file) {\r\n        if (!file.isComplete()) {\r\n          outstanding = true;\r\n          return false;\r\n        }\r\n      });\r\n      if (!outstanding && !preventEvents) {\r\n        async(function () {\r\n          this.fire('complete');\r\n        }, this);\r\n      }\r\n      return false;\r\n    }","code-length":444,"reference":"Upload next chunk from the queue\n","result":"Prevent events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (domNodes, isDirectory, singleFile, attributes) {\r\n      if (domNodes instanceof Element) {\r\n        domNodes = [domNodes];\r\n      }\r\n      each(domNodes, function (domNode) {\r\n        var input;\r\n        if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\r\n          input = domNode;\r\n        } else {\r\n          input = document.createElement('input');\r\n          input.setAttribute('type', 'file');\r\n          extend(input.style, {\r\n            visibility: 'hidden',\r\n            position: 'absolute',\r\n            width: '1px',\r\n            height: '1px'\r\n          });\r\n          domNode.appendChild(input);\r\n            input.click();\r\n          }, false);\r\n        }\r\n        if (!this.opts.singleFile && !singleFile) {\r\n          input.setAttribute('multiple', 'multiple');\r\n        }\r\n        if (isDirectory) {\r\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\r\n        }\r\n        each(attributes, function (value, key) {\r\n          input.setAttribute(key, value);\r\n        });\r\n        var $ = this;\r\n        input.addEventListener('change', function (e) {\r\n       \t  if (e.target.value) {\r\n            $.addFiles(e.target.files, e);\r\n            e.target.value = '';\r\n       \t  }\r\n        }, false);\r\n      }, this);\r\n    }","code-length":380,"reference":"Assign a browse action to one or more DOM nodes.\n","result":"Create a new instance of the FileInput .","score":[0.1082,0.051]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (domNodes) {\r\n      if (typeof domNodes.length === 'undefined') {\r\n        domNodes = [domNodes];\r\n      }\r\n      each(domNodes, function (domNode) {\r\n        domNode.addEventListener('dragover', this.preventEvent, false);\r\n        domNode.addEventListener('dragenter', this.preventEvent, false);\r\n        domNode.addEventListener('drop', this.onDrop, false);\r\n      }, this);\r\n    }","code-length":121,"reference":"Assign one or more DOM nodes as a drop target.\n","result":"Prevent dropping of a DOM node.","score":[0.1179,0.1562]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (domNodes) {\r\n      if (typeof domNodes.length === 'undefined') {\r\n        domNodes = [domNodes];\r\n      }\r\n      each(domNodes, function (domNode) {\r\n        domNode.removeEventListener('dragover', this.preventEvent);\r\n        domNode.removeEventListener('dragenter', this.preventEvent);\r\n        domNode.removeEventListener('drop', this.onDrop);\r\n      }, this);\r\n    }","code-length":115,"reference":"Un-assign drop event from DOM nodes\n","result":"Remove drag and drop events.","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var uploading = false;\r\n      each(this.files, function (file) {\r\n        if (file.isUploading()) {\r\n          uploading = true;\r\n          return false;\r\n        }\r\n      });\r\n      return uploading;\r\n    }","code-length":77,"reference":"Returns a boolean indicating whether or not the instance is currently\nuploading anything.\n","result":"Return uploading.","score":[0,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var num = 0;\r\n      var should = true;\r\n      var simultaneousUploads = this.opts.simultaneousUploads;\r\n      each(this.files, function (file) {\r\n        each(file.chunks, function(chunk) {\r\n          if (chunk.status() === 'uploading') {\r\n            num++;\r\n            if (num >= simultaneousUploads) {\r\n              should = false;\r\n              return false;\r\n            }\r\n          }\r\n        });\r\n      });\r\n      return should && num;\r\n    }","code-length":144,"reference":"should upload next chunk\n","result":"Test the upload.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var ret = this._shouldUploadNext();\r\n      if (ret === false) {\r\n        return;\r\n      }\r\n      this.fire('uploadStart');\r\n      var started = false;\r\n      for (var num = 1; num <= this.opts.simultaneousUploads - ret; num++) {\r\n        started = this.uploadNextChunk(true) || started;\r\n      }\r\n      if (!started) {\r\n        async(function () {\r\n          this.fire('complete');\r\n        }, this);\r\n      }\r\n    }","code-length":145,"reference":"Start or resume uploading.\n","result":"Upload a file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (fileList, event) {\r\n      var files = [];\r\n      each(fileList, function (file) {\r\n& file.size > 0) && !(file.size % 4096 === 0 && (file.name === '.' || file.fileName === '.'))) {\r\n          var uniqueIdentifier = this.generateUniqueIdentifier(file);\r\n          if (this.opts.allowDuplicateUploads || !this.getFromUniqueIdentifier(uniqueIdentifier)) {\r\n            var f = new FlowFile(this, file, uniqueIdentifier);\r\n            if (this.fire('fileAdded', f, event)) {\r\n              files.push(f);\r\n            }\r\n          }\r\n        }\r\n      }, this);\r\n      if (this.fire('filesAdded', files, event)) {\r\n        each(files, function (file) {\r\n          if (this.opts.singleFile && this.files.length > 0) {\r\n            this.removeFile(this.files[0]);\r\n          }\r\n          this.files.push(file);\r\n        }, this);\r\n        this.fire('filesSubmitted', files, event);\r\n      }\r\n    }","code-length":280,"reference":"Add a HTML5 File object to the list of files.\n","result":"Create a new file.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (file) {\r\n      for (var i = this.files.length - 1; i >= 0; i--) {\r\n        if (this.files[i] === file) {\r\n          this.files.splice(i, 1);\r\n          file.abort();\r\n          this.fire('fileRemoved', file);\r\n        }\r\n      }\r\n    }","code-length":97,"reference":"Cancel upload of a specific FlowFile object from the list.\n","result":"Remove a file.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (uniqueIdentifier) {\r\n      var ret = false;\r\n      each(this.files, function (file) {\r\n        if (file.uniqueIdentifier === uniqueIdentifier) {\r\n          ret = file;\r\n        }\r\n      });\r\n      return ret;\r\n    }","code-length":76,"reference":"Look up a FlowFile object by its unique identifier.\n","result":"Find the file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var sizeDelta = 0;\r\n      var averageSpeed = 0;\r\n      each(this.files, function (file) {\r\n        if (!file.paused && !file.error) {\r\n          sizeDelta += file.size - file.sizeUploaded();\r\n          averageSpeed += file.averageSpeed;\r\n        }\r\n      });\r\n      if (sizeDelta && !averageSpeed) {\r\n        return Number.POSITIVE_INFINITY;\r\n      }\r\n      if (!sizeDelta && !averageSpeed) {\r\n        return 0;\r\n      }\r\n      return Math.floor(sizeDelta \/ averageSpeed);\r\n    }","code-length":164,"reference":"Returns remaining time to upload all files in seconds. Accuracy is based on average speed.\nIf speed is zero, time remaining will be equal to positive infinity `Number.POSITIVE_INFINITY`\n","result":"Test the async functions .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var timeSpan = Date.now() - this._lastProgressCallback;\r\n      if (!timeSpan) {\r\n        return ;\r\n      }\r\n      var smoothingFactor = this.flowObj.opts.speedSmoothingFactor;\r\n      var uploaded = this.sizeUploaded();\r\n      this.currentSpeed = Math.max((uploaded - this._prevUploadedSize) \/ timeSpan * 1000, 0);\r\n      this.averageSpeed = smoothingFactor * this.currentSpeed + (1 - smoothingFactor) * this.averageSpeed;\r\n      this._prevUploadedSize = uploaded;\r\n    }","code-length":149,"reference":"Update speed parameters\n","result":"Create a function to call the function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (chunk, event, message) {\r\n      switch (event) {\r\n        case 'progress':\r\n          if (Date.now() - this._lastProgressCallback <\r\n            this.flowObj.opts.progressCallbacksInterval) {\r\n            break;\r\n          }\r\n          this.measureSpeed();\r\n          this.flowObj.fire('fileProgress', this, chunk);\r\n          this.flowObj.fire('progress');\r\n          this._lastProgressCallback = Date.now();\r\n          break;\r\n        case 'error':\r\n          this.error = true;\r\n          this.abort(true);\r\n          this.flowObj.fire('fileError', this, message, chunk);\r\n          this.flowObj.fire('error', message, this, chunk);\r\n          break;\r\n        case 'success':\r\n          if (this.error) {\r\n            return;\r\n          }\r\n          this.measureSpeed();\r\n          this.flowObj.fire('fileProgress', this, chunk);\r\n          this.flowObj.fire('progress');\r\n          this._lastProgressCallback = Date.now();\r\n          if (this.isComplete()) {\r\n            this.currentSpeed = 0;\r\n            this.averageSpeed = 0;\r\n            this.flowObj.fire('fileSuccess', this, message, chunk);\r\n          }\r\n          break;\r\n        case 'retry':\r\n          this.flowObj.fire('fileRetry', this, chunk);\r\n          break;\r\n      }\r\n    }","code-length":367,"reference":"For internal usage only.\nCallback when something happens within the chunk.\n","result":"Trigger the event.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (reset) {\r\n      this.currentSpeed = 0;\r\n      this.averageSpeed = 0;\r\n      var chunks = this.chunks;\r\n      if (reset) {\r\n        this.chunks = [];\r\n      }\r\n      each(chunks, function (c) {\r\n        if (c.status() === 'uploading') {\r\n          c.abort();\r\n          this.flowObj.uploadNextChunk();\r\n        }\r\n      }, this);\r\n    }","code-length":125,"reference":"Abort current upload\n","result":"Reset the speed .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      if (typeof this.flowObj.opts.initFileFn === \"function\") {\r\n        this.flowObj.opts.initFileFn(this);\r\n      }\r\n      this.abort(true);\r\n      this.error = false;\r\n      this._prevProgress = 0;\r\n      var round = this.flowObj.opts.forceChunkSize ? Math.ceil : Math.floor;\r\n      var chunks = Math.max(\r\n        round(this.size \/ this.flowObj.opts.chunkSize), 1\r\n      );\r\n      for (var offset = 0; offset < chunks; offset++) {\r\n        this.chunks.push(\r\n          new FlowChunk(this.flowObj, this, offset)\r\n        );\r\n      }\r\n    }","code-length":195,"reference":"Clear current chunks and slice file again\n","result":"Initialize the file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      if (this.error) {\r\n        return 1;\r\n      }\r\n      if (this.chunks.length === 1) {\r\n        this._prevProgress = Math.max(this._prevProgress, this.chunks[0].progress());\r\n        return this._prevProgress;\r\n      }\r\n      var bytesLoaded = 0;\r\n      each(this.chunks, function (c) {\r\n        bytesLoaded += c.progress() * (c.endByte - c.startByte);\r\n      });\r\n      var percent = bytesLoaded \/ this.size;\r\n      this._prevProgress = Math.max(this._prevProgress, percent > 0.9999 ? 1 : percent);\r\n      return this._prevProgress;\r\n    }","code-length":186,"reference":"Get current upload progress status\n","result":"Create a new function to run the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var outstanding = false;\r\n      each(this.chunks, function (chunk) {\r\n        var status = chunk.status();\r\n        if (status === 'pending' || status === 'uploading' || status === 'reading' || chunk.preprocessState === 1 || chunk.readState === 1) {\r\n          outstanding = true;\r\n          return false;\r\n        }\r\n      });\r\n      return !outstanding;\r\n    }","code-length":116,"reference":"Indicates if file is has finished uploading and received a response\n","result":"Test the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      if (this.paused || this.error) {\r\n        return 0;\r\n      }\r\n      var delta = this.size - this.sizeUploaded();\r\n      if (delta && !this.averageSpeed) {\r\n        return Number.POSITIVE_INFINITY;\r\n      }\r\n      if (!delta && !this.averageSpeed) {\r\n        return 0;\r\n      }\r\n      return Math.floor(delta \/ this.averageSpeed);\r\n    }","code-length":125,"reference":"Returns remaining time to finish upload file in seconds. Accuracy is based on average speed.\nIf speed is zero, time remaining will be equal to positive infinity `Number.POSITIVE_INFINITY`\n","result":"Create a new function to upload files.","score":[0.0096,0.0386]}
{"code":"\/*is used to<extra_id_0>\r\nfunction webAPIFileRead(fileObj, startByte, endByte, fileType, chunk) {\r\n    var function_name = 'slice';\r\n    if (fileObj.file.slice)\r\n      function_name =  'slice';\r\n    else if (fileObj.file.mozSlice)\r\n      function_name = 'mozSlice';\r\n    else if (fileObj.file.webkitSlice)\r\n      function_name = 'webkitSlice';\r\n    chunk.readFinished(fileObj.file[function_name](startByte, endByte, fileType));\r\n  }","code-length":144,"reference":"Default read function using the webAPI\n\n","result":"Read webAPI files.","score":[0.1502,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      this.xhr = new XMLHttpRequest();\r\n      this.xhr.addEventListener(\"load\", this.testHandler, false);\r\n      this.xhr.addEventListener(\"error\", this.testHandler, false);\r\n      var testMethod = evalOpts(this.flowObj.opts.testMethod, this.fileObj, this);\r\n      var data = this.prepareXhrRequest(testMethod, true);\r\n      this.xhr.send(data);\r\n    }","code-length":124,"reference":"Makes a GET request without any data to see if the chunk has already\nbeen uploaded in a previous session\n","result":"Test the file .","score":[0.0059,0.0272]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      var preprocess = this.flowObj.opts.preprocess;\r\n      var read = this.flowObj.opts.readFileFn;\r\n      if (typeof preprocess === 'function') {\r\n        switch (this.preprocessState) {\r\n          case 0:\r\n            this.preprocessState = 1;\r\n            preprocess(this);\r\n            return;\r\n          case 1:\r\n            return;\r\n        }\r\n      }\r\n      switch (this.readState) {\r\n        case 0:\r\n          this.readState = 1;\r\n          read(this.fileObj, this.startByte, this.endByte, this.fileObj.file.type, this);\r\n          return;\r\n        case 1:\r\n          return;\r\n      }\r\n      if (this.flowObj.opts.testChunks && !this.tested) {\r\n        this.test();\r\n        return;\r\n      }\r\n      this.loaded = 0;\r\n      this.total = 0;\r\n      this.pendingRetry = false;\r\n      this.xhr = new XMLHttpRequest();\r\n      this.xhr.upload.addEventListener('progress', this.progressHandler, false);\r\n      this.xhr.addEventListener(\"load\", this.doneHandler, false);\r\n      this.xhr.addEventListener(\"error\", this.doneHandler, false);\r\n      var uploadMethod = evalOpts(this.flowObj.opts.uploadMethod, this.fileObj, this);\r\n      var data = this.prepareXhrRequest(uploadMethod, false, this.flowObj.opts.method, this.bytes);\r\n      this.xhr.send(data);\r\n    }","code-length":405,"reference":"Uploads the actual data in a POST call\n","result":"Test the file .","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (isTest) {\r\n      if (this.readState === 1) {\r\n        return 'reading';\r\n      } else if (this.pendingRetry || this.preprocessState === 1) {\r\n        return 'uploading';\r\n      } else if (!this.xhr) {\r\n        return 'pending';\r\n      } else if (this.xhr.readyState < 4) {\r\n        return 'uploading';\r\n      } else {\r\n        if (this.flowObj.opts.successStatuses.indexOf(this.xhr.status) > -1) {\r\n\t\t\r\n          return 'success';\r\n        } else if (this.flowObj.opts.permanentErrors.indexOf(this.xhr.status) > -1 ||\r\n            !isTest && this.retries >= this.flowObj.opts.maxChunkRetries) {\r\n          return 'error';\r\n        } else {\r\n          this.abort();\r\n          return 'pending';\r\n        }\r\n      }\r\n    }","code-length":248,"reference":"Retrieve current chunk upload status\n","result":"Test the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(method, isTest, paramsMethod, blob) {\r\n      var query = evalOpts(this.flowObj.opts.query, this.fileObj, this, isTest);\r\n      query = extend(query || {}, this.getParams());\r\n      var target = evalOpts(this.flowObj.opts.target, this.fileObj, this, isTest);\r\n      var data = null;\r\n      if (method === 'GET' || paramsMethod === 'octet') {\r\n        var params = [];\r\n        each(query, function (v, k) {\r\n          params.push([encodeURIComponent(k), encodeURIComponent(v)].join('='));\r\n        });\r\n        target = this.getTarget(target, params);\r\n        data = blob || null;\r\n      } else {\r\n        data = new FormData();\r\n        each(query, function (v, k) {\r\n          data.append(k, v);\r\n        });\r\n        if (typeof blob !== \"undefined\") data.append(this.flowObj.opts.fileParameterName, blob, this.fileObj.file.name);\r\n      }\r\n      this.xhr.open(method, target, true);\r\n      this.xhr.withCredentials = this.flowObj.opts.withCredentials;\r\n      each(evalOpts(this.flowObj.opts.headers, this.fileObj, this, isTest), function (v, k) {\r\n        this.xhr.setRequestHeader(k, v);\r\n      }, this);\r\n      return data;\r\n    }","code-length":376,"reference":"Prepare Xhr request. Set query, headers and data\n","result":"Create a new XMLHttpRequest.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction evalOpts(data, args) {\r\n    if (typeof data === \"function\") {\r\n      args = Array.prototype.slice.call(arguments);\r\n      data = data.apply(null, args.slice(1));\r\n    }\r\n    return data;\r\n  }","code-length":76,"reference":"If option is a function, evaluate it with given params\n","result":"Evaluate options.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction each(obj, callback, context) {\r\n    if (!obj) {\r\n      return ;\r\n    }\r\n    var key;\r\nned') {\r\n      for (key = 0; key < obj.length; key++) {\r\n        if (callback.call(context, obj[key], key) === false) {\r\n          return ;\r\n        }\r\n      }\r\n    } else {\r\n      for (key in obj) {\r\n        if (obj.hasOwnProperty(key) && callback.call(context, obj[key], key) === false) {\r\n          return ;\r\n        }\r\n      }\r\n    }\r\n  }","code-length":165,"reference":"Iterate each element of an object\n","result":"Iterate over objects.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createTable() {\r\n    tableName = arguments[0];\r\n    var fname = '';\r\n    var callback;\r\n    if (arguments.length === 2) {\r\n        callback = arguments[1];\r\n        fname = path.join(userData, tableName + '.json');\r\n    } else if (arguments.length === 3) {\r\n        fname = path.join(arguments[1], arguments[0] + '.json');\r\n        callback = arguments[2];\r\n    }\r\n    let exists = fs.existsSync(fname);\r\n    if (exists) {\r\n        callback(false, tableName + '.json already exists!');\r\n        return;\r\n    } else {\r\n        let obj = new Object();\r\n        obj[tableName] = [];\r\n        try {\r\n            fs.writeFileSync(fname, JSON.stringify(obj, null, 2), (err) => {\r\n            })\r\n            callback(true, \"Success!\")\r\n            return;\r\n        } catch (e) {\r\n            callback(false, e.toString());\r\n            return;\r\n        }\r\n    }\r\n}","code-length":275,"reference":"Create a table | a json file\nThe second argument is optional, if ommitted, the file\nwill be created at the default location.\n","result":"Var tableName .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction valid() {\r\n    var fName = ''\r\n    if (arguments.length == 2) {\r\n        const dbName = arguments[0]\r\n        const dbLocation = arguments[1]\r\n        var fName = path.join(dbLocation, dbName + '.json')\r\n    } else if (arguments.length == 1) {\r\n        const dbName = arguments[0]\r\n        fname = path.join(userData, dbName + '.json')\r\n    }\r\n    const content = fs.readFileSync(fName, 'utf-8')\r\n    try {\r\n        JSON.parse(content)\r\n    } catch (e) {\r\n        return false\r\n    }\r\n    return true\r\n}","code-length":178,"reference":"Checks if a json file contains valid JSON string","result":"Check if the user is logged in.","score":[0.1214,0.2131]}
{"code":"\/*is used to<extra_id_0>\r\nfunction insertTableContent() {\r\n    let tableName = arguments[0];\r\n    var fname = '';\r\n    var callback;\r\n    var tableRow;\r\n    if (arguments.length === 3) {\r\n        callback = arguments[2];\r\n        fname = path.join(userData, arguments[0] + '.json');\r\n        tableRow = arguments[1];\r\n    } else if (arguments.length === 4) {\r\n        fname = path.join(arguments[1], arguments[0] + '.json');\r\n        callback = arguments[3];\r\n        tableRow = arguments[2];\r\n    }\r\n    let exists = fs.existsSync(fname);\r\n    if (exists) {\r\n        let table = JSON.parse(fs.readFileSync(fname));\r\n        let date = new Date();\r\n        let id = date.getTime();\r\n        tableRow['id'] = id;\r\n        table[tableName].push(tableRow);\r\n        try {\r\n            fs.writeFileSync(fname, JSON.stringify(table, null, 2), (err) => {\r\n            })\r\n            callback(true, \"Object written successfully!\");\r\n            return;\r\n        } catch (e) {\r\n            callback(false, \"Error writing object.\");\r\n            return;\r\n        }\r\n    }\r\n    callback(false, \"Table\/json file doesn't exist!\");\r\n    return;\r\n}","code-length":350,"reference":"Insert object to table. The object will be appended with the property, id\nwhich uses timestamp as value.\nThere are 3 required arguments.\n","result":"Insert table content.","score":[0.0005,0.0238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction count() {\r\n    let tableName = arguments[0]\r\n    let callback\r\n    if (arguments.length === 2) {\r\n        callback = arguments[1]\r\n        getAll(tableName, (succ, data) => {\r\n            if (succ) {\r\n                callback(true, data.length)\r\n                return\r\n            } else {\r\n                callback(false, data)\r\n                return\r\n            }\r\n        })\r\n    } else if (arguments.length === 3) {\r\n        callback = arguments[2]\r\n        getAll(tableName, arguments[1], (succ, data) => {\r\n            if (succ) {\r\n                callback(true, data.length)\r\n                return\r\n            } else {\r\n                callback(false, data)\r\n                return\r\n            }\r\n        })\r\n    } else {\r\n        callback(false,'Wrong number of arguments. Must be either 2 or 3 arguments including callback function.')\r\n        return\r\n    }\r\n}","code-length":251,"reference":"Count the number of rows for a given table.\n","result":"Count all rows in a table.","score":[0.1656,0.2299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateRow() {\r\n    let tableName = arguments[0];\r\n    var fname = '';\r\n    var where;\r\n    var set;\r\n    var callback;\r\n    if (arguments.length === 4) {\r\n        fname = path.join(userData, tableName + '.json');\r\n        where = arguments[1];\r\n        set = arguments[2];\r\n        callback = arguments[3];\r\n    } else if (arguments.length === 5) {\r\n        fname = path.join(arguments[1], arguments[0] + '.json');\r\n        where = arguments[2];\r\n        set = arguments[3];\r\n        callback = arguments[4];\r\n    }\r\n    let exists = fs.existsSync(fname);\r\n    let whereKeys = Object.keys(where);\r\n    let setKeys = Object.keys(set);\r\n    if (exists) {\r\n        let table = JSON.parse(fs.readFileSync(fname));\r\n        let rows = table[tableName];\r\n        let matched = 0;\r\n        let matchedIndex = 0;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            for (var j = 0; j < whereKeys.length; j++) {\r\n                if (rows[i].hasOwnProperty(whereKeys[j])) {\r\n                    if (rows[i][whereKeys[j]] === where[whereKeys[j]]) {\r\n                        matched++;\r\n                        matchedIndex = i;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (matched === whereKeys.length) {\r\n            try {\r\n                for (var k = 0; k < setKeys.length; k++) {\r\n                    rows[matchedIndex][setKeys[k]] = set[setKeys[k]];\r\n                }\r\n                let obj = new Object();\r\n                obj[tableName] = rows;\r\n                try {\r\n                    fs.writeFileSync(fname, JSON.stringify(obj, null, 2), (err) => {\r\n                    })\r\n                    callback(true, \"Success!\")\r\n                    return;\r\n                } catch (e) {\r\n                    callback(false, e.toString());\r\n                    return;\r\n                }\r\n                callback(true, rows);\r\n            } catch (e) {\r\n                callback(false, e.toString());\r\n                return;\r\n            }\r\n        } else {\r\n            callback(false, \"Cannot find the specified record.\");\r\n            return;\r\n        }\r\n    } else {\r\n        callback(false, 'Table file does not exist!');\r\n        return;\r\n    }\r\n}","code-length":639,"reference":"Update a row or record which satisfies the where clause\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createHeaderGetter (str) {\r\n  var name = str.toLowerCase()\r\n  return function (req, res) {\r\n    vary(res, str)\r\n    var header = req.headers[name]\r\n    if (!header) {\r\n      return undefined\r\n    }\r\n    var index = header.indexOf(',')\r\n    return index !== -1\r\n      ? header.substr(0, index).trim()\r\n      : header.trim()\r\n  }\r\n}","code-length":126,"reference":"Create a getter for the given header name.","result":"Create a header getter.","score":[0.1839,0.3363]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Param(name, shortName, process) {\r\n      if (process == null) {\r\n        process = cloudinary.Util.identity;\r\n      }\r\n            this.name = name;\r\n            this.shortName = shortName;\r\n            this.process = process;\r\n    }","code-length":77,"reference":"Represents a single parameter\n","result":"Create parameters.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ArrayParam(name, shortName, sep, process) {\r\n      if (sep == null) {\r\n        sep = '.';\r\n      }\r\n      this.sep = sep;\r\n      ArrayParam.__super__.constructor.call(this, name, shortName, process);\r\n    }","code-length":76,"reference":"A parameter that represents an array\n","result":"Create array parameters.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TransformationParam(name, shortName, sep, process) {\r\n      if (shortName == null) {\r\n        shortName = \"t\";\r\n      }\r\n      if (sep == null) {\r\n        sep = '.';\r\n      }\r\n      this.sep = sep;\r\n      TransformationParam.__super__.constructor.call(this, name, shortName, process);\r\n    }","code-length":99,"reference":"A parameter that represents a transformation\n","result":"Create a param for transformation.","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RangeParam(name, shortName, process) {\r\n      if (process == null) {\r\n        process = this.norm_range_value;\r\n      }\r\n      RangeParam.__super__.constructor.call(this, name, shortName, process);\r\n    }","code-length":71,"reference":"A parameter that represents a range\n","result":"Define the range parameter.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Configuration(options) {\r\n      if (options == null) {\r\n        options = {};\r\n      }\r\n      this.configuration = Util.cloneDeep(options);\r\n      Util.defaults(this.configuration, DEFAULT_CONFIGURATION_PARAMS);\r\n    }","code-length":71,"reference":"Cloudinary configuration class\n","result":"Create a configuration object.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Cloudinary(options) {\r\n      var configuration;\r\n      this.devicePixelRatioCache = {};\r\n      this.responsiveConfig = {};\r\n      this.responsiveResizeInitialized = false;\r\n      configuration = new Configuration(options);\r\n      this.config = function(newConfig, newValue) {\r\n        return configuration.config(newConfig, newValue);\r\n      };\r\n            this.fromDocument = function() {\r\n        configuration.fromDocument();\r\n        return this;\r\n      };\r\n            this.fromEnvironment = function() {\r\n        configuration.fromEnvironment();\r\n        return this;\r\n      };\r\n            this.init = function() {\r\n        configuration.init();\r\n        return this;\r\n      };\r\n    }","code-length":192,"reference":"Main Cloudinary class\n","result":"Initialize Cloudinary .","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMode(env, argv) {\r\n  argv = Object.keys(argv).length ? argv : require('minimist')(process.argv.slice(2));\r\n  var isProd = (argv.mode || env.mode) === 'production' || env === 'prod' || env.prod;\r\n  return isProd ? 'production' : 'development';\r\n}","code-length":95,"reference":"Determine the build mode.\n","result":"Determine the mode of the process.","score":[0.273,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveLodash(context, request, callback) {\r\n  if (\/^lodash\\\r\n    callback(null, {\r\n      commonjs: request,\r\n      commonjs2: request,\r\n      amd: request,\r\n      root: ['_', request.split('\/')[1]]\r\n    });\r\n  } else {\r\n    callback();\r\n  }\r\n}","code-length":102,"reference":"This function is used by webpack to resolve individual lodash modules\n","result":"Resolve lodash .","score":[0.0284,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction baseConfig(name, mode) {\r\n  const config = {\r\n    name: `${name}-${mode}`,\r\n    mode,\r\n    output: {\r\n      library: 'cloudinary',\r\n      libraryTarget: 'umd',\r\n      globalObject: \"this\",\r\n      pathinfo: false\r\n    },\r\n    optimization: {\r\n      concatenateModules: true,\r\n      moduleIds: 'named',\r\n      usedExports: true,\r\n      minimizer: [new TerserPlugin({\r\n        terserOptions: {\r\n          mangle: {\r\n            keep_classnames: true,\r\n            reserved: reserved,\r\n            ie8: true\r\n          }\r\n        },\r\n      })]\r\n    },\r\n    resolve: {\r\n      extensions: ['.js']\r\n    },\r\n    externals: [\r\n      {\r\n        jquery: 'jQuery'\r\n      }\r\n    ],\r\n    node: {\r\n      Buffer: false,\r\n      process: false\r\n    },\r\n    devtool: \"source-map\",\r\n    module: {\r\n      rules: [\r\n        {\r\n          test: \/\\.m?js$\/,\r\n          exclude: \/(node_modules|bower_components)\/,\r\n          use: {loader: 'babel-loader'}\r\n        }\r\n      ]\r\n    },\r\n    plugins: [\r\n      new webpack.BannerPlugin({\r\n        banner: ``,\r\n        raw: true,\r\n        entryOnly: true,\r\n      })\r\n    ]\r\n  };\r\n  let filename = `cloudinary-${name}`;\r\n  if(mode === 'production') { filename += '.min';}\r\n  const util = name.startsWith('jquery') ? 'jquery' : 'lodash';\r\n  const utilPath = path.resolve(__dirname, `src\/util\/${util}`);\r\n  config.output.filename = `.\/${filename}.js`;\r\n  config.entry = `.\/src\/namespace\/cloudinary-${name}.js`;\r\n  config.resolve.alias = {\r\n    \"..\/util$\": utilPath,\r\n    \".\/util$\": utilPath\r\n  };\r\n  if (name === 'core') {\r\n    config.externals.push(resolveLodash);\r\n  }\r\n  config.plugins.push(\r\n    new BundleAnalyzerPlugin({\r\n      analyzerMode: 'static',\r\n      reportFilename: `.\/${filename}-visualizer.html`,\r\n      openAnalyzer: false\r\n    })\r\n  );\r\n  return config;\r\n}","code-length":642,"reference":"Generate a webpack configuration\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction finalizeResourceType(resourceType = \"image\", type = \"upload\", urlSuffix, useRootPath, shorten) {\r\n  var options;\r\n  resourceType = resourceType == null ? \"image\" : resourceType;\r\n  type = type == null ? \"upload\" : type;\r\n  if (isPlainObject(resourceType)) {\r\n    options = resourceType;\r\n    resourceType = options.resource_type;\r\n    type = options.type;\r\n    urlSuffix = options.url_suffix;\r\n    useRootPath = options.use_root_path;\r\n    shorten = options.shorten;\r\n  }\r\n  if (type == null) {\r\n    type = 'upload';\r\n  }\r\n  if (urlSuffix != null) {\r\n    resourceType = SEO_TYPES[`${resourceType}\/${type}`];\r\n    type = null;\r\n    if (resourceType == null) {\r\n      throw new Error(`URL Suffix only supported for ${Object.keys(SEO_TYPES).join(', ')}`);\r\n    }\r\n  }\r\n  if (useRootPath) {\r\n    if (resourceType === 'image' && type === 'upload' || resourceType === \"images\") {\r\n      resourceType = null;\r\n      type = null;\r\n    } else {\r\n      throw new Error(\"Root path only supported for image\/upload\");\r\n    }\r\n  }\r\n  if (shorten && resourceType === 'image' && type === 'upload') {\r\n    resourceType = 'iu';\r\n    type = null;\r\n  }\r\n  return [resourceType, type].join(\"\/\");\r\n}","code-length":390,"reference":"Return the resource type and action type based on the given configuration\n","result":"Finalize the resource type .","score":[0.122,0.1327]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Drag(parent, options) {\r\n        _classCallCheck(this, Drag);\r\n        options = options || {};\r\n        var _this = _possibleConstructorReturn(this, (Drag.__proto__ || Object.getPrototypeOf(Drag)).call(this, parent));\r\n        _this.moved = false;\r\n        _this.wheelActive = utils.defaults(options.wheel, true);\r\n        _this.wheelScroll = options.wheelScroll || 1;\r\n        _this.reverse = options.reverse ? 1 : -1;\r\n        _this.clampWheel = options.clampWheel;\r\n        _this.factor = options.factor || 1;\r\n        _this.xDirection = !options.direction || options.direction === 'all' || options.direction === 'x';\r\n        _this.yDirection = !options.direction || options.direction === 'all' || options.direction === 'y';\r\n        _this.parseUnderflow(options.underflow || 'center');\r\n        _this.mouseButtons(options.mouseButtons);\r\n        return _this;\r\n    }","code-length":269,"reference":"enable one-finger touch to drag\n","result":"Create drag instances.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction each(object, fn) {\r\n  keys(object).forEach(function (key) {\r\n    return fn(object[key], key);\r\n  });\r\n}","code-length":51,"reference":"Array-like iteration for objects.\n\n","result":"Avoid the use of `keys` function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reduce(object, fn) {\r\n  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\r\n  return keys(object).reduce(function (accum, key) {\r\n    return fn(accum, object[key], key);\r\n  }, initial);\r\n}","code-length":85,"reference":"Array-like reduce for objects.\n\n","result":"Reduce the object.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isPlain(value) {\r\n  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;\r\n}","code-length":45,"reference":"Returns whether an object appears to be a \"plain\" object - that is, a\ndirect instance of `Object`.\n\n","result":"Detect string values.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction logByType(type, args) {\r\n  var stringify = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !!IE_VERSION && IE_VERSION < 11;\r\n  var lvl = log.levels[level];\r\n  var lvlRegExp = new RegExp('^(' + lvl + ')$');\r\n  if (type !== 'log') {\r\n    args.unshift(type.toUpperCase() + ':');\r\n  }\r\n  if (history) {\r\n    history.push([].concat(args));\r\n  }\r\n  args.unshift('VIDEOJS:');\r\n  var fn = window.console && window.console[type];\r\n  if (!fn || !lvl || !lvlRegExp.test(type)) {\r\n    return;\r\n  }\r\n  if (stringify) {\r\n    args = args.map(function (a) {\r\n      if (isObject(a) || Array.isArray(a)) {\r\n        try {\r\n          return JSON.stringify(a);\r\n        } catch (x) {\r\n          return String(a);\r\n        }\r\n      }\r\n      return String(a);\r\n    }).join(' ');\r\n  }\r\n  if (!fn.apply) {\r\n    fn(args);\r\n  } else {\r\n    fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);\r\n  }\r\n}","code-length":352,"reference":"Log messages to the console and history based on the type of message\n\n","result":"Log videojs messages.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createEl() {\r\n  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';\r\n  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\r\n  var content = arguments[3];\r\n  var el = document.createElement(tagName);\r\n  Object.getOwnPropertyNames(properties).forEach(function (propName) {\r\n    var val = properties[propName];\r\n    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {\r\n      log$1.warn(tsml(_templateObject, propName, val));\r\n      el.setAttribute(propName, val);\r\n    } else if (propName === 'textContent') {\r\n      textContent(el, val);\r\n    } else {\r\n      el[propName] = val;\r\n    }\r\n  });\r\n  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {\r\n    el.setAttribute(attrName, attributes[attrName]);\r\n  });\r\n  if (content) {\r\n    appendContent(el, content);\r\n  }\r\n  return el;\r\n}","code-length":329,"reference":"Creates an element and applies properties.\n\n","result":"Create the DOM element.","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addClass(element, classToAdd) {\r\n  if (element.classList) {\r\n    element.classList.add(classToAdd);\r\n  } else if (!hasClass(element, classToAdd)) {\r\n    element.className = (element.className + ' ' + classToAdd).trim();\r\n  }\r\n  return element;\r\n}","code-length":91,"reference":"Add a CSS class name to an element\n\n","result":"Add classes to an element.","score":[0.2064,0.4099]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toggleClass(element, classToToggle, predicate) {\r\n  var has = hasClass(element, classToToggle);\r\n  if (typeof predicate === 'function') {\r\n    predicate = predicate(element, classToToggle);\r\n  }\r\n  if (typeof predicate !== 'boolean') {\r\n    predicate = !has;\r\n  }\r\n  if (predicate === has) {\r\n    return;\r\n  }\r\n  if (predicate) {\r\n    addClass(element, classToToggle);\r\n  } else {\r\n    removeClass(element, classToToggle);\r\n  }\r\n  return element;\r\n}","code-length":157,"reference":"The callback definition for toggleElClass.\n\n","result":"Toggle classes on an element.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPointerPosition(el, event) {\r\n  var position = {};\r\n  var box = findPosition(el);\r\n  var boxW = el.offsetWidth;\r\n  var boxH = el.offsetHeight;\r\n  var boxY = box.top;\r\n  var boxX = box.left;\r\n  var pageY = event.pageY;\r\n  var pageX = event.pageX;\r\n  if (event.changedTouches) {\r\n    pageX = event.changedTouches[0].pageX;\r\n    pageY = event.changedTouches[0].pageY;\r\n  }\r\n  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) \/ boxH));\r\n  position.x = Math.max(0, Math.min(1, (pageX - boxX) \/ boxW));\r\n  return position;\r\n}","code-length":222,"reference":"x and y coordinates for a dom element or mouse pointer\n\n","result":"Calculate the pointer position.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction appendContent(el, content) {\r\n  normalizeContent(content).forEach(function (node) {\r\n    return el.appendChild(node);\r\n  });\r\n  return el;\r\n}","code-length":58,"reference":"Normalizes and appends content to an element.\n\n","result":"Append content.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getData(el) {\r\n  var id = el[elIdAttr];\r\n  if (!id) {\r\n    id = el[elIdAttr] = newGUID();\r\n  }\r\n  if (!elData[id]) {\r\n    elData[id] = {};\r\n  }\r\n  return elData[id];\r\n}","code-length":92,"reference":"Returns the cache object where data for an element is stored\n\n","result":"Get data from DOM.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hasData(el) {\r\n  var id = el[elIdAttr];\r\n  if (!id) {\r\n    return false;\r\n  }\r\n  return !!Object.getOwnPropertyNames(elData[id]).length;\r\n}","code-length":69,"reference":"Returns whether or not an element has cached data\n\n","result":"Detect data binding .","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeData(el) {\r\n  var id = el[elIdAttr];\r\n  if (!id) {\r\n    return;\r\n  }\r\n  delete elData[id];\r\n  try {\r\n    delete el[elIdAttr];\r\n  } catch (e) {\r\n    if (el.removeAttribute) {\r\n      el.removeAttribute(elIdAttr);\r\n    } else {\r\n      el[elIdAttr] = null;\r\n    }\r\n  }\r\n}","code-length":130,"reference":"Delete data for the element from the cache and the guid attr from getElementById\n\n","result":"Remove data from DOM elements.","score":[0.0472,0.0763]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _handleMultipleEvents(fn, elem, types, callback) {\r\n  types.forEach(function (type) {\r\n    fn(elem, type, callback);\r\n  });\r\n}","code-length":55,"reference":"Loops through an array of event types and calls the requested method for each type.\n\n","result":"Handle multiple events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction off(elem, type, fn) {\r\n  if (!hasData(elem)) {\r\n    return;\r\n  }\r\n  var data = getData(elem);\r\n  if (!data.handlers) {\r\n    return;\r\n  }\r\n  if (Array.isArray(type)) {\r\n    return _handleMultipleEvents(off, elem, type, fn);\r\n  }\r\n  var removeType = function removeType(t) {\r\n    data.handlers[t] = [];\r\n    _cleanUpEvents(elem, t);\r\n  };\r\n  if (!type) {\r\n    for (var t in data.handlers) {\r\n      removeType(t);\r\n    }\r\n    return;\r\n  }\r\n  var handlers = data.handlers[type];\r\n  if (!handlers) {\r\n    return;\r\n  }\r\n  if (!fn) {\r\n    removeType(type);\r\n    return;\r\n  }\r\n  if (fn.guid) {\r\n    for (var n = 0; n < handlers.length; n++) {\r\n      if (handlers[n].guid === fn.guid) {\r\n        handlers.splice(n--, 1);\r\n      }\r\n    }\r\n  }\r\n  _cleanUpEvents(elem, type);\r\n}","code-length":325,"reference":"Removes event listeners from an element\n\n","result":"Remove all handlers from an element.","score":[0.273,0.4259]}
{"code":"\/*is used to<extra_id_0>\r\nfunction one(elem, type, fn) {\r\n  if (Array.isArray(type)) {\r\n    return _handleMultipleEvents(one, elem, type, fn);\r\n  }\r\n  var func = function func() {\r\n    off(elem, type, func);\r\n    fn.apply(this, arguments);\r\n  };\r\n  func.guid = fn.guid = fn.guid || newGUID();\r\n  on(elem, type, func);\r\n}","code-length":122,"reference":"Trigger a listener only once for an event\n\n","result":"Handle multiple events on one event.","score":[0,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction autoSetup() {\r\n  if (!isReal()) {\r\n    return;\r\n  }\r\n  var vids = document.getElementsByTagName('video');\r\n  var audios = document.getElementsByTagName('audio');\r\n  var mediaEls = [];\r\n  if (vids && vids.length > 0) {\r\n    for (var i = 0, e = vids.length; i < e; i++) {\r\n      mediaEls.push(vids[i]);\r\n    }\r\n  }\r\n  if (audios && audios.length > 0) {\r\n    for (var _i = 0, _e = audios.length; _i < _e; _i++) {\r\n      mediaEls.push(audios[_i]);\r\n    }\r\n  }\r\n  if (mediaEls && mediaEls.length > 0) {\r\n    for (var _i2 = 0, _e2 = mediaEls.length; _i2 < _e2; _i2++) {\r\n      var mediaEl = mediaEls[_i2];\r\n      if (mediaEl && mediaEl.getAttribute) {\r\n        if (mediaEl.player === undefined) {\r\n          var options = mediaEl.getAttribute('data-setup');\r\n          if (options !== null) {\r\n            videojs$2(mediaEl);\r\n          }\r\n        }\r\n      } else {\r\n        autoSetupTimeout(1);\r\n        break;\r\n      }\r\n    }\r\n  } else if (!_windowLoaded) {\r\n    autoSetupTimeout(1);\r\n  }\r\n}","code-length":399,"reference":"Set up any tags that have a data-setup `attribute` when the player is started.","result":"Video element is loaded .","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction autoSetupTimeout(wait, vjs) {\r\n  if (vjs) {\r\n    videojs$2 = vjs;\r\n  }\r\n  window.setTimeout(autoSetup, wait);\r\n}","code-length":60,"reference":"Wait until the page is loaded before running autoSetup. This will be called in\nautoSetup if `hasLoaded` returns false.\n\n","result":"Detect video .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setTextContent(el, content) {\r\n  if (el.styleSheet) {\r\n    el.styleSheet.cssText = content;\r\n  } else {\r\n    el.textContent = content;\r\n  }\r\n}","code-length":65,"reference":"Add text to a DOM element.\n\n","result":"Set textContent .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction throttle(fn, wait) {\r\n  var last = Date.now();\r\n  var throttled = function throttled() {\r\n    var now = Date.now();\r\n    if (now - last >= wait) {\r\n      fn.apply(undefined, arguments);\r\n      last = now;\r\n    }\r\n  };\r\n  return throttled;\r\n}","code-length":95,"reference":"Wraps the given function, `fn`, with a new function that only invokes `fn`\nat most once per every `wait` milliseconds.\n\n","result":"Throttle functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isValidEventType(type) {\r\n  return (\r\n    typeof type === 'string' && \/\\S\/.test(type) || Array.isArray(type) && !!type.length\r\n  );\r\n}","code-length":60,"reference":"Whether a value is a valid event type - non-empty string or array.\n\n","result":"Validate event types.","score":[0.0146,0.1563]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Component(player, options, ready) {\r\n    classCallCheck(this, Component);\r\n    if (!player && this.play) {\r\n      this.player_ = player = this;\r\n    } else {\r\n      this.player_ = player;\r\n    }\r\n    this.options_ = mergeOptions({}, this.options_);\r\n    options = this.options_ = mergeOptions(this.options_, options);\r\n    this.id_ = options.id || options.el && options.el.id;\r\n    if (!this.id_) {\r\n      var id = player && player.id && player.id() || 'no_player';\r\n      this.id_ = id + '_component_' + newGUID();\r\n    }\r\n    this.name_ = options.name || null;\r\n    if (options.el) {\r\n      this.el_ = options.el;\r\n    } else if (options.createEl !== false) {\r\n      this.el_ = this.createEl();\r\n    }\r\n    evented(this, { eventBusKey: this.el_ ? 'el_' : null });\r\n    stateful(this, this.constructor.defaultState);\r\n    this.children_ = [];\r\n    this.childIndex_ = {};\r\n    this.childNameIndex_ = {};\r\n    if (options.initChildren !== false) {\r\n      this.initChildren();\r\n    }\r\n    this.ready(ready);\r\n    if (options.reportTouchActivity !== false) {\r\n      this.enableTouchActivity();\r\n    }\r\n  }","code-length":390,"reference":"A callback that is called when a component is ready. Does not have any\nparamters and any callback value will be ignored.\n\n","result":"Create a component.","score":[0.0007,0.0249]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rangeCheck(fnName, index, maxIndex) {\r\n  if (typeof index !== 'number' || index < 0 || index > maxIndex) {\r\n    throw new Error('Failed to execute \\'' + fnName + '\\' on \\'TimeRanges\\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');\r\n  }\r\n}","code-length":96,"reference":"An object that contains ranges of time for various reasons.\n\n","result":"Check the range of the index.","score":[0.0991,0.2662]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getRange(fnName, valueIndex, ranges, rangeIndex) {\r\n  rangeCheck(fnName, rangeIndex, ranges.length - 1);\r\n  return ranges[rangeIndex][valueIndex];\r\n}","code-length":57,"reference":"Check if any of the time ranges are over the maximum index.\n\n","result":"Generate the code.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createTimeRangesObj(ranges) {\r\n  if (ranges === undefined || ranges.length === 0) {\r\n    return {\r\n      length: 0,\r\n      start: function start() {\r\n        throw new Error('This TimeRanges object is empty');\r\n      },\r\n      end: function end() {\r\n        throw new Error('This TimeRanges object is empty');\r\n      }\r\n    };\r\n  }\r\n  return {\r\n    length: ranges.length,\r\n    start: getRange.bind(null, 'start', 0, ranges),\r\n    end: getRange.bind(null, 'end', 1, ranges)\r\n  };\r\n}","code-length":167,"reference":"Create a time range object givent ranges of time.\n\n","result":"Create the TimeRanges object.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createTimeRanges(start, end) {\r\n  if (Array.isArray(start)) {\r\n    return createTimeRangesObj(start);\r\n  } else if (start === undefined || end === undefined) {\r\n    return createTimeRangesObj();\r\n  }\r\n  return createTimeRangesObj([[start, end]]);\r\n}","code-length":90,"reference":"Should create a fake `TimeRange` object which mimics an HTML5 time range instance.\n\n","result":"Create the time ranges.","score":[0.0337,0.0826]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TextTrackCueList(cues) {\r\n    classCallCheck(this, TextTrackCueList);\r\n    var list = this;\r\n    if (IS_IE8) {\r\n      list = document.createElement('custom');\r\n      for (var prop in TextTrackCueList.prototype) {\r\n        if (prop !== 'constructor') {\r\n          list[prop] = TextTrackCueList.prototype[prop];\r\n        }\r\n      }\r\n    }\r\n    TextTrackCueList.prototype.setCues_.call(list, cues);\r\n        Object.defineProperty(list, 'length', {\r\n      get: function get$$1() {\r\n        return this.length_;\r\n      }\r\n    });\r\n    if (IS_IE8) {\r\n      return list;\r\n    }\r\n  }","code-length":213,"reference":"Create an instance of this class..\n\n","result":"Create a custom list of cues .","score":[0.1921,0.1639]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFileExtension(path) {\r\n  if (typeof path === 'string') {\r\n    var splitPathRe = \/^(\\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\\/]+?)(\\.([^\\.\\\/\\?]+)))(?:[\\\/]*|[\\?].*)$\/i;\r\n    var pathParts = splitPathRe.exec(path);\r\n    if (pathParts) {\r\n      return pathParts.pop().toLowerCase();\r\n    }\r\n  }\r\n  return '';\r\n}","code-length":128,"reference":"Returns the extension of the passed file name. It will return an empty string\nif passed an invalid path.\n\n","result":"Detect file extensions.","score":[0.002,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadTrack(src, track) {\r\n  var opts = {\r\n    uri: src\r\n  };\r\n  var crossOrigin = isCrossOrigin(src);\r\n  if (crossOrigin) {\r\n    opts.cors = crossOrigin;\r\n  }\r\n  xhr(opts, bind(this, function (err, response, responseBody) {\r\n    if (err) {\r\n      return log$1.error(err, response);\r\n    }\r\n    track.loaded_ = true;\r\n    if (typeof window.WebVTT !== 'function') {\r\n      if (track.tech_) {\r\n        var loadHandler = function loadHandler() {\r\n          return parseCues(responseBody, track);\r\n        };\r\n        track.tech_.on('vttjsloaded', loadHandler);\r\n        track.tech_.on('vttjserror', function () {\r\n          log$1.error('vttjs failed to load, stopping trying to process ' + track.src);\r\n          track.tech_.off('vttjsloaded', loadHandler);\r\n        });\r\n      }\r\n    } else {\r\n      parseCues(responseBody, track);\r\n    }\r\n  }));\r\n}","code-length":301,"reference":"Load a `TextTrack` from a specifed url.\n\n","result":"Process a video.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction constructColor(color, opacity) {\r\n  return 'rgba(' +\r\n  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';\r\n}","code-length":84,"reference":"Construct an rgba color from a given hex color code.\n\n","result":"Construct color .","score":[0.0471,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkVolumeSupport(self, player) {\r\n  if (player.tech_ && !player.tech_.featuresVolumeControl) {\r\n    self.addClass('vjs-hidden');\r\n  }\r\n  self.on(player, 'loadstart', function () {\r\n    if (!player.tech_.featuresVolumeControl) {\r\n      self.addClass('vjs-hidden');\r\n    } else {\r\n      self.removeClass('vjs-hidden');\r\n    }\r\n  });\r\n}","code-length":129,"reference":"Check if volume control is supported and if it isn't hide the\n`Component` that was passed  using the `vjs-hidden` class.\n\n","result":"Check volume support.","score":[0.0017,0.0546]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseOptionValue(value, parser) {\r\n  if (parser) {\r\n    value = parser(value);\r\n  }\r\n  if (value && value !== 'none') {\r\n    return value;\r\n  }\r\n}","code-length":65,"reference":"Get the actual value of an option.\n\n","result":"Parse the value.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkProgress() {\r\n        if (_this3.el_.currentTime > 0) {\r\n          if (_this3.el_.duration === Infinity) {\r\n            _this3.trigger('durationchange');\r\n          }\r\n          _this3.off('timeupdate', checkProgress);\r\n        }\r\n      }","code-length":86,"reference":"Wait for the first `timeupdate` with currentTime > 0 - there may be several with 0","result":"Check the progress of the element.","score":[0.0365,0.0333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findFirstPassingTechSourcePair(outerArray, innerArray, tester) {\r\n      var found = void 0;\r\n      outerArray.some(function (outerChoice) {\r\n        return innerArray.some(function (innerChoice) {\r\n          found = tester(outerChoice, innerChoice);\r\n          if (found) {\r\n            return true;\r\n          }\r\n        });\r\n      });\r\n      return found;\r\n    }","code-length":116,"reference":"Iterate over each `innerArray` element once per `outerArray` element and execute `tester` with both. If `tester` returns a non-falsy value, exit early and return that value.","result":"Filter the array.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction markPluginAsActive(player, name) {\r\n  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};\r\n  player[PLUGIN_CACHE_KEY][name] = true;\r\n}","code-length":62,"reference":"Marks a plugin as \"active\" on a player.\n\nAlso, ensures that the player has an object for tracking active plugins.\n\n","result":"Mark plugin as active.","score":[0.0083,0.1389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction triggerSetupEvent(player, hash, before) {\r\n  var eventName = (before ? 'before' : '') + 'pluginsetup';\r\n  player.trigger(eventName, hash);\r\n  player.trigger(eventName + ':' + hash.name, hash);\r\n}","code-length":73,"reference":"Triggers a pair of plugin setup events.\n\n","result":"Trigger plugin setup events.","score":[0.3108,0.5597]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createBasicPlugin(name, plugin) {\r\n  var basicPluginWrapper = function basicPluginWrapper() {\r\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);\r\n    var instance = plugin.apply(this, arguments);\r\n    markPluginAsActive(this, name);\r\n    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });\r\n    return instance;\r\n  };\r\n  Object.keys(plugin).forEach(function (prop) {\r\n    basicPluginWrapper[prop] = plugin[prop];\r\n  });\r\n  return basicPluginWrapper;\r\n}","code-length":162,"reference":"Takes a basic plugin function and returns a wrapper function which marks\non the player that the plugin has been activated.\n\n","result":"Create a plugin for the basic API.","score":[0.0309,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createPluginFactory(name, PluginSubClass) {\r\n  PluginSubClass.prototype.name = name;\r\n  return function () {\r\n    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);\r\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();\r\n    this[name] = function () {\r\n      return instance;\r\n    };\r\n    triggerSetupEvent(this, instance.getEventHash());\r\n    return instance;\r\n  };\r\n}","code-length":203,"reference":"Takes a plugin sub-class and returns a factory function for generating\ninstances of it.\n\nThis factory function will replace itself with an instance of the requested\nsub-class of Plugin.\n\n","result":"Create a plugin factory function.","score":[0.0031,0.0564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction videojs(id, options, ready) {\r\n  var tag = void 0;\r\n  if (typeof id === 'string') {\r\n    var players = videojs.getPlayers();\r\n    if (id.indexOf('#') === 0) {\r\n      id = id.slice(1);\r\n    }\r\n    if (players[id]) {\r\n      if (options) {\r\n        log$1.warn('Player \"' + id + '\" is already initialised. Options will not be applied.');\r\n      }\r\n      if (ready) {\r\n        players[id].ready(ready);\r\n      }\r\n      return players[id];\r\n    }\r\n    tag = $('#' + id);\r\n  } else {\r\n    tag = id;\r\n  }\r\n  if (!tag || !tag.nodeName) {\r\n    throw new TypeError('The element or ID supplied is not valid. (videojs)');\r\n  }\r\n  if (tag.player || Player.players[tag.playerId]) {\r\n    return tag.player || Player.players[tag.playerId];\r\n  }\r\n  options = options || {};\r\n  videojs.hooks('beforesetup').forEach(function (hookFunction) {\r\n    var opts = hookFunction(tag, mergeOptions(options));\r\n    if (!isObject(opts) || Array.isArray(opts)) {\r\n      log$1.error('please return an object in beforesetup hooks');\r\n      return;\r\n    }\r\n    options = mergeOptions(options, opts);\r\n  });\r\n  var PlayerComponent = Component.getComponent('Player');\r\n  var player = new PlayerComponent(tag, options, ready);\r\n  videojs.hooks('setup').forEach(function (hookFunction) {\r\n    return hookFunction(player);\r\n  });\r\n  return player;\r\n}","code-length":460,"reference":"Doubles as the main function for users to create a player instance and also\nthe main library object.\nThe `videojs` function can be used to initialize or retrieve a player.\n\n","result":"Initialize videojs.","score":[0,0.0184]}
{"code":"\/*is used to<extra_id_0>\r\nfunction byteCount(testName, len, baseLen) {\r\n  console.log(testName + \" Byte Count: \" + len + (baseLen ? ', ' + Math.round(len \/ baseLen * 100) + '%' : ''));\r\n}","code-length":65,"reference":"Comment out if you didn't `npm install lz-string`","result":"Test byte counts.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tvar colors = []\r\n\t\tvar trs = _$sortableDataList.find(\"li\");\r\n\t\tfor (var i=0; i<trs.length; i++) {\r\n\t\t\tcolors.push(utils.rgb2hex($(trs[i]).find(\".segmentColor\").css(\"background-color\")));\r\n\t\t}\r\n\t\tcolors = utils.shuffleArray(colors);\r\n\t\t_setColors(colors);\r\n\t}","code-length":122,"reference":"Randomizes whatever colors are currently being used.\n","result":"Create the sortable data .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(moduleID, message, data) {\r\n\t\tif (C.DEBUG) {\r\n\t\t\tconsole.log(\"[\" + moduleID + \"] publish(): \", message, data);\r\n\t\t}\r\n\t\tfor (var i in _modules) {\r\n\t\t\tvar subscriptions = _modules[i].subscriptions;\r\n\t\t\t\r\n\t\t\tif (subscriptions.hasOwnProperty(message)) {\r\n\t\t\t\tsubscriptions[message]({\r\n\t\t\t\t\tsender: moduleID,\r\n\t\t\t\t\tdata: data\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":144,"reference":"Publishes a message to anyone who's subscribed to it.\n","result":"Publish messages.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t$(document).on(\"click\", \".selectPage\", function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\t_selectPage(this.hash);\r\n\t\t});\r\n\t\t$(window).on(\"resize\", function() {\r\n\t\t\tvar width = $(window).width();\r\n\t\t\tvar height = $(window).height();\r\n\t\t\tvar breakPoint = _updateBodySizeClass(width);\r\n\t\t\tmediator.publish(_MODULE_ID, C.EVENT.PAGE.RESIZE, {\r\n\t\t\t\twidth: width,\r\n\t\t\t\theight: height,\r\n\t\t\t\tbreakPoint: breakPoint\r\n\t\t\t});\r\n\t\t});\r\n\t}","code-length":175,"reference":"this catches ALL nav clicks, not just in the main navbar","result":"Load the module .","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(width) {\r\n\t\tvar breakPointIndex = null;\r\n\t\tfor (var i=0; i< C.OTHER.BREAKPOINTS.length; i++) {\r\n\t\t\tif (width >= C.OTHER.BREAKPOINTS[i]) {\r\n\t\t\t\tbreakPointIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$(\"body\").removeClass(\"size768 size992 size1200\");\r\n\t\tvar breakPoint = null;\r\n\t\tif (breakPointIndex !== null) {\r\n\t\t\tbreakPoint = C.OTHER.BREAKPOINTS[breakPointIndex];\r\n\t\t\t$(\"body\").addClass(\"size\" + breakPoint);\r\n\t\t}\r\n\t\treturn breakPoint;\r\n\t}","code-length":187,"reference":"This was added to get around some CSS nonsense with the homepage slider script. It adds a class to the body\nelement that specifies the current viewport width.\n","result":"Set the breakpoint.","score":[0.0001,0.0196]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\tvar hb = new base.HandlebarsEnvironment();\r\n\t\t\tUtils.extend(hb, base);\r\n\t\t\thb.SafeString = SafeString;\r\n\t\t\thb.Exception = Exception;\r\n\t\t\thb.Utils = Utils;\r\n\t\t\thb.VM = runtime;\r\n\t\t\thb.template = function(spec) {\r\n\t\t\t\treturn runtime.template(spec, hb);\r\n\t\t\t};\r\n\t\t\treturn hb;\r\n\t\t}","code-length":129,"reference":"For compatibility and usage outside of module systems, make the Handlebars object a namespace","result":"Create a new HandlebarsEnvironment.","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(paramSize, params, useRegister) {\r\n\t\t\t\tvar options = '{' + this.setupOptions(paramSize, params).join(',') + '}';\r\n\t\t\t\tif (useRegister) {\r\n\t\t\t\t\tthis.useRegister('options');\r\n\t\t\t\t\tparams.push('options');\r\n\t\t\t\t\treturn 'options=' + options;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparams.push(options);\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t}\r\n\t\t\t}","code-length":121,"reference":"the params and contexts arguments are passed in arrays to fill in","result":"Generate the code.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(msg) {\r\n\t\t_canvasWidth = msg.data.config.size.canvasWidth;\r\n\t\t_canvasHeight = msg.data.config.size.canvasHeight;\r\n\t}","code-length":56,"reference":"Listen for data changes so we can keep track of the current canvas size.\n","result":"Create a new function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(number) {\r\n\t\t\t\t\tswitch (number) {\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t_demoPie2.redraw();\r\n\t\t\t\t\t\t\t_demoPie3.redraw();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t_demoPie1.redraw();\r\n\t\t\t\t\t\t\t_demoPie3.redraw();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t_demoPie1.redraw();\r\n\t\t\t\t\t\t\t_demoPie2.redraw();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}","code-length":159,"reference":"bah! God this plugin sucks. Doesn't even pass in the slide number we're going TO.","result":"Create a new demoPie .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tconfig.template.indexFile.options.data.C = _CONSTANTS.DEV;\r\n\t\tconfig.template.indexFile.options.data.D3PIE_VERSION = packageFile.version;\r\n\t\tconfig.template.devRequireConfig.options.data.handlebarsLib = _CONSTANTS.DEV.HANDLEBARS_LIB;\r\n\t\tconfig.template.devRequireConfig.options.data.baseUrl = _CONSTANTS.DEV.BASE_URL;\r\n\t\tvar lines = [];\r\n\t\tfor (var i in _requireJSModulePaths) {\r\n\t\t\tvar file = _requireJSModulePaths[i].replace(\/\\.js$\/, \"\");\r\n\t\t\tlines.push('\\t\\t\"' + i + '\": \"' + file + '\"');\r\n\t\t}\r\n\t\tconfig.template.devRequireConfig.options.data.moduleStr = lines.join(\",\\n\");\r\n\t\tconfig.template.constants.options.data.VERSION = packageFile.version;\r\n\t\tconfig.template.constants.options.data.MINIMIZED = _CONSTANTS.DEV.MINIMIZED;\r\n\t\tconfig.template.constants.options.data.DEBUG = _CONSTANTS.DEV.DEBUG;\r\n\t}","code-length":301,"reference":"The first step of the build process.","result":"Generate the index file.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\treturn {\r\n\t\t\theader:    titleTab.getTabData(),\r\n\t\t\tfooter:    footerTab.getTabData(),\r\n\t\t\tsize:      sizeTab.getTabData(),\r\n\t\t\tdata:      dataTab.getTabData(),\r\n\t\t\tlabels:    labelsTab.getTabData(),\r\n\t\t\ttooltips:  tooltipsTab.getTabData(),\r\n\t\t\teffects:   effectsTab.getTabData(),\r\n\t\t\tcallbacks: eventsTab.getTabData(),\r\n\t\t\tmisc:      miscTab.getTabData()\r\n\t\t};\r\n\t}","code-length":157,"reference":"Parses the generator fields and get the latest values.\n","result":"Create the tab objects.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getOrDef(obj, prop) {\r\n        return obj[prop] === undefined ? options[prop] : obj[prop];\r\n    }","code-length":42,"reference":"Return options.prop if obj.prop is undefined, otherwise return obj.prop\n","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction calcViewport() {\r\n        var scrollTop = $window.scrollTop(),\r\n            scrollLeft = window.pageXOffset || 0,\r\n            edgeX = options.edgeX,\r\n            edgeY = options.edgeY;\r\n        viewportTop = scrollTop - edgeY;\r\n        viewportBottom = scrollTop + (window.innerHeight || $window.height()) + edgeY;\r\n        viewportLeft = scrollLeft - edgeX;\r\n        viewportRight = scrollLeft + (window.innerWidth || $window.width()) + edgeX;\r\n    }","code-length":133,"reference":"Save visible viewport boundary to viewportXXX variables","result":"Calculate the viewport.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkVersion() {\r\n\t\tvar nextVersionCheckTimestamp = parseInt(Cookies.get('nextVersionCheckTimestamp')) || 0;\r\n\t\tif (!nextVersionCheckTimestamp || (Date.now() >= nextVersionCheckTimestamp)) {\r\n\t\t\t$http.get('\/api\/build-info')\r\n\t\t\t\t.then(function success(res) {\r\n\t\t\t\t\tvar currentVersion = parseVersion(res.data && res.data.version);\r\n\t\t\t\t\t$http.get('https:\r\n\t\t\t\t\t\t.then(\r\n\t\t\t\t\t\t\tfunction success(res) {\r\n\t\t\t\t\t\t\t\tvar eightDaysLater = Date.now() + (8 * 24 * 60 * 60 * 1000);\r\n\t\t\t\t\t\t\t\tCookies.set('nextVersionCheckTimestamp', eightDaysLater);\r\n\t\t\t\t\t\t\t\tvar latestVersionStr = res.data && res.data[0] && res.data[0].tag_name;\r\n\t\t\t\t\t\t\t\tvar latestVersionUrl = res.data && res.data[0] && res.data[0].html_url;\r\n\t\t\t\t\t\t\t\tvar latestVersion = parseVersion(latestVersionStr);\r\n\t\t\t\t\t\t\t\tif (latestVersion && (compareVersions(latestVersion, currentVersion) === 1)) {\r\n\t\t\t\t\t\t\t\t\t$.notify(\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tmessage:\r\n\t\t\t\t\t\t\t\t\t\t\t\t'A new OpenTest version is now available: <a href=\"' + latestVersionUrl + '\" target=\"_blank\">' + latestVersionStr + '<\/a>. ' +\r\n\t\t\t\t\t\t\t\t\t\t\t\t'You should always stay on the latest version to benefit from new features and security updates.'\r\n\t\t\t\t\t\t\t\t\t\t}, {\r\n\t\t\t\t\t\t\t\t\t\t\ttype: 'info',\r\n\t\t\t\t\t\t\t\t\t\t\tdelay: 0,\r\n\t\t\t\t\t\t\t\t\t\t\tplacement: { from: 'bottom' }\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tfunction error(res) {\r\n\t\t\t\t\t\t\t\tvar oneHourLater = Date.now() + (60 * 60 * 1000);\r\n\t\t\t\t\t\t\t\tCookies.set('nextVersionCheckTimestamp', oneHourLater);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t}\r\n\t}","code-length":507,"reference":"Check the release version in GitHub, compare it with the installedversion and notify the user if a new version is available.","result":"Check the OpenTest version.","score":[0.0064,0.0518]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseVersion(versionString) {\r\n\t\tif (typeof versionString !== 'string') {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar versionRegexMatch = versionString.match(\/v?(\\d+)\\.(\\d+)\\.(\\d+)\/i);\r\n\t\tif (versionRegexMatch) {\r\n\t\t\treturn [parseInt(versionRegexMatch[1]), parseInt(versionRegexMatch[2]), parseInt(versionRegexMatch[3])];\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}","code-length":141,"reference":"Parses a semantic version string into an array of three integers.","result":"Parse the version string.","score":[0.0555,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cellAccessor(row1, col1, row2, col2, isMerged) {\r\n    let theseCells = new cellBlock();\r\n    theseCells.ws = this;\r\n    row2 = row2 ? row2 : row1;\r\n    col2 = col2 ? col2 : col1;\r\n    if (row2 > this.lastUsedRow) {\r\n        this.lastUsedRow = row2;\r\n    }\r\n    if (col2 > this.lastUsedCol) {\r\n        this.lastUsedCol = col2;\r\n    }\r\n    for (let r = row1; r <= row2; r++) {\r\n        for (let c = col1; c <= col2; c++) {\r\n            let ref = `${utils.getExcelAlpha(c)}${r}`;\r\n            if (!this.cells[ref]) {\r\n                this.cells[ref] = new Cell(r, c);\r\n            }\r\n            if (!this.rows[r]) {\r\n                this.rows[r] = new Row(r, this);\r\n            }\r\n            if (this.rows[r].cellRefs.indexOf(ref) < 0) {\r\n                this.rows[r].cellRefs.push(ref);\r\n            }\r\n            theseCells.cells.push(this.cells[ref]);\r\n            theseCells.excelRefs.push(ref);\r\n        }\r\n    }\r\n    if (isMerged) {\r\n        theseCells.merged = true;\r\n        mergeCells(theseCells);\r\n    }\r\n    return theseCells;\r\n}","code-length":388,"reference":"Module repesenting a Cell Accessor\n","result":"Get the cell block for the given cell.","score":[0,0.0943]}
{"code":"\/*is used to<extra_id_0>\r\nfunction allProjects(done) {\r\n  User.find({}, function (err, users) {\r\n    if (err) return done(err);\r\n    Project.find()\r\n      .sort({_id: -1})\r\n      .exec(function (err, projects) {\r\n        if (err) return done(err);\r\n        done(null, projects.map(function (project) {\r\n          project = utils.sanitizeProject(project);\r\n          project.created_date = utils.timeFromId(project._id);\r\n          project.users = [];\r\n          for (var i = 0; i < users.length; i++) {\r\n            if ('undefined' !== typeof users[i].projects[project.name]) {\r\n              project.users.push({\r\n                email: users[i].email,\r\n                access: users[i].projects[project.name]\r\n              });\r\n            }\r\n          }\r\n          return project;\r\n        }));\r\n      });\r\n  });\r\n}","code-length":251,"reference":"Get a sanitized listing of all projects, along with the users who have access","result":"Fetch all projects.","score":[0.0104,0.0775]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getConfig() {\r\n  process.env = filterEnv(deprecated(process.env), envDefaults);\r\n  var rc = require('rc')('strider', defaults);\r\n  if (!rc.smtp) rc.smtp = smtp(rc);\r\n  if (!rc.smtp) rc.stubSmtp = true;\r\n  rc.ldap = getConfigByName('ldap');\r\n  addPlugins(rc, process.env);\r\n  if (hasGithub) {\r\n    rc.plugins.github = rc.plugins.github || {};\r\n    rc.plugins.github.hostname = rc.server_name;\r\n  }\r\n  debug(rc);\r\n  return rc;\r\n}","code-length":169,"reference":"main function. Get the config, using rc","result":"Get the config object.","score":[0.2134,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filterEnv(env, defaults) {\r\n  var res = {};\r\n  for (var k in env) {\r\n    if (defaults[k.toLowerCase()] !== undefined) {\r\n      res[`strider_${k.toLowerCase()}`] = env[k];\r\n    } else {\r\n      res[k] = env[k];\r\n    }\r\n  }\r\n  return res;\r\n}","code-length":111,"reference":"Filter process.env.FOO to process.env.strider_foo for rc's benefit","result":"Filter env.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergePlugins(branch, sjson) {\r\n  if (!branch) return sjson;\r\n  if (!sjson) return branch;\r\n  var plugins = [];\r\n  var pluginMap = {};\r\n  for (var pluginIndex = 0; pluginIndex < sjson.length; pluginIndex++) {\r\n    plugins.push(sjson[pluginIndex]);\r\n    pluginMap[sjson[pluginIndex].id] = true;\r\n  }\r\n  for (var branchIndex = 0; branchIndex < branch.length; branchIndex++) {\r\n    if (!pluginMap[branch[branchIndex].id]) plugins.push(branch[branchIndex]);\r\n  }\r\n  return plugins;\r\n}","code-length":174,"reference":"merge plugins from the DB with ones from strider.json. The latter overrides the former","result":"Merge plugins into a single branch.","score":[0.0509,0.142]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerTemplate(name, template, dir) {\r\n  cache[name] = function (context, cb) {\r\n    if (\/\\.html$\/.test(template)){\r\n      dir = dir || '.';\r\n      template = fs.readFileSync(path.join(dir, template), 'utf8');\r\n    }\r\n    cb(null, template);\r\n  };\r\n}","code-length":103,"reference":"Generate func for string template names","result":"Register templates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPluginTemplate(name, context) {\r\n  return function (cb) {\r\n    if (cache[name]){\r\n      cache[name](context, function (err, res) {\r\n        if (err) return cb(err);\r\n        cb(null, [name, res]);\r\n      });\r\n    } else {\r\n      cb(null, null);\r\n    }\r\n  };\r\n}","code-length":108,"reference":"This generates a generator that will render the appropriate block in a form suitable for async.parallel.","result":"Render plugin templates.","score":[0,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction engine(path, options, fn) {\r\n  options.filename = path;\r\n  fs.readFile(path, 'utf8', function (err, str) {\r\n    if (err) return fn(err);\r\n    engine.render(str, options, fn);\r\n  });\r\n}","code-length":81,"reference":"Express 3 Template Engine","result":"Create a new engine.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (uid, socket) {\r\n    var socks = this.sockets[uid];\r\n    if (!socks) return false;\r\n    return socks.remove(socket);\r\n  }","code-length":56,"reference":"-> true if the socket was found and removed. false if it wasn't found","result":"Remove a socket.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (socket) {\r\n    var session = socket.handshake.session;\r\n    if (session && session.passport) {\r\n      this.addSocket(session.passport.user, socket);\r\n    } else {\r\n      console.debug('Websocket connection does not have authorization - nothing to do.');\r\n    }\r\n  }","code-length":90,"reference":"socket callback. Adds a new socket","result":"Register websocket connections.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction status(job) {\r\n  if (job.errored) return 'errored';\r\n  if (!job.started) return 'submitted';\r\n  if (!job.finished) return 'running';\r\n  if (job.test_exitcode !== 0) return 'failed';\r\n  if (job.type !== TEST_ONLY && job.deploy_exitcode !== 0) return 'failed';\r\n  return 'passed';\r\n}","code-length":110,"reference":"failed, passed, errored, running, submitted","result":"Check status of a job.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareJob(emitter, job) {\r\n  Project.findOne({ name: job.project }).populate('creator').exec(function (err, project) {\r\n    if (err || !project) return debug('job.prepare - failed to get project', job.project, err);\r\n    var provider = common.extensions.provider[project.provider.id];\r\n    if (!provider) {\r\n      return debug('job.prepare - provider not found for project', job.project, project.provider.id);\r\n    }\r\n    Job.create(job, function (err, mjob) {\r\n      if (err) return debug('job.prepare - failed to save job', job, err);\r\n      var jjob = mjob.toJSON();\r\n      jjob.project = project;\r\n      jjob.providerConfig = project.provider.config;\r\n      jjob.fromStriderJson = true;\r\n      striderJson(provider, project, job.ref, function (err, config) {\r\n        if (err) {\r\n          if (err.status === 403 || err.statusCode === 403) {\r\n            debug('job.prepare - access to strider.json is forbidden, skipping config merge');\r\n            config = {};\r\n            jjob.fromStriderJson = false;\r\n          } else if (err.status === 404 || err.statusCode === 404) {\r\n            debug('job.prepare - strider.json not found, skipping config merge');\r\n            config = {};\r\n            jjob.fromStriderJson = false;\r\n          } else {\r\n            debug('job.prepare - error opening\/processing project\\'s `strider.json` file: ', err);\r\n            config = {};\r\n            jjob.fromStriderJson = false;\r\n          }\r\n        } else {\r\n          debug('Using configuration from \"strider.json\".');\r\n        }\r\n        var branch = project.branch(job.ref.branch || 'master');\r\n        if (!branch) {\r\n          return debug('job.prepare - branch not found', job.ref.branch || 'master', project.name);\r\n        }\r\n        branch = branch.mirror_master ? project.branch('master') : branch;\r\n        jjob.providerConfig = _.extend({}, project.provider.config, config.provider || {});\r\n        config.runner = config.runner || branch.runner;\r\n        if (!common.extensions.runner[config.runner.id]) {\r\n          debug(`Error: A job was registered for a runner that doesn't exist, i.e. \"${config.runner.id}\". This job will never run!`);\r\n        }\r\n        if (config) {\r\n          delete config.provider;\r\n          config = utils.mergeConfigs(branch, config);\r\n        }\r\n        emitter.emit('job.new', jjob, config);\r\n        if (!mjob.runner) mjob.runner = {};\r\n        mjob.runner.id = config.runner.id;\r\n        mjob.save()\r\n          .then(() => debug('job saved'))\r\n          .catch(e => debug(e));\r\n      });\r\n    });\r\n  });\r\n}","code-length":764,"reference":"definitely move it around when we make strider OO.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction killAttrs(model, attrs) {\r\n  for (var i = 0; i < attrs.length; i++) {\r\n    delete model[attrs[i]];\r\n  }\r\n}","code-length":55,"reference":"remove attributes from a model","result":"Kill the attributes of a model.","score":[0.2296,0.1961]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bodySetter(req, res, next) {\r\n  if (req._post_body) {\r\n    return next();\r\n  }\r\n  req.post_body = req.post_body || '';\r\n  if ('POST' !== req.method) {\r\n    return next();\r\n  }\r\n  req._post_body = true;\r\n  req.on('data', function (chunk) {\r\n    req.post_body += chunk;\r\n  });\r\n  next();\r\n}","code-length":129,"reference":"Custom middleware to save unparsed request body to req.content","result":"Set the body of the request.","score":[0.1171,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requireBody(paramsList) {\r\n  return function (req, res, next) {\r\n    var errors = [];\r\n    var status = 'ok';\r\n    for (var i = 0; i < paramsList.length; i++) {\r\n      var val = req.body[paramsList[i]];\r\n      if (!val) {\r\n        errors.push(`required parameter \\`${paramsList[i]}\\` not found.`);\r\n        status = 'error';\r\n      }\r\n    }\r\n    if (errors.length === 0) {\r\n      next();\r\n    } else {\r\n      return res.status(400).json({\r\n        errors: errors,\r\n        status: status\r\n      });\r\n    }\r\n  };\r\n}","code-length":195,"reference":"Require the specified req.body parameters, or else return a 400 with a descriptive JSON body","result":"Require body parameters.","score":[0.0089,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction anonProject(req, res, next) {\r\n  var name = `${req.params.org}\/${req.params.repo}`;\r\n  name = name.toLowerCase();\r\n  Project.findOne({name: name})\r\n    .populate('creator')\r\n    .exec(function (err, project) {\r\n      if (err) {\r\n        return res.status(500).send({\r\n          error: 'Failed to find project',\r\n          info: err\r\n        });\r\n      }\r\n      if (!project) {\r\n        return res.status(404).send('Project not found');\r\n      }\r\n      if (!project.creator) {\r\n        return res.status(400).send('Project malformed; project creator user is missing.');\r\n      }\r\n      req.project = project;\r\n      req.accessLevel = User.projectAccessLevel(req.user, project);\r\n      if (req.user && project.creator) {\r\n        req.user.isProjectCreator = project.creator._id.toString() === req.user._id.toString();\r\n      }\r\n      next();\r\n    });\r\n}","code-length":281,"reference":"just link project but doesn't fail if there's no auth","result":"Create an anonymous project.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requireUser(req, res, next) {\r\n  if (req.user) {\r\n    next();\r\n  } else {\r\n    req.session.return_to = req.url;\r\n    res.redirect('\/login');\r\n  }\r\n}","code-length":73,"reference":"Require a logged in session","result":"Require user.","score":[0.1116,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requireAdminOr401(req, res, next) {\r\n  if (!req.user || !req.user['account_level'] || req.user.account_level < 1) {\r\n    res.status(401).send('not authorized');\r\n  } else {\r\n    next();\r\n  }\r\n}","code-length":84,"reference":"Require admin privileges","result":"Prevent access to the app.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pluginBlock(indent, parser) {\r\n  var template = this.args[0];\r\n  var output = '';\r\n  output += `_context._striderRegister.push('${template}');\\n`;\r\n  output += `var _pg = _context._striderBlocks['${template}'];\\n`;\r\n  output += 'if (_pg){ ';\r\n  output += '_output += _pg;';\r\n  output += '} else {\\n';\r\n  output += parser.compile.call(this, `${indent} `);\r\n  output += '}\\n';\r\n  return output;\r\n}","code-length":155,"reference":"Plugin block is the tag used to specify that the contents can be overridden by extensions.","result":"Register plugin blocks.","score":[0,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _findNested (d) {\r\n  let nested = [];\r\n  walk.walkSync(d, (basedir, filename, stat) => {\r\n    const file = path.join(basedir, filename);\r\n    if (file.indexOf('.app\/Info.plist') !== -1) {\r\n      const nest = file.lastIndexOf('.app\/');\r\n      nested.push(file.substring(0, nest + 4));\r\n    }\r\n  });\r\n  return nested;\r\n}","code-length":128,"reference":"return an array of strings with the absolute paths of the sub-apps found inside appdir","result":"Find nested objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction binAbsLibs (file, o) {\r\n  try {\r\n    return bin.enumerateLibraries(file)\r\n      .filter((l) => {\r\n        return !(l.startsWith('\/'));\r\n      })\r\n      .map((l) => {\r\n        if (l[0] === '@') {\r\n          const ll = depSolver.resolvePath(o.exe, file, l, o.libs);\r\n          if (ll) {\r\n            l = ll;\r\n          } else {\r\n            console.error('Warning: Cannot resolve dependency library: ' + file);\r\n          }\r\n        }\r\n        return l;\r\n      });\r\n  } catch (e) {\r\n    console.error('Warning: missing file:', file);\r\n    return [];\r\n  }\r\n}","code-length":206,"reference":"return a list of the libs that must be inside the app","result":"Resolve absolute libraries.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _findLibraries (appdir, appbin, disklibs) {\r\n  const exe = path.join(appdir, appbin);\r\n  const o = {\r\n    exe: exe,\r\n    lib: exe,\r\n    libs: disklibs\r\n  };\r\n  const libraries = [];\r\n  const pending = [exe];\r\n  while (pending.length > 0) {\r\n    const target = pending.pop();\r\n    if (libraries.indexOf(target) === -1) {\r\n      libraries.push(target);\r\n    }\r\n    let res = binAbsLibs(target, o);\r\n    const unexplored = res.filter(l => libraries.indexOf(l) === -1);\r\n    pending.push(...unexplored.filter(l => pending.indexOf(l) === -1));\r\n    libraries.push(...unexplored);\r\n  }\r\n  return libraries;\r\n}","code-length":232,"reference":"get all dependencies from appbin recursively","result":"Find the libraries in the appdir.","score":[0,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fix (file, options, emit) {\r\n  const { appdir, bundleid, forceFamily, allowHttp } = options;\r\n  if (!file || !appdir) {\r\n    throw new Error('Invalid parameters for fixPlist');\r\n  }\r\n  let changed = false;\r\n  const data = plist.readFileSync(file);\r\n  delete data[''];\r\n  if (allowHttp) {\r\n    emit('message', 'Adding NSAllowArbitraryLoads');\r\n    if (!Object.isObject(data['NSAppTransportSecurity'])) {\r\n      data['NSAppTransportSecurity'] = {};\r\n    }\r\n    data['NSAppTransportSecurity']['NSAllowsArbitraryLoads'] = true;\r\n    changed = true;\r\n  }\r\n  if (forceFamily) {\r\n    if (performForceFamily(data, emit)) {\r\n      changed = true;\r\n    }\r\n  }\r\n  if (bundleid) {\r\n    setBundleId(data, bundleid);\r\n    changed = true;\r\n  }\r\n  if (changed) {\r\n    plist.writeFileSync(file, data);\r\n  }\r\n}","code-length":289,"reference":"ES7 is not yet here","result":"Fix the plist file .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateAccessor (accessor) {\r\n    return function () {\r\n      let value = container[varName]\r\n      if (typeof value === 'undefined') {\r\n        if (typeof defValue === 'undefined') {\r\n          return\r\n        }\r\n        value = defValue\r\n      }\r\n      if (isBase64) {\r\n        if (!value.match(base64Regex)) {\r\n          generateRaiseError(value)('should be a valid base64 string if using convertFromBase64')\r\n        }\r\n        value = Buffer.from(value, 'base64').toString()\r\n      }\r\n      const args = [\r\n        generateRaiseError(value),\r\n        value\r\n      ].concat(Array.prototype.slice.call(arguments))\r\n      return accessor.apply(\r\n        accessor,\r\n        args\r\n      )\r\n    }\r\n  }","code-length":218,"reference":"Returns an accessor wrapped by error handling and args passing logic\n","result":"Generate accessor functions.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (isRequired) {\r\n      if (isRequired === false) {\r\n        return accessors\r\n      }\r\n      if (typeof container[varName] === 'undefined' && typeof defValue === 'undefined') {\r\n        throw new EnvVarError(`\"${varName}\" is a required variable, but it was not set`)\r\n      }\r\n      return accessors\r\n    }","code-length":97,"reference":"Ensures a variable is set in the given environment container. Throws an\nEnvVarError if the variable is not set or a default is not provided\n","result":"Validate the environment variable.","score":[0.002,0.0437]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(ast, bodyContent) {\r\n      var macro = this.macros[ast.id];\r\n      var ret = '';\r\n      if (!macro) {\r\n        var jsmacros = this.jsmacros;\r\n        macro = jsmacros[ast.id];\r\n        var jsArgs = [];\r\n        if (macro && macro.apply) {\r\n          utils.forEach(ast.args, function(a) {\r\n            jsArgs.push(this.getLiteral(a));\r\n          }, this);\r\n          var self = this;\r\n          jsmacros.eval = function() {\r\n            return self.eval.apply(self, arguments);\r\n          };\r\n          try {\r\n            ret = macro.apply(jsmacros, jsArgs);\r\n          } catch (e) {\r\n            var pos = ast.pos;\r\n            var text = Velocity.Helper.getRefText(ast);\r\n            var err = '\\n      at ' + text + ' L\/N ' + pos.first_line + ':' + pos.first_column;\r\n            e.name = '';\r\n            e.message += err;\r\n            throw new Error(e);\r\n          }\r\n        }\r\n      } else {\r\n        var asts = macro.asts;\r\n        var args = macro.args;\r\n        var callArgs = ast.args;\r\n        var local = { bodyContent: bodyContent };\r\n        var guid = utils.guid();\r\n        var contextId = 'macro:' + ast.id + ':' + guid;\r\n        utils.forEach(args, function(ref, i) {\r\n          if (callArgs[i]) {\r\n            local[ref.id] = this.getLiteral(callArgs[i]);\r\n          } else {\r\n            local[ref.id] = undefined;\r\n          }\r\n        }, this);\r\n        ret = this.eval(asts, local, contextId);\r\n      }\r\n      return ret;\r\n    }","code-length":485,"reference":"parse macro call","result":"Evaluate expressions in the template.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkBinReferences_ (file, data, warn, cb) {\r\n  if (!(data.bin instanceof Object)) return cb()\r\n  var keys = Object.keys(data.bin)\r\n  var keysLeft = keys.length\r\n  if (!keysLeft) return cb()\r\n  function handleExists (relName, result) {\r\n    keysLeft--\r\n    if (!result) warn('No bin file found at ' + relName)\r\n    if (!keysLeft) cb()\r\n  }\r\n  keys.forEach(function (key) {\r\n    var dirName = path.dirname(file)\r\n    var relName = data.bin[key]\r\n    try {\r\n      var binPath = path.resolve(dirName, relName)\r\n      fs.stat(binPath, (err) => handleExists(relName, !err))\r\n    } catch (error) {\r\n      if (error.message === 'Arguments to path.resolve must be strings' || error.message.indexOf('Path must be a string') === 0) {\r\n        warn('Bin filename for ' + key + ' is not a string: ' + util.inspect(relName))\r\n        handleExists(relName, true)\r\n      } else {\r\n        cb(error)\r\n      }\r\n    }\r\n  })\r\n}","code-length":321,"reference":"Warn if the bin references don't point to anything.  This might be better in\nnormalize-package-data if it had access to the file path.","result":"Check bin references in files.","score":[0.0103,0.1205]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tself.bind('RuntimeInit', function(e, runtime) {\r\n\t\t\t\t\tself.ruid = runtime.uid;\r\n\t\t\t\t\tself.shimid = runtime.shimid;\r\n\t\t\t\t\tself.bind(\"Ready\", function() {\r\n\t\t\t\t\t\tself.trigger(\"Refresh\");\r\n\t\t\t\t\t}, 999);\r\n\t\t\t\t\t\r\n\t\t\t\t\tself.bind('Refresh', function() {\r\n\t\t\t\t\t\tvar pos, size, browseButton, shimContainer, zIndex;\r\n\t\t\t\t\t\tbrowseButton = Dom.get(options.browse_button);\r\n\t\t\t\t\t\tshimContainer = Dom.get(runtime.shimid);\r\n\t\t\t\t\t\tif (browseButton) {\r\n\t\t\t\t\t\t\tpos = Dom.getPos(browseButton, Dom.get(options.container));\r\n\t\t\t\t\t\t\tsize = Dom.getSize(browseButton);\r\n\t\t\t\t\t\t\tzIndex = parseInt(Dom.getStyle(browseButton, 'z-index'), 10) || 0;\r\n\t\t\t\t\t\t\tif (shimContainer) {\r\n\t\t\t\t\t\t\t\tBasic.extend(shimContainer.style, {\r\n\t\t\t\t\t\t\t\t\ttop: pos.y + 'px',\r\n\t\t\t\t\t\t\t\t\tleft: pos.x + 'px',\r\n\t\t\t\t\t\t\t\t\twidth: size.w + 'px',\r\n\t\t\t\t\t\t\t\t\theight: size.h + 'px',\r\n\t\t\t\t\t\t\t\t\tzIndex: zIndex + 1\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tshimContainer = browseButton = null;\r\n\t\t\t\t\t});\r\n\t\t\t\t\truntime.exec.call(self, 'FileInput', 'init', options);\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tself.connectRuntime(Basic.extend({}, options, {\r\n\t\t\t\t\trequired_caps: {\r\n\t\t\t\t\t\tselect_file: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}","code-length":452,"reference":"Initializes the file-picker, connects it to runtime and dispatches event ready when done.\n\n","result":"Initialize the FileInput object.","score":[0.0337,0.155]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, value) {\r\n\t\t\t\tif (!options.hasOwnProperty(name)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar oldValue = options[name];\r\n\t\t\t\tswitch (name) {\r\n\t\t\t\t\tcase 'accept':\r\n\t\t\t\t\t\tif (typeof(value) === 'string') {\r\n\t\t\t\t\t\t\tvalue = Mime.mimes2extList(value);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'container':\r\n\t\t\t\t\tcase 'required_caps':\r\n\t\t\t\t\t\tthrow new x.FileException(x.FileException.NO_MODIFICATION_ALLOWED_ERR);\r\n\t\t\t\t}\r\n\t\t\t\toptions[name] = value;\r\n\t\t\t\tthis.exec('FileInput', 'setOption', name, value);\r\n\t\t\t\tthis.trigger('OptionChanged', name, value, oldValue);\r\n\t\t\t}","code-length":212,"reference":"Sets a new value for the option specified by name\n\n","result":"Set options on.","score":[0,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(e, runtime) {\r\n\t\t\t\t\t\tself.unbind(\"RuntimeInit\", cb);\r\n\t\t\t\t\t\t_run.call(self, type, runtime);\r\n\t\t\t\t\t}","code-length":50,"reference":"we require this to run only once","result":"Create a new function .","score":[0,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\tthis.result = null;\r\n\t\t\t\t\r\n\t\t\t\tif (Basic.inArray(this.readyState, [FileReader.EMPTY, FileReader.DONE]) !== -1) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (this.readyState === FileReader.LOADING) {\r\n\t\t\t\t\tthis.readyState = FileReader.DONE;\r\n\t\t\t\t}\r\n\t\t\t\tthis.exec('FileReader', 'abort');\r\n\t\t\t\t\r\n\t\t\t\tthis.trigger('abort');\r\n\t\t\t\tthis.trigger('loadend');\r\n\t\t\t}","code-length":142,"reference":"Aborts preloading process.\n\n","result":"Create a new FileReader instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n\t\t\tvar list;\r\n\t\t\tif (type) {\r\n\t\t\t\ttype = type.toLowerCase();\r\n\t\t\t\tlist = eventpool[this.uid] && eventpool[this.uid][type];\r\n\t\t\t} else {\r\n\t\t\t\tlist = eventpool[this.uid];\r\n\t\t\t}\r\n\t\t\treturn list ? list : false;\r\n\t\t}","code-length":105,"reference":"Check if any handlers were registered to the specified event\n\n","result":"Create a new event.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, fn) {\r\n\t\t\tvar self = this, list, i;\r\n\t\t\ttype = type.toLowerCase();\r\n\t\t\tif (\/\\s\/.test(type)) {\r\n\t\t\t\t\r\n\t\t\t\tBasic.each(type.split(\/\\s+\/), function(type) {\r\n\t\t\t\t\tself.removeEventListener(type, fn);\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlist = eventpool[this.uid] && eventpool[this.uid][type];\r\n\t\t\tif (list) {\r\n\t\t\t\tif (fn) {\r\n\t\t\t\t\tfor (i = list.length - 1; i >= 0; i--) {\r\n\t\t\t\t\t\tif (list[i].fn === fn) {\r\n\t\t\t\t\t\t\tlist.splice(i, 1);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlist = [];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!list.length) {\r\n\t\t\t\t\tdelete eventpool[this.uid][type];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (Basic.isEmptyObj(eventpool[this.uid])) {\r\n\t\t\t\t\t\tdelete eventpool[this.uid];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}","code-length":318,"reference":"Unregister the handler from the event, or if former was not specified - unregister all handlers\n\n","result":"Remove a listener from the DOM.","score":[0.0516,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, fn, priority, scope) {\r\n\t\t\tvar self = this;\r\n\t\t\tself.bind.call(this, type, function cb() {\r\n\t\t\t\tself.unbind(type, cb);\r\n\t\t\t\treturn fn.apply(this, arguments);\r\n\t\t\t}, priority, scope);\r\n\t\t}","code-length":87,"reference":"Register a handler to the event type that will run only once\n\n","result":"Bind and unbind functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(cap, value) {\r\n\t\t\t\tvar refCaps = arguments[2] || caps;\r\n\t\t\t\t\r\n\t\t\t\tif (Basic.typeOf(cap) === 'string' && Basic.typeOf(value) === 'undefined') {\r\n\t\t\t\t\tcap = Runtime.parseCaps(cap);\r\n\t\t\t\t}\r\n\t\t\t\tif (Basic.typeOf(cap) === 'object') {\r\n\t\t\t\t\tfor (var key in cap) {\r\n\t\t\t\t\t\tif (!this.can(key, cap[key], refCaps)) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (Basic.typeOf(refCaps[cap]) === 'function') {\r\n\t\t\t\t\treturn refCaps[cap].call(this, value);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn (value === refCaps[cap]);\r\n\t\t\t\t}\r\n\t\t\t}","code-length":232,"reference":"Checks if the runtime has specific capability\n\n","result":"Test if a given capability is supported by the current browser.","score":[0.1288,0.2027]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getShimVersion() {\r\n\t\tvar version;\r\n\t\ttry {\r\n\t\t\tversion = navigator.plugins['Shockwave Flash'];\r\n\t\t\tversion = version.description;\r\n\t\t} catch (e1) {\r\n\t\t\ttry {\r\n\t\t\t\tversion = new ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version');\r\n\t\t\t} catch (e2) {\r\n\t\t\t\tversion = '0.0';\r\n\t\t\t}\r\n\t\t}\r\n\t\tversion = version.match(\/\\d+\/g);\r\n\t\treturn parseFloat(version[0] + '.' + version[1]);\r\n\t}","code-length":167,"reference":"Get the version of the Flash Player\n\n","result":"Detect the browser version.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeSWF(id) {\r\n        var obj = Dom.get(id);\r\n        if (obj && obj.nodeName == \"OBJECT\") {\r\n            if (Env.browser === 'IE') {\r\n                obj.style.display = \"none\";\r\n                (function onInit(){\r\n                \t            removeObjectInIE(id);\r\n                    }\r\n                    else {\r\n                        setTimeout(onInit, 10);\r\n                    }\r\n                })();\r\n            }\r\n            else {\r\n                obj.parentNode.removeChild(obj);\r\n            }\r\n        }\r\n    }","code-length":154,"reference":"Cross-browser SWF removal\n- Especially needed to safely and completely remove a SWF in Internet Explorer\n\nOriginated from SWFObject v2.2 <http:\/\/code.google.com\/p\/swfobject\/>","result":"Remove SWF from DOM.","score":[0.0054,0.0777]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(url) {\r\n\t\tfunction origin(url) {\r\n\t\t\treturn [url.scheme, url.host, url.port].join('\/');\r\n\t\t}\r\n\t\tif (typeof url === 'string') {\r\n\t\t\turl = parseUrl(url);\r\n\t\t}\r\n\t\treturn origin(parseUrl()) === origin(url);\r\n\t}","code-length":99,"reference":"Check if specified url has the same origin as the current document\n\n","result":"\t\treturn origin.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ctor() {\r\n\t\t\tthis.constructor = child;\r\n\t\t\tif (MXI_DEBUG) {\r\n\t\t\t\tvar getCtorName = function(fn) {\r\n\t\t\t\t\tvar m = fn.toString().match(\/^function\\s([^\\(\\s]+)\/);\r\n\t\t\t\t\treturn m ? m[1] : false;\r\n\t\t\t\t};\r\n\t\t\t\tthis.ctorName = getCtorName(child);\r\n\t\t\t}\r\n\t\t}","code-length":115,"reference":"give child `class` a place to define its own methods","result":"Construct the child class.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inArray(needle, array) {\r\n\t\tif (array) {\r\n\t\t\tif (Array.prototype.indexOf) {\r\n\t\t\t\treturn Array.prototype.indexOf.call(array, needle);\r\n\t\t\t}\r\n\t\t\tfor (var i = 0, length = array.length; i < length; i++) {\r\n\t\t\t\tif (array[i] === needle) {\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn -1;\r\n\t}","code-length":134,"reference":"Find an element in array and return it's index if present, otherwise return -1.\n\n","result":"Avoid circular references.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayDiff(needles, array) {\r\n\t\tvar diff = [];\r\n\t\tif (typeOf(needles) !== 'array') {\r\n\t\t\tneedles = [needles];\r\n\t\t}\r\n\t\tif (typeOf(array) !== 'array') {\r\n\t\t\tarray = [array];\r\n\t\t}\r\n\t\tfor (var i in needles) {\r\n\t\t\tif (inArray(needles[i], array) === -1) {\r\n\t\t\t\tdiff.push(needles[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn diff.length ? diff : false;\r\n\t}","code-length":165,"reference":"Returns elements of first array if they are not present in second. And false - otherwise.\n\n","result":"Compare arrays .","score":[0,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayIntersect(array1, array2) {\r\n\t\tvar result = [];\r\n\t\teach(array1, function(item) {\r\n\t\t\tif (inArray(item, array2) !== -1) {\r\n\t\t\t\tresult.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn result.length ? result : null;\r\n\t}","code-length":99,"reference":"Find intersection of two arrays.\n\n","result":"Test arrayIntersect .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseSizeStr(size) {\r\n\t\tif (typeof(size) !== 'string') {\r\n\t\t\treturn size;\r\n\t\t}\r\n\t\tvar muls = {\r\n\t\t\t\tt: 1099511627776,\r\n\t\t\t\tg: 1073741824,\r\n\t\t\t\tm: 1048576,\r\n\t\t\t\tk: 1024\r\n\t\t\t},\r\n\t\t\tmul;\r\n\t\tsize = \/^([0-9\\.]+)([tmgk]?)$\/.exec(size.toLowerCase().replace(\/[^0-9\\.tmkg]\/g, ''));\r\n\t\tmul = size[2];\r\n\t\tsize = +size[1];\r\n\t\tif (muls.hasOwnProperty(mul)) {\r\n\t\t\tsize *= muls[mul];\r\n\t\t}\r\n\t\treturn Math.floor(size);\r\n\t}","code-length":217,"reference":"Parses the specified size string into a byte value. For example 10kb becomes 10240.\n\n","result":"Parse size strings.","score":[0.0104,0.0775]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, value) {\r\n\t\t\t\tvar self = this, valueType = Basic.typeOf(value);\r\n\t\t\t\t\r\n\t\t\t\tif (value instanceof Blob) {\r\n\t\t\t\t\t_blob = {\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t};\r\n\t\t\t\t} else if ('array' === valueType) {\r\n\t\t\t\t\tname += '[]';\r\n\t\t\t\t\tBasic.each(value, function(value) {\r\n\t\t\t\t\t\tself.append(name, value);\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if ('object' === valueType) {\r\n\t\t\t\t\tBasic.each(value, function(value, key) {\r\n\t\t\t\t\t\tself.append(name + '[' + key + ']', value);\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if ('null' === valueType || 'undefined' === valueType || 'number' === valueType && isNaN(value)) {\r\n\t\t\t\t\tself.append(name, \"false\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_fields.push({\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tvalue: value.toString()\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}","code-length":276,"reference":"Append another key-value pair to the FormData object\n\n","result":"Create a new FormData object.","score":[0.1319,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(cb) {\r\n\t\t\t\tBasic.each(_fields, function(field) {\r\n\t\t\t\t\tcb(field.value, field.name);\r\n\t\t\t\t});\r\n\t\t\t\tif (_blob) {\r\n\t\t\t\t\tcb(_blob.value, _blob.name);\r\n\t\t\t\t}\r\n\t\t\t}","code-length":83,"reference":"Loop over the fields in FormData and invoke the callback for each of them.\n\n","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, name) {\r\n\t\tif (!obj.className) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar regExp = new RegExp(\"(^|\\\\s+)\"+name+\"(\\\\s+|$)\");\r\n\t\treturn regExp.test(obj.className);\r\n\t}","code-length":81,"reference":"Checks if specified DOM element has specified class.\n\n","result":"Test if a class name is found in an object.","score":[0.1086,0.061]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, name) {\r\n\t\tif (!hasClass(obj, name)) {\r\n\t\t\tobj.className = !obj.className ? name : obj.className.replace(\/\\s+$\/, '') + ' ' + name;\r\n\t\t}\r\n\t}","code-length":72,"reference":"Adds specified className to specified DOM element.\n\n","result":"Toggle classes.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, name) {\r\n\t\tif (obj.className) {\r\n\t\t\tvar regExp = new RegExp(\"(^|\\\\s+)\"+name+\"(\\\\s+|$)\");\r\n\t\t\tobj.className = obj.className.replace(regExp, function($0, $1, $2) {\r\n\t\t\t\treturn $1 === ' ' && $2 === ' ' ? ' ' : '';\r\n\t\t\t});\r\n\t\t}\r\n\t}","code-length":115,"reference":"Removes specified className from specified DOM element.\n\n","result":"Replace class names in an element.","score":[0.1634,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, name) {\r\n\t\tif (obj.currentStyle) {\r\n\t\t\treturn obj.currentStyle[name];\r\n\t\t} else if (window.getComputedStyle) {\r\n\t\t\treturn window.getComputedStyle(obj, null)[name];\r\n\t\t}\r\n\t}","code-length":81,"reference":"Returns a given computed style of a DOM element.\n\n","result":"Get the current style of an object.","score":[0.1716,0.2131]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node, root) {\r\n\t\tvar x = 0, y = 0, parent, doc = document, nodeRect, rootRect;\r\n\t\tnode = node;\r\n\t\troot = root || doc.body;\r\n\t\t\r\n\t\tfunction getIEPos(node) {\r\n\t\t\tvar bodyElm, rect, x = 0, y = 0;\r\n\t\t\tif (node) {\r\n\t\t\t\trect = node.getBoundingClientRect();\r\n\t\t\t\tbodyElm = doc.compatMode === \"CSS1Compat\" ? doc.documentElement : doc.body;\r\n\t\t\t\tx = rect.left + bodyElm.scrollLeft;\r\n\t\t\t\ty = rect.top + bodyElm.scrollTop;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tx : x,\r\n\t\t\t\ty : y\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\tif (node && node.getBoundingClientRect && Env.browser === 'IE' && (!doc.documentMode || doc.documentMode < 8)) {\r\n\t\t\tnodeRect = getIEPos(node);\r\n\t\t\trootRect = getIEPos(root);\r\n\t\t\treturn {\r\n\t\t\t\tx : nodeRect.x - rootRect.x,\r\n\t\t\t\ty : nodeRect.y - rootRect.y\r\n\t\t\t};\r\n\t\t}\r\n\t\tparent = node;\r\n\t\twhile (parent && parent != root && parent.nodeType) {\r\n\t\t\tx += parent.offsetLeft || 0;\r\n\t\t\ty += parent.offsetTop || 0;\r\n\t\t\tparent = parent.offsetParent;\r\n\t\t}\r\n\t\tparent = node.parentNode;\r\n\t\twhile (parent && parent != root && parent.nodeType) {\r\n\t\t\tx -= parent.scrollLeft || 0;\r\n\t\t\ty -= parent.scrollTop || 0;\r\n\t\t\tparent = parent.parentNode;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tx : x,\r\n\t\t\ty : y\r\n\t\t};\r\n\t}","code-length":491,"reference":"Returns the absolute x, y position of an Element. The position will be returned in a object with x, y fields.\n\n","result":"Create a DOM object for DOM elements.","score":[0.026,0.051]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getIEPos(node) {\r\n\t\t\tvar bodyElm, rect, x = 0, y = 0;\r\n\t\t\tif (node) {\r\n\t\t\t\trect = node.getBoundingClientRect();\r\n\t\t\t\tbodyElm = doc.compatMode === \"CSS1Compat\" ? doc.documentElement : doc.body;\r\n\t\t\t\tx = rect.left + bodyElm.scrollLeft;\r\n\t\t\t\ty = rect.top + bodyElm.scrollTop;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tx : x,\r\n\t\t\t\ty : y\r\n\t\t\t};\r\n\t\t}","code-length":151,"reference":"Returns the x, y cordinate for an element on IE 6 and IE 7","result":"Get the position of an element in IE.","score":[0.1027,0.1907]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node) {\r\n\t\treturn {\r\n\t\t\tw : node.offsetWidth || node.clientWidth,\r\n\t\t\th : node.offsetHeight || node.clientHeight\r\n\t\t};\r\n\t}","code-length":60,"reference":"Returns the size of the specified node in pixels.\n\n","result":"Create a window object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, key) {\t\t\r\n\t\tif (!obj || !obj[uid]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tBasic.each(eventhash[obj[uid]], function(events, name) {\r\n\t\t\tremoveEvent(obj, name, key);\r\n\t\t});\r\n\t}","code-length":90,"reference":"Remove all kind of events from the specified object\n\n","result":"Remove events from an object.","score":[0.169,0.2972]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _preloadAndSend(meta, data) {\r\n\t\t\tvar target = this, blob, fr;\r\n\t\t\t\t\r\n\t\t\t\r\n\t\t\tblob = data.getBlob().getSource();\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfr = new window.FileReader();\r\n\t\t\tfr.onload = function() {\r\n\t\t\t\t\r\n\t\t\t\tdata.append(data.getBlobName(), new Blob(null, {\r\n\t\t\t\t\ttype: blob.type,\r\n\t\t\t\t\tdata: fr.result\r\n\t\t\t\t}));\r\n\t\t\t\t\r\n\t\t\t\tself.send.call(target, meta, data);\r\n\t\t\t};\r\n\t\t\tfr.readAsBinaryString(blob);\r\n\t\t}","code-length":174,"reference":"here we go... ugly fix for ugly bug","result":"Send data to the target.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _rotateToOrientaion(img, orientation) {\r\n\t\t\tvar RADIANS = Math.PI\/180;\r\n\t\t\tvar canvas = document.createElement('canvas');\r\n\t\t\tvar ctx = canvas.getContext('2d');\r\n\t\t\tvar width = img.width;\r\n\t\t\tvar height = img.height;\r\n\t\t\tif (Basic.inArray(orientation, [5,6,7,8]) > -1) {\r\n\t\t\t\tcanvas.width = height;\r\n\t\t\t\tcanvas.height = width;\r\n\t\t\t} else {\r\n\t\t\t\tcanvas.width = width;\r\n\t\t\t\tcanvas.height = height;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tswitch (orientation) {\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.translate(width, 0);\r\n\t\t\t\t\tctx.scale(-1, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.translate(width, height);\r\n\t\t\t\t\tctx.rotate(180 * RADIANS);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.translate(0, height);\r\n\t\t\t\t\tctx.scale(1, -1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.rotate(90 * RADIANS);\r\n\t\t\t\t\tctx.scale(1, -1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.rotate(90 * RADIANS);\r\n\t\t\t\t\tctx.translate(0, -height);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.rotate(90 * RADIANS);\r\n\t\t\t\t\tctx.translate(width, -height);\r\n\t\t\t\t\tctx.scale(-1, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\t\r\n\t\t\t\t\tctx.rotate(-90 * RADIANS);\r\n\t\t\t\t\tctx.translate(-width, 0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tctx.drawImage(img, 0, 0, width, height);\r\n\t\t\treturn canvas;\r\n\t\t}","code-length":521,"reference":"Transform canvas coordination according to specified frame size and orientation\nOrientation value is from EXIF tag\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEntries(cbcb) {\r\n\t\t\t\tdirReader.readEntries(function(moreEntries) {\r\n\t\t\t\t\tif (moreEntries.length) {\r\n\t\t\t\t\t\t[].push.apply(entries, moreEntries);\r\n\t\t\t\t\t\tgetEntries(cbcb);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcbcb();\r\n\t\t\t\t\t}\r\n\t\t\t\t}, cbcb);\r\n\t\t\t}","code-length":101,"reference":"keep quering recursively till no more entries","result":"Generate the source code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(method, url, async, user, password) {\r\n\t\t\t\tvar urlp;\r\n\t\t\t\t\r\n\t\t\t\tif (!method || !url) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.SYNTAX_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (\/[\\u0100-\\uffff]\/.test(method) || Encode.utf8_encode(method) !== method) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.SYNTAX_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!!~Basic.inArray(method.toUpperCase(), ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT', 'TRACE', 'TRACK'])) {\r\n\t\t\t\t\t_method = method.toUpperCase();\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!!~Basic.inArray(_method, ['CONNECT', 'TRACE', 'TRACK'])) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.SECURITY_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\turl = Encode.utf8_encode(url);\r\n\t\t\t\t\r\n\t\t\t\turlp = Url.parseUrl(url);\r\n\t\t\t\t_same_origin_flag = Url.hasSameOrigin(urlp);\r\n\t\t\t\t\r\n\t\t\t\t_url = Url.resolveUrl(url);\r\n\t\t\t\t\r\n\t\t\t\tif ((user || password) && !_same_origin_flag) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_ACCESS_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t_user = user || urlp.user;\r\n\t\t\t\t_password = password || urlp.pass;\r\n\t\t\t\t\r\n\t\t\t\t_async = async || true;\r\n\t\t\t\tif (_async === false && (_p('timeout') || _p('withCredentials') || _p('responseType') !== \"\")) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_ACCESS_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t_sync_flag = !_async;\r\n\t\t\t\t_send_flag = false;\r\n\t\t\t\t_headers = {};\r\n\t\t\t\t_reset.call(this);\r\n\t\t\t\t\r\n\t\t\t\t_p('readyState', XMLHttpRequest.OPENED);\r\n\t\t\t\t\r\n\t\t\t\tthis.dispatchEvent('readystatechange');\r\n\t\t\t}","code-length":574,"reference":"Sets the request method, request URL, synchronous flag, request username, and request password.\n\nThrows a \"SyntaxError\" exception if one of the following is true:\n\nmethod is not a valid HTTP method.\nurl cannot be resolved.\nurl contains the \"user:password\" format in the userinfo production.\nThrows a \"SecurityError\" exception if method is a case-insensitive match for CONNECT, TRACE or TRACK.\n\nThrows an \"InvalidAccessError\" exception if one of the following is true:\n\nEither user or password is passed as argument and the origin of url does not match the XMLHttpRequest origin.\nThere is an associated XMLHttpRequest document and either the timeout attribute is not zero,\nthe withCredentials attribute is true, or the responseType attribute is not the empty string.\n\n\n","result":"Code too long,keep in 512.","score":[0.0,0.0047]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(header, value) {\r\n\t\t\t\tvar uaHeaders = [\r\n\t\t\t\t\t\t\"accept-charset\",\r\n\t\t\t\t\t\t\"accept-encoding\",\r\n\t\t\t\t\t\t\"access-control-request-headers\",\r\n\t\t\t\t\t\t\"access-control-request-method\",\r\n\t\t\t\t\t\t\"connection\",\r\n\t\t\t\t\t\t\"content-length\",\r\n\t\t\t\t\t\t\"cookie\",\r\n\t\t\t\t\t\t\"cookie2\",\r\n\t\t\t\t\t\t\"content-transfer-encoding\",\r\n\t\t\t\t\t\t\"date\",\r\n\t\t\t\t\t\t\"expect\",\r\n\t\t\t\t\t\t\"host\",\r\n\t\t\t\t\t\t\"keep-alive\",\r\n\t\t\t\t\t\t\"origin\",\r\n\t\t\t\t\t\t\"referer\",\r\n\t\t\t\t\t\t\"te\",\r\n\t\t\t\t\t\t\"trailer\",\r\n\t\t\t\t\t\t\"transfer-encoding\",\r\n\t\t\t\t\t\t\"upgrade\",\r\n\t\t\t\t\t\t\"user-agent\",\r\n\t\t\t\t\t\t\"via\"\r\n\t\t\t\t\t];\r\n\t\t\t\t\r\n\t\t\t\tif (_p('readyState') !== XMLHttpRequest.OPENED || _send_flag) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_STATE_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (\/[\\u0100-\\uffff]\/.test(header) || Encode.utf8_encode(header) !== header) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.SYNTAX_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\theader = Basic.trim(header).toLowerCase();\r\n\t\t\t\t\r\n\t\t\t\tif (!!~Basic.inArray(header, uaHeaders) || \/^(proxy\\-|sec\\-)\/.test(header)) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (!_headers[header]) {\r\n\t\t\t\t\t_headers[header] = value;\r\n\t\t\t\t} else {\r\n\t\t\t\t\true;\r\n\t\t\t}","code-length":445,"reference":"Appends an header to the list of author request headers, or if header is already\nin the list of author request headers, combines its value with value.\n\nThrows an \"InvalidStateError\" exception if the state is not OPENED or if the send() flag is set.\nThrows a \"SyntaxError\" exception if header is not a valid HTTP header field name or if value\nis not a valid HTTP header field value.\n\n","result":"Set header value.","score":[0.0,0.016]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(header) {\r\n\t\t\t\theader = header.toLowerCase();\r\n\t\t\t\tif (_error_flag || !!~Basic.inArray(header, ['set-cookie', 'set-cookie2'])) {\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\tif (_responseHeaders && _responseHeaders !== '') {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!_responseHeadersBag) {\r\n\t\t\t\t\t\t_responseHeadersBag = {};\r\n\t\t\t\t\t\tBasic.each(_responseHeaders.split(\/\\r\\n\/), function(line) {\r\n\t\t\t\t\t\t\tvar pair = line.split(\/:\\s+\/);\r\n\t\t\t\t\t\t\tif (pair.length === 2) {\r\n\t\t\t\t\t\t\t\tpair[0] = Basic.trim(pair[0]);\r\n\t\t\t\t\t\t\t\t_responseHeadersBag[pair[0].toLowerCase()] = {\r\n\t\t\t\t\t\t\t\t\theader: pair[0],\r\n\t\t\t\t\t\t\t\t\tvalue: Basic.trim(pair[1])\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (_responseHeadersBag.hasOwnProperty(header)) {\r\n\t\t\t\t\t\treturn _responseHeadersBag[header].header + ': ' + _responseHeadersBag[header].value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}","code-length":318,"reference":"Returns the header field value from the response of which the field name matches header,\nunless the field name is Set-Cookie or Set-Cookie2.\n\n","result":"Return the header string for the response.","score":[0.0257,0.0935]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(mime) {\r\n\t\t\t\tvar matches, charset;\r\n\t\t\t\t\r\n\t\t\t\tif (!!~Basic.inArray(_p('readyState'), [XMLHttpRequest.LOADING, XMLHttpRequest.DONE])) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_STATE_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tmime = Basic.trim(mime.toLowerCase());\r\n\t\t\t\tif (\/;\/.test(mime) && (matches = mime.match(\/^([^;]+)(?:;\\scharset\\=)?(.*)$\/))) {\r\n\t\t\t\t\tmime = matches[1];\r\n\t\t\t\t\tif (matches[2]) {\r\n\t\t\t\t\t\tcharset = matches[2];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (!Mime.mimes[mime]) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.SYNTAX_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t_finalMime = mime;\r\n\t\t\t\t_finalCharset = charset;\r\n\t\t\t}","code-length":246,"reference":"Sets the Content-Type header for the response to mime.\nThrows an \"InvalidStateError\" exception if the state is LOADING or DONE.\nThrows a \"SyntaxError\" exception if mime is not a valid media type.\n\n","result":"Detect mime types.","score":[0.0,0.0172]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data, options) {\r\n\t\t\t\tif (Basic.typeOf(options) === 'string') {\r\n\t\t\t\t\t_options = { ruid: options };\r\n\t\t\t\t} else if (!options) {\r\n\t\t\t\t\t_options = {};\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_options = options;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (this.readyState !== XMLHttpRequest.OPENED || _send_flag) {\r\n\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_STATE_ERR);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (data instanceof Blob) {\r\n\t\t\t\t\t_options.ruid = data.ruid;\r\n\t\t\t\t\t_mimeType = data.type || 'application\/octet-stream';\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\telse if (data instanceof FormData) {\r\n\t\t\t\t\tif (data.hasBlob()) {\r\n\t\t\t\t\t\tvar blob = data.getBlob();\r\n\t\t\t\t\t\t_options.ruid = blob.ruid;\r\n\t\t\t\t\t\t_mimeType = blob.type || 'application\/octet-stream';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\telse if (typeof data === 'string') {\r\n\t\t\t\t\t_encoding = 'UTF-8';\r\n\t\t\t\t\t_mimeType = 'text\/plain;charset=UTF-8';\r\n\t\t\t\t\t\r\n\t\t\t\t\tdata = Encode.utf8_encode(data);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!this.withCredentials) {\r\n\t\t\t\t\tthis.withCredentials = (_options.required_caps && _options.required_caps.send_browser_cookies) && !_same_origin_flag;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t_upload_events_flag = (!_sync_flag && this.upload.hasEventListener());\r\n\t\t\t\t\r\n\t\t\t\t_error_flag = false;\r\n\t\t\t\t\r\n\t\t\t\t_upload_complete_flag = !data;\r\n\t\t\t\t\r\n\t\t\t\tif (!_sync_flag) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t_send_flag = true;\r\n\t\t\t\t\t\r\n\t\t\t\t\t","code-length":504,"reference":"Initiates the request. The optional argument provides the request entity body.\nThe argument is ignored if request method is GET or HEAD.\n\nThrows an \"InvalidStateError\" exception if the state is not OPENED or if the send() flag is set.\n\n","result":"\t\tXMLHttpRequest .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\t_error_flag = true;\r\n\t\t\t\t_sync_flag = false;\r\n\t\t\t\tif (!~Basic.inArray(_p('readyState'), [XMLHttpRequest.UNSENT, XMLHttpRequest.OPENED, XMLHttpRequest.DONE])) {\r\n\t\t\t\t\t_p('readyState', XMLHttpRequest.DONE);\r\n\t\t\t\t\t_send_flag = false;\r\n\t\t\t\t\tif (_xhr) {\r\n\t\t\t\t\t\t_xhr.getRuntime().exec.call(_xhr, 'XMLHttpRequest', 'abort', _upload_complete_flag);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new x.DOMException(x.DOMException.INVALID_STATE_ERR);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_upload_complete_flag = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t_p('readyState', XMLHttpRequest.UNSENT);\r\n\t\t\t\t}\r\n\t\t\t}","code-length":215,"reference":"Cancels any network activity.\n\n","result":"Prevent the browser from throwing an error .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(target) {\r\n\tvar undef;\r\n\teach(arguments, function(arg, i) {\r\n\t\tif (i > 0) {\r\n\t\t\teach(arg, function(value, key) {\r\n\t\t\t\tif (value !== undef) {\r\n\t\t\t\t\tif (typeof(target[key]) === typeof(value) && (typeof(value) === 'object' || util.isArray(value))) {\r\n\t\t\t\t\t\textend(target[key], value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\ttarget[key] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\treturn target;\r\n}","code-length":172,"reference":"Extends the specified object with another object.\n\n","result":"Extend objects.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\tif (this.ruid) {\r\n\t\t\t\t\tthis.getRuntime().exec.call(this, 'Image', 'destroy');\r\n\t\t\t\t\tthis.disconnectRuntime();\r\n\t\t\t\t}\r\n\t\t\t\tif (this.meta && this.meta.thumb) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.meta.thumb.data.destroy();\r\n\t\t\t\t}\r\n\t\t\t\tthis.unbindAll();\r\n\t\t\t}","code-length":113,"reference":"Properly destroys the image and frees resources in use. If any. Recommended way to dispose\nmoxie.image.Image object.\n\n","result":"Destroy the image .","score":[0.0175,0.1875]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, prop, desc)\r\n\t{\r\n\t\tif (o.typeOf(desc) === 'object') {\r\n\t\t\tdefineGSetter.call(obj, prop, desc, 'get');\r\n\t\t\tif (!Object.defineProperty) {\r\n\t\t\t\t\r\n\t\t\t\tdefineGSetter.call(obj, prop, desc, 'set');\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":106,"reference":"Defines property with specified descriptor on an object\n\n","result":"Define getter.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(prop, desc, type) {\r\n\t\tvar defaults = {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: true\r\n\t\t}\r\n\t\t, fn\r\n\t\t, camelType\r\n\t\t, self = this\r\n\t\t;\r\n\t\ttype = type.toLowerCase();\r\n\t\tcamelType = type.replace(\/^[gs]\/, function($1) { return $1.toUpperCase(); });\r\n\t\t\r\n\t\tif (o.typeOf(desc) === 'function') {\r\n\t\t\tfn = desc;\r\n\t\t\tdesc = {};\r\n\t\t\tdesc[type] = fn;\r\n\t\t} else if (o.typeOf(desc[type]) === 'function') {\r\n\t\t\tfn = desc[type];\r\n\t\t} else {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (Env.can('define_property')) {\r\n\t\t\tif (Object.defineProperty) {\r\n\t\t\t\treturn Object.defineProperty(this, prop, o.extend({}, defaults, desc));\r\n\t\t\t} else {\r\n\t\t\t\treturn self['__define' + camelType + 'ter__'](prop, fn);\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":306,"reference":"Defines getter or setter, depending on a type param\n\n","result":"Define a property .","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SyntaxError (message, expected, found, offset, line, column) {\r\n  Error.call(this, message)\r\n  this.name = 'SyntaxError'\r\n  this.message = message\r\n  this.expected = expected\r\n  this.found = found\r\n  this.offset = offset\r\n  this.line = line\r\n  this.column = column\r\n}","code-length":97,"reference":"SyntaxError","result":"Detect syntax errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(twist) {\r\n      var i, m, o, ori, parity, v;\r\n      if (twist != null) {\r\n        parity = 0;\r\n        for (i = m = 6; m >= 0; i = --m) {\r\n          ori = twist % 3;\r\n          twist = (twist \/ 3) | 0;\r\n          this.co[i] = ori;\r\n          parity += ori;\r\n        }\r\n        this.co[7] = (3 - parity % 3) % 3;\r\n        return this;\r\n      } else {\r\n        v = 0;\r\n        for (i = o = 0; o <= 6; i = ++o) {\r\n          v = 3 * v + this.co[i];\r\n        }\r\n        return v;\r\n      }\r\n    }","code-length":211,"reference":"The twist of the 8 corners, 0 <= twist < 3^7. The orientation of the DRB corner is fully determined by the orientation of the other corners.","result":"Create a new twist .","score":[0.003,0.0202]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(flip) {\r\n      var i, m, o, ori, parity, v;\r\n      if (flip != null) {\r\n        parity = 0;\r\n        for (i = m = 10; m >= 0; i = --m) {\r\n          ori = flip % 2;\r\n          flip = flip \/ 2 | 0;\r\n          this.eo[i] = ori;\r\n          parity += ori;\r\n        }\r\n        this.eo[11] = (2 - parity % 2) % 2;\r\n        return this;\r\n      } else {\r\n        v = 0;\r\n        for (i = o = 0; o <= 10; i = ++o) {\r\n          v = 2 * v + this.eo[i];\r\n        }\r\n        return v;\r\n      }\r\n    }","code-length":204,"reference":"The flip of the 12 edges, 0 <= flip < 2^11. The orientation of the BR edge is fully determined by the orientation of the other edges.","result":"Flip the order of the elements in the array.","score":[0.0277,0.0992]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var i, j, m, o, ref, ref1, ref2, ref3, s;\r\n      s = 0;\r\n      for (i = m = ref = DRB, ref1 = URF + 1; (ref <= ref1 ? m <= ref1 : m >= ref1); i = ref <= ref1 ? ++m : --m) {\r\n        for (j = o = ref2 = i - 1, ref3 = URF; (ref2 <= ref3 ? o <= ref3 : o >= ref3); j = ref2 <= ref3 ? ++o : --o) {\r\n          if (this.cp[j] > this.cp[i]) {\r\n            s++;\r\n          }\r\n        }\r\n      }\r\n      return s % 2;\r\n    }","code-length":199,"reference":"Parity of the corner permutation","result":"Calculate the minimum distance of a point in the line .","score":[0.1164,0.1786]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var i, j, m, o, ref, ref1, ref2, ref3, s;\r\n      s = 0;\r\n      for (i = m = ref = BR, ref1 = UR + 1; (ref <= ref1 ? m <= ref1 : m >= ref1); i = ref <= ref1 ? ++m : --m) {\r\n        for (j = o = ref2 = i - 1, ref3 = UR; (ref2 <= ref3 ? o <= ref3 : o >= ref3); j = ref2 <= ref3 ? ++o : --o) {\r\n          if (this.ep[j] > this.ep[i]) {\r\n            s++;\r\n          }\r\n        }\r\n      }\r\n      return s % 2;\r\n    }","code-length":196,"reference":"Parity of the edges permutation. Parity of corners and edges are the same if the cube is solvable.","result":"Calculate the number of consecutive consecutive consecutive consecutive numbers.","score":[0.0533,0.0585]}
{"code":"\/*is used to<extra_id_0>\r\nfunction all_modulo(tickValues, interval) {\r\n\t\r\n\tvar maxDecimals = reduce(tickValues, function(prevMax, tick) {\r\n\t\tif ((tick % 1) !== 0) {\r\n\t\t\treturn Math.max(prevMax, tick.toString().split(\".\")[1].length);\r\n\t\t} else {\r\n\t\t\treturn prevMax;\r\n\t\t}\r\n\t}, 0);\r\n\tvar decimalOffset = Math.pow(10, maxDecimals);\r\n\tinterval = interval * decimalOffset;\r\n\treturn reduce(tickValues, function(prev, curr) {\r\n\t\treturn prev && ((curr * decimalOffset) % interval === 0);\r\n\t}, true);\r\n}","code-length":177,"reference":"Determine if all tickValues are modulo some interval value","result":"Test all modulo.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction autoDateFormatAndFrequency(minDate, maxDate, dateFormat, availableWidth) {\r\n\tvar timespan = Math.abs(maxDate - minDate);\r\n\tvar years = timespan \/ 31536000000;\r\n\tvar months = timespan \/ 2628000000;\r\n\tvar days = timespan \/ 86400000;\r\n\tvar yearGap;\r\n\tvar hourGap;\r\n\tvar interval;\r\n\tvar targetPixelGap = 64;\r\n\tvar maximum_ticks = Math.max(Math.floor(availableWidth \/ targetPixelGap), 1);\r\n\tvar time_gap = timespan \/ maximum_ticks;\r\n\tif (dateFormat == \"auto\") {\r\n\t\t\r\n\t\tif (days <= 2) {\r\n\t\t\tdateFormat = \"h\";\r\n\t\t}\r\n\t\telse if (days <= 91) {\r\n\t\t\tdateFormat = \"M1d\";\r\n\t\t}\r\n\t\telse if (months < 36) {\r\n\t\t\tdateFormat = \"M\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdateFormat = \"yy\";\r\n\t\t}\r\n\t}\r\n\tvar gapInYears = humanReadableNumber(Math.floor(time_gap \/ 31536000000));\r\n\tvar gapInMonths = Math.ceil(time_gap \/ 2628000000);\r\n\tvar gapInDays = humanReadableNumber(time_gap \/ 86400000);\r\n\tvar gapInHours = humanReadableNumber(time_gap \/ 3600000);\r\n\t\r\n\tmaxDate.addMilliseconds(0.1);\r\n\tswitch (dateFormat) {\r\n\t\tcase \"yy\":\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tmaxDate = d3.time.day.offset(maxDate, 1);\r\n\t\t\tinterval = d3.time.year.range(minDate, maxDate, gapInYears);\r\n\t\t\tbreak;\r\n\t\tcase \"yyyy\":\r\n\t\t\t\r\n\t\t\tmaxDate = d3.time.day.offset(maxDate, 1);\r\n\t\t\tinterval = d3.time.year.range(minDate, maxDate, gapInYears);\r\n\t\t\tbreak;\r\n\t\tcase \"MM\":\r\n\t\t\tinterval = d3.time.month.range(minDate, maxDate, gapInMonths);\r\n\t\t\tbreak;\r\n\t\tcase \"M\":\r\n\t\t\tinterval = d3.time.month.range(minDate, maxDate, gapInMonths);\r\n\t\t\tbreak;\r\n\t\tcase \"Mdd\":\r\n\t\t\tinterval = d3.time.day.range(minDate, maxDate, gapInDays);\r\n\t\t\tbreak;\r\n\t\tcase \"M1d\":\r\n\t\t\tinterval = d3.time.day.range(minDate, maxDate, gapInDays);\r\n\t\t\tbreak;\r\n\t\tcase \"YY\":\r\n\t\t\tinterval = d3.time.year.range(minDate, maxDate, gapInYears);\r\n\t\t\tbreak;\r\n\t\tcase \"QJan\":\r\n\t\t\tinterval = d3.time.month.range(minDate, maxDate, 4);\r\n\t\t\tbreak;\r\n\t\tcase \"QJul\":\r\n\t\t\tinterval = d3.time.month.range(minDate, maxDate, 4);\r\n\t\t\tbreak;\r\n\t\tcase \"h\":\r\n\t\t\tinterval = d3.time.hour.range(minDate, maxDate, gapInHours);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tinterval = d3.time.year.range(minDate, maxDate, 1);\r\n\t}\r\n\tinterval = cleanInterval(interval);\r\n\treturn {\"format\": dateFormat, \"frequency\": interval};\r\n}","code-length":889,"reference":"Automatically calculate date frequency if not selected","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validate_chart_model(modelStr) {\r\n\tvar parsed;\r\n\ttry {\r\n\t\tparsed = JSON.parse(modelStr);\r\n\t} catch (e) {\r\n\t\tthrow new TypeError(\"Chart model is not valid JSON\");\r\n\t}\r\n\tvar isValidChartModel = (parsed.hasOwnProperty(\"chartProps\") && parsed.hasOwnProperty(\"metadata\"));\r\n\tif (isValidChartModel) {\r\n\t\treturn parsed;\r\n\t} else {\r\n\t\tthrow new TypeError(\"Not a valid Chartbuilder model\");\r\n\t}\r\n}","code-length":143,"reference":"Test whether a string is a valid Chartbuilder model\n","result":"Validate the chart model.","score":[0,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exact_ticks(domain, numticks) {\r\n\tnumticks -= 1;\r\n\tvar ticks = [];\r\n\tvar delta = domain[1] - domain[0];\r\n\tvar i;\r\n\tfor (i = 0; i < numticks; i++) {\r\n\t\tticks.push(domain[0] + (delta \/ numticks) * i);\r\n\t}\r\n\tticks.push(domain[1]);\r\n\tif (domain[1] * domain[0] < 0) {\r\n\t\t\r\n\t\tvar hasZero = false;\r\n\t\tfor (i = ticks.length - 1; i >= 0; i--) {\r\n\t\t\t\r\n\t\t\tif (ticks[i] === 0) {\r\n\t\t\t\thasZero = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!hasZero) {\r\n\t\t\tticks.push(0);\r\n\t\t}\r\n\t}\r\n\treturn ticks;\r\n}","code-length":238,"reference":"Generate an exact number of ticks given a domain\n\n","result":"Calculate the exact ticks for the exact scale.","score":[0.1458,0.1124]}
{"code":"\/*is used to<extra_id_0>\r\nfunction round_to_precision(num, precision, supress_thou_sep) {\r\n\t\r\n\tif (num === 0) return \"0\";\r\n\tvar s = Math.round(num * Math.pow(10,precision)) \/ Math.pow(10,precision);\r\n\ts = s + \"\";\r\n\ts = s.split(\".\");\r\n\tif (s.length == 1) {\r\n\t\ts[1] = \"\";\r\n\t}\r\n\tif (s[1].length < precision) {\r\n\t\ts[1] += Array(precision-s[1].length + 1).join(\"0\");\r\n\t}\r\n\tif (!supress_thou_sep) {\r\n\t\ts[0] = d3.format(\",\")(parseInt(s[0]));\r\n\t}\r\n\tif (precision === 0) {\r\n\t\treturn s[0];\r\n\t}\r\n\treturn s.join(\".\");\r\n}","code-length":243,"reference":"round_to_precision\nRound a number to N decimal places\n\n","result":"Round numbers to precision.","score":[0.1398,0.3363]}
{"code":"\/*is used to<extra_id_0>\r\nfunction merge_or_apply(defaults, source) {\r\n\tvar defaultKeys = keys(defaults);\r\n\tvar sourceKeys = keys(source);\r\n\treturn reduce(defaultKeys, function(result, key) {\r\n\t\tif (sourceKeys.indexOf(key) > -1) {\r\n\t\t\tresult[key] = source[key];\r\n\t\t\treturn result;\r\n\t\t} else {\r\n\t\t\tresult[key] = defaults[key];\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}, {});\r\n}","code-length":138,"reference":"Given a defaults object and a source object, copy the value from the source\nif it contains the same key, otherwise return the default. Skip keys that\nonly exist in the source object.\n","result":"Merge or apply a source object.","score":[0.0037,0.0843]}
{"code":"\/*is used to<extra_id_0>\r\nfunction suggest_tick_num(domain) {\r\n\tvar MAX_TICKS = 10;\r\n\tvar INTERVAL_BASE_VALS = [1, 2, 2.5, 5, 10, 25];\r\n\tvar range = Math.abs(domain[0] - domain[1])\r\n\tvar minimum = range \/ MAX_TICKS;\r\n\tvar digits = Math.floor(range).toString().length;\r\n\tvar multiplier = Math.pow(10, (digits - 2));\r\n\tvar acceptable_intervals = reduce(INTERVAL_BASE_VALS, function(prev, curr) {\r\n\t\tvar mult = curr * multiplier;\r\n\t\tif (mult >= minimum) {\r\n\t\t\tprev = prev.concat([mult]);\r\n\t\t}\r\n\t\treturn prev;\r\n\t}, []);\r\n\tfor (var i = 0; i < acceptable_intervals.length; i++) {\r\n\t\tvar interval = acceptable_intervals[i]\r\n\t\tif(range % interval == 0) {\r\n\t\t\treturn (range \/ interval) + 1\r\n\t\t}\r\n\t};\r\n\treturn 11;\r\n}","code-length":278,"reference":"Given a the domain of a scale suggest the most numerous number\nof round number ticks that it cold be divided into while still containing\nvalues evenly divisible by 1, 2, 2.5, 5, 10, or 25.\n","result":"Suggest tick numbers for the given domain.","score":[0.0026,0.0755]}
{"code":"\/*is used to<extra_id_0>\r\nfunction detectNumberSeparators() {\r\n\tvar n = 1000.50;\r\n\tvar l = n.toLocaleString();\r\n\tvar s = n.toString();\r\n\tvar o = {\r\n\t\tdecimal: l.substring(5,6),\r\n\t\tthousands: l.substring(1,2)\r\n\t};\r\n\tif (l.substring(5,6) == s.substring(5,6)) {\r\n\t\to.decimal = \".\";\r\n\t}\r\n\tif (l.substring(1,2) == s.substring(1,2)) {\r\n\t\to.thousands = \",\";\r\n\t}\r\n\treturn o;\r\n}","code-length":172,"reference":"Get thousands and decimal separators based on locale","result":"Detect number separators.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformerFactory(fileSet, info) {\r\n  return transformer\r\n  function transformer(ast, file) {\r\n    var filePath = file.path\r\n    var space = file.data\r\n    var links = []\r\n    var landmarks = {}\r\n    var references\r\n    var current\r\n    var link\r\n    var pathname\r\n        if (!filePath) {\r\n      return\r\n    }\r\n    references = gatherReferences(file, ast, info, fileSet)\r\n    current = getPathname(filePath)\r\n    for (link in references) {\r\n      pathname = getPathname(link)\r\n      if (\r\n        fileSet &&\r\n        pathname !== current &&\r\n        getHash(link) &&\r\n        links.indexOf(pathname) === -1\r\n      ) {\r\n        links.push(pathname)\r\n        fileSet.add(pathname)\r\n      }\r\n    }\r\n    landmarks[filePath] = true\r\n    slugs.reset()\r\n    visit(ast, mark)\r\n    space[referenceId] = references\r\n    space[landmarkId] = landmarks\r\n    function mark(node) {\r\n      var data = node.data || {}\r\n      var props = data.hProperties || {}\r\n      var id = props.name || props.id || data.id\r\n      if (!id && node.type === 'heading') {\r\n        id = slugs.slug(toString(node))\r\n      }\r\n      if (id) {\r\n        landmarks[filePath + '#' + id] = true\r\n      }\r\n    }\r\n  }\r\n}","code-length":385,"reference":"Factory to create a transformer based on the given info and set.","result":"Create a transformer.","score":[0.0203,0.1689]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validate(exposed, file) {\r\n  var references = file.data[referenceId]\r\n  var filePath = file.path\r\n  var reference\r\n  var nodes\r\n  var real\r\n  var hash\r\n  var pathname\r\n  var warning\r\n  var suggestion\r\n  var ruleId\r\n  for (reference in references) {\r\n    nodes = references[reference]\r\n    real = exposed[reference]\r\n    hash = getHash(reference)\r\n    if ((real === undefined || real === null) && !hash && fs) {\r\n      real = fs.existsSync(path.join(file.cwd, decodeURI(reference)))\r\n      references[reference] = real\r\n    }\r\n    if (!real) {\r\n      if (hash) {\r\n        pathname = getPathname(reference)\r\n        warning = 'Link to unknown heading'\r\n        ruleId = headingRuleId\r\n        if (pathname !== filePath) {\r\n          warning += ' in `' + pathname + '`'\r\n          ruleId = headingInFileRuleId\r\n        }\r\n        warning += ': `' + hash + '`'\r\n      } else {\r\n        warning = 'Link to unknown file: `' + decodeURI(reference) + '`'\r\n        ruleId = fileRuleId\r\n      }\r\n      suggestion = getClosest(reference, exposed)\r\n      if (suggestion) {\r\n        warning += '. Did you mean `' + suggestion + '`'\r\n      }\r\n      warnAll(file, nodes, warning, ruleId)\r\n    }\r\n  }\r\n}","code-length":367,"reference":"Check if `file` references headings or files not in `exposed`.","result":"Validate the file .","score":[0,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onresource(node) {\r\n    var link = node.url\r\n    var definition\r\n    var index\r\n    var uri\r\n    var pathname\r\n    var hash\r\n    if (node.identifier) {\r\n      definition = getDefinition(node.identifier)\r\n      link = definition && definition.url\r\n    }\r\n    if (!link) {\r\n      return\r\n    }\r\n    uri = parse(link)\r\n    uri.search = ''\r\n    link = format(uri)\r\n    if (!fileSet && (uri.hostname || uri.pathname)) {\r\n      return\r\n    }\r\n    if (!uri.hostname) {\r\n      if (lines && lineExpression.test(uri.hash)) {\r\n        uri.hash = ''\r\n      }\r\n      if (!uri.pathname && uri.hash) {\r\n        link = file.path + uri.hash\r\n        uri = parse(link)\r\n      } else {\r\n        link = urljoin(file.dirname, link)\r\n        if (uri.hash) {\r\n          link += uri.hash\r\n        }\r\n        uri = parse(link)\r\n      }\r\n    }\r\n    if (uri.hostname) {\r\n      if (!prefix || !fileSet) {\r\n        return\r\n      }\r\n      if (\r\n        uri.hostname !== info.domain ||\r\n        uri.pathname.slice(0, prefix.length) !== prefix\r\n      ) {\r\n        return\r\n      }\r\n      link = uri.pathname.slice(prefix.length) + (uri.hash || '')\r\n      link = link.slice(link.indexOf('\/') + 1)\r\n    }\r\n    index = link.indexOf(headingPrefix)\r\n    if (index === -1) {\r\n      pathname = link\r\n      hash = null\r\n    } else {\r\n      pathname = link.slice(0, index)\r\n      hash = link.slice(index + headingPrefix.length)\r\n      if (lines && lineExpression.test(hash)) {\r\n        hash = null\r\n      }\r\n    }\r\n    if (!cache[pathname]) {\r\n      cache[pathname] = []\r\n    }\r\n    cache[pathname].push(node)\r\n    if (hash) {\r\n      link = pathname + '#' + hash\r\n      if (!cache[link]) {\r\n        cache[link] = []\r\n      }\r\n      cache[link].push(node)\r\n    }\r\n  }","code-length":598,"reference":"Handle resources.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction warnAll(file, nodes, reason, ruleId) {\r\n  nodes.forEach(one)\r\n  function one(node) {\r\n    file.message(reason, node, [sourceId, ruleId].join(':'))\r\n  }\r\n}","code-length":69,"reference":"Utility to warn `reason` for each node in `nodes` on `file`.","result":"Avoid warning.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getClosest(pathname, references) {\r\n  var hash = getHash(pathname)\r\n  var base = getPathname(pathname)\r\n  var dictionary = []\r\n  var reference\r\n  var subhash\r\n  var subbase\r\n  for (reference in references) {\r\n    subbase = getPathname(reference)\r\n    subhash = getHash(reference)\r\n    if (getPathname(reference) === base) {\r\n      if (subhash && hash) {\r\n        dictionary.push(subhash)\r\n      }\r\n    } else if (!subhash && !hash) {\r\n      dictionary.push(subbase)\r\n    }\r\n  }\r\n  return propose(hash ? hash : base, dictionary, {threshold: 0.7})\r\n}","code-length":190,"reference":"Suggest a possible similar reference.","result":"Find the closest path.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getHash(uri) {\r\n  var hash = parse(uri).hash\r\n  return hash ? hash.slice(1) : null\r\n}","code-length":43,"reference":"Get the `hash` of `uri`, if applicable.","result":"Detect the presence of a hash.","score":[0.1943,0.1449]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPrevMap(from) {\r\n        if (typeof options.map.prev === 'string') {\r\n            var mapPath = options.map.prev + path.basename(from) + '.map';\r\n            if (grunt.file.exists(mapPath)) {\r\n                return grunt.file.read(mapPath);\r\n            }\r\n        }\r\n    }","code-length":97,"reference":"Returns an input map contents if a custom map path was specified\n","result":"Get the previous map for the given file.","score":[0.0842,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (req, res, next) {            \r\n                if(req.url.indexOf('.') === -1 && req.url.indexOf(startDir) > -1){\r\n                    req.url = startPath;\r\n                }\r\n                                return next();\r\n            }","code-length":73,"reference":"to add back in logging comment this line out","result":"Prevent .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseIPv4(addr) {\r\n        if (typeof(addr) !== 'string')\r\n                throw new TypeError('addr (string) is required');\r\n        var octets = addr.split(\/\\.\/).map(function (octet) {\r\n                return (parseInt(octet, 10));\r\n        });\r\n        if (octets.length !== 4)\r\n                throw new TypeError('valid IP address required');\r\n        var uint32 = ((octets[0] * Math.pow(256, 3)) +\r\n                      (octets[1] * Math.pow(256, 2)) +\r\n                      (octets[2] * 256) + octets[3]);\r\n        return (uint32);\r\n}","code-length":174,"reference":"turns a dotted-decimal address into a UInt32","result":"Parse IPv.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNested(obj, prop) {\r\n        var service = obj[prop];\r\n        if (service === undefined && Bottle.config.strict) {\r\n            throw new Error('Bottle was unable to resolve a service.  `' + prop + '` is undefined.');\r\n        }\r\n        return service;\r\n    }","code-length":85,"reference":"Iterator used to walk down a nested object.\n\nIf Bottle.config.strict is true, this method will throw an exception if it encounters an\nundefined path\n\n","result":"Resolve nested services.","score":[0.0004,0.0228]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNestedBottle(name) {\r\n        var bottle;\r\n        if (!this.nested[name]) {\r\n            bottle = Bottle.pop();\r\n            this.nested[name] = bottle;\r\n            this.factory(name, function SubProviderFactory() {\r\n                return bottle.container;\r\n            });\r\n        }\r\n        return this.nested[name];\r\n    }","code-length":107,"reference":"Get a nested bottle. Will set and return if not set.\n\n","result":"Get the bottle container.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction applyMiddleware(middleware, name, instance, container) {\r\n        var descriptor = {\r\n            configurable : true,\r\n            enumerable : true\r\n        };\r\n        if (middleware.length) {\r\n            descriptor.get = function getWithMiddlewear() {\r\n                var index = 0;\r\n                var next = function nextMiddleware(err) {\r\n                    if (err) {\r\n                        throw err;\r\n                    }\r\n                    if (middleware[index]) {\r\n                        middleware[index++](instance, next);\r\n                    }\r\n                };\r\n                next();\r\n                return instance;\r\n            };\r\n        } else {\r\n            descriptor.value = instance;\r\n            descriptor.writable = true;\r\n        }\r\n            Object.defineProperty(container, name, descriptor);\r\n            return container[name];\r\n    }","code-length":212,"reference":"Function used by provider to set up middleware for each request.\n\n","result":"Apply middleware to a container.","score":[0.0861,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction middleware(fullname, func) {\r\n        var parts, name;\r\n        if (typeof fullname === FUNCTION_TYPE) {\r\n            func = fullname;\r\n            fullname = GLOBAL_NAME;\r\n        }\r\n            parts = fullname.split(DELIMITER);\r\n        name = parts.shift();\r\n        if (parts.length) {\r\n            getNestedBottle.call(this, name).middleware(parts.join(DELIMITER), func);\r\n        } else {\r\n            if (!this.middlewares[name]) {\r\n                this.middlewares[name] = [];\r\n            }\r\n            this.middlewares[name].push(func);\r\n        }\r\n        return this;\r\n    }","code-length":176,"reference":"Register middleware.\n\n","result":"Register middleware functions.","score":[0.4082,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createProvider(name, Provider) {\r\n        var providerName, properties, container, id, decorators, middlewares;\r\n            id = this.id;\r\n        container = this.container;\r\n        decorators = this.decorators;\r\n        middlewares = this.middlewares;\r\n        providerName = name + PROVIDER_SUFFIX;\r\n            properties = Object.create(null);\r\n        properties[providerName] = {\r\n            configurable : true,\r\n            enumerable : true,\r\n            get : function getProvider() {\r\n                var instance = new Provider();\r\n                delete container[providerName];\r\n                container[providerName] = instance;\r\n                return instance;\r\n            }\r\n        };\r\n            properties[name] = {\r\n            configurable : true,\r\n            enumerable : true,\r\n            get : function getService() {\r\n                var provider = container[providerName];\r\n                var instance;\r\n                if (provider) {\r\n                    instance = getWithGlobal(decorators, name).reduce(reducer, provider.$get(container));\r\n                        delete container[providerName];\r\n                    delete container[name];\r\n                }\r\n                return instance === undefined ? instance : applyMiddleware(getWithGlobal(middlewares, name),\r\n                    name, instance, container);\r\n            }\r\n        };\r\n            Object.defineProperties(container, properties);\r\n        return this;\r\n    }","code-length":338,"reference":"Create the provider properties on the container\n\n","result":"Create a provider .","score":[0.1795,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction provider(fullname, Provider) {\r\n        var parts, name;\r\n        parts = fullname.split(DELIMITER);\r\n        if (this.providerMap[fullname] && parts.length === 1 && !this.container[fullname + PROVIDER_SUFFIX]) {\r\n            return console.error(fullname + ' provider already instantiated.');\r\n        }\r\n        this.originalProviders[fullname] = Provider;\r\n        this.providerMap[fullname] = true;\r\n            name = parts.shift();\r\n            if (parts.length) {\r\n            getNestedBottle.call(this, name).provider(parts.join(DELIMITER), Provider);\r\n            return this;\r\n        }\r\n        return createProvider.call(this, name, Provider);\r\n    }","code-length":186,"reference":"Register a provider.\n\n","result":"Instantiate a provider.","score":[0.5774,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createService(name, Service, isClass) {\r\n        var deps = arguments.length > 3 ? slice.call(arguments, 3) : [];\r\n        var bottle = this;\r\n        return factory.call(this, name, function GenericFactory() {\r\n            var serviceFactory = Service;\r\n            var args = deps.map(getNestedService, bottle.container);\r\n                if (!isClass) {\r\n                return serviceFactory.apply(null, args);\r\n            }\r\n            return new (Service.bind.apply(Service, [null].concat(args)))();\r\n        });\r\n    }","code-length":152,"reference":"Private helper for creating service and service factories.\n\n","result":"Create a service.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction service(name, Service) {\r\n        return createService.apply(this, [name, Service, true].concat(slice.call(arguments, 2)));\r\n    }","code-length":49,"reference":"Register a class service\n\n","result":"Create a service.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction serviceFactory(name, factoryService) {\r\n        return createService.apply(this, [name, factoryService, false].concat(slice.call(arguments, 2)));\r\n    }","code-length":52,"reference":"Register a function service","result":"Create a service factory.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineValue(name, val) {\r\n        Object.defineProperty(this, name, {\r\n            configurable : true,\r\n            enumerable : true,\r\n            value : val,\r\n            writable : true\r\n        });\r\n    }","code-length":66,"reference":"Define a mutable property on the container.\n\n","result":"Define value.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setValueObject(container, name) {\r\n        var nestedContainer = container[name];\r\n        if (!nestedContainer) {\r\n            nestedContainer = {};\r\n            defineValue.call(container, name, nestedContainer);\r\n        }\r\n        return nestedContainer;\r\n    }","code-length":76,"reference":"Iterator for setting a plain object literal via defineValue\n\n","result":"Set the value object in the container.","score":[0.1214,0.1136]}
{"code":"\/*is used to<extra_id_0>\r\nfunction value(name, val) {\r\n        var parts;\r\n        parts = name.split(DELIMITER);\r\n        name = parts.pop();\r\n        defineValue.call(parts.reduce(setValueObject, this.container), name, val);\r\n        return this;\r\n    }","code-length":77,"reference":"Register a value\n\n","result":"Define a value object.","score":[0.4518,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction constant(name, value) {\r\n        var parts = name.split(DELIMITER);\r\n        name = parts.pop();\r\n        defineConstant.call(parts.reduce(setValueObject, this.container), name, value);\r\n        return this;\r\n    }","code-length":72,"reference":"Register a constant\n\n","result":"Define a constant.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction decorator(fullname, func) {\r\n        var parts, name;\r\n        if (typeof fullname === FUNCTION_TYPE) {\r\n            func = fullname;\r\n            fullname = GLOBAL_NAME;\r\n        }\r\n            parts = fullname.split(DELIMITER);\r\n        name = parts.shift();\r\n        if (parts.length) {\r\n            getNestedBottle.call(this, name).decorator(parts.join(DELIMITER), func);\r\n        } else {\r\n            if (!this.decorators[name]) {\r\n                this.decorators[name] = [];\r\n            }\r\n            this.decorators[name].push(func);\r\n        }\r\n        return this;\r\n    }","code-length":176,"reference":"Register decorator.\n\n","result":"Decorate bottle functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction instanceFactory(name, Factory) {\r\n        return factory.call(this, name, function GenericInstanceFactory(container) {\r\n            return {\r\n                instance : Factory.bind(Factory, container)\r\n            };\r\n        });\r\n    }","code-length":69,"reference":"Register an instance factory inside a generic factory.\n\n","result":"Create instance factories.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pop(name) {\r\n        var instance;\r\n        if (typeof name === STRING_TYPE) {\r\n            instance = bottles[name];\r\n            if (!instance) {\r\n                bottles[name] = instance = new Bottle();\r\n                instance.constant('BOTTLE_NAME', name);\r\n            }\r\n            return instance;\r\n        }\r\n        return new Bottle();\r\n    }","code-length":110,"reference":"Get an instance of bottle.\n\nIf a name is provided the instance will be stored in a local hash.  Calling Bottle.pop multiple\ntimes with the same name will return the same instance.\n\n","result":"Pop a bottle instance.","score":[0.0003,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction register(Obj) {\r\n        var value = Obj.$value === undefined ? Obj : Obj.$value;\r\n        return this[Obj.$type || 'service'].apply(this, [Obj.$name, value].concat(Obj.$inject || []));\r\n    }","code-length":69,"reference":"Register a service, factory, provider, or value based on properties on the object.\n\nproperties:\n* Obj.$name   String required ex: `'Thing'`\n* Obj.$type   String optional 'service', 'factory', 'provider', 'value'.  Default: 'service'\n* Obj.$inject Mixed  optional only useful with $type 'service' name or array of names\n* Obj.$value  Mixed  optional Normally Obj is registered on the container.  However, if this\nproperty is included, it's value will be registered on the container\ninstead of the object itsself.  Useful for registering objects on the\nbottle container without modifying those objects with bottle specific keys.\n\n","result":"Register a service.","score":[0.0,0.0231]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resetProviders(names) {\r\n        var tempProviders = this.originalProviders;\r\n        var shouldFilter = Array.isArray(names);\r\n            Object.keys(this.originalProviders).forEach(function resetProvider(originalProviderName) {\r\n            if (shouldFilter && names.indexOf(originalProviderName) === -1) {\r\n                return;\r\n            }\r\n            var parts = originalProviderName.split(DELIMITER);\r\n            if (parts.length > 1) {\r\n                parts.forEach(removeProviderMap, getNestedBottle.call(this, parts[0]));\r\n            }\r\n            removeProviderMap.call(this, originalProviderName);\r\n            this.provider(originalProviderName, tempProviders[originalProviderName]);\r\n        }, this);\r\n    }","code-length":189,"reference":"Resets providers on a bottle instance. If 'names' array is provided, only the named providers will be reset.\n\n","result":"Reset the provider map.","score":[0.0096,0.0904]}
{"code":"\/*is used to<extra_id_0>\r\nfunction throwIfInvalidNode(node, functionName) {\r\n    if (!exports.isASTNode(node)) {\r\n        throw new Error(functionName + \"(): \" + util.inspect(node) + \" is not a valid AST node.\");\r\n    }\r\n}","code-length":71,"reference":"For internal use. Throws if is passed an invalid AST node, else does nothing.","result":"Generate code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isEvent(expr, eventDeclarations) {\r\n        for (let { node, enclosingContract } of eventDeclarations) {\r\n            if (expr.callee.name === node.name && sourceCode.isAChildOf(expr, enclosingContract)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","code-length":88,"reference":"Determines whether the given call name refers to an event declaration using scope resolution.","result":"Check if an event is an event.","score":[0.084,0.0752]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerEventName(emitted) {\r\n        const { node } = emitted;\r\n        (!emitted.exit) && events.push({ node, enclosingContract: sourceCode.getParent(node) });\r\n    }","code-length":58,"reference":"Stores each declared event in the file and its corresponding parent contract","result":"Register event names.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectVariableDeclarator(emitted) {\r\n            let node = emitted.node;\r\n            if (!emitted.exit) {\r\n                allVariableDeclarations [node.id.name] = node;\r\n            }\r\n        }","code-length":63,"reference":"collect all variable declarations from VariableDeclarators and DeclarativeExpressions","result":"Inspect variable declarations.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectProgram(emitted) {\r\n            if (emitted.exit) {\r\n                Object.keys(allVariableDeclarations).forEach(function(name) {\r\n                    context.report({\r\n                        node: allVariableDeclarations [name],\r\n                        message: \"Variable '\" + name + \"' is declared but never used.\"\r\n                    });\r\n                });\r\n            }\r\n        }","code-length":99,"reference":"While exiting Progam Node, all the vars that haven't been used still exist inside VariableDeclarations. Report them","result":"Report errors in the program.","score":[0.0259,0.0633]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectIdentifier(emitted) {\r\n            if (!emitted.exit) {\r\n                let node = emitted.node,\r\n                    sourceCode = context.getSourceCode();\r\n                if (\r\n                    allVariableDeclarations [node.name] &&\r\n\t\t\t\t\tsourceCode.getParent(node).type !== \"VariableDeclarator\"\r\n                ) {\r\n                    delete allVariableDeclarations [node.name];\r\n                }\r\n            }\r\n        }","code-length":113,"reference":"As soon as the first use of a variable is encountered, delete that variable's node from allVariableDeclarations","result":"Inspect identifiers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectFunctionsOfContract(emitted) {\r\n            if (emitted.exit) {\r\n                return;\r\n            }\r\n            const { node } = emitted, { body } = node;\r\n            let cursor = 0;\r\n            body.filter(child => {\r\n                return [\"FunctionDeclaration\", \"ConstructorDeclaration\"].includes(child.type);\r\n            }).forEach(funcNode => {\r\n                if (\r\n                    (context.options && isIgnored(funcNode, node, context.options[0].ignore)) ||\r\n                    isFunctionVisibility(node, funcNode, functionOrder[cursor])\r\n                ) {\r\n                    return;\r\n                }\r\n                const funcPosInOrder = findFuncPosInOrder(node, funcNode);\r\n                if (funcPosInOrder > cursor) {\r\n                    cursor = funcPosInOrder;\r\n                    return;\r\n                }\r\n                context.report({ node: funcNode, message: errorMessage });\r\n            });\r\n        }","code-length":240,"reference":"Set cursor to point to first visibility in order of vis.","result":"Inspect functions of contract.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectCallExpression(emitted) {\r\n            let node = emitted.node,\r\n                callArgs = node.arguments;\r\n            if (emitted.exit) {\r\n                return;\r\n            }\r\n            let nodeCode = sourceCode.getText(node);\r\n            if (!callArgs.length) {\r\n                for (let i = nodeCode.length; i > 0; i--) {\r\n                    if (nodeCode [i] === \")\" && nodeCode [i-1] === \"(\") {\r\n                        return;\r\n                    }\r\n                    if (\/[\\s\\(\\)]\/.test(nodeCode [i])) {\r\n                        break;\r\n                    }\r\n                }\r\n                return context.report({\r\n                    node: node,\r\n                    message: \"\\\"\" + nodeCode + \"\\\": \" +\r\n\t\t\t\t\t\"A call without arguments should have brackets without any whitespace between them, like 'functionName ()'.\"\r\n                });\r\n            }\r\n            let lastCallArg = callArgs.slice(-1) [0];\r\n            if (sourceCode.getLine(node) !== sourceCode.getEndingLine(lastCallArg)) {\r\n                return;\r\n            }\r\n            let charBeforeFirstArg = sourceCode.getPrevChar(callArgs [0]),\r\n                charAfterLastCallArg = sourceCode.getNextChar(lastCallArg);\r\n            (callArgs [0].type !== \"NameValueAssignment\" && charBeforeFirstArg !== \"(\") && context.report({\r\n                node: callArgs [0],\r\n                location: {\r\n                    column: sourceCode.getColumn(callArgs [0]) - 1\r\n                },\r\n                message: \"'\" + node.callee.name + \"': The first argument must not be preceded by any whitespace or comments (only '(').\"\r\n            });\r\n            (lastCallArg.type !== \"NameValueAssignment\" && charAfterLastCallArg !== \")\") && context.report({\r\n                node: callArgs [0],\r\n                location: {\r\n                    column: sourceCode.getEndingColumn(lastCallArg) + 1\r\n                },\r\n                message: \"'\" + node.callee.name + \"': The last argument must not be succeeded by any whitespace or comments (only ')').\"\r\n            });\r\n        }","code-length":530,"reference":"same could potentially be applied to FunctionDeclaration","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectExperimentalPragmaStatement(emitted) {\r\n            if (emitted.exit) {\r\n                return;\r\n            }\r\n            const { node } = emitted,\r\n                nodesAllowedAbove = [\"ExperimentalPragmaStatement\", \"PragmaStatement\"],\r\n                programNode = context.getSourceCode().getParent(node);\r\n            for (let childNode of programNode.body) {\r\n                if (node.start === childNode.start) {\r\n                    return;\r\n                }\r\n                const pragmaCode = context.getSourceCode().getText(node);\r\n                if (nodesAllowedAbove.indexOf(childNode.type) < 0) {\r\n                    const errObject = {\r\n                        node,\r\n                        fix(fixer) {\r\n                            return [fixer.remove(node),\r\n                                fixer.insertTextBefore(childNode, `${pragmaCode}${EOL}`)];\r\n                        },\r\n                        message: \"Experimental Pragma must precede everything except Solidity Pragma.\"\r\n                    };\r\n                    return context.report(errObject);\r\n                }\r\n            }\r\n        }","code-length":273,"reference":"Experimental pragmas, if they exist, must be above everything EXCEPT pragma solidity & other experimental pragmas.","result":"Inspect experimental pragma statements.","score":[0.0189,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sourceCode, errorMessages) {\r\n        let fixedSourceCode = \"\", fixes = [], fixesApplied = [], remainingMessages = [];\r\n        let cursor = Number.NEGATIVE_INFINITY;\r\n        function attemptFix(fix) {\r\n            let start = fix.range [0], end = fix.range [1];\r\n            if (cursor > start || start > end) {\r\n                return false;\r\n            }\r\n            fixedSourceCode += sourceCode.slice(Math.max(0, cursor), Math.max(0, start));\r\n            fixedSourceCode += fix.text;\r\n            cursor = end;\r\n            return true;\r\n        }\r\n        errorMessages.forEach(function(msg) {\r\n            if (msg.fix) {\r\n                try {\r\n                    msg.fix = mergeFixes(msg.fix, sourceCode);\r\n                } catch (e) {\r\n                    throw new Error(\"An error occured while applying fix of rule \\\"\"\r\n\t\t\t\t\t\t+ msg.ruleName + \"\\\" for error \\\"\" + msg.message + \"\\\": \" + e.message);\r\n                }\r\n                return fixes.push(msg);\r\n            }\r\n            remainingMessages.push(msg);\r\n        });\r\n        fixes.sort(compareMessagesByFixRange).forEach(function(msg) {\r\n            if (attemptFix(msg.fix)) {\r\n                return fixesApplied.push(msg);\r\n            }\r\n            remainingMessages.push(msg);\r\n        });\r\n        fixedSourceCode += sourceCode.slice(Math.max(0, cursor));\r\n        remainingMessages.sort(compareMessagesByLocation);\r\n        return {\r\n            fixesApplied: fixesApplied,\r\n            fixedSourceCode: fixedSourceCode,\r\n            remainingErrorMessages: remainingMessages\r\n        };\r\n    }","code-length":429,"reference":"Apply fixes to source code depending on whichever errors can be fixed.\n","result":"Apply fixes to source code.","score":[0.1855,0.3512]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectTopLevelDeclaration(emitted) {\r\n            let body = emitted.node.body || [],\r\n                levelOneIndentRegExp = new RegExp(\"^\\\\n\" + BASE_INDENTATION_STYLE + \"$\"),\r\n                endingLineRegExp = new RegExp(\"^\" + BASE_INDENTATION_STYLE + \"(\\\\S| \\\\*)$\"),\t\r\n                endingLineExtraIndentRegExp = new RegExp(\"^\" + BASE_INDENTATION_STYLE.repeat(2) + \"(\\\\S| \\\\*)$\");\r\n            if (emitted.exit) {\r\n                return;\r\n            }\r\n            function inspectChild(child) {\r\n                let prevChars = sourceCode.getPrevChars(child, BASE_INDENTATION_STYLE.length+1),\r\n                    endingLineNum = sourceCode.getEndingLine(child);\r\n                if (!levelOneIndentRegExp.test(prevChars)) {\r\n                    context.report({\r\n                        node: child,\r\n                        message: `Only use indent of ${BASE_INDENTATION_STYLE_DESC}.`\r\n                    });\r\n                }\r\n                if (sourceCode.getLine(child) === endingLineNum) {\r\n                    return;\r\n                }\r\n                if (child.type === \"FunctionDeclaration\" && child.is_abstract) {\r\n                    if (!endingLineExtraIndentRegExp.test(\r\n                        sourceCode.getTextOnLine(endingLineNum).slice(0, BASE_INDENTATION_STYLE.repeat(2).length+1))) {\r\n                        context.report({\r\n                            node: child,\r\n                            location: {\r\n                                line: endingLineNum,\r\n                                column: 0\r\n                            },\r\n                            message: `Only use indent of ${BASE_INDENTATION_STYLE_DESC}.`\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n                if (!endingLineRegExp.test(\r\n                    sourceCode.getTextOnLine(endingLineNum).slice(0, BASE_INDENTATION_STYLE.length+1))) {\r\n                    context.report({\r\n                        node: child,\r\n                        location: {\r\n                            line: endingLineNum,\r\n                            column: 0\r\n                        },\r\n                        message: `Only use indent of ${BASE_INDENTATION_STYLE_DESC}.`\r\n                    });\r\n                }\r\n            }\r\n            body.forEach(inspectChild);\r\n        }","code-length":561,"reference":"Ensure level 1 indentation before all immediate children of top-level declarations","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectBlockStatement(emitted) {\r\n            let node = emitted.node;\r\n            if (emitted.exit || (sourceCode.getLine(node) === sourceCode.getEndingLine(node))) {\r\n                return;\r\n            }\r\n            let parent = sourceCode.getParent(node),\r\n                parentDeclarationLine = sourceCode.getLine(parent),\r\n                parentDeclarationLineText = sourceCode.getTextOnLine(parentDeclarationLine),\r\n                currentIndent, currentIndentLevel;\r\n            function inspectBlockItem(blockIndent, blockIndentDesc, blockItem) {\r\n                let prevChars = sourceCode.getPrevChars(blockItem, blockIndent.length+1),\r\n                    endingLineNum = sourceCode.getEndingLine(blockItem),\r\n                    endingLineRegExp = new RegExp(\"^\" + blockIndent + \"(\" + BASE_INDENTATION_STYLE + \")?\\\\S.*$\");\r\n                if (prevChars !== (\"\\n\" + blockIndent)) {\r\n                    context.report({\r\n                        node: blockItem,\r\n                        message: `Only use indent of ${blockIndentDesc}.`\r\n                    });\r\n                }\r\n                                if (\r\n                    blockItem.type !== \"IfStatement\" &&\r\n\t\t\t\t\tsourceCode.getLine(blockItem) !== endingLineNum &&\r\n\t\t\t\t\t!endingLineRegExp.test(sourceCode.getTextOnLine(endingLineNum))\r\n                ) {\r\n                    context.report({\r\n                        node: blockItem,\r\n                        location: {\r\n                            line: endingLineNum,\r\n                            column: 0\r\n                        },\r\n                        message: `Only use indent of ${blockIndentDesc}.`\r\n                    });\r\n                }\r\n            }\r\n            currentIndent = parentDeclarationLineText.slice(\r\n                0,\r\n                parentDeclarationLineText.indexOf(parentDeclarationLineText.trim())\r\n            );\r\n            currentIndentLevel = (currentIndent.match(BASE_INDENTATION_STYLE_REGEXP_GLOBAL) || []).length;\r\n            if (getIndentString(BASE_INDENTATION_STYLE, currentIndentLevel) !== currentIndent) {\r\n                return;\t\r\n            }\r\n            const blockIndent = getIndentString(BASE_INDENTATION_STYLE, currentIndentLevel + 1);\r\n            const blockIndentDesc = getIndentDescription(BASE_INDENTATION_STYLE, currentIndentLevel + 1);\r\n            node.body.forEach(inspectBlockItem.bind(null, blockIndent, blockIndentDesc));\r\n        }","code-length":586,"reference":"Ensure 1 extra indentation inside Block than before it","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node, beforeCount, afterCount) {\r\n        let sourceCodeText = this.text;\r\n        if (node) {\r\n            if (astUtils.isASTNode(node)) {\r\n                return this.text.slice(\r\n                    Math.max(0, node.start - (Math.abs(beforeCount) || 0)),\r\n                    node.end + (Math.abs(afterCount) || 0)\r\n                );\r\n            }\r\n\t\t\t\r\n            throw new Error(\"Invalid Node object\");\r\n        }\r\n        return sourceCodeText;\r\n    }","code-length":144,"reference":"Function to retrieve the source code text being linted. Returns the complete source code if no node specified\n","result":"Extract the source code.","score":[0.0136,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectVariableDeclaration(emitted) {\r\n            let node = emitted.node, code = sourceCode.getText(node);\r\n            if (emitted.exit) {\r\n                return;\r\n            }\r\n            for (let i = 2; i < code.length; i++) {\r\n                if (code [i] === \"=\") {\r\n                    (!\/^[^\\\/\\s] $\/.test(code.slice(i-2, i))) && context.report({\r\n                        node: node,\r\n                        message: \"There should be only a single space between assignment operator '=' and its left side.\" \r\n                    });\r\n                    (!\/^ [^\\\/\\s]$\/.test(code.slice(i+1, i+3))) && context.report({\r\n                        node: node,\r\n                        message: \"There should be only a single space between assignment operator '=' and its right side.\" \r\n                    });\r\n                }\r\n            }\r\n        }","code-length":227,"reference":"statement like `var x = 10` doesn't come under AssignmentExpression, so needs to be checked separately","result":"Inspect a variable declaration.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RuleContext(ruleName, ruleDesc, ruleMeta, Solium) {\r\n    let contextObject = this;\r\n    ruleDesc.options && Object.assign(contextObject, { options: ruleDesc.options });\r\n    Object.defineProperties(contextObject, {\r\n        name: {\r\n            value: ruleName,\r\n            writable: false\t\r\n        },\r\n        meta: {\r\n            value: ruleDesc,\r\n            writable: false\r\n        }\r\n    });\r\n    INHERITABLE_METHODS.forEach(function(methodName) {\r\n        contextObject [methodName] = function(s, z, a, b, o) {\t\r\n            return Solium [methodName].call(Solium, s, z, a, b, o);\r\n        };\r\n    });\r\n        contextObject.report = function(error) {\r\n        if (!isErrObjectValid(error)) {\r\n            throw new Error(\r\n                `Rule \"${ruleName}\": invalid error object was passed. AJV message:${EOL}${util.inspect(isErrObjectValid.errors)}`\r\n            );\r\n        }\r\n        Object.assign(error, { ruleName: ruleName, ruleMeta: ruleMeta, type: contextObject.meta.type });\r\n        Solium.report(error);\r\n    };\r\n}","code-length":326,"reference":"context object Constructor to set read-only properties and provide additional functionality to the rules using it\n","result":"Create a new RuleContext.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveUpstream(upstream) {\r\n    let coreRulesetRegExp = \/^solium:[a-z_]+$\/;\r\n    if (coreRulesetRegExp.test(upstream)) {\r\n        try {\r\n            return require(\"..\/..\/config\/rulesets\/solium-\" + upstream.split(\":\") [1]).rules;\r\n        } catch (e) {\r\n            throw new Error(\"\\\"\" + upstream + \"\\\" is not a core ruleset.\");\r\n        }\r\n    }\r\n    let configName = constants.SOLIUM_SHARABLE_CONFIG_PREFIX + upstream, config;\r\n    try {\r\n        config = require(configName);\r\n    } catch (e) {\r\n        if (e.code === \"MODULE_NOT_FOUND\") {\r\n            throw new Error(\r\n                \"The sharable config \\\"\" + configName + \"\\\" is not installed. \" +\r\n\t\t\t\t\"If Solium is installed globally, install the config globally using \" +\r\n\t\t\t\t\"\\\"npm install -g \" + configName + \"\\\". Else install locally using \" +\r\n\t\t\t\t\"\\\"npm install --save-dev \" + configName + \"\\\".\"\r\n            );\r\n        }\r\n        throw new Error(\"The sharable config \\\"\" + configName + \"\\\" could not be loaded: \" + e.message);\r\n    }\r\n    if (isAValidSharableConfig(config)) {\r\n        return config.rules;\r\n    }\r\n    throw new Error(\"Invalid sharable config \\\"\" +\r\n\t\tconfigName + \"\\\". AJV message:\\n\" + util.inspect(isAValidSharableConfig.errors));\r\n}","code-length":392,"reference":"Given a ruleset name, determine whether its a core set or a sharable config and load the rule config accordingly.\n","result":"Resolve upstreams.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolvePluginConfig(name, plugin) {\r\n    let config = {};\r\n    Object.keys(plugin.rules).forEach(function(ruleName) {\r\n        config [name + \"\/\" + ruleName] = plugin.rules [ruleName].meta.docs.type;\r\n    });\r\n    return config;\r\n}","code-length":85,"reference":"Create provided plugin's default rule configuration\n","result":"Resolve plugin config.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeConfigFile(config) {\r\n    try {\r\n        fs.writeFileSync(\r\n            SOLIUMRC_FILENAME_ABSOLUTE,\r\n            JSON.stringify(config, null, 2)\r\n        );\r\n    } catch (e) {\r\n        errorReporter.reportFatal(\r\n            `An error occurred while writing to ${SOLIUMRC_FILENAME_ABSOLUTE}:${EOL}${e.message}`);\r\n        process.exit(errorCodes.WRITE_FAILED);\r\n    }\r\n}","code-length":127,"reference":"Synchronously write the passed configuration to the file whose absolute path is SOLIUMRC_FILENAME_ABSOLUTE\n","result":"Write the config file.","score":[0.0337,0.0826]}
{"code":"\/*is used to<extra_id_0>\r\nfunction lintString(sourceCode, userConfig, errorReporter, fileName) {\r\n    let lintErrors, fixesApplied;\r\n    try {\r\n        if (userConfig.options.autofix || userConfig.options.autofixDryrun) {\r\n            let result = solium.lintAndFix(sourceCode, userConfig);\r\n            lintErrors = result.errorMessages;\r\n            if (userConfig.options.autofix) {\r\n                applyFixes(fileName, result);\r\n                fixesApplied = result.fixesApplied;\r\n            } else {\r\n                errorReporter.reportDiff(fileName,\r\n                    sourceCode, result.fixedSourceCode, result.fixesApplied.length);\r\n            }\r\n        } else {\r\n            lintErrors = solium.lint(sourceCode, userConfig);\r\n        }\r\n    } catch (e) {\r\n        if (e.name !== \"SyntaxError\") {\r\n            const messageOrStackrace = userConfig.options.debug ? e.stack : e.message;\r\n            errorReporter.reportFatal(`An error occured while linting over ${fileName}:${EOL}${messageOrStackrace}`);\r\n            process.exit(errorCodes.ERRORS_FOUND);\r\n        }\r\n        lintErrors = [{\r\n            ruleName: \"\",\r\n            type: \"error\",\r\n            message: `Syntax error: unexpected token ${e.found}`,\r\n            line: e.location.start.line,\r\n            column: e.location.start.column\r\n        }];\r\n    }\r\n    lintErrors.length &&\r\n        errorReporter.report(fileName, sourceCode, lintErrors, fixesApplied);\r\n    return lintErrors.reduce(function(numOfErrors, err) {\r\n        return err.type === \"error\" ? numOfErrors+1 : numOfErrors;\r\n    }, 0);\r\n}","code-length":441,"reference":"Lint a source code string based on user settings. If autofix is enabled, write the fixed code back to file.\n","result":"Run the linters on the string.","score":[0.0223,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction lintFile(fileName, userConfig, errorReporter) {\r\n    let sourceCode;\r\n    try {\r\n        sourceCode = fs.readFileSync(fileName, \"utf8\");\r\n    } catch (e) {\r\n        errorReporter.reportFatal(\"Unable to read \" + fileName + \": \" + e.message);\r\n        process.exit(errorCodes.FILE_NOT_FOUND);\r\n    }\r\n    return lintString(sourceCode, userConfig, errorReporter, fileName);\r\n}","code-length":123,"reference":"Lint a file based on user settings\n","result":"Lint files.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createCliOptions(cliObject) {\r\n    function collect(val, memo) {\r\n        memo.push(val);\r\n        return memo;\r\n    }\r\n    cliObject\r\n        .version(`Solium version ${version}`)\r\n        .description(\"Linter to find & fix style and security issues in Solidity smart contracts.\")\r\n        .usage(\"[options] <keyword>\")\r\n        .option(\"-i, --init\", \"Create default rule configuration files\")\r\n        .option(\"-f, --file [filepath::String]\", \"Solidity file to lint\")\r\n        .option(\"-d, --dir [dirpath::String]\", \"Directory containing Solidity files to lint\")\r\n        .option(\"-R, --reporter [name::String]\", \"Format to report lint issues in (pretty | gcc)\", \"pretty\")\r\n        .option(\"-c, --config [filepath::String]\", \"Path to the .soliumrc configuration file\")\r\n        .option(\"-, --stdin\", \"Read input file from stdin\")\r\n        .option(\"--fix\", \"Fix Lint issues where possible\")\r\n        .option(\"--fix-dry-run\", \"Output fix diff without applying it\")\r\n        .option(\"--debug\", \"Display debug information\")\r\n        .option(\"--watch\", \"Watch for file changes\")\r\n        .option(\"--hot\", \"(Deprecated) Same as --watch\")\r\n        .option(\"--no-soliumignore\", \"Do not look for .soliumignore file\")\r\n        .option(\"--no-soliumrc\", \"Do not look for soliumrc configuration file\")\r\n        .option(\r\n            \"--rule [rule]\",\r\n            \"Rule to execute. This overrides the specified rule's configuration in soliumrc if present\",\r\n            collect,\r\n            []\r\n        )\r\n        .option(\r\n            \"--plugin [plugin]\",\r\n            \"Plugin to execute. This overrides the specified plugin's configuration in soliumrc if present\",\r\n            collect,\r\n            []\r\n        );\r\n}","code-length":491,"reference":"Function responsible for defining all the available commandline options & version information\n","result":"Create the cli options.","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options, listItemsSchema) {\r\n        let validateOptionsList = SchemaValidator.compile({\r\n            type: \"array\",\r\n            minItems: listItemsSchema.length,\r\n            additionalItems: false,\r\n            items: listItemsSchema\r\n        });\r\n        return validateOptionsList(options);\r\n    }","code-length":85,"reference":"Determine whether the options object supplied is valid according to the schema passed.\n","result":"Validate options list.","score":[0.0146,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectFD(emitted) {\r\n            const { node } = emitted,\r\n                visibilityModifiers = [\"public\", \"external\", \"internal\", \"private\"];\r\n            const modifiers = (node.modifiers || []),\r\n                firstVisibilityModifierIndex = modifiers.findIndex(m => visibilityModifiers.includes(m.name));\r\n            if (emitted.exit || firstVisibilityModifierIndex === -1) {\r\n                return;\r\n            }\r\n            const firstNonVisModifBeforeFirstVisModif = modifiers.slice(0, firstVisibilityModifierIndex).find(m => !visibilityModifiers.includes(m.name));\r\n            if (firstNonVisModifBeforeFirstVisModif) {\r\n                const issue = {\r\n                    node: modifiers[firstVisibilityModifierIndex],\r\n                    message: `Visibility modifier \"${modifiers[firstVisibilityModifierIndex].name}\" should come before other modifiers.`\r\n                };\r\n                context.report(issue);\r\n            }\r\n        }","code-length":233,"reference":"Find index of the first visibility modifier in declaration. Find the first non-VM before this first VM found above. If non-VM found, report the VM.","result":"Inspect the file descriptors.","score":[0.0017,0.0218]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isHex(literal) {\r\n    let reg = \/^[0-9a-f]+$\/i;\r\n    if (literal.slice(0, 2) !== \"0x\") {\r\n        return false;\r\n    }\r\n    return reg.test(literal.slice(2));\r\n}","code-length":81,"reference":"Determine whether the provided literal is in Hex Notation\n","result":"Check if a literal is a hex literal.","score":[0.1733,0.2871]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Soundfont (ctx, nameToUrl) {\r\n  console.warn('new Soundfont() is deprected')\r\n  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')\r\n  if (!(this instanceof Soundfont)) return new Soundfont(ctx)\r\n  this.nameToUrl = nameToUrl || Soundfont.nameToUrl\r\n  this.ctx = ctx\r\n  this.instruments = {}\r\n  this.promises = []\r\n}","code-length":133,"reference":"Create a Soundfont object\n\n","result":"Instrument Soundfont .","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction oscillatorPlayer (ctx, defaultOptions) {\r\n  defaultOptions = defaultOptions || {}\r\n  return function (note, time, duration, options) {\r\n    console.warn('The oscillator player is deprecated.')\r\n    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')\r\n    var midi = note > 0 && note < 129 ? +note : parser.midi(note)\r\n    var freq = midi ? parser.midiToFreq(midi, 440) : null\r\n    if (!freq) return\r\n    duration = duration || 0.2\r\n    options = options || {}\r\n    var destination = options.destination || defaultOptions.destination || ctx.destination\r\n    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'\r\n    var gain = options.gain || defaultOptions.gain || 0.4\r\n    var vco = ctx.createOscillator()\r\n    vco.type = vcoType\r\n    vco.frequency.value = freq\r\n        var vca = ctx.createGain()\r\n    vca.gain.value = gain\r\n        vco.connect(vca)\r\n    vca.connect(destination)\r\n    vco.start(time)\r\n    if (duration > 0) vco.stop(time + duration)\r\n    return vco\r\n  }\r\n}","code-length":348,"reference":"Returns a function that plays an oscillator\n\n","result":"Create the oscillator player.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction instrument (ac, name, options) {\r\n  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }\r\n  var opts = options || {}\r\n  var isUrl = opts.isSoundfontURL || isSoundfontURL\r\n  var toUrl = opts.nameToUrl || nameToUrl\r\n  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)\r\n  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {\r\n    var p = player(ac, buffers, opts).connect(opts.destination ? opts.destination : ac.destination)\r\n    p.url = url\r\n    p.name = name\r\n    return p\r\n  })\r\n}","code-length":205,"reference":"Load a soundfont instrument. It returns a promise that resolves to a\ninstrument object.\n\nThe instrument object returned by the promise has the following properties:\n\n- name: the instrument name\n- play: A function to play notes from the buffer with the signature\n`play(note, time, duration, options)`\n\n\nThe valid options are:\n\n- `format`: the soundfont format. 'mp3' by default. Can be 'ogg'\n- `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'\n- `nameToUrl` <Function>: a function to convert from instrument names to URL\n- `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.\n- `gain`: the gain of the player (1 by default)\n- `notes`: an array of the notes to decode. It can be an array of strings\nwith note names or an array of numbers with midi note numbers. This is a\nperformance option: since decoding mp3 is a cpu intensive process, you can limit\nlimit the number of notes you want and reduce the time to load the instrument.\n\n","result":"Instrument audio files.","score":[0,0.0033]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hasSystemLib (lib) {\r\n  var libName = 'lib' + lib + '.+(so|dylib)'\r\n  var libNameRegex = new RegExp(libName)\r\n  if (hasLdconfig()) {\r\n    try {\r\n      if (childProcess.execSync('ldconfig -p 2>\/dev\/null | grep -E \"' + libName + '\"').length) {\r\n        return true\r\n      }\r\n    } catch (err) {\r\n    }\r\n  }\r\n  return SYSTEM_PATHS.some(function (systemPath) {\r\n    try {\r\n      var dirListing = fs.readdirSync(systemPath)\r\n      return dirListing.some(function (file) {\r\n        return libNameRegex.test(file)\r\n      })\r\n    } catch (err) {\r\n      return false\r\n    }\r\n  })\r\n}","code-length":222,"reference":"Checks for lib using ldconfig if present, or searching SYSTEM_PATHS\notherwise.\n","result":"Detect system libraries.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function thenify(fn) {\r\n  return await new Promise(function(resolve, reject) {\r\n    function callback(err, res) {\r\n      if (err) return reject(err);\r\n      return resolve(res);\r\n    }\r\n    fn(callback);\r\n  });\r\n}","code-length":81,"reference":"Helper function to convert a callback to a Promise.","result":"Wrap the function in a async function.","score":[0.1443,0.1136]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startWatching(opts) {\r\n    var chokidarOpts = createChokidarOpts(opts);\r\n    var watcher = chokidar.watch(opts.patterns, chokidarOpts);\r\n    var throttledRun = _.throttle(run, opts.throttle);\r\n    var debouncedRun = _.debounce(throttledRun, opts.debounce);\r\n    watcher.on('all', function(event, path) {\r\n        var description = EVENT_DESCRIPTIONS[event] + ':';\r\n        if (opts.verbose) {\r\n            console.error(description, path);\r\n        } else {\r\n            if (!opts.silent) {\r\n                console.log(event + ':' + path);\r\n            }\r\n        }\r\n        if (opts.command) {\r\n            debouncedRun(\r\n                opts.command\r\n                    .replace(\/\\{path\\}\/ig, path)\r\n                    .replace(\/\\{event\\}\/ig, event)\r\n            );\r\n        }\r\n    });\r\n    watcher.on('error', function(error) {\r\n        console.error('Error:', error);\r\n        console.error(error.stack);\r\n    });\r\n    watcher.once('ready', function() {\r\n        var list = opts.patterns.join('\", \"');\r\n        if (!opts.silent) {\r\n            console.error('Watching', '\"' + list + '\" ..');\r\n        }\r\n    });\r\n}","code-length":360,"reference":"Estimates spent working hours based on commit dates","result":"Start watching .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _resolveIgnoreOpt(ignoreOpt) {\r\n    if (!ignoreOpt) {\r\n        return ignoreOpt;\r\n    }\r\n    var ignores = !_.isArray(ignoreOpt) ? [ignoreOpt] : ignoreOpt;\r\n    return _.map(ignores, function(ignore) {\r\n        var isRegex = ignore[0] === '\/' && ignore[ignore.length - 1] === '\/';\r\n        if (isRegex) {\r\n            var match = ignore.match(new RegExp('^\/(.*)\/(.*?)$'));\r\n            return new RegExp(match[1], match[2]);\r\n        }\r\n        return ignore;\r\n    });\r\n}","code-length":164,"reference":"Takes string or array of strings","result":"Resolve the ignore option.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requireProp(props, propName, componentName) {\r\n  return isEmpty(props[propName])\r\n    ? new Error(\r\n        `The prop \\`${propName}\\` is required for \\`${componentName}\\`.`\r\n      )\r\n    : null\r\n}","code-length":73,"reference":"Require a prop to not be empty","result":"Validate the prop.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _0to1(props, propName, componentName) {\r\n  if (isEmpty(props[propName])) {\r\n    return null\r\n  }\r\n  if (\r\n    typeof props[propName] === 'number' &&\r\n    props[propName] >= 0 &&\r\n    props[propName] <= 1\r\n  ) {\r\n    return null\r\n  }\r\n  return new Error(\r\n    `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Please provide a number in the 0-1 range.`\r\n  )\r\n}","code-length":146,"reference":"Accept any number in the 0 => 1 range","result":"Check if the prop is valid .","score":[0.1214,0.0568]}
{"code":"\/*is used to<extra_id_0>\r\nfunction babel(options = {}) {\r\n  return (context, { addLoader }) =>\r\n    addLoader({\r\n      test: \/\\.(js|jsx)$\/,\r\n      use: [\r\n        {\r\n          loader: 'thread-loader',\r\n          options: {\r\n            ...(process.env.NODE_ENV === 'development' && { poolTimeout: Infinity }),\r\n          },\r\n        },\r\n        {\r\n          loader: 'babel-loader',\r\n          options: Object.assign(babelLoaderOptions, options),\r\n        },\r\n      ],\r\n      ...context.match,\r\n    })\r\n}","code-length":165,"reference":"it transpiles both application javascript and node_modules javascript","result":"Avoid the use of the `babel` loader.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction imageLoader() {\r\n  return (context, { addLoader }) =>\r\n    addLoader({\r\n      test: \/\\.(gif|ico|jpg|jpeg|png|webp)$\/,\r\n      loader: 'url-loader',\r\n      options: {\r\n        limit: 10000,\r\n        name: fileNameTemplate,\r\n      },\r\n    })\r\n}","code-length":99,"reference":"Images smaller than 10kb are loaded as a base64 encoded url instead of file url","result":"Load images.","score":[0,0.0365]}
{"code":"\/*is used to<extra_id_0>\r\nfunction csvLoader() {\r\n  return (context, { addLoader }) =>\r\n    addLoader({\r\n      test: \/\\.csv$\/,\r\n      loader: 'csv-loader',\r\n      options: {\r\n        dynamicTyping: true,\r\n        header: true,\r\n        skipEmptyLines: true,\r\n      },\r\n    })\r\n}","code-length":96,"reference":"Parse .csv files with PapaParse and return it in a JSON format","result":"Load CSV files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cssSvgLoader() {\r\n  return (context, { addLoader }) =>\r\n    addLoader({\r\n      test: \/(.*)\\.svg$\/,\r\n      issuer: {\r\n        test: \/\\.css$\/,\r\n      },\r\n      loader: 'url-loader',\r\n      options: {\r\n        limit: 10000,\r\n        name: fileNameTemplate,\r\n      },\r\n    })\r\n}","code-length":109,"reference":"Url-loader for svgs in css","result":"Load the cssSvgLoader.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prependEntry(entry) {\r\n  const blockFunction = (context, util) => {\r\n    if (!context.entriesToPrepend) context.entriesToPrepend = []\r\n    context.entriesToPrepend.unshift(entry)\r\n    return config => config\r\n  }\r\n  return Object.assign(blockFunction, {\r\n    post: prependEntryPostHook,\r\n  })\r\n}","code-length":102,"reference":"Add entryPoint at beginning of 'entry' array","result":"Create a block function for the entry.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction build() {\r\n  log.info(`Creating an optimized production build...`)\r\n  const compiler = createWebpackCompiler(\r\n    () => {\r\n      log.ok(`The ${chalk.cyan(relativeAppBuildPath)} folder is ready to be deployed.`)\r\n    },\r\n    () => {\r\n      log.err(`Aborting`)\r\n      process.exit(2)\r\n    }\r\n  )\r\n  return new Promise((resolve, reject) => {\r\n    compiler.run((err, stats) => {\r\n      if (err) {\r\n        return reject(err)\r\n      }\r\n      return resolve(stats)\r\n    })\r\n  })\r\n}","code-length":178,"reference":"Create the production build and print the deployment instructions.","result":"Build the app.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeData (to, from) {\r\n\t    if (!from) { return to }\r\n\t    var key, toVal, fromVal;\r\n\t    var keys = Object.keys(from);\r\n\t    for (var i = 0; i < keys.length; i++) {\r\n\t      key = keys[i];\r\n\t      toVal = to[key];\r\n\t      fromVal = from[key];\r\n\t      if (!hasOwn(to, key)) {\r\n\t        set(to, key, fromVal);\r\n\t      } else if (\r\n\t        toVal !== fromVal &&\r\n\t        isPlainObject(toVal) &&\r\n\t        isPlainObject(fromVal)\r\n\t      ) {\r\n\t        mergeData(toVal, fromVal);\r\n\t      }\r\n\t    }\r\n\t    return to\r\n\t  }","code-length":212,"reference":"Helper that recursively merges two data objects together.","result":"Merge data objects.","score":[0.0771,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction withDefault(type) {\r\n\t  return Object.defineProperty(type, 'def', {\r\n\t    value: function value(def) {\r\n\t      if (def === undefined && !this.default) {\r\n\t        return this;\r\n\t      }\r\n\t      if (!isFunction(def) && !validateType(this, def)) {\r\n\t        warn(this._vueTypes_name + \" - invalid default value: \\\"\" + def + \"\\\"\", def);\r\n\t        return this;\r\n\t      }\r\n\t      if (isArray(def)) {\r\n\t        this.default = function () {\r\n\t          return [].concat(def);\r\n\t        };\r\n\t      } else if (isPlainObject_1(def)) {\r\n\t        this.default = function () {\r\n\t          return Object.assign({}, def);\r\n\t        };\r\n\t      } else {\r\n\t        this.default = def;\r\n\t      }\r\n\t      return this;\r\n\t    },\r\n\t    enumerable: false,\r\n\t    writable: false\r\n\t  });\r\n\t}","code-length":277,"reference":"Adds a `def` method to the object returning a new object with passed in argument as `default` property\n\n","result":"Create a type with default value.","score":[0.0311,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction withValidate(type) {\r\n\t  return Object.defineProperty(type, 'validate', {\r\n\t    value: function value(fn) {\r\n\t      this.validator = fn.bind(this);\r\n\t      return this;\r\n\t    },\r\n\t    enumerable: false\r\n\t  });\r\n\t}","code-length":86,"reference":"Adds a validate method useful to set the prop `validator` function.\n\n","result":"Wrap the type with validate function.","score":[0.1104,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toType(name, obj, validateFn) {\r\n\t  if (validateFn === void 0) {\r\n\t    validateFn = false;\r\n\t  }\r\n\t  Object.defineProperty(obj, '_vueTypes_name', {\r\n\t    enumerable: false,\r\n\t    writable: false,\r\n\t    value: name\r\n\t  });\r\n\t  withDefault(withRequired(obj));\r\n\t  if (validateFn) {\r\n\t    withValidate(obj);\r\n\t  }\r\n\t  if (isFunction(obj.validator)) {\r\n\t    obj.validator = obj.validator.bind(obj);\r\n\t  }\r\n\t  return obj;\r\n\t}","code-length":176,"reference":"Adds `isRequired` and `def` modifiers to an object\n\n","result":"Create a type definition for Vue.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateType(type, value, silent) {\r\n\t  if (silent === void 0) {\r\n\t    silent = false;\r\n\t  }\r\n\t  var typeToCheck = type;\r\n\t  var valid = true;\r\n\t  var expectedType;\r\n\t  if (!isPlainObject_1(type)) {\r\n\t    typeToCheck = {\r\n\t      type: type\r\n\t    };\r\n\t  }\r\n\t  var namePrefix = typeToCheck._vueTypes_name ? typeToCheck._vueTypes_name + ' - ' : '';\r\n\t  if (hasOwn.call(typeToCheck, 'type') && typeToCheck.type !== null) {\r\n\t    if (isArray(typeToCheck.type)) {\r\n\t      valid = typeToCheck.type.some(function (type) {\r\n\t        return validateType(type, value, true);\r\n\t      });\r\n\t      expectedType = typeToCheck.type.map(function (type) {\r\n\t        return getType(type);\r\n\t      }).join(' or ');\r\n\t    } else {\r\n\t      expectedType = getType(typeToCheck);\r\n\t      if (expectedType === 'Array') {\r\n\t        valid = isArray(value);\r\n\t      } else if (expectedType === 'Object') {\r\n\t        valid = isPlainObject_1(value);\r\n\t      } else if (expectedType === 'String' || expectedType === 'Number' || expectedType === 'Boolean' || expectedType === 'Function') {\r\n\t        valid = getNativeType(value) === expectedType;\r\n\t      } else {\r\n\t        valid = value instanceof typeToCheck.type;\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  if (!valid) {\r\n\t    silent === false && warn(namePrefix + \"value \\\"\" + value + \"\\\" should be of type \\\"\" + expectedType + \"\\\"\");\r\n\t    return false;\r\n\t  }\r\n\t  if (hasOwn.call(typeToCheck, 'validator') && isFunction(typeToCheck.validator)) {\r\n\t\r\n\t    var oldWarn;\r\n\t    if (silent) {\r\n\t      oldWarn = warn;\r\n\t      warn = noop;\r\n\t    }\r\n\t    valid = typeToCheck.validator(value);\r\n\t    oldWarn && (warn = oldWarn);\r\n\t    if (!valid && silent === false) warn(namePrefix + \"custom validation failed\");\r\n\t    return valid;\r\n\t  }\r\n\t  return valid;\r\n\t}","code-length":598,"reference":"Validates a given value against a prop type object\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CustomEvent(type, eventInitDict) {\r\n                var event = document.createEvent(eventName);\r\n        if (typeof type != 'string') {\r\n          throw new Error('An event name must be provided');\r\n        }\r\n        if (eventName == 'Event') {\r\n          event.initCustomEvent = initCustomEvent;\r\n        }\r\n        if (eventInitDict == null) {\r\n          eventInitDict = defaultInitDict;\r\n        }\r\n        event.initCustomEvent(\r\n          type,\r\n          eventInitDict.bubbles,\r\n          eventInitDict.cancelable,\r\n          eventInitDict.detail\r\n        );\r\n        return event;\r\n      }","code-length":177,"reference":"the infamous substitute","result":"Create custom events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initCustomEvent(\r\n        type, bubbles, cancelable, detail\r\n      ) {\r\n                this.initEvent(type, bubbles, cancelable);\r\n        this.detail = detail;\r\n      }","code-length":62,"reference":"attached at runtime","result":"Create custom event objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cleanUpRuntimeEvents() {\r\n            document.removeEventListener('touchmove', onMove, getPassiveSupported() ? { passive: false } : false);\r\n            document.removeEventListener('touchend', onUp);\r\n            document.removeEventListener('touchcancel', stopTracking);\r\n            document.removeEventListener('mousemove', onMove, getPassiveSupported() ? { passive: false } : false);\r\n            document.removeEventListener('mouseup', onUp);\r\n        }","code-length":116,"reference":"Removes all events set by this instance during runtime","result":"Prevent runtime events from being removed.","score":[0.1392,0.1149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addRuntimeEvents() {\r\n            cleanUpRuntimeEvents();\r\nsiveSupported() ? { passive: false } : false);\r\n            document.addEventListener('touchend', onUp);\r\n            document.addEventListener('touchcancel', stopTracking);\r\n            document.addEventListener('mousemove', onMove, getPassiveSupported() ? { passive: false } : false);\r\n            document.addEventListener('mouseup', onUp);\r\n        }","code-length":109,"reference":"Add all required runtime events","result":"Prevent duplicate events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeEvent(ev) {\r\n            if (ev.type === 'touchmove' || ev.type === 'touchstart' || ev.type === 'touchend') {\r\n                var touch = ev.targetTouches[0] || ev.changedTouches[0];\r\n                return {\r\n                    x: touch.clientX,\r\n                    y: touch.clientY,\r\n                    id: touch.identifier\r\n                };\r\n            } else {\r\n                return {\r\n                    x: ev.clientX,\r\n                    y: ev.clientY,\r\n                    id: null\r\n                };\r\n            }\r\n        }","code-length":157,"reference":"Creates a custom normalized event object from touch and mouse events\n","result":"Return ev.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onDown(ev) {\r\n            var event = normalizeEvent(ev);\r\n            if (!pointerActive && !paused) {\r\n                pointerActive = true;\r\n                decelerating = false;\r\n                pointerId = event.id;\r\n                pointerLastX = pointerCurrentX = event.x;\r\n                pointerLastY = pointerCurrentY = event.y;\r\n                trackingPoints = [];\r\n                addTrackingPoint(pointerLastX, pointerLastY);\r\n                addRuntimeEvents();\r\n            }\r\n        }","code-length":135,"reference":"Initializes movement tracking\n","result":"Prevent default event propagation.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onMove(ev) {\r\n            ev.preventDefault();\r\n            var event = normalizeEvent(ev);\r\n            if (pointerActive && event.id === pointerId) {\r\n                pointerCurrentX = event.x;\r\n                pointerCurrentY = event.y;\r\n                addTrackingPoint(pointerLastX, pointerLastY);\r\n                requestTick();\r\n            }\r\n        }","code-length":102,"reference":"Handles move events\n","result":"Prevent default event propagation.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addTrackingPoint(x, y) {\r\n            var time = Date.now();\r\n            while (trackingPoints.length > 0) {\r\n                if (time - trackingPoints[0].time <= 100) {\r\n                    break;\r\n                }\r\n                trackingPoints.shift();\r\n            }\r\n            trackingPoints.push({ x: x, y: y, time: time });\r\n        }","code-length":104,"reference":"Records movement for the last 100ms\n","result":"Add a new tracking point.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateAndRender() {\r\n            var pointerChangeX = pointerCurrentX - pointerLastX;\r\n            var pointerChangeY = pointerCurrentY - pointerLastY;\r\n            targetX += pointerChangeX * multiplier;\r\n            targetY += pointerChangeY * multiplier;\r\n            if (bounce) {\r\n                var diff = checkBounds();\r\n                if (diff.x !== 0) {\r\n                    targetX -= pointerChangeX * dragOutOfBoundsMultiplier(diff.x) * multiplier;\r\n                }\r\n                if (diff.y !== 0) {\r\n                    targetY -= pointerChangeY * dragOutOfBoundsMultiplier(diff.y) * multiplier;\r\n                }\r\n            } else {\r\n                checkBounds(true);\r\n            }\r\n            callUpdateCallback();\r\n            pointerLastX = pointerCurrentX;\r\n            pointerLastY = pointerCurrentY;\r\n            ticking = false;\r\n        }","code-length":224,"reference":"Calculate new values, call update function","result":"Update the target position and render the.","score":[0,0.082]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startDecelAnim() {\r\n            var firstPoint = trackingPoints[0];\r\n            var lastPoint = trackingPoints[trackingPoints.length - 1];\r\n            var xOffset = lastPoint.x - firstPoint.x;\r\n            var yOffset = lastPoint.y - firstPoint.y;\r\n            var timeOffset = lastPoint.time - firstPoint.time;\r\n            var D = timeOffset \/ 15 \/ multiplier;\r\n            decVelX = xOffset \/ D || 0;\r\n            decVelY = yOffset \/ D || 0;\r\n            var diff = checkBounds();\r\n            if (Math.abs(decVelX) > 1 || Math.abs(decVelY) > 1 || !diff.inBounds) {\r\n                decelerating = true;\r\n                requestAnimFrame(stepDecelAnim);\r\n            }\r\n        }","code-length":213,"reference":"Initialize animation of values coming to a stop","result":"Start the decel animation.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stepDecelAnim() {\r\n            if (!decelerating) {\r\n                return;\r\n            }\r\n            decVelX *= friction;\r\n            decVelY *= friction;\r\n            targetX += decVelX;\r\n            targetY += decVelY;\r\n            var diff = checkBounds();\r\n            if (Math.abs(decVelX) > stopThreshold || Math.abs(decVelY) > stopThreshold || !diff.inBounds) {\r\n                if (bounce) {\r\n                    var reboundAdjust = 2.5;\r\n                    if (diff.x !== 0) {\r\n                        if (diff.x * decVelX <= 0) {\r\n                            decVelX += diff.x * bounceDeceleration;\r\n                        } else {\r\n                            var adjust = diff.x > 0 ? reboundAdjust : -reboundAdjust;\r\n                            decVelX = (diff.x + adjust) * bounceAcceleration;\r\n                        }\r\n                    }\r\n                    if (diff.y !== 0) {\r\n                        if (diff.y * decVelY <= 0) {\r\n                            decVelY += diff.y * bounceDeceleration;\r\n                        } else {\r\n                            var adjust = diff.y > 0 ? reboundAdjust : -reboundAdjust;\r\n                            decVelY = (diff.y + adjust) * bounceAcceleration;\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (diff.x !== 0) {\r\n                        if (diff.x > 0) {\r\n                            targetX = boundXmin;\r\n                        } else {\r\n                            targetX = boundXmax;\r\n                        }\r\n                        decVelX = 0;\r\n                    }\r\n                    if (diff.y !== 0) {\r\n                        if (diff.y > 0) {\r\n                            targetY = boundYmin;\r\n                        } else {\r\n                            targetY = boundYmax;\r\n                        }\r\n                        decVelY = 0;\r\n                    }\r\n                }\r\n                callUpdateCallback();\r\n                requestAnimFrame(stepDecelAnim);\r\n            } else {\r\n                decelerating = false;\r\n            }\r\n        }","code-length":544,"reference":"Animates values slowing down","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkBounds(restrict) {\r\n            var xDiff = 0;\r\n            var yDiff = 0;\r\n            if (boundXmin !== undefined && targetX < boundXmin) {\r\n                xDiff = boundXmin - targetX;\r\n            } else if (boundXmax !== undefined && targetX > boundXmax) {\r\n                xDiff = boundXmax - targetX;\r\n            }\r\n            if (boundYmin !== undefined && targetY < boundYmin) {\r\n                yDiff = boundYmin - targetY;\r\n            } else if (boundYmax !== undefined && targetY > boundYmax) {\r\n                yDiff = boundYmax - targetY;\r\n            }\r\n            if (restrict) {\r\n                if (xDiff !== 0) {\r\n                    targetX = (xDiff > 0) ? boundXmin : boundXmax;\r\n                }\r\n                if (yDiff !== 0) {\r\n                    targetY = (yDiff > 0) ? boundYmin : boundYmax;\r\n                }\r\n            }\r\n            return {\r\n                x: xDiff,\r\n                y: yDiff,\r\n                inBounds: xDiff === 0 && yDiff === 0\r\n            };\r\n        }","code-length":303,"reference":"Determine position relative to bounds\n","result":"Check the bounds of a target object.","score":[0.1615,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initCompDirs(){\r\n  var compRoot = path.resolve(process.cwd(),'src\/components'),\r\n      compReg  = \/^[A-Z]\\w+$\/;\r\n  compDirs = fs.readdirSync(compRoot).filter(function(filename){\r\n    return compReg.test(filename)\r\n  })\r\n  return compDirs\r\n}","code-length":99,"reference":"get all components dirs","result":"Generate the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction appendLogToFileStream(fileName, newLog, headerLineCount) {\r\n    const filePath = path.join(__dirname, '..\/..\/', fileName)\r\n    const oldChangelog = grunt.file.read(filePath)\r\n      .toString()\r\n      .split('\\n');\r\n    let wStr = fs.createWriteStream(filePath)\r\n        let logHeader = oldChangelog.slice(0, headerLineCount);\r\n        let prevLogs = oldChangelog.slice(headerLineCount);\r\n    var s = new Readable;\r\n    s.pipe(wStr);\r\n    s.push(logHeader.join('\\n') + '\\n');\r\n    s.push(newLog);\r\n    s.push(prevLogs.join('\\n'));\r\n    s.push(null);\r\n    return wStr;\r\n  }","code-length":212,"reference":"Writes a log to a file\n","result":"Append log to file stream.","score":[0.3079,0.4331]}
{"code":"\/*is used to<extra_id_0>\r\nfunction doSeek(length, eocdrNotFoundCallback) {\r\n\t\t\t\treader.readUint8Array(reader.size - length, length, function(bytes) {\r\n\t\t\t\t\tfor (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {\r\n\t\t\t\t\t\tif (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {\r\n\t\t\t\t\t\t\teocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\teocdrNotFoundCallback();\r\n\t\t\t\t}, function() {\r\n\t\t\t\t\tonerror(ERR_READ);\r\n\t\t\t\t});\r\n\t\t\t}","code-length":205,"reference":"seek last length bytes of file for EOCDR","result":"Seek to the end of the file.","score":[0.14,0.1899]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CronJob (sandbox, job) {\r\n        assign(this, job);\r\n        if (job.token) {\r\n        this.claims = Decode(job.token);\r\n    }\r\n    else {\r\n        this.claims = {\r\n            jtn: job.name,\r\n            ten: this.container,\r\n        };\r\n    }\r\n        this.sandbox = sandbox;\r\n        Object.defineProperty(this, 'url', {\r\n        enumerable: true,\r\n        get: function () {\r\n            return this.sandbox.url + '\/api\/run\/' + this.container + '\/' + this.name;\r\n        }\r\n    });\r\n}","code-length":170,"reference":"Creates an object representing a CronJob\n\n","result":"Create a new CronJob instance.","score":[0.2339,0.2542]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Sandbox (options) {\r\n    var securityVersion = 'v1';\r\n    this.url = options.url;\r\n    this.container = options.container;\r\n    this.token = options.token;\r\n    this.onBeforeRequest = []\r\n        .concat(options.onBeforeRequest)\r\n        .filter(hook => typeof hook === 'function');\r\n    try {\r\n        var typ = Decode(options.token, { header: true }).typ;\r\n        if (typ && typ.toLowerCase() === 'jwt') {\r\n            securityVersion = 'v2';\r\n        }\r\n    } catch (_) {\r\n    }\r\n    this.securityVersion = securityVersion;\r\n}","code-length":179,"reference":"Creates an object representing a user's webtask.io credentials\n\n","result":"Test the sandbox.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Webtask (sandbox, token, options) {\r\n    if (!options) options = {};\r\n     if (sandbox.securityVersion === 'v1') {\r\n        try {\r\n                        this.claims = Decode(token);\r\n                        this.token = token;\r\n        }\r\n        catch (_) {\r\n            throw new Error('token must be a valid JWT');\r\n        }\r\n    }\r\n     if (sandbox.securityVersion === 'v2') {\r\n        if (typeof options.name !== 'string') {\r\n            throw new Error('name must be a valid string');\r\n        }\r\n        this.claims = {\r\n            jtn: options.name,\r\n            ten: options.container || sandbox.container,\r\n        }\r\n    }\r\n        this.sandbox = sandbox;\r\n        this.meta = options.meta || {};\r\n        this.secrets = options.secrets;\r\n        this.code = options.code;    \r\n        Object.defineProperty(this, 'container', {\r\n        enumerable: true,\r\n        get: function () {\r\n            return options.container || this.sandbox.container;\r\n        }\r\n    });\r\n        Object.defineProperty(this, 'url', {\r\n        enumerable: true,\r\n        get: function () {\r\n            var url = options.webtask_url;\r\n            if (!url) {\r\n                if (this.claims.host) {\r\n                   var surl = Url.parse(this.sandbox.url);\r\n                   url = surl.protocol + '\r\n                }\r\n                else {\r\n                   url = this.sandbox.url + '\/api\/run\/' + this.sandbox.container;\r\n                }\r\n                if (this.claims.jtn) url += '\/' + this.claims.jtn;\r\n                else url += '?key=' + this.token;\r\n            }\r\n            return url;\r\n        }\r\n    });\r\n}","code-length":473,"reference":"Creates an object representing a Webtask\n\n","result":"Create a new Webtask instance.","score":[0.2339,0.2542]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrappedPromise(executor) {\r\n    if (!(this instanceof wrappedPromise)) {\r\n      return Promise(executor);\r\n    }\r\n    if (typeof executor !== 'function') {\r\n      return new Promise(executor);\r\n    }\r\n    var context, args;\r\n    var promise = new Promise(wrappedExecutor);\r\n    promise.__proto__ = wrappedPromise.prototype;\r\n    try {\r\n      executor.apply(context, args);\r\n    } catch (err) {\r\n      args[1](err);\r\n    }\r\n    return promise;\r\n    function wrappedExecutor(resolve, reject) {\r\n      context = this;\r\n      args = [wrappedResolve, wrappedReject];\r\n      function wrappedResolve(val) {\r\n        ensureAslWrapper(promise, false);\r\n        return resolve(val);\r\n      }\r\n      function wrappedReject(val) {\r\n        ensureAslWrapper(promise, false);\r\n        return reject(val);\r\n      }\r\n    }\r\n  }","code-length":249,"reference":"Updates to this class should also be applied to the the ES6 version in es6-wrapped-promise.js.","result":"Return Promise.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction union(dest, added) {\r\n  var destLength = dest.length;\r\n  var addedLength = added.length;\r\n  var returned = [];\r\n  if (destLength === 0 && addedLength === 0) return returned;\r\n  for (var j  = 0; j < destLength; j++) returned[j] = dest[j];\r\n  if (addedLength === 0) return returned;\r\n  for (var i = 0; i < addedLength; i++) {\r\n    var missing = true;\r\n    for (j = 0; j < destLength; j++) {\r\n      if (dest[j].uid === added[i].uid) {\r\n        missing = false;\r\n        break;\r\n      }\r\n    }\r\n    if (missing) returned.push(added[i]);\r\n  }\r\n  return returned;\r\n}","code-length":214,"reference":"filter methods and can be inlined.","result":"Create a union function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction simpleWrap(original, list, length) {\r\n  inAsyncTick = true;\r\n  for (var i = 0; i < length; ++i) {\r\n    var listener = list[i];\r\n    if (listener.create) listener.create(listener.data);\r\n  }\r\n  inAsyncTick = false;\r\n  return function () {\r\n    listenerStack.push(listeners);\r\n    listeners = union(list, listeners);\r\n    var returned = original.apply(this, arguments);\r\n    listeners = listenerStack.pop();\r\n    return returned;\r\n  };\r\n}","code-length":153,"reference":"for performance in the case where there are no handlers, just the listener","result":"Wrap functions in an async tick.","score":[0.0601,0.0407]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapCallback(original) {\r\n  var length = listeners.length;\r\n  if (length === 0) return original;\r\n  var list = listeners.slice();\r\n  for (var i = 0; i < length; ++i) {\r\n    if (list[i].flags > 0) return asyncWrap(original, list, length);\r\n  }\r\n  return simpleWrap(original, list, length);\r\n}","code-length":109,"reference":"index.js is called. If there are no listeners, return the functionunwrapped.","result":"Return original.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (dir, options, internal) {\r\n    options = options || largest.options;\r\n    return fs.readdirAsync(dir)\r\n    .then (function (files) {\r\n        var paths = _.map(files, function (file) { return path.join(dir, file); });\r\n        return Promise.all(_.map(paths, function (path) { return fs.statAsync(path); }))\r\n        .then(function (stats) { return [paths, stats]; });\r\n    })\r\n    .spread(function (paths, stats) {\r\n        return Promise.all(\r\n            _.map(stats, function (stat, i) {\r\n                if (stat.isFile()) return Promise.resolve({ path: paths[i], size: stat.size, searched: 1 });\r\n                return options.recurse ? largest(paths[i], options, true) : Promise.resolve(null);\r\n            })\r\n        );\r\n    })\r\n    .then(function (candidates) {\r\n        return _(candidates)\r\n        .compact()\r\n        .reduce(function (best, cand) {\r\n            if (cand.size > best.size) var temp = cand, cand = best, best = temp;\r\n            best.searched += cand.searched;\r\n            return best;\r\n        });\r\n    })\r\n    .then(function (result) {\r\n        if (result && options.preview && !internal) {\r\n            var fd_;\r\n            return fs.openAsync(result.path, 'r')\r\n            .then(function (fd) {\r\n                fd_ = fd;\r\n                var buffer = new Buffer(40);\r\n                return fs.readAsync(fd, buffer, 0, 40, 0);\r\n            })\r\n            .spread(function (bytesRead, buffer) {\r\n                result.preview = buffer.toString('utf-8', 0, bytesRead);\r\n                return fs.closeAsync(fd_);\r\n            })\r\n            .then(function () {\r\n                return result;\r\n            });\r\n        } else {\r\n            return result;\r\n        }\r\n    });\r\n}","code-length":523,"reference":"Finds the largest file in the given directory, optionally performing a recursive search.\n","result":"Code too long,keep in 512.","score":[0.0485,0.041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeAsyncFunc(config) {\r\n    config.validate();\r\n    var result = function async(bodyFunc) {\r\n        var semaphore = config.maxConcurrency ? new Semaphore(config.maxConcurrency) : Semaphore.unlimited;\r\n        var makeFunc = config.isIterable ? makeAsyncIterator : makeAsyncNonIterator;\r\n        var result = makeFunc(bodyFunc, config, semaphore);\r\n        var arity = bodyFunc.length;\r\n        if (config.acceptsCallback)\r\n            ++arity;\r\n        result = makeFuncWithArity(result, arity);\r\n        return result;\r\n    };\r\n    result.mod = makeModFunc(config);\r\n    return result;\r\n}","code-length":177,"reference":"Function for creating a specific variant of the async function.","result":"Make a function that returns an async function .","score":[0.1297,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeAsyncIterator(bodyFunc, config, semaphore) {\r\n    return function iterable() {\r\n        var startupArgs = new Array(arguments.length + 1);\r\n        for (var i = 0, len = arguments.length; i < len; ++i)\r\n            startupArgs[i + 1] = arguments[i];\r\n        var yield_ = function (expr) {\r\n            if (!Fiber.current) {\r\n                throw new Error('await functions, yield functions, and value-returning suspendable ' +\r\n                    'functions may only be called from inside a suspendable function. ');\r\n            }\r\n            if (runContext.callback)\r\n                runContext.callback(null, { value: expr, done: false });\r\n            if (runContext.resolver)\r\n                runContext.resolver.resolve({ value: expr, done: false });\r\n            Fiber.yield();\r\n        };\r\n        startupArgs[0] = yield_;\r\n        var runContext = new RunContext(bodyFunc, this, startupArgs);\r\n        var iterator = new AsyncIterator(runContext, semaphore, config.returnValue, config.acceptsCallback);\r\n        runContext.wrapped = function () {\r\n            var len = arguments.length, args = new Array(len);\r\n            for (var i = 0; i < len; ++i)\r\n                args[i] = arguments[i];\r\n            bodyFunc.apply(this, args);\r\n            iterator.destroy();\r\n            return { done: true };\r\n        };\r\n        return iterator;\r\n    };\r\n}","code-length":381,"reference":"Function for creating iterable suspendable functions.","result":"Make an async iterator .","score":[0,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeAsyncNonIterator(bodyFunc, config, semaphore) {\r\n    return function nonIterable() {\r\n        var argsAsArray = new Array(arguments.length);\r\n        for (var i = 0; i < argsAsArray.length; ++i)\r\n            argsAsArray[i] = arguments[i];\r\n        if (FiberMgr.isExecutingInFiber())\r\n            this._semaphore = Semaphore.unlimited;\r\n        var runContext = new RunContext(bodyFunc, this, argsAsArray, function () { return semaphore.leave(); });\r\n        if (config.returnValue !== Config.NONE) {\r\n            var resolver = defer();\r\n            runContext.resolver = resolver;\r\n        }\r\n        if (config.acceptsCallback && argsAsArray.length && _.isFunction(argsAsArray[argsAsArray.length - 1])) {\r\n            var callback = argsAsArray.pop();\r\n            runContext.callback = callback;\r\n        }\r\n        if (config.returnValue === Config.THUNK) {\r\n            var thunk = function (done) {\r\n                if (done)\r\n                    resolver.promise.then(function (val) { return done(null, val); }, function (err) { return done(err); });\r\n                semaphore.enter(function () { return FiberMgr.create().run(runContext); });\r\n            };\r\n        }\r\n        else {\r\n            semaphore.enter(function () { return FiberMgr.create().run(runContext); });\r\n        }\r\n        switch (config.returnValue) {\r\n            case Config.PROMISE: return resolver.promise;\r\n            case Config.THUNK: return thunk;\r\n            case Config.RESULT: return await(resolver.promise);\r\n            case Config.NONE: return;\r\n        }\r\n    };\r\n}","code-length":437,"reference":"Function for creating non-iterable suspendable functions.","result":"Make an async function that returns an async function.","score":[0,0.0794]}
{"code":"\/*is used to<extra_id_0>\r\nfunction traverseClone(o, visitor) {\r\n    var result;\r\n    if (_.isArray(o)) {\r\n        var len = o.length;\r\n        result = new Array(len);\r\n        for (var i = 0; i < len; ++i) {\r\n            result[i] = traverseClone(o[i], visitor);\r\n            visitor(result, i);\r\n        }\r\n    }\r\n    else if (_.isPlainObject(o)) {\r\n        result = {};\r\n        for (var key in o) {\r\n            if (o.hasOwnProperty(key)) {\r\n                result[key] = traverseClone(o[key], visitor);\r\n                visitor(result, key);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        result = o;\r\n    }\r\n    return result;\r\n}","code-length":216,"reference":"Object traversal with cloning.","result":"Clone a clone.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction thunkToPromise(thunk) {\r\n    return new Promise(function (resolve, reject) {\r\n        var callback = function (err, val) { return (err ? reject(err) : resolve(val)); };\r\n        thunk(callback);\r\n    });\r\n}","code-length":76,"reference":"Convert a thunk to a promise.","result":"Convert thunks to promises.","score":[0.2304,0.4406]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (dir) {\r\n    var files = fs.readdirSync(dir);\r\n    var paths = _.map(files, function (file) { return path.join(dir, file); });\r\n    var stats = _.map(paths, function (path) { return fs.statSync(path); });\r\n    return _.filter(stats, function (stat) { return stat.isFile(); }).length;\r\n}","code-length":106,"reference":"Returns the number of files in the given directory.","result":"Filter files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function scopedCopyIndex(client, sourceIndex, targetIndex) {\r\n  const { taskID } = await client.copyIndex(\r\n    sourceIndex.indexName,\r\n    targetIndex.indexName,\r\n    ['settings', 'synonyms', 'rules']\r\n  );\r\n  return targetIndex.waitTask(taskID);\r\n}","code-length":89,"reference":"Copy the settings, synonyms, and rules of the source index to the target index\n","result":"Scoped copy index.","score":[0,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nasync function moveIndex(client, sourceIndex, targetIndex) {\r\n  const { taskID } = await client.moveIndex(\r\n    sourceIndex.indexName,\r\n    targetIndex.indexName\r\n  );\r\n  return targetIndex.waitTask(taskID);\r\n}","code-length":74,"reference":"moves the source index to the target index\n","result":"Move an index.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nasync function indexExists(index) {\r\n  try {\r\n    const { nbHits } = await index.search();\r\n    return nbHits > 0;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}","code-length":67,"reference":"Does an Algolia index exist already\n\n","result":"Check if an index exists .","score":[0.2296,0.4259]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadModule(moduleName) {\r\n  var module = modules[moduleName];\r\n  if (module !== undefined) {\r\n    return module;\r\n  }\r\n  switch (moduleName) {\r\n    case 'charset':\r\n      module = require('.\/lib\/charset');\r\n      break;\r\n    case 'encoding':\r\n      module = require('.\/lib\/encoding');\r\n      break;\r\n    case 'language':\r\n      module = require('.\/lib\/language');\r\n      break;\r\n    case 'mediaType':\r\n      module = require('.\/lib\/mediaType');\r\n      break;\r\n    default:\r\n      throw new Error('Cannot find module \\'' + moduleName + '\\'');\r\n  }\r\n  modules[moduleName] = module;\r\n  return module;\r\n}","code-length":204,"reference":"Load the given module.\n","result":"Load modules.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseAcceptLanguage(accept) {\r\n  var accepts = accept.split(',');\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var language = parseLanguage(accepts[i].trim(), i);\r\n    if (language) {\r\n      accepts[j++] = language;\r\n    }\r\n  }\r\n  accepts.length = j;\r\n  return accepts;\r\n}","code-length":115,"reference":"Parse the Accept-Language header.\n","result":"Parse the Accept.","score":[0.4137,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseLanguage(str, i) {\r\n  var match = simpleLanguageRegExp.exec(str);\r\n  if (!match) return null;\r\n  var prefix = match[1],\r\n    suffix = match[2],\r\n    full = prefix;\r\n  if (suffix) full += \"-\" + suffix;\r\n  var q = 1;\r\n  if (match[3]) {\r\n    var params = match[3].split(';')\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].split('=');\r\n      if (p[0] === 'q') q = parseFloat(p[1]);\r\n    }\r\n  }\r\n  return {\r\n    prefix: prefix,\r\n    suffix: suffix,\r\n    q: q,\r\n    i: i,\r\n    full: full\r\n  };\r\n}","code-length":222,"reference":"Parse a language from the Accept-Language header.\n","result":"Parse a language string.","score":[0.3108,0.4395]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getLanguagePriority(language, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(language, accepted[i], index);\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n  return priority;\r\n}","code-length":135,"reference":"Get the priority of a language.\n","result":"Determine the language priority.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction specify(language, spec, index) {\r\n  var p = parseLanguage(language)\r\n  if (!p) return null;\r\n  var s = 0;\r\n  if(spec.full.toLowerCase() === p.full.toLowerCase()){\r\n    s |= 4;\r\n  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {\r\n    s |= 2;\r\n  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {\r\n    s |= 1;\r\n  } else if (spec.full !== '*' ) {\r\n    return null\r\n  }\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n}","code-length":202,"reference":"Get the specificity of the language.\n","result":"Specify a language.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preferredLanguages(accept, provided) {\r\n  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');\r\n  if (!provided) {\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullLanguage);\r\n  }\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getLanguagePriority(type, accepts, index);\r\n  });\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}","code-length":162,"reference":"Get the preferred languages from an Accept-Language header.\n","result":"Provide the preferred languages function.","score":[0.2716,0.3824]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}","code-length":67,"reference":"Compare two specs.\n","result":"Compare specs.","score":[0.3606,0.3448]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseAcceptCharset(accept) {\r\n  var accepts = accept.split(',');\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var charset = parseCharset(accepts[i].trim(), i);\r\n    if (charset) {\r\n      accepts[j++] = charset;\r\n    }\r\n  }\r\n  accepts.length = j;\r\n  return accepts;\r\n}","code-length":115,"reference":"Parse the Accept-Charset header.\n","result":"Parse the accept header charset.","score":[0.3398,0.4573]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseCharset(str, i) {\r\n  var match = simpleCharsetRegExp.exec(str);\r\n  if (!match) return null;\r\n  var charset = match[1];\r\n  var q = 1;\r\n  if (match[2]) {\r\n    var params = match[2].split(';')\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].trim().split('=');\r\n      if (p[0] === 'q') {\r\n        q = parseFloat(p[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    charset: charset,\r\n    q: q,\r\n    i: i\r\n  };\r\n}","code-length":194,"reference":"Parse a charset from the Accept-Charset header.\n","result":"Parse charset .","score":[0.128,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getCharsetPriority(charset, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(charset, accepted[i], index);\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n  return priority;\r\n}","code-length":135,"reference":"Get the priority of a charset.\n","result":"Determine the charset priority.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction specify(charset, spec, index) {\r\n  var s = 0;\r\n  if(spec.charset.toLowerCase() === charset.toLowerCase()){\r\n    s |= 1;\r\n  } else if (spec.charset !== '*' ) {\r\n    return null\r\n  }\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n}","code-length":119,"reference":"Get the specificity of the charset.\n","result":"Is used to specify a spec.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preferredCharsets(accept, provided) {\r\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\r\n  if (!provided) {\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullCharset);\r\n  }\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getCharsetPriority(type, accepts, index);\r\n  });\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}","code-length":162,"reference":"Get the preferred charsets from an Accept-Charset header.\n","result":"Determine the preferred charset.","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseEncoding(str, i) {\r\n  var match = simpleEncodingRegExp.exec(str);\r\n  if (!match) return null;\r\n  var encoding = match[1];\r\n  var q = 1;\r\n  if (match[2]) {\r\n    var params = match[2].split(';');\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].trim().split('=');\r\n      if (p[0] === 'q') {\r\n        q = parseFloat(p[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    encoding: encoding,\r\n    q: q,\r\n    i: i\r\n  };\r\n}","code-length":194,"reference":"Parse an encoding from the Accept-Encoding header.\n","result":"Parse the encoding .","score":[0.1986,0.2239]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEncodingPriority(encoding, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(encoding, accepted[i], index);\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n  return priority;\r\n}","code-length":135,"reference":"Get the priority of an encoding.\n","result":"Determine encoding priority.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preferredEncodings(accept, provided) {\r\n  var accepts = parseAcceptEncoding(accept || '');\r\n  if (!provided) {\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullEncoding);\r\n  }\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getEncodingPriority(type, accepts, index);\r\n  });\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}","code-length":157,"reference":"Get the preferred encodings from an Accept-Encoding header.\n","result":"Determine the preferred encodings.","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseAccept(accept) {\r\n  var accepts = splitMediaTypes(accept);\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var mediaType = parseMediaType(accepts[i].trim(), i);\r\n    if (mediaType) {\r\n      accepts[j++] = mediaType;\r\n    }\r\n  }\r\n  accepts.length = j;\r\n  return accepts;\r\n}","code-length":114,"reference":"Parse the Accept header.\n","result":"Parse the accept header.","score":[0.5,0.9922]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseMediaType(str, i) {\r\n  var match = simpleMediaTypeRegExp.exec(str);\r\n  if (!match) return null;\r\n  var params = Object.create(null);\r\n  var q = 1;\r\n  var subtype = match[2];\r\n  var type = match[1];\r\n  if (match[3]) {\r\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\r\n    for (var j = 0; j < kvps.length; j++) {\r\n      var pair = kvps[j];\r\n      var key = pair[0].toLowerCase();\r\n      var val = pair[1];\r\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\r\n        ? val.substr(1, val.length - 2)\r\n        : val;\r\n      if (key === 'q') {\r\n        q = parseFloat(value);\r\n        break;\r\n      }\r\n      params[key] = value;\r\n    }\r\n  }\r\n  return {\r\n    type: type,\r\n    subtype: subtype,\r\n    params: params,\r\n    q: q,\r\n    i: i\r\n  };\r\n}","code-length":308,"reference":"Parse a media type from the Accept header.\n","result":"Return parseMediaType.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMediaTypePriority(type, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(type, accepted[i], index);\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n  return priority;\r\n}","code-length":136,"reference":"Get the priority of a media type.\n","result":"Determine the media type priority.","score":[0.1915,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction specify(type, spec, index) {\r\n  var p = parseMediaType(type);\r\n  var s = 0;\r\n  if (!p) {\r\n    return null;\r\n  }\r\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\r\n    s |= 4\r\n  } else if(spec.type != '*') {\r\n    return null;\r\n  }\r\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\r\n    s |= 2\r\n  } else if(spec.subtype != '*') {\r\n    return null;\r\n  }\r\n  var keys = Object.keys(spec.params);\r\n  if (keys.length > 0) {\r\n    if (keys.every(function (k) {\r\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\r\n    })) {\r\n      s |= 1\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s,\r\n  }\r\n}","code-length":313,"reference":"Get the specificity of the media type.\n","result":"Function parseMediaType.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preferredMediaTypes(accept, provided) {\r\n  if (!provided) {\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullType);\r\n  }\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getMediaTypePriority(type, accepts, index);\r\n  });\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}","code-length":144,"reference":"Get the preferred media types from an Accept header.\n","result":"Determine preferred media types.","score":[0.1294,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction quoteCount(string) {\r\n  var count = 0;\r\n  var index = 0;\r\n  while ((index = string.indexOf('\"', index)) !== -1) {\r\n    count++;\r\n    index++;\r\n  }\r\n  return count;\r\n}","code-length":76,"reference":"Count the number of quotes in a string.\n","result":"Quote strings.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitKeyValuePair(str) {\r\n  var index = str.indexOf('=');\r\n  var key;\r\n  var val;\r\n  if (index === -1) {\r\n    key = str;\r\n  } else {\r\n    key = str.substr(0, index);\r\n    val = str.substr(index + 1);\r\n  }\r\n  return [key, val];\r\n}","code-length":107,"reference":"Split a key value pair.\n","result":"Split a string into key.","score":[0.3398,0.375]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitMediaTypes(accept) {\r\n  var accepts = accept.split(',');\r\n  for (var i = 1, j = 0; i < accepts.length; i++) {\r\n    if (quoteCount(accepts[j]) % 2 == 0) {\r\n      accepts[++j] = accepts[i];\r\n    } else {\r\n      accepts[j] += ',' + accepts[i];\r\n    }\r\n  }\r\n  accepts.length = j + 1;\r\n  return accepts;\r\n}","code-length":131,"reference":"Split an Accept header into media types.\n","result":"Split media types .","score":[0.1795,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitParameters(str) {\r\n  var parameters = str.split(';');\r\n  for (var i = 1, j = 0; i < parameters.length; i++) {\r\n    if (quoteCount(parameters[j]) % 2 == 0) {\r\n      parameters[++j] = parameters[i];\r\n    } else {\r\n      parameters[j] += ';' + parameters[i];\r\n    }\r\n  }\r\n  parameters.length = j + 1;\r\n  for (var i = 0; i < parameters.length; i++) {\r\n    parameters[i] = parameters[i].trim();\r\n  }\r\n  return parameters;\r\n}","code-length":167,"reference":"Split a string of parameters.\n","result":"Split parameters.","score":[0.1327,0.2128]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadWebpackConfig () {\r\n  var webpackConfig = require('.\/webpack.config.js');\r\n  webpackConfig.devtool = 'inline-source-map';\r\n  webpackConfig.module.preLoaders = [\r\n    {\r\n      test: \/\\.jsx?$\/,\r\n      include: path.resolve('lib'),\r\n      loader: 'isparta'\r\n    }\r\n  ];\r\n  return webpackConfig;\r\n}","code-length":117,"reference":"Loads configuration while ensuring sounce-map is enabled","result":"Load the Webpack config.","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assign (obj, keyPath, value) {\r\n  const lastKeyIndex = keyPath.length - 1\r\n  for (let i = 0; i < lastKeyIndex; ++i) {\r\n    const key = keyPath[i]\r\n    if (!(key in obj)) obj[key] = {}\r\n    obj = obj[key]\r\n  }\r\n  obj[keyPath[lastKeyIndex]] = value\r\n}","code-length":106,"reference":"assigns values to an object, creating keys in\n`keyPath` if they don't exist yet.\n","result":"Assign values to objects.","score":[0.0371,0.2265]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFilterString(selectedValues) {\r\n\tif (selectedValues && Object.keys(selectedValues).length) {\r\n\t\treturn Object\r\n\t\t\t\r\n\t\t\t.entries(selectedValues)\r\n\t\t\t\r\n\t\t\t.filter(([, componentValues]) =>\r\n\t\t\t\tfilterComponents.includes(componentValues.componentType)\r\n\t\t\t\t\t\r\n\t\t\t\t\t&& (\r\n\t\t\t\t\t\t(componentValues.value && componentValues.value.length)\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t|| componentValues.value.start || componentValues.value.end\r\n\t\t\t\t\t))\r\n\t\t\t\r\n\t\t\t.map(([componentId, componentValues]) => parseFilterValue(componentId, componentValues))\r\n\t\t\t\r\n\t\t\t.join();\r\n\t}\r\n\treturn null;\r\n}","code-length":190,"reference":"transforms the selectedValues from store into the X-Search-Filters string for analytics","result":"Generate a filter string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction evaluatePage(page, fn) {\r\n\tvar args =  Array.prototype.slice.call(arguments, 2);\r\n\treturn this.ready.then(function() {\r\n\t\tvar stack;\r\n\t\tpage = page || this.page;\r\n\t\tvar res = HorsemanPromise.fromCallback(function(done) {\r\n\t\t\t\t\r\n\t\t\t\tstack = HorsemanPromise.reject(new Error('See next line'));\r\n\t\t\t\treturn page.evaluate(function evaluatePage(fnstr, args) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tvar fn;\r\n\t\t\t\t\t\teval('fn = ' + fnstr);\r\n\t\t\t\t\t\tvar res = fn.apply(this, args);\r\n\t\t\t\t\t\treturn { res: res };\r\n\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\treturn { err: err, iserr: err instanceof Error };\r\n\t\t\t\t\t}\r\n\t\t\t\t}, fn.toString(), args, done);\r\n\t\t\t})\r\n\t\t\t.then(function handleErrback(args) {\r\n\t\t\t\treturn stack.catch(function(err) {\r\n\t\t\t\t\tif (args.err) {\r\n\t\t\t\t\t\tif (args.iserr) {\r\n\t\t\t\t\t\t\tvar stack = err.stack.split('\\n').slice(1);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\targs.err.stack += '\\n' + stack.join('\\n');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn HorsemanPromise.reject(args.err);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn args.res;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\tstack.catch(function() {});\r\n\t\treturn res;\r\n\t});\r\n}","code-length":405,"reference":"Evaluates a function on the given page.\n","result":"Evaluate the given function .","score":[0.2521,0.4642]}
{"code":"\/*is used to<extra_id_0>\r\nfunction waitForPage(page, optsOrFn) {\r\n\tvar self = this;\r\n\tvar args, value, fname, timeout = self.options.timeout, fn;\r\n\tif(typeof optsOrFn === \"function\"){\r\n\t\t\tfn = optsOrFn;\r\n\t\t\targs = Array.prototype.slice.call(arguments);\r\n\t\t\tvalue = args.pop();\r\n\t\t\tfname = fn.name || '<anonymous>';\r\n\t} else if(typeof optsOrFn === \"object\"){\r\n\t\t\tfn = optsOrFn.fn;\r\n\t\t\targs = [page, fn].concat(optsOrFn.args || []);\r\n\t\t\tvalue = optsOrFn.value;\r\n\t\t\tfname = fn.name || '<anonymous>';\r\n\t\t\tif(optsOrFn.timeout){\r\n\t\t\t\ttimeout = optsOrFn.timeout;\r\n\t\t\t}\r\n\t}\r\n\tdebug.apply(debug, ['.waitFor()', fname].concat(args.slice(2)));\r\n\treturn this.ready.then(function() {\r\n\t\treturn new HorsemanPromise(function(resolve, reject) {\r\n\t\t\tvar start = Date.now();\r\n\t\t\tvar checkInterval = setInterval(function waitForCheck() {\r\n\t\t\t\tvar _page = page || self.page;\r\n\t\t\t\tvar diff = Date.now() - start;\r\n\t\t\t\tif (diff > timeout) {\r\n\t\t\t\t\tclearInterval(checkInterval);\r\n\t\t\t\t\tdebug('.waitFor() timed out');\r\n\t\t\t\t\tif (typeof _page.onTimeout === 'function') {\r\n\t\t\t\t\t\t_page.onTimeout('waitFor');\r\n\t\t\t\t\t}\r\n\t\t\t\t\treject(new TimeoutError(\r\n\t\t\t\t\t\t\t'timeout during .waitFor() after ' + diff + ' ms'));\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn evaluatePage.apply(self, args)\r\n\t\t\t\t\t\t.tap(function(res) {\r\n\t\t\t\t\t\t\tdebugv('.waitFor() iteration',\r\n\t\t\t\t\t\t\t\t\tfname,\r\n\t\t\t\t\t\t\t\t\tres,\r\n\t\t\t\t\t\t\t\t\tdiff,\r\n\t\t\t\t\t\t\t\t\tself.id\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.then(function(res) {\r\n\t\t\t\t\t\t\tif (res === value) {\r\n\t\t\t\t\t\t\t\tdebug('.waitFor() completed successfully');\r\n\t\t\t\t\t\t\t\tclearInterval(checkInterval);\r\n\t\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(function(err) {\r\n\t\t\t\t\t\t\tclearInterval(checkInterval);\r\n\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}, self.options.interval);\r\n\t\t});\r\n\t});\r\n}","code-length":650,"reference":"Waits for a function to evaluate to a given value on the given page\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Horseman(options) {\r\n\tthis.ready = false;\r\n\tif (!(this instanceof Horseman)) { return new Horseman(options); }\r\n\tthis.options = defaults(clone(options) || {}, DEFAULTS);\r\n\tthis.id = ++instanceId;\r\n\tdebug('.setup() creating phantom instance %s', this.id);\r\n\tvar phantomOptions = {\r\n\t\t'load-images': this.options.loadImages,\r\n\t\t'ssl-protocol': this.options.sslProtocol\r\n\t};\r\n\tif (typeof this.options.ignoreSSLErrors !== 'undefined') {\r\n\t\tphantomOptions['ignore-ssl-errors'] = this.options.ignoreSSLErrors;\r\n\t}\r\n\tif (typeof this.options.webSecurity !== 'undefined') {\r\n\t\tphantomOptions['web-security'] = this.options.webSecurity;\r\n\t}\r\n\tif (typeof this.options.proxy !== 'undefined') {\r\n\t\tphantomOptions.proxy = this.options.proxy;\r\n\t}\r\n\tif (typeof this.options.proxyType !== 'undefined') {\r\n\t\tphantomOptions['proxy-type'] = this.options.proxyType;\r\n\t}\r\n\tif (typeof this.options.proxyAuth !== 'undefined') {\r\n\t\tphantomOptions['proxy-auth'] = this.options.proxyAuth;\r\n\t}\r\n\tif (typeof this.options.diskCache !== 'undefined') {\r\n\t\tphantomOptions['disk-cache'] = this.options.diskCache;\r\n\t}\r\n\tif (typeof this.options.diskCachePath !== 'undefined') {\r\n\t\tphantomOptions['disk-cache-path'] = this.options.diskCachePath;\r\n\t}\r\n\tif (typeof this.options.cookiesFile !== 'undefined') {\r\n\t\tphantomOptions['cookies-file'] = this.options.cookiesFile;\r\n\t}\r\n\tif (this.options.debugPort) {\r\n\t\tphantomOptions['remote-debugger-port'] = this.options.debugPort;\r\n\t\tphantomOptions['remote-debugger-autorun'] = 'no';\r\n\t\tif (this.options.debugAutorun !== false) {\r\n\t\t\tphantomOptions['remote-debugger-autorun'] = 'yes';\r\n\t\t}\r\n\t}\r\n\tObject.keys(this.options.phantomOptions || {}).forEach(function (key) {\r\n\t\tif (typeof phantomOptions[key] !== 'undefined') {\r\n\t\t\tdebug('Horseman option ' + key + ' overridden by phantomOptions');\r\n\t\t}\r\n\t\tphantomOptions[key] = this.options.phantomOptions[key];\r\n\t}.bind(this));\r\n\tvar instantiationOptions = {\r\n\t\tparameters: phantomOptions\r\n\t};\r\n\tif (typeof this.options.phantomPath !== 'undefined') {\r\n\t\tinstantiationOptions['path'] = this.options.phantomPath;\r\n\t}\r\n\t\r\n\tthis.targetUrl = null;\r\n\t\r\n\tthis.responses = {};\r\n\tthis.tabs = [];\r\n\tthis.onTabCreated = noop;\r\n\tthis.onTabClosed = noop;\r\n\tthis.ready = prepare(this, instantiationOptions);\r\n}","code-length":804,"reference":"Creates a new Horseman.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getColors (image, cb) {\r\n\tvar data = [];\r\n\tvar img = createImage(image);\r\n\tvar promise = new Promise(function (resolve) {\r\n\t\timg.onload = function () {\r\n\t\t\tvar canvas = document.createElement('canvas');\r\n\t\t\tcanvas.width = img.width;\r\n\t\t\tcanvas.height = img.height;\r\n\t\t\tcanvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);\r\n\t\t\tvar ctx = canvas.getContext('2d');\r\n\t\t\tvar imageData = ctx.getImageData(0, 0, img.width, 1).data;\r\n\t\t\tfor (var i = 0; i < img.width; i++) {\r\n\t\t\t\tdata.push([imageData[i*4]\/255, imageData[i*4+1]\/255, imageData[i*4+2]\/255]);\r\n\t\t\t}\r\n\t\t\tresolve(data);\r\n\t\t};\r\n\t});\r\n\treturn promise;\r\n}","code-length":255,"reference":"Helpers here get image colors","result":"Get the colors of an image.","score":[0.193,0.1961]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createCubehelix (steps, opts) {\r\n\tvar data = [];\r\n\tfor (var i = 0; i < steps; i++ ){\r\n\t\tdata.push(cubehelix.rgb(i\/steps, opts).map((v) => v\/255));\r\n\t}\r\n\treturn data;\r\n}","code-length":89,"reference":"create colormap by rotating cubehelix","result":"Create a cubehelix.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toImageData (colors) {\r\n\treturn colors.map((color) => color.map((v) => v*255).concat(255))\r\n\t.reduce((prev, curr) => prev.concat(curr));\r\n}","code-length":63,"reference":"return imagedata from colormap","result":"Convert colors to image data.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compress (colors, factor) {\r\n\tvar data = [];\r\n\tvar len = (colors.length) \/ factor;\r\n\tvar step = (colors.length-1) \/ len;\r\n\tfor (var i = 0; i < colors.length; i+= step) {\r\n\t\tdata.push(colors[i|0]);\r\n\t}\r\n\treturn data;\r\n}","code-length":104,"reference":"return interpolated imagedata with only each ","result":"Compress colors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toColormap (data) {\r\n\tvar stops = [];\r\n\tfor (var i = 0; i < data.length; i++) {\r\n\t\tstops.push({\r\n\t\t\tindex: Math.round(i * 100 \/ (data.length - 1)) \/ 100,\r\n\t\t\trgb: data[i].map((v) => Math.round(v*255))\r\n\t\t});\r\n\t}\r\n\treturn stops;\r\n}","code-length":118,"reference":"convert imagedata to colormap JSON","result":"Convert data to colormap.","score":[0.2488,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startDownload(src, storageFile) {\r\n    var uri = Windows.Foundation.Uri(src);\r\n    var downloader = new Windows.Networking.BackgroundTransfer.BackgroundDownloader();\r\n    var download = downloader.createDownload(uri, storageFile);\r\n    return download.startAsync();\r\n}","code-length":79,"reference":"this can throw exceptions, callers responsibility","result":"Start downloading.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n    this._handlers = {\r\n        'progress': [],\r\n        'cancel': [],\r\n        'error': [],\r\n        'complete': []\r\n    };\r\n    if (typeof options === 'undefined') {\r\n        throw new Error('The options argument is required.');\r\n    }\r\n    if (typeof options.src === 'undefined' && options.type !== \"local\") {\r\n        throw new Error('The options.src argument is required for merge replace types.');\r\n    }\r\n    if (typeof options.id === 'undefined') {\r\n        throw new Error('The options.id argument is required.');\r\n    }\r\n    if (typeof options.type === 'undefined') {\r\n        options.type = 'replace';\r\n    }\r\n    if (typeof options.headers === 'undefined') {\r\n        options.headers = null;\r\n    }\r\n    if (typeof options.copyCordovaAssets === 'undefined') {\r\n        options.copyCordovaAssets = false;\r\n    }\r\n    if (typeof options.copyRootApp === 'undefined') {\r\n        options.copyRootApp = false;\r\n    }\r\n    if (typeof options.timeout === 'undefined') {\r\n        options.timeout = 15.0;\r\n    }\r\n    if (typeof options.trustHost === 'undefined') {\r\n        options.trustHost = false;\r\n    }\r\n    if (typeof options.manifest === 'undefined') {\r\n        options.manifest = \"\";\r\n    }\r\n    if (typeof options.validateSrc === 'undefined') {\r\n        options.validateSrc = true;\r\n    }\r\n    this.options = options;\r\n    var that = this;\r\n    var success = function(result) {\r\n        if (result && typeof result.progress !== 'undefined') {\r\n            that.emit('progress', result);\r\n        } else if (result && typeof result.localPath !== 'undefined') {\r\n            that.emit('complete', result);\r\n        }\r\n    };\r\n    var fail = function(msg) {\r\n        var e = (typeof msg === 'string') ? new Error(msg) : msg;\r\n        that.emit('error', e);\r\n    };\r\n    setTimeout(function() {\r\n        exec(success, fail, 'Sync', 'sync', [options.src, options.id, options.type, options.headers, options.copyCordovaAssets, options.copyRootApp, options.timeout, options.trustHost, options.manifest, options.validateSrc]);\r\n    }, 10);\r\n}","code-length":624,"reference":"ContentSync constructor.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createAppChannel (app, key) {\r\n  assert(~['consumerChannel', 'publisherChannel'].indexOf(key),\r\n    'Channel key must be \"consumerChannel\" or \"publisherChannel\"')\r\n  assert(app.connection, 'Cannot create a channel without a connection')\r\n  assert(!app[key], 'Channel \"' + key + '\" already exists')\r\n  return co(function * () {\r\n    const channel =\r\n      app[key] =\r\n        yield app.connection.createChannel()\r\n    channel.__coworkersCloseHandler = module.exports.closeHandler.bind(null, app, key)\r\n    channel.__coworkersErrorHandler = module.exports.errorHandler.bind(null, app, key)\r\n    channel.once('close', channel.__coworkersCloseHandler)\r\n    channel.once('error', channel.__coworkersErrorHandler)\r\n    app.emit('channel:create', channel)\r\n    if (key === 'consumerChannel') {\r\n      if (app.prefetchOpts) {\r\n        channel.prefetch(app.prefetchOpts.count, app.prefetchOpts.global)\r\n      }\r\n      wrap(channel, ['ack', 'nack'], function (fn, args) {\r\n        const message = args[0]\r\n        assert(!message.messageAcked, 'Messages cannot be acked\/nacked more than once (will close channel)')\r\n        const ret = fn.apply(this, args)\r\n        message.messageAcked = true\r\n        return ret\r\n      })\r\n    }\r\n    return channel\r\n  })\r\n}","code-length":394,"reference":"Create consumer or publisher RabbitMQ channel\n","result":"Return app[key].","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction errorHandler (app, key, err) {\r\n  delete app[key]\r\n  const msg = `\"app.${key}\" unexpectedly errored: ${err.message}`\r\n  debug(msg, err)\r\n  err.message = msg\r\n  throw err\r\n}","code-length":74,"reference":"channel error handler","result":"Catch errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createAppConnection (app, url, socketOptions) {\r\n  assert(!app.connection, 'Cannot create connection if it already exists')\r\n  return co(function * () {\r\n    const conn =\r\n      app.connection =\r\n        yield amqplib.connect(url, socketOptions)\r\n    conn.__coworkersCloseHandler = module.exports.closeHandler.bind(null, app)\r\n    conn.__coworkersErrorHandler = module.exports.errorHandler.bind(null, app)\r\n    conn.once('close', conn.__coworkersCloseHandler)\r\n    conn.once('error', conn.__coworkersErrorHandler)\r\n    app.emit('connection:create', conn)\r\n    return conn\r\n  })\r\n}","code-length":189,"reference":"Create a RabbitMQ connection\n","result":"Create a connection to an application.","score":[0.3021,0.6085]}
{"code":"\/*is used to<extra_id_0>\r\nfunction errorHandler (app, err) {\r\n  delete app.connection\r\n  const msg = `\"app.connection\" unexpectedly errored: ${err.message}`\r\n  debug(msg, err)\r\n  err.message = msg\r\n  throw err\r\n}","code-length":70,"reference":"connection error handler","result":"Handle errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Application (options) {\r\n  if (!(this instanceof Application)) return new Application(options)\r\n  EventEmitter.call(this)\r\n  const env = getEnv()\r\n  const COWORKERS_CLUSTER = env.COWORKERS_CLUSTER\r\n  const COWORKERS_QUEUE = env.COWORKERS_QUEUE\r\n  const COWORKERS_QUEUE_WORKER_NUM = env.COWORKERS_QUEUE_WORKER_NUM || 1\r\n  options = options || {}\r\n  if (options.constructor.name === 'Schema') {\r\n    options = { schema: options }\r\n  }\r\n  defaults(options, {\r\n    cluster: COWORKERS_CLUSTER,\r\n    queueName: COWORKERS_QUEUE,\r\n    queueWorkerNum: COWORKERS_QUEUE_WORKER_NUM\r\n  })\r\n  defaults(options, {\r\n    cluster: true\r\n  })\r\n  this.schema = options.schema\r\n  this.queueName = options.queueName\r\n  this.queueWorkerNum = options.queueWorkerNum\r\n  if (options.cluster && cluster.isMaster) {\r\n    this.clusterManager = new ClusterManager(this)\r\n    if (exists(options.queueName)) {\r\n      console.warn('warn: \"queueName\" is not required when clustering is enabled')\r\n    }\r\n  } else {\r\n    assert(exists(options.queueName), '\"queueName\" is required for consumer processes')\r\n  }\r\n  this.context = {}\r\n  this.middlewares = []\r\n  this.queueMiddlewares = {\r\n  }\r\n  Object.defineProperty(this, 'queueNames', {\r\n    get () {\r\n      return Object.keys(this.queueMiddlewares)\r\n    }\r\n  })\r\n  }","code-length":436,"reference":"Initialize a new `Application` inherits from EventEmitter\n","result":"Create a new instance of the application.","score":[0.2284,0.2679]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assertAndConsumeAppQueue (app, queueName) {\r\n  return co(function * () {\r\n    const queue = app.queueMiddlewares[queueName]\r\n    const queueOpts = queue.queueOpts\r\n    const consumeOpts = queue.consumeOpts\r\n    const handler = app.messageHandler(queueName)\r\n    yield app.consumerChannel.assertQueue(queueName, queueOpts)\r\n    return yield app.consumerChannel.consume(queueName, handler, consumeOpts)\r\n  })\r\n}","code-length":128,"reference":"Start consuming message from app's queues\n","result":"Assert and consume app queues.","score":[0,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseShardFun (str )  {\r\n  str = str.trim()\r\n  if (str.length === 0) {\r\n    throw new Error('empty shard string')\r\n  }\r\n  if (!str.startsWith(PREFIX)) {\r\n    throw new Error(`invalid or no path prefix: ${str}`)\r\n  }\r\n  const parts = str.slice(PREFIX.length).split('\/')\r\n  const version = parts[0]\r\n  if (version !== 'v1') {\r\n    throw new Error(`expect 'v1' version, got '${version}'`)\r\n  }\r\n  const name = parts[1]\r\n  if (!parts[2]) {\r\n    throw new Error('missing param')\r\n  }\r\n  const param = parseInt(parts[2], 10)\r\n  switch (name) {\r\n    case 'prefix':\r\n      return new Prefix(param)\r\n    case 'suffix':\r\n      return new Suffix(param)\r\n    case 'next-to-last':\r\n      return new NextToLast(param)\r\n    default:\r\n      throw new Error(`unkown sharding function: ${name}`)\r\n  }\r\n}","code-length":293,"reference":"Convert a given string to the matching sharding function.\n\n","result":"Parse shardFuns.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isEqualNode (a, b) {\r\n  return (\r\n    (isIgnored(a) && isIgnored(b)) ||\r\n    (getCheckSum(a) === getCheckSum(b)) ||\r\n    a.isEqualNode(b)\r\n  )\r\n}","code-length":75,"reference":"Checks if nodes are equal using the following by checking if\nthey are both ignored, have the same checksum, or have the\nsame contents.\n\n","result":"Compare nodes .","score":[0.0004,0.0228]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dispatch (node, type) {\r\n  if (getKey(node)) {\r\n    var ev = document.createEvent('Event')\r\n    var prop = { value: node }\r\n    ev.initEvent(type, false, false)\r\n    Object.defineProperty(ev, 'target', prop)\r\n    Object.defineProperty(ev, 'srcElement', prop)\r\n    node.dispatchEvent(ev)\r\n  }\r\n  var child = node.firstChild\r\n  while (child) child = dispatch(child, type).nextSibling\r\n  return node\r\n}","code-length":146,"reference":"Recursively trigger an event for a node and it's children.\nOnly emits events for keyed nodes.\n\n","result":"Dispatch DOM events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction join (socket, multiaddr, pub, cb) {\r\n    const log = socket.log = config.log.bind(config.log, '[' + socket.id + ']')\r\n    if (getConfig().strictMultiaddr && !util.validateMa(multiaddr)) {\r\n      joinsTotal.inc()\r\n      joinsFailureTotal.inc()\r\n      return cb('Invalid multiaddr')\r\n    }\r\n    if (getConfig().cryptoChallenge) {\r\n      if (!pub.length) {\r\n        joinsTotal.inc()\r\n        joinsFailureTotal.inc()\r\n        return cb('Crypto Challenge required but no Id provided')\r\n      }\r\n      if (!nonces[socket.id]) {\r\n        nonces[socket.id] = {}\r\n      }\r\n      if (nonces[socket.id][multiaddr]) {\r\n        log('response cryptoChallenge', multiaddr)\r\n        nonces[socket.id][multiaddr].key.verify(\r\n          Buffer.from(nonces[socket.id][multiaddr].nonce),\r\n          Buffer.from(pub, 'hex'),\r\n          (err, ok) => {\r\n            if (err || !ok) {\r\n              joinsTotal.inc()\r\n              joinsFailureTotal.inc()\r\n            }\r\n            if (err) { return cb('Crypto error') }\r\n            if (!ok) { return cb('Signature Invalid') }\r\n            joinFinalize(socket, multiaddr, cb)\r\n          })\r\n      } else {\r\n        joinsTotal.inc()\r\n        const addr = multiaddr.split('ipfs\/').pop()\r\n        log('do cryptoChallenge', multiaddr, addr)\r\n        util.getIdAndValidate(pub, addr, (err, key) => {\r\n          if (err) { joinsFailureTotal.inc(); return cb(err) }\r\n          const nonce = uuid() + uuid()\r\n          socket.once('disconnect', () => {\r\n            delete nonces[socket.id]\r\n          })\r\n          nonces[socket.id][multiaddr] = { nonce: nonce, key: key }\r\n          cb(null, nonce)\r\n        })\r\n      }\r\n    } else {\r\n      joinsTotal.inc()\r\n      joinFinalize(socket, multiaddr, cb)\r\n    }\r\n  }","code-length":559,"reference":"join this signaling server network","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dataType (value) {\r\n  if (!value) return null\r\n  if (value['anyOf'] || value['allOf'] || value['oneOf']) {\r\n    return ''\r\n  }\r\n  if (!value.type) {\r\n    return 'object'\r\n  }\r\n  if (value.type === 'array') {\r\n    return dataType(value.items || {}) + '[]'\r\n  }\r\n  return value.type\r\n}","code-length":118,"reference":"Returns a descriptive string for a datatype\n","result":"Generate the data type string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pd(event) {\r\n    const retv = privateData.get(event);\r\n    console.assert(\r\n        retv != null,\r\n        \"'this' is expected an Event object, but got\",\r\n        event\r\n    );\r\n    return retv\r\n}","code-length":76,"reference":"Get private data.\n","result":"Create private data.","score":[0.5774,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineRedirectDescriptor(key) {\r\n    return {\r\n        get() {\r\n            return pd(this).event[key]\r\n        },\r\n        set(value) {\r\n            pd(this).event[key] = value;\r\n        },\r\n        configurable: true,\r\n        enumerable: true,\r\n    }\r\n}","code-length":91,"reference":"Get the property descriptor to redirect a given property.\n","result":"Define redirect descriptors.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineCallDescriptor(key) {\r\n    return {\r\n        value() {\r\n            const event = pd(this).event;\r\n            return event[key].apply(event, arguments)\r\n        },\r\n        configurable: true,\r\n        enumerable: true,\r\n    }\r\n}","code-length":79,"reference":"Get the property descriptor to call a given method property.\n","result":"Define call descriptors.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineWrapper(BaseEvent, proto) {\r\n    const keys = Object.keys(proto);\r\n    if (keys.length === 0) {\r\n        return BaseEvent\r\n    }\r\n        function CustomEvent(eventTarget, event) {\r\n        BaseEvent.call(this, eventTarget, event);\r\n    }\r\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\r\n        constructor: { value: CustomEvent, configurable: true, writable: true },\r\n    });\r\n    for (let i = 0; i < keys.length; ++i) {\r\n        const key = keys[i];\r\n        if (!(key in BaseEvent.prototype)) {\r\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key);\r\n            const isFunc = typeof descriptor.value === \"function\";\r\n            Object.defineProperty(\r\n                CustomEvent.prototype,\r\n                key,\r\n                isFunc\r\n                    ? defineCallDescriptor(key)\r\n                    : defineRedirectDescriptor(key)\r\n            );\r\n        }\r\n    }\r\n    return CustomEvent\r\n}","code-length":268,"reference":"Define new wrapper class.\n","result":"Wrap events in a wrapper function.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getWrapper(proto) {\r\n    if (proto == null || proto === Object.prototype) {\r\n        return Event\r\n    }\r\n    let wrapper = wrappers.get(proto);\r\n    if (wrapper == null) {\r\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto);\r\n        wrappers.set(proto, wrapper);\r\n    }\r\n    return wrapper\r\n}","code-length":108,"reference":"Get the wrapper class of a given prototype.\n","result":"Get the wrapper for a prototype object.","score":[0.3099,0.4747]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapEvent(eventTarget, event) {\r\n    const Wrapper = getWrapper(Object.getPrototypeOf(event));\r\n    return new Wrapper(eventTarget, event)\r\n}","code-length":51,"reference":"Wrap a given event to management a dispatching.\n","result":"Wrap events.","score":[0.0249,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getListeners(eventTarget) {\r\n    const listeners = listenersMap.get(eventTarget);\r\n    if (listeners == null) {\r\n        throw new TypeError(\r\n            \"'this' is expected an EventTarget object, but got another value.\"\r\n        )\r\n    }\r\n    return listeners\r\n}","code-length":82,"reference":"Get listeners.\n","result":"Get the listeners for an EventTarget.","score":[0.193,0.2083]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineEventAttributeDescriptor(eventName) {\r\n    return {\r\n        get() {\r\n            const listeners = getListeners(this);\r\n            let node = listeners.get(eventName);\r\n            while (node != null) {\r\n                if (node.listenerType === ATTRIBUTE) {\r\n                    return node.listener\r\n                }\r\n                node = node.next;\r\n            }\r\n            return null\r\n        },\r\n        set(listener) {\r\n            if (typeof listener !== \"function\" && !isObject(listener)) {\r\n                listener = null;\r\n            }\r\n            const listeners = getListeners(this);\r\n            let prev = null;\r\n            let node = listeners.get(eventName);\r\n            while (node != null) {\r\n                if (node.listenerType === ATTRIBUTE) {\r\n                    if (prev !== null) {\r\n                        prev.next = node.next;\r\n                    } else if (node.next !== null) {\r\n                        listeners.set(eventName, node.next);\r\n                    } else {\r\n                        listeners.delete(eventName);\r\n                    }\r\n                } else {\r\n                    prev = node;\r\n                }\r\n                node = node.next;\r\n            }\r\n            if (listener !== null) {\r\n                const newNode = {\r\n                    listener,\r\n                    listenerType: ATTRIBUTE,\r\n                    passive: false,\r\n                    once: false,\r\n                    next: null,\r\n                };\r\n                if (prev === null) {\r\n                    listeners.set(eventName, newNode);\r\n                } else {\r\n                    prev.next = newNode;\r\n                }\r\n            }\r\n        },\r\n        configurable: true,\r\n        enumerable: true,\r\n    }\r\n}","code-length":428,"reference":"Get the property descriptor for the event attribute of a given event.\n","result":"Define event attribute descriptors.","score":[0.0611,0.1674]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineCustomEventTarget(eventNames) {\r\n        function CustomEventTarget() {\r\n        EventTarget.call(this);\r\n    }\r\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\r\n        constructor: {\r\n            value: CustomEventTarget,\r\n            configurable: true,\r\n            writable: true,\r\n        },\r\n    });\r\n    for (let i = 0; i < eventNames.length; ++i) {\r\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i]);\r\n    }\r\n    return CustomEventTarget\r\n}","code-length":151,"reference":"Define a custom EventTarget with event attributes.\n","result":"Define custom event target .","score":[0.212,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fileName, retrying) {\r\n        let file = assets[fileName] || {};\r\n        let key = path.posix.join(uploadPath, fileName);\r\n        let putPolicy = new qiniu.rs.PutPolicy({ scope: bucket + ':' + key });\r\n        let uploadToken = putPolicy.uploadToken(mac);\r\n        let formUploader = new qiniu.form_up.FormUploader(qiniuConfig);\r\n        let putExtra = new qiniu.form_up.PutExtra();\r\n        return new Promise((resolve) => {\r\n          let begin = Date.now();\r\n          formUploader.putFile(\r\n            uploadToken,\r\n            key,\r\n            file.existsAt,\r\n            putExtra,\r\n            function(err, body) {\r\n              if (err) {\r\n                console.log(`Upload file ${fileName} failed: ${err.message || err.name || err.stack}`);\r\n                if (!~retryFiles.indexOf(fileName)) retryFiles.push(fileName);\r\n              } else {\r\n                uploadedFiles++;\r\n              }\r\n              spinner.text = tip(uploadedFiles, retryFiles.length, totalFiles, retrying);\r\n              body.duration = Date.now() - begin;\r\n              resolve(body);\r\n            });\r\n        });\r\n      }","code-length":323,"reference":"Perform upload to qiniu","result":"Upload assets.","score":[0,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(err) {\r\n        if (err) {\r\n          console.log('\\n');\r\n          return Promise.reject(err);\r\n        }\r\n        if (retryFilesCountDown < 0) retryFilesCountDown = 0;\r\n        let _files = retryFiles.splice(\r\n          0,\r\n          batch <= retryFilesCountDown ? batch : retryFilesCountDown\r\n        );\r\n        retryFilesCountDown = retryFilesCountDown - _files.length;\r\n        if (_files.length) {\r\n          return Promise.all(\r\n            _files.map(file => performUpload(file, true))\r\n          ).then(() => retryFailedFiles(), retryFailedFiles);\r\n        } else {\r\n          if (retryFiles.length) {\r\n            return Promise.reject(new Error('File uploaded failed'));\r\n          } else {\r\n            return Promise.resolve();\r\n          }\r\n        }\r\n      }","code-length":232,"reference":"Retry all failed files one by one","result":"Prevent the browser from throwing an error.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (ev) {\r\n    var nextPointers\r\n    if (!ev.defaultPrevented) {\r\n      if (_preventDefault) {\r\n        ev.preventDefault()\r\n      }\r\n      if (!_mouseDown) {\r\n        _mouseDown = true\r\n        nextPointers = utils.clone(_currPointers)\r\n        nextPointers['mouse'] = [ev.pageX, ev.pageY]\r\n        if (!_started) {\r\n          _started = true\r\n          _handlers.start(nextPointers)\r\n        }\r\n        _currPointers = nextPointers\r\n      }\r\n    }\r\n  }","code-length":157,"reference":"Mouse support No hover support.","result":"Prevent default.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction teamcity(runner) {\r\n\tBase.call(this, runner);\r\n\tvar stats = this.stats;\r\n\tvar flowId = document.title || new Date().getTime();\r\n\trunner.on('suite', function (suite) {\r\n\t\tif (suite.root) return;\r\n\t\tsuite.startDate = new Date();\r\n\t\tlog('##teamcity[testSuiteStarted name=\\'' + escape(suite.title) + '\\' flowId=\\'' + flowId + '\\']');\r\n\t});\r\n\trunner.on('test', function (test) {\r\n\t\tlog('##teamcity[testStarted name=\\'' + escape(test.title) + '\\' flowId=\\'' + flowId + '\\'  captureStandardOutput=\\'true\\']');\r\n\t});\r\n\trunner.on('fail', function (test, err) {\r\n\t\tlog('##teamcity[testFailed name=\\'' + escape(test.title) + '\\' flowId=\\'' + flowId + '\\' message=\\'' + escape(err.message) + '\\' captureStandardOutput=\\'true\\' details=\\'' + escape(err.stack) + '\\']');\r\n\t});\r\n\trunner.on('pending', function (test) {\r\n\t\tlog('##teamcity[testIgnored name=\\'' + escape(test.title) + '\\' flowId=\\'' + flowId + '\\' message=\\'pending\\']');\r\n\t});\r\n\trunner.on('test end', function (test) {\r\n\t\tlog('##teamcity[testFinished name=\\'' + escape(test.title) + '\\' flowId=\\'' + flowId + '\\' duration=\\'' + test.duration + '\\']');\r\n\t});\r\n\trunner.on('suite end', function (suite) {\r\n\t\tif (suite.root) return;\r\n\t\tlog('##teamcity[testSuiteFinished name=\\'' + escape(suite.title) + '\\' duration=\\'' + (new Date() - suite.startDate) + '\\' flowId=\\'' + flowId + '\\']');\r\n\t});\r\n\trunner.on('end', function () {\r\n\t\tlog('##teamcity[testSuiteFinished name=\\'mocha.suite\\' duration=\\'' + stats.duration + '\\' flowId=\\'' + flowId + '\\']');\r\n\t});\r\n}","code-length":537,"reference":"Initialize a new `Teamcity` reporter for the browser.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convert(integer) {\r\n  var str = Number(integer).toString(16);\r\n  return str.length === 1 ? '0' + str : str;\r\n}","code-length":50,"reference":"Module dependencies.\n","result":"Convert numbers to hex strings.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parse(text, options) {\r\n  options = Object.assign({}, { relaxed: true }, options);\r\n  if (typeof options.relaxed === 'boolean') options.strict = !options.relaxed;\r\n  if (typeof options.strict === 'boolean') options.relaxed = !options.strict;\r\n  return JSON.parse(text, (key, value) => deserializeValue(this, key, value, options));\r\n}","code-length":115,"reference":"Parse an Extended JSON string, constructing the JavaScript value or object described by that\nstring.\n\n","result":"Parse JSON.","score":[0.0008,0.0365]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stringify(value, replacer, space, options) {\r\n  if (space != null && typeof space === 'object') (options = space), (space = 0);\r\n  if (replacer != null && typeof replacer === 'object')\r\n    (options = replacer), (replacer = null), (space = 0);\r\n  options = Object.assign({}, { relaxed: true }, options);\r\n  const doc = Array.isArray(value)\r\n    ? serializeArray(value, options)\r\n    : serializeDocument(value, options);\r\n  return JSON.stringify(doc, replacer, space);\r\n}","code-length":151,"reference":"Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer\nfunction is specified or optionally including only the specified properties if a replacer array\nis specified.\n\n","result":"Serialize documents.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction serialize(bson, options) {\r\n  options = options || {};\r\n  return JSON.parse(stringify(bson, options));\r\n}","code-length":45,"reference":"Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n\n","result":"Serialize BSON.","score":[0,0.0365]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeDefineVirtualModule(loader, load, addDep, args){\r\n\t\tfunction namer(loadName){\r\n\t\t\tvar baseName = loadName.substr(0, loadName.indexOf(\"!\"));\r\n\t\t\treturn function(part, plugin){\r\n\t\t\t\treturn baseName + \"-\" + part + (plugin ? (\".\" + plugin) : \"\");\r\n\t\t\t};\r\n\t\t}\r\n\t\tfunction addresser(loadAddress){\r\n\t\t\treturn function(part, plugin){\r\n\t\t\t\tvar base = loadAddress + \".\" + part;\r\n\t\t\t\treturn base + (plugin ? (\".\" + plugin) : \"\");\r\n\t\t\t};\r\n\t\t}\r\n\t\tvar name = namer(load.name);\r\n\t\tvar address = addresser(load.address);\r\n\t\t\r\n\t\tvar disposeModule = function(moduleName){\r\n\t\t\tif(loader.has(moduleName))\r\n\t\t\t\tloader[\"delete\"](moduleName);\r\n\t\t};\r\n\t\tif(loader.liveReloadInstalled || loader.has(\"live-reload\")) {\r\n\t\t\tloader.import(\"live-reload\", { name: module.id }).then(function(reload){\r\n\t\t\t\tdisposeModule = reload.disposeModule || disposeModule;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn function(defn){\r\n\t\t\tif(defn.condition) {\r\n\t\t\t\tif(defn.arg) {\r\n\t\t\t\t\t\r\n\t\t\t\t\targs.push(defn.arg);\r\n\t\t\t\t}\r\n\t\t\t\tvar moduleName = typeof defn.name === \"function\" ?\r\n\t\t\t\t\tdefn.name(name) : name(defn.name);\r\n\t\t\t\tvar moduleAddress = typeof defn.address === \"function\" ?\r\n\t\t\t\t\tdefn.address(address) : address(defn.address);\r\n\t\t\t\t\r\n\t\t\t\tif(defn.from) {\r\n\t\t\t\t\taddDep(defn.from, false);\r\n\t\t\t\t}\r\n\t\t\t\telse if(defn.getLoad) {\r\n\t\t\t\t\tvar moduleSource = defn.source();\r\n\t\t\t\t\treturn defn.getLoad(moduleName).then(function(newLoad){\r\n\t\t\t\t\t\tmoduleName = newLoad.name || moduleName;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdisposeModule(moduleName);\r\n\t\t\t\t\t\tloader.define(moduleName, moduleSource, {\r\n\t\t\t\t\t\t\tmetadata: newLoad.metadata,\r\n\t\t\t\t\t\t\taddress: moduleAddress\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\taddDep(moduleName);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse if(defn.source) {\r\n\t\t\t\t\taddDep(moduleName);\r\n\t\t\t\t\tif(loader.has(moduleName))\r\n\t\t\t\t\t\tloader[\"delete\"](moduleName);\r\n\t\t\t\t\tif(typeof defn.source !== \"string\") {\r\n\t\t\t\t\t\treturn Promise.resolve(defn.source)\r\n\t\t\t\t\t\t\t.then(function(source){\r\n\t\t\t\t\t\t\t\tloader.define(moduleName, source, {\r\n\t\t\t\t\t\t\t\t\taddress: address(defn.name),\r\n\t\t\t\t\t\t\t\t\tmetadata: defn.metadata\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn loader.define(moduleName, defn.source, {\r\n\t\t\t\t\t\taddress: address(defn.name)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":816,"reference":"Make functions that will define virtual modules","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFilename(name) {\r\n\t\tvar hash = name.indexOf('#');\r\n\t\tvar bang = name.indexOf('!');\r\n\t\treturn name.slice(hash < bang ? (hash + 1) : 0, bang);\r\n\t}","code-length":71,"reference":"!steal-remove-start","result":"Generate the filename.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchSemver (myProtocol, senderProtocol, callback) {\r\n  const mps = myProtocol.split('\/')\r\n  const sps = senderProtocol.split('\/')\r\n  const myName = mps[1]\r\n  const myVersion = mps[2]\r\n  const senderName = sps[1]\r\n  const senderVersion = sps[2]\r\n  if (myName !== senderName) {\r\n    return callback(null, false)\r\n  }\r\n  const valid = semver.satisfies(myVersion, '~' + senderVersion)\r\n  callback(null, valid)\r\n}","code-length":154,"reference":"Match protocols using semver `~` matching.\n\n","result":"Match protocol versions .","score":[0.1938,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchExact (myProtocol, senderProtocol, callback) {\r\n  const result = myProtocol === senderProtocol\r\n  callback(null, result)\r\n}","code-length":45,"reference":"Match protocols exactly.\n\n","result":"Match the pattern .","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction diffArrays(arr1, arr2) {\r\n        if (!Array.isArray(arr1) || !Array.isArray(arr2)) {\r\n            return true;\r\n        }\r\n        if (arr1.length !== arr2.length) {\r\n            return true;\r\n        }\r\n        for (var i = 0, len = arr1.length; i < len; i++) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","code-length":145,"reference":"Diff two arrays.\n","result":"Compare arrays.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSourceRuleString(sourceRule) {\r\n        function getRuleString(rule) {\r\n            if (rule.length === 1) {\r\n                return '\"' + rule + '\"';\r\n            }\r\n            return '(\"' + rule.join('\" AND \"') + '\")';\r\n        }\r\n        return sourceRule.map(getRuleString).join(' OR ');\r\n    }","code-length":97,"reference":"Turn the rules for a sourceType into a human-readable string\n","result":"Generate sourceRuleString.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTimelineArgs(scope) {\r\n        var timelineArgs = {sourceType: scope.sourceType};\r\n        if (rules.hasOwnProperty(scope.sourceType)) {\r\n            var sourceRules = rules[scope.sourceType];\r\n            var valid = false;\r\n            for (var i = 0, len = sourceRules.length; i < len; i++) {\r\n                var rule = sourceRules[i];\r\n                var params = {};\r\n                for (var j = 0, ruleLen = rule.length; j < ruleLen; j++) {\r\n                    if (angular.isDefined(scope[rule[j]])) {\r\n                        params[rule[j]] = scope[rule[j]];\r\n                    }\r\n                }\r\n                if (Object.keys(params).length === ruleLen) {\r\n                    angular.merge(timelineArgs, params);\r\n                    valid = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!valid) {\r\n                throw new TimelineArgumentException(scope.sourceType, 'args: ' + getSourceRuleString(sourceRules));\r\n            }\r\n        } else {\r\n            throw new TimelineArgumentException(scope.sourceType, 'unknown type');\r\n        }\r\n        return timelineArgs;\r\n    }","code-length":309,"reference":"Get the arguments for the timeline based on parameter rules\n","result":"Get the timeline args.","score":[0.1235,0.2719]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(method,klass){\r\n    while(!!klass){\r\n        var key = null,\r\n            pro = klass.prototype;\r\n        Object.keys(pro).some(function(name){\r\n            if (method===pro[name]){\r\n                key = name;\r\n                return !0;\r\n            }\r\n        });\r\n        if (key!=null){\r\n            return {\r\n                name:key,\r\n                klass:klass\r\n            };\r\n        }\r\n        klass = klass.supor;\r\n    }\r\n}","code-length":143,"reference":"find method in klass prototype chain","result":"Return.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config){\r\n    _logger.info('begin dump files ...');\r\n    var map = {};\r\n    ['fileInclude','fileExclude'].forEach(function(name){\r\n        var value = config[name];\r\n        if (!!value){\r\n            if (typeof value==='string'){\r\n                var reg = new RegExp(value,'i');\r\n                config[name] = function(file){\r\n                    return reg.test(file);\r\n                };\r\n            }else if(!!value.test){\r\n                config[name] = function(file){\r\n                    return value.test(file);\r\n                }\r\n            }\r\n        }\r\n        if (!_util.isFunction(config[name])){\r\n            var flag = name!=='fileExclude';\r\n            config[name] = function(file){\r\n                return flag;\r\n            };\r\n        }\r\n    });\r\n    (config.resRoot||'').split(',').forEach(function(dir){\r\n        if (!dir){\r\n            return;\r\n        }\r\n        var ret = _fs.lsfile(dir,function(name,file){\r\n            return !config.fileExclude(file)&&\r\n                config.fileInclude(file);\r\n        });\r\n        ret.forEach(function(v){\r\n            map[v] = v.replace(config.webRoot,config.temp);\r\n        });\r\n    });\r\n    _logger.debug('package file map -> %j',map);\r\n    Object.keys(map).forEach(function(src){\r\n        var dst = map[src];\r\n        _fs.copy(src,dst,function(a){\r\n            _logger.info('copy file %s',a);\r\n        });\r\n    });\r\n}","code-length":438,"reference":"dump files to temporary directory\n","result":"Dump files.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config){\r\n    _logger.info('begin zip package ...');\r\n    var cmd = [\r\n        'java','-jar',\r\n        JSON.stringify(config.zip),\r\n        JSON.stringify(config.temp),\r\n        JSON.stringify(config.output)\r\n    ].join(' ');\r\n    _logger.debug('do command: %s',cmd);\r\n    exec(cmd,function(error,stdout,stderr){\r\n        if (error){\r\n            _logger.error('zip package error for reason:\\n%s',error.stack);\r\n            process.abort();\r\n            return;\r\n        }\r\n        if (stdout){\r\n            _logger.info(stdout);\r\n        }\r\n        if (stderr){\r\n            _logger.error(stderr);\r\n        }\r\n        uploadToServer(config);\r\n    });\r\n}","code-length":217,"reference":"zip files package\n","result":"Upload zip package to server.","score":[0.2857,0.3125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config){\r\n    if (!_fs.exist(config.output)){\r\n        return abortProcess(\r\n            config,'no package to be uploaded'\r\n        );\r\n    }\r\n    _logger.info('begin build upload form ...');\r\n    var form = new FormData();\r\n    var ex = _util.merge(\r\n        {\r\n            version: '0.1',\r\n            platform: 'ios&android'\r\n        },\r\n        config.extension\r\n    );\r\n    Object.keys(ex).forEach(function(name){\r\n        form.append(name,ex[name]);\r\n    });\r\n    form.append('token',config.token);\r\n    form.append('resID',config.appid);\r\n    form.append('appID',config.nativeId);\r\n    form.append('userData',JSON.stringify({domains:config.domains}));\r\n    form.append('zip',fs.createReadStream(config.output));\r\n    _logger.info('begin upload package to web cache server ...');\r\n    form.submit(config.api,function(err,res){\r\n        if (err){\r\n            return abortProcess(\r\n                config,'upload failed for reason:\\n%s',err.stack\r\n            );\r\n        }\r\n        var arr = [];\r\n        res.on('data',function(chunk){\r\n            arr.push(chunk);\r\n        });\r\n        res.on('end',function(){\r\n            var ret = null,\r\n                txt = arr.join('');\r\n            try{\r\n                ret = JSON.parse(txt);\r\n            }catch(ex){\r\n                return abortProcess(\r\n                    config,'[%s] %s\\n%s',\r\n                    res.statusCode,txt,ex.stack\r\n                );\r\n            }\r\n            if (!!ret&&ret.code==0){\r\n                clearTemp(config);\r\n                _logger.info('package upload success');\r\n                config.ondone();\r\n            }else{\r\n                return abortProcess(\r\n                    config,'package upload failed for reason: [%s] %s',\r\n                    res.statusCode,txt\r\n                );\r\n            }\r\n        });\r\n        res.resume();\r\n    });\r\n}","code-length":552,"reference":"upload package to web cache server\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config){\r\n    _logger.info('clear temporary directory and files');\r\n    _fs.rmdir(config.temp);\r\n    _fs.rm(config.output);\r\n}","code-length":55,"reference":"clear temporary infomation\n","result":"Create a new module.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config){\r\n    var args = [].slice.call(arguments,0);\r\n    clearTemp(args.shift());\r\n    _logger.error.apply(_logger,args);\r\n    process.abort();\r\n}","code-length":63,"reference":"abort process when error\n","result":"Create a new instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(content){\r\n        var ret,\r\n            handler = function(map){\r\n                ret = map;\r\n            },\r\n            sandbox = {NEJ:{deps:handler, config:handler}};\r\n        try{\r\n            vm.createContext(sandbox);\r\n            vm.runInContext(content,sandbox);\r\n        }catch(ex){\r\n        }\r\n        return ret||null;\r\n    }","code-length":108,"reference":"dump dependency config","result":"Create a new module.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(patform,deps,func){\r\n        var args = exports.formatARG.apply(\r\n            exports,arguments\r\n        );\r\n        if (!this.patches){\r\n            this.patches = [];\r\n        }\r\n        if (!args[0]){\r\n            return;\r\n        }\r\n        this.patches.push({\r\n            expression:args[0],\r\n            dependency:args[1],\r\n            source:(args[2]||'').toString()\r\n        });\r\n    }","code-length":132,"reference":"parse nej patch","result":"Patch the expression.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(content){\r\n        var ret = {},\r\n            sandbox = {\r\n                NEJ:{\r\n                    patch:_doPatch.bind(ret)\r\n                }\r\n            };\r\n        try{\r\n            vm.createContext(sandbox);\r\n            vm.runInContext(util.format('(%s)();',content),sandbox);\r\n        }catch(ex){\r\n        }\r\n        return ret.patches;\r\n    }","code-length":114,"reference":"eval content to dump nej patch","result":"Patch content.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(uri,deps,func){\r\n        var args = exports.formatARG.apply(\r\n            exports,arguments\r\n        );\r\n        this.isNEJ = !0;\r\n        this.dependency = args[1];\r\n        this.source = (args[2]||'').toString();\r\n    }","code-length":84,"reference":"do nej define","result":"Create a new NPM module.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(event){\r\n        if (event.type=='script'){\r\n            event.value = this._checkResInScript(\r\n                event.file,\r\n                event.content,\r\n                options\r\n            );\r\n        }\r\n    }","code-length":69,"reference":"check all html file","result":"Check res in scripts.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(uri,config){\r\n        return this._formatURI(uri,{\r\n            fromPage:config.fromPage,\r\n            pathRoot:config.output,\r\n            webRoot:config.webRoot\r\n        });\r\n    }","code-length":66,"reference":"source map file path","result":"Format the URI.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(uri,config){\r\n        uri = uri.replace(\r\n            config.srcRoot,\r\n            config.outHtmlRoot\r\n        );\r\n        return this._formatURI(uri,{\r\n            pathRoot:config.output,\r\n            webRoot:config.webRoot,\r\n            domain:config.mdlRoot\r\n        });\r\n    }","code-length":95,"reference":"nej module root","result":"Format the URI.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(uri,config){\r\n        return uri.replace(\r\n            config.srcRoot,\r\n            config.outHtmlRoot\r\n        ).replace(\r\n            config.webRoot,'\/'\r\n        );\r\n    }","code-length":63,"reference":"html path adjust","result":"Build the html.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction global(map){\r\n    Object.keys(map).forEach(function(key){\r\n        var file = map[key],\r\n            arr = file.split('#'),\r\n            mdl = require('.\/lib\/'+arr[0]+'.js');\r\n        if (!!arr[1]){\r\n            var brr = arr[1].split(',');\r\n            if (brr.length>1){\r\n                var ret = {};\r\n                brr.forEach(function(name){\r\n                    ret[name] = mdl[name];\r\n                });\r\n                mdl = ret;\r\n            }else{\r\n                mdl = mdl[brr[0]];\r\n            }\r\n        }\r\n        exports[key] = mdl;\r\n    });\r\n}","code-length":202,"reference":"export klass or api","result":"Define global variables.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fmix32 (hash) {\r\n    hash ^= hash >>> 16\r\n    hash = multiply(hash, 0x85ebca6b)\r\n    hash ^= hash >>> 13\r\n    hash = multiply(hash, 0xc2b2ae35)\r\n    hash ^= hash >>> 16\r\n    return hash\r\n}","code-length":83,"reference":"We don't use `>>> 0`. We let the values negate. The only use of addition in Murmur uses the result of a multiplication, which will be converted to unsigned integer by our 16-bit at a time multiplication.","result":"Generate the fmix.","score":[0.0,0.0149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fmix32_pure (hash) {\r\n    hash = (hash ^ (hash >>> 16)) >>> 0\r\n    hash = multiply(hash, 0x85ebca6b)\r\n    hash = (hash ^ (hash >>> 13)) >>> 0\r\n    hash = multiply(hash, 0xc2b2ae35)\r\n    hash = (hash ^ (hash >>> 16)) >>> 0\r\n    return hash\r\n}","code-length":107,"reference":"With this, unused, function we always make sure we have an unsigned integer value, but it's not absolutely necessary. We're only interested in the integer value when we perform addition or write the value to our buffer. We do not do this within Murmur's mix function. I'm leaving it in place for a benchmark where I can gauge the cost of `>>> 0`.","result":"Generate the hash .","score":[0.0,0.0088]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bindKeys (scope, obj, def, parentNode, path) {\r\n  var meta, key\r\n  if (typeof obj !== 'object' || obj === null)\r\n    throw new TypeError(\r\n      'Invalid type of value \"' + obj + '\", object expected.')\r\n  Object.defineProperty(obj, memoizedObjectKey, {\r\n    value: {},\r\n    configurable: true\r\n  })\r\n  Object.defineProperty(obj, metaKey, {\r\n    value: {},\r\n    configurable: true\r\n  })\r\n  meta = obj[metaKey]\r\n  for (key in def) {\r\n    meta[key] = {\r\n      keyPath: {\r\n        key: key,\r\n        root: path.root,\r\n        target: obj\r\n      },\r\n      activeNodes: [],\r\n      previousValues: [],\r\n      currentMarker: def[key][markerKey],\r\n      valueIsArray: null\r\n    }\r\n    bindKey(scope, obj, def, key, parentNode)\r\n  }\r\n}","code-length":259,"reference":"Define getters & setters. This function is the internal entry point to a lot\nof functionality.\n\n","result":"Bind keys to objects.","score":[0.0159,0.0338]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parentSetter (x) {\r\n    var previousValue = memoizedObject[key]\r\n    var returnValue\r\n    memoizedObject[key] = x\r\n    if (x === previousValue) return x\r\n    if (definition && x !== null && x !== void 0)\r\n      bindKeys(scope, x, definition, parentNode, keyPath)\r\n    else if (change) {\r\n      returnValue = change(parentNode, x,\r\n        previousValue === void 0 ? null : previousValue, keyPath)\r\n      if (returnValue !== void 0)\r\n        changeValue(parentNode, returnValue, branch[replaceAttributeKey])\r\n    }\r\n    return x\r\n  }","code-length":167,"reference":"Special case for binding same node as parent.","result":"Set the parent.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceNode (value, previousValue, i) {\r\n    var activeNode = activeNodes[i]\r\n    var currentNode = node\r\n    var returnValue\r\n    if (value === void 0) value = null\r\n    if (previousValue === void 0) previousValue = null\r\n    if (value === null) {\r\n      removeNode(null, previousValue, i)\r\n      return null\r\n    }\r\n    if (valueIsArray) keyPath.index = i\r\n    else delete keyPath.index\r\n    previousValues[i] = value\r\n    if (definition) {\r\n      if (activeNode) removeNode(value, previousValue, i)\r\n      currentNode = processNodes(scope, node, definition)\r\n      keyPath.target = valueIsArray ? value[i] : value\r\n      bindKeys(scope, value, definition, currentNode, keyPath)\r\n      if (mount) {\r\n        keyPath.target = value\r\n        mount(currentNode, value, null, keyPath)\r\n      }\r\n    }\r\n    else {\r\n      currentNode = activeNode || node.cloneNode(true)\r\n      if (change) {\r\n        returnValue = change(currentNode, value, previousValue, keyPath)\r\n        if (returnValue !== void 0)\r\n          changeValue(currentNode, returnValue, branch[replaceAttributeKey])\r\n      }\r\n      else {\r\n        if (previousValue === null &&\r\n          ~updateTags.indexOf(currentNode.tagName))\r\n          currentNode.addEventListener('input',\r\n            updateChange(branch[replaceAttributeKey], keyPath, key))\r\n        changeValue(currentNode, value, branch[replaceAttributeKey])\r\n      }\r\n      if (activeNode) return null\r\n    }\r\n    activeNodes[i] = currentNode\r\n    return currentNode\r\n  }","code-length":435,"reference":"The return value of this function is a Node to be added, otherwise null.","result":"Replace the node in the DOM.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pop () {\r\n    var i = this.length - 1\r\n    var previousValue = previousValues[i]\r\n    var value = Array.prototype.pop.call(this)\r\n    removeNode(null, previousValue, i)\r\n    previousValues.length = activeNodes.length = this.length\r\n    return value\r\n  }","code-length":90,"reference":"Below are optimized array mutator methods. They have to exist within this closure. Note that the native implementations of these methods do not trigger setter functions on array indices.","result":"Remove nodes from the array.","score":[0.002,0.0188]}
{"code":"\/*is used to<extra_id_0>\r\nfunction changeValue (node, value, attribute) {\r\n  var firstChild\r\n  switch (attribute) {\r\n  case 'textContent':\r\n    firstChild = node.firstChild\r\n    if (firstChild && !firstChild.nextSibling &&\r\n      firstChild.nodeType === TEXT_NODE)\r\n      firstChild.textContent = value\r\n    else node.textContent = value\r\n    break\r\n  case 'checked':\r\n    node.checked = Boolean(value)\r\n    break\r\n  case 'value':\r\n    if (node.value !== value) node.value = value\r\n    break\r\n  default:\r\n    break\r\n  }\r\n}","code-length":165,"reference":"Default behavior when a return value is given for a change function.","result":"Change value of node.","score":[0.0432,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNextNode (index, activeNodes) {\r\n  var i, j, nextNode\r\n  for (i = index, j = activeNodes.length; i < j; i++)\r\n    if (activeNodes[i]) {\r\n      nextNode = activeNodes[i]\r\n      break\r\n    }\r\n  return nextNode\r\n}","code-length":87,"reference":"Find next node in a potentially sparse array.","result":"Return activeNodes[index].","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateChange (targetKey, path, key) {\r\n  var target = path.target\r\n  var index = path.index\r\n  var replaceKey = key\r\n  if (typeof index === 'number') {\r\n    target = target[key]\r\n    replaceKey = index\r\n  }\r\n  return function handleChange (event) {\r\n    target[replaceKey] = event.target[targetKey]\r\n  }\r\n}","code-length":113,"reference":"Internal event listener to update data on input change.","result":"Update the target object.","score":[0,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction simulacra (obj, def, matchNode) {\r\n  var document = this ? this.document : window.document\r\n  var Node = this ? this.Node : window.Node\r\n  var node, query\r\n  featureCheck(this || window, features)\r\n  if (obj === null || typeof obj !== 'object' || isArray(obj))\r\n    throw new TypeError('First argument must be a singular object.')\r\n  if (!isArray(def))\r\n    throw new TypeError('Second argument must be an array.')\r\n  if (typeof def[0] === 'string') {\r\n    query = def[0]\r\n    def[0] = document.querySelector(query)\r\n    if (!def[0]) throw new Error(\r\n      'Top-level Node \"' + query + '\" could not be found in the document.')\r\n  }\r\n  else if (!(def[0] instanceof Node)) throw new TypeError(\r\n    'The first position of the top-level must be either a Node or a CSS ' +\r\n    'selector string.')\r\n  if (!def[isProcessedKey]) {\r\n    if ('content' in def[0]) def[0] = def[0].content\r\n    def[0] = def[0].cloneNode(true)\r\n    cleanNode(this, def[0])\r\n    ensureNodes(def[0], def[1])\r\n    setProperties(def)\r\n  }\r\n  node = processNodes(this, def[0], def[1])\r\n  bindKeys(this, obj, def[1], node, { root: obj })\r\n  if (matchNode) {\r\n    rehydrate(this, obj, def[1], node, matchNode)\r\n    return matchNode\r\n  }\r\n  return node\r\n}","code-length":433,"reference":"Bind an object to the DOM.\n\n","result":"Create a new instance of the simulacra class.","score":[0.1389,0.0806]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cleanNode (scope, node) {\r\n  var showText = 0x00000004\r\n  var document = scope ? scope.document : window.document\r\n  var treeWalker = document.createTreeWalker(\r\n    node, showText, processNodes.acceptNode, false)\r\n  var textNode\r\n  while (treeWalker.nextNode()) {\r\n    textNode = treeWalker.currentNode\r\n    textNode.textContent = textNode.textContent.trim()\r\n  }\r\n  node.normalize()\r\n}","code-length":133,"reference":"Internal function to strip empty text nodes.","result":"Clean node .","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processNodes (scope, node, def) {\r\n  var document = scope ? scope.document : window.document\r\n  var key, branch, result, mirrorNode, parent, marker, indices\r\n  var i, j, treeWalker, orderedKeys\r\n  result = def[templateKey]\r\n  if (!result) {\r\n    node = node.cloneNode(true)\r\n    indices = []\r\n    matchNodes(scope, node, def)\r\n    orderedKeys = Object.keys(def).sort(function (a, b) {\r\n      var nodeA = def[a][0][matchedNodeKey]\r\n      var nodeB = def[b][0][matchedNodeKey]\r\n      if (nodeA && nodeB)\r\n        return nodeA.index - nodeB.index\r\n      return 0\r\n    })\r\n    for (i = 0; i < orderedKeys.length; i++) {\r\n      key = orderedKeys[i]\r\n      branch = def[key]\r\n      if (branch[isBoundToParentKey]) continue\r\n      result = branch[0][matchedNodeKey]\r\n      indices.push(result.index)\r\n      mirrorNode = result.node\r\n      parent = mirrorNode.parentNode\r\n      if (mirrorNode.nextElementSibling === null)\r\n        branch[isMarkerLastKey] = true\r\n      if (processNodes.useCommentNode) {\r\n        marker = parent.insertBefore(\r\n          document.createComment(' end \"' + key + '\" '), mirrorNode)\r\n        parent.insertBefore(\r\n          document.createComment(' begin \"' + key + '\" '), marker)\r\n      }\r\n      else marker = parent.insertBefore(\r\n        document.createTextNode(''), mirrorNode)\r\n      branch[markerKey] = marker\r\n      parent.removeChild(mirrorNode)\r\n    }\r\n    Object.defineProperty(def, templateKey, {\r\n      value: {\r\n        node: node.cloneNode(true),\r\n        indices: indices\r\n      }\r\n    })\r\n  }\r\n  else {\r\n    node = result.node.cloneNode(true)\r\n    indices = result.indices\r\n    i = 0\r\n    j = 0\r\n    treeWalker = document.createTreeWalker(\r\n      node, showAll, acceptNode, false)\r\n    for (key in def) {\r\n      branch = def[key]\r\n      if (branch[isBoundToParentKey]) continue\r\n      while (treeWalker.nextNode()) {\r\n        if (i === indices[j]) {\r\n          branch[markerKey] = treeWalker.currentNode\r\n          i++\r\n          break\r\n        }\r\n        i++\r\n      }\r\n      j++\r\n    }\r\n  }\r\n  return node\r\n}","code-length":673,"reference":"Internal function to remove bound nodes and replace them with markers.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchNodes (scope, node, def) {\r\n  var document = scope ? scope.document : window.document\r\n  var treeWalker = document.createTreeWalker(\r\n    node, showAll, acceptNode, false)\r\n  var nodes = []\r\n  var i, j, key, currentNode, childWalker\r\n  var nodeIndex = 0\r\n  var offset = processNodes.useCommentNode ? 1 : 0\r\n  for (key in def) nodes.push(def[key][0])\r\n  while (treeWalker.nextNode() && nodes.length) {\r\n    for (i = 0, j = nodes.length; i < j; i++) {\r\n      currentNode = nodes[i]\r\n      if (treeWalker.currentNode.isEqualNode(currentNode)) {\r\n        Object.defineProperty(currentNode, matchedNodeKey, {\r\n          value: {\r\n            index: nodeIndex + offset,\r\n            node: treeWalker.currentNode\r\n          }\r\n        })\r\n        if (processNodes.useCommentNode) offset++\r\n        childWalker = document.createTreeWalker(\r\n          currentNode, showAll, acceptNode, false)\r\n        while (childWalker.nextNode()) offset--\r\n        nodes.splice(i, 1)\r\n        break\r\n      }\r\n    }\r\n    nodeIndex++\r\n  }\r\n}","code-length":331,"reference":"Internal function to find and set matching DOM nodes on cloned nodes.\n\n","result":"Match nodes in the DOM.","score":[0.0593,0.0885]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rehydrate (scope, obj, def, node, matchNode) {\r\n  var document = scope ? scope.document : window.document\r\n  var key, branch, x, value, change, definition, mount, keyPath\r\n  var meta, valueIsArray, activeNodes, index, treeWalker, currentNode\r\n  for (key in def) {\r\n    branch = def[key]\r\n    meta = obj[metaKey][key]\r\n    change = !branch[hasDefinitionKey] && branch[1]\r\n    definition = branch[hasDefinitionKey] && branch[1]\r\n    mount = branch[2]\r\n    keyPath = meta.keyPath\r\n    if (branch[isBoundToParentKey]) {\r\n      x = obj[key]\r\n      if (definition && x !== null && x !== void 0)\r\n        bindKeys(scope, x, definition, matchNode, keyPath)\r\n      else if (change)\r\n        change(matchNode, x, null, keyPath)\r\n      continue\r\n    }\r\n    activeNodes = meta.activeNodes\r\n    if (!activeNodes.length) continue\r\n    valueIsArray = meta.valueIsArray\r\n    x = valueIsArray ? obj[key] : [ obj[key] ]\r\n    index = 0\r\n    treeWalker = document.createTreeWalker(\r\n      matchNode, whatToShow, acceptNode, false)\r\n    while (index < activeNodes.length && treeWalker.nextNode()) {\r\n      currentNode = activeNodes[index]\r\n      if (treeWalker.currentNode.isEqualNode(currentNode)) {\r\n        activeNodes.splice(index, 1, treeWalker.currentNode)\r\n        value = x[index]\r\n        if (valueIsArray) keyPath.index = index\r\n        else delete keyPath.index\r\n        if (definition) {\r\n          rehydrate(scope, value, definition,\r\n            currentNode, treeWalker.currentNode)\r\n          if (mount) {\r\n            keyPath.target = value\r\n            mount(treeWalker.currentNode, value, null, keyPath)\r\n          }\r\n        }\r\n        else if (change)\r\n          change(treeWalker.currentNode, value, null, keyPath)\r\n        index++\r\n      }\r\n    }\r\n    if (index !== activeNodes.length) throw new Error(\r\n      'Matching nodes could not be found on key \"' + key + '\", expected ' +\r\n      activeNodes.length + ', found ' + index + '.')\r\n    currentNode = treeWalker.currentNode\r\n    if (processNodes.useCommentNode &&\r\n      currentNode.nextSibling !== null &&\r\n      currentNode.nextSibling.nodeType === COMMENT_NODE)\r\n      branch[markerKey] = currentNode.nextSibling\r\n    else branch[markerKey] = currentNode.parentNode.insertBefore(\r\n      document.createTextNode(''), currentNode.nextSibling)\r\n  }\r\n}","code-length":690,"reference":"Rehydration of existing DOM nodes by recursively checking equality.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction render (obj, def, html) {\r\n  var i, nodes, handler, parser, element, elementPrototype\r\n  if (Array.isArray(def)) def = def[1]\r\n  if (renderFnKey in def) return def[renderFnKey](obj)\r\n  handler = new htmlParser.DomHandler(function (error, result) {\r\n    if (error) throw error\r\n    nodes = result\r\n  }, handlerOptions)\r\n  parser = new htmlParser.Parser(handler)\r\n  parser.write(html)\r\n  parser.end()\r\n  for (i = nodes.length; i--;)\r\n    if (nodes[i].type === 'tag') {\r\n      element = nodes[i]\r\n      break\r\n    }\r\n  if (!element) throw new Error('No element found!')\r\n  elementPrototype = Object.getPrototypeOf(element)\r\n  Element.prototype = elementPrototype\r\n  Object.defineProperties(elementPrototype, elementExtension)\r\n  processDefinition(def, nodes)\r\n  def[renderFnKey] = makeRender(def, nodes)\r\n  return def[renderFnKey](obj)\r\n}","code-length":284,"reference":"Internal function for rendering strings. The benchmark to beat is plain old\nstring concatenation and for loops. Although this won't be faster, it should\nwork with more or less the same functionality as the DOM version.\n\nOnly a tiny subset of the actual DOM is implemented here, so it may not work\nfor all front-end functionality.\n\n","result":"Render html.","score":[0,0.0099]}
{"code":"\/*is used to<extra_id_0>\r\nfunction featureCheck (globalScope, features) {\r\n  var i, j, k, l, feature, path\r\n  for (i = 0, j = features.length; i < j; i++) {\r\n    path = features[i]\r\n    if (typeof path[0] === 'string') {\r\n      feature = globalScope\r\n      for (k = 0, l = path.length; k < l; k++) {\r\n        if (!(path[k] in feature)) throw new Error('Missing ' +\r\n          path.slice(0, k + 1).join('.') + ' feature which is required.')\r\n        feature = feature[path[k]]\r\n      }\r\n    }\r\n    else {\r\n      feature = path[0]\r\n      for (k = 1, l = path.length; k < l; k++) {\r\n        if (k > 1) feature = feature[path[k]]\r\n        if (typeof feature === 'undefined') throw new Error('Missing ' +\r\n          path[0].name + path.slice(1, k + 1).join('.') +\r\n          ' feature which is required.')\r\n      }\r\n    }\r\n  }\r\n}","code-length":293,"reference":"Check if capabilities are available, or throw an error.\n\n","result":"Check if a feature is required.","score":[0.1656,0.2155]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bemNames(entitys, delimiters) {\r\n  var resultString = '';\r\n  var names = entitys || { mods: {}, mixin: '' };\r\n  var delims = _extends({\r\n    ns: '',\r\n    el: '__',\r\n    mod: '--',\r\n    modVal: '-'\r\n  }, delimiters);\r\n  var mixin = isString(names.mixin) ? ' ' + names.mixin : '';\r\n  if (!names.block) return '';\r\n  resultString = delims.ns ? delims.ns + names.block : names.block;\r\n  if (names.el) resultString += delims.el + names.el;\r\n  if (isPObject(names.mods)) {\r\n    resultString += Object.keys(names.mods).reduce(function (prev, name) {\r\n      var val = names.mods[name];\r\n            if (val === true) {\r\n        prev += ' ' + resultString + delims.mod + name;\r\n      } else if (isString(val) || isNumber(val)) {\r\n        prev += ' ' + resultString + delims.mod + name + delims.modVal + names.mods[name];\r\n      }\r\n            return prev;\r\n    }, '');\r\n  }\r\n  return resultString + mixin;\r\n}","code-length":324,"reference":"Create String from BEM entitys\n","result":"Generate bem names.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deepMergeConfigs(configs, options) {\r\n  return merge.all(configs.filter(config => config), options);\r\n}","code-length":40,"reference":"Merges an array of configs\n\n","result":"Avoid recursive calls.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function loadYaml(context, params) {\r\n  try {\r\n    const response = await context.github.repos.getContents(params);\r\n    return parseConfig(response.data.content);\r\n  } catch (e) {\r\n    if (e.code === 404) {\r\n      return null;\r\n    }\r\n    throw e;\r\n  }\r\n}","code-length":99,"reference":"Loads a file from GitHub\n\n","result":"Load yaml files.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBaseParams(params, base) {\r\n  if (typeof base !== 'string') {\r\n    throw new Error(`Invalid repository name in key \"${BASE_KEY}\"`);\r\n  }\r\n  const match = base.match(BASE_REGEX);\r\n  if (match == null) {\r\n    throw new Error(`Invalid repository name in key \"${BASE_KEY}\": ${base}`);\r\n  }\r\n  return {\r\n    owner: match[1] || params.owner,\r\n    repo: match[2],\r\n    path: match[3] || params.path,\r\n  };\r\n}","code-length":155,"reference":"Computes parameters for the repository specified in base\n\nBase can either be the name of a repository in the same organization or\na full slug \"organization\/repo\".\n\n","result":"Generate the code.","score":[0.0002,0.0211]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getConfig(context, fileName, defaultConfig, deepMergeOptions) {\r\n  const filePath = path.posix.join(CONFIG_PATH, fileName);\r\n  const params = context.repo({\r\n    path: filePath,\r\n  });\r\n  const config = await loadYaml(context, params);\r\n  let baseRepo;\r\n  if (config == null) {\r\n    baseRepo = DEFAULT_BASE;\r\n  } else if (config != null && BASE_KEY in config) {\r\n    baseRepo = config[BASE_KEY];\r\n    delete config[BASE_KEY];\r\n  }\r\n  let baseConfig;\r\n  if (baseRepo) {\r\n    const baseParams = getBaseParams(params, baseRepo);\r\n    baseConfig = await loadYaml(context, baseParams);\r\n  }\r\n  if (config == null && baseConfig == null && !defaultConfig) {\r\n    return null;\r\n  }\r\n  return deepMergeConfigs(\r\n    [defaultConfig, baseConfig, config],\r\n    deepMergeOptions\r\n  );\r\n}","code-length":260,"reference":"Loads the specified config file from the context's repository\n\nIf the config file contains a top-level key \"_extends\", it is merged\nwith a config of the same name in the repository specified by the\n_extends key.  The repository of the base configuration can either be\ngiven as \"repository\" or as \"organization\/repository\".\n\nIf the config file does not exist in the context's repository, `null`\nis returned. If the base repository does not exist or does not contain\nthe config file, it is ignored.\n\nIf a default config is given, it is merged with the config from the\nrepository, if it exists.\n\n","result":"Load config files.","score":[0.0,0.0111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineProperty (obj, name, value) {\r\n  var enumerable = !!obj[name] && obj.propertyIsEnumerable(name)\r\n  Object.defineProperty(obj, name, {\r\n    configurable: true,\r\n    enumerable: enumerable,\r\n    writable: true,\r\n    value: value\r\n  })\r\n}","code-length":89,"reference":"Sets a property on an object, preserving its enumerability. This function assumes that the property is already writable.","result":"Define a property.","score":[0.0028,0.0303]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shimmer (options) {\r\n  if (options && options.logger) {\r\n    if (!isFunction(options.logger)) logger(\"new logger isn't a function, not replacing\")\r\n    else logger = options.logger\r\n  }\r\n}","code-length":68,"reference":"Keep initialization idempotent.","result":"Shim shimmer functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction injectManifest(data) {\r\n  let manifestHtml = `<head><link rel=manifest href=${hexo.config.pwa.manifest.path}>`;\r\n  if (data.indexOf(manifestHtml) === -1) {\r\n    data = data.replace('<head>', manifestHtml);\r\n  }\r\n  return data;\r\n}","code-length":94,"reference":"inject manifest html fragment into page code\n\n","result":"Inject the manifest.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction injectSWRegister(data) {\r\n  let swHtml = `<script>${compiledSWRegTpl}<\/script><\/body>`;\r\n  if (data.indexOf(compiledSWRegTpl) === -1) {\r\n    data = data.replace('<\/body>', swHtml);\r\n  }\r\n  return data;\r\n}","code-length":87,"reference":"inject service worker registion fragment into page code\n\n","result":"Inject SWRegister.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction injectAsyncLoadPageJS(data) {\r\n  let injectHtml = `<script>${asyncLoadPageJSTpl}<\/script>`;\r\n  if (data.indexOf(injectHtml) === -1) {\r\n    data = data.replace('<\/head>', injectHtml);\r\n  }\r\n  return data;\r\n}","code-length":87,"reference":"inject async load page js fragment\n\n","result":"Inject async load page JS.","score":[0.4052,0.6727]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rehype2react(options) {\r\n  var settings = options || {};\r\n  var createElement = settings.createElement;\r\n  var components = settings.components || {};\r\n  this.Compiler = compiler;\r\n    function compiler(node) {\r\n    if (node.type === 'root') {\r\n      if (node.children.length === 1 && node.children[0].type === 'element') {\r\n        node = node.children[0];\r\n      } else {\r\n        node = {\r\n          type: 'element',\r\n          tagName: 'div',\r\n          properties: node.properties || {},\r\n          children: node.children\r\n        };\r\n      }\r\n    }\r\n    return toH(h, tableCellStyle(node), settings.prefix);\r\n  }\r\n    function h(name, props, children) {\r\n    var component = has(components, name) ? components[name] : name;\r\n    return createElement(component, props, children);\r\n  }\r\n}","code-length":253,"reference":"Attach a react compiler.\n\n","result":"Create a new React component.","score":[0.2403,0.2439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction doExec(method, args) {\r\n    var cp;\r\n    var cpPromise = new ChildProcessPromise();\r\n    var reject = cpPromise._cpReject;\r\n    var resolve = cpPromise._cpResolve;\r\n    var finalArgs = slice.call(args, 0);\r\n    finalArgs.push(callback);\r\n    cp = child_process[method].apply(child_process, finalArgs);\r\n    function callback(err, stdout, stderr) {\r\n        if (err) {\r\n            var commandStr = args[0] + (Array.isArray(args[1]) ? (' ' + args[1].join(' ')) : '');\r\n            err.message += ' `' + commandStr + '` (exited with error code ' + err.code + ')';\r\n            err.stdout = stdout;\r\n            err.stderr = stderr;\r\n            var cpError = new ChildProcessError(err.message, err.code, child_process, stdout, stderr);\r\n            reject(cpError);\r\n        } else {\r\n            resolve({\r\n                childProcess: cp,\r\n                stdout: stdout,\r\n                stderr: stderr\r\n            });\r\n        }\r\n    }\r\n    cpPromise.childProcess = cp;\r\n    return cpPromise;\r\n}","code-length":308,"reference":"Promise wrapper for exec, execFile\n\n","result":"Execute a command in a child process.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction doSpawn(method, command, args, options) {\r\n    var result = {};\r\n    var cp;\r\n    var cpPromise = new ChildProcessPromise();\r\n    var reject = cpPromise._cpReject;\r\n    var resolve = cpPromise._cpResolve;\r\n    var successfulExitCodes = (options && options.successfulExitCodes) || [0];\r\n    cp = method(command, args, options);\r\n    var captureStdout = false;\r\n    var captureStderr = false;\r\n    var capture = options && options.capture;\r\n    if (capture) {\r\n        for (var i = 0, len = capture.length; i < len; i++) {\r\n            var cur = capture[i];\r\n            if (cur === 'stdout') {\r\n                captureStdout = true;\r\n            } else if (cur === 'stderr') {\r\n                captureStderr = true;\r\n            }\r\n        }\r\n    }\r\n    result.childProcess = cp;\r\n    if (captureStdout) {\r\n        result.stdout = '';\r\n        cp.stdout.on('data', function(data) {\r\n            result.stdout += data;\r\n        });\r\n    }\r\n    if (captureStderr) {\r\n        result.stderr = '';\r\n        cp.stderr.on('data', function(data) {\r\n            result.stderr += data;\r\n        });\r\n    }\r\n    cp.on('error', reject);\r\n    cp.on('close', function(code) {\r\n        if (successfulExitCodes.indexOf(code) === -1) {\r\n            var commandStr = command + (args.length ? (' ' + args.join(' ')) : '');\r\n            var message = '`' + commandStr + '` failed with code ' + code;\r\n            var err = new ChildProcessError(message, code, cp);\r\n            if (captureStderr) {\r\n                err.stderr = result.stderr.toString();\r\n            }\r\n            if (captureStdout) {\r\n                err.stdout = result.stdout.toString();\r\n            }\r\n            reject(err);\r\n        } else {\r\n            result.code = code;\r\n            resolve(result);\r\n        }\r\n    });\r\n    cpPromise.childProcess = cp;\r\n    return cpPromise;\r\n}","code-length":553,"reference":"`spawn` as Promised\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction slope2(that, t) {\r\n  var h = that._x1 - that._x0;\r\n  return h ? (3 * (that._y1 - that._y0) \/ h - t) \/ 2 : t;\r\n}","code-length":67,"reference":"Calculate a one-sided slope.","result":"Calculate the slope.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldSetAttribute(name, value) {\r\n  if (isReservedProp(name)) {\r\n    return false;\r\n  }\r\n  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\r\n    return false;\r\n  }\r\n  if (value === null) {\r\n    return true;\r\n  }\r\n  switch (typeof value) {\r\n    case 'boolean':\r\n      return shouldAttributeAcceptBooleanValue(name);\r\n    case 'undefined':\r\n    case 'number':\r\n    case 'string':\r\n    case 'object':\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}","code-length":200,"reference":"Checks whether a property name is a writeable attribute.\n","result":"Detect if an element should be set to an attribute.","score":[0.1086,0.0549]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createMarkupForProperty(name, value) {\r\n  var propertyInfo = getPropertyInfo(name);\r\n  if (propertyInfo) {\r\n    if (shouldIgnoreValue(propertyInfo, value)) {\r\n      return '';\r\n    }\r\n    var attributeName = propertyInfo.attributeName;\r\n    if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {\r\n      return attributeName + '=\"\"';\r\n    } else if (typeof value !== 'boolean' || shouldAttributeAcceptBooleanValue(name)) {\r\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\r\n    }\r\n  } else if (shouldSetAttribute(name, value)) {\r\n    if (value == null) {\r\n      return '';\r\n    }\r\n    return name + '=' + quoteAttributeValueForBrowser(value);\r\n  }\r\n  return null;\r\n}","code-length":218,"reference":"Creates markup for a property.\n\n","result":"Create a property markup for the DOM element.","score":[0.2174,0.5955]}
{"code":"\/*is used to<extra_id_0>\r\nfunction trapBubbledEvent(topLevelType, handlerBaseName, element) {\r\n  if (!element) {\r\n    return null;\r\n  }\r\n  return EventListener.listen(element, handlerBaseName, dispatchEvent.bind(null, topLevelType));\r\n}","code-length":69,"reference":"Traps top-level events by using event bubbling.\n\n","result":"Trap bubbled events.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createUpdateQueue(baseState) {\r\n  var queue = {\r\n    baseState: baseState,\r\n    expirationTime: NoWork,\r\n    first: null,\r\n    last: null,\r\n    callbackList: null,\r\n    hasForceUpdate: false,\r\n    isInitialized: false\r\n  };\r\n  {\r\n    queue.isProcessing = false;\r\n  }\r\n  return queue;\r\n}","code-length":112,"reference":"Singly linked-list of updates. When an update is scheduled, it is added to the queue of the current fiber and the work-in-progress fiber. The two queues are separate but they share a persistent structure.  During reconciliation, updates are removed from the work-in-progress fiber, but they remain on the current fiber. That ensures that if a work-in-progress is aborted, the aborted updates are recovered by cloning from current.  The work-in-progress queue is always a subset of the current queue.  When the tree is committed, the work-in-progress becomes the current.","result":"Create an update queue.","score":[0.0,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mountClassInstance(workInProgress, renderExpirationTime) {\r\n    var current = workInProgress.alternate;\r\n    {\r\n      checkClassInstance(workInProgress);\r\n    }\r\n    var instance = workInProgress.stateNode;\r\n    var state = instance.state || null;\r\n    var props = workInProgress.pendingProps;\r\n    !props ? invariant(false, 'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.') : void 0;\r\n    var unmaskedContext = getUnmaskedContext(workInProgress);\r\n    instance.props = props;\r\n    instance.state = workInProgress.memoizedState = state;\r\n    instance.refs = emptyObject;\r\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\r\n    if (enableAsyncSubtreeAPI && workInProgress.type != null && workInProgress.type.prototype != null && workInProgress.type.prototype.unstable_isAsyncReactComponent === true) {\r\n      workInProgress.internalContextTag |= AsyncUpdates;\r\n    }\r\n    if (typeof instance.componentWillMount === 'function') {\r\n      callComponentWillMount(workInProgress, instance);\r\n      var updateQueue = workInProgress.updateQueue;\r\n      if (updateQueue !== null) {\r\n        instance.state = processUpdateQueue(current, workInProgress, updateQueue, instance, props, renderExpirationTime);\r\n      }\r\n    }\r\n    if (typeof instance.componentDidMount === 'function') {\r\n      workInProgress.effectTag |= Update;\r\n    }\r\n  }","code-length":383,"reference":"Invokes the mount life-cycles on a previously never rendered instance.","result":"Mount a class instance.","score":[0.0848,0.1596]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requestWork(root, expirationTime) {\r\n    if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\r\n      invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');\r\n    }\r\n    if (root.nextScheduledRoot === null) {\r\n      root.remainingExpirationTime = expirationTime;\r\n      if (lastScheduledRoot === null) {\r\n        firstScheduledRoot = lastScheduledRoot = root;\r\n        root.nextScheduledRoot = root;\r\n      } else {\r\n        lastScheduledRoot.nextScheduledRoot = root;\r\n        lastScheduledRoot = root;\r\n        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\r\n      }\r\n    } else {\r\n      var remainingExpirationTime = root.remainingExpirationTime;\r\n      if (remainingExpirationTime === NoWork || expirationTime < remainingExpirationTime) {\r\n        root.remainingExpirationTime = expirationTime;\r\n      }\r\n    }\r\n    if (isRendering) {\r\n      return;\r\n    }\r\n    if (isBatchingUpdates) {\r\n      if (isUnbatchingUpdates) {\r\n        performWorkOnRoot(root, Sync);\r\n      }\r\n      return;\r\n    }\r\n    if (expirationTime === Sync) {\r\n      performWork(Sync, null);\r\n    } else if (!isCallbackScheduled) {\r\n      isCallbackScheduled = true;\r\n      startRequestCallbackTimer();\r\n      scheduleDeferredCallback(performAsyncWork);\r\n    }\r\n  }","code-length":389,"reference":"requestWork is called by the scheduler whenever a root receives an update. It's up to the renderer to call renderRoot at some point in the future.","result":"Avoid recursive calls to requestWork .","score":[0.0082,0.0625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldYield() {\r\n    if (deadline === null) {\r\n      return false;\r\n    }\r\n    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {\r\n      return false;\r\n    }\r\n    deadlineDidExpire = true;\r\n    return true;\r\n  }","code-length":84,"reference":"When working on async work, the reconciler asks the renderer if it should yield execution. For DOM, we implement this with requestIdleCallback.","result":"Return deadlineDidExpire.","score":[0,0.025]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deleteValueForProperty(node, name) {\r\n  var propertyInfo = getPropertyInfo(name);\r\n  if (propertyInfo) {\r\n    var mutationMethod = propertyInfo.mutationMethod;\r\n    if (mutationMethod) {\r\n      mutationMethod(node, undefined);\r\n    } else if (propertyInfo.mustUseProperty) {\r\n      var propName = propertyInfo.propertyName;\r\n      if (propertyInfo.hasBooleanValue) {\r\n        node[propName] = false;\r\n      } else {\r\n        node[propName] = '';\r\n      }\r\n    } else {\r\n      node.removeAttribute(propertyInfo.attributeName);\r\n    }\r\n  } else {\r\n    node.removeAttribute(name);\r\n  }\r\n}","code-length":191,"reference":"Deletes the value for a property on a node.\n\n","result":"Delete value for properties.","score":[0.1294,0.3007]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateProperties$1(domElement, updatePayload, tag, lastRawProps, nextRawProps) {\r\n  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);\r\n  var isCustomComponentTag = isCustomComponent(tag, nextRawProps);\r\n  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);\r\n  switch (tag) {\r\n    case 'input':\r\n      updateWrapper(domElement, nextRawProps);\r\n      updateValueIfChanged(domElement);\r\n      break;\r\n    case 'textarea':\r\n      updateWrapper$1(domElement, nextRawProps);\r\n      break;\r\n    case 'select':\r\n      postUpdateWrapper(domElement, nextRawProps);\r\n      break;\r\n  }\r\n}","code-length":197,"reference":"Apply the diff.","result":"Update DOM properties.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function sympact(code, options) {\r\n  if (typeof code !== 'string') {\r\n    throw new TypeError(\"The 'code' paramater must a string'\");\r\n  }\r\n  if (typeof options === 'undefined') {\r\n    options = {};\r\n  }\r\n  if (typeof options !== 'object') {\r\n    throw new TypeError(\"The 'options' paramater must an object'\");\r\n  }\r\n  const interval = options.interval || 125;\r\n  const cwd = options.cwd || path.dirname(caller());\r\n  if (interval < 1) {\r\n    throw new TypeError(\"The 'interval' paramater must be greater than 0'\");\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    const slave = new Worker(code, cwd);\r\n    const probe = new Profiler(slave.pid(), interval);\r\n    slave.on('ready', async () => {\r\n      await probe.watch();\r\n      slave.run();\r\n    });\r\n    slave.on('after', async (start, end) => {\r\n      await probe.unwatch();\r\n      slave.kill();\r\n      resolve(probe.report(start, end));\r\n    });\r\n    slave.on('error', async err => {\r\n      await probe.unwatch();\r\n      slave.kill();\r\n      reject(err);\r\n    });\r\n  });\r\n}","code-length":342,"reference":"Measures the impact of running a certain script on your system.\nMonitors the cpu and memory usage of the whole tree of processes generated by\nthe script provided.\n","result":"Run sympact code.","score":[0,0.0196]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ExponentialBackoffStrategy(options) {\r\n    BackoffStrategy.call(this, options);\r\n    this.backoffDelay_ = 0;\r\n    this.nextBackoffDelay_ = this.getInitialDelay();\r\n    this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;\r\n    if (options && options.factor !== undefined) {\r\n        precond.checkArgument(options.factor > 1,\r\n            'Exponential factor should be greater than 1 but got %s.',\r\n            options.factor);\r\n        this.factor_ = options.factor;\r\n    }\r\n}","code-length":149,"reference":"Exponential backoff strategy.","result":"Create an exponential backoff strategy.","score":[0.3398,0.9201]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Backoff(backoffStrategy) {\r\n    events.EventEmitter.call(this);\r\n    this.backoffStrategy_ = backoffStrategy;\r\n    this.maxNumberOfRetry_ = -1;\r\n    this.backoffNumber_ = 0;\r\n    this.backoffDelay_ = 0;\r\n    this.timeoutID_ = -1;\r\n    this.handlers = {\r\n        backoff: this.onBackoff_.bind(this)\r\n    };\r\n}","code-length":122,"reference":"A class to hold the state of a backoff operation. Accepts a backoff strategy to generate the backoff delays.","result":"Create a new backoff object.","score":[0.0174,0.0568]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FunctionCall(fn, args, callback) {\r\n    events.EventEmitter.call(this);\r\n    precond.checkIsFunction(fn, 'Expected fn to be a function.');\r\n    precond.checkIsArray(args, 'Expected args to be an array.');\r\n    precond.checkIsFunction(callback, 'Expected callback to be a function.');\r\n    this.function_ = fn;\r\n    this.arguments_ = args;\r\n    this.callback_ = callback;\r\n    this.lastResult_ = [];\r\n    this.numRetries_ = 0;\r\n    this.backoff_ = null;\r\n    this.strategy_ = null;\r\n    this.failAfter_ = -1;\r\n    this.retryPredicate_ = FunctionCall.DEFAULT_RETRY_PREDICATE_;\r\n    this.state_ = FunctionCall.State_.PENDING;\r\n}","code-length":219,"reference":"Wraps a function to be called in a backoff loop.","result":"Create a new FunctionCall object.","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Channel(connection, name, options) {\r\n    options || (options = {});\r\n    options.capped = true;\r\n    options.autoIndexId = true;\r\n    options.size || (options.size = 1024 * 1024 * 5);\r\n    options.strict = false;\r\n    this.options = options;\r\n    this.connection = connection;\r\n    this.closed = false;\r\n    this.listening = null;\r\n    this.name = name || 'mubsub';\r\n    this.create().listen();\r\n    this.setMaxListeners(0);\r\n}","code-length":151,"reference":"Channel constructor.\n\n","result":"Create a channel.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Connection(uri, options) {\r\n    var self = this;\r\n    options || (options = {});\r\n    options.autoReconnect != null || (options.autoReconnect = true);\r\n    if (uri.collection) {\r\n        this.db = uri;\r\n    } else {\r\n        MongoClient.connect(uri, options, function (err, db) {\r\n            if (err) return self.emit('error', err);\r\n            self.db = db;\r\n            self.emit('connect', db);\r\n            db.on('error', function (err) {\r\n                self.emit('error', err);\r\n            });\r\n        });\r\n    }\r\n    this.destroyed = false;\r\n    this.channels = {};\r\n}","code-length":192,"reference":"Connection constructor.\n\n","result":"Create a connection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Draggable(target, options) {\r\n\tif (!(this instanceof Draggable)) {\r\n\t\treturn new Draggable(target, options);\r\n\t}\r\n\tvar that = this;\r\n\t\r\n\tvar instance = draggableCache.get(target);\r\n\tif (instance) {\r\n\t\tinstance.state = 'reset';\r\n\t\t\r\n\t\textend(instance, options);\r\n\t\tinstance.update();\r\n\t\treturn instance;\r\n\t}\r\n\telse {\r\n\t\t\r\n\t\t\r\n\t\tthat.id = getUid();\r\n\t\tthat._ns = '.draggy_' + that.id;\r\n\t\t\r\n\t\tthat.element = target;\r\n\t\tdraggableCache.set(target, that);\r\n\t}\r\n\t\r\n\tdefineState(that, 'state', that.state);\r\n\t\r\n\tthat.currentHandles = [];\r\n\t\r\n\textend(that, options);\r\n\t\r\n\tif (that.handle === undefined) {\r\n\t\tthat.handle = that.element;\r\n\t}\r\n\t\r\n\tif (that.droppable) {\r\n\t\tthat.initDroppable();\r\n\t}\r\n\t\r\n\tthat.update();\r\n\t\r\n\tthat.state = 'idle';\r\n}","code-length":319,"reference":"Make an element draggable.\n\n","result":"Create draggable instances.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ConjunctionMap() {\r\n  let _conjunctions = [];\r\n    this.add = function add(conjunction, value) {\r\n    if (value === undefined) {\r\n      return;\r\n    }\r\n    let map = new LiteralTreeMap();\r\n    conjunction.forEach((conjunct) => {\r\n      map.add(conjunct);\r\n    });\r\n    _conjunctions.push([map.size(), map, value]);\r\n  };\r\n    this.get = function get(conjunction) {\r\n    let result;\r\n    for (let i = 0; i < _conjunctions.length; i += 1) {\r\n      let pair = _conjunctions[i];\r\n      let containMismatch = false;\r\n      if (conjunction.length !== pair[0]) {\r\n        continue;\r\n      }\r\n      for (let j = 0; j < conjunction.length; j += 1) {\r\n        let conjunct = conjunction[j];\r\n        if (!pair[1].contains(conjunct)) {\r\n          containMismatch = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!containMismatch) {\r\n        result = pair[2];\r\n        break;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}","code-length":328,"reference":"Maps conjunctions to a value.\n","result":"Create a new ConjunctionMap.","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortTimables(conjunction, forTime) {\r\n  let earlyConjuncts = [];\r\n  let laterConjuncts = [];\r\n  let dependentTimeVariables = {};\r\n  for (let k = 0; k < conjunction.length; k += 1) {\r\n    let conjunct = conjunction[k];\r\n    if (!(conjunct instanceof Timable)) {\r\n      if (conjunct instanceof Functor\r\n          && comparisonTerms.indexOf(conjunct.getId()) !== -1) {\r\n        conjunct.getVariables()\r\n          .forEach((v) => {\r\n            dependentTimeVariables[v] = true;\r\n          });\r\n      }\r\n      continue;\r\n    }\r\n    let conjunctStartTime = conjunct.getStartTime();\r\n    let conjunctEndTime = conjunct.getEndTime();\r\n    if (conjunctEndTime instanceof Variable) {\r\n      let endTimeName = conjunctEndTime.evaluate();\r\n      if (conjunctStartTime instanceof Value\r\n          || (conjunctStartTime instanceof Variable\r\n            && conjunctStartTime.evaluate() !== endTimeName)) {\r\n        dependentTimeVariables[endTimeName] = true;\r\n      }\r\n    }\r\n  }\r\n  for (let k = 0; k < conjunction.length; k += 1) {\r\n    let conjunct = conjunction[k];\r\n    if (!(conjunct instanceof Timable)) {\r\n      if (laterConjuncts.length > 0) {\r\n        laterConjuncts.push(conjunct);\r\n        continue;\r\n      }\r\n      earlyConjuncts.push(conjunct);\r\n      continue;\r\n    }\r\n    if (!conjunct.isInRange(forTime)) {\r\n      laterConjuncts.push(conjunct);\r\n      continue;\r\n    }\r\n    let conjunctStartTime = conjunct.getStartTime();\r\n    if (conjunctStartTime instanceof Variable) {\r\n      if (dependentTimeVariables[conjunctStartTime.evaluate()] !== undefined) {\r\n        laterConjuncts.push(conjunct);\r\n        continue;\r\n      }\r\n    }\r\n    earlyConjuncts.push(conjunct);\r\n  }\r\n  return [\r\n    earlyConjuncts,\r\n    laterConjuncts\r\n  ];\r\n}","code-length":574,"reference":"Sort timables into set of earlyConjuncts and laterConjuncts\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (programArgs) {\r\n  let _programArgs = programArgs;\r\n  if (programArgs === undefined) {\r\n    _programArgs = [];\r\n  }\r\n  _programArgs = _programArgs.map(arg => new Value(arg));\r\n  let argsList = new List(_programArgs);\r\n  let theta = {\r\n    List: argsList\r\n  };\r\n  return programArgsPredicate.substitute(theta);\r\n}","code-length":118,"reference":"Construct the program arguments predicate\n","result":"Create a programArgsPredicate.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createProgramArgsUpdaterFunc(programArgs) {\r\n  return (program) => {\r\n    let programArgsFact = buildProgramArgsPredicate(programArgs);\r\n    program.getFacts().add(programArgsFact);\r\n    return Promise.resolve(program);\r\n  };\r\n}","code-length":78,"reference":"Create a function to update a given program with the given program arguments\n","result":"Update program arguments.","score":[0.0146,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processCycleObservations() {\r\n    let activeObservations = new LiteralTreeMap();\r\n    if (_observations[_currentTime] === undefined) {\r\n      return activeObservations;\r\n    }\r\n    let cloneProgram = _program.clone();\r\n    cloneProgram.setExecutedActions(activeObservations);\r\n    const nextTime = _currentTime + 1;\r\n    _observations[_currentTime].forEach((ob) => {\r\n      let action = ob.action;\r\n      let tempTreeMap = new LiteralTreeMap();\r\n      tempTreeMap.add(action);\r\n      activeObservations.add(action);\r\n      let postCloneProgram = cloneProgram.clone();\r\n      let postState = postCloneProgram.getState();\r\n      postCloneProgram.setExecutedActions(new LiteralTreeMap());\r\n      updateStateWithFluentActors(\r\n        this,\r\n        tempTreeMap,\r\n        postState\r\n      );\r\n      postCloneProgram.setState(postState);\r\n      if (!checkConstraintSatisfaction.call(this, cloneProgram)\r\n          || !checkConstraintSatisfaction.call(this, postCloneProgram)) {\r\n        activeObservations.remove(action);\r\n        _engineEventManager.notify('warning', {\r\n          type: 'observation.reject',\r\n          message: stringLiterals(\r\n            'engine.rejectObservationWarning',\r\n            action,\r\n            _currentTime,\r\n            nextTime\r\n          )\r\n        });\r\n      }\r\n      if (ob.endTime > nextTime) {\r\n        if (_observations[nextTime] === undefined) {\r\n          _observations[nextTime] = [];\r\n        }\r\n        _observations[nextTime].push(ob);\r\n      }\r\n    });\r\n    return activeObservations;\r\n  }","code-length":447,"reference":"Process observations for the current cycle\n","result":"Process cycle observations .","score":[0.255,0.2586]}
{"code":"\/*is used to<extra_id_0>\r\nfunction actionsSelector(goalTrees) {\r\n    const recursiveActionsSelector = (actionsSoFar, programSoFar, l) => {\r\n      if (l >= goalTrees.length) {\r\n        let actions = new LiteralTreeMap();\r\n        actionsSoFar.forEach((map) => {\r\n          map.forEach((literal) => {\r\n            actions.add(literal);\r\n          });\r\n        });\r\n        return actions;\r\n      }\r\n      let goalTree = goalTrees[l];\r\n      let resultSet = null;\r\n      goalTree.forEachCandidateActions(_currentTime, (candidateActions) => {\r\n        let cloneProgram = programSoFar.clone();\r\n        let cloneExecutedActions = cloneProgram.getExecutedActions();\r\n        candidateActions.forEach((a) => {\r\n          cloneExecutedActions.add(a);\r\n        });\r\n        if (!checkConstraintSatisfaction.call(this, cloneProgram)) {\r\n          return false;\r\n        }\r\n        let clonePostProgram = programSoFar.clone();\r\n        clonePostProgram.setExecutedActions(new LiteralTreeMap());\r\n        let postState = clonePostProgram.getState();\r\n        updateStateWithFluentActors(\r\n          this,\r\n          candidateActions,\r\n          postState\r\n        );\r\n        clonePostProgram.setState(postState);\r\n        if (!checkConstraintSatisfaction.call(this, clonePostProgram)) {\r\n          return false;\r\n        }\r\n        resultSet = recursiveActionsSelector(\r\n          actionsSoFar.concat([candidateActions]),\r\n          cloneProgram,\r\n          l + 1\r\n        );\r\n        return true;\r\n      });\r\n      if (resultSet !== null) {\r\n        return resultSet;\r\n      }\r\n      return recursiveActionsSelector(\r\n        actionsSoFar,\r\n        programSoFar,\r\n        l + 1\r\n      );\r\n    };\r\n    return recursiveActionsSelector([], _program, 0);\r\n  }","code-length":476,"reference":"Select the appropriate set of actions from the given goal trees such that\nconstraints are not violated for the current cycle.\n","result":"Create a new actionsSelector function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction performCycle() {\r\n    _currentTime += 1;\r\n    let selectedAndExecutedActions = new LiteralTreeMap();\r\n    let executedObservations = new LiteralTreeMap();\r\n    let updatedState = _program.getState().clone();\r\n    updateStateWithFluentActors(\r\n      this,\r\n      _program.getExecutedActions(),\r\n      updatedState\r\n    );\r\n    _program.setState(updatedState);\r\n    _nextCycleObservations.forEach((obs) => {\r\n      executedObservations.add(obs);\r\n    });\r\n    _nextCycleActions.forEach((act) => {\r\n      selectedAndExecutedActions.add(act);\r\n    });\r\n    let newFiredGoals = processRules(this, _program, _currentTime, _profiler);\r\n    _goals = _goals.concat(newFiredGoals);\r\n    return evaluateGoalTrees(_currentTime, _goals, _profiler)\r\n      .then((newGoals) => {\r\n        _goals = newGoals;\r\n        _program.setExecutedActions(new LiteralTreeMap());\r\n        _goals.sort(goalTreeSorter(_currentTime));\r\n        return actionsSelector.call(this, _goals);\r\n      })\r\n      .then((nextCycleActions) => {\r\n        _nextCycleActions = new LiteralTreeMap();\r\n        nextCycleActions.forEach((l) => {\r\n          _nextCycleActions.add(l);\r\n        });\r\n        _nextCycleObservations = new LiteralTreeMap();\r\n        let cycleObservations = processCycleObservations.call(this);\r\n        cycleObservations.forEach((observation) => {\r\n          nextCycleActions.add(observation);\r\n          _nextCycleObservations.add(observation);\r\n        });\r\n        _program.setExecutedActions(nextCycleActions);\r\n        _lastCycleActions = selectedAndExecutedActions;\r\n        _lastCycleObservations = executedObservations;\r\n        return Promise.resolve();\r\n      });\r\n  }","code-length":494,"reference":"Performs the state transition for a single cycle.\n","result":"Perform a program.","score":[0.0771,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction applyArgs(func, thisObj, args) {\r\n\t\treturn func.apply(thisObj, Array.prototype.slice.call(args));\r\n\t}","code-length":46,"reference":"converts native arguments object to an array and applies function","result":"Apply arguments to functions.","score":[0.0848,0.1596]}
{"code":"\/*is used to<extra_id_0>\r\nfunction define() {\t\r\n\t\tvar thisFlow = function() {\r\n\t\t\tapplyArgs(thisFlow.exec, thisFlow, arguments);\r\n\t\t}\r\n\t\t\r\n\t\tthisFlow.blocks = arguments;\r\n\t\t\r\n\t\tthisFlow.exec = function() {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar flowState = function() {\r\n\t\t\t\tif (flowState.__frozen) return;\r\n\t\t\t\t\r\n\t\t\t\tif (flowState.__timeoutId) {\r\n\t\t\t\t\tclearTimeout(flowState.__timeoutId);\r\n\t\t\t\t\tdelete flowState.__timeoutId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar blockIdx = flowState.__nextBlockIdx ++;\r\n\t\t\t\tvar block = thisFlow.blocks[blockIdx];\r\n\t\t\t\t\r\n\t\t\t\tif (block === undefined) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tapplyArgs(block, flowState, arguments);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tflowState.__nextBlockIdx = 0;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tflowState.__multiCount = 0;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tflowState.__multiOutputs = [];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tflowState.REWIND = function() {\r\n\t\t\t\tflowState.__nextBlockIdx -= 1;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tflowState.MULTI = function(resultId) {\r\n\t\t\t\tflowState.__multiCount += 1;\r\n\t\t\t\treturn function() {\r\n\t\t\t\t\tflowState.__multiCount -= 1;\r\n\t\t\t\t\tflowState.__multiOutputs.push(arguments);\r\n          if (resultId) {\r\n            var result = arguments.length <= 1 ? arguments[0] : arguments\r\n            flowState.__multiOutputs[resultId] = result;\r\n          }\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (flowState.__multiCount === 0) {\r\n\t\t\t\t\t\tvar multiOutputs = flowState.__multiOutputs;\r\n\t\t\t\t\t\tflowState.__multiOutputs = [];\r\n\t\t\t\t\t\tflowState(multiOutputs);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tflowState.TIMEOUT = function(milliseconds, timeoutCallback) {\r\n\t\t\t\tif (flowState.__timeoutId !== undefined) {\r\n\t\t\t\t\tthrow new Error(\"timeout already set for this flow step\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tflowState.__timeoutId = setTimeout(function() {\r\n\t\t\t\t\tflowState.__frozen = true;\r\n\t\t\t\t\ttimeoutCallback();\r\n\t\t\t\t}, milliseconds);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tapplyArgs(flowState, this, arguments);\r\n\t\t}\r\n\t\t\r\n\t\treturn thisFlow;\r\n\t}","code-length":679,"reference":"defines a flow given any number of functions as arguments","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\tif (flowState.__frozen) return;\r\n\t\t\t\t\r\n\t\t\t\tif (flowState.__timeoutId) {\r\n\t\t\t\t\tclearTimeout(flowState.__timeoutId);\r\n\t\t\t\t\tdelete flowState.__timeoutId;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tvar blockIdx = flowState.__nextBlockIdx ++;\r\n\t\t\t\tvar block = thisFlow.blocks[blockIdx];\r\n\t\t\t\t\r\n\t\t\t\tif (block === undefined) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tapplyArgs(block, flowState, arguments);\r\n\t\t\t\t}\r\n\t\t\t}","code-length":159,"reference":"The flowState is the actual object each step in the flow is applied to. It acts as a callback to the next function. It also maintains the internal state of each execution and acts as a place for users to save values between steps of the flow.","result":"Call the block function .","score":[0.0001,0.0117]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exec() {\r\n\t\tvar flow = typeof exports != 'undefined' ? exports : window.flow;\r\n\t\tapplyArgs(flow.define, flow, arguments)();\r\n\t}","code-length":53,"reference":"defines a flow and evaluates it immediately. The first flow function won't receive any arguments.","result":"Execute the script .","score":[0,0.036]}
{"code":"\/*is used to<extra_id_0>\r\nfunction padStart(str, length, padChar) {\r\n  if (str.length >= length) {\r\n      return str;\r\n  } else {\r\n      return padChar.repeat(length - str.length) + str;\r\n  }\r\n}","code-length":70,"reference":"Pads supplied string with character to fill the desired length.\n\n","result":"Pad strings with padding.","score":[0.0713,0.2719]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SM2Curve(params) {\r\n  if (!(this instanceof SM2Curve)) {\r\n    return new SM2Curve(params);\r\n  }\r\n  elliptic.curve.short.call(this, params);\r\n}","code-length":65,"reference":"The SM2 elliptic curve","result":"Create the curve.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SM2KeyPair(pub, pri) {\r\n  if (!(this instanceof SM2KeyPair)) {\r\n    return new SM2KeyPair(pub, pri);\r\n  }\r\n  this.curve = SM2;\r\n  this.pub = null;\r\n  this.pri = null;\r\n  var validPub = false;\r\n  var validPri = false;\r\n  if (pub != null) {\r\n    if (typeof pub === 'string') {\r\n      this._pubFromString(pub);\r\n    } else if (Array.isArray(pub)) {\r\n      this._pubFromBytes(pub);\r\n    } else if ('x' in pub && pub.x instanceof BN &&\r\n               'y' in pub && pub.y instanceof BN) {\r\n      this.pub = pub;\r\n      validPub = true;\r\n    } else {\r\n      throw 'invalid public key';\r\n    }\r\n  }\r\n  if (pri != null) {\r\n    if (typeof pri === 'string') {\r\n      this.pri = new BN(pri, 16);\r\n    } else if (pri instanceof BN) {\r\n      this.pri = pri;\r\n      validPri = true;\r\n    } else {\r\n      throw 'invalid private key';\r\n    }\r\n    if (this.pub == null) {\r\n      this.pub = SM2.g.mul(this.pri);\r\n    }\r\n  }\r\n  if (!(validPub && validPri) && !this.validate()) {\r\n    throw 'invalid key';\r\n  }\r\n}","code-length":389,"reference":"SM2 public and private key pair","result":"Create a new SM.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction gulpStaticI18n(options) {\r\n  return through.obj(function(target, encoding, cb) {\r\n    var stream = this;\r\n    var build = new StaticI18n(target, options, stream);\r\n    build.translate(cb);\r\n  });\r\n}","code-length":78,"reference":"plugin wrapper so streams can pipe to it.","result":"Build the static i.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (obj, type, fn, scope) {\r\n                scope = scope || obj;\r\n                var wrappedFn = function (e) { fn.call(scope, e); };\r\n                obj.addEventListener(type, wrappedFn, false);\r\n                cache.push([obj, type, fn, wrappedFn]);\r\n            }","code-length":86,"reference":"Add an event to an object and optionally adjust it's scope\n\n","result":"Wrap events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (obj, type, fn) {\r\n                var wrappedFn, item, len = cache.length, i;\r\n                for (i = 0; i < len; i++) {\r\n                    item = cache[i];\r\n                    if (item[0] === obj && item[1] === type && item[2] === fn) {\r\n                        wrappedFn = item[3];\r\n                        if (wrappedFn) {\r\n                            obj.removeEventListener(type, wrappedFn, false);\r\n                            cache = cache.slice(i);\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            }","code-length":154,"reference":"Remove an event from an object\n\n","result":"Remove a listener from the cache.","score":[0.2296,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction View(model) {\r\n    var wrapper;\r\n    this.el = wrapper = document.createElement('div');\r\n    this.model = model;\r\n    this.isShowing = false;\r\n    wrapper.id = config.name;\r\n    config.parent.appendChild(wrapper);\r\n    css.inject(document.getElementsByTagName('head')[0], config.styles);\r\n    events.add(document, ('ontouchstart' in window) ? 'touchstart' : 'click', viewevents.click, this);\r\n    events.add(document, 'keyup', viewevents.keyup, this);\r\n    events.add(document, 'readystatechange', viewevents.readystatechange, this);\r\n    events.add(window, 'pageshow', viewevents.pageshow, this);\r\n}","code-length":205,"reference":"Creates a view model.\n\n","result":"Create a view.","score":[0.2925,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Product(data) {\r\n    data.quantity = parser.quantity(data.quantity);\r\n    data.amount = parser.amount(data.amount);\r\n    data.href = parser.href(data.href);\r\n    this._data = data;\r\n    this._options = null;\r\n    this._discount = null;\r\n    this._amount = null;\r\n    this._total = null;\r\n    Pubsub.call(this);\r\n}","code-length":118,"reference":"Creates a new product.\n\n","result":"Create a new product.","score":[0.658,0.9922]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Cart(name, duration) {\r\n    var data, items, settings, len, i;\r\n    this._items = [];\r\n    this._settings = { bn: constants.BN };\r\n    Pubsub.call(this);\r\n    Storage.call(this, name, duration);\r\n    if ((data = this.load())) {\r\n        items = data.items;\r\n        settings = data.settings;\r\n        if (settings) {\r\n            this._settings = settings;\r\n        }\r\n        if (items) {\r\n            for (i = 0, len = items.length; i < len; i++) {\r\n                this.add(items[i]);\r\n            }\r\n        }\r\n    }\r\n}","code-length":186,"reference":"Renders the Mini Cart to the page's DOM.\n\n","result":"Store cart data.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onRejected(error) {\r\n            attemts_left -= 1;\r\n            if (attemts_left < 1) {\r\n                throw error;\r\n            }\r\n            console.log(\"A retried call failed. Retrying \" + attemts_left + \" more time(s).\");\r\n            var fullArguments = [attemts_left, promiseFunction].concat(promiseFunctionArguments);\r\n            return module.exports.retryPromise.apply(undefined, fullArguments);\r\n        }","code-length":121,"reference":"on rejection either retry, or throw the error","result":"Catch rejected promises.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixDate(type, value, hash) {\r\n  if (type !== \"commit\" && type !== \"tag\") return;\r\n  var clone = JSON.parse(JSON.stringify(value));\r\n  for (var x = 0; x < 3; x++) {\r\n    for (var i = -720; i < 720; i += 30) {\r\n      if (type === \"commit\") {\r\n        clone.author.date.offset = i;\r\n        clone.committer.date.offset = i;\r\n      }\r\n      else if (type === \"tag\") {\r\n        clone.tagger.date.offset = i;\r\n      }\r\n      if (hash !== hashAs(type, clone)) continue;\r\n      value.message = clone.message;\r\n      if (type === \"commit\") {\r\n        value.author.date.offset = clone.author.date.offset;\r\n        value.committer.date.offset = clone.committer.date.offset;\r\n      }\r\n      else if (type === \"tag\") {\r\n        value.tagger.date.offset = clone.tagger.date.offset;\r\n      }\r\n      return true;\r\n    }\r\n    clone.message += \"\\n\";\r\n  }\r\n  return false;\r\n}","code-length":317,"reference":"GitHub has a nasty habit of stripping whitespace from messages and losing the timezone.  This information is required to make our hashes match up, so we guess it by mutating the value till the hash matches. If we're unable to match, we will just force the hash when saving to the cache.","result":"Fix the date in the commit message.","score":[0.0003,0.0316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n            var $this = this;\r\n            $this.removeData();\r\n            $(document)\r\n                .unbind('mousemove.nstSlider')\r\n                .unbind('mouseup.nstSlider');\r\n            $this.parent()\r\n                .unbind('mousedown.nstSlider')\r\n                .unbind('touchstart.nstSlider')\r\n                .unbind('touchmove.nstSlider')\r\n                .unbind('touchend.nstSlider');\r\n                        $this.unbind('keydown.nstSlider')\r\n                .unbind('keyup.nstSlider');\r\n            return $this;\r\n        }","code-length":166,"reference":"for test, removed by Grunt","result":"Remove the slider from the DOM.","score":[0,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n            var $this = this;\r\n            var lastStepHistogram = $this.data('last_step_histogram');\r\n            if (typeof lastStepHistogram !== 'undefined') {\r\n                methods.set_step_histogram.call($this, lastStepHistogram); \r\n            }\r\n            _methods.set_position_from_val.call($this, \r\n                methods.get_current_min_value.call($this),\r\n                methods.get_current_max_value.call($this)\r\n            );\r\n            var highlightRangeMin = $this.data('highlightedRangeMin');\r\n            if (typeof highlightRangeMin === 'number') {\r\n                var highlightRangeMax = $this.data('highlightedRangeMax');\r\n                methods.highlight_range.call($this, highlightRangeMin, highlightRangeMax);\r\n            }\r\n            _methods.notify_changed_implicit.call($this, 'refresh');\r\n            return $this;\r\n        }","code-length":238,"reference":"just call set_position on the current values","result":"Set position from the current.","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GoogleLogin() {\r\n    if (!(this instanceof GoogleLogin)) {\r\n        return new GoogleLogin();\r\n    }\r\n    const self = this;\r\n        const GOOGLE_LOGIN_ANDROID_ID = '9774d56d682e549c';\r\n    const GOOGLE_LOGIN_SERVICE =\r\n        'audience:server:client_id:848232511240-7so421jotr2609rmqakceuu1luuq0ptb.apps.googleusercontent.com';\r\n    const GOOGLE_LOGIN_APP = 'com.nianticlabs.pokemongo';\r\n    const GOOGLE_LOGIN_CLIENT_SIG = '321187995bc7cdc2b5fc91b11a96e2baa8602c62';\r\n        this.setProxy = function(proxy) {\r\n        google.setProxy(proxy);\r\n    };\r\n        this.login = function(username, password) {\r\n        return self.getMasterToken(username, password)\r\n            .then(loginData => self.getToken(username, loginData))\r\n            .then(authData => authData.Auth);\r\n    };\r\n        this.loginWithToken = function(username, token) {\r\n        var loginData = {\r\n            androidId: GOOGLE_LOGIN_ANDROID_ID,\r\n            masterToken: token\r\n        };\r\n        return self.getToken(username, loginData).then(authData => authData.Auth);\r\n    };\r\n        this.getMasterToken = function(username, password) {\r\n        return new Promise((resolve, reject) => {\r\n            google.login(username, password, GOOGLE_LOGIN_ANDROID_ID, (err, data) => {\r\n                if (err) {\r\n                    if (err.response.statusCode === 403) {\r\n                        reject(Error(\r\n                            'Received code 403 from Google login. This could be because your account has ' +\r\n                            '2-Step-Verification enabled. If that is the case, you need to generate an ' +\r\n                            'App Password and use that instead of your regular password: ' +\r\n                            'https:\r\n                        ));\r\n                    } else {\r\n                        reject(Error(err.response.statusCode + ': ' + err.response.statusMessage));\r\n                    }\r\n                    return;\r\n                }\r\n                resolve(data);\r\n            });\r\n        });\r\n    };\r\n        this.getToken = function(username, loginData) {\r\n        return new Promise((resolve, reject) => {\r\n            google.oauth(username, loginData.masterToken, loginData.androidId,\r\n                GOOGLE_LOGIN_SERVICE, GOOGLE_LOGIN_APP, GOOGLE_LOGIN_CLIENT_SIG, (err, data) => {\r\n                    if (err) {\r\n                        reject(Error(err.response.statusCode + ': ' + err.response.statusMessage));\r\n                        return;\r\n                    }\r\n                    resolve(data);\r\n                });\r\n        });\r\n    };\r\n}","code-length":753,"reference":"Google login client.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(lat, lng, radius, level) {\r\n        if (typeof radius === 'undefined') radius = 3;\r\n        if (typeof level === 'undefined') level = 15;\r\n                var origin = s2.S2Cell.FromLatLng({\r\n            lat: lat,\r\n            lng: lng\r\n        }, level);\r\n        var cells = [];\r\n        cells.push(origin.toHilbertQuadkey());\r\n        for (var i = 1; i < radius; i++) {\r\n            cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0], origin.ij[1] - i], origin.level)\r\n                .toHilbertQuadkey());\r\n            cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0], origin.ij[1] + i], origin.level)\r\n                .toHilbertQuadkey());\r\n            cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0] - i, origin.ij[1]], origin.level)\r\n                .toHilbertQuadkey());\r\n            cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0] + i, origin.ij[1]], origin.level)\r\n                .toHilbertQuadkey());\r\n            for (var j = 1; j < radius; j++) {\r\n                cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0] - j, origin.ij[1] - i], origin.level)\r\n                    .toHilbertQuadkey());\r\n                cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0] + j, origin.ij[1] - i], origin.level)\r\n                    .toHilbertQuadkey());\r\n                cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0] - j, origin.ij[1] + i], origin.level)\r\n                    .toHilbertQuadkey());\r\n                cells.push(s2.S2Cell.FromFaceIJ(origin.face, [origin.ij[0] + j, origin.ij[1] + i], origin.level)\r\n                    .toHilbertQuadkey());\r\n            }\r\n        }\r\n                return cells.map(s2.toId);\r\n    }","code-length":616,"reference":"Provides cell IDs of nearby cells based on the given coords and radius\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(enumObj, val) {\r\n        for (var key of Object.keys(enumObj)) {\r\n            if (enumObj[key] === val) {\r\n                return key.split('_')\r\n                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n                    .join(' ');\r\n            }\r\n        }\r\n        return null;\r\n    }","code-length":110,"reference":"Utility method that finds the name of the key for a given enum value and makes it\nlook a little nicer.\n","result":"Generate the name of the enum object.","score":[0.0723,0.2469]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(object) {\r\n        if (!object || typeof object !== 'object') return object;\r\n        if (object instanceof ByteBuffer) return object;\r\n        if (Long.isLong(object)) {\r\n            return object.lessThanOrEqual(Number.MAX_SAFE_INTEGER)\r\n                && object.greaterThanOrEqual(Number.MIN_SAFE_INTEGER)\r\n                ? object.toNumber() : object.toString();\r\n        }\r\n        for (var i in object) {\r\n            if (object.hasOwnProperty(i)) {\r\n                if (Long.isLong(object[i])) {\r\n                    object[i] = object[i].lessThanOrEqual(Number.MAX_SAFE_INTEGER) && object[i].greaterThanOrEqual(\r\n                        Number.MIN_SAFE_INTEGER) ? object[i].toNumber() : object[i].toString();\r\n                } else if (typeof object[i] === 'object') {\r\n                    object[i] = this.convertLongs(object[i]);\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }","code-length":265,"reference":"Utility method to convert all Long.js objects to integers or strings\n","result":"Convert longs to numbers.","score":[0.0555,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Random(seed) {\r\n    this.multiplier = 16807;\r\n    this.modulus = 0x7fffffff;\r\n    this.seed = seed;\r\n    this.mq = Math.floor(this.modulus \/ this.multiplier);\r\n    this.mr = this.modulus % this.multiplier;\r\n}","code-length":89,"reference":"Lehmer random module used by the app to generate request ids","result":"Generate random numbers.","score":[0.0284,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prettyDate(time){\r\r\n\t \r\r\n\tvar diff = (((new Date()).getTime() - time) \/ 1000),\r\r\n\t\t\tday_diff = Math.floor(diff \/ 86400);\r\r\n\t\t\t\r\r\n\tif ( isNaN(day_diff) || day_diff < 0 || day_diff >= 31 )\r\r\n\t\treturn;\r\r\n\t\t\t\r\r\n\treturn day_diff == 0 && (\r\r\n\t\t\tdiff < 60 && \"just now\" ||\r\r\n\t\t\tdiff < 120 && \"1 minute ago\" ||\r\r\n\t\t\tdiff < 3600 && Math.floor( diff \/ 60 ) + \" minutes ago\" ||\r\r\n\t\t\tdiff < 7200 && \"1 hour ago\" ||\r\r\n\t\t\tdiff < 86400 && Math.floor( diff \/ 3600 ) + \" hours ago\") ||\r\r\n\t\tday_diff == 1 && \"Yesterday\" ||\r\r\n\t\tday_diff < 7 && day_diff + \" days ago\" ||\r\r\n\t\tday_diff < 31 && Math.ceil( day_diff \/ 7 ) + \" weeks ago\";\r\r\n}","code-length":271,"reference":"Takes an ISO time and returns a string representing how long ago the date represents.","result":"Format date strings.","score":[0.0075,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction LoggerFactory(options) {\r\n      options = options || {\r\n        prefix: true\r\n      };\r\n      if (\r\n        typeof console !== 'object' ||\r\n        typeof console.log !== 'function' ||\r\n        typeof console.log.bind !== 'function'\r\n      ) {\r\n        return function noop() {};\r\n      }\r\n      return function log() {\r\n        var args = Array.prototype.slice.call(arguments);\r\n        if (io.sails.environment === 'production') return;\r\n        var PREFIX = '';\r\n        if (options.prefix) {\r\n          args.unshift(PREFIX);\r\n        }\r\n        console.log\r\n          .bind(console)\r\n          .apply(this, args);\r\n      };\r\n    }","code-length":197,"reference":"A little logger for this library to use internally.\nBasically just a wrapper around `console.log` with\nsupport for feature-detection.\n\n","result":"Create a logger.","score":[0.002,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runRequestQueue (socket) {\r\n      var queue = socket.requestQueue;\r\n      if (!queue) return;\r\n      for (var i in queue) {\r\nwnProperty.call(queue, i);\r\n        if (isSafeToDereference) {\r\n          var requestArgs = queue[i];\r\n          socket.request.apply(socket, requestArgs);\r\n        }\r\n      }\r\n      socket.requestQueue = null;\r\n    }","code-length":120,"reference":"What is the `requestQueue`?\n\nThe request queue is used to simplify app-level connection logic--\ni.e. so you don't have to wait for the socket to be connected\nto start trying to  synchronize data.\n\n","result":"Run the request queue.","score":[0.0003,0.0332]}
{"code":"\/*is used to<extra_id_0>\r\nfunction jsonp(opts, cb) {\r\n      opts = opts || {};\r\n      if (typeof window === 'undefined') {\r\n        return cb();\r\n      }\r\n      var scriptEl = document.createElement('script');\r\n      window._sailsIoJSConnect = function(response) {\r\n{\r\n            scriptEl.parentNode.removeChild(scriptEl);\r\n        }\r\n        cb(response);\r\n      };\r\n      scriptEl.src = opts.url;\r\n      document.getElementsByTagName('head')[0].appendChild(scriptEl);\r\n    }","code-length":148,"reference":"Send a JSONP request.\n\n","result":"Jsonpify the response.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateParameterValue (parameter, type, format, value) {\r\n  if (type === 'integer') {\r\n    const parsedValue = Number.parseInt(value)\r\n    if (_.isNaN(parsedValue)) {\r\n      throw new Error(`Invalid \"${parameter}\" value: failed to parse \"${value}\" as integer`)\r\n    }\r\n    return parsedValue\r\n  } else if (type === 'number') {\r\n    const parsedValue = Number.parseFloat(value)\r\n    if (_.isNaN(parsedValue)) {\r\n      throw new Error(`Invalid \"${parameter}\" value: failed to parse \"${value}\" as number`)\r\n    }\r\n    return Number.isInteger(parsedValue) ? Number.parseInt(value) : parsedValue\r\n  } else if (type === 'string' && format) {\r\n    if (format === 'date-time' && !moment(value, moment.ISO_8601).isValid()) {\r\n      throw new Error(`Invalid \"${parameter}\" value: failed to parse \"${value}\" as date-time string`)\r\n    } else if (format === 'date' && !moment(value, 'YYYY-MM-DD').isValid()) {\r\n      throw new Error(`Invalid \"${parameter}\" value: failed to parse \"${value}\" as date string`)\r\n    }\r\n    return value\r\n  }\r\n  return value\r\n}","code-length":325,"reference":"Validates parameter value","result":"Validate parameter values.","score":[0.4082,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parameterDeclarationToYargs (yargs, parameter, declaration) {\r\n  const optionName = _.kebabCase(parameter)\r\n  let option = {}\r\n  if (declaration.description) {\r\n    option.describe = declaration.description\r\n  }\r\n  if (declaration.type) {\r\n    if (declaration.type === 'integer') {\r\n      option.type = 'number'\r\n    } else {\r\n      option.type = declaration.type\r\n    }\r\n  }\r\n  if (declaration.enum) {\r\n    option.choices = declaration.enum\r\n  }\r\n  if (declaration.default) {\r\n    option.default = declaration.default\r\n  }\r\n  if (declaration.required) {\r\n    option.demandOption = declaration.required\r\n  }\r\n  if (declaration.conflicts) {\r\n    option.conflicts = declaration.conflicts\r\n  }\r\n  yargs.option(optionName, option)\r\n  yargs.coerce(optionName, (value) => {\r\n    if (declaration.type === 'array') {\r\n      return _.map(value, (value) => {\r\n        return validateParameterValue(`${optionName}[]`, declaration.item, declaration.format, value)\r\n      })\r\n    }\r\n    return validateParameterValue(optionName, declaration.type, declaration.format, value)\r\n  })\r\n}","code-length":345,"reference":"Converts parameter declaration to yargs","result":"Convert the parameter declaration to yargs.","score":[0.3976,0.7353]}
{"code":"\/*is used to<extra_id_0>\r\nfunction configDeclarationToYargs (yargs, configDeclaration) {\r\n  _.forOwn(configDeclaration, (parameter, parameterName) => {\r\n    parameterDeclarationToYargs(yargs, parameterName, parameter)\r\n  })\r\n  return yargs\r\n}","code-length":70,"reference":"Converts configuration declaration to yargs options\n\n","result":"Generate the configDeclaration.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction NGramParser(theNgramList, theByteMap) {\r\n  var N_GRAM_MASK = 0xFFFFFF;\r\n  this.byteIndex = 0;\r\n  this.ngram = 0;\r\n  this.ngramList = theNgramList;\r\n  this.byteMap = theByteMap;\r\n  this.ngramCount = 0;\r\n  this.hitCount = 0;\r\n  this.spaceChar;\r\n    this.search = function(table, value) {\r\n    var index = 0;\r\n    if (table[index + 32] <= value) index += 32;\r\n    if (table[index + 16] <= value) index += 16;\r\n    if (table[index + 8]  <= value) index += 8;\r\n    if (table[index + 4]  <= value) index += 4;\r\n    if (table[index + 2]  <= value) index += 2;\r\n    if (table[index + 1]  <= value) index += 1;\r\n    if (table[index]      > value)  index -= 1;\r\n    if (index < 0 || table[index] != value)\r\n      return -1;\r\n    return index;\r\n  };\r\n  this.lookup = function(thisNgram) {\r\n    this.ngramCount += 1;\r\n    if (this.search(this.ngramList, thisNgram) >= 0) {\r\n      this.hitCount += 1;\r\n    }\r\n  };\r\n  this.addByte = function(b) {\r\n    this.ngram = ((this.ngram << 8) + (b & 0xFF)) & N_GRAM_MASK;\r\n    this.lookup(this.ngram);\r\n  }\r\n  this.nextByte = function(det) {\r\n    if (this.byteIndex >= det.fInputLen)\r\n      return -1;\r\n    return det.fInputBytes[this.byteIndex++] & 0xFF;\r\n  }\r\n  this.parse = function(det, spaceCh) {\r\n    var b, ignoreSpace = false;\r\n    this.spaceChar = spaceCh;\r\n    while ((b = this.nextByte(det)) >= 0) {\r\n      var mb = this.byteMap[b];\r\n      if (mb != 0) {\r\n        if (!(mb == this.spaceChar && ignoreSpace)) {\r\n          this.addByte(mb);\r\n        }\r\n        ignoreSpace = (mb == this.spaceChar);\r\n      }\r\n    }\r\n    this.addByte(this.spaceChar);\r\n    var rawPercent = this.hitCount \/ this.ngramCount;\r\n    if (rawPercent > 0.33)\r\n      return 98;\r\n    return Math.floor(rawPercent * 300.0);\r\n  };\r\n}","code-length":690,"reference":"simple, language statistics are used to do the matching.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction collectScenariosFromElement(parentElement) {\r\n      var scenarios = [];\r\n      var templates = [];\r\n      var elements = parentElement.children();\r\n      var i        = 0;\r\n      angular.forEach(elements, function(el) {\r\n        var elem = angular.element(el);\r\n        if (!elem.attr('src') || !elem.attr('src').match(\/.html$\/)) {\r\n          templates[i] = elem;\r\n          scenarios[i] = { media: elem.attr('media'), templ: i };\r\n        } else {\r\n          scenarios[i] = { media: elem.attr('media'), src: elem.attr('src') };\r\n        }\r\n        i++;\r\n      });\r\n      return {\r\n        scenarios: scenarios,\r\n        templates: templates\r\n      };\r\n    }","code-length":214,"reference":"Collects a scenario object and templates from element","result":"Collect scenarios from the parent element.","score":[0.1383,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nfunction changed (done) {\r\n  const files = [].slice.call(arguments);\r\n  if (typeof files[files.length - 1] === 'function') done = files.pop();\r\n  done = typeof done === 'function' ? done : () => {};\r\n  debug('Notifying %d servers - Files: ', servers.length, files);\r\n  servers.forEach(srv => {\r\n    const params = { params: { files: files } };\r\n    srv && srv.changed(params);\r\n  });\r\n  done();\r\n}","code-length":141,"reference":"Changed helper, helps with notifying the server of a file change","result":"Notify servers of changes.","score":[0.0555,0.2481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(children, element) {\r\n        this.portalNode = document.createElement('div');\r\n        (element || document.body).appendChild(this.portalNode);\r\n        ReactDOM.render(children, this.portalNode);\r\n    }","code-length":68,"reference":"Creates a new detatched DOM node to render child components within.\n","result":"Create a new PortalNode.","score":[0.0785,0.2859]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n                var close = typeof this.portalConfirmOnCloseMessage === 'string' ? confirm(this.portalConfirmOnCloseMessage) : true;\r\n                if (this.portalNode && this.portalNode.parentNode && close) {\r\n            ReactDOM.unmountComponentAtNode(this.portalNode);\r\n            this.portalNode.parentNode.removeChild(this.portalNode);\r\n            this.portalNode = null;\r\n        }\r\n    }","code-length":119,"reference":"Unmounts the components rendered in the portal and removes the associated DOM node.","result":"Close the portal.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data) {\r\n        if (this.filterValue) {\r\n            data = this.quickFilterData(data, this.filterValue);\r\n        }\r\n        if (this.advancedFilters) {\r\n            data = this.advancedFilterData(data, this.advancedFilters);\r\n        }\r\n        this.dataCount = data.length;\r\n        return data;\r\n    }","code-length":102,"reference":"Triggers quick filtering and advanced filtering of the data if either of those properties have been set.\n","result":"Create a new data object.","score":[0.0218,0.0316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(id, definition, dataFormatter) {\r\n        this.collection[id] = new Table(id, definition, dataFormatter);\r\n        return this.collection[id];\r\n    }","code-length":53,"reference":"Creates an instance of Table.\n","result":"Create a new table.","score":[0,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(payload) {\r\n        var action = payload.action;\r\n        if (!this.shouldHandleAction(action.component)) {\r\n            return;\r\n        }\r\n        switch (action.actionType) {\r\n            case ActionTypes.REQUEST_DATA:\r\n                this.handleRequestDataAction(action);\r\n                break;\r\n            case ActionTypes.TABLE_SORT:\r\n                this.collection[action.id].sortData(action.data.colIndex, action.data.direction);\r\n                this.emitChange(action.id);\r\n                break;\r\n            case ActionTypes.FILTER:\r\n                this.collection[action.id].setFilterValue(action.data.value);\r\n                this.emitChange(action.id);\r\n                break;\r\n            case ActionTypes.ADVANCED_FILTER:\r\n                this.collection[action.id].setAdvancedFilters(action.data.advancedFilters);\r\n                this.emitChange(action.id);\r\n                break;\r\n            case ActionTypes.PAGINATE:\r\n                this.collection[action.id].paginate(action.data.direction);\r\n                this.emitChange(action.id);\r\n                break;\r\n            case ActionTypes.TOGGLE_BULK_SELECT:\r\n                this.collection[action.id].updateBulkSelection(action.data.deselect);\r\n                this.emitChange(action.id);\r\n                break;\r\n            case ActionTypes.TOGGLE_ROW_SELECT:\r\n                this.collection[action.id].updateRowSelection(action.data.rowIndex);\r\n                this.emitChange(action.id);\r\n                break;\r\n            case ActionTypes.DESTROY_INSTANCE:\r\n                this.destroyInstance(action.id);\r\n                break;\r\n        }\r\n    }","code-length":438,"reference":"Handles all events sent from the dispatcher. Filters out to only those sent via the Table\n","result":"Handle actions.","score":[0,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(nextProps) {\r\n            if (this.props.filters !== nextProps.filters && JSON.stringify(this.props.filters) !== JSON.stringify(nextProps.filters)) {\r\n                setTimeout(function() {\r\n                    this.requestData();\r\n                }.bind(this), 0);\r\n            }\r\n        }","code-length":87,"reference":"Requests data for a component when the filter property changes. When comparing filters we do a direct\ncomparison in addition to a JSON stringify comparison. This fixes issues where the filters object is a new literal\nobject every time, but isn't actually changing. Using a JSON stringify has the downside of causing requestData to\nbe called if the objects are in a different order, but that is pretty unlikely to happen. The setTimeout insures that\nthe currently dispatched action has completed the dispatching process before the request data\naction is kicked off.\n","result":"Trigger the data request.","score":[0.0,0.012]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store) {\r\n        return {\r\n                        componentDidMount: function() {\r\n                store.on('change:' + this.props.componentId, this.onDataReceived);\r\n                store.on('fail:' + this.props.componentId, this.onError);\r\n            },\r\n                        componentWillUnmount: function() {\r\n                store.removeListener('change:' + this.props.componentId, this.onDataReceived);\r\n                store.removeListener('fail:' + this.props.componentId, this.onError);\r\n            }\r\n        };\r\n    }","code-length":149,"reference":"Used to add and remove the listeners required when requesting data from the server.\n","result":"Create a component with store.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n                store.on('change:' + this.props.componentId, this.onDataReceived);\r\n                store.on('fail:' + this.props.componentId, this.onError);\r\n            }","code-length":61,"reference":"Adds the listeners required when requesting data from the server.","result":"Test the data.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n                store.removeListener('change:' + this.props.componentId, this.onDataReceived);\r\n                store.removeListener('fail:' + this.props.componentId, this.onError);\r\n            }","code-length":63,"reference":"Removes the listeners required when requesting data from the server.","result":"Create a component .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(id, definition, dataFormatter, filters) {\r\n        AppDispatcher.dispatchAction({\r\n            actionType: this.actionTypes.REQUEST_DATA,\r\n            component: 'Table',\r\n            id: id,\r\n            data: {\r\n                definition: definition,\r\n                dataFormatter: dataFormatter,\r\n                filters: filters\r\n            }\r\n        });\r\n    }","code-length":100,"reference":"Action for populating table data. Used both for initial and subsequent loads.\n","result":"Create a table.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(id, value) {\r\n        AppDispatcher.dispatchAction({\r\n            actionType: this.actionTypes.FILTER,\r\n            component: 'Table',\r\n            id: id,\r\n            data: {\r\n                value: value\r\n            }\r\n        });\r\n    }","code-length":77,"reference":"Filters out table data that does not match the filter value for table cols that have quickFilter set to true.\n","result":"Filter the table.","score":[0.0014,0.0546]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(id, direction) {\r\n        AppDispatcher.dispatchAction({\r\n            actionType: this.actionTypes.PAGINATE,\r\n            component: 'Table',\r\n            id: id,\r\n            data: {\r\n                direction: direction\r\n            }\r\n        });\r\n    }","code-length":79,"reference":"Moves the cursor forwards or backwards through paginated data.\n","result":"Paginate the table.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(id, deselect) {\r\n        AppDispatcher.dispatchAction({\r\n            actionType: this.actionTypes.TOGGLE_BULK_SELECT,\r\n            component: 'Table',\r\n            id: id,\r\n            data: {\r\n                deselect: deselect\r\n            }\r\n        });\r\n    }","code-length":88,"reference":"Bulk toggle selection for table rows.\n","result":"Toggle the selection.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(id, rowIndex) {\r\n        AppDispatcher.dispatchAction({\r\n            actionType: this.actionTypes.TOGGLE_ROW_SELECT,\r\n            component: 'Table',\r\n            id: id,\r\n            data: {\r\n                rowIndex: rowIndex\r\n            }\r\n        });\r\n    }","code-length":83,"reference":"Selects or deselects a table row.\n","result":"Toggle row selection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractValue(attr, node) {\r\n                    if (attr === 'translate') {\r\n                        return node.html() || getAttr(attr) || '';\r\n                    }\r\n                    return getAttr(attr) || node.html() || '';\r\n                }","code-length":67,"reference":"Extract the value, default translate filter behavior\nelse if it is an attribute we need to get its value first\n","result":"Extract value from attributes.","score":[0.007,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, callback, thisArg) {\r\n    return obj.map ? obj.map.call(obj, callback, thisArg) : map.call(obj, callback, thisArg);\r\n  }","code-length":53,"reference":"Calls the map function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-map method when necessary.\n\n","result":"Create a function to map the object.","score":[0.0474,0.1183]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, callback, thisArg) {\r\n    return obj.filter ? obj.filter.call(obj, callback, thisArg) : filter.call(obj, callback, thisArg);\r\n  }","code-length":53,"reference":"Calls the filter function on the passed object with a specified callback. This\nuses `Ember.ArrayPolyfill`'s-filter method when necessary.\n\n","result":"Filter functions.","score":[0,0.0305]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, elements) {\r\n    return elements === undefined ? [] : utils.map(elements, function(item) {\r\n      return utils.indexOf(obj, item);\r\n    });\r\n  }","code-length":57,"reference":"Returns an array of indexes of the first occurrences of the passed elements\non the passed object.\n\n```javascript\nvar array = [1, 2, 3, 4, 5];\nEmber.EnumerableUtils.indexesOf(array, [2, 5]); \/\/ [1, 4]\n\nvar fubar = \"Fubarr\";\nEmber.EnumerableUtils.indexesOf(fubar, ['b', 'r']); \/\/ [2, 4]\n```\n\n","result":"Create a new object.","score":[0.0,0.0128]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array, item) {\r\n    var index = utils.indexOf(array, item);\r\n    if (index === -1) { array.push(item); }\r\n  }","code-length":52,"reference":"Adds an object to an array. If the array already includes the object this\nmethod has no effect.\n\n","result":"Create a new array.","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array, idx, amt, objects) {\r\n    if (array.replace) {\r\n      return array.replace(idx, amt, objects);\r\n    } else {\r\n      return utils._replace(array, idx, amt, objects);\r\n    }\r\n  }","code-length":74,"reference":"Replaces objects in an array with the passed objects.\n\n```javascript\nvar array = [1,2,3];\nEmber.EnumerableUtils.replace(array, 1, 2, [4, 5]); \/\/ [1, 4, 5]\n\nvar array = [1,2,3];\nEmber.EnumerableUtils.replace(array, 1, 1, [4, 5]); \/\/ [1, 4, 5, 3]\n\nvar array = [1,2,3];\nEmber.EnumerableUtils.replace(array, 10, 1, [4, 5]); \/\/ [1, 2, 3, 4, 5]\n```\n\n","result":"Replace arrays.","score":[0,0.0104]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array1, array2) {\r\n    var intersection = [];\r\n    utils.forEach(array1, function(element) {\r\n      if (utils.indexOf(array2, element) >= 0) {\r\n        intersection.push(element);\r\n      }\r\n    });\r\n    return intersection;\r\n  }","code-length":87,"reference":"Calculates the intersection of two arrays. This method returns a new array\nfilled with the records that the two passed arrays share with each other.\nIf there is no intersection, an empty array will be returned.\n\n```javascript\nvar array1 = [1, 2, 3, 4, 5];\nvar array2 = [1, 3, 5, 6, 7];\n\nEmber.EnumerableUtils.intersection(array1, array2); \/\/ [1, 3, 5]\n\nvar array1 = [1, 2, 3];\nvar array2 = [4, 5, 6];\n\nEmber.EnumerableUtils.intersection(array1, array2); \/\/ []\n```\n\n","result":"Test intersection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeListener(obj, eventName, target, method) {\r\n  Ember.assert(\"You must pass at least an object and event name to Ember.removeListener\", !!obj && !!eventName);\r\n  if (!method && 'function' === typeof target) {\r\n    method = target;\r\n    target = null;\r\n  }\r\n  function _removeListener(target, method) {\r\n    var actions = actionsFor(obj, eventName),\r\n        actionIndex = indexOf(actions, target, method);\r\n    if (actionIndex === -1) { return; }\r\n    actions.splice(actionIndex, 3);\r\n    if ('function' === typeof obj.didRemoveListener) {\r\n      obj.didRemoveListener(eventName, target, method);\r\n    }\r\n  }\r\n  if (method) {\r\n    _removeListener(target, method);\r\n  } else {\r\n    var meta = obj[META_KEY],\r\n        actions = meta && meta.listeners && meta.listeners[eventName];\r\n    if (!actions) { return; }\r\n    for (var i = actions.length - 3; i >= 0; i -= 3) {\r\n      _removeListener(actions[i], actions[i+1]);\r\n    }\r\n  }\r\n}","code-length":310,"reference":"Remove an event listener\n\nArguments should match those passed to `Ember.addListener`.\n\n","result":"Remove listeners from an object.","score":[0.0861,0.1442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction suspendListener(obj, eventName, target, method, callback) {\r\n  if (!method && 'function' === typeof target) {\r\n    method = target;\r\n    target = null;\r\n  }\r\n  var actions = actionsFor(obj, eventName),\r\n      actionIndex = indexOf(actions, target, method);\r\n  if (actionIndex !== -1) {\r\n    actions[actionIndex+2] |= SUSPENDED;\r\n  }\r\n  function tryable()   { return callback.call(target); }\r\n  function finalizer() { if (actionIndex !== -1) { actions[actionIndex+2] &= ~SUSPENDED; } }\r\n  return Ember.tryFinally(tryable, finalizer);\r\n}","code-length":182,"reference":"Suspend listener during callback.\n\nThis should only be used by the target of the event listener\nwhen it is taking an action that would cause the event, e.g.\nan object might suspend its property change listener while it is\nsetting that property.\n\n","result":"Suspend a listener.","score":[0.0,0.0131]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dependentKeysDidChange(obj, depKey, meta) {\r\n  if (obj.isDestroying) { return; }\r\n  var seen = DID_SEEN, top = !seen;\r\n  if (top) { seen = DID_SEEN = {}; }\r\n  iterDeps(propertyDidChange, obj, depKey, seen, meta);\r\n  if (top) { DID_SEEN = null; }\r\n}","code-length":113,"reference":"called whenever a property has just changed to update dependent keys","result":"Detect changes in dependent keys.","score":[0.0724,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction set(obj, keyName, value, tolerant) {\r\n  if (typeof obj === 'string') {\r\n    Ember.assert(\"Path '\" + obj + \"' must be global if no obj is given.\", IS_GLOBAL.test(obj));\r\n    value = keyName;\r\n    keyName = obj;\r\n    obj = null;\r\n  }\r\n  Ember.assert(\"Cannot call set with \"+ keyName +\" key.\", !!keyName);\r\n  if (!obj || keyName.indexOf('.') !== -1) {\r\n    return setPath(obj, keyName, value, tolerant);\r\n  }\r\n  Ember.assert(\"You need to provide an object and key to `set`.\", !!obj && keyName !== undefined);\r\n  Ember.assert('calling set on destroyed object', !obj.isDestroyed);\r\n  var meta = obj[META_KEY], desc = meta && meta.descs[keyName],\r\n      isUnknown, currentValue;\r\n  if (desc) {\r\n    desc.set(obj, keyName, value);\r\n  } else {\r\n    isUnknown = 'object' === typeof obj && !(keyName in obj);\r\n    if (isUnknown && 'function' === typeof obj.setUnknownProperty) {\r\n      obj.setUnknownProperty(keyName, value);\r\n    } else if (meta && meta.watching[keyName] > 0) {\r\n      if (MANDATORY_SETTER) {\r\n        currentValue = meta.values[keyName];\r\n      } else {\r\n        currentValue = obj[keyName];\r\n      }\r\n      if (value !== currentValue) {\r\n        Ember.propertyWillChange(obj, keyName);\r\n        if (MANDATORY_SETTER) {\r\n          if ((currentValue === undefined && !(keyName in obj)) || !obj.propertyIsEnumerable(keyName)) {\r\n            Ember.defineProperty(obj, keyName, null, value);\r\n          } else {\r\n            meta.values[keyName] = value;\r\n          }\r\n        } else {\r\n          obj[keyName] = value;\r\n        }\r\n        Ember.propertyDidChange(obj, keyName);\r\n      }\r\n    } else {\r\n      obj[keyName] = value;\r\n    }\r\n  }\r\n  return value;\r\n}","code-length":556,"reference":"Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change. If the\nproperty is not defined but the object implements the `setUnknownProperty`\nmethod then that will be invoked as well.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key, value) {\r\n    var keys = this.keys,\r\n        values = this.values,\r\n        guid = guidFor(key);\r\n    keys.add(key);\r\n    values[guid] = value;\r\n    set(this, 'length', keys.list.length);\r\n  }","code-length":84,"reference":"Adds a value to the map. If a value for the given key has already been\nprovided, the new value will replace the old value.\n\n","result":"Store the value.","score":[0.0003,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key) {\r\n    var keys = this.keys,\r\n        values = this.values,\r\n        guid = guidFor(key);\r\n    if (values.hasOwnProperty(guid)) {\r\n      keys.remove(key);\r\n      delete values[guid];\r\n      set(this, 'length', keys.list.length);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }","code-length":115,"reference":"Removes a value from the map for an associated key.\n\n","result":"Remove a value.","score":[0.0396,0.2016]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, self) {\r\n    var keys = this.keys,\r\n        values = this.values;\r\n    keys.forEach(function(key) {\r\n      var guid = guidFor(key);\r\n      callback.call(self, key, values[guid]);\r\n    });\r\n  }","code-length":82,"reference":"Iterate over all the keys and values. Calls the function once\nfor each key, passing in the key and value, in that order.\n\nThe keys are guaranteed to be iterated over in insertion order.\n\n","result":"Iterate over all keys and values.","score":[0.0056,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj) {\r\n    Ember.assert('Must pass a valid object to Ember.Binding.disconnect()', !!obj);\r\n    var twoWay = !this._oneWay;\r\n    Ember.removeObserver(obj, this._from, this, this.fromDidChange);\r\n    if (twoWay) { Ember.removeObserver(obj, this._to, this, this.toDidChange); }\r\n    this._readyToSync = false;\r\n    return this;\r\n  }","code-length":123,"reference":"Disconnects the binding instance. Changes will no longer be relayed. You\nwill not usually need to call this method.\n\n","result":"Disconnect an object.","score":[0,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filter(promises, filterFn, label) {\r\n      return all(promises, label).then(function(values){\r\n        if (!isArray(promises)) {\r\n          throw new TypeError('You must pass an array to filter.');\r\n        }\r\n        if (!isFunction(filterFn)){\r\n          throw new TypeError(\"You must pass a function to filter's second argument.\");\r\n        }\r\n        return map(promises, filterFn, label).then(function(filterResults){\r\n           var i,\r\n               valuesLen = values.length,\r\n               filtered = [];\r\n           for (i = 0; i < valuesLen; i++){\r\n             if(filterResults[i]) filtered.push(values[i]);\r\n           }\r\n           return filtered;\r\n        });\r\n      });\r\n    }","code-length":206,"reference":"`RSVP.filter` is similar to JavaScript's native `filter` method, except that it\nwaits for all promises to become fulfilled before running the `filterFn` on\neach item in given to `promises`. `RSVP.filter` returns a promise that will\nbecome fulfilled with the result of running `filterFn` on the values the\npromises become fulfilled with.\n\nFor example:\n\n```javascript\n\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\n\nvar filterFn = function(item){\nreturn item > 1;\n};\n\nRSVP.filter(promises, filterFn).then(function(result){\nresult is [ 2, 3 ]\n});\n```\n\nIf any of the `promises` given to `RSVP.filter` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promise's\nrejection handler. For example:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error(\"2\"));\nvar promise3 = RSVP.reject(new Error(\"3\"));\nvar promises = [ promise1, promise2, promise3 ];\n\nvar filterFn = function(item){\nreturn item > 1;\n};\n\nRSVP.filter(promises, filterFn).then(function(array){\nCode here never runs because there are rejected promises!\n}, function(reason) {\nreason.message === \"2\"\n});\n```\n\n`RSVP.filter` will also wait for any promises returned from `filterFn`.\nFor instance, you may want to fetch a list of users then return a subset\nof those users based on some asynchronous operation:\n\n```javascript\n\nvar alice = { name: 'alice' };\nvar bob   = { name: 'bob' };\nvar users = [ alice, bob ];\n\nvar promises = users.map(function(user){\nreturn RSVP.resolve(user);\n});\n\nvar filterFn = function(user){\nHere, Alice has permissions to create a blog post, but Bob does not.\nreturn getPrivilegesForUser(user).then(function(privs){\nreturn privs.can_create_blog_post === true;\n});\n};\nRSVP.filter(promises, filterFn).then(function(users){\ntrue, because the server told us only Alice can create a blog post.\nusers.length === 1;\nfalse, because Alice is the only user present in `users`\nusers[0] === bob;\n});\n```\n\n","result":"Filter promises by a function.","score":[1.118e-25,0.0039]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Container(parent) {\r\n      this.parent = parent;\r\n      this.children = [];\r\n      this.resolver = parent && parent.resolver || function() {};\r\n      this.registry = new InheritingDict(parent && parent.registry);\r\n      this.cache = new InheritingDict(parent && parent.cache);\r\n      this.factoryCache = new InheritingDict(parent && parent.factoryCache);\r\n      this.resolveCache = new InheritingDict(parent && parent.resolveCache);\r\n      this.typeInjections = new InheritingDict(parent && parent.typeInjections);\r\n      this.injections = {};\r\n      this.factoryTypeInjections = new InheritingDict(parent && parent.factoryTypeInjections);\r\n      this.factoryInjections = {};\r\n      this._options = new InheritingDict(parent && parent._options);\r\n      this._typeOptions = new InheritingDict(parent && parent._typeOptions);\r\n    }","code-length":235,"reference":"A lightweight container that helps to assemble and decouple components. Public api for the container is still in flux. The public api, specified on the application namespace should be considered the stable api.","result":"Resolve dependencies.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fullName, factory, options) {\r\n        validateFullName(fullName);\r\n        if (factory === undefined) {\r\n          throw new TypeError('Attempting to register an unknown factory: `' + fullName + '`');\r\n        }\r\n        var normalizedName = this.normalize(fullName);\r\n        if (this.cache.has(normalizedName)) {\r\n          throw new Error('Cannot re-register: `' + fullName +'`, as it has already been looked up.');\r\n        }\r\n        this.registry.set(normalizedName, factory);\r\n        this._options.set(normalizedName, options || {});\r\n      }","code-length":156,"reference":"Registers a factory for later injection.\n\nExample:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('model:user', Person, {singleton: false });\ncontainer.register('fruit:favorite', Orange);\ncontainer.register('communication:main', Email, {singleton: false});\n```\n\n","result":"Register a factory function.","score":[0.0024,0.1286]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fullName) {\r\n        validateFullName(fullName);\r\n        var normalizedName = this.normalize(fullName);\r\n        this.registry.remove(normalizedName);\r\n        this.cache.remove(normalizedName);\r\n        this.factoryCache.remove(normalizedName);\r\n        this.resolveCache.remove(normalizedName);\r\n        this._options.remove(normalizedName);\r\n      }","code-length":104,"reference":"Unregister a fullName\n\n```javascript\nvar container = new Container();\ncontainer.register('model:user', User);\n\ncontainer.lookup('model:user') instanceof User \/\/=> true\n\ncontainer.unregister('model:user')\ncontainer.lookup('model:user') === undefined \/\/=> true\n```\n\n","result":"Remove a factory.","score":[0.0005,0.0238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fullName) {\r\n        validateFullName(fullName);\r\n        var normalizedName = this.normalize(fullName);\r\n        var cached = this.resolveCache.get(normalizedName);\r\n        if (cached) { return cached; }\r\n        var resolved = this.resolver(normalizedName) || this.registry.get(normalizedName);\r\n        this.resolveCache.set(normalizedName, resolved);\r\n        return resolved;\r\n      }","code-length":114,"reference":"Given a fullName return the corresponding factory.\n\nBy default `resolve` will retrieve the factory from\nits container's registry.\n\n```javascript\nvar container = new Container();\ncontainer.register('api:twitter', Twitter);\n\ncontainer.resolve('api:twitter') \/\/ => Twitter\n```\n\nOptionally the container can be provided with a custom resolver.\nIf provided, `resolve` will first provide the custom resolver\nthe oppertunity to resolve the fullName, otherwise it will fallback\nto the registry.\n\n```javascript\nvar container = new Container();\ncontainer.resolver = function(fullName) {\nlookup via the module system of choice\n};\n\nthe twitter factory is added to the module system\ncontainer.resolve('api:twitter') \/\/ => Twitter\n```\n\n","result":"Resolve a full name.","score":[0.0,0.0116]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, property, fullName) {\r\n        validateFullName(fullName);\r\n        if (this.parent) { illegalChildOperation('typeInjection'); }\r\n        addTypeInjection(this.typeInjections, type, property, fullName);\r\n      }","code-length":67,"reference":"Used only via `injection`.\n\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\n\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('router:main', Router);\ncontainer.register('controller:user', UserController);\ncontainer.register('controller:post', PostController);\n\ncontainer.typeInjection('controller', 'router', 'router:main');\n\nvar user = container.lookup('controller:user');\nvar post = container.lookup('controller:post');\n\nuser.router instanceof Router; \/\/=> true\npost.router instanceof Router; \/\/=> true\n\nboth controllers share the same router\nuser.router === post.router; \/\/=> true\n```\n\n","result":"Define a typeInjection.","score":[0.0,0.0064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fullName, property, injectionName) {\r\n        if (this.parent) { illegalChildOperation('injection'); }\r\n        validateFullName(injectionName);\r\n        var normalizedInjectionName = this.normalize(injectionName);\r\n        if (fullName.indexOf(':') === -1) {\r\n          return this.typeInjection(fullName, property, normalizedInjectionName);\r\n        }\r\n        validateFullName(fullName);\r\n        var normalizedName = this.normalize(fullName);\r\n        addInjection(this.injections, normalizedName, property, normalizedInjectionName);\r\n      }","code-length":147,"reference":"Defines injection rules.\n\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\n\nTwo forms of injections are possible:\n\nInjecting one fullName on another fullName\nInjecting one fullName on a type\n\nExample:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('source:main', Source);\ncontainer.register('model:user', User);\ncontainer.register('model:post', Post);\n\ninjecting one fullName on another fullName\neg. each user model gets a post model\ncontainer.injection('model:user', 'post', 'model:post');\n\ninjecting one fullName on another type\ncontainer.injection('model', 'source', 'source:main');\n\nvar user = container.lookup('model:user');\nvar post = container.lookup('model:post');\n\nuser.source instanceof Source; \/\/=> true\npost.source instanceof Source; \/\/=> true\n\nuser.post instanceof Post; \/\/=> true\n\nand both models share the same source\nuser.source === post.source; \/\/=> true\n```\n\n","result":"Create a new injection .","score":[0.0,0.0152]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, property, fullName) {\r\n        if (this.parent) { illegalChildOperation('factoryTypeInjection'); }\r\n        addTypeInjection(this.factoryTypeInjections, type, property, this.normalize(fullName));\r\n      }","code-length":65,"reference":"Used only via `factoryInjection`.\n\nProvides a specialized form of injection, specifically enabling\nall factory of one type to be injected with a reference to another\nobject.\n\nFor example, provided each factory of type `model` needed a `store`.\none would do the following:\n\n```javascript\nvar container = new Container();\n\ncontainer.register('store:main', SomeStore);\n\ncontainer.factoryTypeInjection('model', 'store', 'store:main');\n\nvar store = container.lookup('store:main');\nvar UserFactory = container.lookupFactory('model:user');\n\nUserFactory.store instanceof SomeStore; \/\/=> true\n```\n\n","result":"Inject factoryTypeInjections.","score":[0,0.0083]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key) {\r\n        var dict = this.dict;\r\n        if (dict.hasOwnProperty(key)) {\r\n          return dict[key];\r\n        }\r\n        if (this.parent) {\r\n          return this.parent.get(key);\r\n        }\r\n      }","code-length":79,"reference":"Retrieve the value given a key, if the value is present at the current\nlevel use it, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return undefined.\n\n","result":"Get a value from a dictionary.","score":[0.0022,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key) {\r\n        var dict = this.dict;\r\n        if (dict.hasOwnProperty(key)) {\r\n          return true;\r\n        }\r\n        if (this.parent) {\r\n          return this.parent.has(key);\r\n        }\r\n        return false;\r\n      }","code-length":83,"reference":"Check for the existence of given a key, if the key is present at the current\nlevel return true, otherwise walk up the parent hierarchy and try again. If\nno matching key is found, return false.\n\n","result":"Check if a key exists in the dictionary.","score":[0.0063,0.0904]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, binding) {\r\n        var dict = this.dict;\r\n        for (var prop in dict) {\r\n          if (dict.hasOwnProperty(prop)) {\r\n            callback.call(binding, prop, dict[prop]);\r\n          }\r\n        }\r\n      }","code-length":77,"reference":"Iterate and invoke a callback for each local key-value pair.\n\n","result":"Iterate over the dictionary.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(str) {\r\n    var cache = STRING_DASHERIZE_CACHE,\r\n        hit   = cache.hasOwnProperty(str),\r\n        ret;\r\n    if (hit) {\r\n      return cache[str];\r\n    } else {\r\n      ret = Ember.String.decamelize(str).replace(STRING_DASHERIZE_REGEXP,'-');\r\n      cache[str] = ret;\r\n    }\r\n    return ret;\r\n  }","code-length":121,"reference":"Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\n'innerHTML'.dasherize();          \/\/ 'inner-html'\n'action_name'.dasherize();        \/\/ 'action-name'\n'css-class-name'.dasherize();     \/\/ 'css-class-name'\n'my favorite items'.dasherize();  \/\/ 'my-favorite-items'\n```\n\n","result":"Create a new function to make a string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(keyName, increment) {\r\n    if (Ember.isNone(increment)) { increment = 1; }\r\n    Ember.assert(\"Must pass a numeric value to incrementProperty\", (!isNaN(parseFloat(increment)) && isFinite(increment)));\r\n    set(this, keyName, (get(this, keyName) || 0) + increment);\r\n    return get(this, keyName);\r\n  }","code-length":104,"reference":"Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```\n\n","result":"Increment a property.","score":[0.0028,0.0303]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(keyName, decrement) {\r\n    if (Ember.isNone(decrement)) { decrement = 1; }\r\n    Ember.assert(\"Must pass a numeric value to decrementProperty\", (!isNaN(parseFloat(decrement)) && isFinite(decrement)));\r\n    set(this, keyName, (get(this, keyName) || 0) - decrement);\r\n    return get(this, keyName);\r\n  }","code-length":107,"reference":"Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```\n\n","result":"Decrement a property.","score":[0.0028,0.0303]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var Class = makeCtor(), proto;\r\n    Class.ClassMixin = Mixin.create(this.ClassMixin);\r\n    Class.PrototypeMixin = Mixin.create(this.PrototypeMixin);\r\n    Class.ClassMixin.ownerConstructor = Class;\r\n    Class.PrototypeMixin.ownerConstructor = Class;\r\n    reopen.apply(Class.PrototypeMixin, arguments);\r\n    Class.superclass = this;\r\n    Class.__super__  = this.prototype;\r\n    proto = Class.prototype = o_create(this.prototype);\r\n    proto.constructor = Class;\r\n    generateGuid(proto);\r\n    meta(proto).proto = proto;\r\n    Class.ClassMixin.apply(Class);\r\n    return Class;\r\n  }","code-length":189,"reference":"Creates a new subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\nsay: function(thing) {\nalert(thing);\n}\n});\n```\n\nThis defines a new subclass of Ember.Object: `App.Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()`  method. For example, you might want to create a subclass of Ember's built-in `Ember.View` class:\n\n```javascript\nApp.PersonView = Ember.View.extend({\ntagName: 'li',\nclassNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the implementation of your parent class by calling the special `_super()` method:\n\n```javascript\nApp.Person = Ember.Object.extend({\nsay: function(thing) {\nvar name = this.get('name');\nalert(name + ' says: ' + thing);\n}\n});\n\nApp.Soldier = App.Person.extend({\nsay: function(thing) {\nthis._super(thing + \", sir!\");\n},\nmarch: function(numberOfHours) {\nalert(this.get('name') + ' marches for ' + numberOfHours + ' hours.')\n}\n});\n\nvar yehuda = App.Soldier.create({\nname: \"Yehuda Katz\"\n});\n\nyehuda.say(\"Yes\");  \/\/ alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `App.Soldier` class. The `extend()` on line #8 creates a *subclass* of `App.Person`. Any instance of the `App.Person` class will *not* have the `march()` method.\n\nYou can also pass `Ember.Mixin` classes to add additional properties to the subclass.\n\n```javascript\nApp.Person = Ember.Object.extend({\nsay: function(thing) {\nalert(this.get('name') + ' says: ' + thing);\n}\n});\n\nApp.SingingMixin = Ember.Mixin.create({\nsing: function(thing){\nalert(this.get('name') + ' sings: la la la ' + thing);\n}\n});\n\nApp.BroadwayStar = App.Person.extend(App.SingingMixin, {\ndance: function() {\nalert(this.get('name') + ' dances: tap tap tap tap ');\n}\n});\n```\n\nThe `App.BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.\n\n","result":"Create a constructor function.","score":[2.42e-29,0.0042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key) {\r\n    var meta = this.proto()[META_KEY],\r\n        desc = meta && meta.descs[key];\r\n    Ember.assert(\"metaForProperty() could not find a computed property with key '\"+key+\"'.\", !!desc && desc instanceof Ember.ComputedProperty);\r\n    return desc._meta || {};\r\n  }","code-length":94,"reference":"In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nperson: function() {\nvar personId = this.get('personId');\nreturn App.Person.create({ id: personId });\n}.property().meta({ type: App.Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.\n\n","result":"Get the meta for a computed property.","score":[0.0,0.021]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key, value) {\r\n    var exactValue = function(item) { return get(item, key) === value; },\r\n        hasValue = function(item) { return !!get(item, key); },\r\n        use = (arguments.length === 2 ? exactValue : hasValue);\r\n    return this.reject(use);\r\n  }","code-length":90,"reference":"Returns an array with the items that do not have truthy values for\nkey.  You can pass an optional second argument with the target value.  Otherwise\nthis will match any property that evaluates to false.\n\n","result":"Test for a given key and value.","score":[0.0035,0.0466]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(value) {\r\n    if (!this.contains(value)) return this;\r\n    var ret = Ember.A();\r\n    this.forEach(function(k) {\r\n      if (k !== value) ret[ret.length] = k;\r\n    }) ;\r\n    return ret ;\r\n  }","code-length":85,"reference":"Returns a new enumerable that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type unless\nthe receiver does not contain the value.\n\n```javascript\nvar arr = [\"a\", \"b\", \"a\", \"c\"];\narr.without(\"a\");  \/\/ [\"b\", \"c\"]\n```\n\n","result":"Remove a value.","score":[0.0,0.0269]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var ret = Ember.A();\r\n    this.forEach(function(k) {\r\n      if (a_indexOf(ret, k)<0) ret.push(k);\r\n    });\r\n    return ret;\r\n  }","code-length":71,"reference":"Returns a new enumerable that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n\n```javascript\nvar arr = [\"a\", \"a\", \"b\", \"b\"];\narr.uniq();  \/\/ [\"a\", \"b\"]\n```\n\n","result":"Test Ember.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(startIdx, removeAmt, addAmt) {\r\n    if (startIdx===undefined) {\r\n      startIdx = 0;\r\n      removeAmt = addAmt = -1;\r\n    } else {\r\n      if (removeAmt === undefined) removeAmt=-1;\r\n      if (addAmt    === undefined) addAmt=-1;\r\n    }\r\n    if (Ember.isWatching(this, '@each')) { get(this, '@each'); }\r\n    Ember.sendEvent(this, '@array:before', [this, startIdx, removeAmt, addAmt]);\r\n    var removing, lim;\r\n    if (startIdx>=0 && removeAmt>=0 && get(this, 'hasEnumerableObservers')) {\r\n      removing = [];\r\n      lim = startIdx+removeAmt;\r\n      for(var idx=startIdx;idx<lim;idx++) removing.push(this.objectAt(idx));\r\n    } else {\r\n      removing = removeAmt;\r\n    }\r\n    this.enumerableContentWillChange(removing, addAmt);\r\n    return this;\r\n  }","code-length":270,"reference":"If you are implementing an object that supports `Ember.Array`, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n","result":"Trigger the array.","score":[0.0,0.0125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(startIdx, removeAmt, addAmt) {\r\n    if (startIdx===undefined) {\r\n      startIdx = 0;\r\n      removeAmt = addAmt = -1;\r\n    } else {\r\n      if (removeAmt === undefined) removeAmt=-1;\r\n      if (addAmt    === undefined) addAmt=-1;\r\n    }\r\n    var adding, lim;\r\n    if (startIdx>=0 && addAmt>=0 && get(this, 'hasEnumerableObservers')) {\r\n      adding = [];\r\n      lim = startIdx+addAmt;\r\n      for(var idx=startIdx;idx<lim;idx++) adding.push(this.objectAt(idx));\r\n    } else {\r\n      adding = addAmt;\r\n    }\r\n    this.enumerableContentDidChange(removeAmt, adding);\r\n    Ember.sendEvent(this, '@array:change', [this, startIdx, removeAmt, addAmt]);\r\n    var length      = get(this, 'length'),\r\n        cachedFirst = cacheFor(this, 'firstObject'),\r\n        cachedLast  = cacheFor(this, 'lastObject');\r\n    if (this.objectAt(0) !== cachedFirst) {\r\n      Ember.propertyWillChange(this, 'firstObject');\r\n      Ember.propertyDidChange(this, 'firstObject');\r\n    }\r\n    if (this.objectAt(length-1) !== cachedLast) {\r\n      Ember.propertyWillChange(this, 'lastObject');\r\n      Ember.propertyDidChange(this, 'lastObject');\r\n    }\r\n    return this;\r\n  }","code-length":392,"reference":"If you are implementing an object that supports `Ember.Array`, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n","result":"Trigger the array change event.","score":[0.0002,0.0374]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ReduceComputedProperty(options) {\r\n  var cp = this;\r\n  this.options = options;\r\n  this._dependentKeys = null;\r\n  this._itemPropertyKeys = {};\r\n  this._previousItemPropertyKeys = {};\r\n  this.readOnly();\r\n  this.cacheable();\r\n  this.recomputeOnce = function(propertyName) {\r\n    Ember.run.once(this, recompute, propertyName);\r\n  };\r\n  var recompute = function(propertyName) {\r\n    var dependentKeys = cp._dependentKeys,\r\n        meta = cp._instanceMeta(this, propertyName),\r\n        callbacks = cp._callbacks();\r\n    reset.call(this, cp, propertyName);\r\n    meta.dependentArraysObserver.suspendArrayObservers(function () {\r\n      forEach(cp._dependentKeys, function (dependentKey) {\r\n        Ember.assert(\r\n          \"dependent array \" + dependentKey + \" must be an `Ember.Array`.  \" +\r\n          \"If you are not extending arrays, you will need to wrap native arrays with `Ember.A`\",\r\n          !(Ember.isArray(get(this, dependentKey)) && !Ember.Array.detect(get(this, dependentKey))));\r\n        if (!partiallyRecomputeFor(this, dependentKey)) { return; }\r\n        var dependentArray = get(this, dependentKey),\r\n            previousDependentArray = meta.dependentArrays[dependentKey];\r\n        if (dependentArray === previousDependentArray) {\r\n          if (cp._previousItemPropertyKeys[dependentKey]) {\r\n            delete cp._previousItemPropertyKeys[dependentKey];\r\n            meta.dependentArraysObserver.setupPropertyObservers(dependentKey, cp._itemPropertyKeys[dependentKey]);\r\n          }\r\n        } else {\r\n          meta.dependentArrays[dependentKey] = dependentArray;\r\n          if (previousDependentArray) {\r\n            meta.dependentArraysObserver.teardownObservers(previousDependentArray, dependentKey);\r\n          }\r\n          if (dependentArray) {\r\n            meta.dependentArraysObserver.setupObservers(dependentArray, dependentKey);\r\n          }\r\n        }\r\n      }, this);\r\n    }, this);\r\n    forEach(cp._dependentKeys, function(dependentKey) {\r\n      if (!partiallyRecomputeFor(this, dependentKey)) { return; }\r\n      var dependentArray = get(this, dependentKey);\r\n      if (dependentArray) {\r\n        addItems.call(this, dependentArray, callbacks, cp, propertyName, meta);\r\n      }\r\n    }, this);\r\n  };\r\n  this.func = function (propertyName) {\r\n    Ember.assert(\"Computed reduce values require at least one dependent key\", cp._dependentKeys);\r\n    recompute.call(this, propertyName);\r\n    return cp._instanceMeta(this, propertyName).getValue();\r\n  };\r\n}","code-length":690,"reference":"A computed property whose dependent keys are arrays and which is updated with\n\"one at a time\" semantics.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(objects) {\r\n    Ember.beginPropertyChanges(this);\r\n    forEach(objects, function(obj) { this.addObject(obj); }, this);\r\n    Ember.endPropertyChanges(this);\r\n    return this;\r\n  }","code-length":68,"reference":"Adds each object in the passed enumerable to the receiver.\n\n","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(objects) {\r\n    Ember.beginPropertyChanges(this);\r\n    forEach(objects, function(obj) { this.removeObject(obj); }, this);\r\n    Ember.endPropertyChanges(this);\r\n    return this;\r\n  }","code-length":68,"reference":"Removes each object in the passed enumerable from the receiver.\n\n","result":"Remove objects.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name) {\r\n    var args = [], i, l;\r\n    for (i = 1, l = arguments.length; i < l; i++) {\r\n      args.push(arguments[i]);\r\n    }\r\n    Ember.sendEvent(this, name, args);\r\n  }","code-length":81,"reference":"Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat', function(food) {\nconsole.log('person ate some ' + food);\n});\n\nperson.trigger('didEat', 'broccoli');\n\noutputs: person ate some broccoli\n```\n","result":"Trigger an event.","score":[0.0,0.0256]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(resolve, reject, label) {\r\n    var deferred, promise, entity;\r\n    entity = this;\r\n    deferred = get(this, '_deferred');\r\n    promise = deferred.promise;\r\n    function fulfillmentHandler(fulfillment) {\r\n      if (fulfillment === promise) {\r\n        return resolve(entity);\r\n      } else {\r\n        return resolve(fulfillment);\r\n      }\r\n    }\r\n    return promise.then(resolve && fulfillmentHandler, reject, label);\r\n  }","code-length":135,"reference":"Add handlers to be called when the Deferred object is resolved or rejected.\n\n","result":"Reject the promise.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(value) {\r\n    var deferred, promise;\r\n    deferred = get(this, '_deferred');\r\n    promise = deferred.promise;\r\n    if (value === this) {\r\n      deferred.resolve(promise);\r\n    } else {\r\n      deferred.resolve(value);\r\n    }\r\n  }","code-length":85,"reference":"Resolve a Deferred object and call any `doneCallbacks` with the given args.\n\n","result":"Resolve the value.","score":[0.0242,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(props) {\r\n    var hashName;\r\n    if (!props._actions) {\r\n      Ember.assert(\"'actions' should not be a function\", typeof(props.actions) !== 'function');\r\n      if (typeOf(props.actions) === 'object') {\r\n        hashName = 'actions';\r\n      } else if (typeOf(props.events) === 'object') {\r\n        Ember.deprecate('Action handlers contained in an `events` object are deprecated in favor of putting them in an `actions` object', false);\r\n        hashName = 'events';\r\n      }\r\n      if (hashName) {\r\n        props._actions = Ember.merge(props._actions || {}, props[hashName]);\r\n      }\r\n      delete props[hashName];\r\n    }\r\n  }","code-length":198,"reference":"The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```js\nApp.CanDisplayBanner = Ember.Mixin.create({\nactions: {\ndisplayBanner: function(msg) {\n...\n}\n}\n});\n\nApp.WelcomeRoute = Ember.Route.extend(App.CanDisplayBanner, {\nactions: {\nplayMusic: function() {\n...\n}\n}\n});\n\n`WelcomeRoute`, when active, will be able to respond\nto both actions, since the actions hash is merged rather\nthen replaced when extending mixins \/ parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route, View or Component's action handler,\nthe value of the `this` context is the Controller, Route, View or\nComponent object:\n\n```js\nApp.SongRoute = Ember.Route.extend({\nactions: {\nmyAction: function() {\nthis.controllerFor(\"song\");\nthis.transitionTo(\"other.route\");\n...\n}\n}\n});\n```\n\nIt is also possible to call `this._super()` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```js\nApp.DebugRoute = Ember.Mixin.create({\nactions: {\ndebugRouteInformation: function() {\nconsole.debug(\"trololo\");\n}\n}\n});\n\nApp.AnnoyingDebugRoute = Ember.Route.extend(App.DebugRoute, {\nactions: {\ndebugRouteInformation: function() {\nalso call the debugRouteInformation of mixed in App.DebugRoute\nthis._super();\n\nshow additional annoyance\nwindow.alert(...);\n}\n}\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```js\nApp.Router.map(function() {\nthis.resource(\"album\", function() {\nthis.route(\"song\");\n});\n});\n\nApp.AlbumRoute = Ember.Route.extend({\nactions: {\nstartPlaying: function() {\n}\n}\n});\n\nApp.AlbumSongRoute = Ember.Route.extend({\nactions: {\nstartPlaying: function() {\n...\n\nif (actionShouldAlsoBeTriggeredOnParentRoute) {\nreturn true;\n}\n}\n}\n});\n```\n\n","result":"Create a new action handler.","score":[1.124e-27,0.0036]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(actionName) {\r\n    var args = [].slice.call(arguments, 1), target;\r\n    if (this._actions && this._actions[actionName]) {\r\n      if (this._actions[actionName].apply(this, args) === true) {\r\n      } else {\r\n        return;\r\n      }\r\n    } else if (!Ember.FEATURES.isEnabled('ember-routing-drop-deprecated-action-style') && this.deprecatedSend && this.deprecatedSendHandles && this.deprecatedSendHandles(actionName)) {\r\n      Ember.warn(\"The current default is deprecated but will prefer to handle actions directly on the controller instead of a similarly named action in the actions hash. To turn off this deprecated feature set: Ember.FEATURES['ember-routing-drop-deprecated-action-style'] = true\");\r\n      if (this.deprecatedSend.apply(this, [].slice.call(arguments)) === true) {\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n    if (target = get(this, 'target')) {\r\n      Ember.assert(\"The `target` for \" + this + \" (\" + target + \") does not have a `send` method\", typeof target.send === 'function');\r\n      target.send.apply(target, arguments);\r\n    }\r\n  }","code-length":319,"reference":"Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\n\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\n\nExample\n\n```js\nApp.WelcomeRoute = Ember.Route.extend({\nactions: {\nplayTheme: function() {\nthis.send('playMusic', 'theme.mp3');\n},\nplayMusic: function(track) {\n...\n}\n}\n});\n```\n\n","result":"Create a route .","score":[0.0,0.0068]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (index, newItems) {\r\n    var count = get(newItems, 'length');\r\n    if (count < 1) { return; }\r\n    var match = this._findArrayOperation(index),\r\n        arrayOperation = match.operation,\r\n        arrayOperationIndex = match.index,\r\n        arrayOperationRangeStart = match.rangeStart,\r\n        composeIndex,\r\n        splitIndex,\r\n        splitItems,\r\n        splitArrayOperation,\r\n        newArrayOperation;\r\n    newArrayOperation = new ArrayOperation(INSERT, count, newItems);\r\n    if (arrayOperation) {\r\n      if (!match.split) {\r\n        this._operations.splice(arrayOperationIndex, 0, newArrayOperation);\r\n        composeIndex = arrayOperationIndex;\r\n      } else {\r\n        this._split(arrayOperationIndex, index - arrayOperationRangeStart, newArrayOperation);\r\n        composeIndex = arrayOperationIndex + 1;\r\n      }\r\n    } else {\r\n      this._operations.push(newArrayOperation);\r\n      composeIndex = arrayOperationIndex;\r\n    }\r\n    this._composeInsert(composeIndex);\r\n  }","code-length":278,"reference":"Track that `newItems` were added to the tracked array at `index`.\n\n","result":"Compose insert operations.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (index, count) {\r\n    if (count < 1) { return; }\r\n    var match = this._findArrayOperation(index),\r\n        arrayOperation = match.operation,\r\n        arrayOperationIndex = match.index,\r\n        arrayOperationRangeStart = match.rangeStart,\r\n        newArrayOperation,\r\n        composeIndex;\r\n    newArrayOperation = new ArrayOperation(DELETE, count);\r\n    if (!match.split) {\r\n      this._operations.splice(arrayOperationIndex, 0, newArrayOperation);\r\n      composeIndex = arrayOperationIndex;\r\n    } else {\r\n      this._split(arrayOperationIndex, index - arrayOperationRangeStart, newArrayOperation);\r\n      composeIndex = arrayOperationIndex + 1;\r\n    }\r\n    return this._composeDelete(composeIndex);\r\n  }","code-length":200,"reference":"Track that `count` items were removed at `index`.\n\n","result":"Delete an array operation.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (index) {\r\n    var newArrayOperation = this._operations[index],\r\n        leftArrayOperation = this._operations[index-1],\r\n        rightArrayOperation = this._operations[index+1],\r\n        leftOp = leftArrayOperation && leftArrayOperation.type,\r\n        rightOp = rightArrayOperation && rightArrayOperation.type;\r\n    if (leftOp === INSERT) {\r\n        leftArrayOperation.count += newArrayOperation.count;\r\n        leftArrayOperation.items = leftArrayOperation.items.concat(newArrayOperation.items);\r\n      if (rightOp === INSERT) {\r\n        leftArrayOperation.count += rightArrayOperation.count;\r\n        leftArrayOperation.items = leftArrayOperation.items.concat(rightArrayOperation.items);\r\n        this._operations.splice(index, 2);\r\n      } else {\r\n        this._operations.splice(index, 1);\r\n      }\r\n    } else if (rightOp === INSERT) {\r\n      newArrayOperation.count += rightArrayOperation.count;\r\n      newArrayOperation.items = newArrayOperation.items.concat(rightArrayOperation.items);\r\n      this._operations.splice(index + 1, 1);\r\n    }\r\n  }","code-length":293,"reference":"see SubArray for a better implementation.","result":"Remove the array at the given index.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ArrayOperation (operation, count, items) {\r\n  this.type = operation;\r\n  this.count = count;\r\n  this.items = items;\r\n}","code-length":50,"reference":"Internal data structure to represent an array operation.\n\n","result":"Create an array operation.","score":[0.2421,0.3874]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ArrayOperationMatch(operation, index, split, rangeStart) {\r\n  this.operation = operation;\r\n  this.index = index;\r\n  this.split = split;\r\n  this.rangeStart = rangeStart;\r\n}","code-length":63,"reference":"Internal data structure used to include information when looking up operations\nby item index.\n\n","result":"Match arrays.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index, match) {\r\n    var returnValue = -1,\r\n        itemType = match ? RETAIN : FILTER,\r\n        self = this;\r\n    this._findOperation(index, function(operation, operationIndex, rangeStart, rangeEnd, seenInSubArray) {\r\n      var newOperation, splitOperation;\r\n      if (itemType === operation.type) {\r\n        ++operation.count;\r\n      } else if (index === rangeStart) {\r\n        self._operations.splice(operationIndex, 0, new Operation(itemType, 1));\r\n      } else {\r\n        newOperation = new Operation(itemType, 1);\r\n        splitOperation = new Operation(operation.type, rangeEnd - index + 1);\r\n        operation.count = index - rangeStart;\r\n        self._operations.splice(operationIndex + 1, 0, newOperation, splitOperation);\r\n      }\r\n      if (match) {\r\n        if (operation.type === RETAIN) {\r\n          returnValue = seenInSubArray + (index - rangeStart);\r\n        } else {\r\n          returnValue = seenInSubArray;\r\n        }\r\n      }\r\n      self._composeAt(operationIndex);\r\n    }, function(seenInSubArray) {\r\n      self._operations.push(new Operation(itemType, 1));\r\n      if (match) {\r\n        returnValue = seenInSubArray;\r\n      }\r\n      self._composeAt(self._operations.length-1);\r\n    });\r\n    return returnValue;\r\n  }","code-length":364,"reference":"Track that an item was added to the tracked array.\n\n","result":"Create a new function to be used to create a new array.","score":[0.106,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index) {\r\n    var returnValue = -1,\r\n        self = this;\r\n    this._findOperation(index, function (operation, operationIndex, rangeStart, rangeEnd, seenInSubArray) {\r\n      if (operation.type === RETAIN) {\r\n        returnValue = seenInSubArray + (index - rangeStart);\r\n      }\r\n      if (operation.count > 1) {\r\n        --operation.count;\r\n      } else {\r\n        self._operations.splice(operationIndex, 1);\r\n        self._composeAt(operationIndex);\r\n      }\r\n    }, function() {\r\n      throw new Ember.Error(\"Can't remove an item that has never been added.\");\r\n    });\r\n    return returnValue;\r\n  }","code-length":186,"reference":"Track that an item was removed from the tracked array.\n\n","result":"Remove an item from an array.","score":[0.1667,0.2604]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(keyName, value) {\r\n    var ret;\r\n    ret = new EachArray(this._content, keyName, this);\r\n    Ember.defineProperty(this, keyName, null, ret);\r\n    this.beginObservingContentKey(keyName);\r\n    return ret;\r\n  }","code-length":80,"reference":"You can directly access mapped properties by simply requesting them.\nThe `unknownProperty` handler will generate an EachArray of each item.\n\n","result":"Create a content key.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(idx, amt, objects) {\r\n    if (this.isFrozen) throw Ember.FROZEN_ERROR;\r\n    var len = objects ? get(objects, 'length') : 0;\r\n    this.arrayContentWillChange(idx, amt, len);\r\n    if (len === 0) {\r\n      this.splice(idx, amt);\r\n    } else {\r\n      replace(this, idx, amt, objects);\r\n    }\r\n    this.arrayContentDidChange(idx, amt, len);\r\n    return this;\r\n  }","code-length":143,"reference":"primitive for array support.","result":"Replace arrays.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this.isFrozen) { throw new Ember.Error(Ember.FROZEN_ERROR); }\r\n    var len = get(this, 'length');\r\n    if (len === 0) { return this; }\r\n    var guid;\r\n    this.enumerableContentWillChange(len, 0);\r\n    Ember.propertyWillChange(this, 'firstObject');\r\n    Ember.propertyWillChange(this, 'lastObject');\r\n    for (var i=0; i < len; i++) {\r\n      guid = guidFor(this[i]);\r\n      delete this[guid];\r\n      delete this[i];\r\n    }\r\n    set(this, 'length', 0);\r\n    Ember.propertyDidChange(this, 'firstObject');\r\n    Ember.propertyDidChange(this, 'lastObject');\r\n    this.enumerableContentDidChange(len, 0);\r\n    return this;\r\n  }","code-length":235,"reference":"Clears the set. This is useful if you want to reuse an existing set\nwithout having to recreate it.\n\n```javascript\nvar colors = new Ember.Set([\"red\", \"green\", \"blue\"]);\ncolors.length;  \/\/ 3\ncolors.clear();\ncolors.length;  \/\/ 0\n```\n\n","result":"Remove all enumerable properties from an array.","score":[0.003,0.0155]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (get(this, 'isFrozen')) throw new Ember.Error(Ember.FROZEN_ERROR);\r\n    var obj = this.length > 0 ? this[this.length-1] : null;\r\n    this.remove(obj);\r\n    return obj;\r\n  }","code-length":84,"reference":"Removes the last element from the set and returns it, or `null` if it's empty.\n\n```javascript\nvar colors = new Ember.Set([\"green\", \"blue\"]);\ncolors.pop();  \/\/ \"blue\"\ncolors.pop();  \/\/ \"green\"\ncolors.pop();  \/\/ null\n```\n\n","result":"Create a new object.","score":[0.0003,0.0171]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(element, id) {\r\n  if (element.getAttribute('id') === id) { return element; }\r\n  var len = element.childNodes.length, idx, node, found;\r\n  for (idx=0; idx<len; idx++) {\r\n    node = element.childNodes[idx];\r\n    found = node.nodeType === 1 && findChildById(node, id);\r\n    if (found) { return found; }\r\n  }\r\n}","code-length":122,"reference":"Use this to find children by ID instead of using jQuery","result":"Find the element in the DOM tree.","score":[0,0.0472]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(className) {\r\n    this.elementClasses = (this.elementClasses || new ClassSet());\r\n    this.elementClasses.add(className);\r\n    this.classes = this.elementClasses.list;\r\n    return this;\r\n  }","code-length":68,"reference":"Adds a class to the buffer, which will be rendered to the class attribute.\n\n","result":"Create a new element class.","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, value) {\r\n    var attributes = this.elementAttributes = (this.elementAttributes || {});\r\n    if (arguments.length === 1) {\r\n      return attributes[name];\r\n    } else {\r\n      attributes[name] = value;\r\n    }\r\n    return this;\r\n  }","code-length":85,"reference":"duck type attribute functionality like jQuery so a render buffer can be used like a jQuery object in attribute binding scenarios. \nAdds an attribute which will be rendered to the element.\n\n","result":"Is used to set element attributes.","score":[0.0036,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, value) {\r\n    var properties = this.elementProperties = (this.elementProperties || {});\r\n    if (arguments.length === 1) {\r\n      return properties[name];\r\n    } else {\r\n      properties[name] = value;\r\n    }\r\n    return this;\r\n  }","code-length":85,"reference":"Adds a property which will be rendered to the element.\n\n","result":"Set element properties.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this._hasElement && this._element) {\r\n      var thisElement = this.element(), outerHTML = thisElement.outerHTML;\r\n      if (typeof outerHTML === 'undefined') {\r\n        return Ember.$('<div\/>').append(thisElement).html();\r\n      }\r\n      return outerHTML;\r\n    } else {\r\n      return this.innerString();\r\n    }\r\n  }","code-length":112,"reference":"Generates the HTML content for this buffer.\n\n","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(addedEvents, rootElement) {\r\n    var event, events = get(this, 'events');\r\n    Ember.$.extend(events, addedEvents || {});\r\n    if (!Ember.isNone(rootElement)) {\r\n      set(this, 'rootElement', rootElement);\r\n    }\r\n    rootElement = Ember.$(get(this, 'rootElement'));\r\n    Ember.assert(fmt('You cannot use the same root element (%@) multiple times in an Ember.Application', [rootElement.selector || rootElement[0].tagName]), !rootElement.is('.ember-application'));\r\n    Ember.assert('You cannot make a new Ember.Application using a root element that is a descendent of an existing Ember.Application', !rootElement.closest('.ember-application').length);\r\n    Ember.assert('You cannot make a new Ember.Application using a root element that is an ancestor of an existing Ember.Application', !rootElement.find('.ember-application').length);\r\n    rootElement.addClass('ember-application');\r\n    Ember.assert('Unable to add \"ember-application\" class to rootElement. Make sure you set rootElement to the body or an element in the body.', rootElement.is('.ember-application'));\r\n    for (event in events) {\r\n      if (events.hasOwnProperty(event)) {\r\n        this.setupHandler(rootElement, event, events[event]);\r\n      }\r\n    }\r\n  }","code-length":346,"reference":"Sets up event listeners for standard browser events.\n\nThis will be called after the browser sends a `DOMContentReady` event. By\ndefault, it will set up all of the listeners on the document body. If you\nwould like to register the listeners on a different element, set the event\ndispatcher's `root` property.\n\n","result":"Create a new application .","score":[0.0,0.0108]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(rootElement, event, eventName) {\r\n    var self = this;\r\n    rootElement.on(event + '.ember', '.ember-view', function(evt, triggeringManager) {\r\n      var view = Ember.View.views[this.id],\r\n          result = true, manager = null;\r\n      manager = self._findNearestEventManager(view, eventName);\r\n      if (manager && manager !== triggeringManager) {\r\n        result = self._dispatchEvent(manager, evt, eventName, view);\r\n      } else if (view) {\r\n        result = self._bubbleEvent(view, evt, eventName);\r\n      } else {\r\n        evt.stopPropagation();\r\n      }\r\n      return result;\r\n    });\r\n    rootElement.on(event + '.ember', '[data-ember-action]', function(evt) {\r\n      var actionId = Ember.$(evt.currentTarget).attr('data-ember-action'),\r\n          action   = Ember.Handlebars.ActionHelper.registeredActions[actionId];\r\n      if (action && action.eventName === eventName) {\r\n        return action.handler(evt);\r\n      }\r\n    });\r\n  }","code-length":290,"reference":"Registers an event listener on the document. If the given event is\ntriggered, the provided event handler will be triggered on the target view.\n\nIf the target view does not implement the event handler, or if the handler\nreturns `false`, the parent view will be called. The event will continue to\nbubble to each successive parent view until it reaches the top.\n\nFor example, to have the `mouseDown` method called on the target view when\na `mousedown` event is received from the browser, do the following:\n\n```javascript\nsetupHandler('mousedown', 'mouseDown');\n```\n\n","result":"Create a view .","score":[0.0,0.0123]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(klass) {\r\n    Ember.deprecate(\"nearestInstanceOf is deprecated and will be removed from future releases. Use nearestOfType.\");\r\n    var view = get(this, 'parentView');\r\n    while (view) {\r\n      if (view instanceof klass) { return view; }\r\n      view = get(view, 'parentView');\r\n    }\r\n  }","code-length":97,"reference":"Return the nearest ancestor that is an instance of the provided\nclass.\n\n","result":"Find the nearest instance of a class.","score":[0.1556,0.3235]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(property) {\r\n    var view = get(this, 'parentView');\r\n    while (view) {\r\n      if (property in view) { return view; }\r\n      view = get(view, 'parentView');\r\n    }\r\n  }","code-length":71,"reference":"Return the nearest ancestor that has a given property.\n\n","result":"Find the view that has the given property.","score":[0.2412,0.5011]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(klass) {\r\n    var view = get(this, 'parentView');\r\n    while (view) {\r\n      if (get(view, 'parentView') instanceof klass) { return view; }\r\n      view = get(view, 'parentView');\r\n    }\r\n  }","code-length":78,"reference":"Return the nearest ancestor whose parent is an instance of\n`klass`.\n\n","result":"Find the view that is a subclass of klass.","score":[0.1284,0.1389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(buffer) {\r\n    var template = get(this, 'layout') || get(this, 'template');\r\n    if (template) {\r\n      var context = get(this, 'context');\r\n      var keywords = this.cloneKeywords();\r\n      var output;\r\n      var data = {\r\n        view: this,\r\n        buffer: buffer,\r\n        isRenderData: true,\r\n        keywords: keywords,\r\n        insideGroup: get(this, 'templateData.insideGroup')\r\n      };\r\n      Ember.assert('template must be a function. Did you mean to call Ember.Handlebars.compile(\"...\") or specify templateName instead?', typeof template === 'function');\r\n      output = template(context, { data: data });\r\n      if (output !== undefined) { buffer.push(output); }\r\n    }\r\n  }","code-length":210,"reference":"Called on your view when it should push strings of HTML into a\n`Ember.RenderBuffer`. Most users will want to override the `template`\nor `templateName` properties instead of this method.\n\nBy default, `Ember.View` will look for a function in the `template`\nproperty and invoke it with the value of `context`. The value of\n`context` will be the view's controller unless you override it.\n\n","result":"Compile templates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        newClass = this._classStringForProperty(binding);\r\n        elem = this.$();\r\n        if (oldClass) {\r\n          elem.removeClass(oldClass);\r\n          classNames.removeObject(oldClass);\r\n        }\r\n        if (newClass) {\r\n          elem.addClass(newClass);\r\n          oldClass = newClass;\r\n        } else {\r\n          oldClass = null;\r\n        }\r\n      }","code-length":121,"reference":"Set up an observer on the context. If the property changes, toggle the class name.","result":"Create a new function to be bound to the element.","score":[0.0658,0.0345]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(buffer, attributeBindings) {\r\n    var attributeValue,\r\n        unspecifiedAttributeBindings = this._unspecifiedAttributeBindings = this._unspecifiedAttributeBindings || {};\r\n    a_forEach(attributeBindings, function(binding) {\r\n      var split = binding.split(':'),\r\n          property = split[0],\r\n          attributeName = split[1] || property;\r\n      if (property in this) {\r\n        this._setupAttributeBindingObservation(property, attributeName);\r\n        attributeValue = get(this, property);\r\n        Ember.View.applyAttributeBindings(buffer, attributeName, attributeValue);\r\n      } else {\r\n        unspecifiedAttributeBindings[property] = attributeName;\r\n      }\r\n    }, this);\r\n    this.setUnknownProperty = this._setUnknownProperty;\r\n  }","code-length":195,"reference":"Iterates through the view's attribute bindings, sets up observers for each,\nthen applies the current value of the attributes to the passed render buffer.\n\n","result":"Create a new buffer.","score":[0.0022,0.0227]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key, value) {\r\n    var attributeName = this._unspecifiedAttributeBindings && this._unspecifiedAttributeBindings[key];\r\n    if (attributeName) {\r\n      this._setupAttributeBindingObservation(key, attributeName);\r\n    }\r\n    defineProperty(this, key);\r\n    return set(this, key, value);\r\n  }","code-length":91,"reference":"Gets defined after initialization by _applyAttributeBindings","result":"Set a property.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(path) {\r\n    var split = path.split(':'),\r\n        propertyPath = split[0],\r\n        classNames = \"\",\r\n        className,\r\n        falsyClassName;\r\n    if (split.length > 1) {\r\n      className = split[1];\r\n      if (split.length === 3) { falsyClassName = split[2]; }\r\n      classNames = ':' + className;\r\n      if (falsyClassName) { classNames += \":\" + falsyClassName; }\r\n    }\r\n    return {\r\n      path: propertyPath,\r\n      classNames: classNames,\r\n      className: (className === '') ? undefined : className,\r\n      falsyClassName: falsyClassName\r\n    };\r\n  }","code-length":185,"reference":"Parse a path and return an object which holds the parsed properties.\n\nFor example a path like \"content.isEnabled:enabled:disabled\" will return the\nfollowing object:\n\n```javascript\n{\npath: \"content.isEnabled\",\nclassName: \"enabled\",\nfalsyClassName: \"disabled\",\nclassNames: \":enabled:disabled\"\n}\n```\n\n","result":"Create a path object.","score":[0.0002,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view, childView, options) {\r\n    var buffer = view.buffer, _childViews = view._childViews;\r\n    childView = view.createChildView(childView, options);\r\n    if (!_childViews.length) { _childViews = view._childViews = _childViews.slice(); }\r\n    _childViews.push(childView);\r\n    childView.renderToBuffer(buffer);\r\n    view.propertyDidChange('childViews');\r\n    return childView;\r\n  }","code-length":130,"reference":"when a view is rendered in a buffer, appending a child view will render that view and append the resulting buffer into its buffer.","result":"Create a child view.","score":[0.003,0.0852]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view) {\r\n    view.clearBuffer();\r\n    var viewCollection = view._notifyWillDestroyElement();\r\n    viewCollection.transitionTo('preRender', false);\r\n    return view;\r\n  }","code-length":60,"reference":"when a view is rendered in a buffer, destroying the element will simply destroy the buffer and put the state back into the preRender state.","result":"Create a view .","score":[0.0024,0.0437]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view) {\r\n    view.triggerRecursively('willClearRender');\r\n    view.clearRenderedChildren();\r\n    view.domManager.replace(view);\r\n    return view;\r\n  }","code-length":57,"reference":"once the view has been inserted into the DOM, rerendering is deferred to allow bindings to synchronize.","result":"Create a view .","score":[0.0124,0.0318]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view) {\r\n    view._notifyWillDestroyElement();\r\n    view.domManager.remove(view);\r\n    set(view, 'element', null);\r\n    if (view._scheduledInsert) {\r\n      Ember.run.cancel(view._scheduledInsert);\r\n      view._scheduledInsert = null;\r\n    }\r\n    return view;\r\n  }","code-length":97,"reference":"once the view is already in the DOM, destroying it removes it from the DOM, nukes its element, and puts it back into the preRender state if inDOM.","result":"Destroy the element.","score":[0.0001,0.0392]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view, eventName, evt) {\r\n    if (view.has(eventName)) {\r\n      return view.trigger(eventName, evt);\r\n    } else {\r\n      return true;\r\n    }\r\n  }","code-length":64,"reference":"Handle events from `Ember.EventDispatcher`","result":"Trigger events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(views, start, removed) {\r\n    this.propertyWillChange('childViews');\r\n    if (removed > 0) {\r\n      var changedViews = views.slice(start, start+removed);\r\n      this.currentState.childViewsWillChange(this, views, start, removed);\r\n      this.initializeViews(changedViews, null, null);\r\n    }\r\n  }","code-length":101,"reference":"When a child view is removed, destroy its element so that\nit is removed from the DOM.\n\nThe array observer that triggers this action is set up in the\n`renderToBuffer` method.\n\n","result":"Initialize child views.","score":[0.0,0.0177]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(views, start, removed, added) {\r\n    if (added > 0) {\r\n      var changedViews = views.slice(start, start+added);\r\n      this.initializeViews(changedViews, this, get(this, 'templateData'));\r\n      this.currentState.childViewsDidChange(this, views, start, added);\r\n    }\r\n    this.propertyDidChange('childViews');\r\n  }","code-length":110,"reference":"When a child view is added, make sure the DOM gets updated appropriately.\n\nIf the view has already rendered an element, we tell the child view to\ncreate an element and insert it into the DOM. If the enclosing container\nview has already written to a buffer, but not yet converted that buffer\ninto an element, we insert the string representation of the child into the\nappropriate place in the buffer.\n\n","result":"Trigger child views change.","score":[0.0,0.0156]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(content, start, removedCount) {\r\n    var emptyView = get(this, 'emptyView');\r\n    if (emptyView && emptyView instanceof Ember.View) {\r\n      emptyView.removeFromParent();\r\n    }\r\n    var childViews = this._childViews, childView, idx, len;\r\n    len = this._childViews.length;\r\n    var removingAll = removedCount === len;\r\n    if (removingAll) {\r\n      this.currentState.empty(this);\r\n      this.invokeRecursively(function(view) {\r\n        view.removedFromDOM = true;\r\n      }, false);\r\n    }\r\n    for (idx = start + removedCount - 1; idx >= start; idx--) {\r\n      childView = childViews[idx];\r\n      childView.destroy();\r\n    }\r\n  }","code-length":212,"reference":"Called when a mutation to the underlying content array will occur.\n\nThis method will remove any views that are no longer in the underlying\ncontent array.\n\nInvokes whenever the content array itself will change.\n\n","result":"Create a new function to be used in the browser.","score":[0.0166,0.0633]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(content, start, removed, added) {\r\n    var addedViews = [], view, item, idx, len, itemViewClass,\r\n      emptyView;\r\n    len = content ? get(content, 'length') : 0;\r\n    if (len) {\r\n      itemViewClass = get(this, 'itemViewClass');\r\n      if ('string' === typeof itemViewClass) {\r\n        itemViewClass = get(itemViewClass) || itemViewClass;\r\n      }\r\n      Ember.assert(fmt(\"itemViewClass must be a subclass of Ember.View, not %@\",\r\n                       [itemViewClass]),\r\n                       'string' === typeof itemViewClass || Ember.View.detect(itemViewClass));\r\n      for (idx = start; idx < start+added; idx++) {\r\n        item = content.objectAt(idx);\r\n        view = this.createChildView(itemViewClass, {\r\n          content: item,\r\n          contentIndex: idx\r\n        });\r\n        addedViews.push(view);\r\n      }\r\n    } else {\r\n      emptyView = get(this, 'emptyView');\r\n      if (!emptyView) { return; }\r\n      if ('string' === typeof emptyView) {\r\n        emptyView = get(emptyView) || emptyView;\r\n      }\r\n      emptyView = this.createChildView(emptyView);\r\n      addedViews.push(emptyView);\r\n      set(this, 'emptyView', emptyView);\r\n      if (Ember.CoreView.detect(emptyView)) {\r\n        this._createdEmptyView = emptyView;\r\n      }\r\n    }\r\n    this.replace(start, 0, addedViews);\r\n  }","code-length":417,"reference":"Called when a mutation to the underlying content array occurs.\n\nThis method will replay that mutation against the views that compose the\n`Ember.CollectionView`, ensuring that the view reflects the model.\n\nThis array observer is added in `contentDidChange`.\n\n","result":"Replace the content in a view.","score":[0.0016,0.059]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(action) {\r\n    var actionName,\r\n        contexts = a_slice.call(arguments, 1);\r\n    if (action === undefined) {\r\n      actionName = get(this, 'action');\r\n      Ember.assert(\"The default action was triggered on the component \" + this.toString() +\r\n                   \", but the action name (\" + actionName + \") was not a string.\",\r\n                   isNone(actionName) || typeof actionName === 'string');\r\n    } else {\r\n      actionName = get(this, action);\r\n      Ember.assert(\"The \" + action + \" action was triggered on the component \" +\r\n                   this.toString() + \", but the action name (\" + actionName +\r\n                   \") was not a string.\",\r\n                   isNone(actionName) || typeof actionName === 'string');\r\n    }\r\n    if (actionName === undefined) { return; }\r\n    this.triggerAction({\r\n      action: actionName,\r\n      actionContext: contexts\r\n    });\r\n  }","code-length":243,"reference":"Triggers a named action on the controller context where the component is used if\nthis controller has registered for notifications of the action.\n\nFor example a component for playing or pausing music may translate click events\ninto action notifications of \"play\" or \"stop\" depending on some internal state\nof the component:\n\n\n```javascript\nApp.PlayButtonComponent = Ember.Component.extend({\nclick: function(){\nif (this.get('isPlaying')) {\nthis.sendAction('play');\n} else {\nthis.sendAction('stop');\n}\n}\n});\n```\n\nWhen used inside a template these component actions are configured to\ntrigger actions in the outer application context:\n\n```handlebars\n{{! application.hbs }}\n{{play-button play=\"musicStarted\" stop=\"musicStopped\"}}\n```\n\nWhen the component receives a browser `click` event it translate this\ninteraction into application-specific semantics (\"play\" or \"stop\") and\ntriggers the specified action name on the controller for the template\nwhere the component is used:\n\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nactions: {\nmusicStarted: function(){\ncalled when the play button is clicked\nand the music started playing\n},\nmusicStopped: function(){\ncalled when the play button is clicked\nand the music stopped playing\n}\n}\n});\n```\n\nIf no action name is passed to `sendAction` a default name of \"action\"\nis assumed.\n\n```javascript\nApp.NextButtonComponent = Ember.Component.extend({\nclick: function(){\nthis.sendAction();\n}\n});\n```\n\n```handlebars\n{{! application.hbs }}\n{{next-button action=\"playNextSongInAlbum\"}}\n```\n\n```javascript\nApp.ApplicationController = Ember.Controller.extend({\nactions: {\nplayNextSongInAlbum: function(){\n...\n}\n}\n});\n```\n\n","result":"Trigger an action on the component.","score":[3.499e-16,0.0104]}
{"code":"\/*is used to<extra_id_0>\r\nfunction evaluateUnboundHelper(context, fn, normalizedProperties, options) {\r\n  var args = [],\r\n   hash = options.hash,\r\n   boundOptions = hash.boundOptions,\r\n   types = slice.call(options.types, 1),\r\n   loc,\r\n   len,\r\n   property,\r\n   propertyType,\r\n   boundOption;\r\n  for (boundOption in boundOptions) {\r\n    if (!boundOptions.hasOwnProperty(boundOption)) { continue; }\r\n    hash[boundOption] = Ember.Handlebars.get(context, boundOptions[boundOption], options);\r\n  }\r\n  for(loc = 0, len = normalizedProperties.length; loc < len; ++loc) {\r\n    property = normalizedProperties[loc];\r\n    propertyType = types[loc];\r\n    if(propertyType === \"ID\") {\r\n      args.push(Ember.Handlebars.get(property.root, property.path, options));\r\n    } else {\r\n      args.push(property.path);\r\n    }\r\n  }\r\n  args.push(options);\r\n  return fn.apply(context, args);\r\n}","code-length":283,"reference":"Renders the unbound form of an otherwise bound helper function.\n\n","result":"Evaluate the unbound helper function.","score":[0.1645,0.3947]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view) {\r\n    var morph = view.morph;\r\n    view.transitionTo('preRender');\r\n    Ember.run.schedule('render', this, function renderMetamorphView() {\r\n      if (view.isDestroying) { return; }\r\n      view.clearRenderedChildren();\r\n      var buffer = view.renderToBuffer();\r\n      view.invokeRecursively(function(view) {\r\n        view.propertyWillChange('element');\r\n      });\r\n      view.triggerRecursively('willInsertElement');\r\n      morph.replaceWith(buffer.string());\r\n      view.transitionTo('inDOM');\r\n      view.invokeRecursively(function(view) {\r\n        view.propertyDidChange('element');\r\n      });\r\n      view.triggerRecursively('didInsertElement');\r\n      notifyMutationListeners();\r\n    });\r\n  }","code-length":211,"reference":"This is messed up.","result":"Create a metamorph view .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bind(property, options, preserveContext, shouldDisplay, valueNormalizer, childProperties) {\r\n  var data = options.data,\r\n      fn = options.fn,\r\n      inverse = options.inverse,\r\n      view = data.view,\r\n      currentContext = this,\r\n      normalized, observer, i;\r\n  normalized = normalizePath(currentContext, property, data);\r\n  if ('object' === typeof this) {\r\n    if (data.insideGroup) {\r\n      observer = function() {\r\n        Ember.run.once(view, 'rerender');\r\n      };\r\n      var template, context, result = handlebarsGet(currentContext, property, options);\r\n      result = valueNormalizer ? valueNormalizer(result) : result;\r\n      context = preserveContext ? currentContext : result;\r\n      if (shouldDisplay(result)) {\r\n        template = fn;\r\n      } else if (inverse) {\r\n        template = inverse;\r\n      }\r\n      template(context, { data: options.data });\r\n    } else {\r\n      var bindView = view.createChildView(Ember._HandlebarsBoundView, {\r\n        preserveContext: preserveContext,\r\n        shouldDisplayFunc: shouldDisplay,\r\n        valueNormalizerFunc: valueNormalizer,\r\n        displayTemplate: fn,\r\n        inverseTemplate: inverse,\r\n        path: property,\r\n        pathRoot: currentContext,\r\n        previousContext: currentContext,\r\n        isEscaped: !options.hash.unescaped,\r\n        templateData: options.data\r\n      });\r\n      if (options.hash.controller) {\r\n        bindView.set('_contextController', this.container.lookupFactory('controller:'+options.hash.controller).create({\r\n          container: currentContext.container,\r\n          parentController: currentContext,\r\n          target: currentContext\r\n        }));\r\n      }\r\n      view.appendChild(bindView);\r\n      observer = function() {\r\n        Ember.run.scheduleOnce('render', bindView, 'rerenderIfNeeded');\r\n      };\r\n    }\r\n    if (normalized.path !== '') {\r\n      view.registerObserver(normalized.root, normalized.path, observer);\r\n      if (childProperties) {\r\n        for (i=0; i<childProperties.length; i++) {\r\n          view.registerObserver(normalized.root, normalized.path+'.'+childProperties[i], observer);\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    data.buffer.push(handlebarsGetEscaped(currentContext, property, options));\r\n  }\r\n}","code-length":623,"reference":"Binds a property into the DOM. This will create a hook in DOM that the KVO system will look for and update if the property changes.","result":"Code too long,keep in 512.","score":[0.0036,0.0209]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _addMetamorphCheck() {\r\n  Ember.Handlebars.EachView.reopen({\r\n    _checkMetamorph: Ember.on('didInsertElement', function() {\r\n      Ember.assert(\"The metamorph tags, \" +\r\n                   this.morph.start + \" and \" + this.morph.end +\r\n                   \", have different parents.\\nThe browser has fixed your template to output valid HTML (for example, check that you have properly closed all tags and have used a TBODY tag when creating a table with '{{#each}}')\",\r\n        document.getElementById( this.morph.start ).parentNode ===\r\n        document.getElementById( this.morph.end ).parentNode\r\n      );\r\n    })\r\n  });\r\n}","code-length":188,"reference":"Defeatureify doesn't seem to like nested functions that need to be removed","result":"Add the check for the metamorph .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        if (this.state) {\r\n          forEach(this.state.handlerInfos, function(handlerInfo) {\r\n            var handler = handlerInfo.handler;\r\n            if (handler.exit) {\r\n              handler.exit();\r\n            }\r\n          });\r\n        }\r\n        this.state = new TransitionState();\r\n        this.currentHandlerInfos = null;\r\n      }","code-length":106,"reference":"Clears the current and target route handlers and triggers exiton each of them starting at the leaf and traversing up throughits ancestors.","result":"Initialize the state.","score":[0.0007,0.0249]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    this.router = this.router || this.constructor.map(Ember.K);\r\n    var router = this.router,\r\n        location = get(this, 'location'),\r\n        container = this.container,\r\n        self = this,\r\n        initialURL = get(this, 'initialURL');\r\n          if (get(location, 'cancelRouterSetup')) {\r\n        return;\r\n      }\r\n        this._setupRouter(router, location);\r\n    container.register('view:default', DefaultView);\r\n    container.register('view:toplevel', Ember.View.extend());\r\n    location.onUpdateURL(function(url) {\r\n      self.handleURL(url);\r\n    });\r\n    if (typeof initialURL === \"undefined\") {\r\n      initialURL = location.getURL();\r\n    }\r\n    this.handleURL(initialURL);\r\n  }","code-length":225,"reference":"Initializes the current router instance and sets up the change handling\nevent listeners used by the instances `location` implementation.\n\nA property named `initialURL` will be used to determine the initial URL.\nIf no value is found `\/` will be used.\n\n","result":"Create a router.","score":[0,0.0138]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(context, transition) {\r\n    var controllerName = this.controllerName || this.routeName,\r\n        controller = this.controllerFor(controllerName, true);\r\n    if (!controller) {\r\n      controller =  this.generateController(controllerName, context);\r\n    }\r\n    this.controller = controller;\r\n        if (this.setupControllers) {\r\n      Ember.deprecate(\"Ember.Route.setupControllers is deprecated. Please use Ember.Route.setupController(controller, model) instead.\");\r\n      this.setupControllers(controller, context);\r\n    } else {\r\n              this.setupController(controller, context);\r\n          }\r\n    if (this.renderTemplates) {\r\n      Ember.deprecate(\"Ember.Route.renderTemplates is deprecated. Please use Ember.Route.renderTemplate(controller, model) instead.\");\r\n      this.renderTemplates(context);\r\n    } else {\r\n      this.renderTemplate(controller, context);\r\n    }\r\n  }","code-length":244,"reference":"This hook is the entry point for router.js\n\n","result":"Create a route .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(params, transition) {\r\n    var match, name, sawParams, value;\r\n    for (var prop in params) {\r\n      if (prop === 'queryParams') { continue; }\r\n      if (match = prop.match(\/^(.*)_id$\/)) {\r\n        name = match[1];\r\n        value = params[prop];\r\n      }\r\n      sawParams = true;\r\n    }\r\n    if (!name && sawParams) { return Ember.copy(params); }\r\n    else if (!name) {\r\n              if (transition.resolveIndex !== transition.state.handlerInfos.length-1) { return; }\r\n        var parentModel = transition.state.handlerInfos[transition.resolveIndex-1].context;\r\n        return parentModel;\r\n          }\r\n    return this.findModel(name, value);\r\n  }","code-length":211,"reference":"A hook you can implement to convert the URL into the model for\nthis route.\n\n```js\nApp.Router.map(function() {\nthis.resource('post', {path: '\/posts\/:post_id'});\n});\n```\n\nThe model for the `post` route is `App.Post.find(params.post_id)`.\n\nBy default, if your route has a dynamic segment ending in `_id`:\n\nThe model class is determined from the segment (`post_id`'s\nclass is `App.Post`)\nThe find method is called on the model class with the value of\nthe dynamic segment.\n\nNote that for routes with dynamic segments, this hook is only\nexecuted when entered via the URL. If the route is entered\nthrough a transition (e.g. when using the `link-to` Handlebars\nhelper), then a model context is already provided and this hook\nis not called. Routes without dynamic segments will always\nexecute the model hook.\n\nThis hook follows the asynchronous\/promise semantics\ndescribed in the documentation for `beforeModel`. In particular,\nif a promise returned from `model` fails, the error will be\nhandled by the `error` hook on `Ember.Route`.\n\nExample\n\n```js\nApp.PostRoute = Ember.Route.extend({\nmodel: function(params) {\nreturn App.Post.find(params.post_id);\n}\n});\n```\n\n","result":"Resolve models.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(model, params) {\r\n    if (params.length < 1) { return; }\r\n    if (!model) { return; }\r\n    var name = params[0], object = {};\r\n    if (\/_id$\/.test(name) && params.length === 1) {\r\n      object[name] = get(model, \"id\");\r\n    } else {\r\n      object = getProperties(model, params);\r\n    }\r\n    return object;\r\n  }","code-length":123,"reference":"A hook you can implement to convert the route's model into parameters\nfor the URL.\n\n```js\nApp.Router.map(function() {\nthis.resource('post', {path: '\/posts\/:post_id'});\n});\n\nApp.PostRoute = Ember.Route.extend({\nmodel: function(params) {\nthe server returns `{ id: 12 }`\nreturn jQuery.getJSON(\"\/posts\/\" + params.post_id);\n},\n\nserialize: function(model) {\nthis will make the URL `\/posts\/12`\nreturn { post_id: model.id };\n}\n});\n```\n\nThe default `serialize` method will insert the model's `id` into the\nroute's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\nIf the route has multiple dynamic segments or does not contain '_id', `serialize`\nwill return `Ember.getProperties(model, params)`\n\nThis method is called when `transitionTo` is called with a context\nin order to populate the URL.\n\n","result":"Create a new object.","score":[0.0,0.0049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, _skipAssert) {\r\n    var container = this.container,\r\n        route = container.lookup('route:'+name),\r\n        controller;\r\n    if (route && route.controllerName) {\r\n      name = route.controllerName;\r\n    }\r\n    controller = container.lookup('controller:' + name);\r\n    Ember.assert(\"The controller named '\"+name+\"' could not be found. Make sure \" +\r\n                 \"that this route exists and has already been entered at least \" +\r\n                 \"once. If you are accessing a controller not associated with a \" +\r\n                 \"route, make sure the controller class is explicitly defined.\",\r\n                 controller || _skipAssert === true);\r\n    return controller;\r\n  }","code-length":184,"reference":"Returns the controller for a particular route or name.\n\nThe controller instance must already have been created, either through entering the\nassociated route or using `generateController`.\n\n```js\nApp.PostRoute = Ember.Route.extend({\nsetupController: function(controller, post) {\nthis._super(controller, post);\nthis.controllerFor('posts').set('currentPost', post);\n}\n});\n```\n\n","result":"Create a controller .","score":[0.0,0.0268]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n    if (!options || typeof options === \"string\") {\r\n      var outletName = options;\r\n      options = {};\r\n      options.outlet = outletName;\r\n    }\r\n    options.parentView = options.parentView ? options.parentView.replace(\/\\\r\n    options.outlet = options.outlet || 'main';\r\n    var parentView = this.router._lookupActiveView(options.parentView);\r\n    if (parentView) { parentView.disconnectOutlet(options.outlet); }\r\n  }","code-length":144,"reference":"Disconnects a view that has been rendered into an outlet.\n\nYou may pass any or all of the following options to `disconnectOutlet`:\n\n`outlet`: the name of the outlet to clear (default: 'main')\n`parentView`: the name of the view containing the outlet to clear\n(default: the view rendered by the parent route)\n\nExample:\n\n```js\nApp.ApplicationRoute = App.Route.extend({\nactions: {\nshowModal: function(evt) {\nthis.render(evt.modalName, {\noutlet: 'modal',\ninto: 'application'\n});\n},\nhideModal: function(evt) {\nthis.disconnectOutlet({\noutlet: 'modal',\nparentView: 'application'\n});\n}\n}\n});\n```\n\nAlternatively, you can pass the `outlet` name directly as a string.\n\nExample:\n\n```js\nhideModal: function(evt) {\nthis.disconnectOutlet('modal');\n}\n```\n\n","result":"Disconnect the outlet.","score":[0.0,0.0164]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(){\r\n      var helperParameters = this.parameters,\r\n          linkTextPath     = helperParameters.options.linkTextPath,\r\n          paths = getResolvedPaths(helperParameters),\r\n          length = paths.length,\r\n          path, i, normalizedPath;\r\n      if (linkTextPath) {\r\n        normalizedPath = Ember.Handlebars.normalizePath(helperParameters.context, linkTextPath, helperParameters.options.data);\r\n        this.registerObserver(normalizedPath.root, normalizedPath.path, this, this.rerender);\r\n      }\r\n      for(i=0; i < length; i++) {\r\n        path = paths[i];\r\n        if (null === path) {\r\n          continue;\r\n        }\r\n        normalizedPath = Ember.Handlebars.normalizePath(helperParameters.context, path, helperParameters.options.data);\r\n        this.registerObserver(normalizedPath.root, normalizedPath.path, this, this._paramsChanged);\r\n      }\r\n      var queryParamsObject = this.queryParamsObject;\r\n      if (queryParamsObject) {\r\n        var values = queryParamsObject.values;\r\n        for (var k in values) {\r\n          if (!values.hasOwnProperty(k)) { continue; }\r\n          if (queryParamsObject.types[k] === 'ID') {\r\n            normalizedPath = Ember.Handlebars.normalizePath(helperParameters.context, values[k], helperParameters.options.data);\r\n            this.registerObserver(normalizedPath.root, normalizedPath.path, this, this._paramsChanged);\r\n          }\r\n        }\r\n      }\r\n    }","code-length":392,"reference":"This is called to setup observers that will trigger a rerender.\n\n","result":"RegisterHelperParametersObservers .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(event) {\r\n      if (!isSimpleClick(event)) { return true; }\r\n      if (this.preventDefault !== false) { event.preventDefault(); }\r\n      if (this.bubbles === false) { event.stopPropagation(); }\r\n      if (get(this, '_isDisabled')) { return false; }\r\n      if (get(this, 'loading')) {\r\n        Ember.Logger.warn(\"This link-to is in an inactive loading state because at least one of its parameters presently has a null\/undefined value, or the provided route name is invalid.\");\r\n        return false;\r\n      }\r\n      var router = get(this, 'router'),\r\n          routeArgs = get(this, 'routeArgs');\r\n      var transition;\r\n      if (get(this, 'replace')) {\r\n        transition = router.replaceWith.apply(router, routeArgs);\r\n      } else {\r\n        transition = router.transitionTo.apply(router, routeArgs);\r\n      }\r\n              var url = router.router.generate.apply(router.router, get(this, 'routeArgs'));\r\n        Ember.run.scheduleOnce('routerTransitions', this, this._eagerUpdateUrl, transition, url);\r\n          }","code-length":301,"reference":"Event handler that invokes the link, activating the associated route.\n\n","result":"Prevent the default action .","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var target = get(this, 'target'),\r\n        method = target.replaceRoute || target.replaceWith;\r\n    return method.apply(target, arguments);\r\n  }","code-length":56,"reference":"Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionToRoute` in all other respects.\n\n```javascript\naController.replaceRoute('blogPosts');\naController.replaceRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.replaceRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.replaceRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nresource tree.\n\n```javascript\nApp.Router.map(function() {\nthis.resource('blogPost', {path:':blogPostId'}, function(){\nthis.resource('blogComment', {path: ':blogCommentId'});\n});\n});\n\naController.replaceRoute('blogComment', aPost, aComment);\naController.replaceRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`\/`). This is intended for testing and debugging purposes and\nshould rarely be used in production code.\n\n```javascript\naController.replaceRoute('\/');\naController.replaceRoute('\/blog\/post\/1\/comment\/13');\n```\n\n","result":"Replace routes.","score":[0,0.0033]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(outletName, view) {\r\n    var existingView = get(this, '_outlets.'+outletName);\r\n    return existingView &&\r\n      existingView.constructor === view.constructor &&\r\n      existingView.get('template') === view.get('template') &&\r\n      existingView.get('context') === view.get('context');\r\n  }","code-length":96,"reference":"Determines if the view has already been created by checking if\nthe view has the same constructor, template, and context as the\nview in the `_outlets` object.\n\n","result":"Test the existence of the outlet.","score":[0.0069,0.0402]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this.isDestroyed) return;\r\n    var outlets = get(this, '_outlets');\r\n    var pendingDisconnections = this._pendingDisconnections;\r\n    this._pendingDisconnections = null;\r\n    for (var outletName in pendingDisconnections) {\r\n      set(outlets, outletName, null);\r\n    }\r\n  }","code-length":101,"reference":"Gets an outlet that is pending disconnection and then\nnullifys the object on the `_outlet` object.\n\n","result":"Destroy the component.","score":[0.0054,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    var href = (this._location || this.location).href,\r\n        hashIndex = href.indexOf('#');\r\n    if (hashIndex === -1) {\r\n      return '';\r\n    } else {\r\n      return href.substr(hashIndex);\r\n    }\r\n  }","code-length":83,"reference":"Returns the current `location.hash` by parsing location.href since browsers\ninconsistently URL-decode `location.hash`.\n\nhttps:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=483304\n\n","result":"Create a new function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(path) {\r\n    var state = { path: path };\r\n    get(this, 'history').replaceState(state, null, path);\r\n    if (!supportsHistoryState) {\r\n      this._historyState = state;\r\n    }\r\n    this._previousURL = this.getURL();\r\n  }","code-length":86,"reference":"Replaces the current state.\n\n","result":"Replace the state.","score":[0.3479,0.6553]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback) {\r\n    var guid = Ember.guidFor(this),\r\n        self = this;\r\n    Ember.$(window).on('popstate.ember-location-'+guid, function(e) {\r\n      if (!popstateFired) {\r\n        popstateFired = true;\r\n        if (self.getURL() === self._previousURL) { return; }\r\n      }\r\n      callback(self.getURL());\r\n    });\r\n  }","code-length":122,"reference":"Register a callback to be invoked whenever the browser\nhistory changes, including using forward and back buttons.\n\n","result":"Create a location.","score":[0.0038,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (options) {\r\n      if (options && options.rootURL) {\r\n        Ember.assert('rootURL must end with a trailing forward slash e.g. \"\/app\/\"', options.rootURL.charAt(options.rootURL.length-1) === '\/');\r\n        this.rootURL = options.rootURL;\r\n      }\r\n      var historyPath, hashPath,\r\n          cancelRouterSetup = false,\r\n          implementationClass = this._NoneLocation,\r\n          currentPath = this._getFullPath();\r\n      if (this._getSupportsHistory()) {\r\n        historyPath = this._getHistoryPath();\r\n        if (currentPath === historyPath) {\r\n          implementationClass = this._HistoryLocation;\r\n        } else {\r\n          cancelRouterSetup = true;\r\n          this._replacePath(historyPath);\r\n        }\r\n      } else if (this._getSupportsHashChange()) {\r\n        hashPath = this._getHashPath();\r\n        if (currentPath === hashPath || (currentPath === '\/' && hashPath === '\/#\/')) {\r\n          implementationClass = this._HashLocation;\r\n        } else {\r\n          cancelRouterSetup = true;\r\n          this._replacePath(hashPath);\r\n        }\r\n      }\r\n      var implementation = implementationClass.create.apply(implementationClass, arguments);\r\n      if (cancelRouterSetup) {\r\n        set(implementation, 'cancelRouterSetup', true);\r\n      }\r\n      return implementation;\r\n    }","code-length":358,"reference":"Selects the best location option based off browser support and returns an\ninstance of that Location class.\n\n","result":"Create a new location.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fullName) {\r\n    var parsedName = this.parseName(fullName),\r\n        resolveMethodName = parsedName.resolveMethodName;\r\n    if (!(parsedName.name && parsedName.type)) {\r\n      throw new TypeError(\"Invalid fullName: `\" + fullName + \"`, must be of the form `type:name` \");\r\n    }\r\n    if (this[resolveMethodName]) {\r\n      var resolved = this[resolveMethodName](parsedName);\r\n      if (resolved) { return resolved; }\r\n    }\r\n    return this.resolveOther(parsedName);\r\n  }","code-length":148,"reference":"This method is called via the container's resolver method.\nIt parses the provided `fullName` and then looks up and\nreturns the appropriate template or class.\n\n","result":"Return fullName.","score":[0,0.022]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(parsedName) {\r\n    var templateName = parsedName.fullNameWithoutType.replace(\/\\.\/g, '\/');\r\n    if (Ember.TEMPLATES[templateName]) {\r\n      return Ember.TEMPLATES[templateName];\r\n    }\r\n    templateName = decamelize(templateName);\r\n    if (Ember.TEMPLATES[templateName]) {\r\n      return Ember.TEMPLATES[templateName];\r\n    }\r\n  }","code-length":115,"reference":"Look up the template in Ember.TEMPLATES\n\n","result":"Create a template.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this.Router === false) { return; }\r\n    var container = this.__container__;\r\n    if (this.Router) {\r\n      container.unregister('router:main');\r\n      container.register('router:main', this.Router);\r\n    }\r\n    return container.lookupFactory('router:main');\r\n  }","code-length":96,"reference":"If the application has not opted out of routing and has not explicitly\ndefined a router, supply a default router for the application author\nto configure.\n\nThis allows application developers to do:\n\n```javascript\nvar App = Ember.Application.create();\n\nApp.Router.map(function() {\nthis.resource('posts');\n});\n```\n\n","result":"Create a factory for the router.","score":[0.0007,0.0666]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var self = this;\r\n    if (!this.$ || this.$.isReady) {\r\n      Ember.run.schedule('actions', self, '_initialize');\r\n    } else {\r\n      this.$().ready(function runInitialize() {\r\n        Ember.run(self, '_initialize');\r\n      });\r\n    }\r\n  }","code-length":94,"reference":"Automatically initialize the application once the DOM has\nbecome ready.\n\nThe initialization itself is scheduled on the actions queue\nwhich ensures that application loading finishes before\nbooting.\n\nIf you are asynchronously loading code, you should call\n`deferReadiness()` to defer booting, and then call\n`advanceReadiness()` once all of your code has finished\nloading.\n\n","result":"Initialize the object.","score":[0.0,0.0212]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    Ember.assert(\"You must call advanceReadiness on an instance of Ember.Application\", this instanceof Ember.Application);\r\n    this._readinessDeferrals--;\r\n    if (this._readinessDeferrals === 0) {\r\n      Ember.run.once(this, this.didBecomeReady);\r\n    }\r\n  }","code-length":94,"reference":"Call `advanceReadiness` after any asynchronous setup logic has completed.\nEach call to `deferReadiness` must be matched by a call to `advanceReadiness`\nor the application will never become ready and routing will not begin.\n\n","result":"Create a new application.","score":[0.0002,0.0166]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var customEvents = get(this, 'customEvents'),\r\n        rootElement = get(this, 'rootElement'),\r\n        dispatcher = this.__container__.lookup('event_dispatcher:main');\r\n    set(this, 'eventDispatcher', dispatcher);\r\n    dispatcher.setup(customEvents, rootElement);\r\n  }","code-length":86,"reference":"Setup up the event dispatcher to receive events on the\napplication's `rootElement` with any registered\n`customEvents`.\n\n","result":"Create the event dispatcher.","score":[0.0225,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(namespace) {\r\n    var container = new Ember.Container();\r\n    Ember.Container.defaultContainer = new DeprecatedContainer(container);\r\n    container.set = Ember.set;\r\n    container.resolver  = resolverFor(namespace);\r\n    container.normalize = container.resolver.normalize;\r\n    container.describe  = container.resolver.describe;\r\n    container.makeToString = container.resolver.makeToString;\r\n    container.optionsForType('component', { singleton: false });\r\n    container.optionsForType('view', { singleton: false });\r\n    container.optionsForType('template', { instantiate: false });\r\n    container.optionsForType('helper', { instantiate: false });\r\n    container.register('application:main', namespace, { instantiate: false });\r\n    container.register('controller:basic', Ember.Controller, { instantiate: false });\r\n    container.register('controller:object', Ember.ObjectController, { instantiate: false });\r\n    container.register('controller:array', Ember.ArrayController, { instantiate: false });\r\n    container.register('route:basic', Ember.Route, { instantiate: false });\r\n    container.register('event_dispatcher:main', Ember.EventDispatcher);\r\n    container.register('router:main',  Ember.Router);\r\n    container.injection('router:main', 'namespace', 'application:main');\r\n          container.register('location:auto', Ember.AutoLocation);\r\n        container.register('location:hash', Ember.HashLocation);\r\n    container.register('location:history', Ember.HistoryLocation);\r\n    container.register('location:none', Ember.NoneLocation);\r\n    container.injection('controller', 'target', 'router:main');\r\n    container.injection('controller', 'namespace', 'application:main');\r\n    container.injection('route', 'router', 'router:main');\r\n    container.injection('location', 'rootURL', '-location-setting:root-url');\r\n    container.register('resolver-for-debugging:main', container.resolver.__resolver__, { instantiate: false });\r\n    container.injection('container-debug-adapter:main', 'resolver', 'resolver-for-debugging:main');\r\n    container.injection('data-adapter:main', 'containerDebugAdapter', 'container-debug-adapter:main');\r\n    container.register('container-debug-adapter:main', Ember.ContainerDebugAdapter);\r\n    return container;\r\n  }","code-length":571,"reference":"This creates a container with the default Ember naming conventions.\n\nIt also configures the container:\n\nregistered views are created every time they are looked up (they are\nnot singletons)\nregistered templates are not factories; the registered value is\nreturned directly.\nthe router receives the application as its `namespace` property\nall controllers receive the router as their `target` and `controllers`\nproperties\nall controllers receive the application as their `namespace` property\nthe application view receives the application controller as its\n`controller` property\nthe application view receives the application template as its\n`defaultTemplate` property\n\n","result":"Code too long,keep in 512.","score":[0,0.0061]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, recordsAdded, recordsUpdated, recordsRemoved) {\r\n    var self = this, releaseMethods = Ember.A(), records = this.getRecords(type), release;\r\n    var recordUpdated = function(updatedRecord) {\r\n      recordsUpdated([updatedRecord]);\r\n    };\r\n    var recordsToSend = records.map(function(record) {\r\n      releaseMethods.push(self.observeRecord(record, recordUpdated));\r\n      return self.wrapRecord(record);\r\n    });\r\n    var contentDidChange = function(array, idx, removedCount, addedCount) {\r\n      for (var i = idx; i < idx + addedCount; i++) {\r\n        var record = array.objectAt(i);\r\n        var wrapped = self.wrapRecord(record);\r\n        releaseMethods.push(self.observeRecord(record, recordUpdated));\r\n        recordsAdded([wrapped]);\r\n      }\r\n      if (removedCount) {\r\n        recordsRemoved(idx, removedCount);\r\n      }\r\n    };\r\n    var observer = { didChange: contentDidChange, willChange: Ember.K };\r\n    records.addArrayObserver(self, observer);\r\n    release = function() {\r\n      releaseMethods.forEach(function(fn) { fn(); });\r\n      records.removeArrayObserver(self, observer);\r\n      self.releaseMethods.removeObject(release);\r\n    };\r\n    recordsAdded(recordsToSend);\r\n    this.releaseMethods.pushObject(release);\r\n    return release;\r\n  }","code-length":376,"reference":"Fetch the records of a given type and observe them for changes.\n\n","result":"Create a new object to hold the records.","score":[0.1002,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, typesUpdated) {\r\n    var self = this, records = this.getRecords(type);\r\n    var onChange = function() {\r\n      typesUpdated([self.wrapModelType(type)]);\r\n    };\r\n    var observer = {\r\n      didChange: function() {\r\n        Ember.run.scheduleOnce('actions', this, onChange);\r\n      },\r\n      willChange: Ember.K\r\n    };\r\n    records.addArrayObserver(this, observer);\r\n    var release = function() {\r\n      records.removeArrayObserver(self, observer);\r\n    };\r\n    return release;\r\n  }","code-length":163,"reference":"Adds observers to a model type class.\n\n","result":"Create a new model.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var namespaces = Ember.A(Ember.Namespace.NAMESPACES), types = Ember.A();\r\n    namespaces.forEach(function(namespace) {\r\n      for (var key in namespace) {\r\n        if (!namespace.hasOwnProperty(key)) { continue; }\r\n        var name = Ember.String.dasherize(key);\r\n        if (!(namespace instanceof Ember.Application) && namespace.toString()) {\r\n          name = namespace + '\/' + name;\r\n        }\r\n        types.push(name);\r\n      }\r\n    });\r\n    return types;\r\n  }","code-length":152,"reference":"Loops over all namespaces and all objects\nattached to them\n\n","result":"Generate the types for the application.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(context, callback) {\r\n    if (arguments.length === 1) {\r\n      callback = context;\r\n      context = null;\r\n    }\r\n    if (!this.waiters) {\r\n      this.waiters = Ember.A();\r\n    }\r\n    this.waiters.push([context, callback]);\r\n  }","code-length":91,"reference":"This allows ember-testing to play nicely with other asynchronous\nevents, such as an application that is waiting for a CSS3\ntransition or an IndexDB transaction.\n\nFor example:\n\n```javascript\nEmber.Test.registerWaiter(function() {\nreturn myPendingTransactions() == 0;\n});\n```\nThe `context` argument allows you to optionally specify the `this`\nwith which your callback will be invoked.\n\nFor example:\n\n```javascript\nEmber.Test.registerWaiter(MyDB, MyDB.hasPendingTransactions);\n```\n\n","result":"Wait for the given context.","score":[0.0,0.0373]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(context, callback) {\r\n    var pair;\r\n    if (!this.waiters) { return; }\r\n    if (arguments.length === 1) {\r\n      callback = context;\r\n      context = null;\r\n    }\r\n    pair = [context, callback];\r\n    this.waiters = Ember.A(this.waiters.filter(function(elt) {\r\n      return Ember.compare(elt, pair)!==0;\r\n    }));\r\n  }","code-length":125,"reference":"`unregisterWaiter` is used to unregister a callback that was\nregistered with `registerWaiter`.\n\n","result":"Wait for a given context.","score":[0.0593,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    for (var name in helpers) {\r\n      this.helperContainer[name] = this.originalMethods[name];\r\n      delete this.testHelpers[name];\r\n      delete this.originalMethods[name];\r\n    }\r\n  }","code-length":71,"reference":"This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.\n\nExample:\n\n```javascript\nApp.removeTestHelpers();\n```\n\n","result":"Test the code.","score":[0.0007,0.0249]}
{"code":"\/*is used to<extra_id_0>\r\nfunction protoWrap(proto, name, callback, isAsync) {\r\n  proto[name] = function() {\r\n    var args = arguments;\r\n    if (isAsync) {\r\n      return callback.apply(this, args);\r\n    } else {\r\n      return this.then(function() {\r\n        return callback.apply(this, args);\r\n      });\r\n    }\r\n  };\r\n}","code-length":108,"reference":"This method is no longer needed But still here for backwards compatibility of helper chaining","result":"Wrap methods in a proto.","score":[0,0.0357]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toPropertyDescriptor(obj) {\r\n  if (Object(obj) !== obj) {\r\n    throw new TypeError(\"property descriptor should be an Object, given: \"+\r\n                        obj);\r\n  }\r\n  var desc = {};\r\n  if ('enumerable' in obj) { desc.enumerable = !!obj.enumerable; }\r\n  if ('configurable' in obj) { desc.configurable = !!obj.configurable; }\r\n  if ('value' in obj) { desc.value = obj.value; }\r\n  if ('writable' in obj) { desc.writable = !!obj.writable; }\r\n  if ('get' in obj) {\r\n    var getter = obj.get;\r\n    if (getter !== undefined && typeof getter !== \"function\") {\r\n      throw new TypeError(\"property descriptor 'get' attribute must be \"+\r\n                          \"callable or undefined, given: \"+getter);\r\n    }\r\n    desc.get = getter;\r\n  }\r\n  if ('set' in obj) {\r\n    var setter = obj.set;\r\n    if (setter !== undefined && typeof setter !== \"function\") {\r\n      throw new TypeError(\"property descriptor 'set' attribute must be \"+\r\n                          \"callable or undefined, given: \"+setter);\r\n    }\r\n    desc.set = setter;\r\n  }\r\n  if ('get' in desc || 'set' in desc) {\r\n    if ('value' in desc || 'writable' in desc) {\r\n      throw new TypeError(\"property descriptor cannot be both a data and an \"+\r\n                          \"accessor descriptor: \"+obj);\r\n    }\r\n  }\r\n  return desc;\r\n}","code-length":401,"reference":"Adapted from ES5 section 8.10.5","result":"Convert object to property descriptor.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizePropertyDescriptor(attributes) {\r\n  var desc = toPropertyDescriptor(attributes);\r\n  for (var name in attributes) {\r\n    if (!isStandardAttribute(name)) {\r\n      Object.defineProperty(desc, name,\r\n        { value: attributes[name],\r\n          writable: true,\r\n          enumerable: true,\r\n          configurable: true });\r\n    }\r\n  }\r\n  return desc;\r\n}","code-length":112,"reference":"Returns a fresh property descriptor whose standardattributes are guaranteed to be data properties of the right type.","result":"Normalize property descriptors.","score":[0.0038,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isCompatibleDescriptor(extensible, current, desc) {\r\n  if (current === undefined && extensible === false) {\r\n    return false;\r\n  }\r\n  if (current === undefined && extensible === true) {\r\n    return true;\r\n  }\r\n  if (isEmptyDescriptor(desc)) {\r\n    return true;\r\n  }\r\n  if (isEquivalentDescriptor(current, desc)) {\r\n    return true;\r\n  }\r\n  if (current.configurable === false) {\r\n    if (desc.configurable === true) {\r\n      return false;\r\n    }\r\n    if ('enumerable' in desc && desc.enumerable !== current.enumerable) {\r\n      return false;\r\n    }\r\n  }\r\n  if (isGenericDescriptor(desc)) {\r\n    return true;\r\n  }\r\n  if (isDataDescriptor(current) !== isDataDescriptor(desc)) {\r\n    if (current.configurable === false) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  if (isDataDescriptor(current) && isDataDescriptor(desc)) {\r\n    if (current.configurable === false) {\r\n      if (current.writable === false && desc.writable === true) {\r\n        return false;\r\n      }\r\n      if (current.writable === false) {\r\n        if ('value' in desc && !sameValue(desc.value, current.value)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  if (isAccessorDescriptor(current) && isAccessorDescriptor(desc)) {\r\n    if (current.configurable === false) {\r\n      if ('set' in desc && !sameValue(desc.set, current.set)) {\r\n        return false;\r\n      }\r\n      if ('get' in desc && !sameValue(desc.get, current.get)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}","code-length":505,"reference":"without actually defining the property.","result":"Detect if a descriptor is compatible with another descriptor.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(trapName) {\r\n    var trap = this.handler[trapName];\r\n    if (trap === undefined) {\r\n      return undefined;\r\n    }\r\n    if (typeof trap !== \"function\") {\r\n      throw new TypeError(trapName + \" trap is not callable: \"+trap);\r\n    }\r\n    return trap;\r\n  }","code-length":93,"reference":"If getTrap returns undefined, the caller should perform thedefault forwarding behavior.","result":"Create a trap function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name) {\r\n    var handler = this;\r\n    if (!handler.has(name)) return undefined;\r\n    return {\r\n      get: function() {\r\n        return handler.get(this, name);\r\n      },\r\n      set: function(val) {\r\n        if (handler.set(this, name, val)) {\r\n          return val;\r\n        } else {\r\n          throw new TypeError(\"failed assignment to \"+name);\r\n        }\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    };\r\n  }","code-length":146,"reference":"In the direct proxies design with refactored prototype climbing,of calling this trap, the get, set, has or enumerate traps arecalled instead.","result":"Define a property on a class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var trap = this.getTrap(\"freeze\");\r\n    if (trap === undefined) {\r\n      return Reflect.freeze(this.target);\r\n    }\r\n    var success = trap.call(this.handler, this.target);\r\n    success = !!success;\r\n    if (success) {\r\n      if (!Object_isFrozen(this.target)) {\r\n        throw new TypeError(\"can't report non-frozen object as frozen: \"+\r\n                            this.target);\r\n      }\r\n    }\r\n    return success;\r\n  }","code-length":146,"reference":"On success, check whether the target object is indeed frozen.","result":"Report frozen objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var trap = this.getTrap(\"seal\");\r\n    if (trap === undefined) {\r\n      return Reflect.seal(this.target);\r\n    }\r\n    var success = trap.call(this.handler, this.target);\r\n    success = !!success;\r\n    if (success) {\r\n      if (!Object_isSealed(this.target)) {\r\n        throw new TypeError(\"can't report non-sealed object as sealed: \"+\r\n                            this.target);\r\n      }\r\n    }\r\n    return success;\r\n  }","code-length":150,"reference":"On success, check whether the target object is indeed sealed.","result":"Report object as sealed.","score":[0.0848,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var trap = this.getTrap(\"preventExtensions\");\r\n    if (trap === undefined) {\r\n      return Reflect.preventExtensions(this.target);\r\n    }\r\n    var success = trap.call(this.handler, this.target);\r\n    success = !!success;\r\n    if (success) {\r\n      if (Object_isExtensible(this.target)) {\r\n        throw new TypeError(\"can't report extensible object as non-extensible: \"+\r\n                            this.target);\r\n      }\r\n    }\r\n    return success;\r\n  }","code-length":153,"reference":"On success, check whether the target object is indeed non-extensible.","result":"Prevent extensions .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name) {\r\n    \"use strict\";\r\n    var trap = this.getTrap(\"deleteProperty\");\r\n    if (trap === undefined) {\r\n      return Reflect.deleteProperty(this.target, name);\r\n    }\r\n    name = String(name);\r\n    var res = trap.call(this.handler, this.target, name);\r\n    res = !!res;\r\n    if (res === true) {\r\n      if (isSealed(name, this.target)) {\r\n        throw new TypeError(\"property '\"+name+\"' is non-configurable \"+\r\n                            \"and can't be deleted\");\r\n      }\r\n    }\r\n    return res;\r\n  }","code-length":176,"reference":"If name denotes a sealed property, check whether handler rejects.","result":"Delete a property.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var trap = this.getTrap(\"iterate\");\r\n    if (trap === undefined) {\r\n      return Reflect.iterate(this.target);\r\n    }\r\n    var trapResult = trap.call(this.handler, this.target);\r\n    if (Object(trapResult) !== trapResult) {\r\n      throw new TypeError(\"iterate trap should return an iterator object, \"+\r\n                          \"got: \"+ trapResult);\r\n    }\r\n    return trapResult;\r\n  }","code-length":127,"reference":"The iterate trap should return an iterator object.","result":"Create an iterator .","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var trap = this.getTrap(\"keys\");\r\n    if (trap === undefined) {\r\n      return Reflect.keys(this.target);\r\n    }\r\n    var trapResult = trap.call(this.handler, this.target);\r\n    var propNames = Object.create(null);\r\n    var numProps = +trapResult.length;\r\n    var result = new Array(numProps);\r\n    for (var i = 0; i < numProps; i++) {\r\n     var s = String(trapResult[i]);\r\n     if (propNames[s]) {\r\n       throw new TypeError(\"keys trap cannot list a \"+\r\n                           \"duplicate property '\"+s+\"'\");\r\n     }\r\n     if (!Object.isExtensible(this.target) && !isFixed(s, this.target)) {\r\n       throw new TypeError(\"keys trap cannot list a new \"+\r\n                           \"property '\"+s+\"' on a non-extensible object\");\r\n     }\r\n     propNames[s] = true;\r\n     result[i] = s;\r\n    }\r\n    var ownEnumerableProps = Object.keys(this.target);\r\n    var target = this.target;\r\n    ownEnumerableProps.forEach(function (ownEnumerableProp) {\r\n      if (!propNames[ownEnumerableProp]) {\r\n        if (isSealed(ownEnumerableProp, target)) {\r\n          throw new TypeError(\"keys trap failed to include \"+\r\n                              \"non-configurable enumerable property '\"+\r\n                              ownEnumerableProp+\"'\");\r\n        }\r\n        if (!Object.isExtensible(target) &&\r\n            isFixed(ownEnumerableProp, target)) {\r\n            throw new TypeError(\"cannot report existing own property '\"+\r\n                                ownEnumerableProp+\"' as non-existent on a \"+\r\n                                \"non-extensible object\");\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }","code-length":478,"reference":"in the trap result give rise to a TypeError.","result":"Trap keys on objects.","score":[0,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var trap = this.getTrap(\"ownKeys\");\r\n    if (trap === undefined) {\r\n      return Reflect.ownKeys(this.target);\r\n    }\r\n    var trapResult = trap.call(this.handler, this.target);\r\n    if (trapResult === null || typeof trapResult !== \"object\") {\r\n      throw new TypeError(\"ownKeys should return an iterator object, got \" +\r\n                          trapResult);\r\n    }\r\n    return trapResult;\r\n  }","code-length":130,"reference":"In ES6, this trap is called for all operations that require a listand Object.keys.","result":"Get the iterator object for the target object.","score":[0.0656,0.0373]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeUnwrapping0ArgMethod(primitive) {\r\n  return function builtin() {\r\n    var vHandler = safeWeakMapGet(directProxies, this);\r\n    if (vHandler !== undefined) {\r\n      return builtin.call(vHandler.target);\r\n    } else {\r\n      return primitive.call(this);\r\n    }\r\n  }\r\n}","code-length":99,"reference":"returns a new function of zero arguments that recursively unwraps any proxies specified as the |this|-value. The primitive is assumed to be a zero-argument method that uses its |this|-binding.","result":"Arguments in a method.","score":[0.0006,0.0377]}
{"code":"\/*is used to<extra_id_0>\r\nfunction load(obj) {\r\n  var name, root;\r\n  root = typeof global !== \"undefined\" && global !== null ? global : this;\r\n  for(name in obj) {\r\n    if(obj.hasOwnProperty(name)) {\r\n      root[name] = obj[name];\r\n    }\r\n  }\r\n}","code-length":89,"reference":"load all the contract identifiers into the global scope","result":"Load the object.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, options) {\r\n    var json = {};\r\n    if (options && options.includeId) {\r\n      var id = get(record, 'id');\r\n      if (id) {\r\n        json[get(this, 'primaryKey')] = id;\r\n      }\r\n    }\r\n    record.eachAttribute(function(key, attribute) {\r\n      this.serializeAttribute(record, json, key, attribute);\r\n    }, this);\r\n    record.eachRelationship(function(key, relationship) {\r\n      if (relationship.kind === 'belongsTo') {\r\n        this.serializeBelongsTo(record, json, relationship);\r\n      } else if (relationship.kind === 'hasMany') {\r\n        this.serializeHasMany(record, json, relationship);\r\n      }\r\n    }, this);\r\n    return json;\r\n  }","code-length":215,"reference":"SERIALIZE \nCalled when a record is saved in order to convert the\nrecord into JSON.\n\nBy default, it creates a JSON object with a key for\neach attribute and belongsTo relationship.\n\nFor example, consider this model:\n\n```javascript\nApp.Comment = DS.Model.extend({\ntitle: DS.attr(),\nbody: DS.attr(),\n\nauthor: DS.belongsTo('user')\n});\n```\n\nThe default serialization would create a JSON object like:\n\n```javascript\n{\n\"title\": \"Rails is unagi\",\n\"body\": \"Rails? Omakase? O_O\",\n\"author\": 12\n}\n```\n\nBy default, attributes are passed through as-is, unless\nyou specified an attribute type (`DS.attr('date')`). If\nyou specify a transform, the JavaScript value will be\nserialized when inserted into the JSON hash.\n\nBy default, belongs-to relationships are converted into\nIDs when inserted into the JSON hash.\n\n## IDs\n\n`serialize` takes an options hash with a single option:\n`includeId`. If this option is `true`, `serialize` will,\nby default include the ID in the JSON object it builds.\n\nThe adapter passes in `includeId: true` when serializing\na record for `createRecord`, but not for `updateRecord`.\n\n## Customization\n\nYour server may expect a different JSON format than the\nbuilt-in serialization format.\n\nIn that case, you can implement `serialize` yourself and\nreturn a JSON hash of your choosing.\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserialize: function(post, options) {\nvar json = {\nPOST_TTL: post.get('title'),\nPOST_BDY: post.get('body'),\nPOST_CMS: post.get('comments').mapProperty('id')\n}\n\nif (options.includeId) {\njson.POST_ID_ = post.get('id');\n}\n\nreturn json;\n}\n});\n```\n\n## Customizing an App-Wide Serializer\n\nIf you want to define a serializer for your entire\napplication, you'll probably want to use `eachAttribute`\nand `eachRelationship` on the record.\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\nserialize: function(record, options) {\nvar json = {};\n\nrecord.eachAttribute(function(name) {\njson[serverAttributeName(name)] = record.get(name);\n})\n\nrecord.eachRelationship(function(name, relationship) {\nif (relationship.kind === 'hasMany') {\njson[serverHasManyName(name)] = record.get(name).mapBy('id');\n}\n});\n\nif (options.includeId) {\njson.ID_ = record.get('id');\n}\n\nreturn json;\n}\n});\n\nfunction serverAttributeName(attribute) {\nreturn attribute.underscore().toUpperCase();\n}\n\nfunction serverHasManyName(name) {\nreturn serverAttributeName(name.singularize()) + \"_IDS\";\n}\n```\n\nThis serializer will generate JSON that looks like this:\n\n```javascript\n{\n\"TITLE\": \"Rails is omakase\",\n\"BODY\": \"Yep. Omakase.\",\n\"COMMENT_IDS\": [ 1, 2, 3 ]\n}\n```\n\n## Tweaking the Default JSON\n\nIf you just want to do some small tweaks on the default JSON,\nyou can call super first and make the tweaks on the returned\nJSON.\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserialize: function(record, options) {\nvar json = this._super.apply(this, arguments);\n\njson.subject = json.title;\ndelete json.title;\n\nreturn json;\n}\n});\n```\n\n","result":"Serialize a record.","score":[8.948e-57,0.0043]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, json, key, attribute) {\r\n    var attrs = get(this, 'attrs');\r\n    var value = get(record, key), type = attribute.type;\r\n    if (type) {\r\n      var transform = this.transformFor(type);\r\n      value = transform.serialize(value);\r\n    }\r\n    key = attrs && attrs[key] || (this.keyForAttribute ? this.keyForAttribute(key) : key);\r\n    json[key] = value;\r\n  }","code-length":131,"reference":"`serializeAttribute` can be used to customize how `DS.attr`\nproperties are serialized\n\nFor example if you wanted to ensure all you attributes were always\nserialized as properties on an `attributes` object you could\nwrite:\n\n```javascript\nApp.ApplicationSerializer = DS.JSONSerializer.extend({\nserializeAttribute: function(record, json, key, attributes) {\njson.attributes = json.attributes || {};\nthis._super(record, json.attributes, key, attributes);\n}\n});\n```\n\n","result":"Serialize the record.","score":[0,0.01]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, json, relationship) {\r\n    var key = relationship.key;\r\n    var belongsTo = get(record, key);\r\n    key = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\") : key;\r\n    if (isNone(belongsTo)) {\r\n      json[key] = belongsTo;\r\n    } else {\r\n      json[key] = get(belongsTo, 'id');\r\n    }\r\n    if (relationship.options.polymorphic) {\r\n      this.serializePolymorphicType(record, json, relationship);\r\n    }\r\n  }","code-length":153,"reference":"`serializeBelongsTo` can be used to customize how `DS.belongsTo`\nproperties are serialized.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserializeBelongsTo: function(record, json, relationship) {\nvar key = relationship.key;\n\nvar belongsTo = get(record, key);\n\nkey = this.keyForRelationship ? this.keyForRelationship(key, \"belongsTo\") : key;\n\njson[key] = Ember.isNone(belongsTo) ? belongsTo : belongsTo.toJSON();\n}\n});\n```\n\n","result":"Serialize a record .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, json, relationship) {\r\n    var key = relationship.key;\r\n    var relationshipType = DS.RelationshipChange.determineRelationshipType(record.constructor, relationship);\r\n    if (relationshipType === 'manyToNone' || relationshipType === 'manyToMany') {\r\n      json[key] = get(record, key).mapBy('id');\r\n    }\r\n  }","code-length":99,"reference":"`serializeHasMany` can be used to customize how `DS.hasMany`\nproperties are serialized.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nserializeHasMany: function(record, json, relationship) {\nvar key = relationship.key;\nif (key === 'comments') {\nreturn;\n} else {\nthis._super.apply(this, arguments);\n}\n}\n});\n```\n\n","result":"Determine relationship type.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, payload, id, requestType) {\r\n    this.extractMeta(store, type, payload);\r\n    var specificExtract = \"extract\" + requestType.charAt(0).toUpperCase() + requestType.substr(1);\r\n    return this[specificExtract](store, type, payload, id, requestType);\r\n  }","code-length":87,"reference":"EXTRACT \nThe `extract` method is used to deserialize payload data from the\nserver. By default the `JSONSerializer` does not push the records\ninto the store. However records that subclass `JSONSerializer`\nsuch as the `RESTSerializer` may push records into the store as\npart of the extract call.\n\nThis method deletegates to a more specific extract method based on\nthe `requestType`.\n\nExample\n\n```javascript\nvar get = Ember.get;\nsocket.on('message', function(message) {\nvar modelName = message.model;\nvar data = message.data;\nvar type = store.modelFor(modelName);\nvar serializer = store.serializerFor(type.typeKey);\nvar record = serializer.extract(store, type, data, get(data, 'id'), 'single');\nstore.push(modelName, record);\n});\n```\n\n","result":"Extract meta data.","score":[0,0.0057]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, payload) {\r\n    if (payload && payload.meta) {\r\n      store.metaForType(type, payload.meta);\r\n      delete payload.meta;\r\n    }\r\n  }","code-length":60,"reference":"`extractMeta` is used to deserialize any meta information in the\nadapter payload. By default Ember Data expects meta information to\nbe located on the `meta` property of the payload object.\n\nExample\n\n```javascript\nApp.PostSerializer = DS.JSONSerializer.extend({\nextractMeta: function(store, type, payload) {\nif (payload && payload._pagination) {\nstore.metaForType(type, payload._pagination);\ndelete payload._pagination;\n}\n}\n});\n```\n\n","result":"Store meta data.","score":[0.0,0.0104]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var promiseLabel = \"DS: RecordArray#save \" + get(this, 'type');\r\n    var promise = Ember.RSVP.all(this.invoke(\"save\"), promiseLabel).then(function(array) {\r\n      return Ember.A(array);\r\n    }, null, \"DS: RecordArray#save apply Ember.NativeArray\");\r\n    return DS.PromiseArray.create({ promise: promise });\r\n  }","code-length":113,"reference":"Saves all of the records in the `RecordArray`.\n\nExample\n\n```javascript\nvar messages = store.all(App.Message);\nmessages.forEach(function(message) {\nmessage.set('hasBeenSeen', true);\n});\nmessages.save();\n```\n\n","result":"Create a promiseArray.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index, removed, added) {\r\n    added = map(added, function(record) {\r\n      Ember.assert(\"You cannot add '\" + record.constructor.typeKey + \"' records to this relationship (only '\" + this.type.typeKey + \"' allowed)\", !this.type || record instanceof this.type);\r\n      return record;\r\n    }, this);\r\n    this._super(index, removed, added);\r\n  }","code-length":111,"reference":"Overrides Ember.Array's replace method to implement","result":"Create a relationship.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(hash) {\r\n    var owner = get(this, 'owner'),\r\n        store = get(owner, 'store'),\r\n        type = get(this, 'type'),\r\n        record;\r\n    Ember.assert(\"You cannot add '\" + type.typeKey + \"' records to this polymorphic relationship.\", !get(this, 'isPolymorphic'));\r\n    record = store.createRecord.call(store, type, hash);\r\n    this.pushObject(record);\r\n    return record;\r\n  }","code-length":131,"reference":"Create a child record within the owner\n\n","result":"Create a new record.","score":[0.2134,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    var adapter = this.adapterFor(type);\r\n    if (adapter && adapter.generateIdForRecord) {\r\n      return adapter.generateIdForRecord(this);\r\n    }\r\n    return null;\r\n  }","code-length":69,"reference":"If possible, this method asks the adapter to generate an ID for\na newly created record.\n\n","result":"Generate an ID for a given type.","score":[0.1398,0.3298]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, id) {\r\n    type = this.modelFor(type);\r\n    var record = this.recordForId(type, id);\r\n    var promise = this.fetchRecord(record) || resolve(record, \"DS: Store#findById \" + type + \" with id: \" + id);\r\n    return promiseObject(promise);\r\n  }","code-length":94,"reference":"This method returns a record for a given type and id combination.\n\n","result":"Find a record by type and id.","score":[0.1471,0.2745]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, ids) {\r\n    var store = this;\r\n    var promiseLabel = \"DS: Store#findByIds \" + type;\r\n    return promiseArray(Ember.RSVP.all(map(ids, function(id) {\r\n      return store.findById(type, id);\r\n    })).then(Ember.A, null, \"DS: Store#findByIds of \" + type + \" complete\"));\r\n  }","code-length":116,"reference":"This method makes a series of requests to the adapter's `find` method\nand returns a promise that resolves once they are all loaded.\n\n","result":"Find by ids.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record) {\r\n    var type = record.constructor,\r\n        adapter = this.adapterFor(type),\r\n        id = get(record, 'id');\r\n    Ember.assert(\"You cannot reload a record without an ID\", id);\r\n    Ember.assert(\"You tried to reload a record but you have no adapter (for \" + type + \")\", adapter);\r\n    Ember.assert(\"You tried to reload a record but your adapter does not implement `find`\", adapter.find);\r\n    return _find(adapter, this, type, id);\r\n  }","code-length":140,"reference":"This method is called by the record's `reload` method.\n\nThis method calls the adapter's `find` method, which returns a promise. When\n*that** promise resolves, `reloadRecord` will resolve the promise returned\nby the record's `reload`.\n\n","result":"You cannot reload a record without an ID.","score":[0.0054,0.0159]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(records, owner, resolver) {\r\n    if (!records.length) { return; }\r\n    var recordsByTypeMap = Ember.MapWithDefault.create({\r\n      defaultValue: function() { return Ember.A(); }\r\n    });\r\n    forEach(records, function(record) {\r\n      recordsByTypeMap.get(record.constructor).push(record);\r\n    });\r\n    forEach(recordsByTypeMap, function(type, records) {\r\n      var ids = records.mapProperty('id'),\r\n          adapter = this.adapterFor(type);\r\n      Ember.assert(\"You tried to load many records but you have no adapter (for \" + type + \")\", adapter);\r\n      Ember.assert(\"You tried to load many records but your adapter does not implement `findMany`\", adapter.findMany);\r\n      resolver.resolve(_findMany(adapter, this, type, ids, owner));\r\n    }, this);\r\n  }","code-length":225,"reference":"This method takes a list of records, groups the records by type,\nconverts the records into IDs, and then invokes the adapter's `findMany`\nmethod.\n\nThe records are grouped by type to invoke `findMany` on adapters\nfor each unique type in records.\n\nIt is used both by a brand new relationship (via the `findMany`\nmethod) or when the data underlying an existing relationship\nchanges.\n\n","result":"Resolve a promise for a given `records` array.","score":[0.0002,0.0261]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, id) {\r\n    id = coerceId(id);\r\n    type = this.modelFor(type);\r\n    return !!this.typeMapFor(type).idToRecord[id];\r\n  }","code-length":62,"reference":"Returns true if a record for a given type and ID is already loaded.\n\n","result":"Test the type map.","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, id) {\r\n    type = this.modelFor(type);\r\n    id = coerceId(id);\r\n    var record = this.typeMapFor(type).idToRecord[id];\r\n    if (!record) {\r\n      record = this.buildRecord(type, id);\r\n    }\r\n    return record;\r\n  }","code-length":94,"reference":"Returns id record for a given type and ID. If one isn't already loaded,\nit builds a new record and leaves it in the `empty` state.\n\n","result":"Build a record.","score":[0.0002,0.0791]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, query) {\r\n    type = this.modelFor(type);\r\n    var array = this.recordArrayManager\r\n      .createAdapterPopulatedRecordArray(type, query);\r\n    var adapter = this.adapterFor(type),\r\n        promiseLabel = \"DS: Store#findQuery \" + type,\r\n        resolver = Ember.RSVP.defer(promiseLabel);\r\n    Ember.assert(\"You tried to load a query but you have no adapter (for \" + type + \")\", adapter);\r\n    Ember.assert(\"You tried to load a query but your adapter does not implement `findQuery`\", adapter.findQuery);\r\n    resolver.resolve(_findQuery(adapter, this, type, query, array));\r\n    return promiseArray(resolver.promise);\r\n  }","code-length":191,"reference":"This method delegates a query to the adapter. This is the one place where\nadapter-level semantics are exposed to the application.\n\nExposing queries this way seems preferable to creating an abstract query\nlanguage for all server-side queries, and then require all adapters to\nimplement them.\n\nThis method returns a promise, which is resolved with a `RecordArray`\nonce the server returns.\n\n","result":"Find records by type and query.","score":[0.0,0.0092]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    type = this.modelFor(type);\r\n    var typeMap = this.typeMapFor(type),\r\n        findAllCache = typeMap.findAllCache;\r\n    if (findAllCache) { return findAllCache; }\r\n    var array = this.recordArrayManager.createRecordArray(type);\r\n    typeMap.findAllCache = array;\r\n    return array;\r\n  }","code-length":106,"reference":"This method returns a filtered array that contains all of the known records\nfor a given type.\n\nNote that because it's just a filter, it will have any locally\ncreated records of the type.\n\nAlso note that multiple calls to `all` for a given type will always\nreturn the same RecordArray.\n\nExample\n\n```javascript\nvar local_posts = store.all(App.Post);\n```\n\n","result":"Create a new model.","score":[0.0,0.019]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    type = this.modelFor(type);\r\n    var typeMap = this.typeMapFor(type),\r\n        records = typeMap.records, record;\r\n    while(record = records.pop()) {\r\n      record.unloadRecord();\r\n    }\r\n    typeMap.findAllCache = null;\r\n  }","code-length":91,"reference":"This method unloads all of the known records for a given type.\n\n```javascript\nstore.unloadAll(App.Post);\n```\n\n","result":"Remove records from a type.","score":[0.0428,0.1071]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, query, filter) {\r\n    var promise;\r\n    if (arguments.length === 3) {\r\n      promise = this.findQuery(type, query);\r\n    } else if (arguments.length === 2) {\r\n      filter = query;\r\n    }\r\n    type = this.modelFor(type);\r\n    var array = this.recordArrayManager\r\n      .createFilteredRecordArray(type, filter);\r\n    promise = promise || resolve(array);\r\n    return promiseArray(promise.then(function() {\r\n      return array;\r\n    }, null, \"DS: Store#filter of \" + type));\r\n  }","code-length":163,"reference":"Takes a type and filter function, and returns a live RecordArray that\nremains up to date as new records are loaded into the store or created\nlocally.\n\nThe callback function takes a materialized record, and returns true\nif the record should be included in the filter and false if it should\nnot.\n\nThe filter function is called once on all records for the type when\nit is created, and then once on each newly loaded or created record.\n\nIf any of a record's properties change, or if it changes state, the\nfilter function will be invoked again to determine whether it should\nstill be in the array.\n\nOptionally you can pass a query which will be triggered at first. The\nresults returned by the server could then appear in the filter if they\nmatch the filter function.\n\nExample\n\n```javascript\nstore.filter(App.Post, {unread: true}, function(post) {\nreturn post.get('unread');\n}).then(function(unreadPosts) {\nunreadPosts.get('length'); \/\/ 5\nvar unreadPost = unreadPosts.objectAt(0);\nunreadPosts.set('unread', false);\nunreadPosts.get('length'); \/\/ 4\n});\n```\n\n","result":"Filter records by type.","score":[2.661e-18,0.0103]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var pending = this._pendingSave.slice();\r\n    this._pendingSave = [];\r\n    forEach(pending, function(tuple) {\r\n      var record = tuple[0], resolver = tuple[1],\r\n          adapter = this.adapterFor(record.constructor),\r\n          operation;\r\n      if (get(record, 'isNew')) {\r\n        operation = 'createRecord';\r\n      } else if (get(record, 'isDeleted')) {\r\n        operation = 'deleteRecord';\r\n      } else {\r\n        operation = 'updateRecord';\r\n      }\r\n      resolver.resolve(_commit(adapter, this, operation, record));\r\n    }, this);\r\n  }","code-length":176,"reference":"This method is called at the end of the run loop, and\nflushes any records passed into `scheduleSave`\n\n","result":"Prevent the browser from throwing an exception.","score":[0.0336,0.0296]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, data) {\r\n    if (data) {\r\n      data = normalizeRelationships(this, record.constructor, data, record);\r\n      this.updateId(record, data);\r\n    }\r\n    record.adapterDidCommit(data);\r\n  }","code-length":73,"reference":"This method is called once the promise returned by an\nadapter's `createRecord`, `updateRecord` or `deleteRecord`\nis resolved.\n\nIf the data provides a server-generated ID, it will\nupdate the record and the store's indexes.\n\n","result":"Update the record.","score":[0.0,0.0333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, data) {\r\n    var oldId = get(record, 'id'),\r\n        id = coerceId(data.id);\r\n    Ember.assert(\"An adapter cannot assign a new id to a record that already has an id. \" + record + \" had id: \" + oldId + \" and you tried to update it with \" + id + \". This likely happened because your server returned data in response to a find or update that had a different id than the one you sent.\", oldId === null || id === oldId);\r\n    this.typeMapFor(record.constructor).idToRecord[id] = record;\r\n    set(record, 'id', id);\r\n  }","code-length":166,"reference":"When an adapter's `createRecord`, `updateRecord` or `deleteRecord`\nresolves with data, this method extracts the ID from the supplied\ndata.\n\n","result":"Create a new adapter .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    var typeMaps = get(this, 'typeMaps'),\r\n        guid = Ember.guidFor(type),\r\n        typeMap;\r\n    typeMap = typeMaps[guid];\r\n    if (typeMap) { return typeMap; }\r\n    typeMap = {\r\n      idToRecord: {},\r\n      records: [],\r\n      metadata: {}\r\n    };\r\n    typeMaps[guid] = typeMap;\r\n    return typeMap;\r\n  }","code-length":122,"reference":"Returns a map of IDs to client IDs for a given type.\n\n","result":"Create a type map.","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, data, _partial) {\r\n    Ember.assert(\"You must include an `id` in a hash passed to `push`\", data.id != null);\r\n    type = this.modelFor(type);\r\n    data = normalizeRelationships(this, type, data);\r\n    this._load(type, data, _partial);\r\n    return this.recordForId(type, data.id);\r\n  }","code-length":108,"reference":"Push some data for a given type into the store.\n\nThis method expects normalized data:\n\nThe ID is a key named `id` (an ID is mandatory)\nThe names of attributes are the ones you used in\nyour model's `DS.attr`s.\nYour relationships must be:\nrepresented as IDs or Arrays of IDs\nrepresented as model instances\nrepresented as URLs, under the `links` key\n\nFor this model:\n\n```js\nApp.Person = DS.Model.extend({\nfirstName: DS.attr(),\nlastName: DS.attr(),\n\nchildren: DS.hasMany('person')\n});\n```\n\nTo represent the children as IDs:\n\n```js\n{\nid: 1,\nfirstName: \"Tom\",\nlastName: \"Dale\",\nchildren: [1, 2, 3]\n}\n```\n\nTo represent the children relationship as a URL:\n\n```js\n{\nid: 1,\nfirstName: \"Tom\",\nlastName: \"Dale\",\nlinks: {\nchildren: \"\/people\/1\/children\"\n}\n}\n```\n\nIf you're streaming data or implementing an adapter,\nmake sure that you have converted the incoming data\ninto this form.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.\n\n","result":"Create a new record.","score":[7.234e-18,0.007]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (type, payload) {\r\n    var serializer;\r\n    if (!payload) {\r\n      payload = type;\r\n      serializer = defaultSerializer(this.container);\r\n      Ember.assert(\"You cannot use `store#pushPayload` without a type unless your default serializer defines `pushPayload`\", serializer.pushPayload);\r\n    } else {\r\n      serializer = this.serializerFor(type);\r\n    }\r\n    serializer.pushPayload(this, payload);\r\n  }","code-length":121,"reference":"Push some raw data into the store.\n\nThe data will be automatically deserialized using the\nserializer for the `type` param.\n\nThis method can be used both to push in brand new\nrecords, as well as to update existing records.\n\nYou can push in more than one type of object at once.\nAll objects should be in the format expected by the\nserializer.\n\n```js\nApp.ApplicationSerializer = DS.ActiveModelSerializer;\n\nvar pushData = {\nposts: [\n{id: 1, post_title: \"Great post\", comment_ids: [2]}\n],\ncomments: [\n{id: 2, comment_body: \"Insightful comment\"}\n]\n}\n\nstore.pushPayload('post', pushData);\n```\n\n","result":"Store the payload.","score":[0.0,0.006]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, metadata) {\r\n    type = this.modelFor(type);\r\n    Ember.merge(this.typeMapFor(type).metadata, metadata);\r\n  }","code-length":51,"reference":"If you have some metadata to set for a type\nyou can call `metaForType`.\n\n","result":"Create a new function .","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, id, data) {\r\n    var typeMap = this.typeMapFor(type),\r\n        idToRecord = typeMap.idToRecord;\r\n    Ember.assert('The id ' + id + ' has already been used with another record of type ' + type.toString() + '.', !id || !idToRecord[id]);\r\n    var record = type._create({\r\n      id: id,\r\n      store: this,\r\n      container: this.container\r\n    });\r\n    if (data) {\r\n      record.setupData(data);\r\n    }\r\n    if (id) {\r\n      idToRecord[id] = record;\r\n    }\r\n    typeMap.records.push(record);\r\n    return record;\r\n  }","code-length":190,"reference":"Build a brand new record for a given type, ID, and\ninitial data.\n\n","result":"Create a record.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addUnsavedRecords(record, key, data) {\r\n  if(record) {\r\n    data.pushObjects(record.get(key).filterBy('isNew'));\r\n  }\r\n}","code-length":58,"reference":"If there are any unsaved records that are in a hasMany they won't be in the payload, so add them back in manually.","result":"Add unsaved records.","score":[0.0005,0.0476]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deepClone(object) {\r\n  var clone = {}, value;\r\n  for (var prop in object) {\r\n    value = object[prop];\r\n    if (value && typeof value === 'object') {\r\n      clone[prop] = deepClone(value);\r\n    } else {\r\n      clone[prop] = value;\r\n    }\r\n  }\r\n  return clone;\r\n}","code-length":105,"reference":"The created and updated states are created outside the state chart so we can reopen their substates and add mixins as necessary.","result":"Clone objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(attribute, messages) {\r\n    var wasEmpty = get(this, 'isEmpty');\r\n    messages = this._findOrCreateMessages(attribute, messages);\r\n    get(this, 'content').addObjects(messages);\r\n    this.notifyPropertyChange(attribute);\r\n    this.enumerableContentDidChange();\r\n    if (wasEmpty && !get(this, 'isEmpty')) {\r\n      this.trigger('becameInvalid');\r\n    }\r\n  }","code-length":121,"reference":"Adds error messages to a given attribute and sends\n`becameInvalid` event to the record.\n\n","result":"Create messages.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(attribute) {\r\n    if (get(this, 'isEmpty')) { return; }\r\n    var content = get(this, 'content').rejectBy('attribute', attribute);\r\n    get(this, 'content').setObjects(content);\r\n    this.notifyPropertyChange(attribute);\r\n    this.enumerableContentDidChange();\r\n    if (get(this, 'isEmpty')) {\r\n      this.trigger('becameValid');\r\n    }\r\n  }","code-length":122,"reference":"Removes all error messages from the given attribute and sends\n`becameValid` event to the record if there no more errors left.\n\n","result":"Reject content by attribute.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data) {\r\n    set(this, 'isError', false);\r\n    if (data) {\r\n      this._data = data;\r\n    } else {\r\n      Ember.mixin(this._data, this._inFlightAttributes);\r\n    }\r\n    this._inFlightAttributes = {};\r\n    this.send('didCommit');\r\n    this.updateRecordArraysLater();\r\n    if (!data) { return; }\r\n    this.suspendRelationshipObservers(function() {\r\n      this.notifyPropertyChange('data');\r\n    });\r\n  }","code-length":146,"reference":"If the adapter did not return a hash in response to a commit,\nmerge the changed attributes and relationships into the existing\nsaved data.\n\n","result":"Create a new object with the data.","score":[0.0187,0.0673]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    this._attributes = {};\r\n    if (get(this, 'isError')) {\r\n      this._inFlightAttributes = {};\r\n      set(this, 'isError', false);\r\n    }\r\n    if (!get(this, 'isValid')) {\r\n      this._inFlightAttributes = {};\r\n    }\r\n    this.send('rolledBack');\r\n    this.suspendRelationshipObservers(function() {\r\n      this.notifyPropertyChange('data');\r\n    });\r\n  }","code-length":133,"reference":"If the model `isDirty` this function will which discard any unsaved\nchanges\n\nExample\n\n```javascript\nrecord.get('name'); \/\/ 'Untitled Document'\nrecord.set('name', 'Doc 1');\nrecord.get('name'); \/\/ 'Doc 1'\nrecord.rollback();\nrecord.get('name'); \/\/ 'Untitled Document'\n```\n\n","result":"Create a new model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, binding) {\r\n    var observers = get(this.constructor, 'relationshipNames').belongsTo;\r\n    var self = this;\r\n    try {\r\n      this._suspendedRelationships = true;\r\n      Ember._suspendObservers(self, observers, null, 'belongsToDidChange', function() {\r\n        Ember._suspendBeforeObservers(self, observers, null, 'belongsToWillChange', function() {\r\n          callback.call(binding || self);\r\n        });\r\n      });\r\n    } finally {\r\n      this._suspendedRelationships = false;\r\n    }\r\n  }","code-length":152,"reference":"The goal of this method is to temporarily disable specific observers\nthat take action in response to application changes.\n\nThis allows the system to make changes (such as materialization and\nrollback) that should not trigger secondary behavior (such as setting an\ninverse relationship or marking records as dirty).\n\nThe specific implementation will likely change as Ember proper provides\nbetter infrastructure for suspending groups of observers, and if Array\nobservation becomes more unified with regular observers.\n\n","result":"Create a new function to be executed on the server.","score":[0.0002,0.0146]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var promiseLabel = \"DS: Model#save \" + this;\r\n    var resolver = Ember.RSVP.defer(promiseLabel);\r\n    this.get('store').scheduleSave(this, resolver);\r\n    this._inFlightAttributes = this._attributes;\r\n    this._attributes = {};\r\n    return DS.PromiseObject.create({ promise: resolver.promise });\r\n  }","code-length":104,"reference":"Save the record and persist any changes to the record to an\nextenal source via the adapter.\n\nExample\n\n```javascript\nrecord.set('name', 'Tomster');\nrecord.save().then(function(){\nSuccess callback\n}, function() {\nError callback\n});\n```\n","result":"Save a model.","score":[0.0,0.0177]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    set(this, 'isReloading', true);\r\n    var  record = this;\r\n    var promiseLabel = \"DS: Model#reload of \" + this;\r\n    var promise = new Ember.RSVP.Promise(function(resolve){\r\n       record.send('reloadRecord', resolve);\r\n    }, promiseLabel).then(function() {\r\n      record.set('isReloading', false);\r\n      record.set('isError', false);\r\n      return record;\r\n    }, function(reason) {\r\n      record.set('isError', true);\r\n      throw reason;\r\n    }, \"DS: Model#reload complete, update flags\");\r\n    return DS.PromiseObject.create({ promise: promise });\r\n  }","code-length":187,"reference":"Reload the record from the adapter.\n\nThis will only work if the record has already finished loading\nand has not yet been modified (`isLoaded` but not `isDirty`,\nor `isSaving`).\n\nExample\n\n```javascript\nApp.ModelViewRoute = Ember.Route.extend({\nactions: {\nreload: function() {\nthis.get('model').reload();\n}\n}\n});\n```\n\n","result":"Trigger the reload of the model.","score":[0.0004,0.0373]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(attributeName, value) {\r\n    if (value !== undefined) {\r\n      this._data[attributeName] = value;\r\n      this.notifyPropertyChange(attributeName);\r\n    } else {\r\n      this._data[attributeName] = this._inFlightAttributes[attributeName];\r\n    }\r\n    this.updateRecordArraysLater();\r\n  }","code-length":96,"reference":"FOR USE DURING COMMIT PROCESS","result":"Set the value of an attribute.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, binding) {\r\n    get(this, 'attributes').forEach(function(name, meta) {\r\n      callback.call(binding, name, meta);\r\n    }, binding);\r\n  }","code-length":59,"reference":"Iterates through the attributes of the model, calling the passed function on each\nattribute.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, meta);\n```\n\n- `name` the name of the current property in the iteration\n- `meta` the meta object for the attribute property in the iteration\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\nfirstName: attr('string'),\nlastName: attr('string'),\nbirthday: attr('date')\n});\n\nApp.Person.eachAttribute(function(name, meta) {\nconsole.log(name, meta);\n});\n\nprints:\nfirstName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"firstName\"}\nlastName {type: \"string\", isAttribute: true, options: Object, parentType: function, name: \"lastName\"}\nbirthday {type: \"date\", isAttribute: true, options: Object, parentType: function, name: \"birthday\"}\n```\n\n","result":"Iterate over all attributes.","score":[0,0.0042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, binding) {\r\n    get(this, 'transformedAttributes').forEach(function(name, type) {\r\n      callback.call(binding, name, type);\r\n    });\r\n  }","code-length":59,"reference":"Iterates through the transformedAttributes of the model, calling\nthe passed function on each attribute. Note the callback will not be\ncalled for any attributes that do not have an transformation type.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(name, type);\n```\n\n- `name` the name of the current property in the iteration\n- `type` a tring contrining the name of the type of transformed\napplied to the attribute\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context.\n\nExample\n\n```javascript\nApp.Person = DS.Model.extend({\nfirstName: attr(),\nlastName: attr('string'),\nbirthday: attr('date')\n});\n\nApp.Person.eachTransformedAttribute(function(name, type) {\nconsole.log(name, type);\n});\n\nprints:\nlastName string\nbirthday date\n```\n\n","result":"Transform attributes.","score":[0,0.0045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(proto, key, value) {\r\n    if (value instanceof Ember.Descriptor) {\r\n      var meta = value.meta();\r\n      if (meta.isRelationship && meta.kind === 'belongsTo') {\r\n        Ember.addObserver(proto, key, null, 'belongsToDidChange');\r\n        Ember.addBeforeObserver(proto, key, null, 'belongsToWillChange');\r\n      }\r\n      meta.parentType = proto.constructor;\r\n    }\r\n  }","code-length":124,"reference":"This Ember.js hook allows an object to be notified when a property\nis defined.\n\nIn this case, we use it to be notified when an Ember Data user defines a\nbelongs-to relationship. In that case, we need to set up observers for\neach one, allowing us to track relationship changes and automatically\nreflect changes in the inverse has-many array.\n\nThis hook passes the class being set up, as well as the key and value\nbeing defined. So, for example, when the user does this:\n\n```javascript\nDS.Model.extend({\nparent: DS.belongsTo('user')\n});\n```\n\nThis hook would be called with \"parent\" as the key and the computed\nproperty returned by `DS.belongsTo` as the value.\n\n","result":"Set up prototype properties.","score":[0.0,0.0101]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, binding) {\r\n    get(this, 'relationshipsByName').forEach(function(name, relationship) {\r\n      callback.call(binding, name, relationship);\r\n    });\r\n  }","code-length":58,"reference":"Given a callback, iterates over each of the relationships in the model,\ninvoking the callback with the name of each relationship and its relationship\ndescriptor.\n\n","result":"Iterate over all relationships.","score":[0.0017,0.0819]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    forEach(this.changedRecords, function(record) {\r\n      if (get(record, 'isDeleted')) {\r\n        this._recordWasDeleted(record);\r\n      } else {\r\n        this._recordWasChanged(record);\r\n      }\r\n    }, this);\r\n    this.changedRecords = [];\r\n  }","code-length":93,"reference":"This method is invoked whenever data is loaded into the store by the\nadapter or updated by the adapter, or when a record has changed.\n\nIt updates all record arrays that a record belongs to.\n\nTo avoid thrashing, it only runs at most once per run loop.\n\n","result":"Test the code.","score":[0.0,0.0235]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array, filter, type, record) {\r\n    var shouldBeInArray;\r\n    if (!filter) {\r\n      shouldBeInArray = true;\r\n    } else {\r\n      shouldBeInArray = filter(record);\r\n    }\r\n    var recordArrays = this.recordArraysForRecord(record);\r\n    if (shouldBeInArray) {\r\n      recordArrays.add(array);\r\n      array.addRecord(record);\r\n    } else if (!shouldBeInArray) {\r\n      recordArrays.remove(array);\r\n      array.removeRecord(record);\r\n    }\r\n  }","code-length":157,"reference":"Update an individual filter.\n\n","result":"Create a new array .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array, type, filter) {\r\n    var typeMap = this.store.typeMapFor(type),\r\n        records = typeMap.records, record;\r\n    for (var i=0, l=records.length; i<l; i++) {\r\n      record = records[i];\r\n      if (!get(record, 'isDeleted') && !get(record, 'isEmpty')) {\r\n        this.updateRecordArray(array, filter, type, record);\r\n      }\r\n    }\r\n  }","code-length":130,"reference":"This method is invoked if the `filterFunction` property is\nchanged on a `DS.FilteredRecordArray`.\n\nIt essentially re-runs the filter from scratch. This same\nmethod is invoked when the filter is created in th first place.\n\n","result":"Update array with filter.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, records) {\r\n    var manyArray = DS.ManyArray.create({\r\n      type: type,\r\n      content: records,\r\n      store: this.store\r\n    });\r\n    forEach(records, function(record) {\r\n      var arrays = this.recordArraysForRecord(record);\r\n      arrays.add(manyArray);\r\n    }, this);\r\n    return manyArray;\r\n  }","code-length":110,"reference":"Create a `DS.ManyArray` for a type and list of record references, and index\nthe `ManyArray` under each reference. This allows us to efficiently remove\nrecords from `ManyArray`s when they are deleted.\n\n","result":"Create a new manyArray.","score":[0.0005,0.0353]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    var array = DS.RecordArray.create({\r\n      type: type,\r\n      content: Ember.A(),\r\n      store: this.store,\r\n      isLoaded: true\r\n    });\r\n    this.registerFilteredRecordArray(array, type);\r\n    return array;\r\n  }","code-length":86,"reference":"Create a `DS.RecordArray` for a type and register it for updates.\n\n","result":"Create a new record array.","score":[0.1023,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, filter) {\r\n    var array = DS.FilteredRecordArray.create({\r\n      type: type,\r\n      content: Ember.A(),\r\n      store: this.store,\r\n      manager: this,\r\n      filterFunction: filter\r\n    });\r\n    this.registerFilteredRecordArray(array, type, filter);\r\n    return array;\r\n  }","code-length":99,"reference":"Create a `DS.FilteredRecordArray` for a type and register it for updates.\n\n","result":"Create a new record array.","score":[0.1023,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, query) {\r\n    return DS.AdapterPopulatedRecordArray.create({\r\n      type: type,\r\n      query: query,\r\n      content: Ember.A(),\r\n      store: this.store\r\n    });\r\n  }","code-length":69,"reference":"Create a `DS.AdapterPopulatedRecordArray` for a type with given query.\n\n","result":"Create a new adapter.","score":[0.1294,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array, type, filter) {\r\n    var recordArrays = this.filteredRecordArrays.get(type);\r\n    recordArrays.push(array);\r\n    this.updateFilter(array, type, filter);\r\n  }","code-length":63,"reference":"Register a RecordArray for a given type to be backed by\na filter function. This will cause the array to update\nautomatically when records of that type change attribute\nvalues or states.\n\n","result":"Filter records.","score":[0,0.0172]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, array) {\r\n    var loadingRecordArrays = record._loadingRecordArrays || [];\r\n    loadingRecordArrays.push(array);\r\n    record._loadingRecordArrays = loadingRecordArrays;\r\n  }","code-length":60,"reference":"Internally, we maintain a map of all unloaded IDs requested by a ManyArray. As the adapter loads data into the store, the store notifies any interested ManyArrays. When the ManyArray's total number of loading records drops to zero, it becomes `isLoaded` and fires a `didLoad` event.","result":"Create a new function .","score":[0.0001,0.0239]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, options) {\r\n    return get(record, 'store').serializerFor(record.constructor.typeKey).serialize(record, options);\r\n  }","code-length":47,"reference":"Proxies to the serializer's `serialize` method.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\ncreateRecord: function(store, type, record) {\nvar data = this.serialize(record, { includeId: true });\nvar url = type;\n\n...\n}\n});\n```\n\n","result":"Create a new function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, ids) {\r\n    var promises = map.call(ids, function(id) {\r\n      return this.find(store, type, id);\r\n    }, this);\r\n    return Ember.RSVP.all(promises);\r\n  }","code-length":73,"reference":"Find multiple records at once.\n\nBy default, it loops over the provided ids and calls `find` on each.\nMay be overwritten to improve performance and reduce the number of\nserver requests.\n\nExample\n\n```javascript\nApp.ApplicationAdapter = DS.Adapter.extend({\nfindMany: function(store, type, ids) {\nvar url = type;\nreturn new Ember.RSVP.Promise(function(resolve, reject) {\njQuery.getJSON(url, {ids: ids}).then(function(data) {\nEmber.run(null, resolve, data);\n}, function(jqXHR) {\njqXHR.then = null; \/\/ tame jQuery's ill mannered promises\nEmber.run(null, reject, jqXHR);\n});\n});\n}\n});\n```\n\n","result":"Find.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    if (type.FIXTURES) {\r\n      var fixtures = Ember.A(type.FIXTURES);\r\n      return fixtures.map(function(fixture){\r\n        var fixtureIdType = typeof fixture.id;\r\n        if(fixtureIdType !== \"number\" && fixtureIdType !== \"string\"){\r\n          throw new Error(fmt('the id property must be defined as a number or string for fixture %@', [fixture]));\r\n        }\r\n        fixture.id = fixture.id + '';\r\n        return fixture;\r\n      });\r\n    }\r\n    return null;\r\n  }","code-length":162,"reference":"Implement this method in order to provide data associated with a type\n\n","result":"Create a fixture for a given type.","score":[0.0791,0.0435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, record) {\r\n    return store.serializerFor(type).serialize(record, { includeId: true });\r\n  }","code-length":43,"reference":"Implement this method in order to provide json for CRUD methods\n\n","result":"Create a new store.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, hash, prop) {\r\n    this.normalizeId(hash);\r\n    this.normalizeAttributes(type, hash);\r\n    this.normalizeRelationships(type, hash);\r\n    this.normalizeUsingDeclaredMapping(type, hash);\r\n    if (this.normalizeHash && this.normalizeHash[prop]) {\r\n      this.normalizeHash[prop](hash);\r\n    }\r\n    return this._super(type, hash, prop);\r\n  }","code-length":118,"reference":"If you want to do normalizations specific to some part of the payload, you\ncan specify those under `normalizeHash`.\n\nFor example, given the following json where the the `IDs` under\n`\"comments\"` are provided as `_id` instead of `id`.\n\n```javascript\n{\n\"post\": {\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"comments\": [ 1, 2 ]\n},\n\"comments\": [{\n\"_id\": 1,\n\"body\": \"FIRST\"\n}, {\n\"_id\": 2,\n\"body\": \"Rails is unagi\"\n}]\n}\n```\n\nYou use `normalizeHash` to normalize just the comments:\n\n```javascript\nApp.PostSerializer = DS.RESTSerializer.extend({\nnormalizeHash: {\ncomments: function(hash) {\nhash.id = hash._id;\ndelete hash._id;\nreturn hash;\n}\n}\n});\n```\n\nThe key under `normalizeHash` is usually just the original key\nthat was in the original payload. However, key names will be\nimpacted by any modifications done in the `normalizePayload`\nmethod. The `DS.RESTSerializer`'s default implemention makes no\nchanges to the payload keys.\n\n","result":"Normalize the object.","score":[6e-21,0.0079]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, primaryType, payload, recordId, requestType) {\r\n    payload = this.normalizePayload(primaryType, payload);\r\n    var primaryTypeName = primaryType.typeKey,\r\n        primaryRecord;\r\n    for (var prop in payload) {\r\n      var typeName  = this.typeForRoot(prop),\r\n          isPrimary = typeName === primaryTypeName;\r\n      if (isPrimary && Ember.typeOf(payload[prop]) !== \"array\" ) {\r\n        primaryRecord = this.normalize(primaryType, payload[prop], prop);\r\n        continue;\r\n      }\r\n      var type = store.modelFor(typeName);\r\n            forEach.call(payload[prop], function(hash) {\r\n        var typeName = this.typeForRoot(prop),\r\n            type = store.modelFor(typeName),\r\n            typeSerializer = store.serializerFor(type);\r\n        hash = typeSerializer.normalize(type, hash, prop);\r\n        var isFirstCreatedRecord = isPrimary && !recordId && !primaryRecord,\r\n            isUpdatedRecord = isPrimary && coerceId(hash.id) === recordId;\r\n        if (isFirstCreatedRecord || isUpdatedRecord) {\r\n          primaryRecord = hash;\r\n        } else {\r\n          store.push(typeName, hash);\r\n        }\r\n      }, this);\r\n    }\r\n    return primaryRecord;\r\n  }","code-length":338,"reference":"Called when the server has returned a payload representing\na single record, such as in response to a `find` or `save`.\n\nIt is your opportunity to clean up the server's response into the normalized\nform expected by Ember Data.\n\nIf you want, you can just restructure the top-level of your payload, and\ndo more fine-grained normalization in the `normalize` method.\n\nFor example, if you have a payload like this in response to a request for\npost 1:\n\n```js\n{\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\n\"_embedded\": {\n\"comment\": [{\n\"_id\": 1,\n\"comment_title\": \"FIRST\"\n}, {\n\"_id\": 2,\n\"comment_title\": \"Rails is unagi\"\n}]\n}\n}\n```\n\nYou could implement a serializer that looks like this to get your payload\ninto shape:\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\nFirst, restructure the top-level so it's organized by type\nextractSingle: function(store, type, payload, id, requestType) {\nvar comments = payload._embedded.comment;\ndelete payload._embedded;\n\npayload = { comments: comments, post: payload };\nreturn this._super(store, type, payload, id, requestType);\n},\n\nnormalizeHash: {\nNext, normalize individual comments, which (after `extract`)\nare now located under `comments`\ncomments: function(hash) {\nhash.id = hash._id;\nhash.title = hash.comment_title;\ndelete hash._id;\ndelete hash.comment_title;\nreturn hash;\n}\n}\n})\n```\n\nWhen you call super from your own implementation of `extractSingle`, the\nbuilt-in implementation will find the primary record in your normalized\npayload and push the remaining records into the store.\n\nThe primary record is the single hash found under `post` or the first\nelement of the `posts` array.\n\nThe primary record has special meaning when the record is being created\nfor the first time or updated (`createRecord` or `updateRecord`). In\nparticular, it will update the properties of the record that was saved.\n\n","result":"Normalize payload.","score":[0,0.002]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, primaryType, payload) {\r\n    payload = this.normalizePayload(primaryType, payload);\r\n    var primaryTypeName = primaryType.typeKey,\r\n        primaryArray;\r\n    for (var prop in payload) {\r\n      var typeKey = prop,\r\n          forcedSecondary = false;\r\n      if (prop.charAt(0) === '_') {\r\n        forcedSecondary = true;\r\n        typeKey = prop.substr(1);\r\n      }\r\n      var typeName = this.typeForRoot(typeKey),\r\n          type = store.modelFor(typeName),\r\n          typeSerializer = store.serializerFor(type),\r\n          isPrimary = (!forcedSecondary && (typeName === primaryTypeName));\r\n            var normalizedArray = map.call(payload[prop], function(hash) {\r\n        return typeSerializer.normalize(type, hash, prop);\r\n      }, this);\r\n      if (isPrimary) {\r\n        primaryArray = normalizedArray;\r\n      } else {\r\n        store.pushMany(typeName, normalizedArray);\r\n      }\r\n    }\r\n    return primaryArray;\r\n  }","code-length":277,"reference":"Called when the server has returned a payload representing\nmultiple records, such as in response to a `findAll` or `findQuery`.\n\nIt is your opportunity to clean up the server's response into the normalized\nform expected by Ember Data.\n\nIf you want, you can just restructure the top-level of your payload, and\ndo more fine-grained normalization in the `normalize` method.\n\nFor example, if you have a payload like this in response to a request for\nall posts:\n\n```js\n{\n\"_embedded\": {\n\"post\": [{\n\"id\": 1,\n\"title\": \"Rails is omakase\"\n}, {\n\"id\": 2,\n\"title\": \"The Parley Letter\"\n}],\n\"comment\": [{\n\"_id\": 1,\n\"comment_title\": \"Rails is unagi\"\n\"post_id\": 1\n}, {\n\"_id\": 2,\n\"comment_title\": \"Don't tread on me\",\n\"post_id\": 2\n}]\n}\n}\n```\n\nYou could implement a serializer that looks like this to get your payload\ninto shape:\n\n```js\nApp.PostSerializer = DS.RESTSerializer.extend({\nFirst, restructure the top-level so it's organized by type\nand the comments are listed under a post's `comments` key.\nextractArray: function(store, type, payload, id, requestType) {\nvar posts = payload._embedded.post;\nvar comments = [];\nvar postCache = {};\n\nposts.forEach(function(post) {\npost.comments = [];\npostCache[post.id] = post;\n});\n\npayload._embedded.comment.forEach(function(comment) {\ncomments.push(comment);\npostCache[comment.post_id].comments.push(comment);\ndelete comment.post_id;\n}\n\npayload = { comments: comments, posts: payload };\n\nreturn this._super(store, type, payload, id, requestType);\n},\n\nnormalizeHash: {\nNext, normalize individual comments, which (after `extract`)\nare now located under `comments`\ncomments: function(hash) {\nhash.id = hash._id;\nhash.title = hash.comment_title;\ndelete hash._id;\ndelete hash.comment_title;\nreturn hash;\n}\n}\n})\n```\n\nWhen you call super from your own implementation of `extractArray`, the\nbuilt-in implementation will find the primary array in your normalized\npayload and push the remaining records into the store.\n\nThe primary array is the array found under `posts`.\n\nThe primary record has special meaning when responding to `findQuery`\nor `findHasMany`. In particular, the primary array will become the\nlist of records in the record array that kicked off the request.\n\nIf your primary array contains secondary (embedded) records of the same type,\nyou cannot place these into the primary array `posts`. Instead, place the\nsecondary items into an underscore prefixed property `_posts`, which will\npush these items into the store and will not affect the resulting query.\n\n","result":"Normalize payload.","score":[0,0.0015]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, payload) {\r\n    payload = this.normalizePayload(null, payload);\r\n    for (var prop in payload) {\r\n      var typeName = this.typeForRoot(prop),\r\n          type = store.modelFor(typeName);\r\n            var normalizedArray = map.call(Ember.makeArray(payload[prop]), function(hash) {\r\n        return this.normalize(type, hash, prop);\r\n      }, this);\r\n      store.pushMany(typeName, normalizedArray);\r\n    }\r\n  }","code-length":137,"reference":"This method allows you to push a payload containing top-level\ncollections of records organized per type.\n\n```js\n{\n\"posts\": [{\n\"id\": \"1\",\n\"title\": \"Rails is omakase\",\n\"author\", \"1\",\n\"comments\": [ \"1\" ]\n}],\n\"comments\": [{\n\"id\": \"1\",\n\"body\": \"FIRST\"\n}],\n\"users\": [{\n\"id\": \"1\",\n\"name\": \"","result":"Create a payload store.","score":[0.0,0.0449]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(hash, type, record, options) {\r\n    hash[type.typeKey] = this.serialize(record, options);\r\n  }","code-length":43,"reference":"You can use this method to customize the root keys serialized into the JSON.\nBy default the REST Serializer sends camelized root keys.\nFor example, your server may expect underscored root objects.\n\n```js\nApp.ApplicationSerializer = DS.RESTSerializer.extend({\nserializeIntoHash: function(data, type, record, options) {\nvar root = Ember.String.decamelize(type.typeKey);\ndata[root] = this.serialize(record, options);\n}\n});\n```\n\n","result":"Serialize a record.","score":[0,0.0104]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, json, relationship) {\r\n    var key = relationship.key,\r\n        belongsTo = get(record, key);\r\n    key = this.keyForAttribute ? this.keyForAttribute(key) : key;\r\n    json[key + \"Type\"] = belongsTo.constructor.typeKey;\r\n  }","code-length":85,"reference":"You can use this method to customize how polymorphic objects are serialized.\nBy default the JSON Serializer creates the key by appending `Type` to\nthe attribute and value from the model's camelcased model name.\n\n","result":"Build the json object.","score":[0.0002,0.0323]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, sinceToken) {\r\n    var query;\r\n    if (sinceToken) {\r\n      query = { since: sinceToken };\r\n    }\r\n    return this.ajax(this.buildURL(type.typeKey), 'GET', { data: query });\r\n  }","code-length":80,"reference":"Called by the store in order to fetch a JSON array for all\nof the records for a given type.\n\nThe `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\n\n","result":"Return this.","score":[0,0.0129]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, ids) {\r\n    return this.ajax(this.buildURL(type.typeKey), 'GET', { data: { ids: ids } });\r\n  }","code-length":52,"reference":"Called by the store in order to fetch a JSON array for\nthe unloaded records in a has-many relationship that were originally\nspecified as IDs.\n\nFor example, if the original payload looks like:\n\n```js\n{\n\"id\": 1,\n\"title\": \"Rails is omakase\",\n\"comments\": [ 1, 2, 3 ]\n}\n```\n\nThe IDs will be passed as a URL-encoded Array of IDs, in this form:\n\n```\nids[]=1&ids[]=2&ids[]=3\n```\n\nMany servers, such as Rails and PHP, will automatically convert this URL-encoded array\ninto an Array for you on the server-side. If you want to encode the\nIDs, differently, just override this (one-line) method.\n\nThe `findMany` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\npromise for the resulting payload.\n\n","result":"Store the data.","score":[1.734e-18,0.009]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, record) {\r\n    var data = {};\r\n    var serializer = store.serializerFor(type.typeKey);\r\n    serializer.serializeIntoHash(data, type, record, { includeId: true });\r\n    return this.ajax(this.buildURL(type.typeKey), \"POST\", { data: data });\r\n  }","code-length":93,"reference":"Called by the store when a newly created record is\nsaved via the `save` method on a model record instance.\n\nThe `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.\n\n","result":"Create a new record.","score":[0.0,0.0312]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, record) {\r\n    var data = {};\r\n    var serializer = store.serializerFor(type.typeKey);\r\n    serializer.serializeIntoHash(data, type, record);\r\n    var id = get(record, 'id');\r\n    return this.ajax(this.buildURL(type.typeKey, id), \"PUT\", { data: data });\r\n  }","code-length":102,"reference":"Called by the store when an existing record is saved\nvia the `save` method on a model record instance.\n\nThe `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\nto a URL computed by `buildURL`.\n\nSee `serialize` for information on how to customize the serialized form\nof a record.\n\n","result":"Serialize a record.","score":[0.0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, record) {\r\n    var id = get(record, 'id');\r\n    return this.ajax(this.buildURL(type.typeKey, id), \"DELETE\");\r\n  }","code-length":58,"reference":"Called by the store when a record is deleted.\n\nThe `deleteRecord` method  makes an Ajax (HTTP DELETE) request to a URL computed by `buildURL`.\n\n","result":"Remove a record.","score":[0.0004,0.0228]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, id) {\r\n    var url = [],\r\n        host = get(this, 'host'),\r\n        prefix = this.urlPrefix();\r\n    if (type) { url.push(this.pathForType(type)); }\r\n    if (id) { url.push(id); }\r\n    if (prefix) { url.unshift(prefix); }\r\n    url = url.join('\/');\r\n    if (!host && url) { url = '\/' + url; }\r\n    return url;\r\n  }","code-length":134,"reference":"Builds a URL for a given type and optional ID.\n\nBy default, it pluralizes the type's name (for example, 'post'\nbecomes 'posts' and 'person' becomes 'people'). To override the\npluralization see [pathForType](#method_pathForType).\n\nIf an ID is specified, it adds the ID to the path generated\nfor the type, separated by a `\/`.\n\n","result":"Generate a url for a resource.","score":[0.0001,0.0527]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(url, type, hash) {\r\n    var adapter = this;\r\n    return new Ember.RSVP.Promise(function(resolve, reject) {\r\n      hash = adapter.ajaxOptions(url, type, hash);\r\n      hash.success = function(json) {\r\n        Ember.run(null, resolve, json);\r\n      };\r\n      hash.error = function(jqXHR, textStatus, errorThrown) {\r\n        Ember.run(null, reject, adapter.ajaxError(jqXHR));\r\n      };\r\n      Ember.$.ajax(hash);\r\n    }, \"DS: RestAdapter#ajax \" + type + \" to \" + url);\r\n  }","code-length":171,"reference":"Takes a URL, an HTTP method and a hash of data, and makes an\nHTTP request.\n\nWhen the server responds with a payload, Ember Data will call into `extractSingle`\nor `extractArray` (depending on whether the original query was for one record or\nmany records).\n\nBy default, `ajax` method has the following behavior:\n\nIt sets the response `dataType` to `\"json\"`\nIf the HTTP method is not `\"GET\"`, it sets the `Content-Type` to be\n`application\/json; charset=utf-8`\nIf the HTTP method is not `\"GET\"`, it stringifies the data passed in. The\ndata is the serialized record in the case of a save.\nRegisters success and failure handlers.\n\n","result":"Create a new RestAdapter.","score":[0.0,0.0053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Inflector(ruleSet) {\r\n  ruleSet = ruleSet || {};\r\n  ruleSet.uncountable = ruleSet.uncountable || {};\r\n  ruleSet.irregularPairs = ruleSet.irregularPairs || {};\r\n  var rules = this.rules = {\r\n    plurals:  ruleSet.plurals || [],\r\n    singular: ruleSet.singular || [],\r\n    irregular: {},\r\n    irregularInverse: {},\r\n    uncountable: {}\r\n  };\r\n  loadUncountable(rules, ruleSet.uncountable);\r\n  loadIrregular(rules, ruleSet.irregularPairs);\r\n}","code-length":157,"reference":"Inflector.Ember provides a mechanism for supplying inflection rules for your\napplication. Ember includes a default set of inflection rules, and provides an\nAPI for providing additional rules.\n\nExamples:\n\nCreating an inflector with no rules.\n\n```js\nvar inflector = new Ember.Inflector();\n```\n\nCreating an inflector with the default ember ruleset.\n\n```js\nvar inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n\ninflector.pluralize('cow') \/\/=> 'kine'\ninflector.singularize('kine') \/\/=> 'cow'\n```\n\nCreating an inflector and adding rules later.\n\n```javascript\nvar inflector = Ember.Inflector.inflector;\n\ninflector.pluralize('advice') \/\/ => 'advices'\ninflector.uncountable('advice');\ninflector.pluralize('advice') \/\/ => 'advice'\n\ninflector.pluralize('formula') \/\/ => 'formulas'\ninflector.irregular('formula', 'formulae');\ninflector.pluralize('formula') \/\/ => 'formulae'\n\nyou would not need to add these as they are the default rules\ninflector.plural(\/$\/, 's');\ninflector.singular(\/s$\/i, '');\n```\n\nCreating an inflector with a nondefault ruleset.\n\n```javascript\nvar rules = {\nplurals:  [ \/$\/, 's' ],\nsingular: [ \/\\s$\/, '' ],\nirregularPairs: [\n[ 'cow', 'kine' ]\n],\nuncountable: [ 'fish' ]\n};\n\nvar inflector = new Ember.Inflector(rules);\n```\n\n","result":"Create a new instance of the class.","score":[0.0,0.0183]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key, kind) {\r\n    key = Ember.String.decamelize(key);\r\n    if (kind === \"belongsTo\") {\r\n      return key + \"_id\";\r\n    } else if (kind === \"hasMany\") {\r\n      return Ember.String.singularize(key) + \"_ids\";\r\n    } else {\r\n      return key;\r\n    }\r\n  }","code-length":103,"reference":"Underscores relationship names and appends \"_id\" or \"_ids\" when serializing\nrelationship keys.\n\n","result":"Generate the key for the model.","score":[0,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data, type, record, options) {\r\n    var root = Ember.String.decamelize(type.typeKey);\r\n    data[root] = this.serialize(record, options);\r\n  }","code-length":59,"reference":"Underscores the JSON root keys when serializing.\n\n","result":"Serialize data.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, json, relationship) {\r\n    var key = relationship.key,\r\n        belongsTo = get(record, key);\r\n    key = this.keyForAttribute(key);\r\n    json[key + \"_type\"] = Ember.String.capitalize(belongsTo.constructor.typeKey);\r\n  }","code-length":84,"reference":"Serializes a polymorphic type as a fully capitalized model name.\n\n","result":"Create a new relationship.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(root) {\r\n    var camelized = Ember.String.camelize(root);\r\n    return Ember.String.singularize(camelized);\r\n  }","code-length":48,"reference":"EXTRACT \nExtracts the model typeKey from underscored root objects.\n\n","result":"Create a new function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data){\r\n    if (data.links) {\r\n      var links = data.links;\r\n      for (var link in links) {\r\n        var camelizedLink = Ember.String.camelize(link);\r\n        if (camelizedLink !== link) {\r\n          links[camelizedLink] = links[link];\r\n          delete links[link];\r\n        }\r\n      }\r\n    }\r\n  }","code-length":111,"reference":"Convert `snake_cased` links  to `camelCase`\n\n","result":"Create a new data object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, hash) {\r\n    var payloadKey, payload;\r\n    if (this.keyForRelationship) {\r\n      type.eachRelationship(function(key, relationship) {\r\n        if (relationship.options.polymorphic) {\r\n          payloadKey = this.keyForAttribute(key);\r\n          payload = hash[payloadKey];\r\n          if (payload && payload.type) {\r\n            payload.type = this.typeForRoot(payload.type);\r\n          } else if (payload && relationship.kind === \"hasMany\") {\r\n            var self = this;\r\n            forEach(payload, function(single) {\r\n              single.type = self.typeForRoot(single.type);\r\n            });\r\n          }\r\n        } else {\r\n          payloadKey = this.keyForRelationship(key, relationship.kind);\r\n          payload = hash[payloadKey];\r\n        }\r\n        hash[key] = payload;\r\n        if (key !== payloadKey) {\r\n          delete hash[payloadKey];\r\n        }\r\n      }, this);\r\n    }\r\n  }","code-length":267,"reference":"Normalize the polymorphic type from the JSON.\n\nNormalize:\n```js\n{\nid: \"1\"\nminion: { type: \"evil_minion\", id: \"12\"}\n}\n```\n\nTo:\n```js\n{\nid: \"1\"\nminion: { type: \"evilMinion\", id: \"12\"}\n}\n```\n\n","result":"Create a new type for root objects.","score":[0.0039,0.0164]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record, json, relationship) {\r\n    var key   = relationship.key,\r\n        attrs = get(this, 'attrs'),\r\n        embed = attrs && attrs[key] && attrs[key].embedded === 'always';\r\n    if (embed) {\r\n      json[this.keyForAttribute(key)] = get(record, key).map(function(relation) {\r\n        var data = relation.serialize(),\r\n            primaryKey = get(this, 'primaryKey');\r\n        data[primaryKey] = get(relation, primaryKey);\r\n        return data;\r\n      }, this);\r\n    }\r\n  }","code-length":155,"reference":"Serialize has-may relationship when it is configured as embedded objects.\n\n","result":"Serialize the record.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, primaryType, payload, recordId, requestType) {\r\n    var root = this.keyForAttribute(primaryType.typeKey),\r\n        partial = payload[root];\r\n    updatePayloadWithEmbedded(store, this, primaryType, partial, payload);\r\n    return this._super(store, primaryType, payload, recordId, requestType);\r\n  }","code-length":94,"reference":"Extract embedded objects out of the payload for a single object\nand add them as sideloaded objects instead.\n\n","result":"Create a new type.","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(store, type, payload) {\r\n    var root = this.keyForAttribute(type.typeKey),\r\n        partials = payload[Ember.String.pluralize(root)];\r\n    forEach(partials, function(partial) {\r\n      updatePayloadWithEmbedded(store, this, type, partial, payload);\r\n    }, this);\r\n    return this._super(store, type, payload);\r\n  }","code-length":107,"reference":"Extract embedded objects out of a standard payload\nand add them as sideloaded objects instead.\n\n","result":"Update payload.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    var decamelized = Ember.String.decamelize(type);\r\n    return Ember.String.pluralize(decamelized);\r\n  }","code-length":51,"reference":"The ActiveModelAdapter overrides the `pathForType` method to build\nunderscored URLs by decamelizing and pluralizing the object type name.\n\n```js\nthis.pathForType(\"famousPerson\");\n=> \"famous_people\"\n```\n\n","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(jqXHR) {\r\n    var error = this._super(jqXHR);\r\n    if (jqXHR && jqXHR.status === 422) {\r\n      var jsonErrors = Ember.$.parseJSON(jqXHR.responseText)[\"errors\"],\r\n          errors = {};\r\n      forEach(Ember.keys(jsonErrors), function(key) {\r\n        errors[Ember.String.camelize(key)] = jsonErrors[key];\r\n      });\r\n      return new DS.InvalidError(errors);\r\n    } else {\r\n      return error;\r\n    }\r\n  }","code-length":153,"reference":"The ActiveModelAdapter overrides the `ajaxError` method\nto return a DS.InvalidError for all 422 Unprocessable Entity\nresponses.\n\nA 422 HTTP response from the server generally implies that the request\nwas well formed but the API was unable to process it because the\ncontent was not semantically correct or meaningful per the API.\n\nFor more information on 422 HTTP Error code see 11.2 WebDAV RFC 4918\nhttps:\/\/tools.ietf.org\/html\/rfc4918#section-11.2\n\n","result":"Create a new model.","score":[0.0,0.0085]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseKeyValue(keyValue) {\r\n  var obj = {}, key_value, key;\r\n  forEach((keyValue || \"\").split('&'), function(keyValue){\r\n    if ( keyValue ) {\r\n      key_value = keyValue.split('=');\r\n      key = tryDecodeURIComponent(key_value[0]);\r\n      if ( isDefined(key) ) {\r\n        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;\r\n        if (!obj[key]) {\r\n          obj[key] = val;\r\n        } else if(isArray(obj[key])) {\r\n          obj[key].push(val);\r\n        } else {\r\n          obj[key] = [obj[key],val];\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return obj;\r\n}","code-length":216,"reference":"Parses an escaped url query string into key-value pairs.\n","result":"Parse a query string into an object with key.","score":[0.2697,0.4956]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(key, value, writeAttr, attrName) {\r\n        if(key == 'class') {\r\n          value = value || '';\r\n          var current = this.$$element.attr('class') || '';\r\n          this.$removeClass(tokenDifference(current, value).join(' '));\r\n          this.$addClass(tokenDifference(value, current).join(' '));\r\n        } else {\r\n          var booleanKey = getBooleanAttrName(this.$$element[0], key),\r\n              normalizedVal,\r\n              nodeName;\r\n          if (booleanKey) {\r\n            this.$$element.prop(key, value);\r\n            attrName = booleanKey;\r\n          }\r\n          this[key] = value;\r\n          if (attrName) {\r\n            this.$attr[key] = attrName;\r\n          } else {\r\n            attrName = this.$attr[key];\r\n            if (!attrName) {\r\n              this.$attr[key] = attrName = snake_case(key, '-');\r\n            }\r\n          }\r\n          nodeName = nodeName_(this.$$element);\r\n          if ((nodeName === 'A' && key === 'href') ||\r\n              (nodeName === 'IMG' && key === 'src')) {\r\n            if (!msie || msie >= 8 ) {\r\n              normalizedVal = $$urlUtils.resolve(value);\r\n              if (normalizedVal !== '') {\r\n                if ((key === 'href' && !normalizedVal.match(aHrefSanitizationWhitelist)) ||\r\n                    (key === 'src' && !normalizedVal.match(imgSrcSanitizationWhitelist))) {\r\n                  this[key] = value = 'unsafe:' + normalizedVal;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (writeAttr !== false) {\r\n            if (value === null || value === undefined) {\r\n              this.$$element.removeAttr(attrName);\r\n            } else {\r\n              this.$$element.attr(attrName, value);\r\n            }\r\n          }\r\n        }\r\n        var $$observers = this.$$observers;\r\n        $$observers && forEach($$observers[key], function(fn) {\r\n          try {\r\n            fn(value);\r\n          } catch (e) {\r\n            $exceptionHandler(e);\r\n          }\r\n        });\r\n        function tokenDifference(str1, str2) {\r\n          var values = [],\r\n              tokens1 = str1.split(\/\\s+\/),\r\n              tokens2 = str2.split(\/\\s+\/);\r\n          outer:\r\n          for(var i=0;i<tokens1.length;i++) {\r\n            var token = tokens1[i];\r\n            for(var j=0;j<tokens2.length;j++) {\r\n              if(token == tokens2[j]) continue outer;\r\n            }\r\n            values.push(token);\r\n          }\r\n          return values;\r\n        };\r\n      }","code-length":718,"reference":"Set a normalized attribute on the element in a way such that all directives\ncan share the attribute. This function properly handles boolean attributes.\n","result":"Code too long,keep in 512.","score":[0.0054,0.0226]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective) {\r\n      var linkFns = [],\r\n          nodeLinkFn, childLinkFn, directives, attrs, linkFnFound;\r\n      for(var i = 0; i < nodeList.length; i++) {\r\n        attrs = new Attributes();\r\n        directives = collectDirectives(nodeList[i], [], attrs, i == 0 ? maxPriority : undefined, ignoreDirective);\r\n        nodeLinkFn = (directives.length)\r\n            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement)\r\n            : null;\r\n        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal || !nodeList[i].childNodes || !nodeList[i].childNodes.length)\r\n            ? null\r\n            : compileNodes(nodeList[i].childNodes,\r\n                 nodeLinkFn ? nodeLinkFn.transclude : transcludeFn);\r\n        linkFns.push(nodeLinkFn);\r\n        linkFns.push(childLinkFn);\r\n        linkFnFound = (linkFnFound || nodeLinkFn || childLinkFn);\r\n      }\r\n      return linkFnFound ? compositeLinkFn : null;\r\n      function compositeLinkFn(scope, nodeList, $rootElement, boundTranscludeFn) {\r\n        var nodeLinkFn, childLinkFn, node, childScope, childTranscludeFn, i, ii, n;\r\n        var stableNodeList = [];\r\n        for (i = 0, ii = nodeList.length; i < ii; i++) {\r\n          stableNodeList.push(nodeList[i]);\r\n        }\r\n        for(i = 0, n = 0, ii = linkFns.length; i < ii; n++) {\r\n          node = stableNodeList[n];\r\n          nodeLinkFn = linkFns[i++];\r\n          childLinkFn = linkFns[i++];\r\n          if (nodeLinkFn) {\r\n            if (nodeLinkFn.scope) {\r\n              childScope = scope.$new(isObject(nodeLinkFn.scope));\r\n              jqLite(node).data('$scope', childScope);\r\n            } else {\r\n              childScope = scope;\r\n            }\r\n            childTranscludeFn = nodeLinkFn.transclude;\r\n            if (childTranscludeFn || (!boundTranscludeFn && transcludeFn)) {\r\n              nodeLinkFn(childLinkFn, childScope, node, $rootElement,\r\n                  (function(transcludeFn) {\r\n                    return function(cloneFn) {\r\n                      var transcludeScope = scope.$new();\r\n                      transcludeScope.$$transcluded = true;\r\n                      return transcludeFn(transcludeScope, cloneFn).\r\n                          on('$destroy', bind(transcludeScope, transcludeScope.$destroy));\r\n                    };\r\n                  })(childTranscludeFn || transcludeFn)\r\n              );\r\n            } else {\r\n              nodeLinkFn(childLinkFn, childScope, node, undefined, boundTranscludeFn);\r\n            }\r\n          } else if (childLinkFn) {\r\n            childLinkFn(scope, node.childNodes, undefined, boundTranscludeFn);\r\n          }\r\n        }\r\n      }\r\n    }","code-length":773,"reference":"Compile function matches each node in nodeList against the directives. Once all directives\nfor a particular node are collected their compile functions are executed. The compile\nfunctions return values - the linking functions - are combined into a composite linking\nfunction, which is the a linking function for the node.\n\n","result":"Code too long,keep in 512.","score":[0.0,0.011]}
{"code":"\/*is used to<extra_id_0>\r\nfunction groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {\r\n      return function(scope, element, attrs, controllers) {\r\n        element = groupScan(element[0], attrStart, attrEnd);\r\n        return linkFn(scope, element, attrs, controllers);\r\n      }\r\n    }","code-length":82,"reference":"Wrapper for linking function which converts normal linking function into a grouped\nlinking function.\n","result":"Wrap group elements linkFn .","score":[0,0.0763]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceWith($rootElement, elementsToRemove, newNode) {\r\n      var firstElementToRemove = elementsToRemove[0],\r\n          removeCount = elementsToRemove.length,\r\n          parent = firstElementToRemove.parentNode,\r\n          i, ii;\r\n      if ($rootElement) {\r\n        for(i = 0, ii = $rootElement.length; i < ii; i++) {\r\n          if ($rootElement[i] == firstElementToRemove) {\r\n            $rootElement[i++] = newNode;\r\n            for (var j = i, j2 = j + removeCount - 1,\r\n                     jj = $rootElement.length;\r\n                 j < jj; j++, j2++) {\r\n              if (j2 < jj) {\r\n                $rootElement[j] = $rootElement[j2];\r\n              } else {\r\n                delete $rootElement[j];\r\n              }\r\n            }\r\n            $rootElement.length -= removeCount - 1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (parent) {\r\n        parent.replaceChild(newNode, firstElementToRemove);\r\n      }\r\n      var fragment = document.createDocumentFragment();\r\n      fragment.appendChild(firstElementToRemove);\r\n      newNode[jqLite.expando] = firstElementToRemove[jqLite.expando];\r\n      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {\r\n        var element = elementsToRemove[k];\r\n        jqLite(element).remove();\r\n        fragment.appendChild(element);\r\n        delete elementsToRemove[k];\r\n      }\r\n      elementsToRemove[0] = newNode;\r\n      elementsToRemove.length = 1\r\n    }","code-length":421,"reference":"This is a special jqLite.replaceWith, which can replace items which\nhave no parents, provided that the containing jqLite collection is provided.\n\n","result":"Replace elements in a DOM tree .","score":[0.0219,0.051]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayDeclaration () {\r\n    var elementFns = [];\r\n    var allConstant = true;\r\n    if (peekToken().text != ']') {\r\n      do {\r\n        var elementFn = expression();\r\n        elementFns.push(elementFn);\r\n        if (!elementFn.constant) {\r\n          allConstant = false;\r\n        }\r\n      } while (expect(','));\r\n    }\r\n    consume(']');\r\n    return extend(function(self, locals){\r\n      var array = [];\r\n      for ( var i = 0; i < elementFns.length; i++) {\r\n        array.push(elementFns[i](self, locals));\r\n      }\r\n      return array;\r\n    }, {\r\n      literal:true,\r\n      constant:allConstant\r\n    });\r\n  }","code-length":209,"reference":"This is used with json array declaration","result":"Create a new arrayDeclaration.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isSameOrigin(requestUrl) {\r\n        var parsed = (typeof requestUrl === 'string') ? resolve(requestUrl, true) : requestUrl;\r\n        return (parsed.protocol === originUrl.protocol &&\r\n                parsed.host === originUrl.host);\r\n      }","code-length":71,"reference":"Parse a request URL and determine whether this is a same-origin request as the application document.\n\n","result":"Test if the request url is the same origin.","score":[0.0737,0.1307]}
{"code":"\/*is used to<extra_id_0>\r\nfunction traverse(node, opt_onEnter, opt_onLeave) {\r\n  if (opt_onEnter) opt_onEnter(node);\r\n  var childNodes = _collectChildNodes(node);\r\n  childNodes.forEach(function(childNode) {\r\n    traverse(childNode, opt_onEnter, opt_onLeave);\r\n  });\r\n  if (opt_onLeave) opt_onLeave(node);\r\n}","code-length":110,"reference":"Traverse the specified AST.\n","result":"Detect the node.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Client() {\r\n    logger('new Client');\r\n    this.type = 'client';\r\n    this.id = uuid();\r\n    this.browser = (WebSocket.Server === undefined);\r\n    Base.call(this);\r\n  }","code-length":67,"reference":"json-rpc-ws client\n\n","result":"Create a client.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Connection(socket, parent) {\r\n  logger('new Connection to %s', parent.type);\r\n  this.id = uuid();\r\n  this.socket = socket;\r\n  this.parent = parent;\r\n  this.responseHandlers = {};\r\n  if (this.parent.browser) {\r\n    this.socket.onmessage = this.message.bind(this);\r\n    this.socket.onclose = socketClosed.bind(this);\r\n    this.socket.onerror = socketError.bind(this);\r\n  }\r\n  else {\r\n    this.socket.on('message', this.message.bind(this));\r\n    this.socket.once('close', this.close.bind(this));\r\n    this.socket.once('error', this.close.bind(this));\r\n  }\r\n}","code-length":206,"reference":"json-rpc-ws connection\n\n","result":"Create a new connection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mark(type, attrs) {\r\n  return function(...args) {\r\n    let mark = type.create(takeAttrs(attrs, args))\r\n    let {nodes, tag} = flatten(type.schema, args, n => mark.type.isInSet(n.marks) ? n : n.mark(mark.addToSet(n.marks)))\r\n    return {flat: nodes, tag}\r\n  }\r\n}","code-length":109,"reference":"Create a builder function for marks.","result":"Create a mark function.","score":[0.274,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction serverRequest(config) {\r\n                var defer = $q.defer();\r\n                if (provider.debug) $log.info('$sails ' + config.method + ' ' + config.url, config.data || '');\r\n                if (config.timeout > 0) {\r\n                    $timeout(timeoutRequest, config.timeout);\r\n                } else if (isPromiseLike(config.timeout)) {\r\n                    config.timeout.then(timeoutRequest);\r\n                }\r\n                socket['legacy_' + config.method.toLowerCase()](config.url, config.data, serverResponse);\r\n                function timeoutRequest(){\r\n                    serverResponse(null);\r\n                }\r\n                function serverResponse(result, jwr) {\r\n                    if (!jwr) {\r\n                        jwr = {\r\n                            body: result,\r\n                            headers: result.headers || {},\r\n                            statusCode: result.statusCode || result.status || 0,\r\n                            error: (function() {\r\n                                if (this.statusCode < 200 || this.statusCode >= 400) {\r\n                                    return this.body || this.statusCode;\r\n                                }\r\n                            })()\r\n                        };\r\n                    }\r\n                    jwr.data = jwr.body;\r\n                    jwr.status = jwr.statusCode;\r\n                    jwr.socket = socket;\r\n                    jwr.url = config.url;\r\n                    jwr.method = config.method;\r\n                    jwr.config = config.config;\r\n                    if (jwr.error) {\r\n                        if (provider.debug) $log.warn('$sails response ' + jwr.statusCode + ' ' + config.url, jwr);\r\n                        defer.reject(jwr);\r\n                    } else {\r\n                        if (provider.debug) $log.info('$sails response ' + config.url, jwr);\r\n                        defer.resolve(jwr);\r\n                    }\r\n                }\r\n                return defer.promise;\r\n            }","code-length":481,"reference":"Send the request using the socket","result":"Return serverRequest.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processBootStrap(file) {\r\n    var data = fs.readFileSync(file).toString();\r\n    var idx = data.indexOf('bootstrap(');\r\n    if (idx === -1) { return null; }\r\n    else { idx+=10; }\r\n    var odx1 = data.indexOf(',', idx);\r\n    var odx2 = data.indexOf(')', idx);\r\n    if (odx2 < odx1 && odx2 !== -1 || odx1 === -1) { odx1 = odx2; }\r\n    if (odx1 === -1) { return null; }\r\n    var componentRef = data.substring(idx, odx1);\r\n    var exp = \"import\\\\s+\\\\{(\"+componentRef+\")\\\\}\\\\s+from+\\\\s+[\\'|\\\"](\\\\S+)[\\'|\\\"][;?]\";\r\n    if (debugging) {\r\n        console.log(\"Searching for\", exp);\r\n    }\r\n    var result = function (r) {\r\n      return {\r\n        name: r[1],\r\n        path: r[r.length - 1]\r\n      };\r\n    };\r\n    var r = RegExp(exp, 'i').exec(data);\r\n    if (r === null || r.length <= 1) {\r\n      exp = \"import\\\\s+\\\\{\\\\s+(\"+componentRef+\")\\\\,\\\\s+([A-Z]{0,300})\\\\w+\\\\s+\\\\}\\\\s+from+\\\\s+[\\'|\\\"](\\\\S+)[\\'|\\\"][;?]\";\r\n      if (debugging) {\r\n        console.log(\"Searching for\", exp);\r\n      }\r\n      r = RegExp(exp, 'i').exec(data);\r\n      if (r === null || r.length <= 1) {\r\n        exp = \"import\\\\s+\\\\{\\\\s+(\" + componentRef + \")\\\\s+\\\\}\\\\s+from+\\\\s+[\\'|\\\"](\\\\S+)[\\'|\\\"][;?]\";\r\n        if (debugging) {\r\n          console.log(\"Searching for\", exp);\r\n        }\r\n        r = RegExp(exp, 'i').exec(data);\r\n        if (r !== null && r.length > 1) {\r\n          return result(r);\r\n        }\r\n      } else {\r\n        return result(r);\r\n      }     \r\n      return null;\r\n    }\r\n    return result(r);\r\n}","code-length":616,"reference":"Parses the bootstrap to figure out the default bootstrap component\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixTsConfig() {\r\n    var tsConfig={}, tsFile = '..\/..\/tsconfig.json';\r\n    if (fs.existsSync(tsFile)) {\r\n        tsConfig = require(tsFile);\r\n    }\r\n    if (!tsConfig.compilerOptions || !tsConfig.compilerOptions.typeRoots) {\r\n        tsConfig.compilerOptions = {\r\n          target: \"es5\",\r\n          module: \"commonjs\",\r\n          declaration: false,\r\n          removeComments: true,\r\n          noLib: false,\r\n          emitDecoratorMetadata: true,\r\n          experimentalDecorators: true,\r\n          lib: [\r\n            \"dom\"\r\n          ],\r\n          sourceMap: true,\r\n          pretty: true,\r\n          allowUnreachableCode: false,\r\n          allowUnusedLabels: false,\r\n          noImplicitAny: false,\r\n          noImplicitReturns: true,\r\n          noImplicitUseStrict: false,\r\n          noFallthroughCasesInSwitch: true,\r\n          typeRoots: [\r\n              \"node_modules\/@types\",\r\n              \"node_modules\"\r\n          ],\r\n          types: [\r\n              \"jasmine\"\r\n          ]\r\n        };\r\n    }\r\n = [];\r\n    }\r\n    if (tsConfig.exclude.indexOf('node_modules') === -1) {\r\n        tsConfig.exclude.push('node_modules');\r\n    }\r\n    if (tsConfig.exclude.indexOf('platforms') === -1) {\r\n        tsConfig.exclude.push('platforms');\r\n    }\r\n    fs.writeFileSync(tsFile, JSON.stringify(tsConfig, null, 4), 'utf8');\r\n}","code-length":416,"reference":"This fixes the TS Config file in the nativescript folder","result":"Fix the tsconfig.","score":[0.0396,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixRefFile() {\r\n    var existingRef='', refFile = '..\/..\/references.d.ts';\r\n    if (fs.existsSync(refFile)) {\r\n        existingRef = fs.readFileSync(refFile).toString();\r\n    }\r\n  if (existingRef.indexOf('typescript\/lib\/lib.d.ts') === -1) {\r\n    var fix = '\r\n      '\r\n    fs.writeFileSync(refFile, fix, 'utf8');\r\n  }\r\n}","code-length":131,"reference":"This fixes the references file to work with TS 2.0 in the nativescript folder","result":"Fix the reference file.","score":[0.0262,0.1154]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixNativeScriptPackage() {\r\n    var packageJSON = {}, packageFile = '..\/..\/package.json';\r\n    packageJSON.name = \"NativeScriptApp\";\r\n    packageJSON.version = \"0.0.0\";\r\n      if (fs.existsSync(packageFile)) {\r\n        packageJSON = require(packageFile);\r\n    } else {\r\n        console.log(\"This should not happen, your are missing your package.json file!\");\r\n        return;\r\n    }\r\nackageJSON.nativescript['tns-android'] = {version: \"2.3.0\" };\r\n    if (!packageJSON.devDependencies) {\r\n        packageJSON.devDependencies = {};\r\n    }\r\n    packageJSON.devDependencies[\"@types\/jasmine\"] = \"^2.5.35\";\r\n    packageJSON.devDependencies[\"babel-traverse\"] = \"6.12.0\";\r\n    packageJSON.devDependencies[\"babel-types\"] = \"6.11.1\";\r\n    packageJSON.devDependencies.babylon = \"6.8.4\";\r\n    packageJSON.devDependencies.filewalker = \"0.1.2\";\r\n    packageJSON.devDependencies.lazy = \"1.0.11\";\r\n    packageJSON.devDependencies.typescript = \"^2.0.2\";\r\n    fs.writeFileSync(packageFile, JSON.stringify(packageJSON, null, 4), 'utf8');\r\n}","code-length":353,"reference":"Fix the NativeScript Package file","result":"Fix the native script package .","score":[0.273,0.5011]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixAngularPackage() {\r\n    var packageJSON = {}, packageFile = '..\/..\/..\/package.json';\r\n    if (fs.existsSync(packageFile)) {\r\n        packageJSON = require(packageFile);\r\n    } else {\r\n        console.log(\"This should not happen, your are missing your main package.json file!\");\r\n        return;\r\n    }\r\n    if (!packageJSON.scripts) {\r\n        packageJSON.scripts = {};\r\n    }\r\n    packageJSON.scripts[\"start.ios\"] = \"cd nativescript && tns emulate ios\";\r\n    packageJSON.scripts[\"start.livesync.ios\"] = \"cd nativescript && tns livesync ios --emulator --watch\";\r\n    packageJSON.scripts[\"start.android\"] = \"cd nativescript && tns emulate android\";\r\n    packageJSON.scripts[\"start.livesync.android\"] = \"cd nativescript && tns livesync android --emulator --watch\";\r\n    fs.writeFileSync(packageFile, JSON.stringify(packageJSON, null, 4), 'utf8');\r\n}","code-length":272,"reference":"Fix the Angular Package","result":"Fix Angular packages .","score":[0.3799,0.6389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixMainFile(component) {\r\n  var mainTS = '', mainFile = '..\/..\/app\/main.ts';\r\n  if (fs.existsSync(mainFile)) {\r\n    mainTS = fs.readFileSync(mainFile).toString();\r\n  } \r\n  if (mainTS.indexOf('MagicService') === -1) {\r\n    var fix = '\r\n      'import { platformNativeScriptDynamic, NativeScriptModule } from \"nativescript-angular\/platform\";\\n' +\r\n      'import { NgModule } from \"@angular\/core\";\\n' +\r\n      'import { AppComponent } from \".\/app\/app.component\";\\n' +\r\n      '\\n' +\r\n      '@NgModule({\\n' +\r\n      '  declarations: [AppComponent],\\n' +\r\n      '  bootstrap: [AppComponent],\\n' +\r\n      '   imports: [NativeScriptModule],\\n' +\r\n      '})\\n' +\r\n      'class AppComponentModule {}\\n\\n' +\r\n      'platformNativeScriptDynamic().bootstrapModule(AppComponentModule);';\r\n    fs.writeFileSync(mainFile, fix, 'utf8');\r\n  }\r\n}","code-length":295,"reference":"Fix the Main NativeScript File\n","result":"Fix the main file .","score":[0.3398,0.75]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixGitIgnore(ignorePattern) {\r\n  var fileString = '', ignoreFile = '..\/..\/..\/.gitignore';\r\n  if (fs.existsSync(ignoreFile)) {\r\n    fileString = fs.readFileSync(ignoreFile).toString();\r\n  } \r\n  if (fileString.indexOf(ignorePattern) === -1) {\r\n    var fix = fileString +\r\n      '\\n' +\r\n      ignorePattern;\r\n    fs.writeFileSync(ignoreFile, fix, 'utf8');\r\n  }\r\n}","code-length":136,"reference":"Fix .gitignore\n","result":"Fix gitignore.","score":[0.5,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction displayFinalHelp()\r\n{\r\n    console.log(\"-------------- Welcome to the Magical World of NativeScript -----------------------------\");\r\n    console.log(\"To finish, follow this guide https:\r\n    console.log(\"After you have completed the steps in the usage guide, you can then:\");\r\n    console.log(\"\");\r\n    console.log(\"Run your app in the iOS Simulator with these options:\");\r\n    console.log(\"  npm run start.ios\");\r\n    console.log(\"  npm run start.livesync.ios\");\r\n    console.log(\"\");\r\n    console.log(\"Run your app in an Android emulator with these options:\");\r\n    console.log(\"  npm run start.android\");\r\n    console.log(\"  npm run start.livesync.android\");\r\n    console.log(\"-----------------------------------------------------------------------------------------\");\r\n    console.log(\"\");\r\n}","code-length":217,"reference":"Display final help screen!","result":"Display the final help.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bind(func, thisObject, var_args)\r\n{\r\n    var args = slice(arguments, 2);\r\n        function bound(var_args)\r\n    {\r\n        return InjectedScriptHost.callFunction(func, thisObject, concat(args, slice(arguments)));\r\n    }\r\n    bound.toString = function()\r\n    {\r\n        return \"bound: \" + toString(func);\r\n    };\r\n    return bound;\r\n}","code-length":120,"reference":"Please use this bind, not the one from Function.prototype\n","result":"Bind functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(object, objectGroupName, forceValueType, generatePreview, columnNames, isTable, doNotBind, customObjectConfig)\r\n    {\r\n        try {\r\n            return new InjectedScript.RemoteObject(object, objectGroupName, doNotBind, forceValueType, generatePreview, columnNames, isTable, undefined, customObjectConfig);\r\n        } catch (e) {\r\n            try {\r\n                var description = injectedScript._describe(e);\r\n            } catch (ex) {\r\n                var description = \"<failed to convert exception to string>\";\r\n            }\r\n            return new InjectedScript.RemoteObject(description);\r\n        }\r\n    }","code-length":159,"reference":"This method cannot throw.\n","result":"Create remote objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callArgumentJson)\r\n    {\r\n        callArgumentJson = nullifyObjectProto(callArgumentJson);\r\n        var objectId = callArgumentJson.objectId;\r\n        if (objectId) {\r\n            var parsedArgId = this._parseObjectId(objectId);\r\n            if (!parsedArgId || parsedArgId[\"injectedScriptId\"] !== injectedScriptId)\r\n                throw \"Arguments should belong to the same JavaScript world as the target object.\";\r\n            var resolvedArg = this._objectForId(parsedArgId);\r\n            if (!this._isDefined(resolvedArg))\r\n                throw \"Could not find object with given id\";\r\n            return resolvedArg;\r\n        } else if (\"value\" in callArgumentJson) {\r\n            var value = callArgumentJson.value;\r\n            if (callArgumentJson.type === \"number\" && typeof value !== \"number\")\r\n                value = Number(value);\r\n            return value;\r\n        }\r\n        return undefined;\r\n    }","code-length":242,"reference":"Resolves a value from CallArgument description.\n","result":"Resolve a function call argument.","score":[0.1967,0.3178]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(topCallFrame, callFrameId, functionObjectId, scopeNumber, variableName, newValueJsonString)\r\n    {\r\n        try {\r\n            var newValueJson =  (InjectedScriptHost.eval(\"(\" + newValueJsonString + \")\"));\r\n            var resolvedValue = this._resolveCallArgument(newValueJson);\r\n            if (typeof callFrameId === \"string\") {\r\n                var callFrame = this._callFrameForId(topCallFrame, callFrameId);\r\n                if (!callFrame)\r\n                    return \"Could not find call frame with given id\";\r\n                callFrame.setVariableValue(scopeNumber, variableName, resolvedValue)\r\n            } else {\r\n                var parsedFunctionId = this._parseObjectId( (functionObjectId));\r\n                var func = this._objectForId(parsedFunctionId);\r\n                if (typeof func !== \"function\")\r\n                    return \"Could not resolve function by id\";\r\n                InjectedScriptHost.setFunctionVariableValue(func, scopeNumber, variableName, resolvedValue);\r\n            }\r\n        } catch (e) {\r\n            return toString(e);\r\n        }\r\n        return undefined;\r\n    }","code-length":277,"reference":"Either callFrameId or functionObjectId must be specified.\n","result":"Set variable values in the injected script.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validate(str) {\r\n    let tj;\r\n    if (typeof str === 'object') {\r\n        tj = str;\r\n    } else if (typeof str === 'string') {\r\n        try {\r\n            tj = jsonlint.parse(str);\r\n        } catch (err) {\r\n            return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n    return tilejsonValidateObject.validate(tj);\r\n}","code-length":126,"reference":"Validates a TileJSON\n","result":"Validate tilejson.","score":[0,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _loop2(_name) {\r\n      var klass = resolve(associations[_name].klass);\r\n      var data = associated[_name];\r\n      if (!data) {\r\n        model[_name] = null;\r\n        return \"continue\";\r\n      }\r\n      if (associations[_name].type === 'hasOne') {\r\n        var other = (typeof data === \"undefined\" ? \"undefined\" : _typeof(data)) === 'object' ? klass.load(data) : klass.local(data);\r\n        model[_name] = other;\r\n      } else if (associations[_name].type === 'hasMany') {\r\n        var others = [];\r\n        data.forEach(function (o) {\r\n          others.push((typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) === 'object' ? klass.load(o) : klass.local(o));\r\n        });\r\n        model[_name] = others;\r\n      }\r\n    }","code-length":246,"reference":"load and set each association","result":"Loop through the associated objects.","score":[0,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleErrors(errors, data) {\r\n  const message = errors[0].message;\r\n  const error = new Error(`GraphQL Error: ${message}`);\r\n  error.rawError = errors;\r\n  error.rawData = data;\r\n  throw error;\r\n}","code-length":77,"reference":"the default error handler","result":"Handle errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction zip(zipFile, srcList, dstPath) {\r\n  if (!dstPath) {\r\n    dstPath = false;\r\n  }\r\n  const output = fs.createWriteStream(zipFile);\r\n  const archive = archiver('zip', {\r\n    zlib: { level: 9 }\r\n  });\r\n  return new Promise((resolve, reject) => {\r\n    output.on('close', function() {\r\n      return resolve();\r\n    });\r\n    archive.on('warning', function(err) {\r\n      if (err.code === 'ENOENT') {\r\n        console.log(err);\r\n      }\r\n      else {\r\n        return reject(err);\r\n      }\r\n    });\r\n    archive.on('error', function(err) {\r\n      return reject(err);\r\n    });\r\n    archive.pipe(output);\r\n    srcList.forEach((src) => {\r\n      const stat = fs.lstatSync(src);\r\n      if (stat.isFile()) {\r\n        archive.file(src);\r\n      }\r\n      else if (stat.isDirectory() || stat.isSymbolicLink()) {\r\n        archive.directory(src, dstPath);\r\n      }\r\n      else {\r\n        return reject(new Error('Invalid path'));\r\n      }\r\n    });\r\n    archive.finalize();\r\n  });\r\n}","code-length":341,"reference":"Zips a list of files or directories\n","result":"Create a zip file.","score":[0.1509,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exec(cmd, verbose) {\r\n  verbose = verbose === false ? verbose : true;\r\n  const stdout = execSync(cmd);\r\n  if (verbose) {\r\n    console.log(stdout.toString());\r\n  }\r\n  return stdout;\r\n}","code-length":73,"reference":"Executes shell commands synchronously and logs the\nstdout to console.\n","result":"Execute a command.","score":[0,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fileToString(file) {\r\n  try {\r\n    const stat = fs.lstatSync(file);\r\n    if (stat.isFile()) {\r\n      const content = fs.readFileSync(file, 'utf8');\r\n      return content.toString();\r\n    }\r\n  }\r\n  catch (e) {\r\n    if (!e.message.includes('ENOENT') && !e.message.includes('name too long, lstat')) {\r\n      throw e;\r\n    }\r\n  }\r\n  return file;\r\n}","code-length":142,"reference":"Checks if the input is a file, if it is a file,\nit reads it and return the content, otherwise just pass\nthe input as an output\n\n","result":"Generate the file toString.","score":[0.001,0.0202]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeYamls(file1, file2) {\r\n  const obj1 = yaml.safeLoad(fileToString(file1), { schema: yamlfiles.YAML_FILES_SCHEMA });\r\n  const obj2 = yaml.safeLoad(fileToString(file2), { schema: yamlfiles.YAML_FILES_SCHEMA });\r\n  return yaml.safeDump(merge({}, obj1, obj2));\r\n}","code-length":103,"reference":"Merges two yaml files. The merge is done using lodash.merge\nand it happens recursively. Meaning that values of file2 will\nreplace values of file 1 if they have the same key.\n\n","result":"Merge two yaml files.","score":[0.0008,0.1325]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadKesOverride(kesFolder, kesClass = 'kes.js') {\r\n  let kesOverridePath = path.resolve(kesFolder, kesClass);\r\n  let KesOverride;\r\n  try {\r\n    KesOverride = require(kesOverridePath);\r\n  }\r\n  catch (e) {\r\n    const fileExists = fs.existsSync(kesOverridePath);\r\n    if (fileExists) {\r\n      throw e;\r\n    }\r\n    console.log(`No Kes override found at ${kesOverridePath}, continuing`);\r\n  }\r\n  return KesOverride;\r\n}","code-length":163,"reference":"Attempt to load a Kes override class.\n\nThrow the error if it is something other than that the Kes override\nclass does not exist.\n\n","result":"Load the KesOverride.","score":[0.0004,0.0457]}
{"code":"\/*is used to<extra_id_0>\r\nfunction determineKesClass(options, Kes) {\r\n  let KesOverride;\r\n  const kesClass = get(options, 'kesClass');\r\n  if (kesClass) {\r\n    KesOverride = loadKesOverride(process.cwd(), kesClass);\r\n  }\r\n  else {\r\n    let kesFolder;\r\n    if (options.kesFolder) {\r\n      kesFolder = options.kesFolder;\r\n    }\r\n    else {\r\n      kesFolder = path.join(process.cwd(), '.kes');\r\n    }\r\n    KesOverride = loadKesOverride(kesFolder);\r\n    if (!KesOverride) {\r\n      const template = get(options, 'template', '\/path\/to\/nowhere');\r\n      kesFolder = path.join(process.cwd(), template);\r\n      KesOverride = loadKesOverride(kesFolder);\r\n    }\r\n  }\r\n  return KesOverride || Kes;\r\n}","code-length":252,"reference":"Based on the information passed from the CLI by the commander\nmodule this function determines whether to use the default Kes class\nor use the override class provided by the user\n\n","result":"Determine the kes class.","score":[0.0004,0.053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction failure(e) {\r\n  if (e.message) {\r\n    console.log(e.message);\r\n  }\r\n  else {\r\n    console.log(e);\r\n  }\r\n  process.exit(1);\r\n}","code-length":70,"reference":"In case of error logs the error and exit with error 1\n","result":"Test the code.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSystemBucket(config) {\r\n  let bucket = get(config, 'buckets.internal');\r\n  if (bucket && typeof bucket === 'string') {\r\n    return bucket;\r\n  }\r\n  bucket = get(config, 'system_bucket');\r\n  if (bucket && typeof bucket === 'string') {\r\n    return bucket;\r\n  }\r\n  return undefined;\r\n}","code-length":102,"reference":"Discover and returns the system bucket used for deployment\n\n","result":"Determine the system bucket.","score":[0.1294,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildNestedCfs(config, KesClass, options) {\r\n  const limit = pLimit(1);\r\n  if (config.nested_templates) {\r\n    const nested = config.nested_templates;\r\n    console.log('Nested templates are found!');\r\n    const ps = Object.keys(nested).map((name) => limit(() => {\r\n      console.log(`Compiling nested template for ${name}`);\r\n      const newOptions = Object.assign({}, options);\r\n      newOptions.cfFile = nested[name].cfFile;\r\n      newOptions.configFile = nested[name].configFile;\r\n      delete newOptions.template;\r\n      delete newOptions.deployment;\r\n      newOptions.stack = config.stack;\r\n      newOptions.parent = config;\r\n      const nestedConfig = new Config(newOptions);\r\n      if (!nestedConfig.bucket) {\r\n        nestedConfig.bucket = utils.getSystemBucket(config);\r\n      }\r\n      nestedConfig.nested_cf_name = name;\r\n      const kes = new KesClass(nestedConfig);\r\n      return kes.uploadCF().then((uri) => {\r\n        config.nested_templates[name].url = uri;\r\n      });\r\n    }));\r\n    return Promise.all(ps)\r\n      .then(() => config)\r\n      .catch(utils.failure);\r\n  }\r\n  return Promise.resolve(config);\r\n}","code-length":357,"reference":"Builds templates nested in the main template\nusing the specified config and cf file paths\n\n","result":"Build nested cfs .","score":[0.0204,0.1079]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildCf(options, cmd) {\r\n  const KesClass = utils.determineKesClass(options, Kes);\r\n  let parentConfig;\r\n  try {\r\n    parentConfig = new Config(options);\r\n  }\r\n  catch (e) {\r\n    return Promise.reject(e);\r\n  }\r\n  return buildNestedCfs(parentConfig, KesClass, options).then((config) => {\r\n    const kes = new KesClass(config);\r\n    switch (cmd) {\r\n      case 'create':\r\n        deprecate('\"kes cf create\" command is deprecated. Use \"kes cf deploy\" instead');\r\n        return kes.createStack();\r\n      case 'update':\r\n        deprecate('\"kes cf update\" command is deprecated. Use \"kes cf deploy\" instead');\r\n        return kes.updateStack();\r\n      case 'upsert':\r\n        deprecate('\"kes cf upsert\" command is deprecated. Use \"kes cf deploy\" instead');\r\n        return kes.upsertStack();\r\n      case 'deploy':\r\n        return kes.deployStack();\r\n      case 'validate':\r\n        return kes.validateTemplate();\r\n      case 'compile':\r\n        return kes.compileCF();\r\n      case 'delete':\r\n        return kes.deleteStack();\r\n      default:\r\n        console.log('Wrong choice. Accepted arguments: [create|update|upsert|deploy|validate|compile]');\r\n    }\r\n  });\r\n}","code-length":372,"reference":"Builds, uploads and deploy a Cloudformation based on options passed\nfrom the commander library\n\n","result":"Build a cf config.","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildLambda(options, cmd) {\r\n  if (cmd) {\r\n    const KesClass = utils.determineKesClass(options, Kes);\r\n    const config = new Config(options);\r\n    const kes = new KesClass(config);\r\n    kes.updateSingleLambda(cmd).then(r => utils.success(r)).catch(e => utils.failure(e));\r\n  }\r\n  else {\r\n    utils.failure(new Error('Lambda name is missing'));\r\n  }\r\n}","code-length":136,"reference":"Builds and uploads a lambda function based on the options passed by the commander\n","result":"Build the lambda .","score":[0.0312,0.1154]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sendResponse(event, context, responseStatus, responseData) {\r\n  const responseBody = JSON.stringify({\r\n    Status: responseStatus,\r\n    Reason: 'See the details in CloudWatch Log Stream: ' + context.logStreamName,\r\n    PhysicalResourceId: context.logStreamName,\r\n    StackId: event.StackId,\r\n    RequestId: event.RequestId,\r\n    LogicalResourceId: event.LogicalResourceId,\r\n    Data: responseData\r\n  });\r\n  console.log('RESPONSE BODY:\\n', responseBody);\r\n  const https = require('https');\r\n  const url = require('url');\r\n  const parsedUrl = url.parse(event.ResponseURL);\r\n  const options = {\r\n    hostname: parsedUrl.hostname,\r\n    port: 443,\r\n    path: parsedUrl.path,\r\n    method: 'PUT',\r\n    headers: {\r\n      'content-type': '',\r\n      'content-length': responseBody.length\r\n    }\r\n  };\r\n  console.log('SENDING RESPONSE...\\n');\r\n  const request = https.request(options, function(response) {\r\n    console.log('STATUS: ' + response.statusCode);\r\n    console.log('HEADERS: ' + JSON.stringify(response.headers));\r\n    context.done();\r\n  });\r\n  request.on('error', function(error) {\r\n    console.log('sendResponse Error:' + error);\r\n    context.done();\r\n  });\r\n  request.write(responseBody);\r\n  request.end();\r\n}","code-length":374,"reference":"Send response to the pre-signed S3 URL","result":"Send a response to the CloudWatch Log Stream.","score":[0.3074,0.5282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction optionsToString(options) {\r\n    return Object.keys(options)\r\n        .map(function processOption(key) {\r\n            return key + \"=\" + options[key];\r\n        })\r\n        .join(\",\");\r\n}","code-length":67,"reference":"Return options converted to a string\n\n","result":"Create a new instance of the class.","score":[0.1615,0.082]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assign(target) {\r\n    var sources = Array.prototype.slice.call(arguments, 1);\r\n    function assignArgument(previous, source) {\r\n        Object.keys(source).forEach(function assignItem(key) {\r\n            previous[key] = source[key];\r\n        });\r\n        return previous;\r\n    }\r\n    return sources.reduce(assignArgument, target);\r\n}","code-length":106,"reference":"Polyfill Object.assign\n\n","result":"Create a new object to be assigned to.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction openPopupWithPost(url, postData, name, options) {\r\n    var form = document.createElement(\"form\");\r\n    var win;\r\n    form.setAttribute(\"method\", \"post\");\r\n    form.setAttribute(\"action\", url);\r\n    form.setAttribute(\"target\", name);\r\n    Object.keys(postData).forEach(function addFormItem(key) {\r\n        var input = document.createElement(\"input\");\r\n        input.type = \"hidden\";\r\n        input.name = key;\r\n        input.value = postData[key];\r\n        form.appendChild(input);\r\n    });\r\n    document.body.appendChild(form);\r\n    win = window.open(\"\/\", name, options);\r\n    win.document.write(\"Loading...\");\r\n    form.submit();\r\n    document.body.removeChild(form);\r\n    return win;\r\n}","code-length":225,"reference":"Create a form element, add hidden inputs for all the post data\nand post it into a newly opened popup\n\n","result":"Open a popup with post data.","score":[0.0246,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction popupExecute(execute, url, name, options, callback) {\r\n    var popupName = name || defaultPopupName();\r\n    var popupOptions = optionsResolveCentered(assign({}, defaultOptions, options));\r\n    var popupCallback = callback || function noop() {};\r\n    var optionsString = optionsToString(popupOptions);\r\n    var win = execute(url, popupName, optionsString);\r\n    var isMessageSent = false;\r\n    var interval;\r\n    function popupCallbackOnce(err, data) {\r\n        if (!isMessageSent) {\r\n            isMessageSent = true;\r\n            popupCallback(err, data);\r\n        }\r\n    }\r\n    function onMessage(message) {\r\n        var data = message ? message.data : undefined;\r\n        if (data) {\r\n            popupCallbackOnce(undefined, data);\r\n            window.removeEventListener(\"message\", onMessage);\r\n        }\r\n    }\r\n    window.addEventListener(\"message\", onMessage, false);\r\n    if (win) {\r\n        interval = setInterval(function closePopupCallback() {\r\n            if (win == null || win.closed) {\r\n                setTimeout(function delayWindowClosing() {\r\n                    clearInterval(interval);\r\n                    popupCallbackOnce(new Error(\"Popup closed\"));\r\n                }, 500);\r\n            }\r\n        }, 100);\r\n    } else {\r\n        popupCallbackOnce(new Error(\"Popup blocked\"));\r\n    }\r\n    return win;\r\n}","code-length":358,"reference":"Open a popup using the first argument. Wait for it to close.\nReturns the window object\n\n","result":"Create a popup .","score":[0.0225,0.1267]}
{"code":"\/*is used to<extra_id_0>\r\nfunction popup(url, name, options, callback) {\r\n    return popupExecute(window.open, url, name, options, callback);\r\n}","code-length":43,"reference":"Open a popup using the first argument.\nWait for it to close and call the callback.\nSet the options string using the options object\nReturns the window object\n\n","result":"Create a popup.","score":[0.0001,0.0196]}
{"code":"\/*is used to<extra_id_0>\r\nfunction popupWithPost(url, postData, name, options, callback) {\r\n    function openWithPostData(popupUrl, popupName, optionsString) {\r\n        return openPopupWithPost(popupUrl, postData, popupName, optionsString);\r\n    }\r\n    return popupExecute(openWithPostData, url, name, options, callback);\r\n}","code-length":91,"reference":"Open a popup using the first argument.\nPost the data into the open popup.\nWait for it to close and call the callback.\nSet the options string using the options object\nReturns the window object\n\n","result":"Open a popup with post.","score":[0.0012,0.0799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getWrappingContentRange(editor) {\r\n\tif (editor.somethingSelected()) {\r\n\t\tconst sel = editor.listSelections().filter(sel => sel.anchor !== sel.head)[0];\r\n\t\tif (sel) {\r\n\t\t\treturn  comparePos(sel.anchor, sel.head) < 0\r\n\t\t\t\t? { from: sel.anchor, to: sel.head }\r\n\t\t\t\t: { from: sel.head, to: sel.anchor };\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn getTagRangeForPos(editor, editor.getCursor());\r\n}","code-length":151,"reference":"Returns content range that should be wrapped\n","result":"Detect wrapping content.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction betweenTags(editor, range) {\r\n\tif (equalCursorPos(range.anchor, range.head)) {\r\n\t\tconst cursor = range.anchor;\r\n\t\tconst mode = editor.getModeAt(cursor);\r\n\t\tif (mode.name === 'xml') {\r\n\t\t\tconst left = editor.getTokenAt(cursor);\r\n\t\t\tconst right = editor.getTokenAt(Object.assign({}, cursor, { ch: cursor.ch + 1 }));\r\n\t\t\treturn left.type === 'tag bracket' && left.string === '>'\r\n\t\t\t\t&& right.type === 'tag bracket' && right.string === '<\/';\r\n\t\t}\r\n\t}\r\n}","code-length":173,"reference":"Check if given range is a single caret between tags\n","result":"Detect between tags.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction canExtract(editor, pos, config) {\r\n\tconst tokenType = editor.getTokenTypeAt(pos);\r\n\tif (config.type === 'stylesheet') {\r\n\t\treturn tokenType !== 'comment' && tokenType !== 'string';\r\n\t}\r\n\tif (config.syntax === 'html') {\r\n\t\treturn tokenType === null;\r\n\t}\r\n\tif (config.syntax === 'slim' || config.syntax === 'pug') {\r\n\t\treturn tokenType === null || tokenType === 'tag'\r\n\t\t\t|| (tokenType && \/attribute\/.test(tokenType));\r\n\t}\r\n\tif (config.syntax === 'haml') {\r\n\t\treturn tokenType === null || tokenType === 'attribute';\r\n\t}\r\n\tif (config.syntax === 'jsx') {\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}","code-length":220,"reference":"Check if abbreviation can be extracted from given position\n","result":"Detect if the editor can extract a file.","score":[0.1458,0.1685]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getStylesheetCompletions(editor, pos, config) {\r\n\tconst line = editor.getLine(pos.line).slice(0, pos.ch);\r\n\tconst prefix = extractPrefix(line, \/[\\w-@$]\/);\r\n\tif (prefix) {\r\n\t\t\r\n\t\t\r\n\t\tconst prefixRange = {\r\n\t\t\tfrom: { line: pos.line, ch: pos.ch - prefix.length },\r\n\t\t\tto: pos\r\n\t\t};\r\n\t\tif (config.options && config.options.property) {\r\n\t\t\tconst lowerProp = config.options.property.toLowerCase();\r\n\t\t\t\r\n\t\t\tconst completion = getSnippetCompletions(editor, pos, config)\r\n\t\t\t\t.find(item => item.property && item.property === lowerProp);\r\n\t\t\tif (completion && completion.keywords.length) {\r\n\t\t\t\treturn completion.keywords.map(kw => {\r\n\t\t\t\t\treturn kw.key.indexOf(prefix) === 0 && new EmmetCompletion('value', editor, prefixRange, kw.key, kw.preview, kw.snippet);\r\n\t\t\t\t}).filter(Boolean);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn getSnippetCompletions(editor, pos, config)\r\n\t\t\t\t.filter(completion => completion.key !== prefix && completion.key.indexOf(prefix) === 0)\r\n\t\t\t\t.map(completion => new EmmetCompletion('snippet', editor, prefixRange, completion.key, completion.preview, completion.snippet));\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}","code-length":385,"reference":"Returns completions for stylesheet syntaxes\n","result":"Detect stylesheet completions.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSnippetCompletions(editor, pos, config) {\r\n\tconst { type, syntax } = config;\r\n\tif (!editor.state.emmetCompletions) {\r\n\t\teditor.state.emmetCompletions = {};\r\n\t}\r\n\tconst cache = editor.state.emmetCompletions;\r\n\tif (!(syntax in cache)) {\r\n\t\tconst registry = createSnippetsRegistry(type, syntax, config.snippets);\r\n\t\tcache[syntax] = type === 'stylesheet'\r\n\t\t\t? getStylesheetSnippets(registry, config)\r\n\t\t\t: getMarkupSnippets(registry, config);\r\n\t}\r\n\treturn cache[syntax];\r\n}","code-length":173,"reference":"Returns all possible snippets completions for given editor context.\nCompletions are cached in editor for for re-use\n","result":"Detect emmet completions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getStylesheetSnippets(registry) {\r\n\treturn convertToCSSSnippets(registry).map(snippet => {\r\n\t\tlet preview = snippet.property;\r\n\t\tconst keywords = snippet.keywords();\r\n\t\tif (keywords.length) {\r\n\t\t\tpreview += `: ${removeFields(keywords.join(' | '))}`;\r\n\t\t} else if (snippet.value) {\r\n\t\t\tpreview += `: ${removeFields(snippet.value)}`;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tkey: snippet.key,\r\n\t\t\tvalue: snippet.value,\r\n\t\t\tsnippet: snippet.key,\r\n\t\t\tproperty: snippet.property,\r\n\t\t\tkeywords: keywords.map(kw => {\r\n\t\t\t\tconst m = kw.match(\/^[\\w-]+\/);\r\n\t\t\t\treturn m && {\r\n\t\t\t\t\tkey: m[0],\r\n\t\t\t\t\tpreview: removeFields(kw),\r\n\t\t\t\t\tsnippet: kw\r\n\t\t\t\t};\r\n\t\t\t}).filter(Boolean),\r\n\t\t\tpreview\r\n\t\t};\r\n\t});\r\n}","code-length":268,"reference":"Returns stylesheet snippets list\n","result":"Get the snippets of the stylesheet .","score":[0.1921,0.2326]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMarkupSnippets(registry, config) {\r\n\treturn registry.all({ type: 'string' }).map(snippet => ({\r\n\t\tkey: snippet.key,\r\n\t\tvalue: snippet.value,\r\n\t\tpreview: removeFields(expand(snippet.value, config)),\r\n\t\tsnippet: snippet.key\r\n\t}));\r\n}","code-length":95,"reference":"Returns markup snippets list\n","result":"Generate markdown snippets.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractPrefix(str, match) {\r\n\tlet offset = str.length;\r\n\twhile (offset > 0) {\r\n\t\tif (!match.test(str[offset - 1])) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\toffset--;\r\n\t}\r\n\treturn str.slice(offset);\r\n}","code-length":90,"reference":"Extracts prefix from the end of given string that matches `match` regexp\n","result":"Extract prefix from a string.","score":[0.0838,0.2606]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isValidMarker(editor, marker) {\r\n\tconst range = marker.find();\r\n\t\r\n\tif (range.from.line !== range.to.line) {\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tlet text = editor.getRange(range.from, range.to);\r\n\tif (!text || \/^\\s|\\s$\/g.test(text)) {\r\n\t\treturn false;\r\n\t}\r\n\tif (marker.model && marker.model.config.syntax === 'jsx' && text[0] === '<') {\r\n\t\ttext = text.slice(1);\r\n\t}\r\n\tif (!marker.model || marker.model.abbreviation !== text) {\r\n\t\t\r\n\t\ttry {\r\n\t\t\tmarker.model = new Abbreviation(text, range, marker.model.config);\r\n\t\t\tif (!marker.model.valid(editor, true)) {\r\n\t\t\t\tmarker.model = null;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tconsole.warn(err);\r\n\t\t\tmarker.model = null;\r\n\t\t}\r\n\t}\r\n\treturn Boolean(marker.model && marker.model.snippet);\r\n}","code-length":298,"reference":"Ensures that given editor Emmet abbreviation marker contains valid Emmet abbreviation\nand updates abbreviation model if required\n","result":"Detect if a marker is valid.","score":[0.0367,0.0629]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (property) {\r\n        var def = this._definition[property];\r\n        if (def.type === 'boolean') {\r\n            this[property] = !this[property];\r\n        } else if (def && def.values) {\r\n            this[property] = arrayNext(def.values, this[property]);\r\n        } else {\r\n            throw new TypeError('Can only toggle properties that are type `boolean` or have `values` array.');\r\n        }\r\n        return this;\r\n    }","code-length":130,"reference":"Toggle boolean properties or properties that have a `values` array in its definition.","result":"Toggle a property.","score":[0.0173,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (attr) {\r\n        if (attr == null) return !!Object.keys(this._changed).length;\r\n        if (has(this._derived, attr)) {\r\n            return this._derived[attr].depList.some(function (dep) {\r\n                return this.hasChanged(dep);\r\n            }, this);\r\n        }\r\n        return has(this._changed, attr);\r\n    }","code-length":109,"reference":"Determine if the model has changed since the last `\"change\"` event. If you specify an attribute name, determine if that attribute has changed.","result":"Check if an attribute has changed.","score":[0.0286,0.2094]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (propertyName) {\r\n        if (!this._eventBubblingHandlerCache[propertyName]) {\r\n            this._eventBubblingHandlerCache[propertyName] = function (name, model, newValue) {\r\n                if (changeRE.test(name)) {\r\n                    this.trigger('change:' + propertyName + '.' + name.split(':')[1], model, newValue);\r\n                } else if (name === 'change') {\r\n                    this.trigger('change', this);\r\n                }\r\n            }.bind(this);\r\n        }\r\n        return this._eventBubblingHandlerCache[propertyName];\r\n    }","code-length":158,"reference":"Returns a bound handler for doing event bubbling while adding a name to the change string.","result":"Create a property handler for the given property name.","score":[0.0941,0.2431]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createDerivedProperty(modelProto, name, definition) {\r\n    var def = modelProto._derived[name] = {\r\n        fn: isFunction(definition) ? definition : definition.fn,\r\n        cache: (definition.cache !== false),\r\n        depList: definition.deps || []\r\n    };\r\n    def.depList.forEach(function (dep) {\r\n        modelProto._deps[dep] = union(modelProto._deps[dep] || [], [name]);\r\n    });\r\n    Object.defineProperty(modelProto, name, {\r\n        get: function () {\r\n            return this._getDerivedProperty(name);\r\n        },\r\n        set: function () {\r\n            throw new TypeError(\"`\" + name + \"` is a derived property, it can't be set directly.\");\r\n        }\r\n    });\r\n}","code-length":210,"reference":"helper for creating derived property definitions","result":"Create a new model.","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Image(image, address){\r\n\tvar at = this.attributes = image.attribs;\r\n\tthis.name = path.basename(at.src, path.extname(at.src));\r\n\tthis.saveTo = path.dirname(require.main.filename) + \"\/\";\r\n\tthis.extension = path.extname(at.src);\r\n\tthis.address = url.resolve(address, at.src);\r\n\tthis.fromAddress = address;\r\n}","code-length":121,"reference":"The \"Image\" class.","result":"Create images.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shipitTask(grunt) {\r\n  'use strict';\r\n  grunt.shipit = new Shipit();\r\n  grunt.registerTask('shipit', 'Shipit Task', function (env) {\r\n    var config = grunt.config.get('shipit');\r\n    grunt.shipit.environment = env;\r\n    if (!config.default && config.options)\r\n      config.default = config.options;\r\n    grunt.shipit\r\n      .initConfig(config)\r\n      .initialize();\r\n  });\r\n}","code-length":139,"reference":"Shipit task.","result":"Register shipit tasks.","score":[0,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction injectTemplate (s, node, offset, id) {\r\n  const t = node.src ? readSrc(id, node.src) : node.content\r\n  const compiled = compiler.compile(t)\r\n  const renderFuncs = '\\nrender: ' + toFunction(compiled.render) + ',' +\r\n    '\\nstaticRenderFns: [' + compiled.staticRenderFns.map(toFunction).join(',') + '],'\r\n  s.appendLeft(offset, renderFuncs)\r\n  return renderFuncs\r\n}","code-length":132,"reference":"Only support for es5 modules\n\n","result":"Inject templates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _defaultCheckSize(size) {\r\n  return function (raw) {\r\n    if (raw.length < size) {\r\n      return false;\r\n    }\r\n    this.buffer = raw.substr(size);\r\n    return raw.substr(0, size);\r\n  };\r\n}","code-length":82,"reference":"A closure factory to build the checkSize function for most of our handlers","result":"Check size.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction int64add5(dst, a, b, c, d, e)\r\n{\r\n   var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff) + (e.l & 0xffff);\r\n   var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (w0 >>> 16);\r\n   var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (e.h & 0xffff) + (w1 >>> 16);\r\n   var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (w2 >>> 16);\r\n   dst.l = (w0 & 0xffff) | (w1 << 16);\r\n   dst.h = (w2 & 0xffff) | (w3 << 16);\r\n}","code-length":290,"reference":"Same, except with 5 addends","result":"Bits to an int.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (configFile, options) {\r\n    DataStream.call(this);\r\n    this.options = options || {};\r\n    var self = this;\r\n    this.configFile = configFile;\r\n    this.init();\r\n    this.bundles = {};\r\n    this.buildConfig = this.compileConfig(configFile, self.options);\r\n    this.makeEmptyStreamsUnreadable(this.buildConfig);\r\n    var isFatalErrors = !this.isAllModulesExists(this.buildConfig);\r\n    if (isFatalErrors) {\r\n        this.readable = false;\r\n        this.style.readable = false;\r\n        this.sourceMap.readable = false;\r\n    } else {\r\n        this._initBundlesStreams(this.buildConfig.bundles);\r\n    }\r\n    process.nextTick(function () {\r\n        if (!isFatalErrors) {\r\n            if (configFile) {\r\n                var buildResult = self.build(self.buildConfig);\r\n                self.write(buildResult.source);\r\n                self.style.write(buildResult.style);\r\n                self.sourceMap.write(buildResult.sourceMap.toString());\r\n                self._streamBundles(buildResult.bundles);\r\n            } else {\r\n                self.log.write('lmd usage:\\n\\t    ' + 'lmd'.blue + ' ' + 'config.lmd.js(on)'.green + ' [output.lmd.js]\\n');\r\n            }\r\n        } else {\r\n            self.printFatalErrors(self.buildConfig);\r\n        }\r\n        self.closeStreams();\r\n    });\r\n}","code-length":401,"reference":"LmdBuilder LMD Package Builder\n\nLmdBuilder is readable stream\n\n","result":"Generate the lmd.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSandboxMap(ast) {\r\n        var map = {};\r\n        walker.with_walkers({\r\n            \"var\" : function (vars) {\r\n                for (var i = 0, c = vars.length, varItem; i < c; i++) {\r\n                    varItem = vars[i];\r\n                    if (varItem[0] === 'sandbox') {\r\n                        varItem[1][1].forEach(function (objectVar) {\r\n                            map[objectVar[0]] = objectVar[1][1];\r\n                        });\r\n                        throw 0;\r\n                    }\r\n                }\r\n            }\r\n        }, function () {\r\n            try {\r\n                return walker.walk(ast);\r\n            } catch (e) {}\r\n        });\r\n        return map;\r\n    }","code-length":202,"reference":"Uses variable sandbox for create replacement map\n\n","result":"Generate sandbox map.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction breakSandbox(ast, replaceMap) {\r\n        var sandboxName = ast[2][0] || 'sb';\r\n        var newAst = walker.with_walkers({\r\n            \"dot\" : function () {\r\n                if (this[1] && this[1][0] === \"name\" && this[1][1] === sandboxName) {\r\n                    var sourceName = this[2];\r\n                    return [\"name\", replaceMap[sourceName]];\r\n                }\r\n            }\r\n        }, function () {\r\n            return walker.walk(ast);\r\n        });\r\n        newAst[1][2] = [];\r\n        return newAst;\r\n    }","code-length":169,"reference":"Brakes sendbox in one module\n\n","result":"Break sandbox .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n                if (isSandboxVariableWiped) {\r\n                    return;\r\n                }\r\n                for (var i = 0, c = this[1].length, varItem; i < c; i++) {\r\n                    varItem = this[1][i];\r\n                    if (varItem[0] === 'sandbox') {\r\n                        isSandboxVariableWiped = true;\r\n                        this[1].splice(i, 1);\r\n                        return this;\r\n                    }\r\n                }\r\n            }","code-length":132,"reference":"wipe sandobx variable","result":"Create a function to be executed in the browser.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEvents(ast) {\r\n        var usage = {},\r\n            eventIndex = 0;\r\n        walker.with_walkers({\r\n            \"call\" : function () {\r\n                if (this[1] && this[2][0]) {\r\n                    var functionName = this[1][1];\r\n                    switch (functionName) {\r\n                        case \"lmd_on\":\r\n                        case \"lmd_trigger\":\r\n                            var eventName = this[2][0][1];\r\n                            if (!usage[eventName]) {\r\n                                usage[eventName] = {\r\n                                    on: 0,\r\n                                    trigger: 0,\r\n                                    eventIndex: eventIndex\r\n                                };\r\n                                eventIndex++;\r\n                            }\r\n                            if (functionName === \"lmd_on\") {\r\n                                usage[eventName].on++;\r\n                            } else {\r\n                                usage[eventName].trigger++;\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }, function () {\r\n            return walker.walk(ast);\r\n        });\r\n        return usage;\r\n    }","code-length":279,"reference":"Collects all plugins events with usage and event index\n\n{\neventIndex: 3, \/\/ relative event index\non: 1,         \/\/ number of listeners\ntrigger: 2     \/\/ number of triggers\n}\n\n","result":"Generate the events .","score":[0.0006,0.0189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wipeLmdEvents(ast) {\r\n        var itemsToWipe = ['lmd_on', 'lmd_trigger', 'lmd_events'];\r\n        return walker.with_walkers({\r\n            \"var\": function () {\r\n                if (!itemsToWipe.length) {\r\n                    return;\r\n                }\r\n                for (var i = 0, c = this[1].length, varItem; i < c; i++) {\r\n                    varItem = this[1][i];\r\n                    if (varItem) {\r\n                        var itemIndex = itemsToWipe.indexOf(varItem[0]);\r\n                        if (itemIndex !== -1) {\r\n                            itemsToWipe.splice(itemIndex, 1);\r\n                            this[1].splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }, function () {\r\n            return walker.walk(ast);\r\n        });\r\n    }","code-length":244,"reference":"Wipes lmd_on, lmd_trigger, lmd_events variables from source\n\n","result":"Var walker .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n                if (!itemsToWipe.length) {\r\n                    return;\r\n                }\r\n                for (var i = 0, c = this[1].length, varItem; i < c; i++) {\r\n                    varItem = this[1][i];\r\n                    if (varItem) {\r\n                        var itemIndex = itemsToWipe.indexOf(varItem[0]);\r\n                        if (itemIndex !== -1) {\r\n                            itemsToWipe.splice(itemIndex, 1);\r\n                            this[1].splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n            }","code-length":164,"reference":"wipe lmdEvents variables","result":"Trigger the event .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (optionName, isApply, isInline) {\r\n        var inlinePreprocessorBlock = isInline ? '' : 'if (' + optionName + ') {',\r\n            bracesCounter = 0,\r\n            startIndex = lmd_js.indexOf(inlinePreprocessorBlock),\r\n            startLength = inlinePreprocessorBlock.length,\r\n            endIndex = startIndex + inlinePreprocessorBlock.length,\r\n            endLength = isInline ? 5 : 1;\r\n        if (startIndex === -1) {\r\n            return false;\r\n        }\r\n        while (lmd_js.length > endIndex) {\r\n            if (lmd_js[endIndex] === '{') {\r\n                bracesCounter++;\r\n            }\r\n            if (lmd_js[endIndex] === '}') {\r\n                bracesCounter--;\r\n            }\r\n                        if (bracesCounter === -1) {\r\n                if (isInline) {\r\n                    endIndex -= 2;\r\n                } else {\r\n                    while (startIndex) {\r\n                        startIndex--;\r\n                        startLength++;\r\n                        if (lmd_js[startIndex] !== '\\t' && lmd_js[startIndex] !== ' ') {\r\n                            startIndex++;\r\n                            startLength--;\r\n                            break;\r\n                        }\r\n                    }\r\n                    while (endIndex) {\r\n                        endIndex--;\r\n                        endLength++;\r\n                        if (lmd_js[endIndex] !== '\\t' && lmd_js[endIndex] !== ' ') {\r\n                            endIndex++;\r\n                            endLength--;\r\n                            break;\r\n                        }\r\n                    }\r\n                    endLength++;\r\n                    startLength++;\r\n                }\r\n                if (isApply) {\r\n                    lmd_js = lmd_js.substr(0, startIndex) + lmd_js.substr(startIndex + startLength);\r\n                    lmd_js = lmd_js.substr(0, endIndex - startLength) + lmd_js.substr(endIndex + endLength - startLength);\r\n                    if (!isInline) {\r\n                        var blockForIndent = lmd_js.substr(startIndex, endIndex - startLength - startIndex);\r\n                        blockForIndent = blockForIndent\r\n                            .split('\\n')\r\n                            .map(function (line) {\r\n                                return line.replace(\/^\\s{4}\/, '');\r\n                            })\r\n                            .join('\\n');\r\n                        lmd_js = lmd_js.substr(0, startIndex) + blockForIndent + lmd_js.substr(endIndex - startLength);\r\n                    }\r\n                } else {\r\n                    lmd_js = lmd_js.substr(0, startIndex) + lmd_js.substr(endIndex + endLength);\r\n                }\r\n                break;\r\n            }\r\n            endIndex++;\r\n        }\r\n        return true;\r\n    }","code-length":698,"reference":"Applies or removes block from lmd_js\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (e) {\r\n                if (isNotLoaded) {\r\n                    isNotLoaded = 0;\r\n                    link.removeAttribute('id');\r\n                    if (!e) {\r\n                        sb.trigger('*:request-error', moduleName, module);\r\n                    }\r\n                    callback(e ? sb.register(moduleName, link) : head.removeChild(link) && sb.undefined);\r\n                }\r\n            }","code-length":108,"reference":"Create stylesheet link","result":"Detect if a module is loaded already.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction d3_layout_hierarchyRebind(object, hierarchy) {\r\n  object.sort = d3.rebind(object, hierarchy.sort);\r\n  object.children = d3.rebind(object, hierarchy.children);\r\n  object.links = d3_layout_hierarchyLinks;\r\n  object.value = d3.rebind(object, hierarchy.value);\r\n  object.nodes = function(d) {\r\n    d3_layout_hierarchyInline = true;\r\n    return (object.nodes = object)(d);\r\n  };\r\n  return object;\r\n}","code-length":148,"reference":"A method assignment helper for hierarchy subclasses.","result":"Rebind the hierarchy properties.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction position(row, u, rect, flush) {\r\n    var i = -1,\r\n        n = row.length,\r\n        x = rect.x,\r\n        y = rect.y,\r\n        v = u ? round(row.area \/ u) : 0,\r\n        o;\r\n    if (u == rect.dx) {\r\n      if (flush || v > rect.dy) v = v ? rect.dy : 0;\r\n      while (++i < n) {\r\n        o = row[i];\r\n        o.x = x;\r\n        o.y = y;\r\n        o.dy = v;\r\n        x += o.dx = v ? round(o.area \/ v) : 0;\r\n      }\r\n      o.z = true;\r\n      o.dx += rect.x + rect.dx - x;\r\n      rect.y += v;\r\n      rect.dy -= v;\r\n    } else {\r\n      if (flush || v > rect.dx) v = v ? rect.dx : 0;\r\n      while (++i < n) {\r\n        o = row[i];\r\n        o.x = x;\r\n        o.y = y;\r\n        o.dx = v;\r\n        y += o.dy = v ? round(o.area \/ v) : 0;\r\n      }\r\n      o.z = false;\r\n      o.dy += rect.y + rect.dy - y;\r\n      rect.x += v;\r\n      rect.dx -= v;\r\n    }\r\n  }","code-length":386,"reference":"Positions the specified row of nodes. Modifies `rect`.","result":"Position a row in the grid.","score":[0.1645,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(classes) {\r\n            var map = {};\r\n            function find(name, data) {\r\n                var node = map[name], i;\r\n                if (!node) {\r\n                    node = map[name] = data || {name: name, children: []};\r\n                    if (name.length) {\r\n                        node.parent = find(\"\");\r\n                        node.parent.children.push(node);\r\n                        node.name = name;\r\n                        node.key = escapeId(name);\r\n                    }\r\n                }\r\n                return node;\r\n            }\r\n            classes.forEach(function(d) {\r\n                find(d.name, d);\r\n            });\r\n            return map[\"\"];\r\n        }","code-length":186,"reference":"Lazily construct the package hierarchy from class names.","result":"Create a class map.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stringify(object) {\r\n    var properties = [];\r\n    for (var key in object) {\r\n        if (object.hasOwnProperty(key)) {\r\n            properties.push(quote(key) + ':' + getValue(object[key]));\r\n        }\r\n    }\r\n    return \"{\" + properties.join(\",\") + \"}\";\r\n}","code-length":94,"reference":"Simple JSON stringify","result":"Stringify object.","score":[0,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction countIf() {\r\n\t\tvar self = this, ret;\r\n\t\tif (self[0].start && analyzing.indexOf(self) < 0) {\r\n\t\t\tvar decision = self[1];\r\n\t\t\tvar lineId = self[0].name + ':' + (self[0].start.line + lineOffset);\r\n\t\t\tself[1] = wrapCondition(decision, lineId);\r\n\t\t\t\r\n\t\t\tif (self[2] && self[2][0].start && self[2][0].start.value != \"{\") {\r\n\t\t\t\tself[2] = [ \"block\", [self[2]]];\r\n\t\t\t}\r\n\t\t\tif (self[3] && self[3][0].start && self[3][0].start.value != \"{\") {\r\n\t\t\t\tself[3] = [ \"block\", [self[3]]];\r\n\t\t\t}\r\n\t\t}\r\n\t\tret = countLine.call(self);\r\n\t\tif (decision) {\r\n\t\t\tanalyzing.pop(decision);\r\n\t\t}\r\n\t\treturn ret;\r\n\t}","code-length":278,"reference":"Walker for 'if' nodes. It overrides countLine because we want to instrument conditions.\n\n'this' is an if node, so\n'this[0]' is the node descriptor\n'this[1]' is the decision block\n'this[2]' is the 'then' code block\n'this[3]' is the 'else' code block\n\nNote that if\/else if\/else in AST are represented as nested if\/else","result":"Count lines in if statements.","score":[0.0,0.0317]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapCondition(decision, lineId, parentPos) {\r\n\t\tif (options.condition === false) {\r\n\t\t\t\r\n\t\t\treturn decision;\r\n\t\t}\r\n\t\tif (isSingleCondition(decision)) {\r\n\t\t\tvar pos = getPositionStart(decision, parentPos);\r\n\t\t\tvar condId = lineId + \":\" + pos;\r\n\t\t\tanalyzing.push(decision);\r\n\t\t\tallConditions.push(condId);\r\n\t\t\treturn [\"call\",\r\n                [\"dot\", [\"name\", \"require\"], \"coverage_condition\"],\r\n\t\t\t\t[\r\n\t\t\t\t\t[ \"string\", moduleName ],\r\n\t\t\t\t\t[ \"string\", condId],\r\n\t\t\t\t\tdecision\r\n\t\t\t\t]\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\tdecision[2] = wrapCondition(decision[2], lineId, getPositionStart(decision, parentPos));\r\n\t\t\tdecision[3] = wrapCondition(decision[3], lineId, getPositionEnd(decision, parentPos));\r\n\t\t\treturn decision;\r\n\t\t}\r\n\t}","code-length":274,"reference":"This is the key function for condition coverage as it wraps every condition in\na function call.\nThe condition id is generated fron the lineId (","result":"Wrap conditions in a function .","score":[0.0142,0.1858]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isSingleCondition(decision) {\r\n\t\tif (decision[0].start && decision[0].name != \"binary\") {\r\n\t\t\treturn true;\r\n\t\t} else if (decision[1] == \"&&\" || decision[1] == \"||\") {\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}","code-length":104,"reference":"Wheter or not the if decision has only one boolean condition","result":"Detect if a single condition is a single condition.","score":[0.116,0.0926]}
{"code":"\/*is used to<extra_id_0>\r\nfunction countLabel() {\r\n\t\tvar ret;\r\n\t\tif (this[0].start && analyzing.indexOf(this) < 0) {\r\n\t\t\tvar content = this[2];\r\n\t\t\tif (content[0].name == \"for\" && content[4] && content[4].name != \"block\") {\r\n\t\t\t\tcontent[4] = [ \"block\", [content[4]]];\r\n\t\t\t}\r\n\t\t\tanalyzing.push(content);\r\n\t\t\tvar ret = countLine.call(this);\r\n\t\t\tanalyzing.pop(content);\r\n\t\t}\r\n\t\treturn ret;\r\n\t}","code-length":165,"reference":"Label nodes need special treatment as well.","result":"Count labels in the label block.","score":[0,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction giveNameToAnonymousFunction () {\r\n\t\tvar node = this;\r\n\t\tif (node[0].name == \"var\" || node[0].name == \"object\") {\r\n\t\t\tnode[1].forEach(function (assignemt) {\r\n\t\t\t\tif (assignemt[1]) {\r\n\t\t\t\t\tif (assignemt[1][0].name === \"function\") {\r\n\t\t\t\t\t\tassignemt[1][0].anonymousName = assignemt[0];\r\n\t\t\t\t\t} else if (assignemt[1][0].name === \"conditional\") {\r\n\t\t\t\t\t\tif (assignemt[1][2][0] && assignemt[1][2][0].name === \"function\") {\r\n\t\t\t\t\t\t\tassignemt[1][2][0].anonymousName = assignemt[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (assignemt[1][3][0] && assignemt[1][3][0].name === \"function\") {\r\n\t\t\t\t\t\t\tassignemt[1][3][0].anonymousName = assignemt[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else if (node[0].name == \"assign\" && node[1] === true) {\r\n\t\t\tif (node[3][0].name === \"function\") {\r\n\t\t\t\tnode[3][0].anonymousName = getNameFromAssign(node);\r\n\t\t\t} else if (node[3][0] === \"conditional\") {\r\n\t\t\t\tif (node[3][2][0] && node[3][2][0].name === \"function\") {\r\n\t\t\t\t\tnode[3][2][0].anonymousName = getNameFromAssign(node);\r\n\t\t\t\t}\r\n\t\t\t\tif (node[3][3][0] && node[3][3][0].name === \"function\") {\r\n\t\t\t\t\tnode[3][3][0].anonymousName = getNameFromAssign(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":490,"reference":"This function tries to extract the name of anonymous functions depending on where they aredefined.","result":"Give the name of the anonymous function to the AST.","score":[0.1613,0.2941]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapConditionals () {\r\n\t\tif (options.condition === false) {\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar self = this, ret;\r\n\t\tif (self[0].start && analyzing.indexOf(self) < 0) {\r\n\t\t\tanalyzing.push(self);\r\n\t\t\tvar lineId = self[0].name + ':' + (self[0].start.line + lineOffset);\r\n\t\t\tself[1] = wrapCondition(self[1], lineId);\r\n\t\t\tself[2] = walker.walk(self[2]);\r\n\t\t\tself[3] = walker.walk(self[3]);\r\n\t\t\tanalyzing.pop(self);\r\n\t\t\treturn self;\r\n\t\t} else if (self[1]) {\r\n\t\t\tself[1] = wrapCondition(self[1], lineId);\r\n\t\t}\r\n\t}","code-length":230,"reference":"This function wraps ternary conditionals in order to have condition coverage","result":"Wrap conditionals in a function.","score":[0.1023,0.2457]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (name, deps, module) {\r\n    switch (arguments.length) {\r\n        case 1:\r\n            module = name;\r\n            deps = name = sb.undefined;\r\n            break;\r\n        case 2:\r\n            module = deps;\r\n            deps = name;\r\n            name = sb.undefined;\r\n            break;\r\n        case 3:\r\n    }\r\n    if (typeof module !== \"function\") {\r\n        amdModules[currentModule] = module;\r\n        return;\r\n    }\r\n    var output = {'exports': {}};\r\n    if (!deps) {\r\n        deps = [\"require\", \"exports\", \"module\"];\r\n    }\r\n    for (var i = 0, c = deps.length; i < c; i++) {\r\n        switch (deps[i]) {\r\n            case \"require\":\r\n                deps[i] = currentRequire;\r\n                break;\r\n            case \"module\":\r\n                deps[i] = output;\r\n                break;\r\n            case \"exports\":\r\n                deps[i] = output.exports;\r\n                break;\r\n            default:\r\n                deps[i] = currentRequire && currentRequire(deps[i]);\r\n        }\r\n    }\r\n    module = module.apply(this, deps) || output.exports;\r\n    amdModules[currentModule] = module;\r\n}","code-length":340,"reference":"RequireJS & AMD-style define\n\n(function (require) {\nvar define = require.define;\n\ndefine([\"a\"], function (a) {\nreturn a + 2;\n});\n})\n\n","result":"Define a module .","score":[0.0046,0.0518]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stats_calculate_coverage(moduleName) {\r\n    var stats = sb.trigger('*:stats-get', moduleName, null)[1],\r\n        total,\r\n        covered,\r\n        lineId,\r\n        lineNum,\r\n        parts;\r\n    var lineReport = {};\r\n    if (!stats.lines) {\r\n        return;\r\n    }\r\n    stats.coverage = {};\r\n    covered = 0;\r\n    total = stats.lines.length;\r\n    for (lineId in stats.runLines) {\r\n        if (stats.runLines[lineId] > 0) {\r\n            covered++;\r\n        } else {\r\n            lineNum = lineId;\r\n            if (!lineReport[lineNum]) {\r\n                lineReport[lineNum] = {};\r\n            }\r\n            lineReport[lineNum].lines = false;\r\n        }\r\n    }\r\n    stats.coverage.lines = {\r\n        total: total,\r\n        covered: covered,\r\n        percentage: 100.0 * (total ? covered \/ total : 1)\r\n    };\r\n    covered = 0;\r\n    total = stats.functions.length;\r\n    for (lineId in stats.runFunctions) {\r\n        if (stats.runFunctions[lineId] > 0) {\r\n            covered++;\r\n        } else {\r\n            parts = lineId.split(':');\r\n            lineNum = parts[1];\r\n            if (!lineReport[lineNum]) {\r\n                lineReport[lineNum] = {};\r\n            }\r\n            if (!lineReport[lineNum].functions) {\r\n                lineReport[lineNum].functions = [];\r\n            }\r\n            lineReport[lineNum].functions.push(parts[0]);\r\n        }\r\n    }\r\n    stats.coverage.functions = {\r\n        total:total,\r\n        covered:covered,\r\n        percentage:100.0 * (total ? covered \/ total : 1)\r\n    };\r\n    covered = 0;\r\n    total = stats.conditions.length;\r\n    for (lineId in stats.runConditions) {\r\n        if (stats.runConditions[lineId][1] > 0) {\r\n            covered += 1;\r\n        }\r\n        if (stats.runConditions[lineId][1] === 0) {\r\n            parts = lineId.split(':');\r\n            lineNum = parts[1];\r\n            if (!lineReport[lineNum]) {\r\n                lineReport[lineNum] = {};\r\n            }\r\n            if (!lineReport[lineNum].conditions) {\r\n                lineReport[lineNum].conditions = [];\r\n            }\r\n            lineReport[lineNum].conditions.push(stats.runConditions[lineId]);\r\n        }\r\n    }\r\n    stats.coverage.conditions = {\r\n        total:total,\r\n        covered:covered,\r\n        percentage:100.0 * (total ? covered \/ total : 1)\r\n    };\r\n    stats.coverage.report = lineReport;\r\n}","code-length":739,"reference":"Calculate coverage total\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (config, mixins) {\r\n    if (Array.isArray(config.mixins) && Array.isArray(mixins)) {\r\n        config.mixins.push.apply(config.mixins, mixins);\r\n        return config;\r\n    }\r\n    return deepDestructableMerge(config, {\r\n        mixins: mixins\r\n    });\r\n}","code-length":96,"reference":"Merges mixins with config\n\n","result":"Return config.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (left, right) {\r\n    for (var prop in right) {\r\n        if (right.hasOwnProperty(prop))  {\r\n            if (typeof left[prop] === \"object\") {\r\n                deepDestructableMerge(left[prop], right[prop]);\r\n            } else {\r\n                left[prop] = right[prop];\r\n            }\r\n        }\r\n    }\r\n    return left;\r\n}","code-length":112,"reference":"Config files deep merge\n\n","result":"Merge objects.","score":[0,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (config, configDir) {\r\n    config = config || {};\r\n    if (typeof config.extends !== \"string\") {\r\n        return config;\r\n    }\r\n    var parentConfig = tryExtend(readConfig(configDir, config.extends), configDir);\r\n    return deepDestructableMerge(parentConfig, config);\r\n}","code-length":89,"reference":"Merges all config files in module's lineage\n\n","result":"Extend config.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (modulePath, dependsFileMask) {\r\n    modulePath = [].concat(modulePath);\r\n    return modulePath.map(function (modulePath) {\r\n        var fileName = modulePath.replace(\/^.*\\\/|\\.[a-z0-9]+$\/g, '');\r\n        return path.join(path.dirname(modulePath), dependsFileMask.replace('*', fileName));\r\n    });\r\n}","code-length":104,"reference":"Returns depends config file of this module\n\n","result":"Generate the module path.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (configA, configB, flagsNames, isMasterConfig) {\r\n    flagsNames.forEach(function (optionsName) {\r\n        if (typeof configB[optionsName] === \"undefined\") {\r\n            return;\r\n        }\r\n        if (isMasterConfig) {\r\n            configA[optionsName] = configB[optionsName];\r\n        } else {\r\n            if (configB[optionsName] instanceof Array && !(configA[optionsName] instanceof Array) ) {\r\n                configA[optionsName] = configB[optionsName];\r\n            } else if (configB[optionsName] instanceof Array && configA[optionsName] instanceof Array) {\r\n                configA[optionsName] = configA[optionsName].concat(configB[optionsName]);\r\n            } else {\r\n                configA[optionsName] = configA[optionsName] || configB[optionsName];\r\n            }\r\n        }\r\n    });\r\n}","code-length":235,"reference":"Merges configs flags\n\n","result":"Merge config objects .","score":[0,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addPluginsFromBundles(resultConfig) {\r\n    if (resultConfig.bundles) {\r\n        var bundles = Object.keys(resultConfig.bundles),\r\n            lmdPlugins = Object.keys(LMD_PLUGINS);\r\n        bundles.forEach(function (bundleName) {\r\n            mergeFlags(resultConfig, resultConfig.bundles[bundleName], lmdPlugins, false);\r\n        });\r\n        if (bundles.length) {\r\n            resultConfig.bundle = true;\r\n        }\r\n    }\r\n}","code-length":134,"reference":"For now add plugins from build to bundle\n\n","result":"Add plugins from bundles.","score":[0.1662,0.3874]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (code, options) {\r\n    var exports = [],\r\n        requires = [],\r\n        bind = [],\r\n        extra_exports = options.extra_exports,\r\n        extra_require = options.extra_require,\r\n        extra_bind = options.extra_bind,\r\n        exportCode,\r\n        bindModuleName;\r\n    if (typeof extra_exports === \"object\") {\r\n        for (var exportName in extra_exports) {\r\n            exportCode = extra_exports[exportName];\r\n            exports.push('    ' + JSON.stringify(exportName) + ': ' + exportCode);\r\n        }\r\n        code += '\\n\\n\\nreturn {\\n' + exports.join(',\\n') + '\\n};';\r\n    } else if (extra_exports) {\r\n        code += '\\n\\n\\nreturn ' + extra_exports + ';';\r\n    }\r\n    if (typeof extra_bind === \"object\") {\r\n        for (var bindName in extra_bind) {\r\n            bindModuleName = extra_bind[bindName];\r\n            bind.push('    ' + JSON.stringify(bindName) + ': require(' + JSON.stringify(bindModuleName) + ')');\r\n        }\r\n        code = '\\nreturn function(){\\n\\n' + code + '\\n}.call({\\n' + bind.join(',\\n') + '\\n});';\r\n    } else if (extra_bind) {\r\n        code = '\\nreturn function(){\\n\\n' + code + '\\n}.call(require(' + JSON.stringify(extra_bind) + '));';\r\n    }\r\n    if (typeof extra_require === \"object\") {\r\n        if (extra_require instanceof Array) {\r\n            for (var i = 0, c = extra_require.length, moduleName; i < c; i++) {\r\n                moduleName = extra_require[i];\r\n                requires.push('require(' + JSON.stringify(moduleName) + ');');\r\n            }\r\n            code = '\\n' + requires.join('\\n') + '\\n\\n' + code;\r\n        } else {\r\n            for (var localName in extra_require) {\r\n                moduleName = extra_require[localName];\r\n                requires.push(localName + ' = require(' + JSON.stringify(moduleName) + ')');\r\n            }\r\n            code = '\\nvar ' + requires.join(',\\n    ') + ';\\n\\n' + code;\r\n        }\r\n    } else if (extra_require) {\r\n        code = '\\nrequire(' + JSON.stringify(extra_require) + ');\\n\\n' + code;\r\n    }\r\n    return '(function (require) { \\n' + code + '\\n})';\r\n}","code-length":668,"reference":"Wrapper for non-lmd modules files\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (code, moduleOptions, moduleType) {\r\n    switch (moduleType) {\r\n        case \"3-party\":\r\n            code = wrap3partyModule(code, moduleOptions);\r\n            break;\r\n        case \"plain\":\r\n            code = wrapPlainModule(code);\r\n            break;\r\n        case \"amd\":\r\n            code = wrapAmdModule(code);\r\n            break;\r\n        case \"fd\":\r\n        case \"fe\":\r\n            code = removeTailSemicolons(code);\r\n    }\r\n    return code;\r\n}","code-length":146,"reference":"Aggregates all module wrappers\n\n","result":"Wrap modules.","score":[0,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getModuleType (code) {\r\n    var ast;\r\n    if (typeof code === \"object\") {\r\n        ast = code;\r\n    } else {\r\n        try {\r\n            JSON.parse(code);\r\n            return \"json\";\r\n        } catch (e) {}\r\n        try {\r\n            ast = parser.parse(code);\r\n        } catch (e) {\r\n            return \"string\";\r\n        }\r\n    }\r\n    if (ast.length === 2 && !ast[1].length && ast[0] === 'toplevel') return \"plain\";\r\n    if (ast && ast.length === 2 &&\r\n        ast[1] && ast[1].length === 1 &&\r\n        ast[1][0][0] === \"defun\"\r\n        ) {\r\n        return \"fd\";\r\n    }\r\n    if (ast && ast.length === 2 &&\r\n        ast[1] && ast[1].length === 1 &&\r\n        ast[1][0][0] === \"stat\" &&\r\n        ast[1][0][1] &&\r\n        ast[1][0][1][0] === \"function\"\r\n        ) {\r\n        return \"fe\";\r\n    }\r\n    if (ast) {\r\n        var isAmd = ast[1].every(function (ast) {\r\n            return ast[0] === \"stat\" &&\r\n                ast[1][0] === \"call\" &&\r\n                ast[1][1][0] === \"name\" &&\r\n                ast[1][1][1] === \"define\";\r\n        });\r\n        if (isAmd) {\r\n            return \"amd\";\r\n        }\r\n    }\r\n    return \"plain\";\r\n}","code-length":423,"reference":"Checks module type\n\n","result":"Detect module type .","score":[0.4518,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction d3_transform(m) {\r\n  var r0 = [m.a, m.b],\r\n      r1 = [m.c, m.d],\r\n      kx = d3_transformNormalize(r0),\r\n      kz = d3_transformDot(r0, r1),\r\n      ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz));\r\n  this.translate = [m.e, m.f];\r\n  this.rotate = Math.atan2(m.b, m.a) * d3_transformDegrees;\r\n  this.scale = [kx, ky || 0];\r\n  this.skew = ky ? kz \/ ky * d3_transformDegrees : 0;\r\n}","code-length":198,"reference":"Compute x-scale and normalize the first row. Compute shear and make second row orthogonal to first. Compute y-scale and normalize the second row. Finally, compute the rotation.","result":"Create a transform object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mousewheel() {\r\n    start.apply(this, arguments);\r\n    if (!d3_behavior_zoomZooming) d3_behavior_zoomZooming = d3_behavior_zoomLocation(d3.svg.mouse(d3_behavior_zoomTarget));\r\n    d3_behavior_zoomTo(d3_behavior_zoomDelta() + xyz[2], d3.svg.mouse(d3_behavior_zoomTarget), d3_behavior_zoomZooming);\r\n  }","code-length":123,"reference":"store starting mouse location","result":"Handle mousewheel events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction d3_behavior_zoomDelta() {\r\nbehavior_zoomDiv = d3.select(\"body\").append(\"div\")\r\n        .style(\"visibility\", \"hidden\")\r\n        .style(\"top\", 0)\r\n        .style(\"height\", 0)\r\n        .style(\"width\", 0)\r\n        .style(\"overflow-y\", \"scroll\")\r\n      .append(\"div\")\r\n        .style(\"height\", \"2000px\")\r\n      .node().parentNode;\r\n  }\r\n  var e = d3.event, delta;\r\n  try {\r\n    d3_behavior_zoomDiv.scrollTop = 1000;\r\n    d3_behavior_zoomDiv.dispatchEvent(e);\r\n    delta = 1000 - d3_behavior_zoomDiv.scrollTop;\r\n  } catch (error) {\r\n    delta = e.wheelDelta || (-e.detail * 5);\r\n  }\r\n  return delta * .005;\r\n}","code-length":234,"reference":"detect the pixels that would be scrolled by this wheel event","result":"Calculate the delta of the event.","score":[0.0839,0.0476]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (data) {\r\n    var config;\r\n    if (typeof data === \"string\") {\r\n        config = parseArgv(data);\r\n        if (Object.keys(config).length) {\r\n            config.mode = config.mode || config.m;\r\n            config.output = config.output || config.o;\r\n            config.log = config.log || config.l;\r\n            config.config = config.config || config.c;\r\n            config['no-warn'] = config['no-warn'] || config['no-w'];\r\n            config['source-map'] = config['source-map'] || config['sm'];\r\n            config['source-map-root'] = config['source-map-root'] || config['sm-root'];\r\n            config['source-map-www'] = config['source-map-www'] || config['sm-www'];\r\n            config['source-map-inline'] = config['source-map-inline'] || config['sm-inline'];\r\n        } else {\r\n            data = data.split(' ');\r\n            if (availableModes.indexOf(data[2]) === -1) {\r\n                config = {\r\n                    mode: 'main',\r\n                    config: data[2],\r\n                    output: data[3]\r\n                };\r\n            } else {\r\n                config = {\r\n                    mode: data[2],\r\n                    config: data[3],\r\n                    output: data[4]\r\n                };\r\n            }\r\n        }\r\n    } else if (typeof config === \"object\") {\r\n        config = data;\r\n    } else {\r\n        throw new Error('Bad config data');\r\n    }\r\n    config.mode = config.mode || 'main';\r\n    config.warn = !config['no-warn'];\r\n    config.sourcemap = config['source-map'] || false;\r\n    config.www_root = config['source-map-root'] || \"\";\r\n    config.sourcemap_www = config['source-map-www'] || \"\";\r\n    config.sourcemap_inline = config['source-map-inline'] || false;\r\n    config.log = config.log || false;\r\n    return config;\r\n}","code-length":543,"reference":"Formats lmd config\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parse (options, document, callback) {\r\n  xml2js.parseString(document, {\r\n    trim: true,\r\n    normalizeTags: true,\r\n    normalize: true\r\n  }, function (err, result) {\r\n    var source = options.source;\r\n    if (!err) {\r\n      _.find(\r\n        result.urlset.url,\r\n        function (urlNode) {\r\n          var url,\r\n              process = !options.sitemapPolicy ||\r\n                !stillCurrent(urlNode, options);\r\n          if (process) {\r\n            url = urlm.parse(urlNode.loc[0]);\r\n            if (!base.input(_.extend({}, options, {\r\n                protocol: url.protocol,\r\n                auth: url.auth,\r\n                hostname: url.hostname,\r\n                port: url.port\r\n              }),\r\n              urlNode.loc[0])\r\n            ) {\r\n              source = urlNode.loc[0];\r\n              err = base.generatorError();\r\n            }\r\n          }\r\n          return err;\r\n        }\r\n      );\r\n    }\r\n    callback(common.prependMsgToErr(err, source, true));\r\n  });\r\n}","code-length":306,"reference":"Parse a sitemap document\nFor each qualifying url element in urlset, call base.input\nStops processing if an error occurs.\n\n","result":"Generate the sitemap.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convert(options, buffer, next, callback) {\r\n  var gunzip = path.extname(options.source) === \".gz\";\r\n  if (gunzip) {\r\n    zlib.gunzip(buffer, function (err, result) {\r\n      if (err) {\r\n        callback(common.prependMsgToErr(err, options.source, true));\r\n      } else {\r\n        next(options, result && result.toString(), callback);\r\n      }\r\n    });\r\n  }\r\n  else {\r\n    next(options, buffer.toString(), callback);\r\n  }\r\n}","code-length":153,"reference":"Convert Buffer input, call next or callback with error\n\n","result":"Convert a file.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getUrl (options, parseFn, callback) {\r\n  request({\r\n    url: options.source,\r\n    encoding: null,\r\n    timeout: options.timeout()\r\n  }, function (err, res, body) {\r\n    var error = err || common.checkResponse(res, [\"text\/xml\", \"application\/xml\"]);\r\n    if (error) {\r\n      callback(common.prependMsgToErr(error, options.source, true));\r\n    } else {\r\n      convert(options, body, parseFn, callback);\r\n    }\r\n  });\r\n}","code-length":148,"reference":"Retrieve the sitemap from a url and call to parse it.\n\n","result":"Fetch the source URL.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFile (options, parseFn, callback) {\r\n  fs.readFile(options.source, function (err, data) {\r\n    if (err) {\r\n      callback(common.prependMsgToErr(err, options.source, true));\r\n    } else {\r\n      convert(options, data, parseFn, callback);\r\n    }\r\n  });\r\n}","code-length":98,"reference":"Retrieve the sitemap from a file and call to parse it.\n\n","result":"Get the file.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (error, message, quoteInput) {\r\n    var result, prepend, empty = \"\", quote = \"'\";\r\n    if (error) {\r\n      if (message) {\r\n        prepend = quoteInput ? empty.concat(quote, message, quote) : message;\r\n      }\r\n      error = error instanceof Error ? error : new Error(empty + error);\r\n      error.message =\r\n        prepend ? empty.concat(prepend, \": \", error.message) : error.message;\r\n      result = error;\r\n    }\r\n    return result;\r\n  }","code-length":143,"reference":"Prepend a message to an Error message.\n\n","result":"Wrap errors in a function.","score":[0.1611,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (res, mediaTypes) {\r\n    var contentTypeOk,\r\n        result = \"status: '\" + res.statusCode + \"', GET failed.\";\r\n    mediaTypes = !Array.isArray(mediaTypes) ? [mediaTypes] : mediaTypes;\r\n    if (res.statusCode === 200) {\r\n      contentTypeOk =\r\n        res.headers[\"content-type\"] &&\r\n        !mediaTypes.every(function(mediaType) {\r\n          return !~res.headers[\"content-type\"].indexOf(mediaType);\r\n        });\r\n      result = contentTypeOk ? \"\" : \"content-type not one of '\"+mediaTypes.join(\",\")+\"'\";\r\n    }\r\n    return result;\r\n  }","code-length":179,"reference":"Simple response checker for remote files.\nExpected use in robots.txt or sitemap.xml only.\n\n","result":"Check if the response is a .","score":[0.0685,0.0806]}
{"code":"\/*is used to<extra_id_0>\r\nfunction nodeCall (nodeFunc ) {\r\n  var nodeArgs = Array.prototype.slice.call(arguments, 1);\r\n  return new Promise(function (resolve, reject) {\r\n        function nodeResolver (err, value) {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(value);\r\n      }\r\n    }\r\n    nodeArgs.push(nodeResolver);\r\n    nodeFunc.apply(nodeFunc, nodeArgs);\r\n  });\r\n}","code-length":130,"reference":"Utility to promisify a Node function\n\n","result":"Call node functions .","score":[0,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareWrite (outputPath, callback) {\r\n  var path = pathLib.parse(outputPath);\r\n  var dir = pathLib.join(path.root, path.dir);\r\n  mkdirp(dir, callback);\r\n}","code-length":65,"reference":"Make sure path exists so a sitemap write can succeed.\n\n","result":"Write to a file.","score":[0.0713,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parse (options, document, callback) {\r\n  xml2js.parseString(document, {\r\n    trim: true,\r\n    normalizeTags: true,\r\n    normalize: true\r\n  }, function (err, result) {\r\n    var sitemapUrls = [];\r\n    var sitemapIndexOptions = Object.assign({}, options, {\r\n      outputPath: undefined\r\n    });\r\n    if (!err) {\r\n      _.forEach(\r\n        result.sitemapindex.sitemap,\r\n        function (sitemapNode) {\r\n          var shouldProcess = !options.sitemapPolicy ||\r\n            !smLib.stillCurrent(sitemapNode, sitemapIndexOptions);\r\n          if (shouldProcess) {\r\n            sitemapUrls.push(sitemapNode.loc[0]);\r\n          }\r\n        }\r\n      );\r\n      if (sitemapUrls.length === 0) {\r\n        console.log(\"[*] No sitemaps qualified for processing\");\r\n      }\r\n      Promise.all(sitemapUrls.map(function (sitemapUrl) {\r\n        var sitemapOptions = Object.assign({}, options, {\r\n          source: sitemapUrl,\r\n          input: \"sitemap\",\r\n          sitemapOutputDir: false,\r\n          __sitemapIndex: sitemapIndexOptions\r\n        });\r\n        console.log(\"[+] Loading the sitemap: '\"+sitemapUrl+\"'\");\r\n        return nodeCall(smLib.getUrl, sitemapOptions, processSitemap);\r\n      }))\r\n        .then(function () {\r\n          callback();\r\n        })\r\n        .catch(callback);\r\n    } else {\r\n      callback(err);\r\n    }\r\n  });\r\n}","code-length":404,"reference":"Parse a sitemap index document\nFor each qualifying sitemap element, download, parse the sitemap.\nStops processing if an error occurs.\n\n","result":"Parse the sitemap.","score":[0.0022,0.1609]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (options, listener) {\r\n    var opts = Object.assign({}, base.defaults(defaults), options);\r\n    return base.run(opts, generateInput, listener);\r\n  }","code-length":54,"reference":"Generate the input arguments for snapshots from a robots.txt file.\nEach input argument generated calls the listener passing the input object.\n\n","result":"Run the script .","score":[0.0046,0.0972]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateInput (options) {\r\n  return nodeCall(\r\n    fs.readFile,\r\n    options.source\r\n  )\r\n    .catch(function (err) {\r\n      options._abort(err);\r\n    })\r\n    .then(function (data) {\r\n      var error;\r\n      if (data) {\r\n        data.toString().split('\\n').every(function (line) {\r\n          var page = line.replace(\/^\\s+|\\s+$\/g, \"\");\r\n          if (!base.input(options, page)) {\r\n            error = common.prependMsgToErr(base.generatorError(), page, true);\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n        if (error) {\r\n          console.error(error);\r\n          options._abort(error);\r\n        }\r\n      }\r\n      base.EOI(textfile);\r\n    });\r\n}","code-length":239,"reference":"Generate the snapshot arguments from a line oriented text file.\nEach line contains a single url we need a snapshot for.\n\n","result":"Generate input.","score":[0.0,0.0262]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateInput (options) {\r\n  var result = new Promise(function (resolve, reject) {\r\n    var all;\r\n    if (Array.isArray(options.source)) {\r\n      all = options.source.every(function (sourceUrl) {\r\n        var url = urlm.parse(sourceUrl);\r\n        var opts = Object.assign({}, options, {\r\n          protocol: url.protocol,\r\n          auth: url.auth,\r\n          hostname: url.hostname,\r\n          port: url.port\r\n        });\r\n        if (!base.input(opts, sourceUrl)) {\r\n          reject(\r\n            common.prependMsgToErr(base.generatorError(), sourceUrl, true)\r\n          );\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      if (all) {\r\n        resolve();\r\n      }\r\n    } else {\r\n      reject(new Error(\"options.source must be an array\"));\r\n    }\r\n  });\r\n  return result\r\n    .catch(function (error) {\r\n      options._abort(error);\r\n    })\r\n    .then(function () {\r\n      base.EOI(array);\r\n    });\r\n}","code-length":306,"reference":"Generate the snapshot arguments from an array of pages.\nStops processing if one fails.\n\n","result":"Return Promise.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalize (obj) {\r\n  var result = obj;\r\n  if (typeof obj !== \"function\") {\r\n    if (typeof obj !== \"undefined\") {\r\n      if (Object.prototype.toString.call(obj) !== \"[object Object]\") {\r\n        result = (function (value) { return function () { return value; }; }(obj));\r\n      } else {\r\n        result = (function (o) { return function (key, passthru) {\r\n          if (o[key] === void 0) {\r\n            return o.__default || (passthru ? key : undefined);\r\n          } else {\r\n            return o[key];\r\n          }\r\n        }; }(obj));\r\n      }\r\n    } else {\r\n      result = function (passthru) { return passthru; };\r\n    }\r\n  }\r\n  return result;\r\n}","code-length":230,"reference":"Normalize the given object to a function.\n\nIf the input is a function, return it as is.\nIf the input is undefined, then a passthru function is generated.\nIf the input is NOT an Object, then a function returns that value.\nIf the input is an Object, then a function receives a key and\nreturns the property value if it exists, otherwise return the __default value.\nIf a passthru is requested, the key is returned when no __default is found.\n\n","result":"Normalize the object.","score":[0.0,0.0138]}
{"code":"\/*is used to<extra_id_0>\r\nfunction supplyMissingDefault (options, name) {\r\n  if (options[name]() === void 0) {\r\n    options[name] = _.wrap(options[name], function(func, key) {\r\n      var res = func(key);\r\n      return res === void 0 ? defaults[name] : res;\r\n    });\r\n  }\r\n}","code-length":93,"reference":"If a normalized option was overriden, but a default still undefined, supply one.\nThe result could still be undefined, but only if the default is undefined.\n\nIf calling the normalized option with no args is undefined, supply missing default.\n\n","result":"Supply missing default values.","score":[0.0001,0.072]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepOptions (options, listener) {\r\n  common.ensure(options, defaults);\r\n  [\r\n    \"selector\", \"timeout\", \"useJQuery\", \"verbose\", \"phantomjsOptions\"\r\n  ]\r\n  .forEach(function (perPageOption) {\r\n    options[perPageOption] = normalize(options[perPageOption]);\r\n    supplyMissingDefault(options, perPageOption);\r\n  });\r\n  options._inputEmitter = new EventEmitter();\r\n  options._inputEmitter.on(\"input\", listener);\r\n}","code-length":136,"reference":"Prepare options for use by an input generator.\n\n","result":"Create the options object.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getOutputPath (options, page, parse) {\r\n  var pagePart = urlm.parse(page),\r\n      outputPath = options.outputPath(page, true);\r\n  if (!outputPath) {\r\n    return false;\r\n  }\r\n  if (common.isUrl(outputPath)) {\r\n    outputPath = pagePart.path + (pagePart.hash ? pagePart.hash : \"\");\r\n  }\r\n  if (parse) {\r\n    parse.url = pagePart;\r\n  }\r\n  return outputPath;\r\n}","code-length":139,"reference":"Get an output path for a page.\n\nParse a given page as a url and return its corresponding outputPath.\nIf parse is an object, parse.url will be a reference to the url parse.\nReturns false if no output path found.\n\n","result":"Generate the output path.","score":[0.0,0.0275]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mapOutputFile (options, page, parse) {\r\n  if (!_.isFunction(options.outputPath)) {\r\n    options.outputPath = normalize(options.outputPath);\r\n  }\r\n  var outputPath = getOutputPath(options, page, parse);\r\n  var outputDir = options.outputDir;\r\n  var fileName = \"index.html\";\r\n  if (options.sitemapOutputDir) {\r\n    outputDir = path.join(options.outputDir, options.sitemapOutputDir);\r\n    fileName = \"\";\r\n  }\r\n  return ( outputPath && path.join(outputDir, outputPath, fileName) ) || false;\r\n}","code-length":160,"reference":"Using the options, map the given page to an output path.\n\n","result":"Map output file paths to sitemap files.","score":[0.1085,0.1415]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (options, generator, listener) {\r\n    options = options || {};\r\n    prepOptions(options, listener);\r\n    return generator(options);\r\n  }","code-length":49,"reference":"Run the input generator.\n\n","result":"Generate code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (options, page) {\r\n    var parse = {};\r\n    var outputFile = mapOutputFile(options, page, parse);\r\n    if (outputFile) {\r\n      options._inputEmitter.emit(\"input\", {\r\n        outputFile: outputFile,\r\n        url: urlm.format({\r\n                protocol: options.protocol,\r\n                auth: options.auth,\r\n                hostname: options.hostname,\r\n                port: options.port,\r\n                pathname: parse.url.pathname,\r\n                search: parse.url.search,\r\n                hash: parse.url.hash\r\n              }),\r\n        selector: options.selector(page),\r\n        timeout: options.timeout(page),\r\n        checkInterval: options.checkInterval,\r\n        useJQuery: options.useJQuery(page),\r\n        verbose: options.verbose(page),\r\n        phantomjsOptions: options.phantomjsOptions(page),\r\n        __page: page\r\n      });\r\n    }\r\n    return outputFile;\r\n  }","code-length":252,"reference":"Generate the input\nEmit the event that contains the input hash\n\n","result":"Create a page .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pathExists (path, options) {\r\n  options = options || {\r\n    returnFile: false\r\n  };\r\n  return nodeCall(fs.access, path)\r\n    .then(function () {\r\n      return options.returnFile ? path : true;\r\n    })\r\n    .catch(function () {\r\n      if (fs.existsSync(path)) {\r\n        return options.returnFile ? path : true;\r\n      }\r\n      return false;\r\n    });\r\n}","code-length":130,"reference":"Check if a path exists.\n\n","result":"Check if a path exists.","score":[1.0,0.996]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n  var phantomSource = require(\"phantomjs-prebuilt\").path;\r\n  if (path.extname(phantomSource).toLowerCase() === \".cmd\") {\r\n    return path.join(path.dirname( phantomSource ), \"","code-length":69,"reference":"Determine the default phantomJS module path.","result":"Build the phantomjs.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction worker (input, options, notifier, qcb) {\r\n  var cp,\r\n      customModule,\r\n      snapshotScript = options.snapshotScript,\r\n      phantomjsOptions = Array.isArray(input.phantomjsOptions) ? input.phantomjsOptions : [input.phantomjsOptions];\r\n  if (!notifier.known(input.outputFile)) {\r\n    if (_.isObject(options.snapshotScript)) {\r\n      snapshotScript = path.join(__dirname, phantomDir, options.snapshotScript.script) + \".js\";\r\n      customModule = options.snapshotScript.module;\r\n    }\r\n    cp = spawn(\r\n      options.phantomjs,\r\n      phantomjsOptions.concat([\r\n        snapshotScript,\r\n        input.outputFile,\r\n        input.url,\r\n        input.selector,\r\n        input.timeout,\r\n        input.checkInterval,\r\n        input.useJQuery,\r\n        input.verbose,\r\n        customModule\r\n      ]), { cwd: process.cwd(), stdio: \"inherit\", detached: true }\r\n    );\r\n    cp.on(\"error\", function (e) {\r\n      notifier.remove(input.outputFile);\r\n      notifier.setError(e);\r\n      console.error(e);\r\n      qcb(e);\r\n    });\r\n    cp.on(\"exit\", function (code) {\r\n      qcb(code);\r\n    });\r\n    notifier.add(input.outputFile, input.timeout);\r\n  }\r\n  else {\r\n    qcb(0);\r\n  }\r\n}","code-length":393,"reference":"The worker task that launches phantomjs.\n\n","result":"Run the worker .","score":[0.1938,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepOptions (options) {\r\n  common.ensure(options, defaults);\r\n  if (Array.isArray(options.source)) {\r\n    options.input = \"array\";\r\n  }\r\n}","code-length":59,"reference":"Prepare html snapshots options.\n\n","result":"Create a new file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (options, listener) {\r\n    var inputGenerator, notifier, started, result, q, emitter, completion;\r\n    options = options || {};\r\n    prepOptions(options);\r\n    inputGenerator = inputFactory.create(options.input);\r\n    if (options.outputDirClean) {\r\n      rimraf(options.outputDir);\r\n    }\r\n    notifier = new Notifier();\r\n    emitter = new EventEmitter();\r\n    started = notifier.start(options.pollInterval, inputGenerator,\r\n      function (err, completed) {\r\n        emitter.emit(\"complete\", err, completed);\r\n      });\r\n    if (started) {\r\n      completion = new Promise(function (resolve, reject) {\r\n        function completionResolver (err, completed) {\r\n          try {\r\n            _.isFunction(listener) && listener(err, completed);\r\n          } catch (e) {\r\n            console.error(\"User supplied listener exception\", e);\r\n          }\r\n          if (err) {\r\n            err.notCompleted = notifier.filesNotDone;\r\n            err.completed = completed;\r\n            reject(err);\r\n          } else {\r\n            resolve(completed);\r\n          }\r\n        }\r\n        emitter.addListener(\"complete\", completionResolver);\r\n      });\r\n      q = asyncLib.queue(function (task, callback) {\r\n        task(_.once(callback));\r\n      }, options.processLimit);\r\n      q.empty = notifier.qEmpty.bind(notifier);\r\n      options._abort = function (err) {\r\n        notifier.abort(q, err);\r\n      };\r\n      result = inputGenerator.run(options, function (input) {\r\n        q.push(_.partial(worker, input, options, notifier));\r\n      })\r\n        .then(function () {\r\n          return completion;\r\n        });\r\n    } else {\r\n      result = Promise.reject(\"failed to start async notifier\");\r\n    }\r\n    return result;\r\n  }","code-length":490,"reference":"Run all the snapshots using the requested inputGenerator\n\n","result":"Create a new Notifier .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createLockFactory () {\r\n  var lock = new AsyncLock();\r\n  var rid = crypto.randomBytes(16).toString(\"hex\");\r\n    return function lockFactory (fn, timeout) {\r\n    return function protectedContext () {\r\n      lock.acquire(\"cs-guard-\" + rid, function (done) {\r\n        fn(function () {\r\n          done(null, 0);\r\n        });\r\n      }, NOOP, {\r\n        timeout: timeout\r\n      });\r\n    };\r\n  };\r\n}","code-length":136,"reference":"Create the lock factory.","result":"Create a lock factory.","score":[0.5,0.6389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Notifier () {\r\n  this.csFactory = createLockFactory();\r\n  this.files = {};\r\n  this.filesDone = [];\r\n  this.filesNotDone = [];\r\n  this.errors = [];\r\n  this.padTimeout = TIMEOUT_PAD_FLOOR;\r\n  this.callback = null;\r\n  this.qempty = false;\r\n}","code-length":103,"reference":"Notifier Constructor","result":"Create the notifier.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction start (pollInterval, input, listener) {\r\n    var result = (\r\n      pollInterval > 0 &&\r\n      typeof listener === \"function\" &&\r\n      (!!input)\r\n      );\r\n    if (result) {\r\n      if (this.isStarted()) {\r\n        throw new Error(\"Notifier already started\");\r\n      }\r\n      this.callback = listener;\r\n      this.interval = parseInt(pollInterval, 10);\r\n      this.watcher = setInterval(this.csFactory(function (done) {\r\n        var self = this;\r\n        var eoi = typeof input.EOI === \"function\" && input.EOI();\r\n        if (eoi) {\r\n          Promise.all(Object.keys(self.files).map(function (file) {\r\n            return pathExists(file, {\r\n              returnFile: true\r\n            });\r\n          }))\r\n            .then(function (files) {\r\n              var callback = self.callback;\r\n              try {\r\n                files.forEach(function (file) {\r\n                  file && self._remove(file, true);\r\n                });\r\n                if (self._isDone()) {\r\n                  self._closeWatcher();\r\n                  if (self.callback) {\r\n                    self.callback = null;\r\n                    setImmediate(function () {\r\n                      callback(self.getError(), self.filesDone);\r\n                    });\r\n                  }\r\n                }\r\n              } catch (e) {\r\n                console.error(e);\r\n              }\r\n              done();\r\n            });\r\n        } else {\r\n          done();\r\n        }\r\n      }.bind(this), L_WAIT), this.interval);\r\n    } else {\r\n      console.error(\"Bad poll interval, async listener, or input generator supplied\");\r\n    }\r\n    return result;\r\n  }","code-length":453,"reference":"Start a watch interval, when a file exists, remove it from our files array.\nIf the files array is empty, call the listener and stop the watch interval.\n\n","result":"Start the notifier.","score":[0.0001,0.0392]}
{"code":"\/*is used to<extra_id_0>\r\nfunction add (outputFile, timeout) {\r\n    var failTimeout = timeout;\r\n    var timer;\r\n    if (!this.isStarted()) {\r\n      throw new Error(\"MUST call `start` before `add`\");\r\n    }\r\n    if (!this._exists(outputFile)) {\r\n      failTimeout = parseInt(timeout, 10) + parseInt(this.padTimeout, 10);\r\n      this.padTimeout += 100;\r\n      timer = setTimeout(this.csFactory(function (done) {\r\n        var self = this;\r\n        if (self._exists(outputFile)) {\r\n          pathExists(outputFile)\r\n            .then(function (fsExists) {\r\n              var callback = self.callback;\r\n              try {\r\n                if (!fsExists) {\r\n                  self._setError(new Error(\r\n                    \"'\" + outputFile + \"' did not get a snapshot before timeout\"\r\n                  ));\r\n                }\r\n                self._remove(outputFile, fsExists);\r\n                if (self._isDone()) {\r\n                  self._closeWatcher();\r\n                  if (self.callback) {\r\n                    self.callback = null;\r\n                    setImmediate(function () {\r\n                      callback(self.getError(), self.filesDone);\r\n                    });\r\n                  }\r\n                }\r\n              } catch (e) {\r\n                console.error(e);\r\n              }\r\n              done();\r\n            });\r\n        } else {\r\n          done();\r\n        }\r\n      }.bind(this), L_WAIT), parseInt(failTimeout, 10));\r\n      this.files[outputFile] = {\r\n        timer: timer\r\n      };\r\n    }\r\n  }","code-length":414,"reference":"Add a file to the files array if it's not there.\n\n","result":"Add files to the snapshot.","score":[0.1217,0.3035]}
{"code":"\/*is used to<extra_id_0>\r\nfunction known (outputFile) {\r\n    var result = false;\r\n    this.csFactory(function (done) {\r\n      result =\r\n        this._exists(outputFile) || this.filesDone.indexOf(outputFile) > -1;\r\n      done();\r\n    }.bind(this), L_WAIT)();\r\n    return result;\r\n  }","code-length":96,"reference":"Check if a file is being processed or has already been processed.\n\n","result":"Determine if a file is known.","score":[0.2223,0.3481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _remove (outputFile, done) {\r\n    if (this._exists(outputFile)) {\r\n      if (done) {\r\n        this.filesDone.push(outputFile);\r\n      } else {\r\n        this.filesNotDone.push(outputFile);\r\n      }\r\n      clearTimeout(this.files[outputFile].timer);\r\n      delete this.files[outputFile];\r\n    }\r\n  }","code-length":110,"reference":"Remove a file from the files array if it's there.\nUnprotected version.\n\n","result":"Remove files.","score":[0.0034,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remove (outputFile, done) {\r\n    this.csFactory(function (_done) {\r\n      this._remove(outputFile, done);\r\n      _done();\r\n    }.bind(this), L_WAIT)();\r\n  }","code-length":68,"reference":"Remove a file from the files array if it's there.\nProtected version.\n\n","result":"Remove files.","score":[0.0034,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (time) {\r\n          fs.write(options.outputFile, filter(page.content), \"w\");\r\n          globals.exit(0, \"snapshot for \"+options.url+\" finished in \"+time+\" ms\\n  written to \"+options.outputFile);\r\n        }","code-length":73,"reference":"The onReady callback","result":"Create a snapshot.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction oneline (line, options) {\r\n  var key = \"Allow: \",\r\n      index = line.indexOf(key);\r\n  if (index !== -1) {\r\n    var page = line.substr(index + key.length).replace(\/^\\s+|\\s+$\/g, \"\");\r\n    return page.indexOf(\"*\") === -1 && base.input(options, page);\r\n  }\r\n  return true;\r\n}","code-length":114,"reference":"Does not support wildcards.","result":"Detect oneline.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getRobotsUrl (options, callback) {\r\n  request({\r\n    url: options.source,\r\n    timeout: options.timeout()\r\n  }, function (err, res, body) {\r\n    var error = err || common.checkResponse(res, \"text\/plain\");\r\n    if (error) {\r\n      callback(common.prependMsgToErr(error, options.source, true));\r\n    } else {\r\n      body.toString().split('\\n').every(function(line) {\r\n        if (!oneline(line, options)) {\r\n          error = common.prependMsgToErr(base.generatorError(), line, true);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      callback(error);\r\n    }\r\n  });\r\n}","code-length":201,"reference":"Retrieves robots.txt from url and parses it.\n\n","result":"Generate the url of the robots file.","score":[0.1615,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getRobotsFile (options, callback) {\r\n  fs.readFile(options.source, function (err, data) {\r\n    if (!err) {\r\n      data.toString().split('\\n').every(function (line) {\r\n        if (!oneline(line, options)) {\r\n          err = common.prependMsgToErr(base.generatorError(), line, true);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n    }\r\n    callback(err);\r\n  });\r\n}","code-length":138,"reference":"Reads the robots.txt file and parses it.","result":"Generate the file.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bubble(values) {\r\n  return values.map(d => {\r\n    if (d.key && d.values) {\r\n      if (d.values[0].key === \"undefined\") return d.values[0].values[0];\r\n      else d.values = bubble(d.values);\r\n    }\r\n    return d;\r\n  });\r\n}","code-length":98,"reference":"Bubbles up values that do not nest to the furthest key.\n","result":"Bubble values.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exclude(a, b, v) {\r\n  const aStart = a.start({type: \"bigInteger\"});\r\n  const bStart = b.start({type: \"bigInteger\"});\r\n  const aEnd = a.end({type: \"bigInteger\"});\r\n  const bEnd = b.end({type: \"bigInteger\"});\r\n  const parts = [];\r\n  if (aStart.compareTo(bEnd) > 0 || aEnd.compareTo(bStart) < 0) {\r\n    return [a.cidr];\r\n  }\r\n  if (aStart.compareTo(bStart) === 0 && aEnd.compareTo(bEnd) === 0) {\r\n    return [];\r\n  }\r\n  if (aStart.compareTo(bStart) > 0 && aEnd.compareTo(bEnd) < 0) {\r\n    return [];\r\n  }\r\n  if (aStart.compareTo(bStart) < 0 && aEnd.compareTo(bEnd) <= 0) {\r\n    parts.push({\r\n      start: aStart,\r\n      end: bStart.subtract(one),\r\n    });\r\n  }\r\n  if (aStart.compareTo(bStart) >= 0 && aEnd.compareTo(bEnd) > 0) {\r\n    parts.push({\r\n      start: bEnd.add(one),\r\n      end: aEnd,\r\n    });\r\n  }\r\n  if (aStart.compareTo(bStart) < 0 && aEnd.compareTo(bEnd) > 0) {\r\n    parts.push({\r\n      start: aStart,\r\n      end: bStart.subtract(one),\r\n    });\r\n    parts.push({\r\n      start: bEnd.add(one),\r\n      end: aEnd,\r\n    });\r\n  }\r\n  const remaining = [];\r\n  for (const part of parts) {\r\n    for (const subpart of subparts(part, v)) {\r\n      remaining.push(formatPart(subpart, v));\r\n    }\r\n  }\r\n  return cidrTools.merge(remaining);\r\n}","code-length":524,"reference":"exclude b from a and return remainder cidrs","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMsTimestamp(){\r\n        var ts = new Date().getTime();\r\n        if(lastMsTs >= ts){\r\n            lastMsTs++;\r\n        }\r\n        else{\r\n            lastMsTs = ts;\r\n        }\r\n        return lastMsTs;\r\n    }","code-length":80,"reference":"get unique timestamp in miliseconds","result":"Var lastMsTs .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseUrl(url) {\r\n        var serverOptions = {\r\n            host: \"localhost\",\r\n            port: 80\r\n        };\r\n        if(url.indexOf(\"https\") === 0){\r\n            serverOptions.port = 443;\r\n        }\r\n        var host = url.split(\":\r\n        serverOptions.host = host;\r\n        var lastPos = host.indexOf(\":\");\r\n        if (lastPos > -1) {\r\n            serverOptions.host = host.slice(0,lastPos);\r\n            serverOptions.port = Number(host.slice(lastPos+1,host.length));\r\n        }\r\n        return serverOptions;\r\n    }","code-length":172,"reference":"parsing host and port information from url","result":"Parse the url.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareParams(params){\r\n        var str = [];\r\n        for(var i in params){\r\n            str.push(i+\"=\"+encodeURIComponent(params[i]));\r\n        }\r\n        return str.join(\"&\");\r\n    }","code-length":70,"reference":"convert JSON object to query params","result":"Prepare the params.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stripTrailingSlash(str) {\r\n        if(str.substr(str.length - 1) === \"\/\") {\r\n            return str.substr(0, str.length - 1);\r\n        }\r\n        return str;\r\n    }","code-length":66,"reference":"removing trailing slashes","result":"Remove comments.","score":[0,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getProperties(orig, props){\r\n        var ob = {};\r\n        var prop;\r\n        for(var i = 0; i < props.length; i++){\r\n            prop = props[i];\r\n            if(typeof orig[prop] !== \"undefined\"){\r\n                ob[prop] = orig[prop];\r\n            }\r\n        }\r\n        return ob;\r\n    }","code-length":103,"reference":"retrieve only specific properties from object","result":"Get the properties of an object.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction add_cly_events(event){\r\n        if(!event.key){\r\n            log(\"Event must have key property\");\r\n            return;\r\n        }\r\n        if(cluster.isMaster){\r\n            if(!event.count){\r\n                event.count = 1;\r\n            }\r\n                        var props = [\"key\", \"count\", \"sum\", \"dur\", \"segmentation\"];\r\n            var e = getProperties(event, props);\r\n            e.timestamp = getMsTimestamp();\r\n            var date = new Date();\r\n            e.hour = date.getHours();\r\n            e.dow = date.getDay();\r\n            log(\"Adding event: \", event);\r\n            eventQueue.push(e);\r\n            storeSet(\"cly_event\", eventQueue);\r\n        }\r\n        else{\r\n            process.send({ cly: {event: event} });\r\n        }\r\n    }","code-length":230,"reference":"internal method for events, in case there is no consent for custom events, but internal events has consents","result":"Add cly events to the cluster.","score":[0.0261,0.0298]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareRequest(request) {\r\n        request.app_key = Countly.app_key;\r\n        request.device_id = Countly.device_id;\r\n        request.sdk_name = SDK_NAME;\r\n        request.sdk_version = SDK_VERSION;\r\n        if(Countly.check_consent(\"location\")){\r\n            if(Countly.country_code){\r\n                request.country_code = Countly.country_code;\r\n            }\r\n            if(Countly.city){\r\n                request.city = Countly.city;\r\n            }\r\n            if(Countly.ip_address !== null){\r\n                request.ip_address = Countly.ip_address;\r\n            }\r\n        }\r\n        else{\r\n            request.location = \"\";\r\n        }\r\n                    request.timestamp = getMsTimestamp();\r\n        var date = new Date();\r\n        request.hour = date.getHours();\r\n        request.dow = date.getDay();\r\n    }","code-length":254,"reference":"prepare request by adding basic info to it","result":"Prepare the request.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toRequestQueue(request){\r\n        if(cluster.isMaster){\r\n            if(!Countly.app_key || !Countly.device_id){\r\n                log(\"app_key or device_id is missing\");\r\n                return;\r\n            }\r\n            prepareRequest(request);\r\n                      if(requestQueue.length > queueSize){\r\n                requestQueue.shift();\r\n            }\r\n            requestQueue.push(request);\r\n            storeSet(\"cly_queue\", requestQueue);\r\n        }\r\n        else{\r\n            process.send({ cly: {cly_queue: request} });\r\n        }\r\n    }","code-length":164,"reference":"insert request to queue","result":"Send requests to the request queue.","score":[0.2296,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMetrics(){\r\n        var m = JSON.parse(JSON.stringify(metrics));\r\n                m._app_version = m._app_version || Countly.app_version;\r\n                m._os = m._os || os.type();\r\n        m._os_version = m._os_version || os.release();\r\n        platform = os.type();\r\n                log(\"Got metrics\", m);\r\n        return m;\r\n    }","code-length":115,"reference":"get metrics of the browser","result":"Return metrics.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeRequest(url, path, params, callback) {\r\n        try {\r\n            log(\"Sending HTTP request\");\r\n            var serverOptions = parseUrl(url);\r\n            var data = prepareParams(params);\r\n            var method = \"GET\";\r\n            var options = {\r\n                host: serverOptions.host,\r\n                port: serverOptions.port,\r\n                path: path+\"?\"+data,\r\n                method: \"GET\"\r\n            };\r\n                        if(data.length >= 2000){\r\n                method = \"POST\";\r\n            }\r\n            else if(Countly.force_post){\r\n                method = \"POST\";\r\n            }\r\n                        if(method === \"POST\"){\r\n                options.method = \"POST\";\r\n                options.path = path;\r\n                options.headers = {\r\n                    \"Content-Type\": \"application\/x-www-form-urlencoded\",\r\n                    \"Content-Length\": Buffer.byteLength(data)\r\n                };\r\n            }\r\n            var protocol = http;\r\n            if(url.indexOf(\"https\") === 0){\r\n                protocol = https;\r\n            }\r\n            var req = protocol.request(options, function(res) {\r\n                var str = \"\";\r\n                res.on(\"data\", function (chunk) {\r\n                    str += chunk;\r\n                });\r\n                            res.on(\"end\", function () {\r\n                    if(res.statusCode >= 200 && res.statusCode < 300){\r\n                        callback(false, params, str);\r\n                    }\r\n                    else{\r\n                        callback(true, params);\r\n                    }\r\n                });\r\n            });\r\n            if(method === \"POST\"){\r\n                req.write(data);\r\n            }\r\n            req.on(\"error\", function(err){\r\n                log(\"Connection failed.\", err);\r\n                if (typeof callback === \"function\") {\r\n                    callback(true, params);\r\n                }\r\n            });\r\n            req.end();\r\n        } catch (e) {\r\n            log(\"Failed HTTP request\", e);\r\n            if (typeof callback === \"function\") { callback(true, params); }\r\n        }\r\n    }","code-length":531,"reference":"sending HTTP request","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction allSettled(promises) {\r\n    \"use strict\";\r\n    const wrappedPromises = promises.map((curPromise) => curPromise.reflect());\r\n    return Promise.all(wrappedPromises);\r\n}","code-length":61,"reference":"Creates a promise that is resolved when all input promises have been\nsettled.  The returned Promise is resolved with an array of\nPromise.Inspection objects.\n\nThis is the commonly accepted way of implementing allSettled() in Bluebird.\nSee:  http:\/\/bluebirdjs.com\/docs\/api\/reflect.html\n\n","result":"Prevent multiple calls to the same function.","score":[0.0022,0.0147]}
{"code":"\/*is used to<extra_id_0>\r\nfunction after(parent, index) {\r\n  var siblings = parent.children\r\n  var sibling = siblings[++index]\r\n  var other\r\n  if (is('WhiteSpaceNode', sibling)) {\r\n    sibling = siblings[++index]\r\n    if (is('PunctuationNode', sibling) && punctuation.test(toString(sibling))) {\r\n      sibling = siblings[++index]\r\n    }\r\n    if (is('WordNode', sibling)) {\r\n      other = sibling\r\n    }\r\n  }\r\n  return other\r\n}","code-length":137,"reference":"Get the next word.","result":"Detect the end of a node .","score":[0.1615,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction classify(value) {\r\n  var type = null\r\n  var normal\r\n  value = value.replace(digits, toWords).split(split, 1)[0]\r\n  normal = lower(value)\r\n  if (requiresA(value)) {\r\n    type = 'a'\r\n  }\r\n  if (requiresAn(value)) {\r\n    type = type === 'a' ? 'a-or-an' : 'an'\r\n  }\r\n  if (!type && normal === value) {\r\n    type = vowel.test(normal.charAt(0)) ? 'an' : 'a'\r\n  }\r\n  return type\r\n}","code-length":166,"reference":"Classify a word.","result":"Create a class for a given string.","score":[0.1615,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction factory(list) {\r\n  var expressions = []\r\n  var sensitive = []\r\n  var insensitive = []\r\n  construct()\r\n  return test\r\n  function construct() {\r\n    var length = list.length\r\n    var index = -1\r\n    var value\r\n    var normal\r\n    while (++index < length) {\r\n      value = list[index]\r\n      normal = value === lower(value)\r\n      if (value.charAt(value.length - 1) === '*') {\r\n        expressions.push(new RegExp('^' + value.slice(0, -1), 'i'))\r\n      } else if (normal) {\r\n        insensitive.push(value)\r\n      } else {\r\n        sensitive.push(value)\r\n      }\r\n    }\r\n  }\r\n  function test(value) {\r\n    var normal = lower(value)\r\n    var length\r\n    var index\r\n    if (sensitive.indexOf(value) !== -1 || insensitive.indexOf(normal) !== -1) {\r\n      return true\r\n    }\r\n    length = expressions.length\r\n    index = -1\r\n    while (++index < length) {\r\n      if (expressions[index].test(value)) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n}","code-length":331,"reference":"Create a test based on a list of phrases.","result":"Construct a test factory.","score":[0.1294,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(rcb) {\r\n                    return function() {\r\n                        if (frc || !db[cname]) {\r\n                            bindColCtls(db);\r\n                        }\r\n                        if (rcb) {\r\n                            rcb.apply(this, arguments);\r\n                        }\r\n                    }\r\n                }","code-length":84,"reference":"creating callback with collection rebuilding","result":"Bind col ctls.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    Object.defineProperty(this, \"_impl\", {\r\n        value : new EJDBImpl(),\r\n        configurable : false,\r\n        enumerable : false,\r\n        writable : false\r\n    });\r\n    return this;\r\n}","code-length":70,"reference":"The nodejs database wrapper.\n","result":"Create the EJDB instance.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dummyText ( opts ) {\r\n        var corpus = opts.corpus || 'lorem',\r\n            i = opts.start,\r\n            isRandom = typeof(i) === 'undefined',\r\n            mustReset = typeof(origin) === 'undefined',\r\n            skip = opts.skip || 1,\r\n            sentences = opts.sentences || 1,\r\n            words = opts.words,\r\n            text = texts[corpus] || texts.lorem,\r\n            len = text.length,\r\n            output = [],\r\n            s;\r\n        if ( isRandom ) {\r\n            i = Math.floor( Math.random() * len );\r\n        }\r\n        if ( mustReset ) {\r\n            origin = i;\r\n        }\r\n        if ( isRandom ) {\r\n            i = ((i + len - origin) % len + len) % len;\r\n        }\r\n        while( sentences-- ) {\r\n            s = text[i];\r\n            if ( words ) {\r\n                s = s.split(' ').slice(0,words).join(' ');\r\n            }\r\n            output.push( s );\r\n            i = (i + skip) % len;\r\n        }\r\n        return output.join(' ');\r\n    }","code-length":308,"reference":"used to start at 0 each time.","result":"Generate dummy text .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Back(options) {\r\n  if (!(this instanceof Back)) {\r\n    return new Back(options);\r\n  }\r\n  this.settings = extend(options);\r\n  this.reconnect = null;\r\n}","code-length":62,"reference":"Takes a set of reconnect options defined in README","result":"Create a new instance of Back.","score":[0.1392,0.1149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction css(files, output, options) {\r\n  options = Object.assign({\r\n    banner: false\r\n  }, options);\r\n  return () => {\r\n    var build = gulp.src(files)\r\n    if (options.banner)\r\n      build = build.pipe($.header(banner, {pkg}));\r\n    build = build\r\n      .pipe($.rename('d3.compose.css'))\r\n      .pipe(gulp.dest(output));\r\n    return build;\r\n  };\r\n}","code-length":135,"reference":"Create css build function\n\n","result":"Generate css files.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction series() {\r\n  const tasks = Array.prototype.slice.call(arguments);\r\n  var fn = cb => cb();\r\n  if (typeof tasks[tasks.length - 1] === 'function')\r\n    fn = tasks.pop();\r\n  return (cb) => {\r\n    const tasks_with_cb = tasks.concat([(err) => {\r\n      if (err) return cb(err);\r\n      fn(cb);\r\n    }]);\r\n    runSequence.apply(this, tasks_with_cb);\r\n  }\r\n}","code-length":141,"reference":"Approximate gulp 4.0 series\n\n","result":"Create a series function.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction simpleTypeFilter(doc, oldDoc, candidateDocType) {\r\n    if (oldDoc) {\r\n      if (doc._deleted) {\r\n        return oldDoc.type === candidateDocType;\r\n      } else {\r\n        return doc.type === oldDoc.type && oldDoc.type === candidateDocType;\r\n      }\r\n    } else {\r\n      return doc.type === candidateDocType;\r\n    }\r\n  }","code-length":114,"reference":"A type filter that matches on the document's type property","result":"Filter documents by simple type.","score":[0,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction padRight(value, desiredLength, padding) {\r\n    while (value.length < desiredLength) {\r\n      value += padding;\r\n    }\r\n    return value;\r\n  }","code-length":55,"reference":"Add the specified padding to the right of the given string value until its length matches the desired length","result":"Create a custom function for padding .","score":[0.0291,0.0281]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveCollectionDefinition(doc, oldDoc, collectionDefinition, itemPrefix) {\r\n    if (utils.isValueNullOrUndefined(collectionDefinition)) {\r\n      return [ ];\r\n    } else {\r\n      if (typeof collectionDefinition === 'function') {\r\n        var fnResults = collectionDefinition(doc, oldDoc);\r\n        return resolveCollectionItems(fnResults, itemPrefix);\r\n      } else {\r\n        return resolveCollectionItems(collectionDefinition, itemPrefix);\r\n      }\r\n    }\r\n  }","code-length":130,"reference":"Transforms the given collection definition, which may have been defined as a single item, a list of items or a function that returns a list of items into a simple list, where each item has the specified prefix, if any","result":"Resolve collection definition items.","score":[0.0,0.0137]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assignRolesToUsers(doc, oldDoc, accessAssignmentDefinition) {\r\n    var users = resolveCollectionDefinition(doc, oldDoc, accessAssignmentDefinition.users);\r\n    var roles = resolveRoleCollectionDefinition(doc, oldDoc, accessAssignmentDefinition.roles);\r\n    role(users, roles);\r\n    return {\r\n      type: 'role',\r\n      users: users,\r\n      roles: roles\r\n    };\r\n  }","code-length":112,"reference":"Assigns role access to users","result":"Assign roles to users.","score":[0.2488,0.5215]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getAllDocChannels(docDefinition) {\r\n    var docChannelMap = utils.resolveDocumentConstraint(docDefinition.channels);\r\n    var allChannels = [ ];\r\n    if (docChannelMap) {\r\n      appendToAuthorizationList(allChannels, docChannelMap.view);\r\n      appendToAuthorizationList(allChannels, docChannelMap.write);\r\n      appendToAuthorizationList(allChannels, docChannelMap.add);\r\n      appendToAuthorizationList(allChannels, docChannelMap.replace);\r\n      appendToAuthorizationList(allChannels, docChannelMap.remove);\r\n    }\r\n    return allChannels;\r\n  }","code-length":152,"reference":"Retrieves a list of channels the document belongs to based on its specified type","result":"Get all the doc channels.","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction outputHelpIfNecessary(cmd, options) {\r\n  options = options || [];\r\n  for (var i = 0; i < options.length; i++) {\r\n    if (options[i] === '--help' || options[i] === '-h') {\r\n      cmd.outputHelp();\r\n      process.exit(0);\r\n    }\r\n  }\r\n}","code-length":98,"reference":"Output help information if necessary\n\n","result":"Output output to stdout.","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction humanReadableArgName(arg) {\r\n  var nameOutput = arg.name + (arg.variadic === true ? '...' : '');\r\n  return arg.required\r\n    ? '<' + nameOutput + '>'\r\n    : '[' + nameOutput + ']';\r\n}","code-length":71,"reference":"Takes an argument an returns its human readable equivalent for help usage.\n\n","result":"Create a human readable arg name .","score":[0.1118,0.163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateObjectProperties(propertyValidators, allowUnknownProperties, ignoreInternalProperties) {\r\n        var currentItemEntry = itemStack[itemStack.length - 1];\r\n        var objectValue = currentItemEntry.itemValue;\r\n        var oldObjectValue = currentItemEntry.oldItemValue;\r\n        var supportedProperties = [ ];\r\n        for (var propertyValidatorName in propertyValidators) {\r\n          var validator = propertyValidators[propertyValidatorName];\r\n          if (utils.isValueNullOrUndefined(validator) || utils.isValueNullOrUndefined(resolveItemConstraint(validator.type))) {\r\n            continue;\r\n          }\r\n          var propertyValue = objectValue[propertyValidatorName];\r\n          var oldPropertyValue;\r\n          if (!utils.isValueNullOrUndefined(oldObjectValue)) {\r\n            oldPropertyValue = oldObjectValue[propertyValidatorName];\r\n          }\r\n          supportedProperties.push(propertyValidatorName);\r\n          itemStack.push({\r\n            itemValue: propertyValue,\r\n            oldItemValue: oldPropertyValue,\r\n            itemName: propertyValidatorName\r\n          });\r\n          validateItemValue(validator);\r\n          itemStack.pop();\r\n        }\r\n        if (!allowUnknownProperties) {\r\n          for (var propertyName in objectValue) {\r\n            if (ignoreInternalProperties && propertyName.indexOf('_') === 0) {\r\n              continue;\r\n            }\r\n            if (supportedProperties.indexOf(propertyName) < 0) {\r\n              var objectPath = buildItemPath(itemStack);\r\n              var fullPropertyPath = objectPath ? objectPath + '.' + propertyName : propertyName;\r\n              validationErrors.push('property \"' + fullPropertyPath + '\" is not supported');\r\n            }\r\n          }\r\n        }\r\n      }","code-length":413,"reference":"The following functions are nested within this function so they can share access to the doc, oldDoc and validationErrors params and the attachmentReferenceValidators and itemStack variables","result":"Validate object properties.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildItemPath(itemStack) {\r\n    var nameComponents = [ ];\r\n    for (var i = 0; i < itemStack.length; i++) {\r\n      var itemName = itemStack[i].itemName;\r\n      if (!itemName) {\r\n        continue;\r\n      } else if (nameComponents.length < 1 || itemName.indexOf('[') === 0) {\r\n        nameComponents.push(itemName);\r\n      } else {\r\n        nameComponents.push('.' + itemName);\r\n      }\r\n    }\r\n    return nameComponents.join('');\r\n  }","code-length":151,"reference":"Constructs the fully qualified path of the item at the top of the given stack","result":"Build the item path.","score":[0.0289,0.1079]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBusinessId(doc, oldDoc) {\r\n    var regex = \/^biz\\.([A-Za-z0-9_-]+)(?:\\..+)?$\/;\r\n    var matchGroups = regex.exec(doc._id);\r\n    if (matchGroups) {\r\n      return matchGroups[1];\r\n    } else if (oldDoc && oldDoc.businessId) {\r\n      return oldDoc.businessId || null;\r\n    } else {\r\n      return doc.businessId || null;\r\n    }\r\n  }","code-length":135,"reference":"Retrieves the ID of the business to which the document belongs","result":"Generate the businessId.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toDefaultSyncChannels(doc, oldDoc, basePrivilegeName) {\r\n    var businessId = getBusinessId(doc, oldDoc);\r\n    return function(doc, oldDoc) {\r\n      return {\r\n        view: [ toSyncChannel(businessId, 'VIEW_' + basePrivilegeName) ],\r\n        add: [ toSyncChannel(businessId, 'ADD_' + basePrivilegeName) ],\r\n        replace: [ toSyncChannel(businessId, 'CHANGE_' + basePrivilegeName) ],\r\n        remove: [ toSyncChannel(businessId, 'REMOVE_' + basePrivilegeName) ]\r\n      };\r\n    };\r\n  }","code-length":163,"reference":"Builds a function that returns the view, add, replace, remove channels extrapolated from the specified base privilege, name which is formatted according to the de facto Books convention of \"VIEW_FOOBAR\", \"ADD_FOOBAR\", \"CHANGE_FOOBAR\" and \"REMOVE_FOOBAR\" assuming the base privilege name is \"FOOBAR\"","result":"Create default sync channels.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isIso8601DateTimeString(value) {\r\n    var dateAndTimePieces = splitDateAndTime(value);\r\n    var date = extractDateStructureFromDateAndTime(dateAndTimePieces);\r\n    if (date) {\r\n      var timeAndTimezone = extractTimeStructuresFromDateAndTime(dateAndTimePieces);\r\n      var time = timeAndTimezone.time;\r\n      var timezone = timeAndTimezone.timezone;\r\n      return isValidDateStructure(date) &&\r\n        isValidTimeStructure(time) &&\r\n        (timezone === null || isValidTimeZoneStructure(timezone));\r\n    } else {\r\n      return false;\r\n    }\r\n  }","code-length":166,"reference":"Check that a given value is a valid ISO 8601 format date string with optional time and time zone components","result":"Check if a value is an ISO.","score":[0.0424,0.1688]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeIso8601Time(time, timezoneOffsetMinutes) {\r\n    var msPerSecond = 1000;\r\n    var msPerMinute = 60000;\r\n    var msPerHour = 3600000;\r\n    var effectiveTimezoneOffset = timezoneOffsetMinutes || 0;\r\n    var rawTimeMs =\r\n      (time.hour * msPerHour) + (time.minute * msPerMinute) + (time.second * msPerSecond) + time.millisecond;\r\n    return rawTimeMs - (effectiveTimezoneOffset * msPerMinute);\r\n  }","code-length":136,"reference":"Converts the given time to the number of milliseconds since hour 0","result":"Return time.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareTimes(a, b) {\r\n    if (typeof a !== 'string' || typeof b !== 'string') {\r\n      return NaN;\r\n    }\r\n    return normalizeIso8601Time(parseIso8601Time(a)) - normalizeIso8601Time(parseIso8601Time(b));\r\n  }","code-length":80,"reference":"Compares the given time strings. Returns a negative number if a is less than b, a positive number if a is greater than b, or zero if a and b are equal.","result":"Compare strings and numbers.","score":[0.0003,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareDates(a, b) {\r\n    var aPieces = extractDatePieces(a);\r\n    var bPieces = extractDatePieces(b);\r\n    if (aPieces === null || bPieces === null) {\r\n      return NaN;\r\n    }\r\n    for (var pieceIndex = 0; pieceIndex < aPieces.length; pieceIndex++) {\r\n      if (aPieces[pieceIndex] < bPieces[pieceIndex]) {\r\n        return -1;\r\n      } else if (aPieces[pieceIndex] > bPieces[pieceIndex]) {\r\n        return 1;\r\n      }\r\n    }\r\n    return 0;\r\n  }","code-length":175,"reference":"Compares the given date representations. Returns a negative number if a is less than b, a positive number if a is greater than b, or zero if a and b are equal.","result":"Compare two dates in a row.","score":[0.0025,0.051]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeIso8601TimeZone(value) {\r\n    return value ? value.multiplicationFactor * ((value.hour * 60) + value.minute) : -(new Date().getTimezoneOffset());\r\n  }","code-length":56,"reference":"Converts an ISO 8601 time zone into the number of minutes offset from UTC","result":"Normalize iso.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function start() {\r\n\t\t\t\t\tlog.i('--Nexus\/Start');\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet startArray = [];\r\n\t\t\t\t\tfor (let pid in Start) {\r\n\t\t\t\t\t\tstartArray.push(new Promise((resolve, _reject) => {\r\n\t\t\t\t\t\t\tlet com = {};\r\n\t\t\t\t\t\t\tcom.Cmd = Start[pid];\r\n\t\t\t\t\t\t\tcom.Passport = {};\r\n\t\t\t\t\t\t\tcom.Passport.To = pid;\r\n\t\t\t\t\t\t\tcom.Passport.Pid = genPid();\r\n\t\t\t\t\t\t\tsendMessage(com, resolve);\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tawait Promise.all(startArray);\r\n\t\t\t\t\tlog.v('--Nexus: All Starts Complete');\r\n\t\t\t\t}","code-length":192,"reference":"Call Start on the required Module Apexes","result":"Start the Nexus server.","score":[0.1795,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nasync function exit(code = 0) {\r\n\t\t\t\tlog.i('--Nexus\/Stop');\r\n\t\t\t\t\r\n\t\t\t\tlet stopTasks = [];\r\n\t\t\t\tlog.i('Nexus unloading node modules');\r\n\t\t\t\tlog.v(Object.keys(require.cache).join('\\n'));\r\n\t\t\t\tfor (let pid in Stop) {\r\n\t\t\t\t\tstopTasks.push(new Promise((resolve, _reject) => {\r\n\t\t\t\t\t\tlet com = {};\r\n\t\t\t\t\t\tcom.Cmd = Stop[pid];\r\n\t\t\t\t\t\tcom.Passport = {};\r\n\t\t\t\t\t\tcom.Passport.To = pid;\r\n\t\t\t\t\t\tcom.Passport.Pid = genPid();\r\n\t\t\t\t\t\tsendMessage(com, resolve);\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\tawait Promise.all(stopTasks);\r\n\t\t\t\tlog.v('--Nexus: All Stops Complete');\r\n\t\t\t\tdispatchEvent('exit', { exitCode: code });\r\n\t\t\t}","code-length":242,"reference":"Helper Functions as well as Entity definition   \n","result":"Stop the Nexus process.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sendMessage(com, fun = _ => _) {\r\n\t\t\t\tif (!('Passport' in com)) {\r\n\t\t\t\t\tlog.w('Message has no Passport, ignored');\r\n\t\t\t\t\tlog.w('    ' + JSON.stringify(com));\r\n\t\t\t\t\tfun('No Passport');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (!('To' in com.Passport) || !com.Passport.To) {\r\n\t\t\t\t\tlog.w('Message has no destination entity, ignored');\r\n\t\t\t\t\tlog.w('    ' + JSON.stringify(com));\r\n\t\t\t\t\tfun('No recipient in message', com);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (!('Pid' in com.Passport)) {\r\n\t\t\t\t\tlog.w('Message has no message id, ignored');\r\n\t\t\t\t\tlog.w('    ' + JSON.stringify(com));\r\n\t\t\t\t\tfun('No message id', com);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlet pid = com.Passport.To;\r\n\t\t\t\tlet apx = com.Passport.Apex || pid;\r\n\t\t\t\tif (pid in EntCache) {\r\n\t\t\t\t\tdone(null, EntCache[pid]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgetEntityContext(pid, done);\r\n\t\t\t\t}\r\n\t\t\t\tasync function done(err, entContextVolatile) {\r\n\t\t\t\t\tlet entApex = await new Promise(res =>\r\n\t\t\t\t\t\tentContextVolatile.lock((val) => {\r\n\t\t\t\t\t\t\tres(val.Apex);\r\n\t\t\t\t\t\t\treturn val;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tlog.w(err);\r\n\t\t\t\t\t\tlog.w(JSON.stringify(com, null, 2));\r\n\t\t\t\t\t\tfun(err, com);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ((EntCache[pid].Apex == EntCache[pid].Pid) || (entApex == apx)) {\r\n\t\t\t\t\t\tlet entContext = await new Promise(res => entContextVolatile.lock((context) => {\r\n\t\t\t\t\t\t\tres(context); return context;\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t\tentContext.instance.dispatch(com, reply);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet err = 'Trying to send a message to a non-Apex'\r\n\t\t\t\t\t\t\t+ 'entity outside of the sending module';\r\n\t\t\t\t\t\tlog.w(err);\r\n\t\t\t\t\t\tlog.w(JSON.stringify(com, null, 2));\r\n\t\t\t\t\t\tfun(err, com);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfunction reply(err, q) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tfun(err, q);\r\n\t\t\t\t}\r\n\t\t\t}","code-length":683,"reference":"Send a message from an entity to an Apex entity.\nIf a callback is provided, return when finished\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deleteEntity(pid, fun = (err, _pid) => { if (err) log.e(err); }) {\r\n\t\t\t\tcacheInterface.deleteEntity(pid, (err, removedPidArray) => {\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let i = 0; i < removedPidArray.length; i++) {\r\n\t\t\t\t\t\tlet entPid = removedPidArray[i];\r\n\t\t\t\t\t\tif (entPid in EntCache) {\r\n\t\t\t\t\t\t\tdelete EntCache[entPid];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlog.v(`Removed ${(removedPidArray.length == 1) ? 'Entity' : 'Entities'\r\n\t\t\t\t\t} ${removedPidArray.join(' ')}`);\r\n\t\t\t\t\tfun(err, pid);\r\n\t\t\t\t});\r\n\t\t\t}","code-length":198,"reference":"Delete an entity from the module's memory.  If the entity is an Apex of a Module,\nthen delete all the entities found in that module as well.\n","result":"Delete entities.","score":[0.0,0.0204]}
{"code":"\/*is used to<extra_id_0>\r\nasync function saveEntity(par, fun = (err, _pid) => { if (err) log.e(err); }) {\r\n\t\t\t\tlet saveEntity = (async (par) => {\r\n\t\t\t\t\tawait new Promise((res, rej) => {\r\n\t\t\t\t\t\tcacheInterface.saveEntityPar(par, (err, pid) => {\r\n\t\t\t\t\t\t\tif (err){\r\n\t\t\t\t\t\t\t\tlog.e(err, 'saving ', pid); \r\n\t\t\t\t\t\t\t\trej(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlog.v(`Saved entity ${par.Pid}`);\r\n\t\t\t\t\t\t\tres();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tif (par.Pid != par.Apex) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tcacheInterface.getEntityPar(par.Apex, async (err) => {\r\n\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tlet apexPar = await new Promise((res, _rej) => {\r\n\t\t\t\t\t\t\t\tEntCache[par.Apex].lock((entityContext) => {\r\n\t\t\t\t\t\t\t\t\tres(entityContext.Par);\r\n\t\t\t\t\t\t\t\t\treturn entityContext;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tlog.v('Must first save the Apex -- Saving...');\r\n\t\t\t\t\t\t\tawait saveEntity(apexPar);\r\n\t\t\t\t\t\t\tawait saveEntity(par);\r\n\t\t\t\t\t\t\tfun(null, par.Pid);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tawait saveEntity(par);\r\n\t\t\t\t\t\t\tfun(null, par.Pid);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tawait saveEntity(par);\r\n\t\t\t\t\tfun(null, par.Pid);\r\n\t\t\t\t}\r\n\t\t\t}","code-length":444,"reference":"Save an entity file. Make sure that all nested files exist in the\ncache prior to saving said file\n","result":"Save the entity.","score":[0.0023,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFile(module, filename, fun = _ => _) {\r\n\t\t\t\tlet mod = ModCache[module];\r\n\t\t\t\tif (filename in mod.files) {\r\n\t\t\t\t\tmod.file(filename).async('string').then((dat) => {\r\n\t\t\t\t\t\tfun(null, dat);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlet err = `Error: File ${filename} does not exist in module ${module}`;\r\n\t\t\t\tlog.e(err);\r\n\t\t\t\tfun(err);\r\n\t\t\t}","code-length":140,"reference":"Access a file that exists in the module.json\n","result":"Get the file from the cache.","score":[0.1645,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getEntityContext(pid, fun = _ => _) {\r\n\t\t\t\tEntCache[pid] = new Volatile({});\r\n\t\t\t\tawait EntCache[pid].lock((_entityContext) => {\r\n\t\t\t\t\treturn new Promise((res, _rej) => {\r\n\t\t\t\t\t\tcacheInterface.getEntityPar(pid, (err, data) => {\r\n\t\t\t\t\t\t\tlet par = JSON.parse(data.toString());\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tlog.e(`Error retrieving a ${data.moduleType} from cache. Pid: ${pid}`);\r\n\t\t\t\t\t\t\t\tlog.e(err);\r\n\t\t\t\t\t\t\t\tfun('Unavailable');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlet impkey = par.Module + '\/' + par.Entity;\r\n\t\t\t\t\t\t\tif (impkey in ImpCache) {\r\n\t\t\t\t\t\t\t\tBuildEnt();\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tGetModule(par.Module, async function (err, mod) {\r\n\t\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t\tlog.e('Module <' + par.Module + '> not available');\r\n\t\t\t\t\t\t\t\t\tfun('Module not available');\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!(par.Entity in mod.files)) {\r\n\t\t\t\t\t\t\t\t\tlog.e('<' + par.Entity + '> not in module <' + par.Module + '>');\r\n\t\t\t\t\t\t\t\t\tfun('Null entity');\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlet entString = await new Promise(async (res, _rej) => {\r\n\t\t\t\t\t\t\t\t\tmod.file(par.Entity).async('string').then((string) => res(string));\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tlog.v(`Spinning up entity ${par.Module}-${par.Entity.split('.')[0]}`);\r\n\t\t\t\t\t\t\t\tImpCache[impkey] = indirectEvalImp(impkey, entString, log, \r\n\t\t\t\t\t\t\t\t\tcreateRequireFromModuleType(par.Module));\r\n\t\t\t\t\t\t\t\tBuildEnt();\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tfunction BuildEnt() {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tres(new Entity(Nxs, ImpCache[impkey], par, log));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tfun(null, EntCache[pid]);\r\n\t\t\t}","code-length":596,"reference":"Spin up an entity from cache into memory and retrievd its context\notherwise just return it's context from memory\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GetModule(ModName, fun = _ => _) {\r\n\t\t\t\tModName = ModName.replace(\/:\\\r\n\t\t\t\tif (ModName in ModCache) return fun(null, ModCache[ModName]);\r\n\t\t\t\telse cacheInterface.getModule(ModName, (err, moduleZip) => {\r\n\t\t\t\t\tif (err) return fun(err);\r\n\t\t\t\t\tModCache[ModName] = moduleZip;\r\n\t\t\t\t\treturn fun(null, ModCache[ModName]);\r\n\t\t\t\t});\r\n\t\t\t}","code-length":133,"reference":"For retrieving modules\nModules come from the cache directory on the harddrive or the\nModCache if its already been read to RAM.\n","result":"Cache the module zip.","score":[0.0035,0.0743]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processSources(cfg) {\r\n\t\t\t\t\tif (typeof cfg['Sources'] === 'undefined') {\r\n\t\t\t\t\t\tlog.e('You must defined a Sources object.\\n');\r\n\t\t\t\t\t\trejectSetup('You must defined a Sources object.');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet val, sources, subval;\r\n\t\t\t\t\tfor (let key in cfg) {\r\n\t\t\t\t\t\tval = cfg[key];\r\n\t\t\t\t\t\tif (key == 'Sources') {\r\n\t\t\t\t\t\t\tConfig.Sources = {};\r\n\t\t\t\t\t\t\tsources = cfg['Sources'];\r\n\t\t\t\t\t\t\tfor (let subkey in sources) {\r\n\t\t\t\t\t\t\t\tsubval = sources[subkey];\r\n\t\t\t\t\t\t\t\tswitch (typeof subval) {\r\n\t\t\t\t\t\t\t\t\tcase 'string': {\r\n\t\t\t\t\t\t\t\t\t\tConfig.Sources[subkey] = Macro(subval);\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tcase 'object': {\r\n\t\t\t\t\t\t\t\t\t\tConfig.Sources[subkey] = {};\r\n\t\t\t\t\t\t\t\t\t\tfor (let id in subval) {\r\n\t\t\t\t\t\t\t\t\t\t\tConfig.Sources[subkey][id.toLowerCase()] =\r\n\t\t\t\t\t\t\t\t\t\t\t\t(typeof subval[id] == 'string') ?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tMacro(subval[id]) : subval[id];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (!('port' in Config.Sources[subkey])) {\r\n\t\t\t\t\t\t\t\t\t\t\tConfig.Sources[subkey]['port'] = 27000;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tdefault: {\r\n\t\t\t\t\t\t\t\t\t\tlog.e(`Invalid Source ${subkey} of type ${typeof subval}.` +\r\n\t\t\t\t\t\t\t\t\t\t\t'Must be of type string or object');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tConfig[key] = val;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}","code-length":482,"reference":"Reads in the given config and fills in the Sources Macros","result":"Process the configuration of the plugin.","score":[0.0998,0.0952]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateModuleCatalog() {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet keys = Object.keys(Config.Modules);\r\n\t\t\t\t\tfor (let i = 0; i < keys.length; i++) {\r\n\t\t\t\t\t\tlet key = keys[i];\r\n\t\t\t\t\t\tif (key == 'Deferred') {\r\n\t\t\t\t\t\t\tlet arr = Config.Modules['Deferred'];\r\n\t\t\t\t\t\t\tfor (let idx = 0; idx < arr.length; idx++) {\r\n\t\t\t\t\t\t\t\tlet mod = arr[idx];\r\n\t\t\t\t\t\t\t\tlog.v(`Deferring ${mod.Module || mod}`);\r\n\t\t\t\t\t\t\t\tif (typeof mod == 'string') {\r\n\t\t\t\t\t\t\t\t\tlog.w('Adding Module names directly to Deferred is deprecated');\r\n\t\t\t\t\t\t\t\t\tlog.w(`Deferring { Module: '${mod}' } instead`);\r\n\t\t\t\t\t\t\t\t\tmod = { Module: mod };\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (!('Module' in mod)) {\r\n\t\t\t\t\t\t\t\t\tlog.e('Malformed Deferred Module listing', mod);\r\n\t\t\t\t\t\t\t\t\trejectSetup('Malformed Deferred Module listing');\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tlogModule(key, mod);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (typeof Config.Modules[key].Module != 'string') {\r\n\t\t\t\t\t\t\t\tlog.e('Malformed Module Definition');\r\n\t\t\t\t\t\t\t\tlog.e(JSON.stringify(Config.Modules[key], null, 2));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlogModule(key, Config.Modules[key]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfunction logModule(key, mod) {\r\n\t\t\t\t\t\tlet folder = mod.Module.replace(\/[\/:]\/g, '.');\r\n\t\t\t\t\t\tif (!('Source' in mod)) {\r\n\t\t\t\t\t\t\tlog.e(`No Source Declared in module: ${key}: ${mod.Module}`);\r\n\t\t\t\t\t\t\trejectSetup(`No Source Declared in module: ${key}`);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet source = {\r\n\t\t\t\t\t\t\tSource: mod.Source,\r\n\t\t\t\t\t\t\tVersion: mod.Version\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tif (!(folder in Modules)) {\r\n\t\t\t\t\t\t\tModules[folder] = source;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (Modules[folder].Source != source.Source\r\n\t\t\t\t\t\t\t\t|| (Modules[folder].Version != source.Version)) {\r\n\t\t\t\t\t\t\t\tlog.e(`Broker Mismatch Exception: ${key}\\n`\r\n\t\t\t\t\t\t\t\t\t+ `${JSON.stringify(Modules[folder], null, 2)} - `\r\n\t\t\t\t\t\t\t\t\t+ `\\n${JSON.stringify(source, null, 2)}`);\r\n\t\t\t\t\t\t\t\trejectSetup('Broker Mismatch Exception');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}","code-length":703,"reference":"Create a list of all required modules and their brokers","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction logModule(key, mod) {\r\n\t\t\t\t\t\tlet folder = mod.Module.replace(\/[\/:]\/g, '.');\r\n\t\t\t\t\t\tif (!('Source' in mod)) {\r\n\t\t\t\t\t\t\tlog.e(`No Source Declared in module: ${key}: ${mod.Module}`);\r\n\t\t\t\t\t\t\trejectSetup(`No Source Declared in module: ${key}`);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet source = {\r\n\t\t\t\t\t\t\tSource: mod.Source,\r\n\t\t\t\t\t\t\tVersion: mod.Version\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tif (!(folder in Modules)) {\r\n\t\t\t\t\t\t\tModules[folder] = source;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (Modules[folder].Source != source.Source\r\n\t\t\t\t\t\t\t\t|| (Modules[folder].Version != source.Version)) {\r\n\t\t\t\t\t\t\t\tlog.e(`Broker Mismatch Exception: ${key}\\n`\r\n\t\t\t\t\t\t\t\t\t+ `${JSON.stringify(Modules[folder], null, 2)} - `\r\n\t\t\t\t\t\t\t\t\t+ `\\n${JSON.stringify(source, null, 2)}`);\r\n\t\t\t\t\t\t\t\trejectSetup('Broker Mismatch Exception');\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}","code-length":308,"reference":"Add the module to the Modules object if unique\n","result":"Log modules.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function buildApexInstances(processPidReferences) {\r\n\t\t\t\t\tif (processPidReferences) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (let instname in Config.Modules) {\r\n\t\t\t\t\t\t\tif (instname == 'Deferred')\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tApex[instname] = genPid();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlog.v('Apex List', JSON.stringify(Apex, null, 2));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (let instname in Config.Modules) {\r\n\t\t\t\t\t\tif (instname === 'Deferred')\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\tawait processApexPar(Apex[instname], Config.Modules[instname], processPidReferences);\r\n\t\t\t\t\t}\r\n\t\t\t\t}","code-length":193,"reference":"Write the modules and all instances to the cache","result":"Build Apex instances.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function buildDir(path) {\r\n\t\t\t\t\tlet dirObj = {};\r\n\t\t\t\t\tif (fs.existsSync(path)) {\r\n\t\t\t\t\t\tlet files = fs.readdirSync(path);\r\n\t\t\t\t\t\tlet itemPromises = [];\r\n\t\t\t\t\t\tfor (let file of files) {\r\n\t\t\t\t\t\t\titemPromises.push(new Promise(async (resolve) => {\r\n\t\t\t\t\t\t\t\tlet curPath = path + '\/' + file;\r\n\t\t\t\t\t\t\t\tif (fs.lstatSync(curPath).isDirectory()) {\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tdirObj[file] = await buildDir(curPath);\r\n\t\t\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tfs.readFile(curPath, function (err, data) {\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tdirObj[file] = data.toString();\r\n\t\t\t\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tawait Promise.all(itemPromises);\r\n\t\t\t\t\t\treturn dirObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}","code-length":279,"reference":"Build an object to represent a directory\n","result":"Build a directory.","score":[0.128,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction genPid() {\r\n\t\t\t\t\tif (!Uuid) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tUuid = require('uuid\/v4');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet str = Uuid();\r\n\t\t\t\t\tlet pid = str.replace(\/-\/g, '').toUpperCase();\r\n\t\t\t\t\treturn pid;\r\n\t\t\t\t}","code-length":86,"reference":"generate a 32 character hexidecimal pid","result":"Generate a pid.","score":[0.1502,0.3289]}
{"code":"\/*is used to<extra_id_0>\r\nasync function genesis(system) {\r\n\t\t\tlog.i(' [Save Cache]'.padStart(80, '='));\r\n\t\t\tlog.i('Genesis Compile Start:');\r\n\t\t\tlet cacheState = null;\r\n\t\t\tif (fs.existsSync(CacheDir)) cacheState = 'exists';\r\n\t\t\tcacheInterface = new CacheInterface({\r\n\t\t\t\tpath: CacheDir, log\r\n\t\t\t});\r\n\t\t\tcleanCache();\r\n\t\t\tlog.i('Saving modules and updating dependencies ...');\r\n\t\t\tawait cacheModules(system.ModCache);\r\n\t\t\tif (!(__options.state == 'updateOnly')) {\r\n\t\t\t\tlog.i('Saving entities ...');\r\n\t\t\t\tawait cacheApexes(system.Apex, system.Config.Modules);\r\n\t\t\t}\r\n\t\t\tStop();\r\n\t\t\tons[moduleId], Apexes[moduleId])\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tawait Promise.all(ModulePromiseArray);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tasync function Stop() {\r\n\t\t\t\tlog.i(`Genesis Compile Stop: ${new Date().toString()}`);\r\n\t\t\t\tlog.i(' [Finished]'.padStart(80, '='));\r\n\t\t\t\tfor(const xgrl in BrokerCache) {\r\n\t\t\t\t\tconst broker = BrokerCache[xgrl];\r\n\t\t\t\t\tbroker.cleanup();\r\n\t\t\t\t}\r\n\t\t\t\tlog.timeEnd(compileTimer);\r\n\t\t\t\tresolveMain();\r\n\t\t\t}\r\n\t\t}","code-length":369,"reference":"Writes the system to the cache","result":"Compile the main module.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nasync function cacheModules(ModCache) {\r\n\t\t\t\tlet timer = log.time('cacheModules');\r\n\t\t\t\tlet ModulePromiseArray = [];\r\n\t\t\t\tfor (let folder in ModCache) {\r\n\t\t\t\t\tModulePromiseArray.push(new Promise(async (res) => {\r\n\t\t\t\t\t\tawait cacheInterface.addModule(folder, ModCache[folder]);\r\n\t\t\t\t\t\tlog.v(`Finished installing dependencies for ${folder}`);\r\n\t\t\t\t\t\tres();\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t\tawait Promise.all(ModulePromiseArray);\r\n\t\t\t\tlog.timeEnd(timer);\r\n\t\t\t}","code-length":157,"reference":"Write the modules to the cache\n","result":"Cache modules.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nasync function cacheApexes(Apexes, ModuleDefinitions) {\r\n\t\t\t\tlet ModulePromiseArray = [];\r\n\t\t\t\tfor (let moduleId in Apexes) {\r\n\t\t\t\t\tModulePromiseArray.push(\r\n\t\t\t\t\t\tawait cacheInterface.createInstance(ModuleDefinitions[moduleId], Apexes[moduleId])\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tawait Promise.all(ModulePromiseArray);\r\n\t\t\t}","code-length":111,"reference":"Write the module Apexes to the cache\n","result":"Cache Apexes.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nasync function Stop() {\r\n\t\t\t\tlog.i(`Genesis Compile Stop: ${new Date().toString()}`);\r\n\t\t\t\tlog.i(' [Finished]'.padStart(80, '='));\r\n\t\t\t\tfor(const xgrl in BrokerCache) {\r\n\t\t\t\t\tconst broker = BrokerCache[xgrl];\r\n\t\t\t\t\tbroker.cleanup();\r\n\t\t\t\t}\r\n\t\t\t\tlog.timeEnd(compileTimer);\r\n\t\t\t\tresolveMain();\r\n\t\t\t}","code-length":121,"reference":"Resolves the main promise created during genesis call","result":"Stop the compile.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getProtocolModule(protocol) {\r\n\treturn new Promise(function (resolve, reject) {\r\n\t\tlet cacheFilepath = path.join(appdata, protocol);\r\n\t\tif (fs.existsSync(cacheFilepath)) {\r\n\t\t\treturn resolve(JSON.parse(fs.readFileSync(cacheFilepath).toString()));\r\n\t\t}\r\n\t\tlet options = {\r\n\t\t\thost: 'protocols.xgraphdev.com',\r\n\t\t\tport: 443,\r\n\t\t\tpath: '\/' + protocol,\r\n\t\t\tmethod: 'GET',\r\n\t\t\trejectUnauthorized: false,\r\n\t\t};\r\n\t\tlet req = https.request(options, function (res) {\r\n\t\t\tres.setEncoding('utf8');\r\n\t\t\tlet response = '';\r\n\t\t\tres.on('data', function (chunk) {\r\n\t\t\t\tresponse += chunk;\r\n\t\t\t});\r\n\t\t\tres.on('end', _ => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tresolve(JSON.parse(response));\r\n\t\t\t\t\ttry { fs.writeFileSync(cacheFilepath, response); } catch (e) {\r\n\t\t\t\t\t\treject({\r\n\t\t\t\t\t\t\tcode: 1,\r\n\t\t\t\t\t\t\ttext: `fail to save protocol at ${cacheFilepath}` +\r\n\t\t\t\t\t\t\t\t'\\n delete file and try again'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\treject({ code: 0, text: 'try and retrieve locally' });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treq.on('error', function (e) {\r\n\t\t\tlog.e('problem with request: ' + e.message);\r\n\t\t\treject({ code: 1, text: 'problem with request: ' + e.message });\r\n\t\t});\r\n\t\t\r\n\t\treq.end();\r\n\t});\r\n}","code-length":457,"reference":"load protocol to access modules","result":"Load the protocol module.","score":[0.2488,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remDir(path) {\r\n\t\t\treturn (new Promise(async (resolve, _reject) => {\r\n\t\t\t\tif (fs.existsSync(path)) {\r\n\t\t\t\t\tlet files = fs.readdirSync(path);\r\n\t\t\t\t\tlet promiseArray = [];\r\n\t\t\t\t\tfor (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\r\n\t\t\t\t\t\tpromiseArray.push(new Promise(async (resolve2, _reject2) => {\r\n\t\t\t\t\t\t\tlet curPath = path + '\/' + files[fileIndex];\r\n\t\t\t\t\t\t\tif (fs.lstatSync(curPath).isDirectory()) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tawait remDir(curPath);\r\n\t\t\t\t\t\t\t\tresolve2();\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlog.v('Removing Entity ', files[fileIndex].split('.')[0]);\r\n\t\t\t\t\t\t\t\tfs.unlinkSync(curPath);\r\n\t\t\t\t\t\t\t\tresolve2();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tawait Promise.all(promiseArray);\r\n\t\t\t\t\tlog.v('Removing Module Directory ', path);\r\n\t\t\t\t\tfs.rmdirSync(path);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlog.v('trying to remove nonexistant path ', path);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}","code-length":350,"reference":"Recursive directory deletion\n","result":"Remove a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMousePosition(e) {\r\n                var mouseObj = void 0,\r\n                    originalEvent = e.originalEvent ? e.originalEvent : e;\r\n                mouseObj = 'changedTouches' in originalEvent && originalEvent.changedTouches ? originalEvent.changedTouches[0] : originalEvent;\r\n                return {\r\n                    clientX: mouseObj.pageX,\r\n                    clientY: mouseObj.pageY\r\n                };\r\n            }","code-length":107,"reference":"get mouse position\n","result":"Get the mouse position.","score":[0.3195,0.3226]}
{"code":"\/*is used to<extra_id_0>\r\nfunction proxyRequest(req, res, rule) {\r\n  var router,\r\n      target,\r\n      path;\r\n  injectProxyHeaders(req, rule);\r\n  path = req.url.replace(rule.regexp, rule.target.path);\r\n  if (useGateway) {\r\n    req.url = url.parse(util.format('%s\r\n    req.headers['X-Forwarded-Url'] = req.url;\r\n    target = config.gateway;\r\n    logger.info('proxy: %s %s --> %s:%s --> %s\r\n  } else {\r\n    target = rule.target;\r\n    logger.info('proxy: %s %s --> %s\r\n    req.url = path;\r\n  }\r\n  var errorCallback = function errorCallback(err, proxyRequest, proxyResponse) {\r\n    var status = 500;\r\n    if (proxyResponse !== undefined && proxyResponse !== null && proxyResponse.statusCode >= 400) {\r\n      status = proxyResponse.statusCode;\r\n    }\r\n    logger.error('proxy: error - %s %s - %s', proxyRequest.method, proxyRequest.url, err.message);\r\n    if( res.status && typeof res.status === 'function'  ){\r\n        res.status(status).json({ error: status, message: err.message });\r\n    }\r\n  };\r\n  router = createRouter(target);\r\n  router.web(req, res, errorCallback);\r\n}","code-length":357,"reference":"injects any LAN proxy servers into the request","result":"Proxy requests.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction injectProxyHeaders(req, rule){\r\n  req.headers['host'] = rule.target.host + (rule.target.originalPort ? util.format(':%d', rule.target.originalPort) : '');\r\n  req.headers['via'] =  util.format('http:\r\n  config.headers.forEach(function(header) {\r\n    var value = header.value,\r\n        name = header.name;\r\n    if(typeof(value) === 'function') {\r\n      value = value.call(undefined, req);\r\n    }\r\n    if(typeof(value) !== 'string') {\r\n      value = '';\r\n    }\r\n    if (typeof(name) === 'string') {\r\n      req.headers[name.toLowerCase()] = value;\r\n    }\r\n  });\r\n  injectAuthHeader(req);\r\n}","code-length":214,"reference":"inject any custom header values into a proxy request along with the x-forwarded-for, x-forwarded-port, and via headers","result":"Inject proxy headers.","score":[0.0038,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseFile(filepath, config) {\r\n  var contents;\r\n  filepath = filepath || path.join(process.cwd(), '\/json-proxy.json');\r\n  if (fs.existsSync(filepath)) {\r\n    try {\r\n      var data = fs.readFileSync(filepath);\r\n      contents = JSON.parse(data.toString());\r\n      config = parseConfig(contents, config);\r\n      if (config.server.webroot && config.server.webroot.length > 0) {\r\n        config.server.webroot = config.server.webroot.replace(\"$config_dir\", path.dirname(filepath));\r\n      }\r\n    } catch (ex) {\r\n      throw new Error('Cannot parse the config file \"' + filepath + '\": ' + ex);\r\n    }\r\n  }\r\n  return config;\r\n}","code-length":208,"reference":"reads a config file from either the config file specified on the command line, or fallback to a file name json-proxy.config in the working directory return true if the file can be read, otherwise return false","result":"Parse the config file .","score":[0.001,0.0456]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseConfig(contents, config) {\r\n  contents.server = contents.server || {};\r\n  contents.proxy = contents.proxy || {};\r\n  if (contents.proxy.gateway && typeof(contents.proxy.gateway) === \"string\" && contents.proxy.gateway.length > 0) {\r\n    contents.proxy.gateway = parseGateway(contents.proxy.gateway);\r\n  }\r\n  contents.proxy.forward = parseConfigMap(contents.proxy.forward, parseForwardRule);\r\n  contents.proxy.headers = parseConfigMap(contents.proxy.headers, parseHeaderRule);\r\n  config.server.port = contents.server.port || config.server.port;\r\n  config.server.webroot = contents.server.webroot || config.server.webroot;\r\n  config.server.html5mode = contents.server.html5mode || config.server.html5mode;\r\n  config.proxy.gateway = contents.proxy.gateway || config.proxy.gateway;\r\n  config.proxy.forward = contents.proxy.forward || config.proxy.forward;\r\n  config.proxy.headers = contents.proxy.headers || config.proxy.headers;\r\n  return config;\r\n}","code-length":289,"reference":"parse a config structure, overriding any values in config","result":"Parse the config file .","score":[0.108,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseConfigMap(map, callback) {\r\n  var result = [];\r\n  if (!(map instanceof Object)) {\r\n    return map;\r\n  }\r\n  for(var property in map) {\r\n    if (map.hasOwnProperty(property)) {\r\n      result.push(callback(property, map[property]));\r\n    }\r\n  }\r\n  return result;\r\n}","code-length":104,"reference":"transform a config hash object into an array","result":"Parse a config map.","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseCommandLine(argv, config) {\r\n  if (argv) {\r\n    parseCommandLineArgument(argv.port, function(item){\r\n      config.server.port = item;\r\n    });\r\n    parseCommandLineArgument(argv.html5mode, function(item){\r\n      config.server.html5mode = item;\r\n    });\r\n    parseCommandLineArgument(argv._, function(item){\r\n      config.server.webroot = path.normalize(item);\r\n    });\r\n    parseCommandLineArgument(argv.gateway, function(item){\r\n      config.proxy.gateway = parseGateway(item);\r\n    });\r\n    parseCommandLineArgument(argv.forward, function(item){\r\n      var rule = parseForwardRule(item);\r\n      var match = false;\r\n      config.proxy.forward.forEach(function(item) {\r\n        if (item.regexp.source === rule.regexp.source) {\r\n          item.target = rule.target;\r\n          match = true;\r\n        }\r\n      });\r\n      if (!match) {\r\n        config.proxy.forward.push(rule);\r\n      }\r\n    });\r\n    parseCommandLineArgument(argv.header, function(item){\r\n      var rule = parseHeaderRule(item);\r\n      var match = false;\r\n      config.proxy.headers.forEach(function(item) {\r\n        if (item.name === rule.name) {\r\n          item.value = rule.value;\r\n          match = true;\r\n        }\r\n      });\r\n      if (!match) {\r\n        config.proxy.headers.push(rule);\r\n      }\r\n    });\r\n  }\r\n  return config;\r\n}","code-length":416,"reference":"reads command line parameters","result":"Parse the command line arguments.","score":[0.3398,0.4573]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseCommandLineArgument(arg, fn) {\r\n  if (typeof(fn) !== 'function')\r\n    return;\r\n  if (Array.isArray(arg)) {\r\n    arg.forEach(function(item) {\r\n      fn.call(null, item);\r\n    });\r\n  } else {\r\n    if (arg !== null && arg !== undefined) {\r\n      fn.call(null, arg);\r\n    }\r\n  }\r\n}","code-length":120,"reference":"argv.X will be an array if multiple -X options are provided otherwise argv.X will just be a scalar value","result":"Parse the command line arguments.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseForwardRule() {\r\n  var token,\r\n      rule;\r\n  if (arguments[0] === undefined || arguments[0] === null) {\r\n    return;\r\n  }\r\n  if (typeof(arguments[0]) === \"object\") {\r\n    return arguments[0];\r\n  }\r\n  try {\r\n    token = tokenize.apply(null, arguments);\r\n    rule = { regexp: new RegExp('^' + token.name, 'i'), target: parseTargetServer(token.value) };\r\n  } catch (e) {\r\n    throw new Error('cannot parse the forwarding rule ' + arguments[0] + ' - ' + e);\r\n  }\r\n  return rule;\r\n}","code-length":181,"reference":"parses rule syntax to create forwarding rules","result":"Parse the forward rule.","score":[0,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction withCode(code, msg) {\r\n    const err = new Error(msg);\r\n    err.code = code;\r\n    return err;\r\n}","code-length":47,"reference":"Return an error with a specific code","result":"Create a new function.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateWorkingState(repoState, branch, newWorkingState) {\r\n    let workingStates = repoState.getWorkingStates();\r\n    const key = branch.getFullName();\r\n    if (newWorkingState === null) {\r\n        workingStates = workingStates.delete(key);\r\n    } else {\r\n        workingStates = workingStates.set(key, newWorkingState);\r\n    }\r\n    return repoState.set('workingStates', workingStates);\r\n}","code-length":119,"reference":"Change workinState for a specific branch\n","result":"Update working state.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fetchBranches(repoState, driver) {\r\n    const oldBranches = repoState.getBranches();\r\n    return driver.fetchBranches()\r\n    .then((branches) => {\r\n        return repoState.set('branches', branches);\r\n    })\r\n    .then(function refreshWorkingStates(repoState) {\r\n        return oldBranches.reduce((repoState, oldBranch) => {\r\n            const fullName = oldBranch.getFullName();\r\n            const newBranch = repoState.getBranch(fullName);\r\n            if (newBranch === null || newBranch.getSha() !== oldBranch.getSha()) {\r\n                return updateWorkingState(repoState, oldBranch, null);\r\n            } else {\r\n                return repoState;\r\n            }\r\n        }, repoState);\r\n    });\r\n}","code-length":200,"reference":"Fetch the list of branches in the repository and update them all. Will clear the\nWorkingStates of all branches that have updated.\n","result":"Fetch branches.","score":[0.0,0.025]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initialize(driver) {\r\n    const repoState = RepositoryState.createEmpty();\r\n    return fetchBranches(repoState, driver)\r\n    .then((repoState) => {\r\n        const branches = repoState.getBranches();\r\n        const master = branches.find(function isMaster(branch) {\r\n            return branch.getFullName() === 'master';\r\n        });\r\n        const branch = master || branches.first();\r\n        return fetchTree(repoState, driver, branch)\r\n        .then((repoState) => {\r\n            return checkout(repoState, branch);\r\n        });\r\n    });\r\n}","code-length":156,"reference":"Initialize a new RepositoryState from the repo of a Driver. Fetch\nthe branches, and checkout master or the first available branch.\n","result":"Initialize the repository.","score":[0.0012,0.0521]}
{"code":"\/*is used to<extra_id_0>\r\nfunction enforceArrayBuffer(b, encoding) {\r\n    if (isArrayBuffer(b)) return b;\r\n    else if (isBuffer(b)) return fromBuffer(b);\r\n    else return fromString(b, encoding);\r\n}","code-length":64,"reference":"Force conversion to an arraybuffer","result":"Enforce ArrayBuffer .","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction enforceString(b, encoding) {\r\n    if (is.string(b)) return b;\r\n    if (isArrayBuffer(b)) b = toBuffer(b);\r\n    return b.toString(encoding);\r\n}","code-length":63,"reference":"Force conversion to string with specific encoding","result":"Enforce string .","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction equals(buf1, buf2) {\r\n    if (buf1.byteLength != buf2.byteLength) return false;\r\n    const dv1 = new Int8Array(buf1);\r\n    const dv2 = new Int8Array(buf2);\r\n    for (let i = 0 ; i != buf1.byteLength ; i++) {\r\n        if (dv1[i] != dv2[i]) return false;\r\n    }\r\n    return true;\r\n}","code-length":122,"reference":"Tests equality of two ArrayBuffer\n","result":"Compare buffers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMergedFileSet(workingState) {\r\n    return Immutable.Set.fromKeys(\r\n        getMergedTreeEntries(workingState).filter(\r\n            treeEntry => treeEntry.getType() === TreeEntry.TYPES.BLOB\r\n        )\r\n    );\r\n}","code-length":74,"reference":"Returns a Seq of tree mixing changes and the fetched tree\n","result":"Create a file set.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMergedTreeEntries(workingState) {\r\n    const removedOrModified = workingState.getChanges().groupBy((change, path) => {\r\n        if (change.getType() === CHANGES.REMOVE) {\r\n            return 'remove';\r\n        } else {\r\n            return 'modified';\r\n        }\r\n    });\r\n    const setToRemove = Immutable.Set.fromKeys(removedOrModified.get('remove', []));\r\n    const withoutRemoved = workingState.getTreeEntries().filter((treeEntry, path) => {\r\n        return !setToRemove.contains(path);\r\n    });\r\n    const addedTreeEntries = removedOrModified.get('modified', []).map(\r\n        function toTreeEntry(change) {\r\n            return new TreeEntry({\r\n                sha: change.hasSha() ? change.getSha() : null,\r\n                mode: '100644'\r\n            });\r\n        }\r\n    );\r\n    return withoutRemoved.concat(addedTreeEntries);\r\n}","code-length":246,"reference":"Returns a Map of TreeEntry, with sha null when the content is not available as sha.\n","result":"Merge tree entries.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findSha(workingState, filepath) {\r\n    const change = workingState.getChanges().get(filepath);\r\n    const treeEntry = workingState.getTreeEntries().get(filepath);\r\n    if (change) {\r\n        if (change.getType() == CHANGES.REMOVE) {\r\n            throw error.fileNotFound(filepath);\r\n        } else {\r\n            return change.getSha();\r\n        }\r\n    } else if (treeEntry) {\r\n        return treeEntry.getSha();\r\n    } else {\r\n        throw error.fileNotFound(filepath);\r\n    }\r\n}","code-length":154,"reference":"Attempts to find a SHA if available for the  given file\n","result":"Find the sha of a file.","score":[0.0998,0.1905]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepare(repoState, opts) {\r\n    const workingState = repoState.getCurrentState();\r\n    const changes = workingState.getChanges();\r\n    opts.empty = workingState.isClean();\r\n    opts.parents = new Immutable.List([\r\n        workingState.getHead()\r\n    ]);\r\n    opts.treeEntries = WorkingUtils.getMergedTreeEntries(workingState);\r\n    opts.blobs = changes.filter((change) => {\r\n        return !change.hasSha();\r\n    }).map((change) => {\r\n        return change.getContent();\r\n    });\r\n    return CommitBuilder.create(opts);\r\n}","code-length":166,"reference":"Create a commit builder from the changes on current branch\n","result":"Prepare commit.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction flush(repoState, driver, commitBuilder, options = {}) {\r\n    options = Object.assign({\r\n        branch: repoState.getCurrentBranch(),\r\n        ignoreEmpty: true\r\n    }, options);\r\n    if (options.ignoreEmpty\r\n        && commitBuilder.isEmpty()\r\n        && commitBuilder.getParents().count() < 2) {\r\n        return Q(repoState);\r\n    }\r\n    return driver.flushCommit(commitBuilder)\r\n    .then((commit) => {\r\n        return driver.forwardBranch(options.branch, commit.getSha())\r\n        .then(function updateBranch() {\r\n            const updated = options.branch.merge({ commit });\r\n            return repoState.updateBranch(options.branch, updated);\r\n        }, function nonFF(err) {\r\n            if (err.code === ERRORS.NOT_FAST_FORWARD) {\r\n                err.commit = commit;\r\n            }\r\n            throw err;\r\n        });\r\n    })\r\n    .then(function updateWorkingState(forwardedRepoState) {\r\n        const forwardedBranch = forwardedRepoState.getBranch(options.branch.getFullName());\r\n        return RepoUtils.fetchTree(forwardedRepoState, driver, forwardedBranch);\r\n    });\r\n}","code-length":313,"reference":"Flush a commit from the current branch using a driver\nThen update the reference, and pull new workingState\n","result":"Fetch the tree of the current working state.","score":[0.0623,0.0882]}
{"code":"\/*is used to<extra_id_0>\r\nfunction format(color, messages) {\r\n  var length = messages.length;\r\n  if (length === 0 || typeof(color) !== 'string') {\r\n    return;\r\n  }\r\n  return (util.format.apply(null, messages)[color]);\r\n}","code-length":74,"reference":"colorize strings and send to console.log","result":"Format the messages.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction push(repoState, driver, opts = {}) {\r\n    opts = Object.assign({\r\n        branch: repoState.getCurrentBranch(),\r\n        force: false,\r\n        remote: {\r\n            name: 'origin'\r\n        }\r\n    }, opts);\r\n    return driver.push(opts)\r\n    .thenResolve(repoState);\r\n}","code-length":97,"reference":"Push a local branch to a remote repository\n","result":"Push the changes.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pull(repoState, driver, opts = {}) {\r\n    opts = Object.assign({\r\n        branch: repoState.getCurrentBranch(),\r\n        force: false,\r\n        remote: {\r\n            name: 'origin'\r\n        }\r\n    }, opts);\r\n    return driver.pull(opts)\r\n    .then(() => {\r\n        return driver.fetchBranches();\r\n    })\r\n    .then((branches) => {\r\n        const updatedBranch = branches.find((br) => {\r\n            return br.name === opts.branch.name;\r\n        });\r\n        repoState = repoState.updateBranch(opts.branch, updatedBranch);\r\n        return RepoUtils.fetchTree(repoState, driver, updatedBranch);\r\n    });\r\n}","code-length":194,"reference":"Pulls changes for local branch, from remote repository. Loses any\npending changes on it.\n","result":"Fetch the tree.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareRefs(driver, base, head) {\r\n    const baseRef = base instanceof Branch ? base.getFullName() : base;\r\n    const headRef = head instanceof Branch ? head.getFullName() : head;\r\n    return driver.findParentCommit(baseRef, headRef)\r\n    .then((parentCommit) => {\r\n        return Q.all([\r\n            parentCommit ? parentCommit.getSha() : null,\r\n            baseRef,\r\n            headRef\r\n        ].map((ref) => {\r\n            return ref ? driver.fetchWorkingState(ref) : WorkingState.createEmpty();\r\n        }));\r\n    })\r\n    .spread((parent, base, head) => {\r\n        const conflicts = _compareTrees(parent.getTreeEntries(),\r\n                                     base.getTreeEntries(),\r\n                                     head.getTreeEntries());\r\n        return new TreeConflict({\r\n            base,\r\n            head,\r\n            parent,\r\n            conflicts\r\n        });\r\n    });\r\n}","code-length":247,"reference":"Computes a TreeConflict between to tree references. Fetches the\ntrees from the repo. The list of conflicts is the minimal set of\nconflicts.\n","result":"Return driver.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction solveTree(treeConflict, solved) {\r\n    solved = treeConflict.getConflicts()\r\n    .merge(solved)\r\n    .map(function defaultSolve(conflict) {\r\n        if (!conflict.isSolved()) {\r\n            return conflict.keepBase();\r\n        } else {\r\n            return conflict;\r\n        }\r\n    });\r\n    return treeConflict.set('conflicts', solved);\r\n}","code-length":114,"reference":"Merge solved Conflicts back into a TreeConflict. Unsolved conflicts\ndefault to keep base.\n","result":"Return solved.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeCommit(treeConflict, parents, options) {\r\n    options = options || {};\r\n    const opts = {};\r\n    opts.empty = false;\r\n    opts.parents = new Immutable.List(parents);\r\n    opts.author = options.author;\r\n    opts.message = options.message || 'Merged commit';\r\n    const solvedEntries = _getSolvedEntries(treeConflict);\r\n    opts.treeEntries = solvedEntries;\r\n    const solvedConflicts = treeConflict.getConflicts();\r\n    opts.blobs = solvedEntries.filter((treeEntry) => {\r\n        return !treeEntry.hasSha();\r\n    }).map((treeEntry, path) => {\r\n        return solvedConflicts.get(path).getSolvedContent();\r\n    });\r\n    return CommitBuilder.create(opts);\r\n}","code-length":209,"reference":"Create a merge commit builder\n","result":"Create a commit from a treeConflict.","score":[0.3021,0.2941]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _getSolvedEntries(treeConflict) {\r\n    const parentEntries = treeConflict.getParent().getTreeEntries();\r\n    const baseEntries = treeConflict.getBase().getTreeEntries();\r\n    const headEntries = treeConflict.getHead().getTreeEntries();\r\n    const baseDiff = _diffEntries(parentEntries, baseEntries);\r\n    const headDiff = _diffEntries(parentEntries, headEntries);\r\n    const resolvedEntries = treeConflict.getConflicts().map((solvedConflict) => {\r\n        if (solvedConflict.isDeleted()) {\r\n            return null;\r\n        } else {\r\n            return new TreeEntry({\r\n                sha: solvedConflict.getSolvedSha() || null\r\n            });\r\n        }\r\n    });\r\n    return parentEntries.merge(baseDiff, headDiff, resolvedEntries)\r\n    .filter(function nonNull(entry) {\r\n        return entry !== null;\r\n    });\r\n}","code-length":232,"reference":"Returns the final TreeEntries for a solved TreeConflict.\n","result":"Get the solved entries of a treeConflict.","score":[0.1843,0.2532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addBlob(cache, sha, blob) {\r\n    const blobs = cache.getBlobs();\r\n    const newBlobs = blobs.set(sha, blob);\r\n    const newCache = cache.set('blobs', newBlobs);\r\n    return newCache;\r\n}","code-length":76,"reference":"Add a new blob to a cache instance\n","result":"Add blobs.","score":[0.0249,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction get(repoState, dirPath) {\r\n    const normDirPath = Path.join(dirPath, '.');\r\n    const filepaths = DirUtils.readFilenamesRecursive(repoState, normDirPath);\r\n    const tree = {\r\n        value: File.createDir(normDirPath),\r\n        children: {}\r\n    };\r\n    for (let i = 0; i < filepaths.length; i++) {\r\n        const relativePath = Path.relative(normDirPath, filepaths[i]);\r\n        const parts = relativePath.split('\/');\r\n        let node = tree;\r\n        let prefix = normDirPath;\r\n        for (let j = 0; j < parts.length; j++) {\r\n            const head = parts[j];\r\n            const isLeaf = (j === parts.length - 1);\r\n            prefix = Path.join(prefix, head);\r\n            if (!node.children[head]) {\r\n                if (isLeaf) {\r\n                    node.children[head] = {\r\n                        value: FileUtils.stat(repoState, filepaths[i])\r\n                    };\r\n                } else {\r\n                    node.children[head] = {\r\n                        value: File.createDir(prefix),\r\n                        children: {}\r\n                    };\r\n                }\r\n            }\r\n            node = node.children[head];\r\n        }\r\n    }\r\n    return TreeNode.fromJS(tree);\r\n}","code-length":345,"reference":"Generate a files tree from the current branch, taking pending changes into account.\n","result":"Get the tree of files in a directory.","score":[0.1051,0.2]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normCreatedCommit(ghCommit) {\r\n    const commit = Commit.create({\r\n        sha: ghCommit.sha,\r\n        message: ghCommit.message,\r\n        author: getSimpleAuthor(ghCommit.author),\r\n        date: ghCommit.author.date,\r\n        parents: ghCommit.parents.map(function getSha(o) { return o.sha; })\r\n    });\r\n    return commit;\r\n}","code-length":112,"reference":"Normalize a commit coming from the GitHub commit creation API\n","result":"Normalize the created commit.","score":[0.0848,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normListedCommit(ghCommit) {\r\n    const commit = Commit.create({\r\n        sha: ghCommit.sha,\r\n        message: ghCommit.commit.message,\r\n        author: getCompleteAuthor(ghCommit),\r\n        date: ghCommit.commit.author.date,\r\n        files: ghCommit.files,\r\n        parents: ghCommit.parents.map(c => c.sha)\r\n    });\r\n    return commit;\r\n}","code-length":118,"reference":"Normalize a commit coming from the GitHub commit listing API\n","result":"Normalize the listed commit.","score":[0.0848,0.1596]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stat(repoState, filepath) {\r\n    const workingState = repoState.getCurrentState();\r\n    const change = workingState.getChanges().get(filepath);\r\n    const treeEntry = workingState.getTreeEntries().get(filepath);\r\n    let blobSHA;\r\n    if (change) {\r\n        blobSHA = change.getSha();\r\n    } else {\r\n        blobSHA = treeEntry.getSha();\r\n    }\r\n    let blob;\r\n    if (blobSHA) {\r\n        blob = repoState.getCache().getBlob(blobSHA);\r\n    } else {\r\n        blob = change.getContent();\r\n    }\r\n    let fileSize;\r\n    if (blob) {\r\n        fileSize = blob.getByteLength();\r\n    } else {\r\n        const originalEntry = workingState.getTreeEntries().find((entry) => {\r\n            return entry.getSha() === blobSHA;\r\n        });\r\n        fileSize = originalEntry.getBlobSize();\r\n    }\r\n    return new File({\r\n        type: FILETYPE.FILE,\r\n        fileSize,\r\n        path: filepath,\r\n        content: blob\r\n    });\r\n}","code-length":292,"reference":"Stat details about a file.\n","result":"Get the stat function for a given filepath.","score":[0.1389,0.1887]}
{"code":"\/*is used to<extra_id_0>\r\nfunction readAsString(repoState, filepath, encoding) {\r\n    const blob = read(repoState, filepath);\r\n    return blob.getAsString(encoding);\r\n}","code-length":48,"reference":"Read content of a file, returns a String\n","result":"Read a file as string.","score":[0.1568,0.1948]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exists(repoState, filepath) {\r\n    const workingState = repoState.getCurrentState();\r\n    const mergedFileSet = WorkingUtils.getMergedTreeEntries(workingState);\r\n    return mergedFileSet.has(filepath);\r\n}","code-length":66,"reference":"Return true if file exists in working tree, false otherwise","result":"Check if a file exists.","score":[0.1051,0.1053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remove(repoState, filepath) {\r\n    if (!exists(repoState, filepath)) {\r\n        throw error.fileNotFound(filepath);\r\n    }\r\n    const change = Change.createRemove();\r\n    return ChangeUtils.setChange(repoState, filepath, change);\r\n}","code-length":77,"reference":"Remove a file\n","result":"Return repoState.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction move(repoState, filepath, newFilepath) {\r\n    if (filepath === newFilepath) {\r\n        return repoState;\r\n    }\r\n    const initialWorkingState = repoState.getCurrentState();\r\n    const sha = WorkingUtils.findSha(initialWorkingState, filepath);\r\n    let changeNewFile;\r\n    if (sha) {\r\n        changeNewFile = Change.createCreateFromSha(sha);\r\n    } else {\r\n        const blob = read(repoState, filepath);\r\n        const contentBuffer = blob.getAsBuffer();\r\n        changeNewFile = Change.createCreate(contentBuffer);\r\n    }\r\n    const removedRepoState = remove(repoState, filepath);\r\n    return ChangeUtils.setChange(removedRepoState, newFilepath, changeNewFile);\r\n}","code-length":198,"reference":"Rename a file\n","result":"Remove files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hasChanged(previousState, newState, filepath) {\r\n    const previouslyExists = exists(previousState, filepath);\r\n    const newExists = exists(newState, filepath);\r\n    if (!previouslyExists && !newExists) {\r\n        return false;\r\n    } else if (exists(previousState, filepath) !== exists(newState, filepath)) {\r\n        return true;\r\n    } else {\r\n        const prevWorking = previousState.getCurrentState();\r\n        const newWorking = newState.getCurrentState();\r\n        const prevSha = WorkingUtils.findSha(prevWorking, filepath);\r\n        const newSha = WorkingUtils.findSha(newWorking, filepath);\r\n        if (prevSha === null && newSha === null) {\r\n            return read(previousState, filepath).getAsString() !==\r\n                read(newState, filepath).getAsString();\r\n        } else {\r\n            return prevSha !== newSha;\r\n        }\r\n    }\r\n}","code-length":238,"reference":"Returns true if the given file has the same content in both\nRepositoryState's current working state, or is absent from both.\n","result":"Detect changes in the file.","score":[0.0116,0.0515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setup(connection, done) {\r\n  var config = createDefaultConfig(),\r\n      options = {\r\n        proxy: false,\r\n        headers: {}\r\n      };\r\n  handles = {};\r\n  if (connection !== 'direct') {\r\n    options.proxy = true;\r\n     config.proxy.gateway = {\r\n      protocol: 'http:',\r\n      host: 'localhost',\r\n      port: 0,\r\n      auth: 'proxyuser:C0mp13x_!d0rd$$@P!'\r\n    };\r\n    if (connection === 'non-rfc-proxy') {\r\n      config.proxy.headers['Via'] = 'http:\r\n      config.proxy.headers['Host'] = 'force.example.com';\r\n    }\r\n    options.headers = require('util')._extend(config.proxy.headers);\r\n    configureLanProxy(options, config, function() {\r\n      configureNock(options, config);\r\n      configureExpress(config, done);\r\n    })\r\n  } else {\r\n    configureNock(options, config);\r\n    configureExpress(config, done);\r\n  }\r\n}","code-length":289,"reference":"Initializes the testing infrastructure needed for\nverifying the behavior of the core proxy library -\nnock, express, and httpServer.\n\n","result":"Setup the server.","score":[0.002,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction configureNock(options, config) {\r\n  var result = {};\r\n  nock.disableNetConnect();\r\n  nock.enableNetConnect('localhost');\r\n  function createNock(url) {\r\n    var instance = nock(url),\r\n        expectedViaHeader = options.headers['Via'] ||\r\n                            'http:\r\n        expectedHostHeader = options.headers['Host'] || \/.*\/;\r\n    if (options.proxy === true) {\r\n      instance.matchHeader('via', expectedViaHeader);\r\n      instance.matchHeader('host', expectedHostHeader);\r\n    }\r\n    instance.matchHeader('x-test-header', 'John Doe');\r\n    return instance;\r\n  }\r\n  rules = [\r\n    createNock('http:\r\n    .get('\/api\/hello')\r\n    .reply(200, '{ \"hello\": \"world\" }')\r\n    .get('\/account?id=1&email=2&sort=asc')\r\n    .reply(200, '{ \"email\": \"john.doe@example.com\" }')\r\n    .get('\/api\/notfound')\r\n    .reply(404),\r\n    createNock('http:\r\n    .get('\/hello')\r\n    .reply(200, '{ \"hello\": \"world\" }')\r\n    .get('\/foo\/bar')\r\n    .reply(200, '{ \"foo\": \"bar\" }'),\r\n    createNock('http:\r\n    .get('\/foo\/12345\/bar')\r\n    .reply(200, '{ \"foo\": \"bar\" }')\r\n    .get('\/subapp\/junction\/customer\/1')\r\n    .reply(200, '{ \"id\": 1 }'),\r\n    createNock('https:\r\n    .get('\/issue\/8')\r\n    .reply(200, '{ \"reporter\": \"@heygrady\" }'),\r\n    createNock('https:\r\n    .get('\/secure\/api\/hello')\r\n    .reply(200, '{ \"hello\": \"world\" }')\r\n    .get('\/secure\/api\/notfound')\r\n    .reply(404),\r\n    createNock('https:\r\n    .matchHeader('X-Test-Header-Function', 'Bearer 0123456789abcdef')\r\n    .get('\/token')\r\n    .reply(200, '{ \"author\": \"ehtb\" }')\r\n  ];\r\n}","code-length":595,"reference":"configures nock globally for a test run\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction configureExpress(config, done) {\r\n  var portfinder = require('portfinder');\r\n  tmp.dir(function(err, filepath){\r\n    handles.filepath = filepath;\r\n    portfinder.getPort(function (err, port) {\r\n      if (err) throw(err);\r\n      handles.port = port;\r\n      fs.writeFileSync(path.join(handles.filepath, 'index.txt'), 'hello, world');\r\n      app.use(proxy.initialize(config));\r\n      app.use(express.static(handles.filepath));\r\n      handles.server = require('http').createServer(app);\r\n      handles.server.listen(handles.port, function() {\r\n        done(null, handles.port);\r\n      });\r\n    });\r\n  });\r\n}","code-length":203,"reference":"Configures an express instance on a dynamically assigned port\nfor serving static files and proxying requests based on the config.\n\n","result":"Configure express .","score":[0.0014,0.0546]}
{"code":"\/*is used to<extra_id_0>\r\nfunction configureLanProxy(options, config, done) {\r\n  var portfinder = require('portfinder'),\r\n      request = require('request'),\r\n      credentials = config.proxy.gateway.auth,\r\n      gatewayPort,\r\n      expectedAuthorizationHeader,\r\n      requestViaHeader,\r\n      responseViaHeader;\r\n  handles = handles || {};\r\n  handles.gatewayServer = require('http').createServer(function (req, res) {\r\n    expectedAuthorizationHeader = 'Basic ' + new Buffer(credentials).toString('base64');\r\ntr(1);\r\n    }\r\n    if (req.url !== req.headers['x-forwarded-url']) {\r\n        res.writeHead(500);\r\n        res.end('{ \"error\": 500, \"message\": \"invalid proxy request, expected X-Forwarded-Url header ' + req.headers['x-forwarded-url'] + '\" }');\r\n        return;\r\n    }\r\n    if (req.headers['authorization'] !== expectedAuthorizationHeader) {\r\n      res.writeHead(401);\r\n      res.end('{ \"error\": 401, \"message\": \"invalid proxy credentials, expected ' + expectedAuthorizationHeader + '\" }');\r\n      return;\r\n    }\r\n    requestViaHeader = options.headers['Via'] ||\r\n                        '127.0.0.1:' + handles.port;\r\n    responseHostHeader = options.headers['Host'] ||\r\n                        req.headers['host'];\r\n    responseViaHeader = options.headers['Via'] ||\r\n                        'http:\r\n    if (req.headers['via'] === undefined || req.headers['via'] === null || req.headers['via'].indexOf(requestViaHeader) === -1) {\r\n      res.writeHead(400);\r\n      res.end('{ \"error\": 400, \"message\": \"invalid via header, expected ' + requestViaHeader + '\" }');\r\n      return;\r\n    }\r\n    req.headers['authorization'] = null;\r\n    req.headers['x-forwarded-for'] = [req.headers['x-forwarded-for'], req.headers['via']].join(', ');\r\n    req.headers['via'] = responseViaHeader;\r\n    req.headers['host'] = responseHostHeader;\r\n    var errorCallback = function errorCallback(err, repsonse, body) {\r\n      if (err) {\r\n        res.writeHead(500);\r\n        res.end(JSON.stringify({ \"error\": 500, \"message\": err.message  }));\r\n        return;\r\n      }\r\n    }\r\n    request(req, errorCallback).pipe(res);\r\n  });\r\n  portfinder.getPort(function (err, port) {\r\n    if (err) done(err);\r\n    config.proxy.gateway.port = port;\r\n    gatewayPort = port;\r\n    handles.gatewayServer.listen(port, function() {\r\n      done(null);\r\n    });\r\n  });\r\n}","code-length":712,"reference":"Creates a simple LAN proxy using a vanilla HTTP server\nthat verifies the state of the proxy credentials and the x-forwarded-url\nare correct.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cleanup(done) {\r\n  config = null;\r\n  rules.forEach(function(rule){\r\n    rule.done();\r\n  });\r\n  nock.cleanAll();\r\n  handles.server.close();\r\n  if (handles.gatewayServer !== undefined && handles.gatewayServer !== null) {\r\n    handles.gatewayServer.close();\r\n  }\r\n  fs.unlinkSync(path.join(handles.filepath, '\/index.txt'));\r\n  handles = null;\r\n  done();\r\n}","code-length":135,"reference":"Teardown logic for the reusable test suites\n","result":"Clean up the config.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setChange(repoState, filepath, change) {\r\n    let workingState = repoState.getCurrentState();\r\n    let changes = workingState.getChanges();\r\n    const type = change.getType();\r\n    if (type === CHANGE_TYPE.REMOVE\r\n        && !workingState.getTreeEntries().has(filepath)) {\r\n        changes = changes.delete(filepath);\r\n    } else if (type === CHANGE_TYPE.CREATE\r\n               && workingState.getTreeEntries().has(filepath)) {\r\n        changes = changes.set(filepath, change.set('type', CHANGE_TYPE.UPDATE));\r\n    } else {\r\n        changes = changes.set(filepath, change);\r\n    }\r\n    workingState = workingState.set('changes', changes);\r\n    return RepoUtils.updateCurrentWorkingState(repoState, workingState);\r\n}","code-length":210,"reference":"Set a new change to the current WorkingState.\nAttempt to resolve some cases like removing a file that was added\nin the first place.\n","result":"Set the change in the repo.","score":[0.0171,0.1676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction revertAll(repoState) {\r\n    let workingState = repoState.getCurrentState();\r\n    const changes = new Immutable.OrderedMap();\r\n    workingState = workingState.set('changes', changes);\r\n    return RepoUtils.updateCurrentWorkingState(repoState, workingState);\r\n}","code-length":79,"reference":"Revert all changes\n","result":"Revert all changes.","score":[0.5774,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction revertForFile(repoState, filePath) {\r\n    let workingState = repoState.getCurrentState();\r\n    const changes = workingState.getChanges().delete(filePath);\r\n    workingState = workingState.set('changes', changes);\r\n    return RepoUtils.updateCurrentWorkingState(repoState, workingState);\r\n}","code-length":86,"reference":"Revert change for a specific file\n","result":"Revert a file.","score":[0.1786,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction revertForDir(repoState, dirPath) {\r\n    let workingState = repoState.getCurrentState();\r\n    let changes = workingState.getChanges();\r\n    changes = changes.filter((change, filePath) => {\r\n        return !PathUtils.contains(dirPath, filePath);\r\n    });\r\n    workingState = workingState.set('changes', changes);\r\n    return RepoUtils.updateCurrentWorkingState(repoState, workingState);\r\n}","code-length":116,"reference":"Revert changes for a specific directory\n","result":"Revert changes for a directory.","score":[0.6158,0.6727]}
{"code":"\/*is used to<extra_id_0>\r\nfunction revertAllRemoved(repoState) {\r\n    let workingState = repoState.getCurrentState();\r\n    const changes = workingState.getChanges().filter(\r\n        (change) => {\r\n            return change.getType() === CHANGE_TYPE.REMOVE;\r\n        }\r\n    );\r\n    workingState = workingState.set('changes', changes);\r\n    return RepoUtils.updateCurrentWorkingState(repoState, workingState);\r\n}","code-length":114,"reference":"Revert all removed files\n","result":"Revert all removed objects.","score":[0.658,0.7361]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normPath(p) {\r\n    p = path.normalize(p);\r\n    if (p[0] == '\/') p = p.slice(1);\r\n    if (p[p.length - 1] == '\/') p = p.slice(0, -1);\r\n    if (p == '.') p = '';\r\n    return p;\r\n}","code-length":95,"reference":"Normalize a path","result":"Normalize paths.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pathContains(dir, path) {\r\n    dir = dir ? normPath(dir) + '\/' : dir;\r\n    path = normPath(path);\r\n    return path.indexOf(dir) === 0;\r\n}","code-length":61,"reference":"Returns true if the path is under dir","result":"Test paths.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction readFilenamesRecursive(repoState, dirName) {\r\n    dirName = PathUtils.norm(dirName);\r\n    const workingState = repoState.getCurrentState();\r\n    const fileSet = WorkingUtils.getMergedFileSet(workingState);\r\n    return fileSet.filter((path) => {\r\n        return PathUtils.contains(dirName, path);\r\n    }).toArray();\r\n}","code-length":103,"reference":"List files recursively in a directory\n","result":"Read files in a directory.","score":[0.3079,0.4331]}
{"code":"\/*is used to<extra_id_0>\r\nfunction move(repoState, dirName, newDirName) {\r\n    const filesToMove = readFilenamesRecursive(repoState, dirName);\r\n    return filesToMove.reduce((repoState, oldPath) => {\r\n        const newPath = Path.join(\r\n            newDirName,\r\n            Path.relative(dirName, oldPath)\r\n        );\r\n        return FileUtils.move(repoState, oldPath, newPath);\r\n    }, repoState);\r\n}","code-length":116,"reference":"Rename a directory","result":"Move files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction create(repositoryState, driver, name, opts = {}) {\r\n    const {\r\n        base = repositoryState.getCurrentBranch(),\r\n        checkout = true,\r\n        clean = true,\r\n        cleanBase = false\r\n    } = opts;\r\n    let createdBranch;\r\n    return driver.createBranch(base, name)\r\n    .then((branch) => {\r\n        createdBranch = branch;\r\n        let branches = repositoryState.getBranches();\r\n        branches = branches.push(createdBranch);\r\n        return repositoryState.set('branches', branches);\r\n    })\r\n    .then((repoState) => {\r\n        let baseWk = repoState.getWorkingStateForBranch(base);\r\n        if (!baseWk) {\r\n            return checkout ? RepoUtils.fetchTree(repoState, driver, createdBranch) : repoState;\r\n        }\r\n        const headWk = clean ? baseWk.asClean() : baseWk;\r\n        repoState = RepoUtils.updateWorkingState(repoState, createdBranch, headWk);\r\n        baseWk = cleanBase ? baseWk.asClean() : baseWk;\r\n        repoState = RepoUtils.updateWorkingState(repoState, base, baseWk);\r\n        return repoState;\r\n    })\r\n    .then((repoState) => {\r\n        if (!checkout) {\r\n            return repoState;\r\n        }\r\n        return RepoUtils.checkout(repoState, createdBranch);\r\n    });\r\n}","code-length":370,"reference":"Create a new branch with the given name.\n","result":"Return repositoryState.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction update(repoState, driver, branchName) {\r\n    branchName = Normalize.branchName(branchName || repoState.getCurrentBranch());\r\n    return driver.fetchBranches()\r\n    .then((branches) => {\r\n        const newBranch = branches.find((branch) => {\r\n            return branch.getFullName() === branchName;\r\n        });\r\n        if (!newBranch) {\r\n            return repoState;\r\n        } else {\r\n            return RepoUtils.fetchTree(repoState, driver, newBranch);\r\n        }\r\n    });\r\n}","code-length":141,"reference":"Fetch the list of branches, and update the given branch only. Will update\nthe WorkingState of the branch (and discard previous\n","result":"Update the current branch.","score":[0.0046,0.0518]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remove(repoState, driver, branch) {\r\n    return driver.deleteBranch(branch)\r\n    .then(() => {\r\n        return repoState.updateBranch(branch, null);\r\n    });\r\n}","code-length":61,"reference":"Remove the given branch from the repository.\n","result":"Remove a branch.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fetch(repoState, driver, sha) {\r\n    if (isFetched(repoState, sha)) {\r\n        return Q(repoState);\r\n    }\r\n    const cache = repoState.getCache();\r\n    return driver.fetchBlob(sha)\r\n    .then((blob) => {\r\n        const newCache = CacheUtils.addBlob(cache, sha, blob);\r\n        return repoState.set('cache', newCache);\r\n    });\r\n}","code-length":120,"reference":"Fetch a blob from SHA.\n","result":"Fetch blob.","score":[0.1116,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (context, options, callback) {\r\n    context.retryQueue.push([options, callback]);\r\n    if (context.refreshActive) {\r\n        return false;\r\n    }\r\n    context.refreshActive = true;\r\n    return request({\r\n        uri: baseUrl + '\/oauth2\/token',\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Basic ' + new Buffer(context.clientId + ':' + context.clientSecret).toString('base64'),\r\n            'User-Agent': userAgent\r\n        },\r\n        form: {\r\n            grant_type: 'client_credentials'\r\n        }\r\n    }, function (err, res, body) {\r\n        context.refreshActive = false;\r\n        if (res.statusCode != 200) {\r\n            context.retryQueue = [];\r\n            return callback && callback(res.body, res);\r\n        }\r\n        var token = JSON.parse(body);\r\n        context.accessToken = token.access_token;\r\n        while (0 < context.retryQueue.length) {\r\n            var reqArgs = context.retryQueue.pop();\r\n            context.apiRequest(reqArgs[0], reqArgs[1]);\r\n        }\r\n    });\r\n}","code-length":308,"reference":"a private function to automatically refresh the access token when receiving a 401. Adds rejected requests to a queue to be processed","result":"Refresh the token.","score":[0.0007,0.0933]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PokitDok(clientId, clientSecret, version) {\r\n    this.clientId = clientId;\r\n    this.clientSecret = clientSecret;\r\n    this.version = version || 'v4';\r\n    this.refreshActive = false;\r\n    this.retryQueue = [];\r\n    this.accessToken = null;\r\n}","code-length":90,"reference":"Create a connection to the pokitdok API. The version defaults to v4. You must enter your client ID and client secret\nor all requests made with your connection will return errors.\n","result":"Create a new instance.","score":[0.0005,0.0663]}
{"code":"\/*is used to<extra_id_0>\r\nfunction featureArrayToFeatureString(features, bias, firstFeatureNumber) {\r\n\tif (!Array.isArray(features))\r\n\t\tthrow new Error(\"Expected an array, but got \"+JSON.stringify(features))\r\n\tvar line = (bias? \" \"+firstFeatureNumber+\":\"+bias: \"\");\r\n\tfor (var feature=0; feature<features.length; ++feature) {\r\n\t\tvar value = features[feature];\r\n\t\tif (value)\r\n\t\t\tline += (\" \"+(feature+firstFeatureNumber+(bias?1:0))+\":\"+value.toPrecision(5));\r\n\t}\r\n\treturn line;\r\n}","code-length":163,"reference":"convert an array of features to a single line in SVM-light format. The line starts with a space.","result":"Convert a feature array to a feature string.","score":[0.0669,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(feature) {\r\n\t\tif (!(feature in this.featureNameToFeatureIndex)) {\r\n\t\t\tvar newIndex = this.featureIndexToFeatureName.length;\r\n\t\t\tthis.featureIndexToFeatureName.push(feature);\r\n\t\t\tthis.featureNameToFeatureIndex[feature] = newIndex;\r\n\t\t}\r\n\t}","code-length":89,"reference":"add a single feature, if it does not exist","result":"Create a new feature .","score":[0.108,0.0581]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(hash) {\r\n\t\tif (hash instanceof Array) {\r\n\t\t\tfor (var index in hash)\r\n\t\t\t\tthis.addFeature(hash[index]);\r\n\t\t} else if (hash instanceof Object) {\r\n\t\t\tfor (var feature in hash)\r\n\t\t\t\tthis.addFeature(feature);\r\n\t\t} \r\n\t\telse throw new Error(\"FeatureLookupTable.addFeatures expects a hash or an array, but got: \"+JSON.stringify(hash));\r\n\t}","code-length":125,"reference":"add all features in the given hash or array","result":"Create a new FeatureLookupTable.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(hash) {\r\n\t\tthis.addFeatures(hash);\r\n\t\tvar array = [];\r\n\t\tfor (var featureIndex=0; featureIndex<this.featureIndexToFeatureName.length; ++featureIndex)\r\n\t\t\tarray[featureIndex]=0;\r\n\t\tif (hash instanceof Array) {\r\n\t\t\tfor (var i in hash)\r\n\t\t\t\tarray[this.featureNameToFeatureIndex[hash[i]]] = true;\r\n\t\t} else if (hash instanceof Object) {\r\n\t\t\tfor (var feature in hash)\r\n\t\t\t\tarray[this.featureNameToFeatureIndex[feature]] = hash[feature];\r\n\t\t}\r\n\t\telse throw new Error(\"Unsupported type: \"+JSON.stringify(hash));\r\n\t\treturn array;\r\n\t}","code-length":197,"reference":"Convert the given hash of features to a numeric array, using 0 for padding.\nIf some features in the hash do not exist - they will be added.\n","result":"Create a feature index array.","score":[0.0024,0.0389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(hashes) {\r\n\t\tthis.addFeaturess(hashes);\r\n\t  \r\n\t\tvar arrays = [];\r\n\t\tfor (var i=0; i<hashes.length; ++i) {\r\n\t\t\tarrays[i] = [];\r\n\t\t\tfor (var feature in this.featureNameToFeatureIndex)\r\n\t\t\t\tarrays[i][this.featureNameToFeatureIndex[feature]] = hashes[i][feature] || 0;\r\n\t\t}\r\n\t\treturn arrays;\r\n\t}","code-length":131,"reference":"Convert all the given hashes of features to numeric arrays, using 0 for padding.\nIf some features in some of the hashes do not exist - they will be added.\n","result":"Create a feature feature feature .","score":[0,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array) {\r\n\t\tvar hash = {};\r\n\t\tfor (var feature in this.featureNameToFeatureIndex) {\r\n\t\t\tif (array[this.featureNameToFeatureIndex[feature]])\r\n\t\t\t\thash[feature] = array[this.featureNameToFeatureIndex[feature]];\r\n\t\t}\r\n\t\treturn hash;\r\n\t}","code-length":95,"reference":"Convert the given numeric array to a hash of features, ignoring zero values.\n","result":"Create a feature hash from an array.","score":[0.0815,0.0806]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(arrays) {\r\n\t\tvar hashes = [];\r\n\t\tfor (var i=0; i<arrays.length; ++i)\r\n\t\t\thashes[i] = this.arrayToHash(arrays[i]);\r\n\t\treturn hashes;\r\n\t}","code-length":73,"reference":"Convert the given numeric arrays to array of hashes of features, ignoring zero values.","result":"Generate the hash.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sample, splitLabels, treeNode) {\r\n\t\tvar superlabels = {};\r\n\t\tvar mapSuperlabelToRest = {};\r\n\t\tfor (var i in splitLabels) {\r\n\t\t\tvar splitLabel = splitLabels[i];\r\n\t\t\tvar superlabel = splitLabel[0];\r\n\t\t\tsuperlabels[superlabel] = true;\r\n\t\t\tif (splitLabel.length>1) {\r\n\t\t\t\tif (!mapSuperlabelToRest[superlabel]) \r\n\t\t\t\t\tmapSuperlabelToRest[superlabel] = [];\r\n\t\t\t\tmapSuperlabelToRest[superlabel].push(splitLabel.slice(1));\r\n\t\t\t}\r\n\t\t}\r\n\t\ttreeNode.superlabelClassifier.trainOnline(sample, Object.keys(superlabels));\r\n\t\tfor (var superlabel in mapSuperlabelToRest) {\r\n\t\t\tif (!(superlabel in treeNode.mapSuperlabelToBranch)) {\r\n\t\t\t\ttreeNode.mapSuperlabelToBranch[superlabel] = {\r\n\t\t\t\t\tsuperlabelClassifier: this.newMultilabelClassifier(),\r\n\t\t\t\t\tmapSuperlabelToBranch: {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.trainOnlineRecursive(sample, mapSuperlabelToRest[superlabel], treeNode.mapSuperlabelToBranch[superlabel]);\r\n\t\t}\r\n\t}","code-length":326,"reference":"Recursive internal subroutine of trainOnline.\n","result":"Train the tree tree recursively.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(dataset, treeNode) {\r\n\t\tvar superlabelsDataset = [];\r\n\t\tvar mapSuperlabelToRestDataset = {};\r\n\t\tdataset.forEach(function(datum) { \r\n\t\t\tvar splitLabels = datum.output;\t\r\n\t\t\tvar superlabels = {};\r\n\t\t\tvar mapSuperlabelToRest = {};\r\n\t\t\tfor (var i in splitLabels) { \r\n\t\t\t\tvar splitLabel = splitLabels[i];\r\n\t\t\t\tvar superlabel = splitLabel[0];\r\n\t\t\t\tsuperlabels[superlabel] = true;\r\n\t\t\t\tif (splitLabel.length>1) { \t\t\r\n\t\t\t\t\tif (!mapSuperlabelToRest[superlabel]) \r\n\t\t\t\t\t\tmapSuperlabelToRest[superlabel] = [];\r\n\t\t\t\t\tmapSuperlabelToRest[superlabel].push(splitLabel.slice(1));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsuperlabelsDataset.push({\r\n\t\t\t\tinput: datum.input,\r\n\t\t\t\toutput: Object.keys(superlabels)\r\n\t\t\t});\t\t\r\n\t\t\tfor (var superlabel in mapSuperlabelToRest) {\r\n\t\t\t\tif (!(superlabel in mapSuperlabelToRestDataset)) \r\n\t\t\t\t\tmapSuperlabelToRestDataset[superlabel] = [];\r\n\t\t\t\tmapSuperlabelToRestDataset[superlabel].push({\r\n\t\t\t\t\tinput: datum.input,\r\n\t\t\t\t\toutput: mapSuperlabelToRest[superlabel]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\ttreeNode.superlabelClassifier.trainBatch(superlabelsDataset);\r\n\t\tfor (var superlabel in mapSuperlabelToRestDataset) {\r\n\t\t\tif (!(superlabel in treeNode.mapSuperlabelToBranch)) {\r\n\t\t\t\ttreeNode.mapSuperlabelToBranch[superlabel] = {\r\n\t\t\t\t\tsuperlabelClassifier: this.newMultilabelClassifier(),\r\n\t\t\t\t\tmapSuperlabelToBranch: {}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.trainBatchRecursive(mapSuperlabelToRestDataset[superlabel], treeNode.mapSuperlabelToBranch[superlabel]);\r\n\t\t}\r\n\t}","code-length":526,"reference":"Recursive internal subroutine of trainBatch.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sample, explain, treeNode, depth) {\r\n\t\tif (!depth) depth = 1;\r\n\t\t\r\n\t\tvar superlabelsWithExplain = treeNode.superlabelClassifier.classify(sample, explain);\r\n\t\tvar superlabels = (explain>0? superlabelsWithExplain.classes: superlabelsWithExplain);\r\n\t\t\r\n\t\tvar splitLabels = [];\r\n\t\tif (explain>0) {\r\n\t\t\tvar explanations = [\"depth=\"+depth+\": \"+superlabels, superlabelsWithExplain.explanation];\r\n\t\t}\r\n\t\t\r\n\t\tfor (var i in superlabels) {\r\n\t\t\tvar superlabel = superlabels[i];\r\n\t\t\tvar splitLabel = [superlabel];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar branch = treeNode.mapSuperlabelToBranch[superlabel];\r\n\t\t\t\r\n\t\t\tif (branch) {\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar branchLabelsWithExplain = this.classifyRecursive(sample, explain, branch, depth+1);\r\n\t\t\t\t\r\n\t\t\t\tvar branchLabels = (explain>0? branchLabelsWithExplain.classes: branchLabelsWithExplain);\r\n\t\t\t\t\t\r\n\t\t\t\tfor (var j in branchLabels)\r\n\t\t\t\t\tsplitLabels.push(splitLabel.concat(branchLabels[j]));\r\n\t\t\t\tif (explain>0) \r\n\t\t\t\t\texplanations = explanations.concat(branchLabelsWithExplain.explanation);\r\n\t\t\t} else {\r\n\t\t\t\tsplitLabels.push(splitLabel);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (explain>0? \r\n\t\t\t\t{classes: splitLabels, explanation: explanations}:\r\n\t\t\t\tsplitLabels);\r\n\t}","code-length":423,"reference":"Recursive internal subroutine of classify.\n","result":"Classify the sample recursively.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(opts) {\r\n\tif (!('binaryClassifierType' in opts)) {\r\n\t\tconsole.dir(opts);\r\n\t\tthrow new Error(\"opts must contain binaryClassifierType\");\r\n\t}\r\n\tif (!opts.binaryClassifierType) {\r\n\t\tconsole.dir(opts);\r\n\t\tthrow new Error(\"opts.binaryClassifierType is null\");\r\n\t}\r\n\tthis.binaryClassifierType = opts.binaryClassifierType;\r\n\tthis.classifier = new this.binaryClassifierType();\r\n\tswitch (opts.segmentSplitStrategy) {\r\n\tcase 'shortestSegment': this.segmentSplitStrategy = this.shortestSegmentSplitStrategy; break;\r\n\tcase 'longestSegment':  this.segmentSplitStrategy = this.longestSegmentSplitStrategy;  break;\r\n\tcase 'cheapestSegment':  this.segmentSplitStrategy = this.cheapestSegmentSplitStrategy;  break;\r\n\tdefault: this.segmentSplitStrategy = null;\r\n\t}\r\n\t\r\n\tthis.mapClassnameToClassifier = {};\r\n}","code-length":257,"reference":"BinarySegmentation - Multi-label text classifier, based on a segmentation scheme using base binary classifiers.\n\nInspired by:\n\nMorbini Fabrizio, Sagae Kenji. Joint Identification and Segmentation of Domain-Specific Dialogue Acts for Conversational Dialogue Systems. ACL-HLT 2011\nhttp:\/\/www.citeulike.org\/user\/erelsegal-halevi\/article\/10259046\n\n","result":"Create a new binary classifier.","score":[0.0007,0.0312]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(opts) {\r\n\tthis.retrain_count = opts.retrain_count || 10;\r\n\tthis.Constant = opts.Constant || 5.0;\r\n\tthis.weights = {\r\n\t\t\r\n\t};\r\n\tthis.weights_sum = {\r\n\t\t\r\n\t};\r\n\tthis.seenFeatures = {};\r\n\tthis.num_iterations = 0\r\n}","code-length":103,"reference":"Multilabel online classifier based on Perceptron and Passive-Aggressive.\n\nfeatures and categories are strings; samples are hashes.\n\nBased on Python code Copyright (c) 2013 Joseph Keshet.\n\nConversion to Node.js started by Erel Segal-haLevi, but not finished yet.\n\n","result":"Initialize the model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(classes) {\r\n\t\tclasses = hash.normalized(classes);\r\n\t\tfor (var aClass in classes) {\r\n\t\t\tif (!(aClass in this.weights)) {\r\n\t\t\t\tthis.weights[aClass]={};\r\n\t\t\t\tthis.weights_sum[aClass]={};\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":95,"reference":"Tell the classifier that the given classes will be used for the following\nsamples, so that it will know to add negative samples to classes that do\nnot appear.\n\n","result":"Calculate the weights.","score":[0.0001,0.0189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(opts) {\r\n\t\r\n\topts = opts || {};\r\n\tif (!opts.multilabelClassifierType) {\r\n\t\tconsole.dir(opts);\r\n\t\tthrow new Error(\"opts.multilabelClassifierType is null\");\r\n\t}\r\n\tif (!opts.numberofclassifiers) {\r\n\t\tconsole.dir(opts);\r\n\t\tthrow new Error(\"opts.numberofclassifiers is null\");\r\n\t}\r\n\t\r\n\tthis.classifier = this.intializeClassifiers(opts.numberofclassifiers, opts.multilabelClassifierType)\r\n}","code-length":151,"reference":"PartialClassification is a test classifier that learns and classifies the components\nof the labels separately according to the splitLabel routine. One of the examples could be\nclassifying intent, attribute, value separately by three different classifiers.\nWhen performing test by trainAndTest module, there is a check for toFormat routine, if it exists\nthen pretest format converting occurs.\n\n","result":"Initialize the classifier.","score":[0.0,0.0099]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(expected, actual) {\r\n\t\tthis.count++;\r\n\t\tif (expected && actual) this.TP++;\r\n\t\tif (!expected && actual) this.FP++;\r\n\t\tif (expected && !actual) this.FN++;\r\n\t\tif (!expected && !actual) this.TN++;\r\n\t\tif (expected==actual) this.TRUE++;\r\n\t}","code-length":107,"reference":"Record the result of a new binary experiment.\n\n","result":"Count the number of times the test is run.","score":[0.1449,0.1235]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expectedClasses, actualClasses ) {\r\n\t\tvar explanations = [];\r\n\t\tactualClasses = hash.normalized(actualClasses);\r\n\t\texpectedClasses = hash.normalized(expectedClasses);\r\n\t\tvar allTrue = true;\r\n\t\tif (!(Object.keys(expectedClasses)[0] in this.confusion)) \r\n\t\t\tthis.confusion[Object.keys(expectedClasses)[0]] = {}\r\n\t\tif (!(Object.keys(actualClasses)[0] in this.confusion[Object.keys(expectedClasses)[0]])) \r\n\t\t\tthis.confusion[Object.keys(expectedClasses)[0]][Object.keys(actualClasses)[0]] = 0\r\n\t\tthis.confusion[Object.keys(expectedClasses)[0]][Object.keys(actualClasses)[0]] += 1 \r\n\t\tfor (var actualClass in actualClasses) {\r\n\t\t\tif (!(actualClass in this.confusion)) \r\n\t\t\t\tthis.confusion[actualClass]={}\r\n\t\t\tif (!(actualClass in this.labels)) {\r\n\t\t\t\tthis.labels[actualClass]={}\r\n\t\t\t\tthis.labels[actualClass]['TP']=0\r\n\t\t\t\tthis.labels[actualClass]['FP']=0\r\n\t\t\t\tthis.labels[actualClass]['FN']=0\r\n\t\t\t\t}\r\n\t\t\tif (actualClass in expectedClasses) { \r\n\t\t\t\tthis.labels[actualClass]['TP'] += 1 \r\n\t\t\t} else {\r\n\t\t\t\tthis.labels[actualClass]['FP'] += 1\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var expectedClass in expectedClasses) {\r\n\t\t\tif (!(expectedClass in this.labels)) {\r\n\t\t\t\tthis.labels[expectedClass]={}\r\n\t\t\t\tthis.labels[expectedClass]['TP']=0\r\n\t\t\t\tthis.labels[expectedClass]['FP']=0\r\n\t\t\t\tthis.labels[expectedClass]['FN']=0\r\n\t\t\t\t}\r\n\t\t\tif (!(expectedClass in actualClasses)) {\r\n\t\t\t\tthis.labels[expectedClass]['FN'] += 1 \r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":514,"reference":"Record the result of a new classes experiment per labels.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expectedClasses, actualClasses, logTruePositives) {\r\n\t\tvar explanations = [];\r\n\t\tactualClasses = hash.normalized(actualClasses);\r\n\t\texpectedClasses = hash.normalized(expectedClasses);\r\n\t\tvar allTrue = true;\r\n\t\tfor (var actualClass in actualClasses) {\r\n\t\t\tif (actualClass in expectedClasses) { \r\n\t\t\t\tif (logTruePositives) explanations.push(\"\\t\\t+++ TRUE POSITIVE: \"+actualClass);\r\n\t\t\t\tthis.TP++;\r\n\t\t\t} else {\r\n\t\t\t\texplanations.push(\"\\t\\t--- FALSE POSITIVE: \"+actualClass);\r\n\t\t\t\tthis.FP++;\r\n\t\t\t\tallTrue = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var expectedClass in expectedClasses) {\r\n\t\t\tif (!(expectedClass in actualClasses)) {\r\n\t\t\t\texplanations.push(\"\\t\\t--- FALSE NEGATIVE: \"+expectedClass);\r\n\t\t\t\tthis.FN++;\r\n\t\t\t\tallTrue = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (allTrue) {\r\n\t\t\tif (logTruePositives) explanations.push(\"\\t\\t*** ALL TRUE!\");\r\n\t\t\tthis.TRUE++;\r\n\t\t}\r\n\t\tthis.count++;\r\n\t\treturn explanations;\r\n\t}","code-length":341,"reference":"Record the result of a new classes experiment.\n\n","result":"Calculate the error messages.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expectedClasses, actualClasses, logTruePositives ) {\r\n\t\tvar explanations = {};\r\n\t\texplanations['TP'] = []; explanations['FP'] = []; explanations['FN'] = [];\r\n\t\tactualClasses = hash.normalized(actualClasses);\r\n\t\texpectedClasses = hash.normalized(expectedClasses);\r\n\t\tvar allTrue = true;\r\n\t\tfor (var actualClass in actualClasses) {\r\n\t\t\tif (actualClass in expectedClasses) { \r\n\t\t\t\tif (logTruePositives) explanations['TP'].push(actualClass);\r\n\t\t\t\tthis.TP++;\r\n\t\t\t} else {\r\n\t\t\t\texplanations['FP'].push(actualClass);\r\n\t\t\t\tthis.FP++;\r\n\t\t\t\tallTrue = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (var expectedClass in expectedClasses) {\r\n\t\t\tif (!(expectedClass in actualClasses)) {\r\n\t\t\t\texplanations['FN'].push(expectedClass);\r\n\t\t\t\tthis.FN++;\r\n\t\t\t\tallTrue = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (allTrue) {\r\n\t\t\t\r\n\t\t\tthis.TRUE++;\r\n\t\t}\r\n\t\tthis.count++;\r\n\t\t_.each(explanations, function(value, key, list){ \r\n\t\t\t\r\n\t\t\texplanations[key].sort()\r\n\t\t}, this)\r\n\t\tif (explanations['FP'].length == 0)\r\n\t\t\tdelete explanations['FP']\r\n\t\tif (explanations['FN'].length == 0)\r\n\t\t\tdelete explanations['FN']\r\n\t\treturn explanations;\r\n\t}","code-length":426,"reference":"Record the result of a new classes experiment in a hash manner.\nDoesn't allowed to do a inner output, all stats are put in hash\n","result":"Calculate the accuracy.","score":[0.0003,0.0219]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(dataset) {\r\n\t\t\tif (this.debug) console.log(\"trainBatch start\");\r\n\t\t\tvar timestamp = new Date().getTime()+\"_\"+process.pid\r\n\t\t\tvar learnFile = svmcommon.writeDatasetToFile(dataset, this.bias, true, this.model_file_prefix+\"_\"+timestamp, \"SvmPerf\", FIRST_FEATURE_NUMBER);\r\n\t\t\tvar modelFile = learnFile.replace(\/[.]learn\/,\".model\");\r\n\t\t\tvar command = \"svm_perf_learn \"+this.learn_args+\" \"+learnFile + \" \"+modelFile;\r\n\t\t\tif (this.debug) console.log(\"running \"+command);\r\n\t\t\tconsole.log(command)\r\n\t\t\tvar result = execSync(command);\r\n\t\t\tif (result.code>0) {\r\n\t\t\t\tconsole.dir(result);\r\n\t\t\t\tconsole.log(fs.readFileSync(learnFile, 'utf-8'));\r\n\t\t\t\tthrow new Error(\"Failed to execute: \"+command);\r\n\t\t\t}\r\n\t\t\tthis.setModel(fs.readFileSync(modelFile, \"utf-8\"));\r\n\t\t\tif (this.debug) console.log(\"trainBatch end\");\r\n\t\t}","code-length":303,"reference":"Send the given dataset to svm_perf_learn.\n\n","result":"Train a batch of SVM models.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction modelStringToModelMap(modelString) {\r\n\tvar matches = SVM_PERF_MODEL_PATTERN.exec(modelString);\r\n\tif (!matches) {\r\n\t\tconsole.log(modelString);\r\n\t\tthrow new Error(\"Model does not match SVM-perf format\");\r\n\t};\r\n\t.split(\" \");\r\n\tvar mapFeatureToWeight = {};\r\n\tr featureAndWeight = featuresAndWeights[i];\r\n\t\tvar featureWeight = featureAndWeight.split(\":\");\r\n\t\tif (featureWeight.length!=2)\r\n\t\t\tthrow new Error(\"Model featureAndWeight doesn't match svm-perf pattern: featureAndWeight=\"+featureAndWeight);\r\n\t\tvar feature = parseInt(featureWeight[0]);\r\n\t\tif (feature<=0)\r\n\t\t\tthrow new IllegalArgumentException(\"Non-positive feature id: featureAndWeight=\"+featureAndWeight);\r\n\t\tvar weight = parseFloat(featureWeight[1]);\r\n\t\tif (Math.abs(weight)>=MIN_WEIGHT)\r\n\t\t\tmapFeatureToWeight[feature-FIRST_FEATURE_NUMBER]=weight;\r\n\t\t\t\r\n\t}\r\n\treturn mapFeatureToWeight;\r\n}","code-length":293,"reference":"weights smaller than this are ignored, to save space \nA utility that converts a model in the SVMPerf format to a map of feature weights.\n","result":"Convert model strings to model map.","score":[0.0097,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(dataset, relationName, featureLookupTable) {\r\n\tvar arff = \"% Automatically generated by Node.js\\n\";\r\n\tarff += \"@relation \"+relationName+\"\\n\";\r\n\tfeatureLookupTable.featureIndexToFeatureName.forEach(function(featureName) {\r\n\t\tif (_.isUndefined(featureName)) \r\n\t\t\tarff += \"@attribute undefined {0,1}\"+\"\\n\";\r\n\t\telse if (!_.isString(featureName))\r\n\t\t\tthrow new Error(\"Expected featureName to be a string, but found \"+JSON.stringify(featureName));\r\n\t\telse arff += \"@attribute \"+featureName.replace(\/[^a-zA-Z0-9]\/g, \"_\")+\" \"+\"{0,1}\"+\"\\n\";\r\n\t});\r\n\tarff += \"\\n@data\\n\";\r\n\t\r\n\tdataset.forEach(function(datum) {\r\n\t\tvar datumArff = _.clone(datum.input, {});\r\n\t\tfor (var i=0; i<datum.output.length; ++i)\r\n\t\t\tdatumArff[datum.output[i]]=1;\r\n\t\t\r\n\t\tvar array = featureLookupTable.hashToArray(datumArff);\r\n\t\tarff += array + \"\\n\";\r\n\t});\r\n\treturn arff;\r\n}","code-length":331,"reference":"convert a single dataset to Weka ARFF string.\n","result":"Generate the ARFF file.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SvmLinear(opts) {\r\n\tthis.learn_args = opts.learn_args || \"\";\r\n\tthis.model_file_prefix = opts.model_file_prefix || null;\r\n\tthis.bias = opts.bias || 1.0;\r\n\tthis.multiclass = opts.multiclass || false;\r\n\tthis.debug = opts.debug||false;\r\n\tthis.train_command = opts.train_command || 'liblinear_train';\r\n\tthis.test_command = opts.test_command || 'liblinear_test';\r\n\tthis.timestamp = \"\"\r\n\tif (!SvmLinear.isInstalled()) {\r\n                var msg = \"Cannot find the executable 'liblinear_train'. Please download it from the LibLinear website, and put a link to it in your path.\";\r\n                console.error(msg)\r\n                throw new Error(msg);\r\n  }\r\n}","code-length":225,"reference":"in lib linear, feature numbers start with 1","result":"Train the model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(dataset) {\r\n\t\t\tthis.timestamp = new Date().getTime()+\"_\"+process.pid\r\n\t\t\t\r\n\t\t\t_.each(dataset, function(datum, key, list){\r\n\t\t\t\tif (_.isArray(datum.output))\r\n\t\t\t\t\tif (datum.output.length > 1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.log(\"Multi-label is not allowed\")\r\n\t\t\t\t\t\tconsole.log(JSON.stringify(darum.output, null, 4))\r\n\t\t\t\t\t\tprocess.exit(0)\r\n\t\t\t\t\t}\r\n            }, this)\r\n\t\t\tdataset = _.map(dataset, function(datum){\r\n\t\t\t\tif (_.isArray(datum.output))\r\n\t\t\t\t\tdatum.output = datum.output[0]\r\n\t\t\t\treturn datum });\r\n\t\t\tthis.allLabels = _(dataset).map(function(datum){return datum.output});\r\n\t\t\tthis.allLabels = _.uniq(_.flatten(this.allLabels))\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (this.allLabels.length==1)\r\n\t\t\t\treturn;\r\n\t\t\t\r\n\t\t\tif (this.debug) console.log(\"trainBatch start\");\r\n\t\t\tvar learnFile = svmcommon.writeDatasetToFile(\r\n\t\t\t\t\tdataset, this.bias, false, this.model_file_prefix+\"_\"+this.timestamp, \"SvmLinear\", FIRST_FEATURE_NUMBER);\r\n\t\t\tvar modelFile = learnFile.replace(\/[.]learn\/,\".model\");\r\n\t\t\tvar command = this.train_command+\" \"+this.learn_args+\" \"+learnFile + \" \"+modelFile;\r\n\t\t\tconsole.log(\"running \"+command);\r\n\t\t\tvar result = child_process.execSync(command);\r\n\t\t\tif (result.code>0) {\r\n\t\t\t\tconsole.dir(result);\r\n\t\t\t\tconsole.log(fs.readFileSync(learnFile, 'utf-8'));\r\n\t\t\t\tthrow new Error(\"Failed to execute: \"+command);\r\n\t\t\t}\r\n\t\t\tthis.modelFileString = modelFile;\r\n\t\t\tif (this.debug) console.log(\"trainBatch end\");\r\n\t\t}","code-length":531,"reference":"Send the given dataset to liblinear_train.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction modelStringToModelMap(modelString) {\r\n\tvar matches = LIB_LINEAR_MODEL_PATTERN.exec(modelString);\r\n\tif (!matches) {\r\n\t\tconsole.log(modelString);\r\n\t\tthrow new Error(\"Model does not match SVM-Linear format\");\r\n\t};\r\n\tvar labels = matches[1].split(\/\\s+\/);\r\n\tvar mapLabelToMapFeatureToWeight = {};\r\n\tfor (var iLabel in labels) {\r\n\t\tvar label = labels[iLabel];\r\n\t\tmapLabelToMapFeatureToWeight[label]={};\r\n\t}\r\n\tvar weightsMatrix = matches[3];\r\n\t\r\n\tvar weightsLines = weightsMatrix.split(NEWLINE);\r\n\tfor (var feature in weightsLines) {\r\n\t\tvar weights = weightsLines[feature].split(\/\\s+\/);\r\n\t\tweights.pop();\r\n\t\tif (weights.length==0)\r\n\t\t\tcontinue;\r\n\t\tif (weights.length==1 && labels.length==2)\r\n\t\t\tweights[1] = -weights[0];\r\n\t\tif (weights.length!=labels.length)\r\n\t\t\tthrow new Error(\"Model does not match SVM-Linear format: there are \"+labels.length+\" labels (\"+labels+\") and \"+weights.length+\" weights (\"+weights+\")\");\r\n\t\tfor (var iLabel in labels) {\r\n\t\t\tvar label = labels[iLabel];\r\n\t\t\tvar weight = parseFloat(weights[iLabel]);\r\n\t\t\tif (Math.abs(weight)>=MIN_WEIGHT)\r\n\t\t\t\tmapLabelToMapFeatureToWeight[label][feature]=weight;\r\n\t\t}\r\n\t}\r\n\treturn mapLabelToMapFeatureToWeight;\r\n}","code-length":426,"reference":"weights smaller than this are ignored, to save space \nA utility that converts a model in the SvmLinear format to a matrix of feature weights per label.\n","result":"Convert the model string to a model map.","score":[0.024,0.1482]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sample, labels) {\r\n\t\tlabels = multilabelutils.normalizeOutputLabels(labels);\r\n\t\tfor (var l in labels) {\r\n\t\t\tvar positiveLabel = labels[l];\r\n\t\t\tthis.makeSureClassifierExists(positiveLabel);\r\n\t\t\tthis.mapClassnameToClassifier[positiveLabel].trainOnline(sample, 1);\r\n\t\t}\r\n\t\tfor (var negativeLabel in this.mapClassnameToClassifier) {\r\n\t\t\tif (labels.indexOf(negativeLabel)<0)\r\n\t\t\t\tthis.mapClassnameToClassifier[negativeLabel].trainOnline(sample, 0);\r\n\t\t}\r\n\t}","code-length":162,"reference":"Tell the classifier that the given sample belongs to the given labels.\n\n","result":"Train a classifier .","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(opts) {\r\n\tif (!opts.multiclassClassifierType) {\r\n\t\tconsole.dir(opts);\r\n\t\tthrow new Error(\"opts.multiclassClassifierType not found\");\r\n\t}\r\n\tthis.multiclassClassifierType = opts.multiclassClassifierType;\r\n\tthis.featureExtractor = FeaturesUnit.normalize(opts.featureExtractor);\r\n\t\r\n\tthis.multiclassClassifier = new this.multiclassClassifierType();\r\n}","code-length":122,"reference":"MulticlassSegmentation - Multi-label text classifier, based on a segmentation scheme using a base multi-class classifier.\n\nInspired by:\n\nMorbini Fabrizio, Sagae Kenji. Joint Identification and Segmentation of Domain-Specific Dialogue Acts for Conversational Dialogue Systems. ACL-HLT 2011\nhttp:\/\/www.citeulike.org\/user\/erelsegal-halevi\/article\/10259046\n\n","result":"Create a new classifier.","score":[0.0001,0.0305]}
{"code":"\/*is used to<extra_id_0>\r\nfunction concatOptionDataArrays(options, data, prop) {\r\n    if (!_.has(options, prop) && !_.has(data, prop)) {\r\n        return;\r\n    }\r\n    var combined = [];\r\n    if (_.isArray(options[prop])) {\r\n        combined = combined.concat(options[prop]);\r\n    }\r\n    if (_.isArray(data[prop])) {\r\n        combined = combined.concat(data[prop]);\r\n    }\r\n    options[prop] = combined;\r\n}","code-length":136,"reference":"Sets the `prop` property on options to the concatenation of that property from both options and data, if both exist.  Otherwise, if either exist exclusively, that array will be set to the options.  When neither exist, nothing is done to the options object.","result":"Concat option data arrays.","score":[0,0.0128]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preorder(node, nodeIndex, parent) {\r\n    var children\r\n    var length\r\n    var index\r\n    var position\r\n    var child\r\n    if (is(test, node, nodeIndex, parent)) {\r\n      return null\r\n    }\r\n    children = node.children\r\n    if (!children || children.length === 0) {\r\n      return node\r\n    }\r\n    position = 0\r\n    length = children.length\r\n    index = -1\r\n    while (++index < length) {\r\n      child = preorder(children[index], index, node)\r\n      if (child) {\r\n        children[position++] = child\r\n      }\r\n    }\r\n    if (cascade && position === 0) {\r\n      return null\r\n    }\r\n    children.length = position\r\n    return node\r\n  }","code-length":213,"reference":"Check and remove nodes recursively in preorder. For each composite node, modify its children array in-place.","result":"Build a tree preorder.","score":[0.0159,0.0338]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filterRelations(relation) {\r\n    var mappedData = includedData.find(function (inc) {\r\n      return inc.id === relation.id;\r\n    });\r\n    var RelationModel = getModel(relation.type);\r\n    var modeledData = new RelationModel(mappedData);\r\n    return checkForRelations(modeledData, modeledData.data);\r\n  }","code-length":98,"reference":"Filters models so they are formatted correctly.","result":"Filter relations.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (bundleName, filter) {\r\n        var bundle,\r\n            files = [];\r\n        bundle = this._bundles[bundleName];\r\n        if (!bundle) {\r\n            throw new Error('Unknown bundle \"' + bundleName + '\"');\r\n        }\r\n        Object.keys(bundle.files).forEach(function (fullpath) {\r\n            var res = {\r\n                    ext: libpath.extname(fullpath).substr(1)\r\n                };\r\n            if (this._filterResource(res, filter)) {\r\n                files.push(fullpath);\r\n            }\r\n        }, this);\r\n        return files;\r\n    }","code-length":164,"reference":"Utility method for listing all files in a bundle.\n","result":"Filter resources.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (bundleName, filter) {\r\n        var bundle = this._bundles[bundleName];\r\n        if (!bundle) {\r\n            throw new Error('Unknown bundle \"' + bundleName + '\"');\r\n        }\r\n        return this._walkBundleResources(bundle, filter);\r\n    }","code-length":75,"reference":"Utility method for listing all resources in a bundle.\n","result":"Walk bundle resources.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (filter) {\r\n        var self = this,\r\n            ress = [];\r\n        Object.keys(this._bundles).forEach(function (bundleName) {\r\n            var bundle = self._bundles[bundleName];\r\n            self._walkBundleResources(bundle, filter).forEach(function (res) {\r\n                ress.push(res);\r\n            });\r\n        });\r\n        return ress;\r\n    }","code-length":113,"reference":"Returns a list of resources in all the bundles.\n","result":"Filter bundle resources.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (filter) {\r\n        var bundleName,\r\n            bundles = this._bundles,\r\n            bundleNames = [];\r\n        if ('function' !== typeof filter) {\r\n            return Object.keys(this._bundles);\r\n        }\r\n        for (bundleName in bundles) {\r\n            if (bundles.hasOwnProperty(bundleName)) {\r\n                if (filter(bundles[bundleName])) {\r\n                    bundleNames.push(bundleName);\r\n                }\r\n            }\r\n        }\r\n        return bundleNames;\r\n    }","code-length":137,"reference":"Returns a list of all located bundle names.\nThe names are not ordered.\n","result":"Return bundle names only .","score":[0.0577,0.123]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (findPath) {\r\n        var found = {},\r\n            longest;\r\n        findPath = libfs.realpathSync(findPath);\r\n        Object.keys(this._bundlePaths).forEach(function (bundlePath) {\r\n            if (0 === findPath.indexOf(bundlePath) &&\r\n                    (findPath.length === bundlePath.length ||\r\n                    libpath.sep === findPath.charAt(bundlePath.length))) {\r\n                found[bundlePath.length] = bundlePath;\r\n            }\r\n        });\r\n        longest = Math.max.apply(Math, Object.keys(found));\r\n        return this._bundlePaths[found[longest]];\r\n    }","code-length":174,"reference":"Returns the name of the bundle to which the path belongs.\n","result":"Find the bundle path.","score":[0.0785,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (baseDirectory, name, version, pkg, options) {\r\n        var seed;\r\n        seed = {\r\n            baseDirectory: baseDirectory,\r\n            name: name,\r\n            version: version\r\n        };\r\n        if (pkg) {\r\n            seed.name = (pkg.locator && pkg.locator.name ? pkg.locator.name : pkg.name);\r\n            seed.version = pkg.version;\r\n            seed.options = pkg.locator;\r\n            seed.pkg = pkg;\r\n        }\r\n        if (options) {\r\n            if (seed.options) {\r\n                mix(seed.options, options);\r\n            } else {\r\n                seed.options = options;\r\n            }\r\n        }\r\n        return seed;\r\n    }","code-length":195,"reference":"Creates the seed of a potential bundle.\n\nThe seed includes:\n<dl>\n<dt> baseDirectory {string} <\/dt>\n<dd> The directory of the bundle. <\/dd>\n<dt> name {string} <\/dt>\n<dd> The name of the bundle. <\/dd>\n<dt> version {string} <\/dt>\n<dd> The version of the bundle. <\/dd>\n<dt> npmDepth {integer} <\/dt>\n<dd> The depth in the NPM package dependency tree. <\/dd>\n<dt> options {object} <\/dt>\n<dd> Options for the bundle, taken in part from the `\"locator\"` section of `package.json` <\/dd>\n<\/dl>\n","result":"Create a seed object.","score":[0.0,0.0212]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (seed, parent) {\r\n        var bundle,\r\n            ruleset = this._loadRuleset(seed),\r\n            msg;\r\n        if (seed.options.location) {\r\n            seed.baseDirectory = libpath.resolve(seed.baseDirectory, seed.options.location);\r\n        }\r\n        if (!ruleset) {\r\n            msg = 'Bundle \"' + seed.name + '\" has unknown ruleset ' + JSON.stringify(seed.options.ruleset);\r\n            if (seed.options.rulesets) {\r\n                msg += ' in rulesets ' + JSON.stringify(seed.options.rulesets);\r\n            }\r\n            throw new Error(msg);\r\n        }\r\n        bundle = new Bundle(seed.baseDirectory, seed.options);\r\n        bundle.name = seed.name;\r\n        bundle.version = seed.version;\r\n        bundle.type = ruleset._name;\r\n        this._bundles[bundle.name] = bundle;\r\n        this._bundlePaths[libfs.realpathSync(bundle.baseDirectory)] = bundle.name;\r\n        if (parent) {\r\n            if (!parent.bundles) {\r\n                parent.bundles = {};\r\n            }\r\n            parent.bundles[bundle.name] = bundle;\r\n        }\r\n        return bundle;\r\n    }","code-length":319,"reference":"Makes a bundle out of a directory.\n","result":"Create a bundle.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (fullPath) {\r\n        var bundleName,\r\n            bundle,\r\n            ruleset,\r\n            relativePath,\r\n            pathParts,\r\n            subBundleSeed,\r\n            res;\r\n        bundleName = this._getBundleNameByPath(fullPath);\r\n        bundle = this._bundles[bundleName];\r\n        if (bundle.baseDirectory === fullPath.substr(0, bundle.baseDirectory.length)) {\r\n            relativePath = fullPath.substr(bundle.baseDirectory.length + 1);\r\n        }\r\n        if (relativePath.indexOf('node_modules') === 0) {\r\n            pathParts = relativePath.split(libpath.sep);\r\n            while (pathParts[0] === 'node_modules' && pathParts.length >= 2) {\r\n                pathParts.shift();\r\n                bundleName = pathParts.shift();\r\n            }\r\n            relativePath = pathParts.join(libpath.sep);\r\n            bundle = this._bundles[bundleName];\r\n            if (!relativePath) {\r\n                return;\r\n            }\r\n            if (!bundle) {\r\n                return;\r\n            }\r\n        }\r\n        ruleset = this._loadRuleset(bundle);\r\n        if (ruleset._skip && this._ruleSkip(fullPath, relativePath, ruleset._skip)) {\r\n            return;\r\n        }\r\n        if (ruleset._bundles) {\r\n            subBundleSeed = this._ruleBundles(fullPath, relativePath, ruleset._bundles, bundle);\r\n            if (subBundleSeed) {\r\n                if (!subBundleSeed.options) {\r\n                    subBundleSeed.options = {};\r\n                }\r\n                if (!subBundleSeed.options.rulesets) {\r\n                    subBundleSeed.options.rulesets = bundle.options.rulesets;\r\n                }\r\n                this._makeBundle(subBundleSeed, bundle);\r\n                return;\r\n            }\r\n        }\r\n        res = {\r\n            bundleName: bundleName,\r\n            fullPath: fullPath,\r\n            relativePath: relativePath,\r\n            ext: libpath.extname(fullPath).substr(1)\r\n        };\r\n        this._onFile(res, ruleset);\r\n    }","code-length":516,"reference":"Turns the path into a resource in the associated bundle, if applicable.\n","result":"Code too long,keep in 512.","score":[0.0593,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (fullPath, relativePath, rule) {\r\n        var r, regex;\r\n        relativePath = BundleLocator._toUnixPath(relativePath);\r\n        for (r = 0; r < rule.length; r += 1) {\r\n            regex = rule[r];\r\n            if (regex.test(relativePath)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","code-length":108,"reference":"Processes the \"_skip\" rule to decide if the path should be skipped.\n","result":"Detect if a bundle is located in a bundle.","score":[0.0873,0.0855]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (res, ruleset) {\r\n        var bundle = this._bundles[res.bundleName],\r\n            ruleName,\r\n            rule,\r\n            relativePath = BundleLocator._toUnixPath(res.relativePath),\r\n            match;\r\n        bundle.files[res.fullPath] = true;\r\n        for (ruleName in ruleset) {\r\n            if (ruleset.hasOwnProperty(ruleName)) {\r\n                if ('_' !== ruleName.charAt(0)) {\r\n                    rule = ruleset[ruleName];\r\n                    match = relativePath.match(rule.regex);\r\n                    if (match) {\r\n                        res.name = match[rule.nameKey || 1];\r\n                        res.type = ruleName;\r\n                        if (rule.subtypeKey) {\r\n                            res.subtype = match[rule.subtypeKey] || '';\r\n                        }\r\n                        if (rule.selectorKey && match[rule.selectorKey]) {\r\n                            res.selector = match[rule.selectorKey];\r\n                        } else {\r\n                            res.selector = DEFAULT_SELECTOR;\r\n                        }\r\n                        return this._onResource(res);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }","code-length":291,"reference":"Handles the file.\n","result":"Detect resource types.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (res) {\r\n        var bundle = this._bundles[res.bundleName],\r\n            type = res.type,\r\n            subtype,\r\n            selector = res.selector,\r\n            name = res.name;\r\n        if (!bundle.resources[selector]) {\r\n            bundle.resources[selector] = {};\r\n        }\r\n        if (!bundle.resources[selector][type]) {\r\n            bundle.resources[selector][type] = {};\r\n        }\r\n        if (res.hasOwnProperty('subtype')) {\r\n            subtype = res.subtype;\r\n            if (!bundle.resources[selector][type][subtype]) {\r\n                bundle.resources[selector][type][subtype] = {};\r\n            }\r\n            bundle.resources[selector][type][subtype][name] = res;\r\n        } else {\r\n            bundle.resources[selector][type][name] = res;\r\n        }\r\n    }","code-length":227,"reference":"Handles the resource.\n","result":"Store the resource in the bundle.","score":[0.193,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (res, filter) {\r\n        if (!filter || Object.keys(filter).length === 0) {\r\n            return true;\r\n        }\r\n        var prop;\r\n        for (prop in filter) {\r\n            if ('extensions' === prop) {\r\n                if ('string' === typeof filter.extensions) {\r\n                    filter.extensions = filter.extensions.split(',');\r\n                }\r\n                if (!filter.extensions || filter.extensions.indexOf(res.ext) === -1) {\r\n                    return false;\r\n                }\r\n            } else if ('types' === prop) {\r\n                if ('string' === typeof filter.types) {\r\n                    filter.types = filter.types.split(',');\r\n                }\r\n                if (!filter.types || filter.types.indexOf(res.type) === -1) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }","code-length":248,"reference":"Determines whether a resource is filtered or not.\n","result":"Test if a resource is in the filter.","score":[0.2861,0.3681]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (pkgDepths) {\r\n        var depths,\r\n            minDepth,\r\n            maxDepth,\r\n            seeds;\r\n        depths = Object.keys(pkgDepths);\r\n        minDepth = Math.min.apply(Math, depths);\r\n        maxDepth = Math.max.apply(Math, depths);\r\n        seeds = pkgDepths[minDepth];\r\n        if (1 === seeds.length) {\r\n            if (minDepth !== maxDepth) {\r\n                debug('multiple \"' + seeds[0].name + '\" packages found, using version ' +\r\n                    seeds[0].version + ' from ' + seeds[0].baseDirectory);\r\n            }\r\n            return seeds[0];\r\n        }\r\n        seeds.sort(function (a, b) {\r\n            return libsemver.rcompare(a.version, b.version);\r\n        });\r\n        debug('multiple \"' + seeds[0].name + '\" packages found, using version ' +\r\n            seeds[0].version + ' from ' + seeds[0].baseDirectory);\r\n        return seeds[0];\r\n    }","code-length":266,"reference":"Figures out which seed to use from the list of available packages.\nSelect by depth, then by semver.\n","result":"Generate the package tree.","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (all) {\r\n        var byDepth = {};\r\n        all.forEach(function (seed) {\r\n            if (!byDepth[seed.name]) {\r\n                byDepth[seed.name] = {};\r\n            }\r\n            if (!byDepth[seed.name][seed.npmDepth]) {\r\n                byDepth[seed.name][seed.npmDepth] = [];\r\n            }\r\n            byDepth[seed.name][seed.npmDepth].push(seed);\r\n        });\r\n        return Object.keys(byDepth).map(function (name) {\r\n            return this._dedupeSeeds(byDepth[name]);\r\n        }, this);\r\n    }","code-length":174,"reference":"Figures out which bundles to use from the list.\nThe returned list is sorted first by NPM package depth then by name.\n","result":"Dedupe seeds.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (bundleSeed) {\r\n        var self = this,\r\n            parentName,\r\n            parent,\r\n            bundle,\r\n            filters;\r\n        parentName = this._getBundleNameByPath(libpath.dirname(bundleSeed.baseDirectory));\r\n        parent = this._bundles[parentName];\r\n        bundle = this._makeBundle(bundleSeed, parent);\r\n        this._bundles[bundle.name] = bundle;\r\n        filters = this._options.exclude.concat(['node_modules', \/^\\.\/]);\r\n        this._processFile(bundle.baseDirectory);\r\n        walk.walkSync(bundle.baseDirectory, {\r\n            filters: [],\r\n            listeners: {\r\n                directories: function (root, dirStatsArray, next) {\r\n                    var i, dirStats, exclude;\r\n                    function filterDir(filter) {\r\n                        if (dirStats.name.match(filter)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    for (i = dirStatsArray.length - 1; i >= 0; i -= 1) {\r\n                        dirStats = dirStatsArray[i];\r\n                        exclude = filters.some(filterDir);\r\n                        if (exclude) {\r\n                            dirStatsArray.splice(i, 1);\r\n                        } else {\r\n                            self._processFile(libpath.join(root, dirStats.name));\r\n                        }\r\n                    }\r\n                    next();\r\n                },\r\n                file: function(root, fileStats, next) {\r\n                    self._processFile(libpath.join(root, fileStats.name));\r\n                    next();\r\n                },\r\n                errors: function(root, nodeStatsArray, next) {\r\n                    next();\r\n                }\r\n            }\r\n        });\r\n        return bundle;\r\n    }","code-length":435,"reference":"Creates a bundle from an NPM package, and queues up files in the package.\n","result":"Generate the bundle seed.","score":[0.0312,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (srcObject, excludeKeys) {\r\n        var destObject = {},\r\n            key;\r\n        for (key in srcObject) {\r\n            if (srcObject.hasOwnProperty(key)) {\r\n                if (-1 === excludeKeys.indexOf(key)) {\r\n                    destObject[key] = srcObject[key];\r\n                }\r\n            }\r\n        }\r\n        return destObject;\r\n    }","code-length":108,"reference":"Creates a new object with the certain keys excluded.\nThis is used instead of \"delete\" since that has performance implications in V8.\n","result":"Copy object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Bundle(baseDirectory, options) {\r\n    this.options = options || {};\r\n    this.name = libpath.basename(baseDirectory);\r\n    this.baseDirectory = baseDirectory;\r\n    this.type = undefined;\r\n    this.files = {};\r\n    this.resources = {};\r\n}","code-length":85,"reference":"The Locator walks the filesystem and gives semantic meaning to\nfiles in the application.\n","result":"Create a bundle.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBaseScales(type, domain, range, nice, tickCount) {\r\n  const factory = (type === 'time' && scaleUtc) || (type === 'log' && scaleLog) || scaleLinear\r\n  const scale = createScale(factory, domain, range)\r\n  if (nice) scale.nice(tickCount)\r\n  return scale\r\n}","code-length":96,"reference":"get a scale with logic for the x and y axis, if the domain starts and finishes on the same number returns the mid range value","result":"Create the scale.","score":[0.0002,0.0211]}
{"code":"\/*is used to<extra_id_0>\r\nfunction BufferingTracer(tracer, options) {\r\n  options = options || {};\r\n  var self = this;\r\n  this._tracer = tracer;\r\n  this._maxTraces = options.maxTraces || 50;\r\n  this._sendInterval = options.sendInterval ? (options.sendInterval * 1000) : 10 * 1000;\r\n  this._lastSentTs = Date.now();\r\n  this._buffer = [];\r\n  this._stopped = false;\r\n  this._periodSendTimeoutId = setTimeout(this._periodicSendFunction.bind(this),\r\n                                         this._sendInterval);\r\n}","code-length":153,"reference":"Buffer traces and defer recording until maxTraces have been received or\nsendInterval has elapsed since the last trace was recorded.\n\n","result":"Send traces to the tracer.","score":[0.0142,0.0541]}
{"code":"\/*is used to<extra_id_0>\r\nfunction build(gulp) {\r\n        fs.readFileSync('gulpfile.ts').toString() :\r\n        OPTIONS.gulpfile ?\r\n            fs.readFileSync(OPTIONS.gulpfile).toString() :\r\n        Object.keys(require.cache || {'gulpfile.js': ''}).map(function(file) {\r\n            if (!\/node_modules|\\.json$\/.test(file)) {\r\n                return fs.readFileSync(file).toString() + '\\n';\r\n            }\r\n        }).join('');\r\n    var rxDoc = '\\\\\/\\\\*\\\\*\\\\r?\\n(((?!\\\\*\\\\\/)[\\\\s\\\\S])*?)' +\r\n        '@task\\\\s+\\\\{(.*)?\\\\}((?!\\\\*\\\\\/)[\\\\s\\\\S])*?\\\\*\\\\\/';\r\n    var rxArgs = '@arg\\\\s+\\\\{(.*?)\\\\}(.*?)\\\\r?\\\\n';\r\n    var rxOrder = '@order\\\\s+\\\\{(\\\\d+)\\\\}(.*?)\\\\r?\\\\n';\r\n    var rxGroup = '@group\\\\s+\\\\{(.*?)\\\\}(.*?)\\\\r?\\\\n';\r\n    var globalRxDoc = new RegExp(rxDoc, 'g');\r\n    var localRxDoc = new RegExp(rxDoc);\r\n    var globalRxArgs = new RegExp(rxArgs, 'g');\r\n    var localRxArgs = new RegExp(rxArgs);\r\n    var globalRxOrder = new RegExp(rxOrder, 'g');\r\n    var localRxOrder = new RegExp(rxOrder);\r\n    var globalRxGroup = new RegExp(rxGroup, 'g');\r\n    var localRxGroup = new RegExp(rxGroup);\r\n    var jsDoc  = (source.match(globalRxDoc) || []);\r\n    var tasks = gulpTasks(gulp);\r\n    Object.keys(tasks).forEach(function (task) {\r\n        reflection[task] = {\r\n            name: tasks[task].name,\r\n            desc: '',\r\n            dep: tasks[task].dep\r\n        };\r\n    });\r\n    jsDoc.map(function (block) {\r\n        var parts = block.match(localRxDoc);\r\n        var name = parts[3].trim();\r\n        var desc = parts[1].replace(\/\\s*\\*\/g, ' ')\r\n            .replace(\/\\s{2,}\/g, ' ')\r\n            .trim();\r\n        if (!reflection[name]) {\r\n            return;\r\n        }\r\n        reflection[name].desc = desc;\r\n        reflection[name].public = true;\r\n        reflection[name].args = (block.match(globalRxArgs) || [])\r\n            .map(function (def) {\r\n                var argsParts = def.match(localRxArgs);\r\n                return {\r\n                    name: argsParts[1],\r\n                    desc: argsParts[2].replace(\/\\s*\\*\/g, ' ')\r\n                        .replace(\/\\s{2,}\/g, ' ')\r\n                        .trim()\r\n                };\r\n            });\r\n        reflection[name].order = (function () {\r\n            var orderParts = block.match(globalRxOrder);\r\n            if (orderParts) {\r\n                return +orderParts[0].match(localRxOrder)[1];\r\n            }\r\n            return Number.MAX_SAFE_INTEGER;\r\n        })();\r\n        reflection[name].group = (function () {\r\n            var groupParts = block.match(globalRxGroup);\r\n            if (groupParts) {\r\n                return groupParts[0].match(localRxGroup)[1];\r\n            }\r\n            return OPTIONS.defaultGroupName;\r\n        })();\r\n    });\r\n    var tmp = {};\r\n    Object.keys(reflection).forEach(function(task) {\r\n        var group = reflection[task].group || OPTIONS.defaultGroupName;\r\n        tmp[group] = tmp[group] || {};\r\n        tmp[group][task] = reflection[task];\r\n    });\r\n    reflection = tmp;\r\n}","code-length":969,"reference":"Analyzes given gulp instance and build internal cache\nfor further printing\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction chunk(str, maxLen) {\r\n    var len  = maxLen || OPTIONS.lineWidth;\r\n    var curr = len;\r\n    var prev = 0;\r\n    var out  = [];\r\n    while (str[curr]) {\r\n        if (str[curr++] == ' ') {\r\n            out.push(str.substring(prev, curr));\r\n            prev = curr;\r\n            curr += len;\r\n        }\r\n    }\r\n    out.push(str.substr(prev));\r\n    return out;\r\n}","code-length":139,"reference":"Chunks given string into pieces making each chunk less or equal to\nOPTIONS.lineWidth, taking into account safe word-break\n\n","result":"Split strings into chunks.","score":[0.0096,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction usage(gulp, options) {\r\n    if (options) {\r\n        Object.assign(OPTIONS, options);\r\n    }\r\n    return new Promise(function(resolve) {\r\n        build(gulp);\r\n        print();\r\n        resolve();\r\n    });\r\n}","code-length":78,"reference":"Prints usage help information for the given gulp\ninstance.\nUsually it is used as a task within gulpfile.js in your project\nPlease make sure all your comments are properly annotated\n\n","result":"Is used to help.","score":[0.0005,0.0684]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filterArray (arr, toKeep) {\r\n  var i = 0\r\n  while (i < arr.length) {\r\n    if (toKeep(arr[i])) {\r\n      i++\r\n    } else {\r\n      arr.splice(i, 1)\r\n    }\r\n  }\r\n}","code-length":84,"reference":"a filter implementation that mutates the original array","result":"Filter arrays.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cssExtract (bundle, opts) {\r\n  opts = opts || {}\r\n  var outFile = opts.out || opts.o || 'bundle.css'\r\n  var sourceMap = d(opts.sourceMap, bundle && bundle._options && bundle._options.debug, false)\r\n  assert.equal(typeof bundle, 'object', 'bundle should be an object')\r\n  assert.equal(typeof opts, 'object', 'opts should be an object')\r\n  bundle.on('reset', addHooks)\r\n  addHooks()\r\n  function addHooks () {\r\n    const extractStream = through.obj(write, flush)\r\n    const writeStream = (typeof outFile === 'function')\r\n      ? outFile()\r\n      : bl(writeComplete)\r\n    bundle.pipeline.get('label').unshift(extractStream)\r\n    function write (chunk, enc, cb) {\r\n      if (!\/(insert-css|sheetify\\\/insert)\/.test(chunk.source)) {\r\n        return cb(null, chunk)\r\n      }\r\n      var source = from2(chunk.source)\r\n      var sm = staticModule({\r\n        'insert-css': function (src) {\r\n          writeStream.write(String(src) + '\\n')\r\n          return from2('null')\r\n        },\r\n        'sheetify\/insert': function (src) {\r\n          writeStream.write(String(src) + '\\n')\r\n          return from2('null')\r\n        }\r\n      }, { sourceMap: sourceMap })\r\n      source.pipe(sm).pipe(bl(complete))\r\n      function complete (err, source) {\r\n        if (err) return extractStream.emit('error', err)\r\n        chunk.source = String(source)\r\n        cb(null, chunk)\r\n      }\r\n    }\r\n    function flush (cb) {\r\n      writeStream.end()\r\n      cb()\r\n    }\r\n    function writeComplete (err, buffer) {\r\n      if (err) return extractStream.emit('error', err)\r\n      fs.writeFileSync(outFile, buffer)\r\n    }\r\n  }\r\n}","code-length":517,"reference":"Extract CSS from a browserify bundle obj -> null","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validatePlaceholders(\r\n  { id, idPlural, translations },\r\n  validationErrors\r\n) {\r\n  let pattern = \/{{\\s*(\\S+?)\\s*?}}\/g;\r\n  let placeholders = id.match(pattern) || [];\r\n  if (idPlural) {\r\n    let pluralPlaceholders = idPlural.match(pattern) || [];\r\n    pluralPlaceholders.forEach((placeholder) => {\r\n      if (!placeholders.includes(placeholder)) {\r\n        placeholders.push(placeholder);\r\n      }\r\n    });\r\n  }\r\n  if (!placeholders.length) {\r\n    return;\r\n  }\r\n  translations.forEach((translation) => {\r\n    let translatedPlaceholders = translation.match(pattern) || [];\r\n    let invalidPlaceholder = translatedPlaceholders.find(\r\n      (placeholder) => !placeholders.includes(placeholder)\r\n    );\r\n    if (invalidPlaceholder) {\r\n      validationErrors.push({\r\n        id,\r\n        translation,\r\n        message: `The placeholder \"${invalidPlaceholder}\" seems to be wrongly translated. Allowed: ${placeholders.join(\r\n          ', '\r\n        )}`,\r\n        level: 'ERROR'\r\n      });\r\n    }\r\n  });\r\n}","code-length":303,"reference":"Validate the regular placeholders of an item.\nThis possibly modifies the given validationErrors.\n\n","result":"Return validationErrors.","score":[0.002,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction groupGettextItems(gettextItems) {\r\n  return gettextItems\r\n    .filter((item) => item.messageId)\r\n    .sort((item1, item2) => {\r\n      return (\r\n        item1.loc.fileName.localeCompare(item2.loc.fileName) ||\r\n        item1.loc.line - item2.loc.line\r\n      );\r\n    })\r\n    .reduce((allGroups, item) => {\r\n      let group = allGroups.find((group) => {\r\n        return (\r\n          group.messageId === item.messageId &&\r\n          group.messageContext === item.messageContext\r\n        );\r\n      });\r\n      if (group) {\r\n        group.locs.push(item.loc);\r\n        if (!group.messageIdPlural && item.messageIdPlural) {\r\n          group.messageIdPlural = item.messageIdPlural;\r\n        }\r\n      } else {\r\n        group = Object.assign({}, item);\r\n        group.locs = [item.loc];\r\n        delete group.loc;\r\n        allGroups.push(group);\r\n      }\r\n      return allGroups;\r\n    }, []);\r\n}","code-length":296,"reference":"Group equal entries together The generated groups look like the given gettextItems, only that they have `locs` instead of `loc` Where `locs` is an array of `loc` entries, having a `fileName`, `line` and `column`.","result":"GroupGettextItems.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction traverseJson(json, callback) {\r\n  let { translations } = json;\r\n  Object.keys(translations).forEach((namespace) => {\r\n    Object.keys(translations[namespace]).forEach((k) => {\r\n      callback(translations[namespace][k], translations[namespace], k);\r\n    });\r\n  });\r\n}","code-length":91,"reference":"This will traverse an l10n-JSON file, and call the callback function for each translation item.\n\nFor example:\n\n```js\ntraverseJson(json, (item) => delete item.comment);\n```\n\n","result":"Traverse the json.","score":[0.0004,0.0457]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findAllDependencies(file, knownDependencies, sourceDirectories, knownFiles) {\r\n  if (!knownDependencies) {\r\n    knownDependencies = [];\r\n  }\r\n  if (typeof knownFiles === \"undefined\"){\r\n    knownFiles = [];\r\n  } else if (knownFiles.indexOf(file) > -1){\r\n    return knownDependencies;\r\n  }\r\n  if (sourceDirectories) {\r\n    return findAllDependenciesHelp(file, knownDependencies, sourceDirectories, knownFiles).then(function(thing){\r\n      return thing.knownDependencies;\r\n    });\r\n  } else {\r\n    return getBaseDir(file)\r\n      .then(getElmPackageSourceDirectories)\r\n      .then(function(newSourceDirs) {\r\n        return findAllDependenciesHelp(file, knownDependencies, newSourceDirs, knownFiles).then(function(thing){\r\n          return thing.knownDependencies;\r\n        });\r\n      });\r\n  }\r\n}","code-length":233,"reference":"Returns a Promise that returns a flat list of all the Elm files the given Elm file depends on, based on the modules it loads via `import`.","result":"Find all dependencies in an elm package.","score":[0.0093,0.06]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parse(query) {\r\n        if (query[0] == \"?\") query = query.slice(1);\r\n        var pairs = query.split(\"&\"),\r\n            obj = {};\r\n        for (var i in pairs) {\r\n            var pair = pairs[i].split(\"=\"),\r\n                key = decodeURIComponent(pair[0]),\r\n                value = pair[1] ? decodeURIComponent(pair[1]) : \"\";\r\n            obj[key] = value;\r\n        }\r\n        return obj;\r\n    }","code-length":137,"reference":"Parses URL query string.\n","result":"Parse query string into object.","score":[0.2403,0.2439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stringify(obj) {\r\n        var arr = [];\r\n        for (var x in obj) {\r\n            arr.push(encodeURIComponent(x) + \"=\" + encodeURIComponent(obj[x]));\r\n        }\r\n        return arr.join(\"&\");\r\n    }","code-length":74,"reference":"Stringifies an object to a URL query string.\n","result":"Return arr.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _compileAny(any, options){\r\n    if (oj.isArray(any))\r\n      _compileTag(any, options)\r\n    else if (oj.isString(any)){\r\n      if (options.html != null)\r\n        options.html.push(any)\r\n      if (any.length > 0 && any[0] === '<'){\r\n        var root = document.createElement('div')\r\n        root.innerHTML = any\r\n        if (options.dom != null)\r\n          options.dom.appendChild(root)\r\n      } else {\r\n        if (options.dom != null)\r\n          options.dom.appendChild(document.createTextNode(any))\r\n      }\r\n    } else if (oj.isBoolean(any) || oj.isNumber(any)){\r\n      if (options.html != null)\r\n        options.html.push(\"\" + any)\r\n      if (options.dom != null)\r\n        options.dom.appendChild(document.createTextNode(\"\" + any))\r\n    } else if (oj.isFunction(any)){\r\n      _compileAny(oj(any), options)\r\n    } else if (oj.isDate(any)){\r\n      if (options.html != null)\r\n        options.html.push(\"\" + (any.toLocaleString()))\r\n      if (options.dom != null)\r\n        options.dom.appendChild(document.createTextNode(\"\" + (any.toLocaleString())))\r\n    } else if (oj.isOJ(any)){\r\n      if (options.types != null)\r\n        options.types.push(any)\r\n      if (options.html != null)\r\n        options.html.push(any.toHTML(options))\r\n      if (options.dom != null)\r\n        options.dom.appendChild(any.toDOM(options))\r\n      if (options.css != null)\r\n        _extend(options.css, any.toCSSMap(options))\r\n    }\r\n  }","code-length":496,"reference":"_compileAny Recursive helper for compiling ojml or any type","result":"Compile any object.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _attributesBindEventsToDOM(events, el, inserts){\r\n    var ek, ev, _results = []\r\n    for (ek in events){\r\n      ev = events[ek]\r\n      _a(oj.$ != null, \"jquery is missing when binding a '\" + ek + \"' event\")\r\n      if (ek == 'insert' && inserts)\r\n        inserts.push(function(){ev.call(el,el)})\r\n      else if (oj.isArray(ev))\r\n        _results.push(oj.$(el)[ek].apply(this, ev))\r\n      else\r\n        _results.push(oj.$(el)[ek](ev))\r\n    }\r\n    return _results\r\n  }","code-length":179,"reference":"Bind events to dom","result":"Bind attributes to DOM.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(){\r\n      _a(oj.isDOM(this.el), this.typeName, 'constructor did not set this.el')\r\n      _setInstanceOnElement(this.el, this)\r\n      var u = oj.unionArguments(arguments),\r\n        options = u.options,\r\n        args = u.args\r\n      if (this.__autonew__ && !options.__quiet__)\r\n        this.emit()\r\n      if (options.__quiet__ != null)\r\n        delete options.__quiet__\r\n      this.$el.addClass(\"oj-\" + this.typeName)\r\n      this.set(options)\r\n      options = _clone(options)\r\n      this.properties.forEach(function(v){return delete options[v]})\r\n      this.addAttributes(options)\r\n      return this._isConstructed = true\r\n    }","code-length":215,"reference":"Views are special objects map properties together. This is a union of arguments With the remaining arguments becoming a list","result":"Create a new function to be used to create a new object.","score":[0.0544,0.0781]}
{"code":"\/*is used to<extra_id_0>\r\nfunction($el, args){\r\n      if (args.length === 0)\r\n        return $el[0].oj\r\n      var r = oj.compile.apply(oj, [{dom: 1, html: 0, cssMap: 1 }].concat(slice.call(args)))\r\n      _insertStyles(r.cssMap, {global: 0})\r\n      $el.html('')\r\n      if (!oj.isArray(r.dom))\r\n        r.dom = [r.dom]\r\n      for (var ix = 0; ix < r.dom.length; ix++)\r\n        $el.append(r.dom[ix])\r\n      _triggerInserted(r.types, r.inserts)\r\n    }","code-length":180,"reference":"Set compiles and inserts in innerHTML","result":"Compile and trigger events .","score":[0.1967,0.3178]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _jqGetValue($el, args){\r\n    var el = $el[0],\r\n      child = el.firstChild\r\n    if (oj.isOJInstance(_getInstanceOnElement(el)))\r\n      return _getInstanceOnElement(el)\r\n    else if (oj.isDOMText(child))\r\n      return oj.parse(child.nodeValue)\r\n    else if (oj.isDOMElement(child))\r\n      return _d(_getInstanceOnElement(child), child)\r\n  }","code-length":132,"reference":"Helper method that abstracts getting oj values","result":"Get the value of an element in jQuery .","score":[0,0.1389]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(describe) {\r\n\t\tif (!Array.isArray(describe.m)) {\r\n\t\t\treturn when.reject('no modules in describe message');\r\n\t\t}\r\n\t\tvar allDeps = [];\r\n\t\tvar modules = describe.m;\r\n\t\tfor(var i=0;i<modules.length;i++) {\r\n\t\t\tvar checkModule = modules[i];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor(var d = 0; d < checkModule.d.length; d++) {\r\n\t\t\t\tvar moduleNeeds = checkModule.d[d];\r\n\t\t\t\t\r\n\t\t\t\tvar deps = this._walkChain(modules, moduleNeeds);\r\n\t\t\t\tif (deps && (deps.length > 0)) {\r\n\t\t\t\t\tallDeps = allDeps.concat(deps);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar keyFn = function(dep) {\r\n\t\t\t\r\n\t\t\treturn [dep.f, dep.n, dep.v].join('_');\r\n\t\t};\r\n\t\treturn utilities.dedupArray(allDeps, keyFn);\r\n\t}","code-length":279,"reference":"tell us if anything with dependencies is missing something\n\n(this covers scenarios where user app needs something else, or user app has no deps, and part 1 is old, but\npart2 is current, etc.)  Built this because I hit this during testing.\n\nin what order should we apply updates?\nis it possible for us to get conflicting \/ out of order update recommendations?!\n\n","result":"Build a dependency tree.","score":[0,0.0088]}
{"code":"\/*is used to<extra_id_0>\r\nasync function main() {\r\n  process.title = 'Coveralls.js';\r\n  program.name('coveralls')\r\n    .description('Send a coverage report to the Coveralls service.')\r\n    .version(packageVersion, '-v, --version')\r\n    .arguments('<file>').action(file => program.file = file)\r\n    .parse(process.argv);\r\n  if (!program.file) {\r\n    program.outputHelp();\r\n    process.exitCode = 64;\r\n    return null;\r\n  }\r\n  const client = new Client('COVERALLS_ENDPOINT' in process.env ? new URL(process.env.COVERALLS_ENDPOINT) : Client.defaultEndPoint);\r\n  const coverage = await promises.readFile(program.file, 'utf8');\r\n  console.log(`[Coveralls] Submitting to ${client.endPoint}`);\r\n  return client.upload(coverage);\r\n}","code-length":237,"reference":"Application entry point.\n","result":"Run the tests.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Shortline(options) {\r\n  const self = this;\r\n  self._input = (options && options.input) || process.stdin;\r\n  self._output = (options && options.output) || process.stderr;\r\n    self.inputError = null;\r\n  self._input.on('end', () => {\r\n    self.inputError = new EOFError(EOF_MESSAGE);\r\n  });\r\n}","code-length":109,"reference":"Creates a new instance of Shortline which can be used to prompt users\nfor input.\n\nThis class is intended to be similar to {","result":"Create a new instance of Shortline.","score":[0.0301,0.2243]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findElements(node, name) {\r\n  return name in node && Array.isArray(node[name]) ? node[name] : [];\r\n}","code-length":46,"reference":"Defines the shape of a node in an XML document.\n","result":"Find elements.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function main() {\r\n  try {\r\n    const coverage = await promises.readFile('\/path\/to\/coverage.report', 'utf8');\r\n    await new Client().upload(coverage);\r\n    console.log('The report was sent successfully.');\r\n  }\r\n  catch (error) {\r\n    console.log(`An error occurred: ${error.message}`);\r\n    if (error instanceof ClientError) console.log(`From: ${error.uri}`);\r\n  }\r\n}","code-length":128,"reference":"Uploads a coverage report.","result":"Run the tests.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TravisStatusHttp(endpoint, options) {\r\n  if (endpoint && typeof endpoint !== 'string') {\r\n    throw new TypeError('endpoint must be a string');\r\n  }\r\n  endpoint = endpoint && trimSlash(endpoint);\r\n  if (options && typeof options !== 'object') {\r\n    throw new TypeError('options must be an object');\r\n  }\r\n  options = Object.assign({gzip: true}, options);\r\n  options.headers = Object.assign({}, options.headers);\r\n  const caselessHeaders = caseless(options.headers);\r\n  if (!caselessHeaders.has('Accept')) {\r\n    options.headers.Accept =\r\n      'application\/vnd.travis-ci.2+json, application\/json';\r\n  }\r\n  if (!caselessHeaders.has('User-Agent')) {\r\n    options.headers['User-Agent'] = DEFAULT_USER_AGENT;\r\n  }\r\n  TravisHttp.call(\r\n    this,\r\n    endpoint === constants.PRO_URI,\r\n    options.headers\r\n  );\r\n  this._endpoint = endpoint || constants.ORG_URI;\r\n  this._headers = options.headers;\r\n  delete options.headers;\r\n  this._options = options;\r\n}","code-length":308,"reference":"Creates an instance of the travis-ci HTTP agent with a given endpoint\nand request options.\n\nThis class has the following features above <code>TravisHttp<\/code>:\n- Uses a newer version of request (for gzip and proxy support)\n- Supports caller-specified API endpoints (e.g. for enterprise or local use)\n- Supports caller-specified request options (e.g. pooling, strictSSL, proxy,\ntunnel, timeouts, etc.)\n- Improved error values which are real Error instances and include the\nHTTP response information, regardless of content.\n\n","result":"Test TravisStatusHttp .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction git(...args) {\r\n  return new Promise((resolve, reject) => {\r\n    const child = execFile('git', args, (err, stdout, stderr) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve([stdout, stderr]);\r\n      }\r\n    });\r\n    child.stdin.end();\r\n  });\r\n}","code-length":104,"reference":"Runs git with given arguments.\n","result":"Run git commands.","score":[0.2096,0.3906]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SlugDetectionError(message) {\r\n  if (!(this instanceof SlugDetectionError)) {\r\n    return new SlugDetectionError(message);\r\n  }\r\n  Error.captureStackTrace(this, SlugDetectionError);\r\nis, 'message', {\r\n      value: String(message),\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  }\r\n}","code-length":104,"reference":"Constructs a SlugDetectionError.\n\n","result":"Detect Slug Detection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createScopedCss(html, scope, filepath, cssVariables) {\r\n\tscope = typeof scope === 'string' ? {ns: scope, vars: new Map()} : scope;\r\n\tconst style = html.match(styleMatcher);\r\n\tif (!style) {\r\n\t\treturn [{}, scope.vars, ''];\r\n\t}\r\n\tconst cssom = css.parse(style[1], {source: filepath});\r\n\tconst vars = new Map(scope.vars.entries());\r\n\tgetVariables(cssom).forEach((value, key) => vars.set(key, value));\r\n\tif (cssVariables) {\r\n\t\tresolveScopeVariables(cssom, vars);\r\n\t}\r\n\tconst [classes, transformMap] = rewriteSelectors(`${decamelize(scope.ns, '-')}`, cssom);\r\n\treturn [classes, vars, css.stringify(cssom), transformMap];\r\n}","code-length":225,"reference":"Strips scoped style from html and return html and metadata.\n\n","result":"Create a css file for the scoped css files.","score":[0.109,0.0505]}
{"code":"\/*is used to<extra_id_0>\r\nfunction combineCss(templates, scopedCss) {\r\n\tif (!Array.isArray(scopedCss)) {\r\n\t\tscopedCss = [scopedCss];\r\n\t}\r\n\treturn [\r\n\t\t...Object.keys(templates).map(name => templates[name].css),\r\n\t\t...scopedCss\r\n\t]\r\n\t.join('\\n').trim();\r\n}","code-length":99,"reference":"Returns a combined CSS from all component CSS and scopedCss.\n\n","result":"\treturn templates.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction InvalidSlugError(message) {\r\n  if (!(this instanceof InvalidSlugError)) {\r\n    return new InvalidSlugError(message);\r\n  }\r\n  Error.captureStackTrace(this, InvalidSlugError);\r\nis, 'message', {\r\n      value: String(message),\r\n      configurable: true,\r\n      writable: true\r\n    });\r\n  }\r\n}","code-length":100,"reference":"Constructs an InvalidSlugError.\n\n","result":"Detect invalid slugs.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkBuildCommit(build, localCommit) {\r\n  const buildCommit = build.commit;\r\n  let message = `Build commit ${buildCommit.sha\r\n  } does not match ${localCommit.sha}`;\r\n  if (localCommit.name) {\r\n    message += ` (${localCommit.name})`;\r\n  }\r\n  assert.strictEqual(\r\n    buildCommit.sha,\r\n    localCommit.sha,\r\n    message\r\n  );\r\n  return build;\r\n}","code-length":130,"reference":"Checks that a build has an expected commit hash.\n","result":"Check build commits.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction trimSlash(string) {\r\n  if (typeof string !== 'string') {\r\n    return string;\r\n  }\r\n  if (string.length > 0 && string.charAt(string.length - 1) === '\/') {\r\n    return string.slice(0, string.length - 1);\r\n  }\r\n  return string;\r\n}","code-length":93,"reference":"Trims a single slash from the end of a string, if present.\n","result":"Return string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseOptions (opts) {\r\n  return removeEmpty({\r\n    plugins: convertFn.call(this, opts.plugins),\r\n    locals: convertFn.call(this, opts.locals),\r\n    filename: convertFn.call(this, opts.filename),\r\n    parserOptions: convertFn.call(this, opts.parserOptions),\r\n    generatorOptions: convertFn.call(this, opts.generatorOptions),\r\n    runtime: convertFn.call(this, opts.runtime),\r\n    parser: convertFnSpecial.call(this, opts.parser),\r\n    multi: convertFn.call(this, opts.multi)\r\n  })\r\n}","code-length":164,"reference":"Allows any option to be passed as a function which gets webpack's context as its first argument, in case some info from the loader context is necessary","result":"Parse options.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction serializeVerbatim (obj) {\r\n  let i = 0\r\n  const fns = []\r\n  let res = JSON.stringify(obj, (k, v) => {\r\n    if (typeof v === 'function') {\r\n      fns.push(v.toString())\r\n      return `__REPLACE${i++}`\r\n    } else {\r\n      return v\r\n    }\r\n  })\r\n  res = res.replace(\/\"__REPLACE(\\d{1})\"\/g, (m, v) => {\r\n    return fns[v]\r\n  })\r\n  return res\r\n}","code-length":152,"reference":"The runtime contains functions which must be converted into strings without any escaping at all. Yes, this method of doing so is insane. But it works!","result":"Serialize verbatim objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renderPages(filepaths, dest, {templates, vars, statics, disableValidation, cssVariables, host}) {\r\n\tconsole.log(`\\nGenerating pages...`);\r\n\treturn Promise.all(filepaths.map(filepath => {\r\n\t\treturn sander.readFile(filepath)\r\n\t\t\t.then(content => renderPage(content, filepath, {templates, vars, dest, cssVariables}))\r\n\t\t\t.then(([html, destinationPath, cssParts]) => sander.writeFile(destinationPath, html)\r\n\t\t\t\t.then(() => [destinationPath, cssParts]))\r\n\t\t\t.then(([destinationPath, cssParts]) => {\r\n\t\t\t\tconsole.log(`  ${chalk.bold.green(figures.tick)} ${filepath} -> ${destinationPath}`);\r\n\t\t\t\treturn [destinationPath, cssParts];\r\n\t\t\t});\r\n\t}))\r\n\t.then(pageResults => disableValidation ||\r\n\t\tvalidatePages(host, dest, pageResults.map(result => result[0]), statics)\r\n\t\t\t.then(() => pageResults.map(result => result[1])));\r\n}","code-length":281,"reference":"Renders all given pages as static HTML into the destination folder.\n\n","result":"Generate pages.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction gitUrlPath(gitUrl) {\r\n  const foreignParts = \/^([A-Za-z0-9][A-Za-z0-9+.-]*)::(.*)$\/.exec(gitUrl);\r\n  if (foreignParts) {\r\n    return foreignParts[2];\r\n  }\r\n  const gitUrlObj = url.parse(gitUrl);\r\n  if (gitUrlObj.protocol) {\r\n    return gitUrlObj.path;\r\n  }\r\n  const scpParts = \/^([^@\/]+)@(\\[[^]\\\/]+\\]|[^:\/]+):(.*)$\/.exec(gitUrl);\r\n  if (scpParts) {\r\n    return scpParts[3];\r\n  }\r\n  return gitUrl;\r\n}","code-length":186,"reference":"Gets the path portion of a git URL.\n","result":"Resolve paths in the git repository.","score":[0.1645,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var appEnv = this.app.env;\r\n    if (process.env.DEPLOY_TARGET) {\r\n      appEnv = process.env.DEPLOY_TARGET;\r\n    }\r\n    var publicFiles = new Funnel(this.app.trees.public);\r\n    this._requireBuildPackages();\r\n    fs.stat(\r\n      path.join(this.project.root, 'public', 'robots.txt'),\r\n      function(err, stats) {\r\n        if (stats && stats.isFile()) {\r\n          console.log(chalk.yellow('There is a robots.txt in \/public and ENV specific robots.txt are ignored!'));\r\n        }\r\n      }\r\n    );\r\n    publicFiles = stew.rename(\r\n      publicFiles,\r\n      'robots-' + appEnv + '.txt',\r\n      'robots.txt'\r\n    );\r\n    return new Funnel(publicFiles, {\r\n      srcDir: '\/',\r\n      destDir: '\/'\r\n    });\r\n  }","code-length":259,"reference":"Pick env specific robots.txt","result":"Build the project.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileIndex() {\r\n    fs.readFile(path.join(__dirname, 'templates', 'index.hogan'), function(err, data) {\r\n        if (err) throw err;\r\n        fs.writeFile(path.join(__dirname, 'index.html'),\r\n                    hogan.compile(data.toString()).render({\r\n                        'schemes': schemes, \r\n                        'variations': variations, \r\n                        'colors': colors, \r\n                        'variants': variants,\r\n                        }),\r\n                    function(err) {if (err) throw err});\r\n                open(path.join(__dirname, 'index.html'));\r\n    });\r\n}","code-length":171,"reference":"compile hogan template and open index.html","result":"Compile the index.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortMentions(mentions) {\r\n  return mentions.slice().sort((a, b) => b.length - a.length);\r\n}","code-length":44,"reference":"Sort users by username length. Longest usernames first.\n\n","result":"Generate the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findEmoji(names, match) {\r\n  const compare = match.toLowerCase();\r\n  for (let i = 0; i < names.length; i += 1) {\r\n    const name = names[i].toLowerCase();\r\n    if (name === compare) {\r\n      return names[i];\r\n    }\r\n  }\r\n  return null;\r\n}","code-length":99,"reference":"Case-insensitively get the correct emoji name from the possible emoji for an\ninput string.\n\n","result":"Find the emojis.","score":[0.0104,0.0775]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fiberize(fn){\r\n  return function(done){\r\n    var self = this;\r\n    Fiber(function(){\r\n      try{\r\n        if(fn.length == 1){\r\n          fn.call(self, done);\r\n        } else {\r\n          fn.call(self);\r\n          done();\r\n        }\r\n      } catch(e) {\r\n        process.nextTick(function(){\r\n          throw(e);\r\n        });\r\n      }\r\n    }).run();\r\n  };\r\n}","code-length":142,"reference":"Wrap a function in a fiber.  Correctly handles expected presence of done callback","result":"Wrap functions in fiber.","score":[0.0443,0.2608]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(regex, type, types, selector) {\r\n  var matches = selector.match(regex);\r\n  if (matches) {\r\n    for (var i = 0; i < matches.length; i++) {\r\n      types[type]++;\r\n      selector = selector.replace(matches[i], ' ');\r\n    }\r\n  }\r\n  return selector;\r\n}","code-length":100,"reference":"Find matches for a regular expression in a string and push their details to parts Type is \"a\" for IDs, \"b\" for classes, attributes and pseudo-classes and \"c\" for elements and pseudo-elements","result":"Collect types and regex.","score":[0.0003,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(selector) {\r\n  var commaIndex = selector.indexOf(',');\r\n  if (commaIndex !== -1) {\r\n    selector = selector.substring(0, commaIndex);\r\n  }\r\n  var  types = {\r\n    a: 0,\r\n    b: 0,\r\n    c: 0\r\n  };\r\n  selector = selector.replace(notRegex, ' $1 ');\r\n  selector = selector.replace(ruleRegex, ' ');\r\n  selector = findMatch(attributeRegex, 'b', types, selector);\r\n  selector = findMatch(idRegex, 'a', types, selector);\r\n  selector = findMatch(classRegex, 'b', types, selector);\r\n  selector = findMatch(pseudoElementRegex, 'c', types, selector);\r\n  selector = findMatch(pseudoClassRegex, 'b', types, selector);\r\n  selector = selector.replace(separatorRegex, ' ');\r\n  selector = selector.replace(straysRegex, ' ');\r\n  findMatch(elementRegex, 'c', types, selector);\r\n  return (types.a * 100) + (types.b * 10) + (types.c * 1);\r\n}","code-length":287,"reference":"Calculate the specificity for a selector by dividing it into simple selectors and counting them","result":"Parse CSS selector.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(collectionName, indexName, columns, unique, callback) {\r\n    var options = {\r\n      indexName: indexName,\r\n      columns: columns,\r\n      unique: unique\r\n    };\r\n    return this._run('createIndex', collectionName, options)\r\n      .nodeify(callback);\r\n  }","code-length":83,"reference":"Adds an index to a collection\n\n","result":"Create an index.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (name, callback) {\r\n    return this._run('insert', this.internals.migrationTable, {name: name, run_on: new Date()})\r\n      .nodeify(callback);\r\n  }","code-length":61,"reference":"Inserts a migration record into the migration collection\n\n","result":"Create a migration .","score":[0.1662,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (name, callback) {\r\n    return this._run('insert', this.internals.seedTable, {name: name, run_on: new Date()})\r\n      .nodeify(callback);\r\n  }","code-length":61,"reference":"Inserts a seeder record into the seeder collection\n\n","result":"Seed a database.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(err, data) {\r\n          if(err) {\r\n            prCB(err);\r\n          }\r\n          prCB(null, data);\r\n          db.close();\r\n        }","code-length":57,"reference":"Callback function to return mongo records","result":"Create a new function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseParameters(options) {\r\n  var opt = {\r\n    maximumAge: 0,\r\n    enableHighAccuracy: true,\r\n    timeout: Infinity,\r\n    interval: 6000,\r\n    fastInterval: 1000,\r\n    priority: PRIORITY_HIGH_ACCURACY\r\n  };\r\n  if (options) {\r\n    if (options.maximumAge !== undefined && !isNaN(options.maximumAge) && options.maximumAge > 0) {\r\n      opt.maximumAge = options.maximumAge;\r\n    }\r\n    if (options.enableHighAccuracy !== undefined) {\r\n      opt.enableHighAccuracy = options.enableHighAccuracy;\r\n    }\r\n    if (options.timeout !== undefined && !isNaN(options.timeout)) {\r\n      if (options.timeout < 0) {\r\n        opt.timeout = 0;\r\n      } else {\r\n        opt.timeout = options.timeout;\r\n      }\r\n    }\r\n    if (options.interval !== undefined && !isNaN(options.interval) && options.interval > 0) {\r\n      opt.interval = options.interval;\r\n    }\r\n    if (options.fastInterval !== undefined && !isNaN(options.fastInterval) && options.fastInterval > 0) {\r\n      opt.fastInterval = options.fastInterval;\r\n    }\r\n    if (options.priority !== undefined && !isNaN(options.priority) && options.priority >= PRIORITY_NO_POWER && options.priority <= PRIORITY_HIGH_ACCURACY) {\r\n      if (options.priority === PRIORITY_NO_POWER) {\r\n        opt.priority = PRIORITY_NO_POWER;\r\n      }\r\n      if (options.priority === PRIORITY_LOW_POWER) {\r\n        opt.priority = PRIORITY_LOW_POWER;\r\n      }\r\n      if (options.priority === PRIORITY_BALANCED_POWER_ACCURACY) {\r\n        opt.priority = PRIORITY_BALANCED_POWER_ACCURACY;\r\n      }\r\n      if (options.priority === PRIORITY_HIGH_ACCURACY) {\r\n        opt.priority = PRIORITY_HIGH_ACCURACY;\r\n      }\r\n    }\r\n  }\r\n  return opt;\r\n}","code-length":550,"reference":"Returns default params, overrides if provided with values","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction noProp(props, propNameOrFunction) {\r\n    if (!props) {\r\n        throw new Error('Headful: You must pass all declared props when you use headful.props.x() calls.');\r\n    }\r\n    const propName = typeof propNameOrFunction === 'function' ? propNameOrFunction.name : propNameOrFunction;\r\n    return !props.hasOwnProperty(propName);\r\n}","code-length":102,"reference":"Tests whether the given `props` object contains a property with the name of `propNameOrFunction`.","result":"Check if a prop is not present.","score":[0.0594,0.0752]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GifCli(path, callback) {\r\n    var frames = [];\r\n    OneByOne([\r\n        Tmp.dir\r\n      , function (next, tmpDir) {\r\n            var str = Fs.createReadStream(path)\r\n              , isFinished = false\r\n              , complete = []\r\n              , i = 0\r\n              ;\r\n            str.on(\"end\", function () {\r\n                isFinished = true;\r\n            });\r\n            str.pipe(\r\n                GifExplode(function (frame) {\r\n                    Tmp.file({ postfix: \".gif\", }, function (err, cImg) {\r\n                        (function (i, cImg) {\r\n                            if (err) { return next(err); }\r\n                            var wStr = Fs.createWriteStream(cImg);\r\n                            frame.pipe(wStr);\r\n                            complete[i] = false;\r\n                            wStr.on(\"close\", function () {\r\n                                ImageToAscii(cImg, function (err, asciified) {\r\n                                    complete[i] = true;\r\n                                    frames[i] = asciified || \"\";\r\n (!isFinished) { return; }\r\n                                    if (!complete.filter(function (c) {\r\n                                        return c !== true\r\n                                    }).length) {\r\n                                        next();\r\n                                    }\r\n                                });\r\n                            });\r\n                        })(i++, cImg);\r\n                    });\r\n                })\r\n            );\r\n        }\r\n      , function (next) {\r\n            frames = frames.filter(Boolean);\r\n            next();\r\n        }\r\n    ], function (err) {\r\n        if (err) { return callback(err); }\r\n        callback(null, frames);\r\n    });\r\n}","code-length":436,"reference":"GifCli\nConverts the gif file into ASCII frames.\n\n","result":"Create a new GifCli object.","score":[0.1319,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldLog(testlevel, thresholdLevel) {\r\n  var allowed = logLevelAllowedGranular(testlevel);\r\n  if (allowed) {\r\n    return true;\r\n  }\r\n  return logLevelAllowed(testlevel, thresholdLevel);\r\n}","code-length":69,"reference":"Should I log?","result":"Log to the console.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n          if (attrs.type === 'radio') {\r\n            return attrs.value || $parse(attrs.ngValue)(scope) || true;\r\n          }\r\n          var trueValue = ($parse(attrs.ngTrueValue)(scope));\r\n          if (angular.isUndefined(trueValue)) {\r\n            trueValue = true;\r\n          }\r\n          return trueValue;\r\n        }","code-length":105,"reference":"Return the true value for this specific checkbox.\n","result":"Create a function to return the value of the input .","score":[0.1164,0.1807]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(attrName) {\r\n          var map = {\r\n            'switchRadioOff': getBooleanFromStringDefTrue,\r\n            'switchActive': function(value) {\r\n              return !getBooleanFromStringDefTrue(value);\r\n            },\r\n            'switchAnimate': getBooleanFromStringDefTrue,\r\n            'switchLabel': function(value) {\r\n              return value ? value : '&nbsp;';\r\n            },\r\n            'switchIcon': function(value) {\r\n              if (value) {\r\n                return '<span class=\\'' + value + '\\'><\/span>';\r\n              }\r\n            },\r\n            'switchWrapper': function(value) {\r\n              return value || 'wrapper';\r\n            },\r\n            'switchInverse': getBooleanFromString,\r\n            'switchReadonly': getBooleanFromString,\r\n            'switchChange': getExprFromString\r\n          };\r\n          var transFn = map[attrName] || getValueOrUndefined;\r\n          return transFn(attrs[attrName]);\r\n        }","code-length":244,"reference":"Get the value of the angular-bound attribute, given its name.\nThe returned value may or may not equal the attribute value, as it may be transformed by a function.\n\n","result":"Generate the generated code.","score":[0.0006,0.0189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n          if (!isInit) {\r\n            var viewValue = (controller.$modelValue === getTrueValue());\r\n            isInit = !isInit;\r\n            element.bootstrapSwitch({\r\n              radioAllOff: getSwitchAttrValue('switchRadioOff'),\r\n              disabled: getSwitchAttrValue('switchActive'),\r\n              state: viewValue,\r\n              onText: getSwitchAttrValue('switchOnText'),\r\n              offText: getSwitchAttrValue('switchOffText'),\r\n              onColor: getSwitchAttrValue('switchOnColor'),\r\n              offColor: getSwitchAttrValue('switchOffColor'),\r\n              animate: getSwitchAttrValue('switchAnimate'),\r\n              size: getSwitchAttrValue('switchSize'),\r\n              labelText: attrs.switchLabel ? getSwitchAttrValue('switchLabel') : getSwitchAttrValue('switchIcon'),\r\n              wrapperClass: getSwitchAttrValue('switchWrapper'),\r\n              handleWidth: getSwitchAttrValue('switchHandleWidth'),\r\n              labelWidth: getSwitchAttrValue('switchLabelWidth'),\r\n              inverse: getSwitchAttrValue('switchInverse'),\r\n              readonly: getSwitchAttrValue('switchReadonly')\r\n            });\r\n            if (attrs.type === 'radio') {\r\n              controller.$setViewValue(controller.$modelValue);\r\n            } else {\r\n              controller.$setViewValue(viewValue);\r\n            }\r\n          }\r\n        }","code-length":340,"reference":"If the directive has not been initialized yet, do so.","result":"Detect if a comment is a comment node .","score":[0,0.0505]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n          attrs.$observe('switchActive', function (newValue) {\r\n            var active = getBooleanFromStringDefTrue(newValue);\r\n            if (!active) {\r\n              $timeout(setActive);\r\n            } else {\r\n              setActive();\r\n            }\r\n          });\r\n          controller.$render = function () {\r\n            initMaybe();\r\n            var newValue = controller.$modelValue;\r\n            if (newValue !== undefined && newValue !== null) {\r\n              element.bootstrapSwitch('state', newValue === getTrueValue(), true);\r\n            } else {\r\n              element.bootstrapSwitch('indeterminate', true, true);\r\n              controller.$setViewValue(undefined);\r\n            }\r\n            switchChange();\r\n          };\r\n          var bindings = {\r\n            'switchRadioOff': 'radioAllOff',\r\n            'switchOnText': 'onText',\r\n            'switchOffText': 'offText',\r\n            'switchOnColor': 'onColor',\r\n            'switchOffColor': 'offColor',\r\n            'switchAnimate': 'animate',\r\n            'switchSize': 'size',\r\n            'switchLabel': 'labelText',\r\n            'switchIcon': 'labelText',\r\n            'switchWrapper': 'wrapperClass',\r\n            'switchHandleWidth': 'handleWidth',\r\n            'switchLabelWidth': 'labelWidth',\r\n            'switchInverse': 'inverse',\r\n            'switchReadonly': 'readonly'\r\n          };\r\n          var observeProp = function(prop, bindings) {\r\n            return function() {\r\n              attrs.$observe(prop, function () {\r\n                setSwitchParamMaybe(element, bindings[prop], prop);\r\n              });\r\n            };\r\n          };\r\n          for (var prop in bindings) {\r\n            attrs.$observe(prop, observeProp(prop, bindings));\r\n          }\r\n        }","code-length":460,"reference":"Listen to model changes.","result":"Detect if a directive is used to be a directive .","score":[0.0979,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n          if (attrs.type === 'radio') {\r\n            element.on('change.bootstrapSwitch', function (e) {\r\n              if ((controller.$modelValue === controller.$viewValue) && (e.target.checked !== $(e.target).bootstrapSwitch('state'))) {\r\n                if (e.target.checked) {\r\n                  controller.$setViewValue(getTrueValue());\r\n                } else if (getTrueValue() === controller.$viewValue) {\r\n                  controller.$setViewValue(undefined);\r\n                }\r\n                switchChange();\r\n              }\r\n            });\r\n          } else {\r\n            element.on('switchChange.bootstrapSwitch', function (e) {\r\n              controller.$setViewValue(e.target.checked);\r\n              switchChange();\r\n            });\r\n          }\r\n        }","code-length":206,"reference":"Listen to view changes.","result":"Create a new function to create a new object.","score":[0.1219,0.1111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (n) {\r\n                var r,\r\n                    i,\r\n                    c = parseCookies();\r\n                if (typeof n === 'string') {\r\n                    r = (c[n] !== undef) ? c[n] : null;\r\n                } else if (typeof n === 'object' && n !== null) {\r\n                    r = {};\r\n                    for (i in n) {\r\n                        if (Object.prototype.hasOwnProperty.call(n, i)) {\r\n                            if (c[n[i]] !== undef) {\r\n                                r[n[i]] = c[n[i]];\r\n                            } else {\r\n                                r[n[i]] = null;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    r = c;\r\n                }\r\n                return r;\r\n            }","code-length":212,"reference":"get - get one, several, or all cookies\n\n","result":"Create a cookie object.","score":[0,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (p) {\r\n                var n,\r\n                    r = {},\r\n                    c = parseCookies();\r\n                if (typeof p === 'string') {\r\n                    p = new RegExp(p);\r\n                }\r\n                for (n in c) {\r\n                    if (Object.prototype.hasOwnProperty.call(c, n) && n.match(p)) {\r\n                        r[n] = c[n];\r\n                    }\r\n                }\r\n                return r;\r\n            }","code-length":126,"reference":"filter - get array of cookies whose names match the provided RegExp\n\n","result":"Match cookies.","score":[0,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (n, v, o) {\r\n                if (typeof o !== 'object' || o === null) {\r\n                    o = {};\r\n                }\r\n                if (v === undef || v === null) {\r\n                    v = '';\r\n                    o.expires = new Date();\r\n                    o.expires.setFullYear(1978);\r\n                } else {\r\n                                        v = (v === true)\r\n                        ? 'true' : (v === false)\r\n                            ? 'false' : !isNaN(v)\r\n                                ? String(v) : v;\r\n                    if (typeof v !== 'string') {\r\n                        if (typeof JSON === 'object' && JSON !== null && typeof JSON.stringify === 'function') {\r\n                            v = JSON.stringify(v);\r\n                        } else {\r\n                            throw new Error('cookies.set() could not be serialize the value');\r\n                        }\r\n                    }\r\n                }\r\n                document.cookie = n + '=' + encodeURIComponent(v) + cookieOptions(o);\r\n            }","code-length":255,"reference":"set - set or delete a cookie with desired options\n\n","result":"Var undef.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n                var r = false,\r\n                    n = 'test_cookies_jaaulde_js',\r\n                    v = 'data';\r\n                this.set(n, v);\r\n                if (this.get(n) === v) {\r\n                    this.del(n);\r\n                    r = true;\r\n                }\r\n                return r;\r\n            }","code-length":101,"reference":"test - test whether the browser is accepting cookies\n\n","result":"Test cookies.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatMessage (str) {\r\n  return String(str).split('\\n')\r\n    .map(function(s) {\r\n      return s.magenta;\r\n    })\r\n    .join('\\n');\r\n}","code-length":65,"reference":"Shared functions Allow an error message to retain its color when split across multiple lines.","result":"Format the message.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createZoomRangePath(options) {\r\n      if (!angular.isObject(options.state)) {\r\n        options.state = {};\r\n      }\r\n      if (!angular.isObject(options.state.range)) {\r\n        options.state.range = [];\r\n      }\r\n    }","code-length":82,"reference":"Create nested options objects.","result":"Create the zoom range path.","score":[0.2403,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction synchronizeZoom(options, configuration, watcher) {\r\n      if (angular.isObject(options.chart) && angular.isObject(options.chart.zoom) && options.chart.zoom.enabled === true) {\r\n        configuration.zoom.onzoomend = function (domain) {\r\n          AngularChartWatcher.updateState(watcher, function () {\r\n            createZoomRangePath(options);\r\n            options.state.range = domain;\r\n          });\r\n          if (angular.isFunction(options.chart.zoom.onzoomend)) {\r\n            AngularChartWatcher.applyFunction(watcher, function () {\r\n              options.chart.zoom.onzoomend(domain);\r\n            });\r\n          }\r\n        };\r\n      }\r\n      if (angular.isObject(options.chart) && angular.isObject(options.chart.subchart) && options.chart.subchart.show === true) {\r\n        configuration.subchart.onbrush = function (domain) {\r\n          AngularChartWatcher.updateState(watcher, function () {\r\n            createZoomRangePath(options);\r\n            options.state.range = domain;\r\n          });\r\n          if (angular.isFunction(options.chart.subchart.onbrush)) {\r\n            AngularChartWatcher.applyFunction(watcher, function () {\r\n              options.chart.subchart.onbrush(domain);\r\n            });\r\n          }\r\n        };\r\n      }\r\n    }","code-length":357,"reference":"Setup zoom event listeners which update the state","result":"Synchronize zoom.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addSelections(chart, selections) {\r\n      service.disableSelectionListener = true;\r\n      selections.forEach(function (selection) {\r\n        chart.select([selection.id], [selection.index]);\r\n      });\r\n      service.disableSelectionListener = false;\r\n    }","code-length":77,"reference":"Add passed selection to the chart.","result":"Add selection listeners.","score":[0.1786,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction applySelection(options, chart) {\r\n      if (angular.isObject(options.state) && angular.isArray(options.state.selected)) {\r\ns(chart, options.state.selected);\r\n      } else {\r\n        removeAllSelections(chart);\r\n      }\r\n    }","code-length":79,"reference":"Apply earlier selections.","result":"Apply selection.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createSelectionsPath(options) {\r\n      if (!angular.isObject(options.state)) {\r\n        options.state = {};\r\n      }\r\n      if (!angular.isArray(options.state.selected)) {\r\n        options.state.selected = [];\r\n      }\r\n    }","code-length":81,"reference":"Create nested options object.","result":"Create the selections path.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction synchronizeSelection(options, configuration, watcher) {\r\n      if (angular.isObject(options.chart) && angular.isObject(options.chart.data) && angular.isObject(options.chart.data.selection) && options.chart.data.selection.enabled === true) {\r\n        configuration.data.onselected = function (data, element) {\r\n          if (service.disableSelectionListener) {\r\n            return;\r\n          }\r\n          AngularChartWatcher.updateState(watcher, function () {\r\n            createSelectionsPath(options);\r\n            options.state.selected.push(data);\r\n          });\r\n          if (angular.isFunction(options.chart.data.onselected)) {\r\n            AngularChartWatcher.applyFunction(watcher, function () {\r\n              options.chart.data.onselected(data, element);\r\n            });\r\n          }\r\n        };\r\n        configuration.data.onunselected = function (data, element) {\r\n          if (service.disableSelectionListener) {\r\n            return;\r\n          }\r\n          AngularChartWatcher.updateState(watcher, function () {\r\n            createSelectionsPath(options);\r\n            options.state.selected = options.state.selected.filter(function (selected) {\r\n              return selected.id !== data.id || selected.index !== data.index;\r\n            });\r\n          });\r\n          if (angular.isFunction(options.chart.data.onunselected)) {\r\n            AngularChartWatcher.applyFunction(watcher, function () {\r\n              options.chart.data.onunselected(data, element);\r\n            });\r\n          }\r\n        };\r\n      }\r\n    }","code-length":408,"reference":"Listen to chart events to save selections into to state object.","result":"Synchronize the selection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setupDataSmallWatcher(watcher) {\r\n      return watcher.scope.$watch('options.data', function () {\r\n        if (angular.isFunction(watcher.dataCallback)) {\r\n          watcher.dataCallback();\r\n        }\r\n        setupDataWatcher(watcher);\r\n      }, true);\r\n    }","code-length":82,"reference":"start watcher changes in small datasets, compares whole object","result":"Setup data watcher.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setupDataBigWatcher(watcher) {\r\n      return watcher.scope.$watch(function () {\r\n        if (watcher.scope.options.data && angular.isArray(watcher.scope.options.data)) {\r\n          return watcher.scope.options.data.length;\r\n        } else {\r\n          return 0;\r\n        }\r\n      }, function () {\r\n        if (angular.isFunction(watcher.dataCallback)) {\r\n          watcher.dataCallback();\r\n        }\r\n        setupDataWatcher(watcher);\r\n      });\r\n    }","code-length":140,"reference":"start watcher changes in big datasets, compares length of records","result":"Setup data big watcher.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addIdentifier() {\r\n      $scope.dataAttributeChartID = 'chartid' + Math.floor(Math.random() * 1000000001);\r\n      angular.element($element).attr('id', $scope.dataAttributeChartID);\r\n      configuration.bindto = '#' + $scope.dataAttributeChartID;\r\n    }","code-length":87,"reference":"Add unique identifier for each chart","result":"Add identifiers.","score":[0.0677,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadEntity(name, promise, options) {\r\n  if (!name || typeof name !== 'string') throw new Error('Missing required entity name');\r\n  if (!promise || !promise.then) throw new Error('Missing required entity promise');\r\n  try {\r\n    !(0, _validateOptions.default)(options);\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n  var entityLifecycle = new _entityLifecycle.default(name, options);\r\n  return function (dispatch, getState) {\r\n    entityLifecycle.setDispatch(dispatch);\r\n    entityLifecycle.setGetState(getState);\r\n    entityLifecycle.onLoad();\r\n    return new Promise(function (resolve, reject) {\r\n      promise.then(function (data) {\r\n        resolve(entityLifecycle.onSuccess(data));\r\n      }).catch(function (error) {\r\n        reject(entityLifecycle.onFailure(error));\r\n      });\r\n    });\r\n  };\r\n}","code-length":244,"reference":"Redux thunk action creator for performing asynchronous actions.\n\n","result":"Load a single entity.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateAction(action, keys, values) {\r\n  var generatedAction = Object.assign({}, action);\r\n  keys.forEach(function (arg, index) {\r\n    generatedAction[keys[index]] = values[index];\r\n  });\r\n  return generatedAction;\r\n}","code-length":78,"reference":"Generation a Redux action object\n","result":"Return generatedAction.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeActionCreator(type) {\r\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n    keys[_key - 1] = arguments[_key];\r\n  }\r\n  if (!type) throw new Error('Type cannot be null\/undefined');\r\n  return function () {\r\n    for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n      values[_key2] = arguments[_key2];\r\n    }\r\n    return generateAction({\r\n      type: type\r\n    }, keys, values);\r\n  };\r\n}","code-length":196,"reference":"Generate action creators based on input arguments. The first argument is always\ntreated as the Redux action type; all other passed arguments are treated\nas property on the action object itself.\n\nExample: const myActionType = 'DO_IT';\nconst doItAction = makeActionCreator(myActionType, 'data');\ndoItAction(123); --> { type: \"DO_IT\", data: 123 }\n\n","result":"Create a new actionCreator.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _getRandomDelayBetween (min, max, roundTo) {\r\n    return Number(Math.random() * (max - min) + min).toFixed(roundTo);\r\n}","code-length":52,"reference":"Generate a random number in a given range, and round to a given value\n","result":"Create the delay between functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _logDetails (action) {\r\n    if (action) {\r\n        console.log(`${chalk.white.bgRed('  Prev State:')} \r\n        ${__toString(state)}`);\r\n        console.log(`${chalk.white.bgBlue('      Action:')} \r\n        ${__toString(action)}`);\r\n    } else {\r\n        console.log(`${chalk.white.bgGreen('  Next State:')}\r\n        ${__toString(state)}`);\r\n        console.log('\\n');\r\n    }\r\n}","code-length":146,"reference":"Log Redux actions\n","result":"Log state changes.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _removeSubscribers(aSubscribers, oSubscriber) {\r\n  let nUnsubscribed = 0;\r\n  if (!isTypeOf(aSubscribers, sNotDefined)) {\r\n    let nIndex = aSubscribers.length - 1;\r\n    for (; nIndex >= 0; nIndex--) {\r\n      if (aSubscribers[nIndex].subscriber === oSubscriber) {\r\n        nUnsubscribed++;\r\n        aSubscribers.splice(nIndex, 1);\r\n      }\r\n    }\r\n  }\r\n  return nUnsubscribed;\r\n}","code-length":136,"reference":"_removeSubscribers remove the subscribers to one channel and return the number of\nsubscribers that have been unsubscribed.\n","result":"Remove a subscriber.","score":[0,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _removeSubscribersPerEvent(oEventsCallbacks, sChannelId, oSubscriber) {\r\n  let nUnsubscribed = 0;\r\n  iterateObject(oEventsCallbacks, function (oItem, sEvent) {\r\n    const aEventsParts = sEvent.split(':');\r\n    let sChannel = sChannelId;\r\n    let sEventType = sEvent;\r\n    if (aEventsParts[0] === 'global') {\r\n      sChannel = aEventsParts[0];\r\n      sEventType = aEventsParts[1];\r\n    }\r\n    nUnsubscribed += _removeSubscribers(oChannels[sChannel][sEventType], oSubscriber);\r\n  });\r\n  return nUnsubscribed;\r\n}","code-length":175,"reference":"Loops per all the events to remove subscribers.\n","result":"Remove subscribers per event.","score":[0.1175,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _addSubscribers(oEventsCallbacks, sChannelId, oSubscriber) {\r\n  iterateObject(oEventsCallbacks, function (oItem, sEvent) {\r\n    subscribeTo(sChannelId, sEvent, oItem, oSubscriber);\r\n  });\r\n}","code-length":70,"reference":"_addSubscribers add all the events of one channel from the subscriber\n","result":"Add subscribers.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _getChannelEvents(sChannelId, sEvent) {\r\n  if (oChannels[sChannelId] === und) {\r\n    oChannels[sChannelId] = {};\r\n  }\r\n  if (oChannels[sChannelId][sEvent] === und) {\r\n    oChannels[sChannelId][sEvent] = [];\r\n  }\r\n  return oChannels[sChannelId][sEvent];\r\n}","code-length":112,"reference":"_getChannelEvents return the events array in channel.\n","result":"Get channel events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction subscribersByEvent(oChannel, sEventName) {\r\n  let aSubscribers = [];\r\n  if (!isTypeOf(oChannel, sNotDefined)) {\r\n    iterateObject(oChannel, function (oItem, sKey) {\r\n      if (sKey === sEventName) {\r\n        aSubscribers = oItem;\r\n      }\r\n    });\r\n  }\r\n  return aSubscribers;\r\n}","code-length":106,"reference":"subscribersByEvent return all the subscribers of the event in the channel.\n","result":"Get the subscribers by event.","score":[0.1023,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction subscribeTo(sChannelId, sEventType, fpHandler, oSubscriber) {\r\n  const aChannelEvents = _getChannelEvents(sChannelId, sEventType);\r\n  aChannelEvents.push({\r\n    subscriber: oSubscriber,\r\n    handler: fpHandler\r\n  });\r\n}","code-length":78,"reference":"Method to add a single callback in one channel an in one event.\n","result":"Subscribe to.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction unsubscribeFrom(sChannelId, sEventType, oSubscriber) {\r\n  const aChannelEvents = _getChannelEvents(sChannelId, sEventType);\r\n  for (let nEvent = aChannelEvents.length - 1; nEvent >= 0; nEvent--) {\r\n    const oItem = aChannelEvents[nEvent];\r\n    if (oItem.subscriber === oSubscriber) {\r\n      aChannelEvents.splice(nEvent, 1);\r\n    }\r\n  }\r\n}","code-length":123,"reference":"Method to unsubscribe a subscriber from a channel and event type.\nIt iterates in reverse order to avoid messing with array length when removing items.\n","result":"Unsubscribe from events.","score":[0.0003,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction subscribe(oSubscriber) {\r\n  const oEventsCallbacks = oSubscriber.events;\r\n  if (!oSubscriber || oEventsCallbacks === und) {\r\n    return false;\r\n  }\r\n  iterateObject(oEventsCallbacks, function (oItem, sChannelId) {\r\n    if (oChannels[sChannelId] === und) {\r\n      oChannels[sChannelId] = {};\r\n    }\r\n    _addSubscribers(oItem, sChannelId, oSubscriber);\r\n  });\r\n  return true;\r\n}","code-length":137,"reference":"subscribe method gets the oEventsCallbacks object with all the handlers and add these handlers to the channel.\n","result":"Subscribe to events.","score":[0.0038,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction unsubscribe(oSubscriber) {\r\n  let nUnsubscribed = 0;\r\n  const oEventsCallbacks = oSubscriber.events;\r\n  if (!oSubscriber || oEventsCallbacks === und) {\r\n    return false;\r\n  }\r\n  iterateObject(oEventsCallbacks, function (oItem, sChannelId) {\r\n    if (oChannels[sChannelId] === und) {\r\n      oChannels[sChannelId] = {};\r\n    }\r\n    nUnsubscribed = _removeSubscribersPerEvent(oItem, sChannelId, oSubscriber);\r\n  });\r\n  return nUnsubscribed > 0;\r\n}","code-length":157,"reference":"unsubscribe gets the oEventsCallbacks methods and removes the handlers of the channel.\n","result":"Unsubscribe from a subscriber.","score":[0,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _executeHandler(oHandlerObject, oData, sChannelId, sEvent) {\r\n  oHandlerObject.handler.call(oHandlerObject.subscriber, oData);\r\n  if (getDebug()) {\r\n    const ErrorHandler = errorHandler();\r\n    ErrorHandler.log(sChannelId, sEvent, oHandlerObject);\r\n  }\r\n}","code-length":89,"reference":"Method to execute handlers\n","result":"Execute the handler .","score":[0,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction publish(sChannelId, sEvent, oData) {\r\n  const aSubscribers = copyArray(this.subscribers(sChannelId, sEvent));\r\n  let oSubscriber;\r\n  const nLenSubscribers = aSubscribers.length;\r\n  if (nLenSubscribers === 0) {\r\n    return false;\r\n  }\r\n  oData = preprocessorsPublishData(oData);\r\n  while (!!(oSubscriber = aSubscribers.shift())) {\r\n    _executeHandler(oSubscriber, oData, sChannelId, sEvent);\r\n  }\r\n  return true;\r\n}","code-length":148,"reference":"Publish the event in one channel.\n","result":"Return oData.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveNamespace(sNamespace) {\r\n  var oObj = root,\r\n    aElements = sNamespace.split('.'),\r\n    sElement;\r\n  while (!!( sElement = aElements.shift() )) {\r\n    oObj = oObj[sElement] !== und ? oObj[sElement] : oObj[sElement] = {};\r\n  }\r\n  return oObj;\r\n}","code-length":101,"reference":"Create or get a namespace by a namespace defined as string\n","result":"Resolve namespaces.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getResolveDICallback(oMapping) {\r\n  return function (sDependency) {\r\n    var oPromise = getPromise();\r\n    if (!oMapping.__map__[sDependency]) {\r\n      return false;\r\n    }\r\n    oPromise.resolve(oMapping.__map__[sDependency]);\r\n    return oPromise;\r\n  };\r\n}","code-length":96,"reference":"Resolve dependency injection by default.\n","result":"Resolve dependencies.","score":[0.1116,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPromiseCallbacks(oContext, sType) {\r\n  return function () {\r\n    var aCompleted, nLenPromises, oDeferred, aPromises, nPromise, oPromise, aResults = [];\r\n    oContext.bCompleted = true;\r\n    oContext.sType = sType;\r\n    oContext.oResult = arguments;\r\n    while (oContext.aPending[0]) {\r\n      oContext.aPending.shift()[sType].apply(oContext, arguments);\r\n    }\r\n    oDeferred = oContext.oDeferred;\r\n    if(oDeferred){\r\n      aCompleted = [];\r\n      aPromises = oDeferred.aPromises;\r\n      nLenPromises = aPromises.length;\r\n      aResults = [];\r\n      for(nPromise = 0; nPromise < nLenPromises; nPromise++){\r\n        oPromise = aPromises[nPromise];\r\n        aCompleted.push(Number(oPromise.bCompleted));\r\n        aResults.push( oPromise.oResult );\r\n      }\r\n      if(aCompleted.join('').indexOf('0') === -1){\r\n        oDeferred[sType].apply(oDeferred, aResults);\r\n      }\r\n    }\r\n  };\r\n}","code-length":307,"reference":"Returns the promise callback by type\n","result":"Create a promise callbacks for the given context.","score":[0.1652,0.5091]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (fpSuccess, fpFailure) {\r\n    var oResult = this.oResult;\r\n    if (this.bCompleted) {\r\n      if (this.sType === 'resolve') {\r\n        fpSuccess.apply(fpSuccess, oResult);\r\n      } else {\r\n        fpFailure.apply(fpFailure, oResult);\r\n      }\r\n    } else {\r\n      this.aPending.push({ resolve: fpSuccess, reject: fpFailure});\r\n    }\r\n    return this;\r\n  }","code-length":133,"reference":"Adds new callbacks to execute when the promise has been completed\n","result":"Reject promises.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction FakeModule(sModuleId, fpCreator) {\r\n  if (isTypeOf(fpCreator, sNotDefined)) {\r\n    throw new Error('Something goes wrong!');\r\n  }\r\n  this.creator = fpCreator;\r\n  this.instances = {};\r\n  this.sModuleId = sModuleId;\r\n}","code-length":89,"reference":"Module to be stored, adds two methods to start and extend modules.\n","result":"Create a module.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isJqueryObject(oObj) {\r\n  var isJquery = false,\r\n    $ = getRoot().jQuery;\r\n  if ($) {\r\n    isJquery = isInstanceOf(oObj, $);\r\n  }\r\n  return isJquery;\r\n}","code-length":74,"reference":"Use jQuery detection\n","result":"Check if an object is a jQuery object.","score":[0.1389,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isEvent(oObj) {\r\n  try {\r\n    return isInstanceOf(oObj, Event);\r\n  } catch (erError) {\r\n    if (oObj.altKey !== und && ( oObj.srcElement || oObj.target )) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}","code-length":89,"reference":"Use Event detection and if it fails it degrades to use duck typing detection to\ntest if the supplied object is an Event\n","result":"Detect if an object is an Event object.","score":[0.0705,0.2616]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addPropertiesAndMethodsToModule(sModuleId, aDependencies, fpCallback) {\r\n  var oPromise;\r\n  function success(mapping) {\r\n    const oModules = getModules();\r\n    var oModule, fpInitProxy;\r\n    oModule = oModules[sModuleId].creator.apply(oModules[sModuleId], [].slice.call(arguments, 1));\r\n    oModule.__children__ = [];\r\n    oModule.dependencies = aDependencies || [].slice.call(arguments, 1);\r\n    oModule.resolvedDependencies = mapping;\r\n    oModule.__module_id__ = sModuleId;\r\n    fpInitProxy = oModule.init || nullFunc;\r\n    oModule.__action__ = oModule.__sandbox__ = Bus;\r\n    oModule.events = oModule.events || {};\r\n    oModule.init = function () {\r\n      var aArgs = copyArray(arguments).concat(getVars());\r\n      if (oModule.__children__.length === 0) {\r\n        Bus.subscribe(oModule);\r\n      }\r\n      return fpInitProxy.apply(this, aArgs);\r\n    };\r\n    oModule.handleAction = function (oNotifier) {\r\n      var fpCallback = this.events[oNotifier.type];\r\n      if (isTypeOf(fpCallback, sNotDefined)) {\r\n        return;\r\n      }\r\n      fpCallback.call(this, oNotifier);\r\n    };\r\n    oModule.onDestroy = oModule.onDestroy || oModule.destroy || function () {\r\n      };\r\n    oModule.destroy = function () {\r\n      this.onDestroy();\r\n      Bus.unsubscribe(oModule);\r\n      delete oModules[sModuleId].instances[oModule.__instance_id__];\r\n    };\r\n    fpCallback(oModule);\r\n  }\r\n  oPromise = resolveDependencies(sModuleId, aDependencies);\r\n  oPromise.then(function () {\r\n    success.apply(success, arguments);\r\n  });\r\n}","code-length":498,"reference":"Add common properties and methods to avoid repeating code in modules\n","result":"Add properties and methods to a module.","score":[0.3019,0.4566]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapMethod(oInstance, sName, sModuleId, fpMethod) {\r\n  oInstance[sName] = ( function (sName, fpMethod) {\r\n    return function () {\r\n      var aArgs = copyArray(arguments);\r\n      try {\r\n        return fpMethod.apply(this, aArgs);\r\n      }\r\n      catch (erError) {\r\n        const ErrorHandler = errorHandler();\r\n        ErrorHandler.error(sModuleId, sName, erError);\r\n        return false;\r\n      }\r\n    };\r\n  }(sName, fpMethod));\r\n}","code-length":150,"reference":"wrapMethod is a method to wrap the original method to avoid failing code.\nThis will be only called if bDebug flag is set to false.\n","result":"Wrap methods in the module.","score":[0.0044,0.0652]}
{"code":"\/*is used to<extra_id_0>\r\nfunction register(sModuleId, aDependencies, fpCreator) {\r\n  const oModules = getModules();\r\n  if (isFunction(aDependencies)) {\r\n    fpCreator = aDependencies;\r\n    aDependencies = [ '$$_bus', '$$_module', '$$_log', 'gl_Hydra' ];\r\n  }\r\n  oModules[sModuleId] = new FakeModule(sModuleId, fpCreator);\r\n  oModules[sModuleId].dependencies = aDependencies;\r\n  return oModules[sModuleId];\r\n}","code-length":139,"reference":"register is the method that will add the new module to the oModules object.\nsModuleId will be the key where it will be stored.\n","result":"Register a module.","score":[0,0.0228]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setInstance(sModuleId, sIdInstance, oInstance) {\r\n  const oModules = getModules();\r\n  var oModule = oModules[sModuleId];\r\n  if (!oModule) {\r\n    fpThrowErrorModuleNotRegistered(sModuleId, true);\r\n  }\r\n  oModule.instances[sIdInstance] = oInstance;\r\n  return oModule;\r\n}","code-length":103,"reference":"Method to set an instance of a module\n","result":"Set the instance of a module.","score":[0.2849,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _multiModuleStart(oInstance, aModulesIds, sIdInstance, oData, bSingle) {\r\n  var aInstancesIds, aData, aSingle, nIndex, nLenModules, sModuleId;\r\n  if (isArray(sIdInstance)) {\r\n    aInstancesIds = copyArray(sIdInstance);\r\n  }\r\n  if (isArray(oData)) {\r\n    aData = copyArray(oData);\r\n  }\r\n  if (isArray(bSingle)) {\r\n    aSingle = copyArray(bSingle);\r\n  }\r\n  for (nIndex = 0, nLenModules = aModulesIds.length; nIndex < nLenModules; nIndex++) {\r\n    sModuleId = aModulesIds[nIndex];\r\n    sIdInstance = aInstancesIds && aInstancesIds[nIndex] || generateUniqueKey();\r\n    oData = aData && aData[nIndex] || oData;\r\n    bSingle = aSingle && aSingle[nIndex] || bSingle;\r\n    startSingleModule(oInstance, sModuleId, sIdInstance, oData, bSingle);\r\n  }\r\n}","code-length":268,"reference":"start more than one module at the same time.\n","result":"Start multiple modules.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction beforeInit(oInstance, oData, bSingle) {\r\n  iterateObject(oModifyInit, function (oMember) {\r\n    if (oMember && isTypeOf(oMember, sFunctionType)) {\r\n      oMember(oInstance, oData, bSingle);\r\n    }\r\n  });\r\n}","code-length":82,"reference":"Method to modify the init method to use it for extend.\n","result":"Initialize the model.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startSingleModule(oWrapper, sModuleId, sIdInstance, oData, bSingle) {\r\n  const oModules = getModules();\r\n  var oModule;\r\n  oModule = oModules[sModuleId];\r\n  if ( (bSingle && isModuleStarted(sModuleId)) || isModuleStarted(sModuleId, sIdInstance)) {\r\n    oWrapper.stop(sModuleId, sIdInstance);\r\n  }\r\n  if (!isTypeOf(oModule, sNotDefined)) {\r\n    createInstance(sModuleId, undefined, function (oInstance) {\r\n      oModule.instances[sIdInstance] = oInstance;\r\n      oInstance.__instance_id__ = sIdInstance;\r\n      beforeInit(oInstance, oData, bSingle);\r\n      if (!isTypeOf(oData, sNotDefined)) {\r\n        oInstance.init(oData);\r\n      } else {\r\n        oInstance.init();\r\n      }\r\n    });\r\n  } else {\r\n    const ErrorHandler = errorHandler();\r\n    ErrorHandler.error(new Error(), fpThrowErrorModuleNotRegistered(sModuleId));\r\n  }\r\n}","code-length":279,"reference":"startSingleModule is the method that will initialize the module.\nWhen start is called the module instance will be created and the init method is called.\nIf bSingle is true and the module is started the module will be stopped before instance it again.\nThis avoid execute the same listeners more than one time.\n","result":"Start a single module .","score":[0.0,0.0207]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _singleModuleStart(oInstance, sModuleId, sIdInstance, oData, bSingle) {\r\n  if (!isTypeOf(sIdInstance, 'string')) {\r\n    bSingle = oData;\r\n    oData = sIdInstance;\r\n    sIdInstance = generateUniqueKey();\r\n  }\r\n  startSingleModule(oInstance, sModuleId, sIdInstance, oData, bSingle);\r\n}","code-length":103,"reference":"Start only one module.\n","result":"Start the single module.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createInstance(sModuleId, aDependencies, fpCallback) {\r\n  const oModules = getModules();\r\n  if (isTypeOf(oModules[sModuleId], sNotDefined)) {\r\n    fpThrowErrorModuleNotRegistered(sModuleId, true);\r\n  }\r\n  addPropertiesAndMethodsToModule(sModuleId, aDependencies, function (oInstance) {\r\n    if (!getDebug()) {\r\n      iterateObject(oInstance, function (oItem, sName) {\r\n        if (isFunction(oItem)) {\r\n          wrapMethod(oInstance, sName, sModuleId, oInstance[sName]);\r\n        }\r\n      });\r\n    }\r\n    fpCallback(oInstance);\r\n  });\r\n}","code-length":184,"reference":"createInstance is the method that will create the module instance and wrap the method if needed.\n","result":"Create a new instance of a module.","score":[0.0446,0.0662]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getCallbackToSetObjectFromTemplate(oMethodsObject, oPropertiesObject) {\r\n  return function (oValue, sKey) {\r\n    if (typeof oValue === 'function') {\r\n      oMethodsObject[sKey] = getSimpleFunction(oValue);\r\n    } else if (isArray(oValue)) {\r\n      oPropertiesObject[sKey] = copyArray(oValue);\r\n    } else if (typeof oValue === 'object' && oValue !== null ) {\r\n      oPropertiesObject[sKey] = simpleMerge({}, oValue);\r\n    } else if (isInstanceOf(oValue, Date)) {\r\n      oPropertiesObject[sKey] = new Date();\r\n      oPropertiesObject[sKey].setTime(oValue.getTime());\r\n    } else {\r\n      oPropertiesObject[sKey] = oValue;\r\n    }\r\n  };\r\n}","code-length":219,"reference":"Sets properties and methods from a template object.\n","result":"Create a callback to set the object to the template.","score":[0.1086,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startAll() {\r\n  const oModules = getModules();\r\n  iterateObject(oModules, function (_oModule, sModuleId) {\r\n    if (!isTypeOf(_oModule, sNotDefined)) {\r\n      start(sModuleId, generateUniqueKey());\r\n    }\r\n  });\r\n}","code-length":85,"reference":"startAll is the method that will initialize all the registered modules.\n","result":"Start all modules.","score":[0.0337,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stop(sModuleId, sInstanceId) {\r\n  const oModules = getModules();\r\n  var oModule;\r\n  oModule = oModules[sModuleId];\r\n  if (isTypeOf(oModule, sNotDefined)) {\r\n    return false;\r\n  }\r\n  if (!isTypeOf(sInstanceId, sNotDefined)) {\r\n    _singleModuleStop(oModule, sInstanceId);\r\n  } else {\r\n    _multiModuleStop(oModule);\r\n  }\r\n  return true;\r\n}","code-length":138,"reference":"stop is the method that will finish the module if it was registered and started.\nWhen stop is called the module will call the destroy method and will nullify the instance.\n","result":"Stop a module.","score":[0,0.0177]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _multiModuleStop(oModule) {\r\n  iterateObject(oModule.instances, function (oInstance) {\r\n    if (!isTypeOf(oModule, sNotDefined) && !isTypeOf(oInstance, sNotDefined)) {\r\n      oInstance.destroy();\r\n    }\r\n  });\r\n  oModule.instances = {};\r\n}","code-length":95,"reference":"stop more than one module at the same time.\n","result":"Stop the module.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _singleModuleStop(oModule, sInstanceId) {\r\n  var oInstance = oModule.instances[sInstanceId];\r\n  if (!isTypeOf(oModule, sNotDefined) && !isTypeOf(oInstance, sNotDefined)) {\r\n    oInstance.destroy();\r\n    delete oModule.instances[sInstanceId];\r\n  }\r\n}","code-length":94,"reference":"Stop only one module.\n","result":"Stop the module.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stopAll() {\r\n  const oModules = getModules();\r\n  iterateObject(oModules, function (_oModule, sModuleId) {\r\n    if (!isTypeOf(_oModule, sNotDefined)) {\r\n      _stopOneByOne(_oModule, sModuleId);\r\n    }\r\n  });\r\n}","code-length":88,"reference":"stopAll is the method that will finish all the registered and started modules.","result":"Stop all modules.","score":[0.0173,0.213]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _stopOneByOne(oModule, sModuleId) {\r\n  iterateObject(oModule.instances, function (oItem, sInstanceId) {\r\n    stop(sModuleId, sInstanceId);\r\n  });\r\n}","code-length":63,"reference":"Loops over instances of modules to stop them.\n","result":"Stop one by one.","score":[0,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remove(sModuleId) {\r\n  const oModules = getModules();\r\n  var oModule = oModules[sModuleId];\r\n  if (isTypeOf(oModule, sNotDefined)) {\r\n    return null;\r\n  }\r\n  if (!isTypeOf(oModule, sNotDefined)) {\r\n    try {\r\n      return Module;\r\n    }\r\n    finally {\r\n      _delete(sModuleId);\r\n      createMapping(getMappingMaps(), 'hm_', oModules);\r\n    }\r\n  }\r\n  return null;\r\n}","code-length":150,"reference":"remove is the method that will remove the full module from the oModules object\n","result":"Remove a module.","score":[0,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _delete(sModuleId) {\r\n  const oModules = getModules();\r\n  if (!isTypeOf(oModules[sModuleId], sNotDefined)) {\r\n    delete oModules[sModuleId];\r\n    return true;\r\n  }\r\n  return false;\r\n}","code-length":79,"reference":"_delete is a wrapper method that will call the native delete javascript function\nIt's important to test the full code.\n","result":"Delete a module.","score":[0.0014,0.0546]}
{"code":"\/*is used to<extra_id_0>\r\nfunction main() {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var outputDataSize, interval, dataFrame, dateFormat, api;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    outputDataSize = \"compact\";\r\n                    if (argv.outputDataSize) {\r\n                        outputDataSize = argv.outputDataSize;\r\n                    }\r\n                    interval = '60min';\r\n                    if (argv.interval) {\r\n                        interval = argv.interval;\r\n                    }\r\n                    api = new index_1.AlphaVantageAPI(argv.apiKey, outputDataSize, argv.verbose);\r\n                    if (!(argv.type === 'daily')) return [3 , 2];\r\n                    return [4 , api.getDailyDataFrame(argv.symbol)];\r\n                case 1:\r\n                    dataFrame = _a.sent();\r\n                    dateFormat = 'YYYY-MM-DD';\r\n                    return [3 , 5];\r\n                case 2:\r\n                    if (!(argv.type === 'intraday')) return [3 , 4];\r\n                    return [4 , api.getIntradayDataFrame(argv.symbol, interval)];\r\n                case 3:\r\n                    dataFrame = _a.sent();\r\n                    dateFormat = \"YYYY-MM-DD HH:mm:ss\";\r\n                    return [3 , 5];\r\n                case 4: throw new Error(\"Unexpected data type: \" + argv.type + \", expected it to be either 'daily' or 'intrday'\");\r\n                case 5:\r\n                    if (!argv.verbose) {\r\n                        console.log('>> ' + argv.out);\r\n                    }\r\n                    dataFrame\r\n                        .transformSeries({\r\n                        Timestamp: function (t) { return moment(t).format(dateFormat); },\r\n                    })\r\n                        .asCSV()\r\n                        .writeFileSync(argv.out);\r\n                    return [2 ];\r\n            }\r\n        });\r\n    });\r\n}","code-length":495,"reference":"Entry point.","result":"Use the main function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(val) {\r\n                var valueInPicker = this.options.itemProperty ? this.pickerValue[this.options.itemProperty] : this.pickerValue;\r\n                return (val ? val : valueInPicker);\r\n            }","code-length":64,"reference":"Returns the formatted item value\n","result":"Create a function to return the value of the input.","score":[0.1291,0.2727]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(val) {\r\n                val = this.setValue(val);\r\n                if ((val !== false) && (val !== '')) {\r\n                    if (this.hasInput()) {\r\n                        this.input.val(this.getValue());\r\n                    } else {\r\n                        this.element.data('pickerValue', this.getValue());\r\n                    }\r\n                    this._trigger('pickerSetSourceValue', {\r\n                        pickerValue: val\r\n                    });\r\n                }\r\n                return val;\r\n            }","code-length":130,"reference":"Calls setValue and if it's a valid item value, sets the input or element value","result":"Set the value of the picker.","score":[0.0512,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(defaultValue) {\r\n                defaultValue = defaultValue || this.options.defaultValue;\r\n                var val = defaultValue;\r\n                if (this.hasInput()) {\r\n                    val = this.input.val();\r\n                } else {\r\n                    val = this.element.data('pickerValue');\r\n                    val = this.options.itemProperty ? val[this.options.itemProperty] : val;\r\n                }\r\n                if ((val === undefined) || (val === '') || (val === null) || (val === false)) {\r\n                    val = defaultValue;\r\n                }\r\n                return val;\r\n            }","code-length":153,"reference":"Returns the input or element item value, without formatting, or defaultValue\nif it's empty string, undefined, false or null\n","result":"Create a new function to return the value of the picker.","score":[0.0473,0.0549]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createMarkdownSerializer(indentCodeBlocks) {\r\n  return {\r\n    serialize: (name, suite) => snapshotToMarkdown(name, suite, indentCodeBlocks),\r\n    deserialize: markdownToSnapshot,\r\n  };\r\n}","code-length":64,"reference":"createMarkdownSerializer create a snapshot serializer.\n\n","result":"Serialize markdown.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction markdownToSnapshot(content) {\r\n  const tree = mdParser.parse(content);\r\n  const state = {\r\n    name: null,\r\n    suite: null,\r\n    suiteStack: [],\r\n    currentSuite: null,\r\n    currentSnapshotList: null,\r\n    depth: 0\r\n  };\r\n  const children = tree.children;\r\n  for (let i = 0; i < children.length; i++) {\r\n    const c = children[i];\r\n    switch (c.type) {\r\n      case 'heading':\r\n        if (c.depth === 1) {\r\n          enterRootSuite(state, c);\r\n        } else if (c.depth === 2) {\r\n          tryExit(state, suiteDepth(c));\r\n          enterSuite(state, c);\r\n        } else if (c.depth === 4) {\r\n          enterSnapshot(state, c);\r\n        }\r\n        break;\r\n      case 'code':\r\n        pushSnapshotCode(state, c);\r\n        break;\r\n    }\r\n  }\r\n  return { name: state.name, suite: state.suite };\r\n}","code-length":288,"reference":"markdownToSnapshot converts snapshot from markdown format into native.\n\n","result":"Create a snapshot of markdown content.","score":[0.1645,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tryExit(state, depth) {\r\n  while (state.depth >= depth) {\r\n    state.suiteStack.pop();\r\n    state.currentSuite = state.suiteStack[state.suiteStack.length - 1];\r\n    state.currentSnapshotList = null;\r\n    state.depth--;\r\n  }\r\n}","code-length":88,"reference":"tryExit tries to pop state until it has correct depth.\n\n","result":"Try to exit a suite.","score":[0.0884,0.1974]}
{"code":"\/*is used to<extra_id_0>\r\nfunction enterRootSuite(state, node) {\r\n  const inlineCode = node.children[0];\r\n  const name = inlineCode.value;\r\n  const suite = {\r\n    children: {},\r\n    snapshots: {}\r\n  }\r\n  state.name = name;\r\n  state.suite = suite;\r\n  state.suiteStack.push(suite);\r\n  state.currentSuite = suite;\r\n  state.currentSnapshotList = null;\r\n  state.depth = 0;\r\n}","code-length":129,"reference":"enterRootSuite pushes root suite into the current state.\n\n","result":"Identify the root suite.","score":[0.1398,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction enterSnapshot(state, node) {\r\n  const inlineCode = node.children[0];\r\n  const name = inlineCode.value;\r\n  const snapshotList = [];\r\n  state.currentSuite.snapshots[name] = snapshotList;\r\n  state.currentSnapshotList = snapshotList;\r\n}","code-length":82,"reference":"enterSnapshot pushes snapshot into the current state.\n\n","result":"Enter a snapshot.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pushSnapshotCode(state, node) {\r\n  state.currentSnapshotList.push({\r\n    lang: node.lang,\r\n    code: normalizeNewlines(node.value)\r\n  });\r\n}","code-length":59,"reference":"pushSnapshotCode adds snapshot to the current snapshot.\n\n","result":"Push code to the current snapshot list.","score":[0.3575,0.5357]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformSuite(name, suite, depth, indentCodeBlocks) {\r\n  const children = suite.children;\r\n  const snapshots = suite.snapshots;\r\n  const nextDepth = depth + 1;\r\n  let result = suiteHeader(name, depth);\r\n  let keys, i;\r\n  keys = Object.keys(snapshots);\r\n  for (i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    const snapshotList = snapshots[key];\r\n    result += transformSnapshotList(key, snapshotList, nextDepth, indentCodeBlocks);\r\n  }\r\n  keys = Object.keys(children);\r\n  for (i = 0; i < keys.length; i++) {\r\n    const key = keys[i];\r\n    result += transformSuite(key, children[key], nextDepth, indentCodeBlocks);\r\n  }\r\n  return result;\r\n}","code-length":224,"reference":"transformSuite converts suite from native into markdown format.\n\n","result":"Transform a suite.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformSnapshotList(name, snapshotList, depth, indentCodeBlocks) {\r\n  let result = snapshotHeader(name, depth);\r\n  for (let i = 0; i < snapshotList.length; i++) {\r\n    if (i > 0 && indentCodeBlocks) {\r\n      result += '---\\n\\n';\r\n    }\r\n    const snapshot = snapshotList[i];\r\n    const lang = snapshot.lang;\r\n    const code = snapshot.code;\r\n    const delimiter = safeDelimiter(code);\r\n    if (indentCodeBlocks) {\r\n      const lines = code.split('\\n');\r\n      for (let i = 0; i < lines.length; i++) {\r\n        result += '    ' + lines[i] + '\\n';\r\n      }\r\n    } else {\r\n      result += delimiter;\r\n      if (lang) {\r\n        result += lang;\r\n      }\r\n      result += '\\n' + code + '\\n' + delimiter + '\\n';\r\n    }\r\n    result += '\\n';\r\n  }\r\n  return result;\r\n}","code-length":270,"reference":"transformSnapshotList converts snapshot list from native into markdown format.\n\n","result":"Transform snapshot list.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction suiteHeader(name, depth) {\r\n  if (depth === -1) {\r\n    return \"# \" + serializeName(name) + \"\\n\\n\";\r\n  }\r\n  return \"## \" + indent(depth) + serializeName(name) + \"\\n\\n\";\r\n}","code-length":78,"reference":"suiteHeader serializes suite header.\n\n","result":"Generate the header.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction safeDelimiter(s, delimiter) {\r\n  if (delimiter === undefined) {\r\n    delimiter = '```';\r\n  }\r\n  while (s.indexOf(delimiter) !== -1) {\r\n    delimiter += '`';\r\n  }\r\n  return delimiter;\r\n}","code-length":76,"reference":"safeDelimiter tries to find a safe delimiter by appending backticks until it finally finds it.\n\n","result":"Return delimiter.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defaultPathResolver(basePath, suiteName) {\r\n  const suiteSourcePath = path.join(basePath, suiteName);\r\n  const suiteSourceDir = path.dirname(suiteSourcePath);\r\n  const sourceFileName = path.basename(suiteName);\r\n  return path.join(suiteSourceDir, \"__snapshots__\", sourceFileName + \".md\");\r\n}","code-length":92,"reference":"defaultPathResolver is a default path resolver for snapshot files.\n\n","result":"Resolve the default pathResolver.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatSnapshotList(list, limit) {\r\n  limit = (typeof limit != 'undefined') ? limit : -1;\r\n  const limitedList = limit > 0 ? list.slice(0, limit) : list;\r\n  const hasMore = list.length > limitedList.length;\r\n  const buildList = (snapshots) => snapshots.map((s) => s.join(' > ')).join('\\n');\r\n  if (hasMore) {\r\n    return buildList(limitedList.slice(0, -1)) + `\\n +${list.length - limitedList.length + 1} more`;\r\n  }\r\n  return buildList(limitedList);\r\n}","code-length":167,"reference":"Renders a list of snapshots up to specified limit of lines\n","result":"Format the list of snapshots in the database.","score":[0.1966,0.1402]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatUnusedSnapshotsWarning(list, limit) {\r\n  if (limit == 0) {\r\n    return `Found ${list.length} unused snapshots`;\r\n  }\r\n  const prunedList = formatSnapshotList(list, limit);\r\n  return `Found ${list.length} unused snapshots:\\n${prunedList}`;\r\n}","code-length":89,"reference":"Renders the message for unused snapshots warning\n","result":"FormatUnusedSnapshotsWarning.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction snapshotPreprocessor(basePath, loggerFactory) {\r\n  const logger = loggerFactory.create('preprocessor.snapshot');\r\n  return function (content, file, done) {\r\n    const root = snapshotSerializer.deserialize(content);\r\n    done(iifeWrapper('window.__snapshot__.addSuite(\"' + root.name + '\",' + JSON.stringify(root.suite) + ');'));\r\n  };\r\n}","code-length":106,"reference":"Snapshot preprocessor.\n\n","result":"Create a snapshot preprocessor.","score":[0.3195,0.8523]}
{"code":"\/*is used to<extra_id_0>\r\nfunction singleLinePlugin (options = {}) {\r\n  options = Object.assign({}, defaultOptions, options)\r\n  return {\r\n        blockRenderMap: Map({\r\n      'unstyled': {\r\n        element: 'div',\r\n      },\r\n    }),\r\n        onChange (editorState) {\r\n      const blocks = editorState.getCurrentContent().getBlocksAsArray()\r\n      if (blocks.length > 1) {\r\n        editorState = condenseBlocks(editorState, blocks, options)\r\n      } else {\r\n        let contentBlock = blocks[0]\r\n        let text = contentBlock.getText()\r\n        let characterList = contentBlock.getCharacterList()\r\n        let hasEntitiesToStrip = options.stripEntities && characterListhasEntities(characterList)\r\n        if (NEWLINE_REGEX.test(text) || hasEntitiesToStrip) {\r\n          text = replaceNewlines(text)\r\n          if (options.stripEntities) {\r\n            characterList = characterList.map(stripEntityFromCharacterMetadata)\r\n          }\r\n          contentBlock = new ContentBlock({\r\n            key: genKey(),\r\n            text: text,\r\n            type: 'unstyled',\r\n            characterList: characterList,\r\n            depth: 0,\r\n          })\r\n          const newContentState = ContentState.createFromBlockArray([contentBlock])\r\n          editorState = EditorState.push(editorState, newContentState, 'insert-characters')\r\n        }\r\n      }\r\n      return editorState\r\n    },\r\n        handleReturn (e) {\r\n      return 'handled'\r\n    },\r\n  }\r\n}","code-length":398,"reference":"Single Line Plugin\n","result":"Enable the plugin .","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceNewlines(str) {\r\n  var replacement = arguments.length <= 1 || arguments[1] === undefined ? ' ' : arguments[1];\r\n  return str.replace(NEWLINE_REGEX, replacement);\r\n}","code-length":61,"reference":"Replace newline characters with the passed string\n","result":"Replace new lines.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction condenseBlocks(editorState, blocks, options) {\r\n  blocks = blocks || editorState.getCurrentContent().getBlocksAsArray();\r\n  var text = (0, _immutable.List)();\r\n  var characterList = (0, _immutable.List)();\r\n  blocks.forEach(function (block) {\r\n    if (block.getType() !== 'atomic') {\r\n      text = text.push(replaceNewlines(block.getText()));\r\n      characterList = characterList.concat(block.getCharacterList());\r\n    }\r\n  });\r\n  if (options.stripEntities) {\r\n    characterList = characterList.map(stripEntityFromCharacterMetadata);\r\n  }\r\n  var contentBlock = new _draftJs.ContentBlock({\r\n    key: (0, _draftJs.genKey)(),\r\n    text: text.join(''),\r\n    type: 'unstyled',\r\n    characterList: characterList,\r\n    depth: 0\r\n  });\r\n  var newContentState = _draftJs.ContentState.createFromBlockArray([contentBlock]);\r\n  editorState = _draftJs.EditorState.push(editorState, newContentState, 'remove-range');\r\n  return _draftJs.EditorState.moveFocusToEnd(editorState);\r\n}","code-length":317,"reference":"Condense an array of content blocks into a single block\n","result":"Remove newlines.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction characterListhasEntities(characterList) {\r\n  var hasEntities = false;\r\n  characterList.forEach(function (characterMeta) {\r\n    if (characterMeta.get('entity') !== null) {\r\n      hasEntities = true;\r\n    }\r\n  });\r\n  return hasEntities;\r\n}","code-length":85,"reference":"Check if a CharacterList contains entities\n","result":"Check if a characterList has entities.","score":[0.3976,0.6615]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hexRgb(hex){\r\n    let shorthandCheck = \/^([a-f\\d])([a-f\\d])([a-f\\d])$\/i,\r\n        rgbRegex = \/^([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$\/i,\r\n        rgb;\r\n    hex = hex.replace(shorthandCheck, function(m, r, g, b) {\r\n      return r + r + g + g + b + b;\r\n    });\r\n    rgb = hex.replace(\/^\\s+|\\s+$\/g, '').match(rgbRegex);\r\n    return rgb ? [\r\n      parseInt(rgb[1], 16),\r\n      parseInt(rgb[2], 16),\r\n      parseInt(rgb[3], 16)\r\n    ] : false;\r\n  }","code-length":211,"reference":"Hex to RGB converter\n","result":"Convert hex to rgb .","score":[0.2403,0.9146]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ruleHandler(decl, result) {\r\n    let input = decl.value;\r\n    let output = input.replace(\/rgba\\(#(.*?),\/g, (match, hex) => {\r\n      let rgb = hexRgb(hex),\r\n          matchHex = new RegExp('#' + hex);\r\n              if (!rgb) {\r\n        result.warn('not a valid hex', { node: decl });\r\n        return match;\r\n      }\r\n      rgb = rgb.toString();\r\n            return match.replace(matchHex, rgb);\r\n    });\r\n    decl.replaceWith({\r\n      prop: decl.prop,\r\n      value: output,\r\n      important: decl.important\r\n    });\r\n  }","code-length":179,"reference":"CSS rule handler\n","result":"Replace the CSS rule.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n            for (var i = 0; i < this.config.methods.length; i++) {\r\n                var key = this.config.methods[i];\r\n                if (!analytics[key]) {\r\n                    analytics[key] = analytics.factory(key);\r\n                }\r\n                this[key] = this.factory(key);\r\n            }\r\n        }","code-length":99,"reference":"Creates analytics.js method stubs","result":"Initialize the analytics module.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction debug(namespace) {\r\n  function disabled() {\r\n  }\r\n  disabled.enabled = false;\r\n  function enabled() {\r\n    var self = enabled;\r\n    var curr = +new Date();\r\n    var ms = curr - (prevTime || curr);\r\n    self.diff = ms;\r\n    self.prev = prevTime;\r\n    self.curr = curr;\r\n    prevTime = curr;\r\n    if (null == self.useColors) self.useColors = exports.useColors();\r\n    if (null == self.color && self.useColors) self.color = selectColor();\r\n    var args = new Array(arguments.length);\r\n    for (var i = 0; i < args.length; i++) {\r\n      args[i] = arguments[i];\r\n    }\r\n    args[0] = exports.coerce(args[0]);\r\n    if ('string' !== typeof args[0]) {\r\n      args = ['%o'].concat(args);\r\n    }\r\n    var index = 0;\r\n    args[0] = args[0].replace(\/%([a-z%])\/g, function(match, format) {\r\n      if (match === '%%') return match;\r\n      index++;\r\n      var formatter = exports.formatters[format];\r\n      if ('function' === typeof formatter) {\r\n        var val = args[index];\r\n        match = formatter.call(self, val);\r\n        args.splice(index, 1);\r\n        index--;\r\n      }\r\n      return match;\r\n    });\r\n    args = exports.formatArgs.apply(self, args);\r\n    var logFn = enabled.log || exports.log || console.log.bind(console);\r\n    logFn.apply(self, args);\r\n  }\r\n  enabled.enabled = true;\r\n  var fn = exports.enabled(namespace) ? enabled : disabled;\r\n  fn.namespace = namespace;\r\n  return fn;\r\n}","code-length":487,"reference":"Create a debugger with the given `namespace`.\n\n","result":"Debug functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isBuf$1(obj) {\r\n  return (commonjsGlobal.Buffer && commonjsGlobal.Buffer.isBuffer(obj)) ||\r\n         (commonjsGlobal.ArrayBuffer && obj instanceof ArrayBuffer);\r\n}","code-length":60,"reference":"Returns true if obj is a buffer or an arraybuffer.\n\n","result":"Detect if an object is a buffer.","score":[0.1769,0.3254]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encode$1(num) {\r\n  var encoded = '';\r\n  do {\r\n    encoded = alphabet[num % length] + encoded;\r\n    num = Math.floor(num \/ length);\r\n  } while (num > 0);\r\n  return encoded;\r\n}","code-length":76,"reference":"Return a string representing the specified number.\n\n","result":"Encode numbers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction decode$1(str) {\r\n  var decoded = 0;\r\n  for (i = 0; i < str.length; i++) {\r\n    decoded = decoded * length + map[str.charAt(i)];\r\n  }\r\n  return decoded;\r\n}","code-length":75,"reference":"Return the integer value specified by the given string.\n\n","result":"Decode strings.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Polling$1 (opts) {\r\n  var forceBase64 = (opts && opts.forceBase64);\r\n  if (!hasXHR2 || forceBase64) {\r\n    this.supportsBinary = false;\r\n  }\r\n  Transport.call(this, opts);\r\n}","code-length":77,"reference":"Polling interface.\n\n","result":"Poll for data .","score":[0,0.2273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onupgrade (to) {\r\n    if (transport$$1 && to.name !== transport$$1.name) {\r\n      debug$2('\"%s\" works - aborting \"%s\"', to.name, transport$$1.name);\r\n      freezeTransport();\r\n    }\r\n  }","code-length":78,"reference":"When the socket is upgraded while we're probing","result":"Detect transport upgrades.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cleanup () {\r\n    transport$$1.removeListener('open', onTransportOpen);\r\n    transport$$1.removeListener('error', onerror);\r\n    transport$$1.removeListener('close', onTransportClose);\r\n    self.removeListener('close', onclose);\r\n    self.removeListener('upgrading', onupgrade);\r\n  }","code-length":90,"reference":"Remove all listeners on the transport and on self","result":"Clean up after the transport is closed.","score":[0.1716,0.2131]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Backoff$1(opts) {\r\n  opts = opts || {};\r\n  this.ms = opts.min || 100;\r\n  this.max = opts.max || 10000;\r\n  this.factor = opts.factor || 2;\r\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\r\n  this.attempts = 0;\r\n}","code-length":107,"reference":"Initialize backoff timer with `opts`.\n\n- `min` initial timeout in milliseconds [100]\n- `max` max timeout [10000]\n- `jitter` [0]\n- `factor` [2]\n\n","result":"Create a new instance of the backoff.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extract(str, options) {\r\n  const res = babylon.parse(str, options);\r\n  return res.comments;\r\n}","code-length":44,"reference":"Extract code comments from the given `string`.\n\n```js\nvar extract = require('babel-extract-comments');\nconsole.log(extract('\/\/ this is a code comment'));\n\/\/ [{ type: 'CommentBlock',\n\/\/  value: '!\\n * babel-extract-comments <https:\/\/github.com\/jonschlinkert\/babel-extract-comments>\\n *\\n *\n\/\/ Copyright (c) 2014-2018, Jon Schlinkert.\\n * Released under the MIT License.\\n ',\n\/\/   start: 0,\n\/\/   end: 173,\n\/\/   loc: SourceLocation { start: [Position], end: [Position] } }]\n```\n","result":"Extract comments.","score":[0.0,0.0092]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bindNgModelControls(api) {\r\n      ngModel.$render = () => {\r\n        api.set(ngModel.$modelValue);\r\n      };\r\n      api.on('update', () => {\r\n        const positions = api.get();\r\n        ngModel.$setViewValue(positions);\r\n      });\r\n    }","code-length":90,"reference":"Add ngModel controls to the directive. This allows the use of ngModel to set and get the\nvalue in the slider. It uses the noUiSlider API's get and set functions, so no custom\nformatters need to be defined for ngModel. The ngModelOptions can be used.\n\n","result":"Bind NgModelControls .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createInstance() {\r\n      const api = extendApi(noUiSlider.create(htmlElement, options));\r\n      setCreatedWatcher(api);\r\n      setOptionsWatcher(api);\r\n      if (ngModel !== null) {\r\n        bindNgModelControls(api);\r\n      }\r\n    }","code-length":80,"reference":"Creates a noUiSlider instance.","result":"Create the instance.","score":[0.2925,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(w) {\r\n    let vow = \/[aeiouy]$\/;\r\n    let chars = w.split('');\r\n    let before = '';\r\n    let after = '';\r\n    let current = '';\r\n    for (let i = 0; i < chars.length; i++) {\r\n      before = chars.slice(0, i).join('');\r\n      current = chars[i];\r\n      after = chars.slice(i + 1, chars.length).join('');\r\n      let candidate = before + chars[i];\r\n      if (before.match(ends_with_vowel) && !current.match(ends_with_vowel)) {\r\n        if (after.match(starts_with_e_then_specials)) {\r\n          candidate += 'e';\r\n          after = after.replace(starts_with_e, '');\r\n        }\r\n        all.push(candidate);\r\n        return doer(after);\r\n      }\r\n      if (candidate.match(ends_with_noisy_vowel_combos)) {\r\n        all.push(before);\r\n        all.push(current);\r\n        return doer(after);\r\n      }\r\n      if (candidate.match(ends_with_vowel) && after.match(starts_with_consonant_vowel)) {\r\n        all.push(candidate);\r\n        return doer(after);\r\n      }\r\n    }\r\n    if (str.match(aiouy) || str.match(ends_with_ee)) {\r\n      all.push(w);\r\n    } else {\r\n      all[all.length - 1] = (all[all.length - 1] || '') + w;\r\n    }\r\n    return null;\r\n  }","code-length":432,"reference":"method is nested because it's called recursively","result":"Build a regex for the regex .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addApi(self, apiName, api) {\r\n  for (var name in api) {\r\n    var fn = api[name];\r\n    if (typeof fn === \"function\")\r\n      api[name] = api[name].bind(self);\r\n  }\r\n    var tmp = null;\r\n  api.replied = new Promise((resolve, reject) => {\r\n    tmp = { resolve, reject };\r\n  });\r\n  api.replied.resolve = tmp.resolve;\r\n  api.replied.reject = tmp.reject;\r\n    self[apiName] = api;\r\n}","code-length":155,"reference":"Used by ProxyDomain-derived classes to create an API method called apiName; the API\ncan have methods `send` and `reply` which are bound to `self`; a promise is created\nin `api.replied` which is satisfied after the `reply` method has been called\n\n","result":"Add a new api.","score":[0.0,0.0137]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getJson(path) {\r\n      return httpGet({\r\n        hostname: t.options.remoteClientHostname,\r\n        port: t.options.remoteClientPort,\r\n        path: path,\r\n        method: 'GET'\r\n      }).then((obj) => {\r\n        var contentType = getContentType(obj.response);\r\n        if (contentType !== \"application\/json\")\r\n          LOG.warn(\"Expecting JSON from \" + path + \" but found wrong content type: \" + contentType);\r\n                try {\r\n          return JSON.parse(obj.data);\r\n        } catch(ex) {\r\n          LOG.warn(\"Cannot parse JSON returned from \" + path);\r\n          return null;\r\n        }\r\n      });\r\n    }","code-length":183,"reference":"Gets JSON from the remote server","result":"Get the json from a remote server.","score":[0.2125,0.6098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitName(method) {\r\n  var pos = method.indexOf('.');\r\n  if (pos < 0)\r\n    return [ null, method ];\r\n  var domainName = method.substring(0, pos);\r\n  var methodName = method.substring(pos + 1);\r\n  return [ domainName, methodName ];\r\n}","code-length":88,"reference":"Splits a string into domain and method","result":"Split method names.","score":[0.1076,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyToClient(req, res) {\r\n        return httpGet({\r\n          hostname: t.options.remoteClientHostname,\r\n          port: t.options.remoteClientPort,\r\n          path: req.originalUrl,\r\n          method: 'GET'\r\n        }).then(function (obj) {\r\n          var contentType = getContentType(obj.response);\r\n          if (contentType) res.set(\"Content-Type\", contentType);\r\n          res.send(obj.data);\r\n        });\r\n      }","code-length":129,"reference":"Gets data from the remote server and copies it to the client","result":"Copy the file to the remote client.","score":[0.1471,0.3235]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    const origPrepareStackTrace = Error.prepareStackTrace\r\n    Error.prepareStackTrace = (_, stack) => stack\r\n    const err = new Error()\r\n    const stack = err.stack\r\n    Error.prepareStackTrace = origPrepareStackTrace\r\n    stack.shift()\r\n    return stack\r\n  }","code-length":84,"reference":"Get native stack\n","result":"Create a new function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction captureStdio(opts, exec) {\r\n  var streams = [\r\n    process.stdout,\r\n    process.stderr\r\n  ];\r\n  var outputs = capture(streams, opts, exec);\r\n  return {\r\n    stdout: outputs.shift(),\r\n    stderr: outputs.shift()\r\n  };\r\n}","code-length":89,"reference":"Captures stdout and stderr into an object for\nthe provided execution scope.\n\n","result":"Capture stdio.","score":[0,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hook(stream, opts, exec) {\r\n  var args = _shift(opts, exec);\r\n  opts = args[0];\r\n  exec = args[1];\r\n  var old_write = stream.write;\r\n  stream.write = (function override(stream, writer) {\r\n    return function write(string, encoding, fd) {\r\n      exec(string, encoding, fd);\r\n      if (!opts['quiet']) {\r\n        writer.apply(stream, [ string, encoding, fd ]);\r\n      }\r\n    }\r\n  })(stream, stream.write);\r\n  return function unhook() {\r\n    stream.write = old_write;\r\n    return true;\r\n  }\r\n}","code-length":182,"reference":"Listens to a provided stream, and executes the provided\nfunction for every write call. Accepts options to silence\nthe output going to the console.\n\nReturns a function to call when you wish to stop listening\nto the call.\n\n","result":"Hook the stream.","score":[0.0,0.0145]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startCapture(stream, opts, exec) {\r\n  var unhook = hook(stream, opts, exec);\r\n  var str_id = random.generate();\r\n  unhooks[str_id] = unhook;\r\n  stream._id = str_id;\r\n  return true;\r\n}","code-length":81,"reference":"Starts a capture on the provided stream using the\nprovided options and stream execution.\n\n","result":"Start capturing.","score":[0,0.0391]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _wrapIntercept(func, stream, opts, exec) {\r\n  var idex = Number(arguments.length > 3);\r\n  var args = _shift(arguments[idex + 1], arguments[idex + 2]);\r\n  opts = args[0];\r\n  exec = args[1];\r\n  opts.quiet = true;\r\n  return idex\r\n    ? func(stream, opts, exec)\r\n    : func(opts, exec);\r\n}","code-length":119,"reference":"Wraps capturing functions with quiet flags to\nallow for interception.\n\n","result":"Wrap intercepts .","score":[0,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNearest($select, value) {\r\n                var delta = {};\r\n                $select.children('option').each(function(i, opt){\r\n                    var optValue = $(opt).attr('value'),\r\n                    distance;\r\n                    if(optValue === '') return;\r\n                    distance = Math.abs(optValue - value); \r\n                    if(typeof delta.distance === 'undefined' || distance < delta.distance) {\r\n                        delta = {value: optValue, distance: distance};\r\n                    } \r\n                }); \r\n                return delta.value;\r\n            }","code-length":144,"reference":"function to find nearest value in select options","result":"Get the nearest option of a select .","score":[0.1652,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction evenRound(x) {\r\n    if ((x > 0 && (x % 1) === +0.5 && (x & 1) === 0) ||\r\n        (x < 0 && (x % 1) === -0.5 && (x & 1) === 1)) {\r\n        return censorNegativeZero(Math.floor(x));\r\n    }\r\n    return censorNegativeZero(Math.round(x));\r\n}","code-length":111,"reference":"Round x to the nearest integer, choosing the even integer if it lies halfway between two.","result":"Avoid rounding errors.","score":[0,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addFrameAt(time, value, delay, array)\r\n{\r\n\tarray.push({ time:time, value:value, delay:delay });\r\n}","code-length":47,"reference":"`delay` only used for debugging","result":"Add frames.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sentiment(options) {\r\n  return transformer\r\n  function transformer(node) {\r\n    var concatenate = concatenateFactory()\r\n    visit(node, any(options))\r\n    visit(node, concatenate)\r\n    concatenate.done()\r\n  }\r\n}","code-length":73,"reference":"Patch `polarity` and `valence` properties on nodes with a value and word-nodes.  Then, patch the same properties on their parents.","result":"Generate the sentiment .","score":[0.0059,0.0272]}
{"code":"\/*is used to<extra_id_0>\r\nfunction concatenateFactory() {\r\n  var queue = []\r\n  concatenate.done = done\r\n  return concatenate\r\n  function concatenate(node, index, parent) {\r\n    if (parent && parent.type !== 'WordNode' && queue.indexOf(parent) === -1) {\r\n      queue.push(parent)\r\n    }\r\n  }\r\n  function one(node) {\r\n    var children = node.children\r\n    var length = children.length\r\n    var polarity = 0\r\n    var index = -1\r\n    var child\r\n    var hasNegation\r\n    while (++index < length) {\r\n      child = children[index]\r\n      if (child.data && child.data.polarity) {\r\n        polarity += (hasNegation ? -1 : 1) * child.data.polarity\r\n      }\r\n      if (child.type === 'WordNode') {\r\n        if (hasNegation) {\r\n          hasNegation = false\r\n        } else if (isNegation(child)) {\r\n          hasNegation = true\r\n        }\r\n      }\r\n    }\r\n    patch(node, polarity)\r\n  }\r\n  function done() {\r\n    var length = queue.length\r\n    var index = -1\r\n    queue.reverse()\r\n    while (++index < length) {\r\n      one(queue[index])\r\n    }\r\n  }\r\n}","code-length":352,"reference":"Factory to gather parents and patch them based on their childrens directionality.","result":"Create a factory function for concatenating words.","score":[0,0.0435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction one(node) {\r\n    var children = node.children\r\n    var length = children.length\r\n    var polarity = 0\r\n    var index = -1\r\n    var child\r\n    var hasNegation\r\n    while (++index < length) {\r\n      child = children[index]\r\n      if (child.data && child.data.polarity) {\r\n        polarity += (hasNegation ? -1 : 1) * child.data.polarity\r\n      }\r\n      if (child.type === 'WordNode') {\r\n        if (hasNegation) {\r\n          hasNegation = false\r\n        } else if (isNegation(child)) {\r\n          hasNegation = true\r\n        }\r\n      }\r\n    }\r\n    patch(node, polarity)\r\n  }","code-length":205,"reference":"Patch all words in `parent`.","result":"Detect the first word of a node.","score":[0,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction done() {\r\n    var length = queue.length\r\n    var index = -1\r\n    queue.reverse()\r\n    while (++index < length) {\r\n      one(queue[index])\r\n    }\r\n  }","code-length":65,"reference":"Patch all parents.","result":"Prevent multiple calls.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction any(config) {\r\n  return setter\r\n  function setter(node) {\r\n    var value\r\n    var polarity\r\n    if ('value' in node || node.type === 'WordNode') {\r\n      value = nlcstToString(node)\r\n      if (config && own.call(config, value)) {\r\n        polarity = config[value]\r\n      } else if (own.call(polarities, value)) {\r\n        polarity = polarities[value]\r\n      }\r\n      if (polarity) {\r\n        patch(node, polarity)\r\n      }\r\n    }\r\n  }\r\n}","code-length":164,"reference":"Factory to patch based on the bound `config`.","result":"Detect any node.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction patch(node, polarity) {\r\n  var data = node.data || {}\r\n  data.polarity = polarity || 0\r\n  data.valence = classify(polarity)\r\n  node.data = data\r\n}","code-length":65,"reference":"Patch a `polarity` and valence property on `node`s.","result":"Patch a node.","score":[0.109,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fire(event, target, listener) {\r\n\t\tvar returned, oldData;\r\n\t\tif (listener.d !== null) {\r\n\t\t\toldData = event.data;\r\n\t\t\tevent.data = listener.d;\r\n\t\t\treturned = listener.h.call(target, event, target);\r\n\t\t\tevent.data = oldData;\r\n\t\t} else {\r\n\t\t\treturned = listener.h.call(target, event, target);\r\n\t\t}\r\n\t\treturn returned;\r\n\t}","code-length":137,"reference":"Fire a listener on a target\n\n","result":"\t\treturn true.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Delegate(root) {\r\n\t\tvar\r\n\t\t\t\r\n\t\t\tthat = this,\r\n\t\t\t\r\n\t\t\tlistenerList = {};\r\n\t\tif (typeof root === 'string') {\r\n\t\t\troot = document.querySelector(root);\r\n\t\t}\r\n\t\tif (!root || !root.addEventListener) {\r\n\t\t\tthrow new TypeError('Root node not specified');\r\n\t\t}\r\n\t\t\r\n\t\tthis.on = function() {\r\n\t\t\tArray.prototype.unshift.call(arguments, that, listenerList, root);\r\n\t\t\ton.apply(that, arguments);\r\n\t\t\treturn this;\r\n\t\t};\r\n\t\t\r\n\t\tthis.off = function() {\r\n\t\t\tArray.prototype.unshift.call(arguments, that, listenerList, root);\r\n\t\t\toff.apply(that, arguments);\r\n\t\t\treturn this;\r\n\t\t};\r\n\t\t\r\n\t\tthis.handle = function(event) {\r\n\t\t\thandle.call(that, listenerList, root, event);\r\n\t\t};\r\n\t}","code-length":267,"reference":"DOM event delegator\n\nThe delegator will listen for events that bubble up to the root node.\n\n","result":"Create a delegate object.","score":[0,0.0338]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fm(options) {\r\n    var Module = fm.modules[options.module];\r\n    if (Module) {\r\n      return new Module(options);\r\n    }\r\n    throw new Error(\"Unable to find module '\" + options.module + \"'\");\r\n  }","code-length":73,"reference":"Shortcut method for\ncreating lazy views.\n\n","result":"Create a module .","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(structure = []) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tif (Array.isArray(structure) === false) {\r\n\t\t\t\tthrow new Error(`'structure' must be an array`)\r\n\t\t\t}\r\n\t\t\tparseStructure(structure, opts.cwd)\r\n\t\t\t\t.then((parsedStructure) => writeStructure(parsedStructure))\r\n\t\t\t\t.then((parsedStructure) => binStructure(parsedStructure, bin, opts.persistent))\r\n\t\t\t\t.then(resolve, reject)\r\n\t\t})\r\n\t}","code-length":141,"reference":"Converts an object into a persistent or temporary directory structure.\n","result":"Create a new function.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addAndWhereDate(queryBuilder, column, from, to) {\r\r\n  if (from && to) {\r\r\n    queryBuilder.whereBetween(column, [from, to]);\r\r\n  } else if (from) {\r\r\n    queryBuilder.andWhere(column, '>=', from);\r\r\n  } else if (to) {\r\r\n    queryBuilder.andWhere(column, '<=', to);\r\r\n  }\r\r\n}","code-length":115,"reference":"Appends WHERE conditions to query builder based on given date parameters\n","result":"Add and where date.","score":[0,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _handleMultiValuedParameters(knexBuilder, attrName, parameter) {\r\r\n  if (parameter instanceof Set) {\r\r\n    knexBuilder = knexBuilder.whereIn(attrName, Array.from(parameter));\r\r\n  } else if (Array.isArray(parameter)) {\r\r\n    knexBuilder = knexBuilder.whereIn(attrName, parameter);\r\r\n  } else {\r\r\n    knexBuilder = knexBuilder.where(attrName, parameter);\r\r\n  }\r\r\n\r\r\n  return knexBuilder;\r\r\n}","code-length":143,"reference":"Use this to add an equation clause for the value which is either an object or an array\n","result":"Valued parameters.","score":[0,0.0305]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getKnexInstance(config, registry = _registry, logger = console) {\r\r\n  validate.notNil(config, 'Config is null or undefined');\r\r\n  validate.notNil(config.client, 'DB client is null or undefined');\r\r\n\r\r\n  const { host, database, user } = config.connection;\r\r\n  const connectionTimeout = config.acquireConnectionTimeout;\r\r\n\r\r\n  logger.info(`Init db: ${user}\/<Password omitted>@${host} db: ${database}`);\r\r\n  logger.info(`Timeout: ${connectionTimeout}`);\r\r\n\r\r\n  const knex = module.exports._initKnexInstance(config);\r\r\n  module.exports.registerKnexInstance(knex, registry);\r\r\n  return knex;\r\r\n}","code-length":203,"reference":"Get Knex instance without validating the connection\n","result":"Initialize the knex instance.","score":[0.1509,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction closeAllInstances(registry = _registry) {\r\r\n  const promises = [];\r\r\n  const errors = [];\r\r\n  while (registry.length > 0) {\r\r\n    const knex = registry.pop();\r\r\n    const destructionPromise = knex.destroy().catch(e => {\r\r\n      errors.push({\r\r\n        knex,\r\r\n        cause: e\r\r\n      });\r\r\n    });\r\r\n    promises.push(destructionPromise);\r\r\n  }\r\r\n  return Promise.all(promises).then(() => {\r\r\n    return errors;\r\r\n  });\r\r\n}","code-length":166,"reference":"Attempts to close all registered knex instances\n","result":"Close all instances.","score":[0.1076,0.2841]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remarkHljs({ aliases }) {\r\n\treturn ast =>\r\n\t\tvisit(ast, 'code', node => {\r\n\t\t\tif (!node.data) {\r\n\t\t\t\tnode.data = {};\r\n\t\t\t}\r\n\t\t\tconst lang = node.lang;\r\n\t\t\tconst highlighted = lang\r\n\t\t\t\t? low.highlight(aliases[lang] || lang, node.value).value\r\n\t\t\t\t: low.highlightAuto(node.value).value;\r\n\t\t\tnode.data.hChildren = highlighted;\r\n\t\t\tnode.data.hProperties = {\r\n\t\t\t\tclassName: ['hljs', lang && `language-${lang}`],\r\n\t\t\t};\r\n\t\t});\r\n}","code-length":179,"reference":"Remark plugin for Highlight.js.\n\n","result":"Remark the HLJS code.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction render(processor, source) {\r\n\ttry {\r\n\t\treturn processor.processSync(source).contents;\r\n\t} catch (exception) {\r\n\t\tconst error = `Error while rendering Markdown: ${exception.message}`;\r\n\t\tconsole.error(error);\r\n\t\treturn errorInlineHtml(error).toString();\r\n\t}\r\n}","code-length":94,"reference":"Render Markdow using given processor.\n\n","result":"Render markdown.","score":[0.1116,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createColorArrow(defElement, color) {\r\n    defElement.append(\"marker\")\r\n        .attr(\"id\", \"arrow-\" + color)\r\n        .attr(\"viewBox\", \"0 -5 10 10\")\r\n        .attr(\"refX\", 8)\r\n        .attr(\"markerWidth\", 6)\r\n        .attr(\"markerHeight\", 6)\r\n        .attr(\"fill\", color)\r\n        .attr(\"orient\", \"auto\")\r\n        .append(\"path\")\r\n        .attr(\"d\", \"M0,-5L10,0L0,5\")\r\n        .attr(\"class\", \"arrowHead\");\r\n}","code-length":160,"reference":"Appends an arrow head marker to the defs element to be used later.\n","result":"Create color arrow.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction valueParserNodesLength (length, operator = '===') {\r\n    return t.binaryExpression(\r\n        operator,\r\n        valueParserASTNodesLength,\r\n        t.numericLiteral(length)\r\n    );\r\n}","code-length":64,"reference":"Test that the nodes from postcss-value-parser are a certain length. This\nuses strict equality by default, but you can supply an alternate operator.\n\n","result":"Create the valueParserASTNodesLength function.","score":[0.0028,0.0237]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sliceThen(file, offset, len) {\r\n    var p = new Promise(function(_resolve) {\r\n      fs.open(file, 'r', function(err, fd){\r\n        if (err) {\r\n          throw err;\r\n        }\r\n        var res = new Buffer(len);\r\n        fs.read(fd, res, 0, len, offset, function(err, bytesRead, buffer){\r\n          if (err) {\r\n            throw err;\r\n          }\r\n          _resolve(buffer);\r\n        });\r\n      });\r\n    });\r\n        p.exec = function(proc ) {\r\n      var args = Array.prototype.slice.call(arguments, 1);\r\n      return p.then(function(data) {\r\n          args.unshift(data);\r\n          var ret = proc.apply(null, args);\r\n          return resolve(ret !== UNDEFINED && ret._spreadus_ ? ret : [ret]);\r\n      });\r\n    };\r\n            return p;\r\n  }","code-length":250,"reference":"var fd = null; var fdFileName = null;","result":"Slice the file .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction harvest(outcomes) {\r\n    return Promise.settle(outcomes).then(function(results) {\r\n      if (results.length === 0) {\r\n        return reject(\"** NOT FOUND **\");\r\n      }\r\n            var solved = [], failed = [];\r\n      for (var i = 0; i < results.length; i++) {\r\n        if (results[i].isResolved()) {\r\n          solved.push(results[i].value());\r\n        } else {\r\n          failed.push(results[i].reason());\r\n        }\r\n      }\r\n      return solved.length ? solved : failed;\r\n    });\r\n  }","code-length":172,"reference":"Harvest any resolved promises, if all failed then return reasons.","result":"Perform the harvesting.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(keyAt) {\r\n                var hi = (arr.length >> 1) - 1, lo = 0, i = (lo + hi) >> 1, val = arr[(i << 1) + 1];\r\n                if (keyAt > arr[(hi << 1) + 1] || keyAt < 0) {\r\n                  return;\r\n                }\r\n                while (true) {                    \r\n                  if (hi - lo <= 1) {\r\n                    if (i < hi) {\r\n                      return {\r\n                        block_no:     i,\r\n                        comp_offset:  arr[i <<= 1],\r\n                        comp_size:    arr[i + 2] - arr[i],\r\n                        decomp_offset:arr[i + 1],\r\n                        decomp_size:  arr[i + 3] - arr[i + 1]\r\n                      };\r\n                    } else {\r\n                      return;\r\n                    }\r\n                  }\r\n                  (keyAt < val)  ? hi = i : lo = i;\r\n                  i = (lo + hi) >> 1;\r\n                  val = arr[(i << 1) + 1];\r\n                }\r\n              }","code-length":285,"reference":"Given offset of a keyword after decompression, return a record block info containing it, else undefined if not found.","result":"Detect blocks that are not in the cache.","score":[0.0351,0.0559]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(len) {\r\n          len *= _bpu;\r\n          var read = conseq(_decoder.decode(newUint8Array(buf, offset, len)), this.forward(len + _tail));\r\n          return read;\r\n        }","code-length":67,"reference":"Read data to an Uint8Array and decode it to text with specified encoding. ","result":"Decode data.","score":[0,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(len) {\r\n          return conseq(newUint8Array(buf, offset, len), this.forward(len === UNDEFINED ? buf.length - offset : len));\r\n        }","code-length":52,"reference":"Read raw data as Uint8Array from current offset with specified length in bytes","result":"Create a function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_header_sect(input, len) {\r\n      var scanner = Scanner(input),\r\n          header_str = scanner.readUTF16(len).replace(\/\\0$\/, '');\r\n      var doc = new DOMParser().parseFromString(header_str,'text\/xml');\r\n      var elem = doc.getElementsByTagName('Dictionary')[0];\r\n      if (!elem) {\r\n        elem = doc.getElementsByTagName('Library_Data')[0];\r\n      }\r\n      for (var i = 0, item; i < elem.attributes.length; i++) {\r\n        item = elem.attributes[i];\r\n        attrs[item.nodeName] = item.nodeValue;\r\n      }\r\n      attrs.Encrypted = parseInt(attrs.Encrypted, 10) || 0;\r\n      config();\r\n      return spreadus(len + 4, input);\r\n    }","code-length":215,"reference":"Read header section, parse dictionary attributes and config scanner according to engine version attribute.\n","result":"Read the header section.","score":[0.0312,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_keyword_summary(input, offset) {\r\n      var scanner = Scanner(input);\r\n      scanner.forward(offset);\r\n      return {\r\n        num_blocks:           scanner.readNum(),\r\n        num_entries:          scanner.readNum(),\r\n        key_index_decomp_len: _v2 && scanner.readNum(),\r\n        key_index_comp_len:   scanner.readNum(),\r\n        key_blocks_len:       scanner.readNum(),\r\n        chksum:               scanner.checksum_v2(),\r\n        len:                  scanner.offset() - offset,\r\n      };\r\n    }","code-length":160,"reference":"Read keyword summary at the begining of keyword section.\n","result":"Read keyword summary data.","score":[0.1885,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_keyword_index(input, keyword_summary) {\r\n      var scanner = Scanner(input).readBlock(keyword_summary.key_index_comp_len, keyword_summary.key_index_decomp_len, _decryptors[1]),\r\n          keyword_index = Array(keyword_summary.num_blocks),\r\n          offset = 0;\r\n      for (var i = 0, size; i < keyword_summary.num_blocks; i++) {\r\n        keyword_index[i] = {\r\n          num_entries: conseq(scanner.readNum(), size = scanner.readShort()),\r\n          first_word:  conseq(scanner.readTextSized(size), size = scanner.readShort()),\r\n          last_word:   scanner.readTextSized(size),\r\n          comp_size:   size = scanner.readNum(),\r\n          decomp_size: scanner.readNum(),\r\n          offset: offset,\r\n          index: i\r\n        };\r\n        offset += size;\r\n      }\r\n      return spreadus(keyword_summary, keyword_index);\r\n    }","code-length":272,"reference":"Read keyword index part of keyword section.\n","result":"Decrypt the input.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_key_block(scanner, kdx) {\r\n      var scanner = scanner.readBlock(kdx.comp_size, kdx.decomp_size);\r\n      for (var i = 0; i < kdx.num_entries; i++) {\r\n        var kk = [scanner.readNum(), scanner.readText()];\r\n      }\r\n    }","code-length":96,"reference":"Read keyword entries inside a keyword block and fill KEY_TABLE.\n","result":"Read key blocks.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction willScanKeyTable(slicedKeyBlock, num_entries, keyword_index, delay) {\r\n      slicedKeyBlock.delay(delay).then(function (input) {\r\n        var scanner = Scanner(input);\r\n        for (var i = 0, size = keyword_index.length; i < size; i++) {\r\n          read_key_block(scanner, keyword_index[i]);\r\n        }\r\n      });\r\n    }","code-length":113,"reference":"Delay to scan key table, for debug onyl.\n","result":"Detect key table entries.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_record_summary(input, pos) {\r\n      var scanner = Scanner(input),\r\n          record_summary = {\r\n            num_blocks:   scanner.readNum(),\r\n            num_entries:  scanner.readNum(),\r\n            index_len:    scanner.readNum(),\r\n            blocks_len:   scanner.readNum(),\r\n            len:          scanner.offset(),\r\n          };\r\n            record_summary.block_pos = pos + record_summary.index_len + record_summary.len;\r\n      return record_summary;\r\n    }","code-length":145,"reference":"Read record summary at the begining of record section.\n","result":"Read record summary data.","score":[0.1885,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_record_block(input, record_summary) {\r\n      var scanner = Scanner(input),\r\n          size = record_summary.num_blocks,\r\n          record_index = Array(size),\r\n          p0 = record_summary.block_pos, \r\n          p1 = 0;\r\n      RECORD_BLOCK_TABLE.alloc(size + 1);\r\n      for (var i = 0, rdx; i < size; i++) {\r\n        record_index[i] = rdx = {\r\n          comp_size:   scanner.readNum(),\r\n          decomp_size: scanner.readNum()\r\n        };\r\n        RECORD_BLOCK_TABLE.put(p0, p1);\r\n        p0 += rdx.comp_size;\r\n        p1 += rdx.decomp_size;\r\n      }\r\n      RECORD_BLOCK_TABLE.put(p0, p1);\r\n    }","code-length":228,"reference":"Read record block index part in record section, and fill RECORD_BLOCK_TABLE\n","result":"Read a record block.","score":[0.066,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_definition(input, block, keyinfo) {\r\n      var scanner = Scanner(input).readBlock(block.comp_size, block.decomp_size);\r\n      scanner.forward(keyinfo.offset - block.decomp_offset);\r\n      return scanner.readText();\r\n    }","code-length":80,"reference":"Read definition in text for given keyinfo object.\n","result":"Read the definition of a block.","score":[0.1645,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read_object(input, block, keyinfo) {\r\n      if (input.byteLength > 0) {\r\n        var scanner = Scanner(input).readBlock(block.comp_size, block.decomp_size);\r\n        scanner.forward(keyinfo.offset - block.decomp_offset);\r\n        return scanner.readRaw(keyinfo.size);\r\n      } else {\r\n        throw '* OUT OF FILE RANGE * ' + keyinfo + ' @offset=' + block.comp_offset;\r\n      }\r\n    }","code-length":135,"reference":"Read content in ArrayBuffer for give keyinfo object\n","result":"Read object data.","score":[0.0917,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findWord(keyinfo) {\r\n      var block = RECORD_BLOCK_TABLE.find(keyinfo.offset);\r\n      return _slice(block.comp_offset, block.comp_size)\r\n                .exec(read_definition, block, keyinfo)\r\n                  .spread(function (definition) { return resolve(followLink(definition, LOOKUP.mdx)); });\r\n    }","code-length":100,"reference":"Find word definition for given keyinfo object.\n","result":"Find the word in the document.","score":[0.1943,0.1449]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reduce(arr, phrase) {\r\n      var len = arr.length;\r\n      if (len > 1) {\r\n        len = len >> 1;\r\n        return phrase > _adaptKey(arr[len - 1].last_word)\r\n                  ? reduce(arr.slice(len), phrase)\r\n                  : reduce(arr.slice(0, len), phrase);\r\n      } else {\r\n        return arr[0];\r\n      }\r\n    }","code-length":118,"reference":"a oneway increased ticket used to cancel unfinished pattern match ","result":"Reduce the array.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shrink(arr, phrase) {\r\n      var len = arr.length, sub;\r\n      if (len > 1) {\r\n        len = len >> 1;\r\n        var key = _adaptKey(arr[len]);\r\n        if (phrase < key) {\r\n          sub = arr.slice(0, len);\r\n          sub.pos = arr.pos;\r\n        } else {\r\n          sub = arr.slice(len);\r\n          sub.pos = (arr.pos || 0) + len;\r\n        }\r\n        return shrink(sub, phrase);\r\n      } else {\r\n        return (arr.pos || 0) + (phrase <= _adaptKey(arr[0]) ? 0 : 1);\r\n      }\r\n    }","code-length":186,"reference":"Reduce the array to index of an element which contains or is the nearest one matching a given phrase.","result":"Shrink the array.","score":[0.002,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction seekVanguard(phrase) {\r\n      phrase = _adaptKey(phrase);\r\n      var kdx = reduce(KEY_INDEX, phrase);\r\n      if (phrase <= _adaptKey(kdx.last_word)) {\r\n        var index = kdx.index - 1, prev;\r\n        while (prev = KEY_INDEX[index]) {\r\n          if (_adaptKey(prev.last_word) !== _adaptKey(kdx.last_word)) {\r\n            break;\r\n          }\r\n          kdx = prev;\r\n          index--;\r\n        }\r\n      }\r\n      return loadKeys(kdx).then(function (list) {\r\n          var idx = shrink(list, phrase);\r\n          while (idx > 0) {\r\n            if (_adaptKey(list[--idx]) !== _adaptKey(phrase)) {\r\n              idx++;\r\n              break;\r\n            }\r\n          }        \r\n          return [kdx, Math.min(idx, list.length - 1), list];\r\n        });\r\n    }","code-length":262,"reference":"Search for the first keyword match given phrase.","result":"Seek vanguard.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchOffset(list, offset) {\r\n      return list.some(function(el) { return el.offset === offset ? list = [el] : false; }) ? list : [];\r\n    }","code-length":57,"reference":"Match the first element in list with given offset.","result":"Match the offset of a list.","score":[0.1656,0.3384]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isValidModifierKeyCombo(modifierKeys, e) {\r\n        var modifierKeyNames = ['alt', 'ctrl', 'meta', 'shift'],\r\n            numModKeys = modifierKeys.length,\r\n            i,\r\n            j,\r\n            currModifierKey,\r\n            isValid = true;\r\n        for (i = 0; i < numModKeys; i += 1) {\r\n            if (!e[modifierKeys[i]]) {\r\n                isValid = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isValid) {\r\n            for (i = 0; i < modifierKeyNames.length; i += 1) {\r\n                currModifierKey = modifierKeyNames[i] + 'Key';\r\n                if (e[currModifierKey]) {\r\n                    if (numModKeys) {\r\n                        isValid = false;\r\n                        for (j = 0; j < numModKeys; j += 1) {\r\n                            if (currModifierKey === modifierKeys[j]) {\r\n                                isValid = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n                if (!isValid) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return isValid;\r\n    }","code-length":318,"reference":"Determines whether the specified modifier keys match the modifier keys\nthat were pressed.\n\n","result":"Validate modifier keys in a combo.","score":[0.085,0.1524]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createKeyComboFunction(keyFunc, modifierKeys) {\r\n        return function (keyCode, modifierKeyNames) {\r\n            var i,\r\n                keyCombo = '';\r\n            if (arguments.length) {\r\n                if (typeof keyCode === 'number') {\r\n                    keyFunc(keyCode);\r\n                    modifierKeys.length = 0;\r\n                    if (modifierKeyNames && modifierKeyNames.length) {\r\n                        for (i = 0; i < modifierKeyNames.length; i += 1) {\r\n                            modifierKeys.push(modifierKeyNames[i] + 'Key');\r\n                        }\r\n                    }\r\n                }\r\n                return this;\r\n            }\r\n            for (i = 0; i < modifierKeys.length; i += 1) {\r\n                keyCombo += modifierKeys[i].slice(0, -3) + '+';\r\n            }\r\n            return keyCombo + keyFunc();\r\n        };\r\n    }","code-length":233,"reference":"Creates a function to get and set the specified key combination.\n\n","result":"Create a key combo function for the given keyFunc and modifierKeys.","score":[0.1464,0.3876]}
{"code":"\/*is used to<extra_id_0>\r\nfunction overrideKeyDown(e) {\r\n        e = e || event;\r\n        var target = e.currentTarget || e.srcElement,\r\n            key = e.keyCode,\r\n            tab,\r\n            tabLen,\r\n            text,\r\n            range,\r\n            tempRange,\r\n            preNewlines,\r\n            selNewlines,\r\n            initScrollTop,\r\n            selStart,\r\n            selEnd,\r\n            sel,\r\n            startLine,\r\n            endLine,\r\n            numTabs,\r\n            startTab,\r\n            preTab,\r\n            whitespace,\r\n            whitespaceLen,\r\n            CHARACTER = 'character';\r\n        if ((target.nodeName && target.nodeName.toLowerCase() !== 'textarea') ||\r\n                (key !== tabKey && key !== untabKey && (key !== 13 || !autoIndent))) {\r\n            return;\r\n        }\r\n        inWhitespace = false;\r\n        text = target.value;\r\n        initScrollTop = target.scrollTop;\r\n        if (typeof target.selectionStart === 'number') {\r\n            selStart = target.selectionStart;\r\n            selEnd = target.selectionEnd;\r\n            sel = text.slice(selStart, selEnd);\r\n        } else if (document.selection) {\r\n            range = document.selection.createRange();\r\n            sel = range.text;\r\n            tempRange = range.duplicate();\r\n            tempRange.moveToElementText(target);\r\n            tempRange.setEndPoint('EndToEnd', range);\r\n            selEnd = tempRange.text.length;\r\n            selStart = selEnd - sel.length;\r\n            if (newlineLen > 1) {\r\n                preNewlines = text.slice(0, selStart).split(newline).length - 1;\r\n                selNewlines = sel.split(newline).length - 1;\r\n            } else {\r\n                preNewlines = selNewlines = 0;\r\n            }\r\n        } else {\r\n            return;\r\n        }\r\n        if (key === tabKey || key === untabKey) {\r\n            tab = aTab;\r\n            tabLen = tab.length;\r\n            numTabs = 0;\r\n            startTab = 0;\r\n            preTab = 0;\r\n            if (selStart !== selEnd && sel.indexOf('\\n') !== -1) {\r\n                if (selStart === 0 || text.charAt(selStart - 1) === '\\n') {\r\n                    startLine = selStart;\r\n                } else {\r\n                    startLine = text.lastIndexOf('\\n', selStart - 1) + 1;\r\n                }\r\n                if (selEnd === text.length || text.charAt(selEnd) === '\\n') {\r\n                    endLine = selEnd;\r\n                } else if (text.charAt(selEnd - 1) === '\\n') {\r\n                    endLine = selEnd - 1;\r\n                } else {\r\n                    endLine = text.indexOf('\\n', selEnd);\r\n                    if (endLine === -1) {\r\n                        endLine = text.length;\r\n                    }\r\n                }\r\n                if (tabKeyComboPressed(key, e)) {\r\n                    numTabs = 1;\r\n                    target.value = text.slice(0, startLine) + tab +\r\n                        text.slice(startLine, endLine).replace(\/\\n\/g, function () {\r\n                            numTabs += 1;\r\n                            return '\\n' + tab;\r\n                        }) + text.slice(endLine);\r\n                    if (range) {\r\n                        range.collapse();\r\n                        range.moveEnd(CHARACTER, selEnd + (numTabs * tabLen) - selNewlines - preNewlines);\r\n                        range.moveStart(CHARACTER, selStart + tabLen - preNewlines);\r\n                        range.select();\r\n                    } else {\r\n                        target.selectionStart = selStart + tabLen;\r\n                        target.selectionEnd = selEnd + (numTabs * tabLen);\r\n                        target.scrollTop = initScrollTop;\r\n                    }\r\n                } else if (untabKeyComboPressed(key, e)) {\r\n                    if (text.slice(startLine).indexOf(tab) === 0) {\r\n                        if (startLine === selStart) {\r\n                            sel = sel.slice(tabLen);\r\n                        } else {\r\n                            preTab = tabLen;\r\n                        }\r\n                        startTab = tabLen;\r\n                    }\r\n                    target.value = text.slice(0, startLine) + text.slice(startLine + preTab, selStart) +\r\n                        sel.replace(new RegExp('\\n' + tab, 'g'), function () {\r\n                            numTabs += 1;\r\n                            return '\\n';\r\n                        }) + text.slice(selEnd);\r\n                    if (range) {\r\n                        range.collapse();\r\n                        range.moveEnd(CHARACTER, selEnd - startTab - (numTabs * tabLen) - selNewlines - preNewlines);\r\n                        range.moveStart(CHARACTER, selStart - preTab - preNewlines);\r\n                        range.select();\r\n                    } else {\r\n                        target.selectionStart = selStart - preTab;\r\n                        target.selectionEnd = selEnd - startTab - (numTabs * tabLen);\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            } else {\r\n                if (tabKeyComboPressed(key, e)) {\r\n                    if (range) {\r\n                        range.text = tab;\r\n                        range.select();\r\n                    } else {\r\n                        target.value = text.slice(0, selStart) + tab + text.slice(selEnd);\r\n                        target.selectionEnd = target.selectionStart = selStart + tabLen;\r\n                        target.scrollTop = initScrollTop;\r\n                    }\r\n                } else if (untabKeyComboPressed(key, e)) {\r\n                    if (text.slice(selStart - tabLen).indexOf(tab) === 0) {\r\n                        target.value = text.slice(0, selStart - tabLen) + text.slice(selStart);\r\n                        if (range) {\r\n                            range.move(CHARACTER, selStart - tabLen - preNewlines);\r\n                            range.select();\r\n                        } else {\r\n                            target.selectionEnd = target.selectionStart = selStart - tabLen;\r\n                            target.scrollTop = initScrollTop;\r\n                        }\r\n                    }\r\n                } else {\r\n                    return;\r\n                }\r\n            }\r\n        } else if (autoIndent) {\r\n            if (selStart === 0 || text.charAt(selStart - 1) === '\\n') {\r\n                inWhitespace = true;\r\n                return;\r\n            }\r\n            startLine = text.lastIndexOf('\\n', selStart - 1) + 1;\r\n            endLine = text.indexOf('\\n', selStart);\r\n            if (endLine === -1) {\r\n                endLine = text.length;\r\n            }\r\n            whitespace = text.slice(startLine, endLine).match(\/^[ \\t]*\/)[0];\r\n            whitespaceLen = whitespace.length;\r\n            if (selStart < startLine + whitespaceLen) {\r\n                inWhitespace = true;\r\n                return;\r\n            }\r\n            if (range) {\r\n                range.text = '\\n' + whitespace;\r\n                range.select();\r\n            } else {\r\n                target.value = text.slice(0, selStart) + '\\n' + whitespace + text.slice(selEnd);\r\n                target.selectionEnd = target.selectionStart = selStart + newlineLen + whitespaceLen;\r\n                target.scrollTop = initScrollTop;\r\n            }\r\n        }\r\n        if (e.preventDefault) {\r\n            e.preventDefault();\r\n        } else {\r\n            e.returnValue = false;\r\n            return false;\r\n        }\r\n    }","code-length":1890,"reference":"Event handler to insert or remove tabs and newlines on the keydown event\nfor the tab or enter key.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction overrideKeyPress(e) {\r\n        e = e || event;\r\n        var key = e.keyCode;\r\n        if (tabKeyComboPressed(key, e) || untabKeyComboPressed(key, e) ||\r\n                (key === 13 && autoIndent && !inWhitespace)) {\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            } else {\r\n                e.returnValue = false;\r\n                return false;\r\n            }\r\n        }\r\n    }","code-length":132,"reference":"Event handler to prevent the default action for the keypress event when\ntab or enter is pressed. Opera and Firefox also fire a keypress event\nwhen the tab or enter key is pressed. Opera requires that the default\naction be prevented on this event or the textarea will lose focus.\n\n","result":"Prevent key presses on the document.","score":[0.0002,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction executeExtensions(hook, args) {\r\n        var i,\r\n            extensions = hooks[hook] || [],\r\n            len = extensions.length;\r\n        for (i = 0; i < len; i += 1) {\r\n            extensions[i].apply(null, args);\r\n        }\r\n    }","code-length":84,"reference":"Executes all registered extension functions for the specified hook.\n\n","result":"Execute extensions .","score":[0,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(imapMessage) {\r\n    var deferred = Q.defer();\r\n    var message = new Message();\r\n    imapMessage.on('body', function(stream, info) {\r\n        var buffer = '';\r\n        stream.on('data', function(chunk) {\r\n            buffer += chunk.toString('utf8');\r\n        });\r\n        stream.on('end', function() {\r\n            if (info.which === 'TEXT') {\r\n                message.body = buffer;\r\n            } else {\r\n                message.headers = Imap.parseHeader(buffer);\r\n            }\r\n        });\r\n    });\r\n    imapMessage.on('attributes', function(attrs) {\r\n        message.attributes = attrs;\r\n    });\r\n    imapMessage.on('end', function() {\r\n        deferred.resolve(message);\r\n    });\r\n    return deferred.promise;\r\n}","code-length":220,"reference":"Helper function that asynchronously converts ImapMessage instance\nto instance of Message class.\n\n","result":"Create a message.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GPT( options ) {\r\n  if( !(this instanceof GPT) ) {\r\n    return new GPT( options )\r\n  }\r\n  options = options != null ? options : {}\r\n    this.blockSize = options.blockSize || 512\r\n    this.guid = options.guid || GPT.GUID.ZERO\r\n    this.revision = options.revision || 0\r\n    this.headerSize = options.headerSize || GPT.HEADER_SIZE\r\n    this.headerChecksum = 0\r\n    this.currentLBA = options.currentLBA || 1\r\n    this.backupLBA = options.backupLBA || 0\r\n    this.firstLBA = options.firstLBA || 34\r\n    this.lastLBA = options.lastLBA || 0\r\n    this.tableOffset = options.tableOffset || GPT.TABLE_OFFSET\r\n    this.entries = options.entries || GPT.TABLE_ENTRIES\r\n    this.entrySize = options.entrySize || GPT.TABLE_ENTRY_SIZE\r\n    this.tableChecksum = 0\r\n  this.partitions = []\r\n}","code-length":270,"reference":"GUID Partition Table\n","result":"Create a GPT instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction readBackupGPT(primaryGPT) {\r\n  var backupGPT = new GPT({ blockSize: primaryGPT.blockSize })\r\n  var buffer = Buffer.alloc( 33 * primaryGPT.blockSize )\r\n  var offset = ( ( primaryGPT.backupLBA - 32 ) * blockSize )\r\n  fs.readSync( fd, buffer, 0, buffer.length, offset )\r\n  backupGPT.parseBackup( buffer )\r\n  return backupGPT\r\n}","code-length":124,"reference":"return gpt }","result":"Read the primary GPT.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stopcock(fn, options) {\r\n  options = Object.assign(\r\n    {\r\n      queueSize: Math.pow(2, 32) - 1,\r\n      bucketSize: 40,\r\n      interval: 1000,\r\n      limit: 2\r\n    },\r\n    options\r\n  );\r\n  const bucket = new TokenBucket(options);\r\n  const queue = [];\r\n  let timer = null;\r\n  function shift() {\r\n    clearTimeout(timer);\r\n    while (queue.length) {\r\n      const delay = bucket.consume();\r\n      if (delay > 0) {\r\n        timer = setTimeout(shift, delay);\r\n        break;\r\n      }\r\n      const data = queue.shift();\r\n      data[2](fn.apply(data[0], data[1]));\r\n    }\r\n  }\r\n  function limiter() {\r\n    const args = arguments;\r\n    return new Promise((resolve, reject) => {\r\n      if (queue.length === options.queueSize) {\r\n        return reject(new Error('Queue is full'));\r\n      }\r\n      queue.push([this, args, resolve]);\r\n      shift();\r\n    });\r\n  }\r\n  Object.defineProperty(limiter, 'size', { get: () => queue.length });\r\n  return limiter;\r\n}","code-length":331,"reference":"Limit the execution rate of a function using a leaky bucket algorithm.\n\n","result":"Stop cocking.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatQuantity(value, encode, pad) {\r\n  if (['string', 'number', 'object'].indexOf(typeof value) === -1 || value === null) {\r\n    return value;\r\n  }\r\n  const numberValue = numberToBN(value);\r\n  const numPadding = numberValue.lt(ten) && pad === true && !numberValue.isZero() ? '0' : '';\r\n  if (numberToBN(value).isNeg()) { throw new Error(`[ethjs-format] while formatting quantity '${numberValue.toString(10)}', invalid negative number. Number must be positive or zero.`); }\r\n  return encode ? `0x${numPadding}${numberValue.toString(16)}` : numberValue;\r\n}","code-length":183,"reference":"Format quantity values, either encode to hex or decode to BigNumber\nshould intake null, stringNumber, number, BN\n\n","result":"Format quantities.","score":[0.0003,0.0323]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatQuantityOrTag(value, encode) {\r\n  var output = value;\r\n  if (schema.tags.indexOf(value) === -1) {\r\n    output = formatQuantity(value, encode);\r\n  }\r\n  return output;\r\n}","code-length":71,"reference":"Format quantity or tag, if tag bypass return, else format quantity\nshould intake null, stringNumber, number, BN, string tag\n\n","result":"Format the quantity or tag.","score":[0.0229,0.0852]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatData(value, byteLength) {\r\n  var output = value;\r\n  var outputByteLength = 0;\r\n  if (typeof value === 'string') {\r\n    output = `0x${padToEven(stripHexPrefix(value))}`;\r\n    outputByteLength = getBinarySize(output);\r\n  }\r\n  if (output === '0x00') { output = '0x0'; }\r\n  if (typeof byteLength === 'number' && value !== null && output !== '0x' && output !== '0x0'\r\n    && (!\/^[0-9A-Fa-f]+$\/.test(stripHexPrefix(output)) || outputByteLength !== 2 + byteLength * 2)) {\r\n    throw new Error(`[ethjs-format] hex string '${output}' must be an alphanumeric ${2 + byteLength * 2} utf8 byte hex (chars: a-fA-F) string, is ${outputByteLength} bytes`);\r\n  }\r\n  return output;\r\n}","code-length":242,"reference":"FormatData under strict conditions hex prefix\n\n","result":"Format data.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatObject(formatter, value, encode) {\r\n  var output = Object.assign({}, value);\r\n  var formatObject = null;\r\n  if (typeof formatter === 'string') {\r\n    if (formatter === 'Boolean|EthSyncing') {\r\n      formatObject = Object.assign({}, schema.objects.EthSyncing);\r\n    } else if (formatter === 'DATA|Transaction') {\r\n      formatObject = Object.assign({}, schema.objects.Transaction);\r\n    } else {\r\n      formatObject = Object.assign({}, schema.objects[formatter]);\r\n    }\r\n  }\r\n  if (!arrayContainsArray(Object.keys(value), formatObject.__required)) {\r\n    throw new Error(`[ethjs-format] object ${JSON.stringify(value)} must contain properties: ${formatObject.__required.join(', ')}`);\r\n  }\r\n  Object.keys(formatObject).forEach((valueKey) => {\r\n    if (valueKey !== '__required' && typeof value[valueKey] !== 'undefined') {\r\n      output[valueKey] = format(formatObject[valueKey], value[valueKey], encode);\r\n    }\r\n  });\r\n  return output;\r\n}","code-length":298,"reference":"Format object, even with random RPC caviets\n\n","result":"Format object.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction format(formatter, value, encode, lengthRequirement) {\r\n  var output = value;\r\n  if (formatter === 'Q') {\r\n    output = formatQuantity(value, encode);\r\n  } else if (formatter === 'QP') {\r\n    output = formatQuantity(value, encode, true);\r\n  } else if (formatter === 'Q|T') {\r\n    output = formatQuantityOrTag(value, encode);\r\n  } else if (formatter === 'D') {\r\n    output = formatData(value);\r\n  } else if (formatter === 'D20') {\r\n    output = formatData(value, 20);\r\n  } else if (formatter === 'D32') {\r\n    output = formatData(value, 32);\r\n  } else {\r\n    if (typeof value === 'object'\r\n      && value !== null\r\n      && Array.isArray(value) === false) {\r\n      output = formatObject(formatter, value, encode);\r\n    } else if (Array.isArray(value)) {\r\n      output = formatArray(formatter, value, encode, lengthRequirement);\r\n    }\r\n  }\r\n  return output;\r\n}","code-length":287,"reference":"Format various kinds of data to RPC spec or into digestable JS objects\n\n","result":"Format a value.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatInputs(method, inputs) {\r\n  return format(schema.methods[method][0], inputs, true, schema.methods[method][2]);\r\n}","code-length":47,"reference":"Format RPC inputs generally to the node or TestRPC\n\n","result":"Format the inputs.","score":[0.0657,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (files) {\r\n        if (!_.isArray(files)) {\r\n            throw new Error('Arguments to config-helper.mergeConfig should be an array');\r\n        }\r\n        var appConfig = {};\r\n        files.forEach(function (filePath) {\r\n            if (gruntFile.exists(filePath)) {\r\n                var fileConfig = gruntFile.readYAML(filePath);\r\n                _.merge(appConfig, fileConfig);\r\n            }\r\n        });\r\n        return appConfig;\r\n    }","code-length":130,"reference":"Returns a merged set of yaml files\n","result":"Merge config files.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseProperties(node) {\r\n    consume();\r\n    while(true) {\r\n      clear();\r\n            if(peek() === '.') {\r\n        parseProperty(node,false);\r\n      } else if(peek() === ':') {\r\n        parseProperty(node,true);\r\n      } else {\r\n        unexpectedTokenException('. or :');\r\n      }\r\n      clear();\r\n      if(peek() !== ',') {\r\n        break;\r\n      }\r\n      consume();\r\n    }\r\n  }","code-length":140,"reference":"Parse the property list of an object pattern.","result":"Parse properties in a node.","score":[0.1319,0.1299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractStringLiteral() {\r\n    var literal = [], enclosing = next();\r\n    if(!(enclosing === '\"' || enclosing === \"'\")) {\r\n      throw \"Unexpected token at index \" + index +\r\n        \" expected 'string' but found \" + enclosing;\r\n    }\r\n    while(hasNext() && peek() !== enclosing) {\r\n      literal[literal.length] = next();\r\n    }\r\n    consume();\r\n    return literal.join('');\r\n  }","code-length":123,"reference":"String literals might start with ' or \"","result":"Extract a string literal from a string.","score":[0,0.2373]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseStringLiteral(AST) {\r\n    if(peek() === '\/') {\r\n      newNode(extractRegex(), newNode('r=', AST).nodes);\r\n    } else {\r\n      newNode(extractStringLiteral(), newNode('=', AST).nodes);\r\n    }\r\n  }","code-length":75,"reference":"A string literal list may contain strings or regular expressions.","result":"Parse a string literal.","score":[0.0713,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseNumericLiteral(AST) {\r\n    var literal = [], value;\r\n    while(hasNext() && validNum(peek())) {\r\n      literal[literal.length] = next();\r\n    }\r\n    value = parseFloat(literal.join(''));\r\n            if(!isNaN(value) && isFinite(value)) {\r\n      newNode(value, newNode('=', AST).nodes);\r\n    } else {\r\n        unexpectedTokenException('numeric');\r\n    }\r\n  }","code-length":129,"reference":"Parse numeric literals like 1, 1.05, .05, 8e5...","result":"Parse numeric literals in a JS file.","score":[0.2884,0.3727]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stage1(AST) {\r\n    if(hasNext()) {\r\n      switch (peek()) {\r\n        case 'a':\r\n          parseArray(AST);\r\n          break;\r\n        case 'o':\r\n          parseObject(AST);\r\n          break;\r\n        default:\r\n          if (\/[nsSbfdr_]\/.test(peek())) {\r\n            parseGeneric(AST,peek());\r\n          } else {\r\n            unexpectedTokenException('one of (a,o,n,s,S,b,f,d,r,_)');\r\n          }         \r\n      }\r\n    }\r\n    return AST;\r\n  }","code-length":171,"reference":"Parser entry point","result":"Parse the AST .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction curry(fun, args) {\r\n    return function (x) {        \r\n      return fun.apply(bindingContext, args.concat([x]));\r\n    };\r\n  }","code-length":55,"reference":"curry takes a function, and a partial list of arguments and returnsa function that can be executed with the rest of the arguments.","result":"Curry functions.","score":[0,0.0239]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchArray(m,a) {\r\n    var from = 0, rest = false, restBindingResult, index, matcher, item,\r\n    matchResult, restOfArray = [], i, result = {\r\n      result: false,\r\n      param: a\r\n    };\r\n    if (!is(a, '[object Array]')) {\r\n      return result;\r\n    }\r\n    if (m.length > a.length && !m[m.length - 1].name) {\r\n      return result;\r\n    }\r\n        if(m.length === 0) {\r\n      result.result = true;\r\n      return result;\r\n    }\r\n    for(index=0;index<a.length;index++) {\r\n      matcher = m[index];\r\n      item = a[index];\r\n      if(!matcher) {\r\n        return result;\r\n      }\r\n      matchResult = matcher(item);\r\n      if(!matchResult.result) {\r\n        return result;\r\n      }\r\n            if(matchResult.rest) {\r\n        restBindingResult = matchResult;\r\n        from = index;\r\n        rest = true;\r\n        break;\r\n      }\r\n    }\r\n    if(rest && restBindingResult.this_binding) {\r\n      for(i = from; i < a.length; i++) {\r\n        restOfArray[restOfArray.length] = a[i];\r\n      }\r\n      bindingContext[restBindingResult.this_binding] = restOfArray;\r\n    }\r\n        result.result = true;\r\n    return result;\r\n  }","code-length":399,"reference":"m is an array of predicates, a is the array to match","result":"Match arrays .","score":[0,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compileNode(ast) {\r\n    var result = [], index, node, matcher;\r\n    for(index=0;index<ast.length;index++) {\r\n      node = ast[index];\r\n      switch(node.type) {\r\n        case 'a':\r\n          matcher = curry(matchArray, [compileNode(node.nodes)]);\r\n          break;     \r\n        case 'o':\r\n          matcher = curry(matchObject, [compileNode(node.nodes)]);\r\n          break;\r\n        case '.':\r\n          matcher = curry(hasProperty, [compileNode(node.nodes), node.name ]);\r\n          break;\r\n        case ':':\r\n          matcher = curry(hasPrototypeProperty, [compileNode(node.nodes), node.name ]);\r\n          break;\r\n        case '=':\r\n          matcher = curry(equals, [node.nodes[0].type]);\r\n          break;\r\n        case 'd=':\r\n          matcher = curry(equalsDate, [node.nodes[0].type]);\r\n          break;\r\n        case 'r=':\r\n          matcher = curry(matchesRegex, [node.nodes[0].type]);\r\n          break;        \r\n        case '||':\r\n          matcher = curry(or, [compileNode(node.nodes)]);\r\n          break;\r\n        case 'n':\r\n          matcher = curry(matchType, ['number']);\r\n          break;\r\n        case 's':\r\n          matcher = curry(matchType, ['string']);\r\n          break;\r\n        case 'S':\r\n          matcher = matchNonBlankString;\r\n          break;\r\n        case 'b':\r\n          matcher = curry(matchType, ['boolean']);\r\n          break;\r\n        case 'f':\r\n          matcher = curry(matchType, ['function']);\r\n          break;      \r\n        case '_':\r\n          matcher = any;\r\n          break;\r\n        case '|':\r\n          matcher = rest;\r\n          break;          \r\n        case '()':\r\n          matcher = matchEmptyArray;\r\n          break;\r\n        case 'd':\r\n          matcher = curry(matchInstanceOf, ['[object Date]']);\r\n          break;     \r\n        case 'r':\r\n          matcher = curry(matchInstanceOf, ['[object RegExp]']);\r\n          break;               \r\n        default:\r\n          throw \"Unknown AST entity: \" + node.type;\r\n      }\r\n      if (node.binding) {\r\n        matcher = curry(bind, [node.binding, matcher]);\r\n      }\r\n      result[result.length] = matcher;\r\n    }\r\n    return result;\r\n  }","code-length":665,"reference":"Compile a single level of the AST","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getName(tag) {\r\n\treturn tag.name ? tag.name.value.toLowerCase() : `#${tag.type}`;\r\n}","code-length":44,"reference":"Returns name of given matched token\n","result":"Create a tag name.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction eatAttributeValue(stream) {\r\n\tconst start = stream.pos;\r\n\tif (eatQuoted(stream)) {\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tconst current = stream.pos;\r\n\t\tlet valueStart, valueEnd;\r\n\t\tstream.pos = start;\r\n\t\tstream.next();\r\n\t\tvalueStart = stream.start = stream.pos;\r\n\t\tstream.pos = current;\r\n\t\tstream.backUp(1);\r\n\t\tvalueEnd = stream.pos;\r\n\t\tconst result = token(stream, valueStart, valueEnd);\r\n\t\tstream.pos = current;\r\n\t\treturn result;\r\n\t}\r\n\treturn eatPaired(stream) || eatUnquoted(stream);\r\n}","code-length":192,"reference":"Consumes attribute value from given location\n","result":"Eat attributes.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isUnquoted(code) {\r\n\treturn !isNaN(code) && !isQuote(code) && !isSpace(code) && !isTerminator(code);\r\n}","code-length":50,"reference":"Check if given character code is valid unquoted value\n","result":"Detect if code is a string.","score":[0.1833,0.2937]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setDefault(obj, key, val) {\r\n  if (_.isUndefined(obj[key])) {\r\n    obj[key] = val;\r\n    return val;\r\n  }\r\n  return obj[key];\r\n}","code-length":64,"reference":"If given key is set in the object it returns the associated value, otherwise it sets the value to val and returns it.","result":"Set default values.","score":[0,0.0238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getXml(path, finish) {\r\n  fs.readFile(path, function(err, data) {\r\n      if (err) throw err;\r\n      xmlParser.parseString(data, function (err, result) {\r\n        if (err) throw err;\r\n        finish(result);\r\n      });\r\n  });\r\n}","code-length":90,"reference":"Read and Parse XML file from given path, pass result to finish Any error that occurs is simpy thrown.","result":"Generate the xml file.","score":[0,0.0286]}
{"code":"\/*is used to<extra_id_0>\r\nfunction appendUISource(client){\r\n    angoose.getLogger('angoose').debug(\"Appending angoose-ui sources\");\r\n    var output=\"\";\r\n    output += readFile(path.resolve(__dirname, 'angular-modules.js'));\r\n    output += concatFilesInDirectory(['services',  'controllers', 'directives', 'filters']);\r\n    output +=  concatTemplates();\r\n    client.source+=\"\\n\\n\" + output;\r\n}","code-length":121,"reference":"append angoose-ui sources ","result":"Append the ui source.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction error(msg, addHint) {\r\n\tconsole.log('\\x1b[31m');\r\n\tconsole.log('The compiler has stopped on an error')\r\n\tconsole.log(`\\x1b[1;31mError: ${msg}\\x1b[0m`);\r\n\tif (addHint)\r\n\t\tconsole.log(`\\nPlease use -h to show the usage`);\r\n\tprocess.exit(1);\r\n}","code-length":119,"reference":"Show an error","result":"Show usage.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compile(modelName, schema, dependencies) {\r\n        logger.trace(\"Compiling schema \", modelName)\r\n        var model = function AngooseModule(data) {\r\n            for (var i in data) {\r\n                this[i] = data[i];\r\n            }\r\n        };\r\n\r\r\n        model.toString = function() {\r\r\n            return \"PROXY: function \" + modelName + \"()\";\r\r\n        }\r\n        for (var name in schema.statics) {\r\r\n            model[name] = createProxy(model, name, schema.statics[name], 'static');\r\r\n        }\r\r\n        for (var name in schema.methods) {\r\r\n            model.prototype[name] = createProxy(model, name, schema.methods[name], 'instance');\r\r\n        }\r\n        model.dependencies$ = dependencies;\r\n        model.schema = schema;\r\n        model.prototype.get = getter;\r\r\n        model.prototype.set = setter;\r\n        model.modelName = modelName;\r\n        model.name = modelName; \r\n        model.prototype.mergeData = function(source) {\r\n            if ( typeof source != \"object\")\r\n                throw \"Invalid source object, must be an model instance\";\r\r\n            for (var i in source) {\r\n                this[i] = source[i];\r\n            }\r\n        }\r\n        AngooseClient.models = AngooseClient.models || {};\r\n        AngooseClient.models[modelName] = model;\r\n        return model;\r\n    }","code-length":384,"reference":"compile the model based on the server side schema","result":"Compile the schema.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addProps(props, options) {\r\n  if (!props) return '## No props'\r\n  const keys = Object.keys(props).filter(key =>\r\n    filterProps(key, props[key], options),\r\n  )\r\n  const filteredProps = keys.reduce(\r\n    (last, key) => ({ ...last, [key]: props[key] }),\r\n    {},\r\n  )\r\n  let output = '\\n## Props\\n'\r\n  let isFlow = false\r\n  const items = [\r\n    TABLE_HEADERS,\r\n    ...keys.map(key => {\r\n      const prop = filteredProps[key]\r\n      if (isFlowType(prop)) isFlow = true\r\n      const row = [\r\n        isFlowType(prop) ? key : getKey(key, getType(prop)),\r\n        getTypeName(getType(prop)),\r\n        getDefaultValue(prop),\r\n        prop.required,\r\n        prop.description,\r\n      ]\r\n      return row.map(rowValue => {\r\n        if (typeof rowValue === 'string') {\r\n          return rowValue.split('\\n').join('<br>')\r\n        }\r\n        return rowValue\r\n      })\r\n    }),\r\n  ]\r\n  output += `${table(items)}\\n`\r\n  if (!isFlow) {\r\n    const subTypes = describeSubTypes(filteredProps)\r\n    if (subTypes.length) {\r\n      output += '\\n## Complex Props\\n'\r\n      output += subTypes\r\n    }\r\n  }\r\n  return output\r\n}","code-length":395,"reference":"Loop through all the top level props\n","result":"Add props to the table.","score":[0.1915,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction debounce(quietMillis, fn, ctx ) {\r\n    ctx = ctx || undefined;\r\n    var timeout;\r\n    return function () {\r\n        var args = arguments;\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(function() {\r\n            fn.apply(ctx, args);\r\n        }, quietMillis);\r\n    };\r\n}","code-length":94,"reference":"Debounces a function. Returns a function that calls the original fn function only if no invocations have been made\nwithin the last quietMillis milliseconds.\n\n","result":"Debounce functions.","score":[0,0.0229]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matroshka(fn) {\r\n      var babushka = fn;\r\n      Object.keys(process.namespaces).forEach(function (name) {\r\n        babushka = process.namespaces[name].bind(babushka);\r\n      });\r\n          return babushka;\r\n    }","code-length":86,"reference":"Workaround for Q module with CLS","result":"Bind the function to the namespace.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findTagged(modelClass,tag){\r\n    if(!modelClass || !modelClass.schema) return [];\r\n    var cols = [];  \r\n    Object.keys(modelClass.schema.paths).forEach(function(path){\r\n        var data = modelClass.schema.paths[path];\r\n        if(data.options.tags && data.options.tags.indexOf(tag)>=0)\r\n            cols.push(data);\r\n    });\r\n    return cols;\r\n}","code-length":127,"reference":"end directiveFunc get a list of fields with a specific tag","result":"Find tagged models.","score":[0,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction error(msg) {\r\n\tif (exports.error)\r\n\t\texports.error(msg);\r\n\telse\r\n\t\tconsole.log('Error: ' + msg);\r\n}","code-length":55,"reference":"Emit an error","result":"Use the error function .","score":[0.2403,0.1562]}
{"code":"\/*is used to<extra_id_0>\r\nfunction call(name, isLong) {\r\n\tvar obj = isLong ? long[name] : short[name];\r\n\tif (!obj)\r\n\t\treturn error(`Unknown argument '${name}'`);\r\n\tif (n + obj.length > count)\r\n\t\treturn error(`Too few arguments after '${name}'`);\r\n\tvar arr = process.argv.slice(n, n + obj.length);\r\n\tn += obj.length;\r\n\tobj.callback(arr);\r\n}","code-length":129,"reference":"Call a command","result":"Call the callback function.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findInputElement(templateElement) {\r\n    return angular.element(templateElement.find('input')[0] || templateElement.find('select')[0] || templateElement.find('textarea')[0]);\r\n  }","code-length":62,"reference":"Find the \"input\" element in the template.  It will be one of input, select or textarea. We need to ensure it is wrapped in jqLite\\jQuery","result":"Find input element.","score":[0.0003,0.0219]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getValidationMessageMap(originalElement) {\r\n    var validationMessages = {};\r\n    angular.forEach(originalElement.find('validator'), function(element) {\r\n      element = angular.element(element);\r\n      validationMessages[element.attr('key')] = $interpolate(element.text());\r\n    });\r\n    return validationMessages;\r\n  }","code-length":95,"reference":"Search through the originalDirective's element for elements that contain information about how to map validation keys to messages","result":"Map validation messages to their respective keys.","score":[0.0442,0.1868]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerClass(nameOrOpts, claz){\r\n    var opts = typeof(nameOrOpts) == 'object'?nameOrOpts: {name: nameOrOpts};\r\n    var className = opts.name;\r\n    if(!className) throw \"Missing module name: \"+ className\r\n    if(beans[className])\r\n        logger.warn(\"Overriding existing bean: \", className);\r\n    if(claz._angoosemeta && (claz._angoosemeta.baseClass == 'Service' || claz._angoosemeta.baseClass == 'Model') ){\r\n    }\r\n    else{\r\n        if(typeof(claz) === 'function' && claz.schema  && claz.modelName )\r\n            opts.baseClass = 'Model';\r\n        else if(claz instanceof getMongoose().Schema){\r\n            opts.baseClass = 'Model';\r\n            claz = getMongoose().model(className, claz);\r\n        }\r\n        else\r\n            opts.baseClass = 'Service';\r\n        angoose.Remotable.mixin(opts, claz);\r\n    }\r\n    _.extend(claz._angoosemeta, nameOrOpts);\r\n        beans[className] = claz;\r\n        logger.debug(\"Registered module\", claz._angoosemeta.baseClass, className);\r\n    return claz;\r\n}","code-length":331,"reference":"register module with angoose so it knows to publish it","result":"Register a class.","score":[0,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction config(path, val){\r\n    if(!path) return options; \r\n    if(!angoose.initialized && typeof(path) == 'string') throw \"Cannot call config(\" + path+\") before angoose is intialized\";\r\n        if(typeof (path) === 'string'){\r\n         if(val === undefined)\r\n            return toolbox.getter(options, path);\r\n         toolbox.setter(options, path, val);\r\n    }\r\n        if(typeof(path) === 'object'){\r\n        options = toolbox.merge(options, path);\r\n    }\r\n}","code-length":154,"reference":"Set or get configurations.","result":"Configure the angoose instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction connect (url, next) {\r\n  log('connecting to %s', url);\r\n  mongo.Db.connect(url, { db: { w: 1 }}, next);\r\n}","code-length":55,"reference":"Creates a connection to the given `url`.","result":"Connect to the database.","score":[0.2134,0.4395]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startShell (db, program, files) {\r\n  var repl = global.repl = term(db);\r\n  createContext(db, repl, function () {\r\n    var code = program.eval;\r\n    if (code) {\r\n      executeJS(code);\r\n      if (!program.shell) {\r\n        repl.emit('exit');\r\n        return;\r\n      }\r\n    }\r\n    if (files.length) {\r\n      executeFiles(files);\r\n      printCloseMsg();\r\n    }\r\n    repl.prompt = prompt;\r\n    repl.displayPrompt()\r\n  });\r\n}","code-length":158,"reference":"Starts up a shell with the given context.","result":"Start a shell.","score":[0.0771,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction executeFiles (files) {\r\n  var dir = process.cwd();\r\n  files.forEach(function (file) {\r\n    require(dir + '\/' + file);\r\n  });\r\n}","code-length":57,"reference":"Execute the given `files` in the context sharedwith the shell when started.","result":"Execute files.","score":[0.0034,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrap (proto, name) {\r\n  var old = proto[name];\r\n  proto[name] = function () {\r\n    if (global.repl) global.repl.bufferStart();\r\n    var args = slice(arguments);\r\n    var last = args[args.length-1];\r\n    if ('function' == typeof last) {\r\n      args[args.length-1] = function () {\r\n        if (global.repl) global.repl.bufferEnd()\r\n        if (p != last) console.log();\r\n        last.apply(null, arguments)\r\n        if (global.repl) {\r\n          global.repl.displayPrompt();\r\n          global.repl.moveCursorToEnd();\r\n        }\r\n      }\r\n    } else {\r\n      args.push(function () {\r\n        if (global.repl) global.repl.bufferEnd()\r\n        p.apply(null, arguments);\r\n        if (global.repl) global.repl.moveCursorToEnd();\r\n      });\r\n    }\r\n    old.apply(this, args);\r\n  }\r\n  if (old.help) {\r\n    proto[name].help = old.help;\r\n  }\r\n}","code-length":299,"reference":"Wrap async functions with animation etc","result":"Wrap methods in the console.","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleError (err, cb) {\r\n  if (err) {\r\n    if (cb) {\r\n      return process.nextTick(function(){\r\n        cb(err);\r\n      });\r\n    }\r\n    console.error(err);\r\n  }\r\n}","code-length":76,"reference":"Error reporting helper","result":"Handle errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tablature(conf) {\r\n  const {\r\n    keys = [],\r\n    data = [],\r\n    headings = {},\r\n    replacements = {},\r\n    centerValues = [],\r\n    centerHeadings = [],\r\n  } = conf\r\n  const [i] = data\r\n  if (!i) return ''\r\n  const cv = makeBinaryHash(centerValues)\r\n  const hv = makeBinaryHash(centerHeadings)\r\n  const k = Object.keys(i).reduce((acc, key) => {\r\n    const h = headings[key]\r\n    return {\r\n      ...acc,\r\n      [key]: h ? h.length : key.length,\r\n    }\r\n  }, {})\r\n  const widths = data.reduce((dac, d) => {\r\n    const res = Object.keys(d).reduce((acc, key) => {\r\n      const maxLength = dac[key]\r\n      const val = d[key]\r\n      const r = getReplacement(replacements, key)\r\n      const { length } = r(val)\r\n      return {\r\n        ...acc,\r\n        [key]: Math.max(length, maxLength),\r\n      }\r\n    }, {})\r\n    return res\r\n  }, k)\r\n  const kk = keys.reduce((acc, key) => {\r\n    const h = headings[key]\r\n    return {\r\n      ...acc,\r\n      [key]: h || key,\r\n    }\r\n  }, {})\r\n  const hr = keys.reduce((acc, key) => {\r\n    return {\r\n      ...acc,\r\n      [key]: heading,\r\n    }\r\n  }, {})\r\n  const hl = getLine(keys, kk, widths, hr, hv)\r\n  const rl = data.map((row) => {\r\n    const line = getLine(keys, row, widths, replacements, cv)\r\n    return line\r\n  })\r\n  return [\r\n    hl,\r\n    ...rl,\r\n  ].join('\\n')\r\n}","code-length":509,"reference":"Display values in a table.\n","result":"Create tablature .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _save() {\r\n    if (db.source && db.write && writeOnChange) {\r\n      var str = JSON.stringify(db.object);\r\n      if (str !== db._checksum) {\r\n        db._checksum = str;\r\n        return db.write(db.source, db.object);\r\n      }\r\n    }\r\n  }","code-length":95,"reference":"Return a promise or nothing in sync mode or if the database hasn't changed","result":"Save the object.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Picklr (startDir, options) {\r\n  options = options || {};\r\n  let defaultExcludeDirsRe;\r\n  if (\/^\\.\/.test(startDir)) {\r\n    defaultExcludeDirsRe = \/\\\/\\.|node_modules\/i;\r\n  } else {\r\n    defaultExcludeDirsRe = \/^\\.|\\\/\\.|node_modules\/i;\r\n  }\r\n  this.totalFileCount = 0;\r\n  this.matchedFileCount = 0;\r\n  this.startDir = startDir || '.';\r\n  this.targetText = options.targetText || '';\r\n  this.replacementText = options.replacementText || '';\r\n  this.action = options.action || 'echo';\r\n  this.includeExts = options.includeExts || ['.js'];\r\n  this.excludeDirs = options.excludeDirsRe || defaultExcludeDirsRe;\r\n  this.logger = options.logger || console.log;\r\n  this.picklrActions = picklrActions;\r\n}","code-length":248,"reference":"The Picklr object.\n\n","result":"Replace files in a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (p) {\r\n    fs.readdirSync(p).forEach(function (file) {\r\n      const curPath = path.join(p, path.sep, file);\r\n      const stats = fs.statSync(curPath);\r\n      if (this.isDirectory(stats, curPath)) {\r\n        this.recurseFiles(curPath);\r\n      } else if (this.isFile(stats, curPath)) {\r\n        this.picklrActions[this.action].call(this, curPath);\r\n      }\r\n    }, this);\r\n    if (p === this.startDir) {\r\n      this.logger('Total file count = ' + this.totalFileCount);\r\n      if (this.action !== 'echo') {\r\n        this.logger('Matched file count = ' + this.matchedFileCount);\r\n      }\r\n    }\r\n  }","code-length":217,"reference":"Recursively process files.","result":"Recurse into a directory.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (stats, p) {\r\n    let result = stats.isFile();\r\n    if (result) {\r\n      const ext = path.extname(p);\r\n      result = this.includeExts.indexOf(ext) !== -1;\r\n    }\r\n    return result;\r\n  }","code-length":81,"reference":"File type determination.\n\n","result":"Filter files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (stats, p) {\r\n    let result = stats.isDirectory();\r\n    if (result) {\r\n      result = !this.excludeDirs.test(p);\r\n    }\r\n    return result;\r\n  }","code-length":64,"reference":"Directory type determination.\n\n","result":"Test the file .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processAllFiles (startDir, options) {\r\n  const picklr = new Picklr(startDir, options);\r\n  picklr.recurseFiles(startDir);\r\n}","code-length":51,"reference":"Process all files under startDir using options.","result":"Process all files.","score":[0.1522,0.2841]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processFile (filePath, update) {\r\n  let change, found = false;\r\n  const lines = fs.readFileSync(filePath, { encoding: 'utf8' }).split('\\n');\r\n  for (let i = 0; i < lines.length; i++) {\r\n    if (lines[i].indexOf(this.targetText) !== -1) {\r\n      found = true;\r\n      change = lines[i].replace(\r\n        this.targetText, this.replacementText\r\n      );\r\n      if (update) {\r\n        lines[i] = change;\r\n      } else {\r\n        this.logger('*** File:   ' + filePath);\r\n        this.logger('@@@ Found:  ' + lines[i]);\r\n        this.logger('--- Change: ' + change);\r\n      }\r\n      this.matchedFileCount++;\r\n      break;\r\n    }\r\n  }\r\n  if (!found && !update) {\r\n    this.logger('*** Omitted: ' + filePath);\r\n  }\r\n  if (found && update) {\r\n    fs.writeFileSync(filePath, lines.join('\\n'), { encoding: 'utf8' });\r\n    this.logger('@@@ Updated: ' + filePath);\r\n  }\r\n  this.totalFileCount++;\r\n}","code-length":326,"reference":"Does the actual audit or update of a single file.\n\n","result":"Process a file.","score":[0.0471,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nasync function initHTTPServer({\r\n  ENV = {},\r\n  HOST = '127.0.0.1',\r\n  PORT = 8080,\r\n  MAX_HEADERS_COUNT = 800,\r\n  KEEP_ALIVE_TIMEOUT = ms('5m'),\r\n  TIMEOUT = ms('2m'),\r\n  MAX_CONNECTIONS,\r\n  httpRouter,\r\n  log = noop,\r\n}) {\r\n  const sockets = ENV.DESTROY_SOCKETS ? new Set() : {}.undef;\r\n  const httpServer = http.createServer(httpRouter);\r\n  const listenPromise = new Promise(resolve => {\r\n    httpServer.listen(PORT, HOST, () => {\r\n      log('info', `HTTP Server listening at \"http:\r\n      resolve(httpServer);\r\n    });\r\n  });\r\n  const errorPromise = new Promise((resolve, reject) => {\r\n    httpServer.once('error', reject);\r\n  });\r\n  httpServer.timeout = TIMEOUT;\r\n  httpServer.keepAliveTimeout = KEEP_ALIVE_TIMEOUT;\r\n  httpServer.maxHeadersCount = MAX_HEADERS_COUNT;\r\n  httpServer.maxConnections = MAX_CONNECTIONS;\r\n  if ('undefined' !== typeof MAX_CONNECTIONS) {\r\n    httpServer.maxConnections = MAX_CONNECTIONS;\r\n  }\r\n  if (ENV.DESTROY_SOCKETS) {\r\n    httpServer.on('connection', socket => {\r\n      sockets.add(socket);\r\n      socket.on('close', () => {\r\n        sockets.delete(socket);\r\n      });\r\n    });\r\n  }\r\n  return Promise.race([listenPromise, errorPromise]).then(() => ({\r\n    service: httpServer,\r\n    errorPromise,\r\n    dispose: () =>\r\n      new Promise((resolve, reject) => {\r\n        log('debug', 'Closing HTTP server.');\r\n        httpServer.timeout = 1;\r\n        httpServer.keepAliveTimeout = 1;\r\n        httpServer.close(err => {\r\n          if (err) {\r\n            reject(err);\r\n            return;\r\n          }\r\n          log('debug', 'HTTP server closed');\r\n          resolve();\r\n        });\r\n        if (ENV.DESTROY_SOCKETS) {\r\n          for (const socket of sockets.values()) {\r\n            socket.destroy();\r\n          }\r\n        }\r\n      }),\r\n  }));\r\n}","code-length":598,"reference":"Initialize an HTTP server\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortAndAddFirstElement(array, sortBy, element) {\r\n    return _(array)\r\n        .sortBy(sortBy)\r\n        .unshift(element)\r\n        .value();\r\n}","code-length":58,"reference":"Sort an array by the name of existing property and add a first element into array\n\n","result":"Generate code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction objectInterface(config) {\r\n    return function(obj) {\r\n        var result = {};\r\n        for (var i = 0; i < config.length; i++) {\r\n            var OR, NEXT, REAL;\r\n            if ((OR = config[i].split('\/')) && OR[1]) {\r\n                result[OR[0]] = obj[OR[0]] || Function('return ' + OR[1])();\r\n            }\r\n            else if ((NEXT = config[i].split('|')) && NEXT[1]) {\r\n                result[NEXT[0]] = Function('return ' + NEXT[1]).call(obj);\r\n            }\r\n            else if ((REAL = config[i].split(':')) && REAL[1]) {\r\n                result[REAL[0]] = Function('return ' + REAL[1])();\r\n            }\r\n            else {\r\n                result[config[i]] = obj[config[i]];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","code-length":256,"reference":"Interface for building an object by configuration\n\n","result":"Create an object interface.","score":[0.2134,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction httpTransaction(req, res) {\r\n    let initializationPromise;\r\n        return Promise.resolve().then(() => {\r\n      const request = {\r\n        url: req.url,\r\n        method: req.method.toLowerCase(),\r\n        headers: req.headers,\r\n        body: req,\r\n      };\r\n      const transaction = {\r\n        protocol: req.connection.encrypted ? 'https' : 'http',\r\n        ip:\r\n          (req.headers['x-forwarded-for'] || '').split(',')[0] ||\r\n          req.connection.remoteAddress,\r\n        startInBytes: req.socket.bytesRead,\r\n        startOutBytes: req.socket.bytesWritten,\r\n        startTime: time(),\r\n        url: req.url,\r\n        method: req.method,\r\n        reqHeaders: req.headers,\r\n        errored: false,\r\n      };\r\n      const delayPromise = delay.create(TIMEOUT);\r\n      let id = req.headers['transaction-id'] || uniqueId();\r\n      if (TRANSACTIONS[id]) {\r\n        initializationPromise = Promise.reject(\r\n          new HTTPError(400, 'E_TRANSACTION_ID_NOT_UNIQUE', id),\r\n        );\r\n        id = uniqueId();\r\n      } else {\r\n        initializationPromise = Promise.resolve();\r\n      }\r\n      transaction.id = id;\r\n      TRANSACTIONS[id] = transaction;\r\n      return [\r\n        request,\r\n        {\r\n          id,\r\n          start: startTransaction.bind(\r\n            null,\r\n            { id, req, res, delayPromise },\r\n            initializationPromise,\r\n          ),\r\n          catch: catchTransaction.bind(null, { id, req, res }),\r\n          end: endTransaction.bind(null, { id, req, res, delayPromise }),\r\n        },\r\n      ];\r\n    });\r\n  }","code-length":469,"reference":"Create a new HTTP transaction\n","result":"Create a transaction for HTTP requests.","score":[0.3247,0.6189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dateDifference(date1, date2, differenceType) {\r\n    var diffMilliseconds = Math.abs(date1 - date2);\r\n    switch(differenceType) {\r\n        case 'days':\r\n            return dates._getDaysDiff(diffMilliseconds);\r\n        case 'hours':\r\n            return dates._differenceInHours(diffMilliseconds);\r\n        case 'minutes':\r\n            return dates._differenceInMinutes(diffMilliseconds);\r\n        case 'milliseconds':\r\n            return diffMilliseconds;\r\n        default:\r\n            return {\r\n                days: dates._getDaysDiff(diffMilliseconds),\r\n                hours: dates._getHoursDiff(diffMilliseconds),\r\n                minutes: dates._getMinutesDiff(diffMilliseconds),\r\n                milliseconds: diffMilliseconds\r\n            }\r\n    }\r\n}","code-length":194,"reference":"Difference between dates which are passed, in formats 'milliseconds', 'days', 'hours', 'minutes'\n\n","result":"Calculate the difference between two dates.","score":[0.071,0.1645]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initErrorHandler({\r\n  ENV = {},\r\n  DEBUG_NODE_ENVS = DEFAULT_DEBUG_NODE_ENVS,\r\n  STRINGIFYERS = DEFAULT_STRINGIFYERS,\r\n}) {\r\n  return Promise.resolve(errorHandler);\r\n    function errorHandler(transactionId, responseSpec, err) {\r\n    return Promise.resolve().then(() => {\r\n      const response = {};\r\n      response.status = err.httpCode || 500;\r\n      response.headers = Object.assign({}, err.headers || {}, {\r\n        'cache-control': 'private',\r\n        'content-type':\r\n          responseSpec &&\r\n          responseSpec.contentTypes[0] &&\r\n          STRINGIFYERS[responseSpec.contentTypes[0]]\r\n            ? responseSpec.contentTypes[0]\r\n            : Object.keys(STRINGIFYERS)[0],\r\n      });\r\n      response.body = {\r\n        error: {\r\n          code: err.code || 'E_UNEXPECTED',\r\nd,\r\n        },\r\n      };\r\n      if (ENV && DEBUG_NODE_ENVS.includes(ENV.NODE_ENV)) {\r\n        response.body.error.stack = err.stack;\r\n        response.body.error.params = err.params;\r\n      }\r\n      return response;\r\n    });\r\n  }\r\n}","code-length":332,"reference":"Initialize an error handler for the\nHTTP router\n","result":"Initialize the error handler.","score":[0.1547,0.1974]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dateDifferenceFromNow(date, differenceType) {\r\n    var now = new Date(),\r\n        diffMilliseconds = Math.abs(date - now);\r\n    switch(differenceType) {\r\n        case 'days':\r\n            return dates._getDaysDiff(diffMilliseconds);\r\n        case 'hours':\r\n            return dates._differenceInHours(diffMilliseconds);\r\n        case 'minutes':\r\n            return dates._differenceInMinutes(diffMilliseconds);\r\n        case 'milliseconds':\r\n            return diffMilliseconds;\r\n        default:\r\n            return {\r\n                days: dates._getDaysDiff(diffMilliseconds),\r\n                hours: dates._getHoursDiff(diffMilliseconds),\r\n                minutes: dates._getMinutesDiff(diffMilliseconds),\r\n                milliseconds: diffMilliseconds\r\n            }\r\n    }\r\n}","code-length":198,"reference":"Difference between now and date which is passed, in formats 'milliseconds', 'days', 'hours', 'minutes'\n\n","result":"Calculate the difference between two dates.","score":[0.0509,0.142]}
{"code":"\/*is used to<extra_id_0>\r\nfunction consumePair(stream, close, open) {\r\n\tconst start = stream.pos;\r\n\tif (stream.eat(close)) {\r\n\t\twhile (!stream.sol()) {\r\n\t\t\tif (stream.eat(open)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tstream.pos--;\r\n\t\t}\r\n\t}\r\n\tstream.pos = start;\r\n\treturn false;\r\n}","code-length":116,"reference":"Consumes full character pair, if possible\n","result":"Consume pairs.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction consumeArray(stream, arr) {\r\n\tconst start = stream.pos;\r\n\tlet consumed = false;\r\n\tfor (let i = arr.length - 1; i >= 0 && !stream.sol(); i--) {\r\n\t\tif (!stream.eat(arr[i])) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tconsumed = i === 0;\r\n\t}\r\n\tif (!consumed) {\r\n\t\tstream.pos = start;\r\n\t}\r\n\treturn consumed;\r\n}","code-length":135,"reference":"Consumes all character codes from given array, right-to-left, if possible\n","result":"Consume array.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isIdent(c) {\r\n\treturn c === COLON || c === DASH || isAlpha(c) || isNumber(c);\r\n}","code-length":42,"reference":"Check if given character code belongs to HTML identifier\n","result":"Detect if a string is a identifier.","score":[0.1214,0.0568]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onCycle(event) {\r\n  if(objectPool.length == 0) {\r\n    throw new Error('Pool ran out of objects');\r\n  }\r\n  console.log(String(event.target));\r\n  initPool();  \r\n}","code-length":69,"reference":"pool for testing in place camelizeKeys","result":"Detect cycles.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction json(file) {\r\n  var filename = path.basename(file.path, path.extname(file.path)) + \".json\";\r\n  return optional(path.join(path.dirname(file.path), filename)) || {};\r\n}","code-length":68,"reference":"Load JSON data from a companion file and store in file data.\n\n","result":"Parse json files.","score":[0,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (event) {\r\n      if (event.name === 'goToLevel'\r\n        && event.level !== self.level) {\r\n        self.pushLevel(event.level);\r\n      }\r\n    }","code-length":61,"reference":"we push any user request to go toa level on the level stack.","result":"Listen to events.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (event) {\r\n      if (event.name === 'goToLevel') {\r\n        if (event.level === self.level) {\r\n          this.transitionTo(open);\r\n        } else {\r\n          self.pushLevel(event.level);\r\n          this.transitionTo(moving);\r\n        }\r\n      }\r\n    }","code-length":94,"reference":"we wait for a request to move to anotherlevel.","result":"Listen to events.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction decryptGCM(encryptedComponents, keyDerivationInfo) {\r\n    const encryptedContent = encryptedComponents.content;\r\n    const iv = new Buffer(encryptedComponents.iv, \"hex\");\r\n    const { auth: tagHex, salt } = encryptedComponents;\r\n    const decryptTool = crypto.createDecipheriv(ENC_ALGORITHM_GCM, keyDerivationInfo.key, iv);\r\n    decryptTool.setAAD(new Buffer(`${encryptedComponents.iv}${keyDerivationInfo.salt}`, \"utf8\"));\r\n    decryptTool.setAuthTag(new Buffer(tagHex, \"hex\"));\r\n    const decryptedText = decryptTool.update(encryptedContent, \"base64\", \"utf8\");\r\n    return Promise.resolve(`${decryptedText}${decryptTool.final(\"utf8\")}`);\r\n}","code-length":203,"reference":"Decrypt text using AES-GCM\n","result":"Decrypt GCM.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encryptCBC(text, keyDerivationInfo, iv) {\r\n    return Promise.resolve().then(() => {\r\n        const ivHex = iv.toString(\"hex\");\r\n        const encryptTool = crypto.createCipheriv(ENC_ALGORITHM_CBC, keyDerivationInfo.key, iv);\r\n        const hmacTool = crypto.createHmac(HMAC_ALGORITHM, keyDerivationInfo.hmac);\r\n        const { rounds } = keyDerivationInfo;\r\n        let encryptedContent = encryptTool.update(text, \"utf8\", \"base64\");\r\n        encryptedContent += encryptTool.final(\"base64\");\r\n        hmacTool.update(encryptedContent);\r\n        hmacTool.update(ivHex);\r\n        hmacTool.update(keyDerivationInfo.salt);\r\n        const hmacHex = hmacTool.digest(\"hex\");\r\n        return {\r\n            mode: \"cbc\",\r\n            auth: hmacHex,\r\n            iv: ivHex,\r\n            salt: keyDerivationInfo.salt,\r\n            rounds,\r\n            content: encryptedContent\r\n        };\r\n    });\r\n}","code-length":265,"reference":"Encrypt text using AES-CBC\n","result":"DecryptCBC.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encryptGCM(text, keyDerivationInfo, iv) {\r\n    return Promise.resolve().then(() => {\r\n        const ivHex = iv.toString(\"hex\");\r\n        const { rounds } = keyDerivationInfo;\r\n        const encryptTool = crypto.createCipheriv(ENC_ALGORITHM_GCM, keyDerivationInfo.key, iv);\r\n        encryptTool.setAAD(new Buffer(`${ivHex}${keyDerivationInfo.salt}`, \"utf8\"));\r\n        let encryptedContent = encryptTool.update(text, \"utf8\", \"base64\");\r\n        encryptedContent += encryptTool.final(\"base64\");\r\n        const tag = encryptTool.getAuthTag();\r\n        return {\r\n            mode: \"gcm\",\r\n            iv: ivHex,\r\n            salt: keyDerivationInfo.salt,\r\n            rounds,\r\n            content: encryptedContent,\r\n            auth: tag.toString(\"hex\")\r\n        };\r\n    });\r\n}","code-length":243,"reference":"Encrypt text using AES-GCM\n","result":"Encrypt GCM text.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction unpackEncryptedContent(encryptedContent) {\r\n    const [content, iv, salt, auth, roundsRaw, methodRaw] = encryptedContent.split(\"$\");\r\n    const rounds = roundsRaw ? parseInt(roundsRaw, 10) : PBKDF2_ROUND_DEFAULT;\r\n    const method = methodRaw || \"cbc\";\r\n    return {\r\n        content,\r\n        iv,\r\n        salt,\r\n        auth,\r\n        rounds,\r\n        method\r\n    };\r\n}","code-length":124,"reference":"Unpack encrypted content components from an encrypted string\n","result":"Unpack encrypted content.","score":[0.109,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deriveFromPassword(pbkdf2Gen, password, salt, rounds, generateHMAC = true) {\r\n    if (!password) {\r\n        return Promise.reject(new Error(\"Failed deriving key: Password must be provided\"));\r\n    }\r\n    if (!salt) {\r\n        return Promise.reject(new Error(\"Failed deriving key: Salt must be provided\"));\r\n    }\r\n    if (!rounds || rounds <= 0) {\r\n        return Promise.reject(new Error(\"Failed deriving key: Rounds must be greater than 0\"));\r\n    }\r\n    const bits = generateHMAC ? (PASSWORD_KEY_SIZE + HMAC_KEY_SIZE) * 8 : PASSWORD_KEY_SIZE * 8;\r\n    return pbkdf2Gen(password, salt, rounds, bits)\r\n        .then(derivedKeyData => derivedKeyData.toString(\"hex\"))\r\n        .then(function(derivedKeyHex) {\r\n            const dkhLength = derivedKeyHex.length;\r\n            const keyBuffer = generateHMAC\r\n                ? new Buffer(derivedKeyHex.substr(0, dkhLength \/ 2), \"hex\")\r\n                : new Buffer(derivedKeyHex, \"hex\");\r\n            const output = {\r\n                salt: salt,\r\n                key: keyBuffer,\r\n                rounds: rounds\r\n            };\r\n            if (generateHMAC) {\r\n                output.hmac = new Buffer(derivedKeyHex.substr(dkhLength \/ 2, dkhLength \/ 2), \"hex\");\r\n            }\r\n            return output;\r\n        });\r\n}","code-length":378,"reference":"Derived key info\n","result":"Derive a key from a password.","score":[0.193,0.303]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pbkdf2(password, salt, rounds, bits) {\r\n    return new Promise((resolve, reject) => {\r\n        deriveKey(password, salt, rounds, bits \/ 8, DERIVED_KEY_ALGORITHM, (err, key) => {\r\n            if (err) {\r\n                return reject(err);\r\n            }\r\n            return resolve(key);\r\n        });\r\n    });\r\n}","code-length":105,"reference":"The default PBKDF2 function\n","result":"Generate a password.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createEncodeStream(schema) {\r\n  const stream = new BinaryStream({\r\n    readableObjectMode: false,\r\n    writableObjectMode: true,\r\n    transform: transformEncode,\r\n  });\r\n  stream[kschema] = schema;\r\n  return stream;\r\n}","code-length":77,"reference":"Create transform stream to encode objects into Buffer.\n","result":"Create the stream for encoding.","score":[0.1568,0.1299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createDecodeStream(bufOrSchema) {\r\n  let schema = null;\r\n  const isBuffer = Buffer.isBuffer(bufOrSchema);\r\n  if (!isBuffer) {\r\n    schema = bufOrSchema;\r\n  }\r\n  const stream = new BinaryStream({\r\n    transform: transformDecode,\r\n    readableObjectMode: true,\r\n    writableObjectMode: false,\r\n  });\r\n  stream[kschema] = schema;\r\n  if (isBuffer) {\r\n    stream.append(bufOrSchema);\r\n  }\r\n  return stream;\r\n}","code-length":149,"reference":"Create transform stream to decode binary data into object.\n","result":"Return new BinaryStream.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction erdosRenyi(GraphClass, options) {\r\n  if (!isGraphConstructor(GraphClass))\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid Graph constructor.');\r\n  var order = options.order,\r\n      probability = options.probability,\r\n      rng = options.rng || Math.random;\r\n  var graph = new GraphClass();\r\n  if (typeof options.approximateSize === 'number') {\r\n    var densityFunction = density[graph.type + 'Density'];\r\n    probability = densityFunction(order, options.approximateSize);\r\n  }\r\n  if (typeof order !== 'number' || order <= 0)\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid `order`. Should be a positive number.');\r\n  if (typeof probability !== 'number' || probability < 0 || probability > 1)\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid `probability`. Should be a number between 0 and 1. Or maybe you gave an `approximateSize` exceeding the graph\\'s density.');\r\n  if (typeof rng !== 'function')\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid `rng`. Should be a function.');\r\n  for (var i = 0; i < order; i++)\r\n    graph.addNode(i);\r\n  if (probability <= 0)\r\n    return graph;\r\n  if (order > 1) {\r\n    var iterator = combinations(range(order), 2),\r\n        path,\r\n        step;\r\n    while ((step = iterator.next(), !step.done)) {\r\n      path = step.value;\r\n      if (graph.type !== 'directed') {\r\n        if (rng() < probability)\r\n          graph.addUndirectedEdge(path[0], path[1]);\r\n      }\r\n      if (graph.type !== 'undirected') {\r\n        if (rng() < probability)\r\n          graph.addDirectedEdge(path[0], path[1]);\r\n        if (rng() < probability)\r\n          graph.addDirectedEdge(path[1], path[0]);\r\n      }\r\n    }\r\n  }\r\n  return graph;\r\n}","code-length":562,"reference":"Generates a binomial graph graph with n nodes.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction erdosRenyiSparse(GraphClass, options) {\r\n  if (!isGraphConstructor(GraphClass))\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid Graph constructor.');\r\n  var order = options.order,\r\n      probability = options.probability,\r\n      rng = options.rng || Math.random;\r\n  var graph = new GraphClass();\r\n  if (typeof options.approximateSize === 'number') {\r\n    var densityFunction = density[graph.type + 'Density'];\r\n    probability = densityFunction(order, options.approximateSize);\r\n  }\r\n  if (typeof order !== 'number' || order <= 0)\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid `order`. Should be a positive number.');\r\n  if (typeof probability !== 'number' || probability < 0 || probability > 1)\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid `probability`. Should be a number between 0 and 1. Or maybe you gave an `approximateSize` exceeding the graph\\'s density.');\r\n  if (typeof rng !== 'function')\r\n    throw new Error('graphology-generators\/random\/erdos-renyi: invalid `rng`. Should be a function.');\r\n  for (var i = 0; i < order; i++)\r\n    graph.addNode(i);\r\n  if (probability <= 0)\r\n    return graph;\r\n  var w = -1,\r\n      lp = Math.log(1 - probability),\r\n      lr,\r\n      v;\r\n  if (graph.type !== 'undirected') {\r\n    v = 0;\r\n    while (v < order) {\r\n      lr = Math.log(1 - rng());\r\n      w += 1 + ((lr \/ lp) | 0);\r\n      if (v === w) {\r\n        w++;\r\n      }\r\n      while (v < order && order <= w) {\r\n        w -= order;\r\n        v++;\r\n        if (v === w)\r\n          w++;\r\n      }\r\n      if (v < order)\r\n        graph.addDirectedEdge(v, w);\r\n    }\r\n  }\r\n  w = -1;\r\n  if (graph.type !== 'directed') {\r\n    v = 1;\r\n    while (v < order) {\r\n      lr = Math.log(1 - rng());\r\n      w += 1 + ((lr \/ lp) | 0);\r\n      while (w >= v && v < order) {\r\n        w -= v;\r\n        v++;\r\n      }\r\n      if (v < order)\r\n        graph.addUndirectedEdge(v, w);\r\n    }\r\n  }\r\n  return graph;\r\n}","code-length":689,"reference":"Generates a binomial graph graph with n nodes using a faster algorithm\nfor sparse graphs.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction single_curve(d, ctx) {\r\n        var centroids = compute_centroids(d);\r\n        var cps = compute_control_points(centroids);\r\n        ctx.moveTo(cps[0].e(1), cps[0].e(2));\r\n        for (var i = 1; i < cps.length; i += 3) {\r\n            if (__.showControlPoints) {\r\n                for (var j = 0; j < 3; j++) {\r\n                    ctx.fillRect(cps[i+j].e(1), cps[i+j].e(2), 2, 2);\r\n                }\r\n            }\r\n            ctx.bezierCurveTo(cps[i].e(1), cps[i].e(2), cps[i+1].e(1), cps[i+1].e(2), cps[i+2].e(1), cps[i+2].e(2));\r\n        }\r\n    }","code-length":246,"reference":"draw single cubic bezier curve","result":"Draw a single curve.","score":[0.2488,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction color_path(d, ctx) {\r\n        ctx.beginPath();\r\n        if ((__.bundleDimension !== null && __.bundlingStrength > 0) || __.smoothness > 0) {\r\n            single_curve(d, ctx);\r\n        } else {\r\n            single_path(d, ctx);\r\n        }\r\n        ctx.stroke();\r\n    }","code-length":99,"reference":"draw single polyline","result":"Draw the color paths.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction paths(data, ctx) {\r\n        ctx.clearRect(-1, -1, w() + 2, h() + 2);\r\n        ctx.beginPath();\r\n        data.forEach(function(d) {\r\n            if ((__.bundleDimension !== null && __.bundlingStrength > 0) || __.smoothness > 0) {\r\n                single_curve(d, ctx);\r\n            } else {\r\n                single_path(d, ctx);\r\n            }\r\n        });\r\n        ctx.stroke();\r\n    }","code-length":137,"reference":"draw many polylines of the same color","result":"Draw the paths.","score":[0.1076,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction brushUpdated(newSelection) {\r\n        __.brushed = newSelection;\r\n        events.brush.call(pc,__.brushed);\r\n        pc.renderBrushed();\r\n    }","code-length":61,"reference":"This function can be used for 'live' updates of brushes. That is, during the specification of a brush, this method can be called to update the view.  ","result":"Update brushed elements.","score":[0,0.0203]}
{"code":"\/*is used to<extra_id_0>\r\nfunction selected() {\r\n            var actives = d3.keys(__.dimensions).filter(is_brushed),\r\n                extents = actives.map(function(p) { return brushes[p].extent(); });\r\n            if (actives.length === 0) return __.data;\r\n            var within = {\r\n                \"date\": function(d,p,dimension) {\r\n                    if (typeof __.dimensions[p].yscale.rangePoints === \"function\") {\r\n                        return extents[dimension][0] <= __.dimensions[p].yscale(d[p]) && __.dimensions[p].yscale(d[p]) <= extents[dimension][1]\r\n                    } else {\r\n                        return extents[dimension][0] <= d[p] && d[p] <= extents[dimension][1]\r\n                    }\r\n                },\r\n                \"number\": function(d,p,dimension) {\r\n                    if (typeof __.dimensions[p].yscale.rangePoints === \"function\") {\r\n                        return extents[dimension][0] <= __.dimensions[p].yscale(d[p]) && __.dimensions[p].yscale(d[p]) <= extents[dimension][1]\r\n                    } else {\r\n                        return extents[dimension][0] <= d[p] && d[p] <= extents[dimension][1]\r\n                    }\r\n                },\r\n                \"string\": function(d,p,dimension) {\r\n                    return extents[dimension][0] <= __.dimensions[p].yscale(d[p]) && __.dimensions[p].yscale(d[p]) <= extents[dimension][1]\r\n                }\r\n            };\r\n            return __.data\r\n                .filter(function(d) {\r\n                    switch(brush.predicate) {\r\n                        case \"AND\":\r\n                            return actives.every(function(p, dimension) {\r\n                                return within[__.dimensions[p].type](d,p,dimension);\r\n                            });\r\n                        case \"OR\":\r\n                            return actives.some(function(p, dimension) {\r\n                                return within[__.dimensions[p].type](d,p,dimension);\r\n                            });\r\n                        default:\r\n                            throw new Error(\"Unknown brush predicate \" + __.brushPredicate);\r\n                    }\r\n                });\r\n        }","code-length":557,"reference":"data within extents","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction consecutive(first, second) {\r\n                    var length = d3.keys(__.dimensions).length;\r\n                    return d3.keys(__.dimensions).some(function(d, i) {\r\n                        return (d === first)\r\n                            ? i + i < length && __.dimensions[i + 1] === second\r\n                            : false;\r\n                    });\r\n                }","code-length":97,"reference":"Checks if the first dimension is directly left of the second dimension.","result":"Detect consecutive .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convertProperty(originalKey, originalValue, isRtl) {\r\n  const key = getPropertyDoppelganger(originalKey, isRtl)\r\n  const value = getValueDoppelganger(key, originalValue, isRtl)\r\n  return {key, value}\r\n}","code-length":80,"reference":"Logically converts a property and its value based on the flow direction context\n","result":"Convert properties to values.","score":[0,0.0826]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPropertyDoppelganger(property, isRtl) {\r\n  const convertedProperty = isRtl\r\n    ? propertiesToConvert.rtl[property]\r\n    : propertiesToConvert.ltr[property]\r\n  return convertedProperty || property\r\n}","code-length":71,"reference":"Logically gets the direction of the given property based on the flow direction context\n","result":"Convert property to proper value.","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ReadFileCache(sourceDir, charset) {\r\n    assert.ok(this instanceof ReadFileCache);\r\n    assert.strictEqual(typeof sourceDir, \"string\");\r\n    this.charset = charset;\r\n    EventEmitter.call(this);\r\n    Object.defineProperties(this, {\r\n        sourceDir: { value: sourceDir },\r\n        sourceCache: { value: {} }\r\n    });\r\n}","code-length":102,"reference":"ReadFileCache is an EventEmitter subclass that caches file contents inmemory so that subsequent calls to readFileP return the same contents,regardless of any changes in the underlying file.","result":"Create a new instance of the class.","score":[0.011,0.04]}
{"code":"\/*is used to<extra_id_0>\r\nfunction done(err, resource) {\r\n            totalRequestElapsed += ((new Date().getTime()) - started);\r\n            ++totalRequests;\r\n            stats.avgFetchTime = parseInt(totalRequestElapsed \/ totalRequests);\r\n            if (err || verbose) util.log('cache|execute|done|err='+err+'|result='+(resource ? 'found':'null'));\r\n            if (err) {\r\n                ++stats.failed;\r\n            }\r\n            if (!err && defaultCacheTTL) {\r\n                if (stats.inCache >= defaultCacheSize) {\r\n                    weedOutCache();\r\n                }\r\n                var now = new Date().getTime();\r\n                resourceCache[key] = {\r\n                    'key'   : key,\r\n                    'epoch' : now,\r\n                    'access': now,\r\n                    'expire': defaultCacheTTL,\r\n                    'hits'  : 0,\r\n                    'data'  : resource\r\n                };\r\n                ++stats.inCache;\r\n            }\r\n                        var pendingRequests = requestQueue[key];\r\n            delete requestQueue[key];\r\n            for (var i = 0, size = pendingRequests.length ; i < size ; ++i) {\r\n                if (debug) util.log('cache|calling='+i+'|err='+err+'|resource='+(resource ? 'found':'null'));\r\n                if (!err && defaultCacheTTL) {\r\n                    ++resourceCache[key].hits;\r\n                }\r\n                pendingRequests[i].call(this, err, resource, resourceCache[key]);\r\n                --stats.waiting;\r\n            }\r\n            --stats.fetching;\r\n            if (stats.fetching === 0 && stats.waiting === 0) {\r\n                self.emit('stats', stats);\r\n            } else {\r\n                bufferedEmitter.call(self, 'stats', stats);\r\n            }\r\n        }","code-length":463,"reference":"Fetch the resource and call 'done' when it is fetched","result":"Avoid the callback from the callback function.","score":[0.1052,0.0515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n  options = (options||{});\r\n  this.agent = options.agent;\r\n  this.defaults = options.defaults||{};\r\n  this.log = options.logger||(new Ax({ level: \"info\" }));\r\n  this._sharedCookieJar = new CookieJar();\r\n  this.logCurl = options.logCurl || false;\r\n}","code-length":101,"reference":"Shred takes some options, including a logger and request defaults.","result":"Create a new instance of the class.","score":[0.1052,0.0515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(level,message) {\r\n  var debug = (level==\"debug\"||level==\"error\");\r\n  if (!message) { return message.toString(); }\r\n  if (typeof(message) == \"object\") {\r\n    if (message instanceof Error && debug) {\r\n      return message.stack;\r\n    } else {\r\n      return inspect(message);\r\n    }\r\n  } else {\r\n    return message.toString();\r\n  }\r\n}","code-length":119,"reference":"this is a quick-and-dirty logger. there are other nicer loggers out there but the ones i found were also somewhat involved. this one has a Ruby logger type interface  we can easily replace this, provide the info, debug, etc. methods are the same. or, we can change Haiku to use a more standard node.js interface","result":"Return message.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n  this.log = options.logger;\r\n  this.cookieJar = options.cookieJar;\r\n  this.encoding = options.encoding;\r\n  this.logCurl = options.logCurl;\r\n  processOptions(this,options||{});\r\n  createRequest(this);\r\n}","code-length":84,"reference":"The Shred object itself constructs the `Request` object. You should rarely need to do this directly.","result":"Create a new instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(request,options) {\r\n  request.log.debug(\"Processing request options ..\");\r\n  request.emitter = (new Emitter);\r\n  request.agent = options.agent;\r\n  if (options.on) {\r\n    for (var key in options.on) {\r\n      if (options.on.hasOwnProperty(key)) {\r\n        request.emitter.on(key, options.on[key]);\r\n      }\r\n    }\r\n  }\r\n  if (!options.url && !options.host) {\r\n    request.emitter.emit(\"request_error\",\r\n        new Error(\"No url or url options (host, port, etc.)\"));\r\n    return;\r\n  }\r\nroxy) {\r\n      request.url = options.proxy;\r\n      request.path = options.url;\r\n    } else {\r\n      request.url = options.url;\r\n    }\r\n  }\r\n  request.query = options.query||options.parameters||request.query ;\r\n  request.method = options.method;\r\n  request.setHeader(\"user-agent\",options.agent||\"Shred\");\r\n  request.setHeaders(options.headers);\r\n  if (request.cookieJar) {\r\n    var cookies = request.cookieJar.getCookies( CookieAccessInfo( request.host, request.path ) );\r\n    if (cookies.length) {\r\n      var cookieString = request.getHeader('cookie')||'';\r\n      for (var cookieIndex = 0; cookieIndex < cookies.length; ++cookieIndex) {\r\n          if ( cookieString.length && cookieString[ cookieString.length - 1 ] != ';' )\r\n          {\r\n              cookieString += ';';\r\n          }\r\n          cookieString += cookies[ cookieIndex ].name + '=' + cookies[ cookieIndex ].value + ';';\r\n      }\r\n      request.setHeader(\"cookie\", cookieString);\r\n    }\r\n  }\r\n    if (options.body||options.content) {\r\n    request.content = options.body||options.content;\r\n  }\r\n  request.timeout = options.timeout;\r\n}","code-length":518,"reference":"`processOptions` is called from the constructor to handle all the work associated with making sure we do our best to ensure we have a valid request.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(event) {\r\n        var emitter = request.emitter;\r\n        var textStatus = STATUS_CODES[response.status] ? STATUS_CODES[response.status].toLowerCase() : null;\r\n        if (emitter.listeners(response.status).length > 0 || emitter.listeners(textStatus).length > 0) {\r\n          emitter.emit(response.status, response);\r\n          emitter.emit(textStatus, response);\r\n        } else {\r\n          if (emitter.listeners(event).length>0) {\r\n            emitter.emit(event, response);\r\n          } else if (!response.isRedirect) {\r\n            emitter.emit(\"response\", response);\r\n          }\r\n        }\r\n      }","code-length":177,"reference":"Set up some event magic. The precedence is given first to status-specific handlers, then to responses for a given event, and then finally to the more general `response` handler. In the last case, we need to first make sure we're not dealing with a a redirect.","result":"Trigger an event.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (req) {\r\n  var headers = req.getHeaders();\r\n  var headerString = \"\";\r\n  for (var key in headers) {\r\n    headerString += '-H \"' + key + \": \" + headers[key] + '\" ';\r\n  }\r\n  var bodyString = \"\"\r\n  if (req.content) {\r\n    bodyString += \"-d '\" + req.content.body + \"' \";\r\n  }\r\n  var query = req.query ? '?' + req.query : \"\";\r\n  console.log(\"curl \" +\r\n    \"-X \" + req.method.toUpperCase() + \" \" +\r\n    req.scheme + \":\r\n    headerString +\r\n    bodyString\r\n  );\r\n}","code-length":183,"reference":"Logs the curl command for the request.","result":"Log the curl request.","score":[0.2362,0.2985]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(raw, request, callback) { \r\n  var response = this;\r\n  this._raw = raw;\r\n  this._setHeaders.call(this,raw.headers);\r\n    if (request.cookieJar && this.getHeader('set-cookie')) {\r\n    var cookieStrings = this.getHeader('set-cookie');\r\n    var cookieObjs = []\r\n      , cookie;\r\n    for (var i = 0; i < cookieStrings.length; i++) {\r\n      var cookieString = cookieStrings[i];\r\n      if (!cookieString) {\r\n        continue;\r\n      }\r\n      if (!cookieString.match(\/domain\\=\/i)) {\r\n        cookieString += '; domain=' + request.host;\r\n      }\r\n      if (!cookieString.match(\/path\\=\/i)) {\r\n        cookieString += '; path=' + request.path;\r\n      }\r\n      try {\r\n        cookie = new Cookie(cookieString);\r\n        if (cookie) {\r\n          cookieObjs.push(cookie);\r\n        }\r\n      } catch (e) {\r\n        console.warn(\"Tried to set bad cookie: \" + cookieString);\r\n      }\r\n    }\r\n    request.cookieJar.setCookies(cookieObjs);\r\n  }\r\n  this.request = request;\r\n  this.client = request.client;\r\n  this.log = this.request.log;\r\n  var chunkBuffers = [];\r\n  var dataLength = 0;\r\n  raw.on(\"data\", function(chunk) {\r\n    chunkBuffers.push(chunk);\r\n    dataLength += chunk.length;\r\n  });\r\n  raw.on(\"end\", function() {\r\n    var body;\r\n    if (typeof Buffer === 'undefined') {\r\n      body = chunkBuffers.join('');\r\n    } else {\r\n      body = new Buffer(dataLength);\r\n      for (var i = 0, pos = 0; i < chunkBuffers.length; i++) {\r\n        chunkBuffers[i].copy(body, pos);\r\n        pos += chunkBuffers[i].length;\r\n      }\r\n    }\r\n    var setBodyAndFinish = function (body) {\r\n      response._body = new Content({ \r\n        body: body,\r\n        type: response.getHeader(\"Content-Type\")\r\n      });\r\n      callback(response);\r\n    }\r\n    if (zlib && response.getHeader(\"Content-Encoding\") === 'gzip'){\r\n      zlib.gunzip(body, function (err, gunzippedBody) {\r\n        if (Iconv && response.request.encoding){\r\n          body = Iconv.fromEncoding(gunzippedBody,response.request.encoding);\r\n        } else {\r\n          body = gunzippedBody.toString();\r\n        }\r\n        setBodyAndFinish(body);\r\n      })\r\n    }\r\n    else{\r\n       if (response.request.encoding){\r\n            body = Iconv.fromEncoding(body,response.request.encoding);\r\n        }        \r\n      setBodyAndFinish(body);\r\n    }\r\n  });\r\n}","code-length":755,"reference":"Construct a `Response` object. You should never have to do this directly. The `Request` object handles this, getting the raw response object and passing it in here, along with the request. The callback allows us to stream the response and then use the callback to let the request know when it's ready.","result":"Code too long,keep in 512.","score":[0.0,0.0106]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(constructor) {\r\n    constructor.prototype.getHeader = function(name) { return getHeader(this,name); };\r\n    constructor.prototype.getHeaders = function() { return getHeaders(this,arguments); };\r\n  }","code-length":64,"reference":"Add getters.","result":"Construct the constructor.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(constructor) {\r\n    constructor.prototype._setHeader = function(key,value) { return setHeader(this,key,value); };\r\n    constructor.prototype._setHeaders = function(hash) { return setHeaders(this,hash); };\r\n  }","code-length":70,"reference":"Add setters but as \"private\" methods.","result":"Create a constructor for the response.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(constructor) {\r\n    constructor.prototype.setHeader = function(key,value) { return setHeader(this,key,value); };\r\n    constructor.prototype.setHeaders = function(hash) { return setHeaders(this,hash); };\r\n  }","code-length":70,"reference":"Add setters.","result":"Create a constructor for the response.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(constructor) {\r\n    constructor.prototype.getHeader = function(name) { return getHeader(this,name); };\r\n    constructor.prototype.getHeaders = function() { return getHeaders(this,arguments); };\r\n    constructor.prototype.setHeader = function(key,value) { return setHeader(this,key,value); };\r\n    constructor.prototype.setHeaders = function(hash) { return setHeaders(this,hash); };\r\n  }","code-length":116,"reference":"Add both getters and setters.","result":"Create a constructor.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(encoding) {\r\n        var enc = encoding || \"utf8\";\r\n        var codecOptions = undefined;\r\n        while (1) {\r\n            if (getType(enc) === \"String\")\r\n                enc = enc.replace(\/[- ]\/g, \"\").toLowerCase();\r\n            var codec = iconv.encodings[enc];\r\n            var type = getType(codec);\r\n            if (type === \"String\") {\r\n                codecOptions = {originalEncoding: enc};\r\n                enc = codec;\r\n            }\r\n            else if (type === \"Object\" && codec.type != undefined) {\r\n                codecOptions = codec;\r\n                enc = codec.type;\r\n            } \r\n            else if (type === \"Function\")\r\n                return codec(codecOptions);\r\n            else\r\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\r\n        }\r\n    }","code-length":234,"reference":"Get correct codec for given encoding.","result":"Create a new encoding .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n            if (!options.chars || (options.chars.length !== 128 && options.chars.length !== 256))\r\n                throw new Error(\"Encoding '\"+options.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\r\n                        if (options.chars.length === 128)\r\n                options.chars = asciiString + options.chars;\r\n                        if (!options.charsBuf) {\r\n                options.charsBuf = new Buffer(options.chars, 'ucs2');\r\n            }\r\n                        if (!options.revCharsBuf) {\r\n                options.revCharsBuf = new Buffer(65536);\r\n                var defChar = iconv.defaultCharSingleByte.charCodeAt(0);\r\n                for (var i = 0; i < options.revCharsBuf.length; i++)\r\n                    options.revCharsBuf[i] = defChar;\r\n                for (var i = 0; i < options.chars.length; i++)\r\n                    options.revCharsBuf[options.chars.charCodeAt(i)] = i;\r\n            }\r\n                        return {\r\n                toEncoding: function(str) {\r\n                    str = ensureString(str);\r\n                                        var buf = new Buffer(str.length);\r\n                    var revCharsBuf = options.revCharsBuf;\r\n                    for (var i = 0; i < str.length; i++)\r\n                        buf[i] = revCharsBuf[str.charCodeAt(i)];\r\n                                        return buf;\r\n                },\r\n                fromEncoding: function(buf) {\r\n                    buf = ensureBuffer(buf);\r\n                                        var charsBuf = options.charsBuf;\r\n                    var newBuf = new Buffer(buf.length*2);\r\n                    var idx1 = 0, idx2 = 0;\r\n                    for (var i = 0, _len = buf.length; i < _len; i++) {\r\n                        idx1 = buf[i]*2; idx2 = i*2;\r\n                        newBuf[idx2] = charsBuf[idx1];\r\n                        newBuf[idx2+1] = charsBuf[idx1+1];\r\n                    }\r\n                    return newBuf.toString('ucs2');\r\n                }\r\n            };\r\n        }","code-length":541,"reference":"Codepage single-byte encodings.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n            var table = options.table, key, revCharsTable = options.revCharsTable;\r\n            if (!table) {\r\n                throw new Error(\"Encoding '\" + options.type +\"' has incorect 'table' option\");\r\n            }\r\n            if(!revCharsTable) {\r\n                revCharsTable = options.revCharsTable = {};\r\n                for (key in table) {\r\n                    revCharsTable[table[key]] = parseInt(key);\r\n                }\r\n            }\r\n                        return {\r\n                toEncoding: function(str) {\r\n                    str = ensureString(str);\r\n                    var strLen = str.length;\r\n                    var bufLen = strLen;\r\n                    for (var i = 0; i < strLen; i++)\r\n                        if (str.charCodeAt(i) >> 7)\r\n                            bufLen++;\r\n                    var newBuf = new Buffer(bufLen), gbkcode, unicode, \r\n                        defaultChar = revCharsTable[iconv.defaultCharUnicode.charCodeAt(0)];\r\n                    for (var i = 0, j = 0; i < strLen; i++) {\r\n                        unicode = str.charCodeAt(i);\r\n                        if (unicode >> 7) {\r\n                            gbkcode = revCharsTable[unicode] || defaultChar;\r\n                            newBuf[j++] = gbkcode >> 8;\r\n                            newBuf[j++] = gbkcode & 0xFF;\r\n                        } else {\r\n                            newBuf[j++] = unicode;\r\n                        }\r\n                    }\r\n                    return newBuf;\r\n                },\r\n                fromEncoding: function(buf) {\r\n                    buf = ensureBuffer(buf);\r\n                    var bufLen = buf.length, strLen = 0;\r\n                    for (var i = 0; i < bufLen; i++) {\r\n                        strLen++;\r\n                        if (buf[i] & 0x80)\r\n                            i++;\r\n                    }\r\n                    var newBuf = new Buffer(strLen*2), unicode, gbkcode,\r\n                        defaultChar = iconv.defaultCharUnicode.charCodeAt(0);\r\n                                        for (var i = 0, j = 0; i < bufLen; i++, j+=2) {\r\n                        gbkcode = buf[i];\r\n                        if (gbkcode & 0x80) {\r\n                            gbkcode = (gbkcode << 8) + buf[++i];\r\n                            unicode = table[gbkcode] || defaultChar;\r\n                        } else {\r\n                            unicode = gbkcode;\r\n                        }\r\n                        newBuf[j] = unicode & 0xFF;\r\n                        newBuf[j+1] = unicode >> 8;\r\n                    }\r\n                    return newBuf.toString('ucs2');\r\n                }\r\n            }\r\n        }","code-length":685,"reference":"Codepage double-byte encodings.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encodeUserAuth(user) {\r\n  if (!user) {\r\n    return null;\r\n  }\r\n  var token = user.token;\r\n  if (token) {\r\n    var sha1 = typeof token === 'object' ? token.sha1 : token;\r\n    return 'token ' + sha1;\r\n  }\r\n  return 'Basic ' + base64.encode(user.username + ':' + user.password)\r\n}","code-length":115,"reference":"Generates the authentication parameter for the user\nPreference will be given to the token if it exists\n","result":"Encode user auth.","score":[0.0038,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Vec4() {\r\n        switch ( arguments.length ) {\r\n            case 1:\r\n                var argument = arguments[0];\r\n                this.x = argument.x || argument[0] || 0.0;\r\n                this.y = argument.y || argument[1] || 0.0;\r\n                this.z = argument.z || argument[2] || 0.0;\r\n                this.w = argument.w || argument[3] || 0.0;\r\n                break;\r\n            case 4:\r\n                this.x = arguments[0];\r\n                this.y = arguments[1];\r\n                this.z = arguments[2];\r\n                this.w = arguments[3] || 0.0;\r\n                break;\r\n            default:\r\n                this.x = 0.0;\r\n                this.y = 0.0;\r\n                this.z = 0.0;\r\n                this.w = 0.0;\r\n                break;\r\n        }\r\n    }","code-length":247,"reference":"Instantiates a Vec4 object.\n","result":"Create a new instance of the class.","score":[0.1615,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction create(EConstructor) {\r\n  FormattedError.displayName = EConstructor.displayName || EConstructor.name\r\n  return FormattedError\r\n  function FormattedError(format) {\r\n    if (format) {\r\n      format = formatter.apply(null, arguments)\r\n    }\r\n    return new EConstructor(format)\r\n  }\r\n}","code-length":96,"reference":"Create a new `EConstructor`, with the formatted `format` as a first argument.","result":"Create a new instance.","score":[0.0891,0.1339]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Mat44( that ) {\r\n        that = that || [\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ];\r\n        if ( that instanceof Array ) {\r\n            this.data = that;\r\n        } else {\r\n            this.data = new Array( 16 );\r\n            this.data[0] = that.data[0];\r\n            this.data[1] = that.data[1];\r\n            this.data[2] = that.data[2];\r\n            this.data[3] = that.data[3];\r\n            this.data[4] = that.data[4];\r\n            this.data[5] = that.data[5];\r\n            this.data[6] = that.data[6];\r\n            this.data[7] = that.data[7];\r\n            this.data[8] = that.data[8];\r\n            this.data[9] = that.data[9];\r\n            this.data[10] = that.data[10];\r\n            this.data[11] = that.data[11];\r\n            this.data[12] = that.data[12];\r\n            this.data[13] = that.data[13];\r\n            this.data[14] = that.data[14];\r\n            this.data[15] = that.data[15];\r\n        }\r\n    }","code-length":373,"reference":"Instantiates a Mat44 object.\n","result":"Create a Mat.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Vec2() {\r\n        switch ( arguments.length ) {\r\n            case 1:\r\n                var argument = arguments[0];\r\n                this.x = argument.x || argument[0] || 0.0;\r\n                this.y = argument.y || argument[1] || 0.0;\r\n                break;\r\n            case 2:\r\n                this.x = arguments[0];\r\n                this.y = arguments[1];\r\n                break;\r\n            default:\r\n                this.x = 0;\r\n                this.y = 0;\r\n                break;\r\n        }\r\n    }","code-length":154,"reference":"Instantiates a Vec2 object.\n","result":"Create a new instance of the class.","score":[0.1615,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Quaternion() {\r\n        switch ( arguments.length ) {\r\n            case 1:\r\n                var argument = arguments[0];\r\n                if ( argument.w !== undefined ) {\r\n                    this.w = argument.w;\r\n                } else if ( argument[0] !== undefined ) {\r\n                    this.w = argument[0];\r\n                } else {\r\n                    this.w = 1.0;\r\n                }\r\n                this.x = argument.x || argument[1] || 0.0;\r\n                this.y = argument.y || argument[2] || 0.0;\r\n                this.z = argument.z || argument[3] || 0.0;\r\n                break;\r\n            case 4:\r\n                this.w = arguments[0];\r\n                this.x = arguments[1];\r\n                this.y = arguments[2];\r\n                this.z = arguments[3];\r\n                break;\r\n            default:\r\n                this.w = 1;\r\n                this.x = 0;\r\n                this.y = 0;\r\n                this.z = 0;\r\n                break;\r\n        }\r\n    }","code-length":284,"reference":"Instantiates a Quaternion object.\n","result":"Create a Quaternion object.","score":[0.658,0.7361]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Vec3() {\r\n        switch ( arguments.length ) {\r\n            case 1:\r\n                var argument = arguments[0];\r\n                this.x = argument.x || argument[0] || 0.0;\r\n                this.y = argument.y || argument[1] || 0.0;\r\n                this.z = argument.z || argument[2] || 0.0;\r\n                break;\r\n            case 3:\r\n                this.x = arguments[0];\r\n                this.y = arguments[1];\r\n                this.z = arguments[2];\r\n                break;\r\n            default:\r\n                this.x = 0.0;\r\n                this.y = 0.0;\r\n                this.z = 0.0;\r\n                break;\r\n        }\r\n    }","code-length":200,"reference":"Instantiates a Vec3 object.\n","result":"Create a new instance of the class.","score":[0.1615,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tif (!document.getElementById(\"snackbar-container\")) {\r\n\t\t\tvar snackbarContainer = document.createElement(\"div\");\r\n\t\t\t\r\n\t\t\tsnackbarContainer.setAttribute(\"id\", \"snackbar-container\");\r\n\t\t\t\r\n\t\t\tdocument.body.appendChild(snackbarContainer);\r\n\t\t}\r\n\t}","code-length":99,"reference":"Create container for the snackbar\n\n","result":"Create the snackbar.","score":[0.2493,0.2083]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(element) {\r\n\t\tvar __self = this;\r\n\t\t\r\n\t\telement.addEventListener(\"click\", function(){\r\n\t\t\tif (typeof __self.callback == \"function\") {\r\n\t\t\t\t__self.callback();\r\n\t\t\t}\r\n\t\t\telement.setAttribute(\"class\", \"snackbar\");\r\n\t    \t__self.destroy(element);\r\n\t\t});\r\n\t\t\r\n\t\telement.addEventListener(\"mouseenter\",function(){\r\n\t\t\t__self.timer.pause();\r\n\t\t});\r\n\t\telement.addEventListener(\"mouseout\",function(){\r\n\t\t\t__self.timer.resume();\r\n\t\t});\r\n\t}","code-length":173,"reference":"Activate the listeners\n\n","result":"Create a new snackbar element.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(newOptions) {\r\n\t\tvar __self = this,\r\n  \t\t\toptions = newOptions || {};\r\n    \tfor (var opt in this.options) {\r\n        \tif (__self.options.hasOwnProperty(opt) && !options.hasOwnProperty(opt)) {\r\n            \toptions[opt] = __self.options[opt];\r\n        \t}\r\n        }\r\n       \treturn options;\r\n\t}","code-length":112,"reference":"Compare the options to the default ones.\n\n","result":"Create a new instance of the class.","score":[0.1615,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(Vue){\r\n\t\tvar __self = this;\r\n\t\tVue.prototype.$snackbar = {};\r\n\t  \tVue.prototype.$snackbar.create = function(data, options, callback){\r\n\t  \t\t__self.create(data, options, callback);\r\n\t  \t};\r\n\t}","code-length":89,"reference":"Install function for Vue\n\n","result":"Create a Vue instance.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Transform( that ) {\r\n        that = that || {};\r\n        if ( that.data instanceof Array ) {\r\n            that = that.decompose();\r\n            this.rotation = that.rotation;\r\n            this.translation = that.translation || new Vec3();\r\n            this.scale = that.scale;\r\n        } else {\r\n            this.rotation = that.rotation ? new Quaternion( that.rotation ) : new Quaternion();\r\n            this.translation = that.translation ? new Vec3( that.translation ) : new Vec3();\r\n            if ( typeof that.scale === 'number' ) {\r\n                this.scale = new Vec3( that.scale, that.scale, that.scale );\r\n            } else {\r\n                this.scale = that.scale ? new Vec3( that.scale ) : new Vec3( 1, 1, 1 );\r\n            }\r\n        }\r\n    }","code-length":223,"reference":"Instantiates a Transform object.\n","result":"Create a transform object.","score":[0.3799,0.7361]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Triangle() {\r\n        switch ( arguments.length ) {\r\n            case 1:\r\n                var arg = arguments[0];\r\n                this.a = new Vec3( arg[0] || arg.a );\r\n                this.b = new Vec3( arg[1] || arg.b );\r\n                this.c = new Vec3( arg[2] || arg.c );\r\n                break;\r\n            case 3:\r\n                this.a = new Vec3( arguments[0] );\r\n                this.b = new Vec3( arguments[1] );\r\n                this.c = new Vec3( arguments[2] );\r\n                break;\r\n            default:\r\n                this.a = new Vec3( 0, 0, 0 );\r\n                this.b = new Vec3( 1, 0, 0 );\r\n                this.c = new Vec3( 1, 1, 0 );\r\n                break;\r\n        }\r\n    }","code-length":233,"reference":"Instantiates a Triangle object.\n","result":"Create a new Triangle object.","score":[0.3761,0.6233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bash(str, pattern, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('expected a string');\r\n  }\r\n  if (typeof pattern !== 'string') {\r\n    throw new TypeError('expected a string');\r\n  }\r\n  if (isWindows()) {\r\n    throw new Error('bash-match does not work on windows');\r\n  }\r\n  try {\r\n    var opts = createOptions(pattern, options);\r\n    var res = spawn.sync(getBashPath(), cmd(str, pattern, opts), opts);\r\n    var err = toString(res.stderr);\r\n    if (err) {\r\n      return handleError(err, opts);\r\n    }\r\n    return !!toString(res.stdout);\r\n  } catch (err) {\r\n    return handleError(err, opts);\r\n  }\r\n}","code-length":217,"reference":"Returns true if `str` matches the given `pattern`.\n\n```js\nvar bash = require('bash-match');\nconsole.log(bash('foo', 'f*'));\n\/\/=> true\n\nconsole.log(bash('foo', 'b*'));\n\/\/=> false\n```\n\n","result":"Match patterns.","score":[0,0.025]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cmd(str, pattern, options) {\r\n  var valid = ['dotglob', 'extglob', 'failglob', 'globstar', 'nocaseglob', 'nullglob'];\r\n  var args = [];\r\n  for (var key in options) {\r\n    if (options.hasOwnProperty(key) && valid.indexOf(key) !== -1) {\r\n      args.push('-O', key);\r\n    }\r\n  }\r\n  args.push('-c', 'IFS=$\"\\n\"; if [[ \"' + str + '\" = ' + pattern + ' ]]; then echo true; fi');\r\n  return args;\r\n}","code-length":161,"reference":"Create the command to use","result":"Run commands.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createOptions(pattern, options) {\r\n  if (options && options.normalized === true) return options;\r\n  var opts = extend({cwd: process.cwd()}, options);\r\n  if (opts.nocase === true) opts.nocaseglob = true;\r\n  if (opts.nonull === true) opts.nullglob = true;\r\n  if (opts.dot === true) opts.dotglob = true;\r\n  if (!opts.hasOwnProperty('globstar') && pattern.indexOf('**') !== -1) {\r\n    opts.globstar = true;\r\n  }\r\n  if (!opts.hasOwnProperty('extglob') && isExtglob(pattern)) {\r\n    opts.extglob = true;\r\n  }\r\n  opts.normalized = true;\r\n  return opts;\r\n}","code-length":200,"reference":"Shallow clone and create options","result":"Create options.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBashPath() {\r\n  if (bashPath) return bashPath;\r\n  if (fs.existsSync('\/usr\/local\/bin\/bash')) {\r\n    bashPath = '\/usr\/local\/bin\/bash';\r\n  } else if (fs.existsSync('\/bin\/bash')) {\r\n    bashPath = '\/bin\/bash';\r\n  } else {\r\n    bashPath = 'bash';\r\n  }\r\n  return bashPath;\r\n}","code-length":120,"reference":"Get bash path","result":"Generate the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Memory(options) {\r\n  options = options || {};\r\n  var self = this;\r\n  self.flush = options.db._db._memory.flush || false;\r\n  self.flushInterval = options.db._db._memory.flushInterval || 10000;\r\n  self.flushFile = options.file;\r\n  self.memoryTable = [];\r\n  console.log('Data will be handled using \\'Memory\\' driver');\r\n  var content = util.fileSystem.readSync(self.flushFile);\r\n  self.set(content);\r\n  if (self.flush) {\r\n    console.log('\\'Memory\\' driver will flush data every %sms', self.flushInterval);\r\n    setInterval(function flushToDisk() {\r\n      util.fileSystem.lock(self.flushFile, function afterLock(err) {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n        self.get(function afterGet(err, inMemoryContent) {\r\n          if (err) {\r\n            util.fileSystem.unlock(self.flushFile);\r\n            throw err;\r\n          }\r\n          util.fileSystem.write(self.flushFile, inMemoryContent, function afterWrite(err) {\r\n            util.fileSystem.unlock(self.flushFile);\r\n            if (err) {\r\n              throw err;\r\n            }\r\n          });\r\n        });\r\n      });\r\n    }, self.flushInterval);\r\n  }\r\n}","code-length":361,"reference":"Provides in memory storage and regular flush to disk.\n\n","result":"Store data in memory.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deductcost() {\r\n  var cost = [];\r\n  if (!giving.have || giving.have.length < 1) return;\r\n  var cost = [];\r\n  for (var i = 0; i < giving.have.length; i++) {\r\n    for (var j = 0; j < giving.have[i].length; j++) {\r\n      cost.push(giving.have[i][j]);\r\n    }\r\n  }\r\n  if (typeof cost[0] === 'string') cost = [cost];\r\n  function deduct(from, amt) {\r\n    var current = parseInt(from.getAttribute('data-quantity'));\r\n    current -= amt;\r\n    from.setAttribute('data-quantity', current);\r\n    updateAmounts(from);\r\n    if (current < 1) {\r\n      from.setAttribute('data-type', 'none');\r\n      from.innerHTML = '';\r\n    }\r\n  }\r\n  [].forEach.call(craftable.querySelectorAll('li'), function(li, i) {\r\n    var row = Math.floor(i \/ 3);\r\n    var has = (li.getAttribute('data-type') || 'none').toLowerCase();\r\n    for (var c = 0; c < cost.length; c++) {\r\n      if (cost[c][0].toLowerCase() === has) {\r\n        var price = cost[c][1];\r\n        cost.splice(c, 1);\r\n        deduct(li, price);\r\n        return false;\r\n      }\r\n    }\r\n  });\r\n}","code-length":396,"reference":"removes the items from craftable if result is picked up","result":"Deductcostcost.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (sub_node) {\r\n                if ( sub_node ) {\r\n                    walk(sub_node, depth + 1);\r\n                } else if ( node.pages ) {\r\n                    node.pages.forEach(function (sub_node, name) {\r\n                        walk(sub_node, depth + 1);\r\n                    });\r\n                }\r\n            }","code-length":95,"reference":"descend a specific node or descend all","result":"Walk the tree.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(provides) {\r\n\t\tif (_.isArray(provides)) {\r\n\t\t\tthis._arguments = this._provides = (!this._provides) ? provides : this._provides.concat(provides);\r\n\t\t} else {\r\n\t\t\tthis._provides = _.extend({}, this._provides, provides);\r\n\t\t\tthis._arguments = _.map(this.deps, function(key) {\r\n\t\t\t\treturn this._provides[key];\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\treturn this;\r\n\t}","code-length":143,"reference":"Registers dependencies that can be provided to the function\n","result":"Provide a dependency.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(context, callback) {\r\n\t\tif (arguments.length === 1) {\r\n\t\t\tcallback = context;\r\n\t\t\tcontext = this._context;\r\n\t\t}\r\n\t\tif (this.isAsync) {\r\n\t\t\t\r\n\t\t\tvar asyncArgs = this._arguments.slice();\r\n\t\t\t\r\n\t\t\tasyncArgs.push(callback);\r\n\t\t\t\r\n\t\t\tthis.fn.apply(context, asyncArgs);\r\n\t\t} else {\r\n\t\t\t\r\n\t\t\tif (callback) {\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcallback(null, this.fn.apply(context, this._arguments));\r\n\t\t\t\t} catch(e) {\r\n\t\t\t\t\tcallback(e);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\treturn this.fn.apply(context, this._arguments);\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":228,"reference":"Calls the function\n\nWill return the result if not async and no callback is provided\n\n","result":"Wrap functions in a function.","score":[0,0.0357]}
{"code":"\/*is used to<extra_id_0>\r\nfunction each(arr, callback) {\r\n\t\tvar wrapper = this;\r\n\t\tif (this.isAsync) {\r\n\t\t\treturn async.each(arr, function(item, cb) {\r\n\t\t\t\twrapper.call(item, cb);\r\n\t\t\t}, callback);\r\n\t\t} else {\r\n\t\t\tarr.each(function(item) {\r\n\t\t\t\twrapper.call(item);\r\n\t\t\t});\r\n\t\t\tif (callback) { callback(); }\r\n\t\t}\r\n\t}","code-length":131,"reference":"Applies the function iterator to each item in arr, in parallel.\n\nThe context of the function will be the current item in the array.\n\n","result":"Iterate over an array.","score":[0.0022,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction map(arr, callback) {\r\n\t\tvar wrapper = this;\r\n\t\tif (this.isAsync) {\r\n\t\t\tasync.map(arr, function(item, cb) {\r\n\t\t\t\twrapper.call(item, cb);\r\n\t\t\t}, callback);\r\n\t\t} else {\r\n\t\t\tcallback(null, arr.map(function(item) {\r\n\t\t\t\treturn wrapper.call(item);\r\n\t\t\t}));\r\n\t\t}\r\n\t}","code-length":124,"reference":"Returns the results of interating the function on each item in an array.\n\nThe context of the function will be the current item in the array.\n\n","result":"\t\treturn arr.","score":[0,0.0212]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(selectedDates, dateStr, instance) {\r\n\t\t\t\t\tthat.setProperty(\"dateValue\", selectedDates, true);\r\n\t\t\t\t\tthat.fireOnChange({selectedDates: selectedDates, dateStr: dateStr, instance: instance});\r\n\t\t\t\t}","code-length":68,"reference":"force wrap to true defining events callback","result":"Create a new Date object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startServer(options) {\r\n  options = initOptions(options);\r\n  var app = connect()\r\n    , root = options.root\r\n    , TEST = process.env.TEST\r\n    , isSilent = options.silent || TEST;\r\n  if (!isSilent) {\r\n    app.use(log);\r\n  }\r\n  var smOpts = {};\r\n  var smOptMap = {\r\n    ftpl: 'template'\r\n    , style: 'style'\r\n  };\r\n  Object.keys(smOptMap).forEach(function (key) {\r\n    if (options[key] !== undefined) smOpts[smOptMap[key]] = options[key];\r\n  });\r\n  app.use(serveMarkdown(root, smOpts));\r\n  app.use(serveStatic(root, {index: ['index.html']}));\r\n  app.use(serveIndex(root, {\r\n    icon: true\r\n    , template: options.dtpl\r\n    , stylesheet: options.style\r\n    , view: options.view\r\n  }));\r\n  debug('server run in ' + (process.env.TEST ? 'TEST' : 'PRODUCTION') + ' mode')\r\n  if (!TEST) {\r\n    app.listen(options.port);\r\n    showSuccessInfo(options);\r\n  }\r\n  return app;\r\n}","code-length":340,"reference":"start server with provided options","result":"Start the server.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction showSuccessInfo(options) {\r\n  if (options.silent) return;\r\n  console.log(chalk.blue('serve start Success: ')\r\n      + '\\n'\r\n      + chalk.green('\\t url   ')\r\n      + chalk.grey('http:\r\n      + chalk.red(options.port)\r\n      + chalk.grey('\/')\r\n      + '\\n'\r\n      + chalk.green('\\t serve ')\r\n      + chalk.grey(options.root)\r\n  );\r\n}","code-length":138,"reference":"show server starting information","result":"Show success info.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction log(req, res, next) {\r\n  console.log('['\r\n      + chalk.grey(ts())\r\n      + '] '\r\n      + chalk.white(decodeURI(req.url))\r\n  );\r\n  next();\r\n}","code-length":71,"reference":"simple log middleware, output the access log","result":"Log requests.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (valueToSet, type, iface, propertyKeys) {\r\n    type = type.toLowerCase();\r\n    propertyKeys.forEach(function(propertyKey) {\r\n      if(type == 'get')\r\n        valueToSet['Get'+propertyKey] = function (callback) {\r\n          iface.getProperty(propertyKey, callback);\r\n        }\r\n      else\r\n        valueToSet['Set'+propertyKey] = function (value, callback) {\r\n          iface.setProperty(propertyKey, value, callback);\r\n        }\r\n    });\r\n}","code-length":142,"reference":"type = \"get\" | \"set\"","result":"Create a new object to set the value.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction init(user_id,secret,storage) {\r\n    API_USER_ID=user_id;\r\n    API_SECRET=secret;\r\n    TOKEN_STORAGE=storage;\r\n    var hashName = md5(API_USER_ID+'::'+API_SECRET);\r\n    if (fs.existsSync(TOKEN_STORAGE+hashName)) {\r\n        TOKEN = fs.readFileSync(TOKEN_STORAGE+hashName,{encoding:'utf8'});\r\n    }\r\n    if (! TOKEN.length) {\r\n        getToken();\r\n    }\r\n}","code-length":144,"reference":"Sendpulse API initialization\n\n","result":"Initialize the API.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sendRequest(path, method, data, useToken, callback){\r\n    var headers = {}\r\n    headers['Content-Type'] = 'application\/json';\r\n    headers['Content-Length'] =  Buffer.byteLength(JSON.stringify(data));\r\n    if (useToken && TOKEN.length) {\r\n        headers['Authorization'] = 'Bearer '+TOKEN;\r\n    }\r\n    if (method === undefined) {\r\n        method = 'POST';\r\n    }\r\n    if (useToken === undefined) {\r\n        useToken = false;\r\n    }\r\n    var options = {\r\n        path: '\/'+path,\r\n        port: 443,\r\n        hostname: API_URL,\r\n        method: method,\r\n        headers: headers,\r\n    };\r\n    var req = https.request(\r\n        options,\r\n        function(response) {\r\n            var str = '';\r\n            response.on('data', function (chunk) {\r\n                if (response.statusCode==401) {\r\n                    getToken();\r\n                    sendRequest(path, method, data, true, callback);\r\n                } else {\r\n                    str += chunk;\r\n                }\r\n            });\r\n            response.on('end', function () {\r\n                if (response.statusCode != 401) {\r\n                    try {\r\n                        var answer = JSON.parse(str);\r\n                    } catch (ex) {\r\n                        var answer = returnError();\r\n                    }\r\n                    callback(answer);\r\n                }\r\n            });\r\n        }\r\n    );\r\n    req.write(JSON.stringify(data));\r\n    req.end();\r\n}","code-length":399,"reference":"Form and send request to API service\n\n","result":"Send a request to the API.","score":[0.2311,0.3704]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getToken(){\r\n    var data={\r\n        grant_type:'client_credentials',\r\n        client_id: API_USER_ID,\r\n        client_secret: API_SECRET\r\n    }\r\n    sendRequest( 'oauth\/access_token', 'POST', data, false, saveToken );\r\n    function saveToken(data) {\r\n        TOKEN = data.access_token;\r\n        var hashName = md5(API_USER_ID+'::'+API_SECRET);\r\n        fs.writeFileSync(TOKEN_STORAGE+hashName, TOKEN);\r\n    }\r\n}","code-length":148,"reference":"Get token and store it","result":"Return TOKEN.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction returnError(message){\r\n    var data = {is_error:1};\r\n    if (message !== undefined && message.length) {\r\n        data['message'] = message\r\n    }\r\n    return data;\r\n}","code-length":64,"reference":"Form error object\n\n","result":"Return error data.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createAddressBook(callback,bookName) {\r\n    if ((bookName === undefined) || (! bookName.length)) {\r\n        return callback(returnError(\"Empty book name\"));\r\n    }\r\n    var data = {bookName: bookName};\r\n    sendRequest( 'addressbooks', 'POST', data, true, callback );\r\n}","code-length":89,"reference":"Create address book\n\n","result":"Create a new address book.","score":[0.2857,0.3125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction editAddressBook(callback,id,bookName) {\r\n    if ((id===undefined) || (bookName === undefined) || (! bookName.length)) {\r\n        return callback(returnError(\"Empty book name or book id\"));\r\n    }\r\n    var data = {name: bookName};\r\n    sendRequest( 'addressbooks\/' + id, 'PUT', data, true, callback );\r\n}","code-length":102,"reference":"Edit address book name\n\n","result":"Edit an address book.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeAddressBook(callback,id){\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'addressbooks\/' + id, 'DELETE', {}, true, callback );\r\n}","code-length":68,"reference":"Remove address book\n\n","result":"Remove address books.","score":[0.5774,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBookInfo(callback,id){\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'addressbooks\/' + id, 'GET', {}, true, callback );\r\n}","code-length":69,"reference":"Get information about book\n\n","result":"Get book info.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEmailsFromBook(callback,id){\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'addressbooks\/' + id + '\/emails', 'GET', {}, true, callback );\r\n}","code-length":73,"reference":"List email addresses from book\n\n","result":"Fetch emails from book.","score":[0.2488,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addEmails(callback,id,emails){\r\n    if ((id===undefined) || (emails === undefined) || (! emails.length)) {\r\n        return callback(returnError(\"Empty email or book id\"));\r\n    }\r\n    var data = {emails: serialize(emails)};\r\n    sendRequest( 'addressbooks\/' + id + '\/emails', 'POST', data, true, callback );\r\n}","code-length":102,"reference":"Add new emails to address book\n\n","result":"Add emails to an addressbook.","score":[0.3079,0.4331]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEmailInfo(callback,id,email){\r\n    if ((id===undefined) || (email === undefined) || (! email.length)) {\r\n        return callback(returnError(\"Empty email or book id\"));\r\n    }\r\n    sendRequest( 'addressbooks\/' + id + '\/emails\/' + email, 'GET', {}, true, callback );\r\n}","code-length":90,"reference":"Get information about email address from book\n\n","result":"Get email info.","score":[0.128,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction campaignCost(callback,id) {\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'addressbooks\/' + id + '\/cost', 'GET', {}, true, callback );\r\n}","code-length":72,"reference":"Get cost of campaign based on address book\n\n","result":"Create a campaign.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction listCampaigns(callback,limit,offset){\r\n    var data={}\r\n    if (limit === undefined) {\r\n        limit = null;\r\n    } else {\r\n        data['limit'] = limit;\r\n    }\r\n    if (offset === undefined) {\r\n        offset = null;\r\n    } else {\r\n        data['offset'] = offset;\r\n    }\r\n    sendRequest('campaigns', 'GET', data, true, callback);\r\n}","code-length":120,"reference":"Get list of campaigns\n\n","result":"List all campaigns.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getCampaignInfo(callback,id){\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'campaigns\/' + id, 'GET', {}, true, callback );\r\n}","code-length":69,"reference":"Get information about campaign\n\n","result":"Get campaign info.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction campaignStatByCountries(callback,id){\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'campaigns\/' + id + '\/countries', 'GET', {}, true, callback );\r\n}","code-length":73,"reference":"Get campaign statistic by countries\n\n","result":"Get campaign stats by countries.","score":[0.3761,0.5111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction campaignStatByReferrals(callback,id){\r\n    if (id===undefined) {\r\n        return callback(returnError('Empty book id'));\r\n    }\r\n    sendRequest( 'campaigns\/' + id + '\/referrals', 'GET', {}, true, callback );\r\n}","code-length":77,"reference":"Get campaign statistic by referrals\n\n","result":"Get campaign stats by referrals.","score":[0.3761,0.5111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createCampaign(callback, senderName, senderEmail, subject, body, bookId, name, attachments){\r\n    if ((senderName===undefined)||(! senderName.length)||(senderEmail===undefined)||(! senderEmail.length)||(subject===undefined)||(! subject.length)||(body===undefined)||(! body.length)||(bookId===undefined)){\r\n        return callback(returnError('Not all data.'));\r\n    }\r\n    if (name===undefined){\r\n        name='';\r\n    }\r\n    if (attachments===undefined) {\r\n        attachments='';\r\n    }\r\n    if (attachments.length){\r\n        attachments = serialize(attachments);\r\n    }\r\n    var data = {\r\n        sender_name: senderName,\r\n        sender_email: senderEmail,\r\n        subject: subject,\r\n        body: base64(body),\r\n        list_id: bookId,\r\n        name: name,\r\n        attachments: attachments\r\n    }\r\n    sendRequest( 'campaigns', 'POST', data, true, callback );\r\n}","code-length":270,"reference":"Create new campaign\n\n","result":"Create a campaign.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addSender(callback, senderName, senderEmail){\r\n    if ((senderEmail===undefined)||(!senderEmail.length)||(senderName===undefined)||(!senderName.length)) {\r\n        return callback(returnError('Empty sender name or email'));\r\n    }\r\n    var data = {\r\n        email: senderEmail,\r\n        name: senderName\r\n    }\r\n    sendRequest( 'senders', 'POST', data, true, callback );\r\n}","code-length":122,"reference":"Add new sender\n\n","result":"Add a sender.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction activateSender(callback, senderEmail, code){\r\n    if ((senderEmail===undefined)||(!senderEmail.length)||(code===undefined)||(!code.length)){\r\n        return callback(returnError('Empty email or activation code'));\r\n    }\r\n    var data = {\r\n        code: code\r\n    }\r\n    sendRequest( 'senders\/' + senderEmail + '\/code', 'POST', data, true, callback );\r\n}","code-length":117,"reference":"Activate sender using code\n\n","result":"Activate sender.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSenderActivationMail(callback, senderEmail ) {\r\n    if ((senderEmail===undefined)||(!senderEmail.length)){\r\n        return callback(returnError('Empty email'));\r\n    }\r\n    sendRequest( 'senders\/' + senderEmail + '\/code', 'GET', {}, true, callback );\r\n}","code-length":84,"reference":"Request mail with activation code\n\n","result":"Send the sender activation mail.","score":[0.2403,0.2]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getEmailGlobalInfo(callback, email) {\r\n    if ((email===undefined)||(!email.length)){\r\n        return callback(returnError('Empty email'));\r\n    }\r\n    sendRequest( 'emails\/' + email, 'GET', {}, true, callback );\r\n}","code-length":75,"reference":"Get global information about email\n\n","result":"Get global info of email.","score":[0.3398,0.375]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeEmailFromAllBooks(callback, email){\r\n    if ((email===undefined)||(!email.length)){\r\n        return callback(returnError('Empty email'));\r\n    }\r\n    sendRequest( 'emails\/' + email, 'DELETE', {}, true, callback );\r\n}","code-length":77,"reference":"Remove email from all books\n\n","result":"Remove email from all books.","score":[0.7521,0.7938]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emailStatByCampaigns(callback,email) {\r\n    if ((email===undefined)||(!email.length)){\r\n        return callback(returnError('Empty email'));\r\n    }\r\n    sendRequest( 'emails\/' + email + '\/campaigns', 'GET', {}, true, callback );\r\n}","code-length":81,"reference":"Get email statistic by all campaigns\n\n","result":"Get email stats by campaigns.","score":[0.3079,0.4331]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addToBlackList(callback, emails, comment){\r\n    if ((emails===undefined)||(!emails.length)){\r\n        return callback(returnError('Empty email'));\r\n    }\r\n    if (comment === undefined) {\r\n        comment = '';\r\n    }\r\n    var data = {\r\n        emails: base64(emails),\r\n        comment: comment\r\n    }\r\n    sendRequest( 'blacklist', 'POST', data, true, callback );\r\n}","code-length":121,"reference":"Add email to blacklist\n\n","result":"Add to the blacklist.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction removeFromBlackList(callback, emails){\r\n    if ((emails===undefined)||(!emails.length)){\r\n        return callback(returnError('Empty emails'));\r\n    }\r\n    var data = {\r\n        emails: base64(emails),\r\n    }\r\n    sendRequest( 'blacklist', 'DELETE', data, true, callback );\r\n}","code-length":93,"reference":"Remove emails from blacklist\n\n","result":"Remove from the blacklist.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction smtpGetEmailInfoById(callback,id){\r\n    if ((id===undefined)||(! id.length)) {\r\n        return callback(returnError('Empty id'));\r\n    }\r\n    sendRequest( 'smtp\/emails\/' + id, 'GET', {}, true, callback );\r\n}","code-length":78,"reference":"Get information about email by id\n\n","result":"Get email info by id.","score":[0.2589,0.2542]}
{"code":"\/*is used to<extra_id_0>\r\nfunction minifyFile(resHtml, outputPath) {\r\n\tvar resHtml = minify(resHtml, opt, function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.error('error will processing file.');\r\n\t\t}\r\n\t});\r\n\tconsole.log('');\r\n\tconsole.log('Output file name : ' + outputPath);\r\n\tconsole.log('');\r\n\twriteFile(resHtml, outputPath);\r\n}","code-length":115,"reference":"minify the result","result":"Minify html.","score":[0,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeFile(resHtml, outputPath) {\r\n\tfs.writeFile(outputPath, resHtml, function (err) {\r\n\t\tif (err) {\r\n\t\t\tconsole.log('');\r\n\t\t\tconsole.log('File error: ' + err + '. Exit.');\r\n\t\t} else {\r\n\t\t\tconsole.log('');\r\n\t\t\tconsole.log('All done. Exit.'.green);\r\n\t\t}\r\n\t});\r\n}","code-length":118,"reference":"write result to file","result":"Generate the html file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Cookie(options) {\r\n  this.options = options || {};\r\n  this.options.expires =\r\n    typeof this.options.expires === 'number' ? this.options.expires : 30;\r\n  this.options.path =\r\n    this.options.path !== undefined ? this.options.path : '\/';\r\n  this.options.secure = typeof this.options.secure === 'boolean'\r\n    ? this.options.secure : false;\r\n}","code-length":119,"reference":"Create a cookie instance.\n\n","result":"Create a new Cookie object.","score":[0.3398,0.6233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction set(key, value, options) {\r\n  options = options || this.options;\r\n  var days = parseInt(options.expires || -1);\r\n  if(value !== undefined && typeof value !== 'function') {\r\n    var t = new Date();\r\n    t.setDate((t.getDate() + days));\r\n    var res = (document.cookie = [\r\n      this.encode(key), '=', this.stringify(value),\r\n      options.expires ? '; expires=' + t.toUTCString() : '',\r\n      options.path ? '; path=' + options.path : '',\r\n      options.domain ? '; domain=' + options.domain : '',\r\n      options.secure ? '; secure' : ''\r\n    ].join(''));\r\n    return res;\r\n  }\r\n}","code-length":200,"reference":"Set a cookie value.\n\n","result":"Return document.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction get(key, value) {\r\n  var i, parts, name, cookie;\r\n  var result = key ? undefined : {};\r\n    var cookies = (document.cookie || '').split('; ');\r\n  for (i = 0; i < cookies.length; i++) {\r\n    parts = cookies[i].split('=');\r\n    name = this.decode(parts.shift());\r\n    cookie = parts.join('=');\r\n    if (key && key === name) {\r\n      result = this.read(cookie, value);\r\n      break;\r\n    }\r\n    if (!key && (cookie = this.read(cookie)) !== undefined) {\r\n      result[name] = cookie;\r\n    }\r\n  }\r\n  return result;\r\n}","code-length":194,"reference":"Get a cookie value.\n\n","result":"Get the value of a cookie.","score":[0.2296,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction del(key, options) {\r\n  if(!options) {\r\n    options = {};\r\n    for(var z in this.options) {\r\n      options[z] = this.options[z];\r\n    }\r\n  }\r\n  options.expires = -1;\r\n  this.set(key, '', options);\r\n}","code-length":93,"reference":"Delete a cookie value.\n\n","result":"Delete a key.","score":[0.4137,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clear(except, options) {\r\n  var keys = this.get(), z;\r\n  except = except || [];\r\n  for(z in keys) {\r\n    if(~except.indexOf(z)) {\r\n      continue;\r\n    }\r\n    this.del(z, options);\r\n  }\r\n}","code-length":88,"reference":"Clear all stored cookies, optionally keeping the\nkeys in the except array.\n\n","result":"Clear all keys.","score":[0.0287,0.1689]}
{"code":"\/*is used to<extra_id_0>\r\nfunction curry2 (fn, self) {\r\n  var out = function () {\r\n    if (arguments.length === 0) return out\r\n    return arguments.length > 1\r\n      ? fn.apply(self, arguments)\r\n      : bind.call(fn, self, arguments[0])\r\n  }\r\n  out.uncurry = function uncurry () {\r\n    return fn\r\n  }\r\n  return out\r\n}","code-length":114,"reference":"Curry a binary function.\n\n","result":"Curry functions.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cloneGalleryItem(inst, element) {\r\n    const clone = element.cloneNode(true)\r\n    clone.removeAttribute('id')\r\n    clone.classList.add('mh-gallery-item--sort-helper')\r\n    return clone\r\n}","code-length":71,"reference":"Clone behaviour for gallery items used when creating a helper for thepurpose of sorting.","result":"Clone the gallery item.","score":[0.0312,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (localFilePath) {\r\n                let contentType = mime.lookup(localFilePath);\r\n                let standerFilePath = localFilePath.replace(\/\\\\\/g, '\/');\r\n                fs.readFile(localFilePath, function (readFileErr, fileData) {\r\n                    if (readFileErr) {\r\n                        throw readFileErr;\r\n                    }\r\n                    const putConfig = {\r\n                        Bucket: bucket.Name,\r\n                        Body: fileData,\r\n                        Key: standerFilePath,\r\n                        ContentType: contentType,\r\n                        AccessControlAllowOrigin: options.AccessControlAllowOrigin || '*',\r\n                        CacheControl: options.CacheControl || 'no-cache',\r\n                        Expires: options.Expires || null\r\n                    };\r\n                    if (options.contentEncoding) {\r\n                        putConfig.ContentEncoding = options.contentEncoding;\r\n                    }\r\n                    oss.putObject(putConfig, function (putObjectErr) {\r\n                        if (putObjectErr) {\r\n                            console.error('error:', putObjectErr);\r\n                            return putObjectErr;\r\n                        }\r\n                        console.log('upload success: ' + localFilePath);\r\n                        if (bucketPaths.indexOf(standerFilePath) === -1) {\r\n                            bucketPaths.push(standerFilePath);\r\n                        }\r\n                        if (localPaths.indexOf(standerFilePath) === -1) {\r\n                            localPaths.push(standerFilePath);\r\n                        }\r\n                        if (options.oss.autoRefreshCDN && cdn) {\r\n                            if (options.cdn.refreshQuota < 1) {\r\n                                console.error('There is no refresh cdn url quota today.');\r\n                                return;\r\n                            }\r\n                            let cdnDomain = '';\r\n                            if (\/^http\/.test(options.cdn.domain)) {\r\n                                cdnDomain = options.cdn.domain.replace(\/^https?:?\\\/?\\\/?\/, '');\r\n                                options.cdn.secure === undefined && (options.cdn.secure = \/^https\/.test(options.cdn.domein));\r\n                            }\r\n                            else {\r\n                                cdnDomain = options.cdn.domain;\r\n                            }\r\n                            let cdnObjectPath = url.format({\r\n                                protocol: options.oss.secure ? 'https' : 'http',\r\n                                hostname: cdnDomain,\r\n                                pathname: standerFilePath\r\n                            });\r\n                            options.debug && console.log('Refreshing CDN file: ', cdnObjectPath);\r\n                            cdn.refreshObjectCaches({\r\n                                ObjectType: 'File',\r\n                                ObjectPath: cdnObjectPath\r\n                            }, function (refreshCDNErr) {\r\n                                if (refreshCDNErr) {\r\n                                    console.error('refresh cdn error: ', refreshCDNErr);\r\n                                }\r\n                                else {\r\n                                    options.cdn.refreshQuota--;\r\n                                    console.log('Refresh cdn file success: ', cdnObjectPath);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }","code-length":711,"reference":"upload or update file function","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (filePath) {\r\n                let standerPath = filePath.replace(\/\\\\\/g, '\/');\r\n                oss.deleteObject({\r\n                    Bucket: bucket.Name,\r\n                    Key: standerPath\r\n                }, function (err) {\r\n                    if (err) {\r\n                        console.log('error:', err);\r\n                        return err;\r\n                    }\r\n                    let bucketIndex = bucketPaths.indexOf(standerPath);\r\n                    if (bucketIndex !== -1) {\r\n                        bucketPaths.splice(bucketIndex, 1);\r\n                    }\r\n                    let localIndex = localPaths.indexOf(standerPath);\r\n                    if (localIndex !== -1) {\r\n                        localPaths.splice(localIndex, 1);\r\n                    }\r\n                    console.log('delete success:' + standerPath);\r\n                });\r\n            }","code-length":210,"reference":"delete bucket file function","result":"Delete files.","score":[0,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setupDispatch ({ actions: actionHandlers = {}, schemas = {}, services = {}, middlewares = [], identOptions = {} }) {\r\n  const getService = setupGetService(schemas, services)\r\n  let dispatch = async (action) => {\r\n    debug('Dispatch: %o', action)\r\n    return handleAction(\r\n      action,\r\n      {\r\n        schemas,\r\n        services,\r\n        dispatch,\r\n        identOptions,\r\n        getService\r\n      },\r\n      actionHandlers\r\n    )\r\n  }\r\n  if (middlewares.length > 0) {\r\n    dispatch = compose(...middlewares)(dispatch)\r\n  }\r\n  return dispatch\r\n}","code-length":169,"reference":"Setup and return dispatch function. The dispatch function will call the\nrelevant action handler.\n","result":"Return actions.","score":[0,0.0391]}
{"code":"\/*is used to<extra_id_0>\r\nfunction nextSchedule (schedule, allowNow = false) {\r\n  if (schedule) {\r\n    try {\r\n      const dates = later.schedule(schedule).next(2)\r\n      return nextDate(dates, allowNow)\r\n    } catch (error) {\r\n      throw TypeError('Invalid schedule definition')\r\n    }\r\n  }\r\n  return null\r\n}","code-length":97,"reference":"Get next time for a schedule. Will never return the current time, even if it\nis valid for the schedule, unless `allowNow` is true.\n","result":"Generate the next schedule.","score":[0.0028,0.0682]}
{"code":"\/*is used to<extra_id_0>\r\nasync function deleteFn (action, { getService } = {}) {\r\n  debug('Action: DELETE')\r\n  const { type, id, service: serviceId, endpoint } = action.payload\r\n  const service = (typeof getService === 'function') ? getService(type, serviceId) : null\r\n  if (!service) {\r\n    return createUnknownServiceError(type, serviceId, 'DELETE')\r\n  }\r\n  const data = prepareData(action.payload)\r\n  if (data.length === 0) {\r\n    return createError(`No items to delete from service '${service.id}'`, 'noaction')\r\n  }\r\n  const endpointDebug = (endpoint) ? `endpoint '${endpoint}'` : `endpoint matching ${type} and ${id}`\r\n  debug('DELETE: Delete from service \\'%s\\' at %s.', service.id, endpointDebug)\r\n  const { response } = await service.send(appendToAction(action, { data }))\r\n  return (response.status === 'ok') ? { status: 'ok' } : response\r\n}","code-length":255,"reference":"Delete several items from a service, based on the given payload.\n","result":"Delete items from a service.","score":[0.1602,0.3606]}
{"code":"\/*is used to<extra_id_0>\r\nasync function request (action, { getService, dispatch }) {\r\n  debug('Action: REQUEST')\r\n  const {\r\n    type,\r\n    service: serviceId = null,\r\n    endpoint\r\n  } = action.payload\r\n  const service = getService(type, serviceId)\r\n  if (!service) {\r\n    return createUnknownServiceError(type, serviceId, 'GET')\r\n  }\r\n  const endpointDebug = (endpoint) ? `endpoint '${endpoint}'` : `endpoint matching type '${type}'`\r\n  debug('REQUEST: Fetch from service %s at %s', service.id, endpointDebug)\r\n  const { response } = await service.receive(action, dispatch)\r\n  return response\r\n}","code-length":176,"reference":"Normalize and map a request to an action, and map and serialize its response.\n","result":"Fetch a service from a service.","score":[0.0509,0.0379]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getIdent ({ payload, meta }, { getService, identOptions = {} }) {\r\n  if (!meta.ident) {\r\n    return createError('GET_IDENT: The request has no ident', 'noaction')\r\n  }\r\n  const { type } = identOptions\r\n  if (!type) {\r\n    return createError('GET_IDENT: Integreat is not set up with authentication', 'noaction')\r\n  }\r\n  const service = getService(type)\r\n  if (!service) {\r\n    return createUnknownServiceError(type, null, 'GET_IDENT')\r\n  }\r\n  const propKeys = preparePropKeys(identOptions.props)\r\n  const params = prepareParams(meta.ident, propKeys)\r\n  if (!params) {\r\n    return createError('GET_IDENT: The request has no ident with id or withToken', 'noaction')\r\n  }\r\n  const { response } = await service.send({\r\n    type: 'GET',\r\n    payload: { type, ...params },\r\n    meta: { ident: { root: true } }\r\n  })\r\n  return prepareResponse(response, payload, propKeys)\r\n}","code-length":289,"reference":"Get an ident item from service, based on the meta.ident object on the action.\n","result":"Get the ident from the service.","score":[0.0761,0.1894]}
{"code":"\/*is used to<extra_id_0>\r\nfunction integreat (\r\n  {\r\n    schemas: typeDefs,\r\n    services: serviceDefs,\r\n    mappings = [],\r\n    auths: authDefs = [],\r\n    ident: identOptions = {}\r\n  },\r\n  {\r\n    adapters = {},\r\n    authenticators = {},\r\n    filters = {},\r\n    transformers = {},\r\n    actions = {}\r\n  } = {},\r\n  middlewares = []\r\n) {\r\n  if (!serviceDefs || !typeDefs) {\r\n    throw new TypeError('Call integreat with at least services and schemas')\r\n  }\r\n  actions = { ...builtinActions, ...actions }\r\n  const schemas = R.compose(\r\n    R.indexBy(R.prop('id')),\r\n    R.map(schema)\r\n  )(typeDefs)\r\n  const pluralTypes = Object.keys(schemas)\r\n    .reduce((plurals, type) => ({ ...plurals, [schemas[type].plural]: type }), {})\r\n  const auths = authDefs\r\n    .reduce((auths, def) => (def)\r\n      ? {\r\n        ...auths,\r\n        [def.id]: {\r\n          authenticator: authenticators[def && def.authenticator],\r\n          options: def.options,\r\n          authentication: null\r\n        }\r\n      }\r\n      : auths,\r\n    {})\r\n  const services = R.compose(\r\n    R.indexBy(R.prop('id')),\r\n    R.map(createService({\r\n      adapters,\r\n      auths,\r\n      transformers,\r\n      schemas,\r\n      setupMapping: setupMapping({ filters, transformers, schemas, mappings })\r\n    }))\r\n  )(serviceDefs)\r\n  return {\r\n    version,\r\n    schemas,\r\n    services,\r\n    identType: identOptions.type,\r\n        dispatch: setupDispatch({\r\n      actions,\r\n      services,\r\n      schemas,\r\n      middlewares,\r\n      identOptions\r\n    }),\r\n        on (eventName, serviceId, listener) {\r\n      const service = services[serviceId]\r\n      if (service && service.on) {\r\n        service.on(eventName, listener)\r\n      }\r\n    },\r\n        typeFromPlural (plural) {\r\n      return pluralTypes[plural]\r\n    }\r\n  }\r\n}","code-length":583,"reference":"Return an Integreat instance with a dispatch method.\nUse the dispatch method for sending actions to services, for retrieving typed\nitems and updating data.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scheduleToAction (def) {\r\n  if (!def) {\r\n    return null\r\n  }\r\n  const id = def.id || null\r\n  const schedule = parseSchedule(def.schedule)\r\n  const nextTime = nextSchedule(schedule, true)\r\n  return {\r\n    ...def.action,\r\n    meta: {\r\n      id,\r\n      schedule,\r\n      queue: (nextTime) ? nextTime.getTime() : true\r\n    }\r\n  }\r\n}","code-length":130,"reference":"Create a queuable action from a schedule definition.\n","result":"Create a schedule to action.","score":[0.2284,0.3319]}
{"code":"\/*is used to<extra_id_0>\r\nasync function get (action, { getService } = {}) {\r\n  const {\r\n    type,\r\n    service: serviceId = null,\r\n    onlyMappedValues = false,\r\n    endpoint\r\n  } = action.payload\r\n  const service = (typeof getService === 'function')\r\n    ? getService(type, serviceId) : null\r\n  if (!service) {\r\n    return createUnknownServiceError(type, serviceId, 'GET')\r\n  }\r\n  const id = getIdFromPayload(action.payload)\r\n  if (Array.isArray(id) && !hasCollectionEndpoint(service.endpoints)) {\r\n    return getIndividualItems(id, action, getService)\r\n  }\r\n  const endpointDebug = (endpoint) ? `endpoint '${endpoint}'` : `endpoint matching type '${type}' and id '${id}'`\r\n  debug('GET: Fetch from service %s at %s', service.id, endpointDebug)\r\n  const { response } = await service.send(appendToAction(action, { id, onlyMappedValues }))\r\n  return response\r\n}","code-length":259,"reference":"Get several items from a service, based on the given action object.\n","result":"Fetch a single item from a service.","score":[0.1118,0.3261]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sendRequest ({ adapter, serviceId }) {\r\n  return async ({ request, response, connection }) => {\r\n    if (response) {\r\n      return response\r\n    }\r\n    try {\r\n      response = await adapter.send(request, connection)\r\n      return { ...response, access: request.access }\r\n    } catch (error) {\r\n      return createError(`Error retrieving from service '${serviceId}'. ${error}`)\r\n    }\r\n  }\r\n}","code-length":124,"reference":"Send the request with the adapter and return the response. Will serialize any\ndata in the request, and normalize any data in the response. The access\nobject on the request must have status granted, and will be returned on the\nresponse object.\n\n","result":"Send requests to the service.","score":[0.0002,0.0392]}
{"code":"\/*is used to<extra_id_0>\r\nfunction schema ({\r\n  id,\r\n  plural,\r\n  service,\r\n  attributes: attrDefs,\r\n  relationships: relDefs,\r\n  access,\r\n  internal = false\r\n}) {\r\n  const attributes = {\r\n    ...expandFields(attrDefs || {}),\r\n    id: { type: 'string' },\r\n    type: { type: 'string' },\r\n    createdAt: { type: 'date' },\r\n    updatedAt: { type: 'date' }\r\n  }\r\n  const relationships = expandFields(relDefs || {})\r\n  const defaultAttrs = prepareDefaultAttrs(attributes, attrDefs)\r\n  const defaultRels = prepareDefaultRels(relationships, relDefs)\r\n  const castFn = cast({ id, attributes, relationships, defaultAttrs, defaultRels })\r\n  return {\r\n    id,\r\n    plural: plural || `${id}s`,\r\n    service,\r\n    internal,\r\n    attributes,\r\n    relationships,\r\n    access,\r\n        cast (data, { onlyMappedValues = false } = {}) {\r\n      return mapAny((data) => castFn(data, { onlyMappedValues }), data)\r\n    },\r\n        castQueryParams (relId, data) {\r\n      return castQueryParams(relId, data, { relationships })\r\n    }\r\n  }\r\n}","code-length":332,"reference":"Create a schema with the given id and service.\n","result":"Generate the schema.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mapping ({\r\n  filters,\r\n  transformers,\r\n  schemas = {},\r\n  mappings: mappingsArr = []\r\n} = {}) {\r\n  const mappings = mappingsArr.reduce(\r\n    (mappings, def) => ({ ...mappings, [def.id]: def }),\r\n    {}\r\n  )\r\n  const createPipelineFn = createPipeline(filters, transformers, schemas, mappings)\r\n  return (mapping, overrideType) => {\r\n    const { id, type, schema, pipeline } = createPipelineFn(mapping, overrideType)\r\n    if (!pipeline) {\r\n      return null\r\n    }\r\n    const mapper = mapTransform([\r\n      fwd('data'),\r\n      ...pipeline,\r\n      rev(set('data'))\r\n    ])\r\n    return {\r\n      id,\r\n      type,\r\n      schema,\r\n            fromService (data, { onlyMappedValues = true } = {}) {\r\n        return data\r\n          ? ensureArray(\r\n            (onlyMappedValues) ? mapper.onlyMappedValues(data) : mapper(data)\r\n          )\r\n          : []\r\n      },\r\n            toService (data, target = null) {\r\n        const mapped = mapper.rev.onlyMappedValues(data)\r\n        return (\r\n          (target\r\n            ? Array.isArray(target)\r\n              ? [...target].concat(mapped)\r\n              : mergeDeepWith(concatOrRight, target, mapped)\r\n            : mapped) || null\r\n        )\r\n      }\r\n    }\r\n  }\r\n}","code-length":382,"reference":"Return item mapper object with fromService and toService.\n","result":"Create a mapping function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mapFromService () {\r\n  return ({ response, request, responseMapper, mappings }) => {\r\n    if (response.status !== 'ok') {\r\n      return response\r\n    }\r\n    const type = request.params.type || Object.keys(mappings)\r\n    const { onlyMappedValues, unmapped = false } = request.params\r\n    if (unmapped) {\r\n      return response\r\n    }\r\n    const { data, status = response.status, error, paging, params } =\r\n      mapWithEndpoint(responseMapper, response, request.action)\r\n    if (status !== 'ok') {\r\n      return removeDataProp({ ...response, status, error })\r\n    }\r\n    const mapType = (type) => (mappings[type])\r\n      ? mappings[type].fromService({ ...request, data }, { onlyMappedValues })\r\n      : []\r\n    return {\r\n      ...response,\r\n      status,\r\n      ...((paging) ? { paging } : {}),\r\n      ...((params) ? { params } : {}),\r\n      data: (data) ? flatten(mapAny(mapType, type)) : undefined\r\n    }\r\n  }\r\n}","code-length":295,"reference":"Map the data going _to_ the service. Everything is handled by the mappings,\nbut this method make sure that the right types are mapped.\n\n","result":"Return responseMapper.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(tailInfo){\r\n    var z = this;\r\n    if(tailInfo) {\r\n      z.q.push(tailInfo);\r\n    }\r\n    var ti; \r\n    for(var i = 0;i < z.q.length;++i) {\r\n      ti = z.q[i];\r\n      if(ti.reading) {\r\n        continue;\r\n      }\r\n      if (!z.tails[ti.stat.ino]) {\r\n        z.q.splice(i,1);\r\n        --i;\r\n        continue;\r\n      }\r\n      if(ti.stat.size < ti.pos) {\r\n        ti.pos = 0;\r\n      }\r\n      var len = ti.stat.size-ti.pos;\r\n      z.q.splice(i,1);\r\n      --i;\r\n      z.readTail(ti,len);\r\n    }\r\n  }","code-length":234,"reference":"this emits the data events on the watcher emitter for all fds","result":"Read the tail of the file.","score":[0.0845,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(){\r\n    var z = this;\r\n    var l = 0;\r\n    Object.keys(z.tails).forEach(function(k) {\r\n      l += (z.tails[k].buf||'').length;\r\n    });\r\n    return l;\r\n  }","code-length":81,"reference":"return the total line buffer length from all active tails","result":"Calculate the length of the buffer.","score":[0.1179,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction preparePipeline (pipeline, collection = {}) {\r\n  pipeline = [].concat(pipeline)\r\n  const replaceWithFunction = (key) => (typeof key === 'string') ? collection[key] : key\r\n  const isFunctionOrObject = (obj) => obj && ['function', 'object'].includes(typeof obj)\r\n  return pipeline\r\n    .map(replaceWithFunction)\r\n    .filter(isFunctionOrObject)\r\n}","code-length":110,"reference":"Prepare pipeline by replacing keys with functions or function objects from\nthe collection object, and remove anything that is not functions or function\nobjects.\n","result":"Prepare the pipeline.","score":[0.0004,0.0457]}
{"code":"\/*is used to<extra_id_0>\r\nfunction castQueryParams (relId, data, { relationships }) {\r\n  const relationship = relationships[relId]\r\n  if (!relationship.query) {\r\n    return {}\r\n  }\r\n  return Object.keys(relationship.query)\r\n    .reduce((params, key) => {\r\n      const value = getField(data, relationship.query[key])\r\n      if (value === undefined) {\r\n        throw new TypeError('Missing value for query param')\r\n      }\r\n      return { ...params, [key]: value }\r\n    }, {})\r\n}","code-length":142,"reference":"Cast query params according to type","result":"Cast query params.","score":[0.2124,0.3289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setupQueue (queue) {\r\n  let dispatch = null\r\n  let subscribed = false\r\n  return {\r\n    queue,\r\n        setDispatch (dispatchFn) {\r\n      dispatch = dispatchFn\r\n      if (!subscribed && typeof dispatch === 'function') {\r\n        queue.subscribe(dispatch)\r\n        subscribed = true\r\n      }\r\n    },\r\n        middleware (next) {\r\n      return middleware(next, queue)\r\n    },\r\n        async schedule (defs) {\r\n      return schedule(defs, queue)\r\n    }\r\n  }\r\n}","code-length":146,"reference":"Set up Integreat queue interface.\n\n","result":"Setup the queue.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function getMeta ({ payload, meta }, { getService }) {\r\n  debug('Action: GET_META')\r\n  const { service: serviceId, endpoint, keys } = payload\r\n  const id = `meta:${serviceId}`\r\n  const service = getService(null, serviceId)\r\n  if (!service) {\r\n    debug(`GET_META: Service '${serviceId}' doesn't exist`)\r\n    return createError(`Service '${serviceId}' doesn't exist`)\r\n  }\r\n  const type = service.meta\r\n  const metaService = getService(type)\r\n  if (!metaService) {\r\n    return createError(`Service '${service.id}' doesn't support metadata (setting was '${service.meta}')`)\r\n  }\r\n  const endpointDebug = (endpoint) ? `endpoint '${endpoint}'` : `endpoint matching ${type} and ${id}`\r\n  debug('GET_META: Get meta %s for service \\'%s\\' on service \\'%s\\' at %s',\r\n    keys, service.id, metaService.id, endpointDebug)\r\n  const { response } = await metaService.send({\r\n    type: 'GET',\r\n    payload: { keys, type, id, endpoint },\r\n    meta: { ident: meta.ident }\r\n  })\r\n  if (response.status === 'ok') {\r\n    const { data } = response\r\n    const meta = prepareMeta(keys, data[0].attributes)\r\n    return { ...response, data: { service: serviceId, meta } }\r\n  } else {\r\n    return response\r\n  }\r\n}","code-length":382,"reference":"Get metadata for a service, based on the given action object.\n","result":"Get the meta data.","score":[0.066,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nasync function set (action, { getService, schemas }) {\r\n  debug('Action: SET')\r\n  const { service: serviceId, data, endpoint, onlyMappedValues = true } = action.payload\r\n  const type = extractType(action, data)\r\n  const id = extractId(data)\r\n  const service = getService(type, serviceId)\r\n  if (!service) {\r\n    return createUnknownServiceError(type, serviceId, 'SET')\r\n  }\r\n  const endpointDebug = (endpoint) ? `at endpoint '${endpoint}'` : ''\r\n  debug('SET: Send to service %s %s', service.id, endpointDebug)\r\n  const { response, authorizedRequestData } = await service.send(appendToAction(action, { id, type, onlyMappedValues }))\r\n  return mergeRequestAndResponseData(response, authorizedRequestData)\r\n}","code-length":210,"reference":"Set several items to a service, based on the given action object.\n","result":"Set a value.","score":[0.0242,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nasync function setMeta ({ payload, meta }, { getService }) {\r\n  debug('Action: SET_META')\r\n  const {\r\n    service: serviceId,\r\n    meta: metaAttrs,\r\n    endpoint\r\n  } = payload\r\n  const id = `meta:${serviceId}`\r\n  const service = getService(null, serviceId)\r\n  if (!service) {\r\n    debug(`SET_META: Service '${serviceId}' doesn't exist`)\r\n    return createError(`Service '${serviceId}' doesn't exist`)\r\n  }\r\n  const type = service.meta\r\n  const metaService = getService(type)\r\n  if (!metaService) {\r\n    debug(`SET_META: Service '${service.id}' doesn't support metadata (setting was '${service.meta}')`)\r\n    return { status: 'noaction' }\r\n  }\r\n  const endpointDebug = (endpoint) ? `endpoint '${endpoint}'` : `endpoint matching ${type} and ${id}`\r\n  debug('SET_META: Send metadata %o for service \\'%s\\' on service \\'%s\\' %s',\r\n    metaAttrs, service.id, metaService.id, endpointDebug)\r\n  const data = { id, type, attributes: metaAttrs }\r\n  const { response } = await metaService.send({\r\n    type: 'SET',\r\n    payload: { keys: Object.keys(metaAttrs), type, id, data, endpoint, onlyMappedValues: true },\r\n    meta: { ident: meta.ident }\r\n  })\r\n  return response\r\n}","code-length":375,"reference":"Set metadata on a service, based on the given action object.\n","result":"Set meta data.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exportToJSONSchema(expSpecifications, baseSchemaURL, baseTypeURL, flat = false) {\r\n  const namespaceResults = {};\r\n  const endOfTypeURL = baseTypeURL[baseTypeURL.length - 1];\r\n  if (endOfTypeURL !== '#' && endOfTypeURL !== '\/') {\r\n    baseTypeURL += '\/';\r\n  }\r\n  for (const ns of expSpecifications.namespaces.all) {\r\n    const lastLogger = logger;\r\n    logger = logger.child({ shrId: ns.namespace});\r\n    try {\r\n      logger.debug('Exporting namespace.');\r\n      if (flat) {\r\n        const { schemaId, schema } = flatNamespaceToSchema(ns, expSpecifications.dataElements, baseSchemaURL, baseTypeURL);\r\n        namespaceResults[schemaId] = schema;\r\n      } else {\r\n        const { schemaId, schema } = namespaceToSchema(ns, expSpecifications.dataElements, baseSchemaURL, baseTypeURL);\r\n        namespaceResults[schemaId] = schema;\r\n      }\r\n      logger.debug('Finished exporting namespace.');\r\n    } finally {\r\n      logger = lastLogger;\r\n    }\r\n  }\r\n  return namespaceResults;\r\n}","code-length":295,"reference":"Converts a group of specifications into JSON Schema.\n","result":"Export to JSONSchema.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeRef(id, enclosingNamespace, baseSchemaURL) {\r\n  if (id.namespace === enclosingNamespace.namespace) {\r\n    return '#\/definitions\/' + id.name;\r\n  } else {\r\n    return makeShrDefinitionURL(id, baseSchemaURL);\r\n  }\r\n}","code-length":80,"reference":"Create a JSON Schema reference to the specified type.\n\n","result":"Make ref references.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isOrWasAList(value) {\r\n  if (value.card.isList) {\r\n    return true;\r\n  }\r\n  const cardConstraints = value.constraintsFilter.own.card.constraints;\r\n  return cardConstraints.some((oneCard) => oneCard.isList);\r\n}","code-length":82,"reference":"Determine if a value or one of its ancestors is or was a list.\n\n","result":"Check if the value is a list.","score":[0.1057,0.2797]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findOptionInChoice(choice, optionId, dataElementSpecs) {\r\n  for (const option of choice.aggregateOptions) {\r\n    if (optionId.equals(option.identifier)) {\r\n      return option;\r\n    }\r\n  }\r\n  for (const option of choice.aggregateOptions) {\r\n    if (checkHasBaseType(optionId, option.identifier, dataElementSpecs)) {\r\n      return option;\r\n    }\r\n  }\r\n  return null;\r\n}","code-length":127,"reference":"Searches the aggregate options of a choice for the specified option.\n\n","result":"Find the option in a choice.","score":[0.0998,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction supportsCodeConstraint(identifier, dataElementSpecs) {\r\n  if (CODE.equals(identifier) || checkHasBaseType(identifier, new Identifier('shr.core', 'Coding'), dataElementSpecs)\r\n      || checkHasBaseType(identifier, new Identifier('shr.core', 'CodeableConcept'), dataElementSpecs)) {\r\n    return true;\r\n  }\r\n  const element = dataElementSpecs.findByIdentifier(identifier);\r\n  if (element.value) {\r\n    if (element.value instanceof IdentifiableValue) {\r\n      return CODE.equals(element.value.identifier) || checkHasBaseType(element.value.identifier, new Identifier('shr.core', 'Coding'), dataElementSpecs)\r\n          || checkHasBaseType(element.value.identifier, new Identifier('shr.core', 'CodeableConcept'), dataElementSpecs);\r\n    } else if (element.value instanceof ChoiceValue) {\r\n      for (const value of element.value.aggregateOptions) {\r\n        if (value instanceof IdentifiableValue) {\r\n          if (CODE.equals(value.identifier) || checkHasBaseType(value.identifier, new Identifier('shr.core', 'Coding'), dataElementSpecs)\r\n              || checkHasBaseType(value.identifier, new Identifier('shr.core', 'CodeableConcept'), dataElementSpecs)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}","code-length":353,"reference":"stealing from shr-expand \nDetermine if a type supports a code constraint.\n\n","result":"Check if a data element has a code constraint.","score":[0.2454,0.4481]}
{"code":"\/*is used to<extra_id_0>\r\nasync function expire ({ payload, meta = {} }, { dispatch }) {\r\n  const { service } = payload\r\n  const { ident } = meta\r\n  if (!service) {\r\n    return createError(`Can't delete expired without a specified service`)\r\n  }\r\n  if (!payload.endpoint) {\r\n    return createError(`Can't delete expired from service '${service}' without an endpoint`)\r\n  }\r\n  if (!payload.type) {\r\n    return createError(`Can't delete expired from service '${service}' without one or more specified types`)\r\n  }\r\n  const response = await getExpired(payload, ident, dispatch)\r\n  return deleteExpired(response, service, ident, dispatch)\r\n}","code-length":178,"reference":"Action to delete expired items.\n\nThe given `endpoint` is used to retrieve expired items from the `service`, and\nmay use the paramters `timestamp` or `isodate`, which represents the current\ntime plus the microseconds in `msFromNow`, the former as microseconds since\nJanuary 1, 1970, the latter as an ISO formatted date and time string.\n\nThe items are mapped and typed, so the `type` param should be set to one\nor more types expected from the `endpoint`, and may be a string or an array\nof strings.\n","result":"Expire a service.","score":[0.0,0.013]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformRange(range, ops) {\r\n  var rangeComps = range.split(':')\r\n    , newRange\r\n  var start = rangeComps[0]\r\n  ops.forEach(op => start = transformRangeAnchor(start, op, true))\r\n  var end = rangeComps[1]\r\n  ops.forEach(op => end = transformRangeAnchor(end, op, false))\r\n  if (start === end) return start\r\n  return start+':'+end\r\n}","code-length":129,"reference":"Transforms a range against an array of ops","result":"Transform ranges.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformRangeAnchor(target, op, isStart) {\r\n  var thisCell = parseCell(target)\r\n  if (op instanceof InsertCol) {\r\n    var otherCell = parseCell(op.newCol)\r\n    if (otherCell[0] <= thisCell[0]) return column.fromInt(thisCell[0]+1)+thisCell[1]\r\n  }\r\n  else if (op instanceof DeleteCol) {\r\n    var otherCell = parseCell(op.col)\r\n    if (otherCell[0] < thisCell[0]) return column.fromInt(thisCell[0]-1)+thisCell[1]\r\n    if (otherCell[0] === thisCell[0]) {\r\n      if (!isStart) return column.fromInt(thisCell[0]-1)+thisCell[1]     }\r\n  }\r\n  else if (op instanceof InsertRow) {\r\n    var otherCell = parseCell(op.newRow)\r\n    if (otherCell[1] <= thisCell[1]) return column.fromInt(thisCell[0])+(thisCell[1]+1)\r\n  }\r\n  else if (op instanceof DeleteRow) {\r\n    var otherCell = parseCell(op.col)\r\n    if (otherCell[1] < thisCell[1]) return column.fromInt(thisCell[0])+(thisCell[1]-1)\r\n    if (otherCell[1] === thisCell[1]) {\r\n      if (!isStart) return column.fromInt(thisCell[0])+(thisCell[1]-1)\r\n    }\r\n  }\r\n  return target\r\n}","code-length":401,"reference":"Transforms a range anchor, taking into account whether it's the start or end","result":"Transform range anchor operations.","score":[0.0337,0.0826]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchEndpoint (endpoints) {\r\n  return ({ type, payload, meta }) => endpoints\r\n    .find((endpoint) =>\r\n      matchId(endpoint, { type, payload }) &&\r\n      matchType(endpoint, { type, payload }) &&\r\n      matchScope(endpoint, { type, payload }) &&\r\n      matchAction(endpoint, { type, payload }) &&\r\n      matchParams(endpoint, { type, payload }) &&\r\n      matchFilters(endpoint, { type, payload, meta }))\r\n}","code-length":133,"reference":"Return the first matching endpoint from an array of endpoints that has\nalready been sortert with higher specificity first. Type should match before\nscope, which should match before action, but the order here is taken care of\nby the required sorting.\n\n","result":"Match endpoints.","score":[0,0.0135]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createAction (type, payload = {}, meta) {\r\n  if (!type) {\r\n    return null\r\n  }\r\n  const action = { type, payload }\r\n  if (meta) {\r\n    action.meta = meta\r\n  }\r\n  return action\r\n}","code-length":77,"reference":"Create an action object.\n","result":"Create actions.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction authorizeRequest ({ schemas }) {\r\n  return ({ request }) => {\r\n    const { access = {}, params = {}, action } = request\r\n    const { ident = null } = access\r\n    if (ident && ident.root) {\r\n      return authItemsAndWrap(request, { status: 'granted', ident, scheme: 'root' }, schemas)\r\n    }\r\n    if (!params.type) {\r\n      return authItemsAndWrap(request, { status: 'granted', ident, scheme: null }, schemas)\r\n    }\r\n    const requireAuth = !!request.auth\r\n    const schema = schemas[params.type]\r\n    const scheme = getScheme(schema, action)\r\n    const status = (doAuth(scheme, ident, requireAuth)) ? 'granted' : 'refused'\r\n    return authItemsAndWrap(request, { status, ident, scheme }, schemas)\r\n  }\r\n}","code-length":227,"reference":"Authorize the request according to the setting on the relevant schema.\nSets the access object with `status` property specifying whether access\nis `granted` or `refused`, and returns the request.\n\nThe access object also includes the `ident` and the  `scheme`used for\nauthentication.\n\n","result":"Authorize requests.","score":[0.0,0.0135]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requestFromAction (\r\n  { type: action, payload, meta = {} },\r\n  { endpoint, schemas = {} } = {}\r\n) {\r\n  const { data, ...params } = payload\r\n  const { ident = null } = meta\r\n  const typePlural = getPluralType(params.type, schemas)\r\n  return {\r\n    action,\r\n    params,\r\n    data,\r\n    endpoint: (endpoint && endpoint.options) || null,\r\n    access: { ident },\r\n    meta: {\r\n      typePlural\r\n    }\r\n  }\r\n}","code-length":149,"reference":"Complete missing props and allow only expected props on the request object.\n","result":"Create a request from an action.","score":[0.071,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getService (schemas, services) {\r\n  return (type, service) => {\r\n    if (!service && schemas[type]) {\r\n      service = schemas[type].service\r\n    }\r\n    return services[service] || null\r\n  }\r\n}","code-length":71,"reference":"Get service from type or service id.\n","result":"Get the service.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nasync function sync ({ payload, meta = {} }, { dispatch }) {\r\n  debug('Action: SYNC')\r\n  const fromParams = await generateFromParams(payload, meta, dispatch)\r\n  const toParams = generateToParams(payload, fromParams)\r\n  const lastSyncedAt = new Date()\r\n  const results = await Promise.all(\r\n    fromParams.map(getFromService(dispatch, payload.type, meta))\r\n  )\r\n  if (results.some((result) => result.status !== 'ok')) {\r\n    return (results.length === 1) ? results[0] : createError(makeErrorString(results))\r\n  }\r\n  const data = flatten(results.map((result) => result.data)).filter(Boolean)\r\n  if (data.length === 0 && payload.syncNoData !== true) {\r\n    return createError(`No items to update from service '${fromParams[0].service}'`, 'noaction')\r\n  }\r\n  return Promise.all([\r\n    ...createSetMetas(fromParams, lastSyncedAt, meta.ident, dispatch),\r\n    dispatch(action('SET', { data, ...toParams }, { ...meta, queue: true }))\r\n  ])\r\n    .then((responses) => {\r\n      return { status: 'ok', data: responses }\r\n    })\r\n}","code-length":330,"reference":"Action to sync from one service to another.\n\n`retrieve` indicates which items to retrieve. The default is `all`, which\nwill retrieve all items from the `get` endpoint. Set `retrieve` to `updated`\nto retrieve only items that are updated after the  `lastSyncedAt` date for\nthe `from` service. This is done by passing the `lastSyncedAt` date as a\nparameter named `updatedAfter` to the `get` endpoint, and by actively\nfilter away any items received with `updatedAt` earlier than `lastSyncedAt`.\n\nThe `lastSyncedAt` metadata will be set on the `from` service when items\nare retrieved and updated.\n\n","result":"Sync a service.","score":[0.0,0.0181]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (gulp, cwd, config) {\r\n  if (util.isNullOrUndefined(gulp)) {\r\n    throw 'gulp must be defined';\r\n  }\r\n    this._config = config || {},\r\n    this._cwd = cwd || __dirname;\r\n    this._root = path.relative(this._cwd, __dirname);\r\n    this._gulp = gulp;\r\n}","code-length":103,"reference":"Task api that configures and loads gulp tasks.\n\n","result":"Create a new instance of gulp .","score":[0.14,0.0633]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(bg) {\r\n    bg = bg ? bg : false\r\n    return (...args) => {\r\n      return this.output(args.join(' '), this.colors(bg))\r\n    }\r\n  }","code-length":62,"reference":"wrapper to pass bg","result":"Create a new function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (browserify, name, source) {\r\n  if (utility.isNullOrUndefined(browserify)) {\r\n    throw 'browserify must be defined.';\r\n  }\r\n  if (!utility.isNonEmptyString(name)) {\r\n    throw 'name must be defined.';\r\n  }\r\n  if (utility.isNullOrUndefined(source)) {\r\n    throw 'source must be defined.';\r\n  }\r\n  this._browserify = browserify;\r\n  this._name = name;\r\n  this._source = source;\r\n  this._hasModule = false;\r\n  this._hasResolver = false;\r\n}","code-length":165,"reference":"Babel external helper module injector.\n\nThis object will configure browserify to accept a streaming source and then\nresolve any relevant compile time bindings to the built module. The module\ncan later by referenced by name later down the browserify pipeline and modified\nfurther.\n\n","result":"Create a browserify instance.","score":[0.0,0.0256]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mapToService () {\r\n  return ({ request, requestMapper, mappings }) => {\r\n    const data = mapData(request.data, request, mappings)\r\n    return {\r\n      ...request,\r\n      data: applyEndpointMapper(data, request, requestMapper)\r\n    }\r\n  }\r\n}","code-length":84,"reference":"Map the data coming _from_ the service. Everything is handled by the mappings,\nbut this method make sure that the right types are mapped.\n\n","result":"Map data to service.","score":[0.0028,0.0682]}
{"code":"\/*is used to<extra_id_0>\r\nasync function processMessengerBody (body, context) {\r\n    const allMessages = getAllMessages(body)\r\n    if (!allMessages || !allMessages.length) return false\r\n    context = context || {}\r\n    for (let message of allMessages) {\r\n      message = _.cloneDeep(message)\r\n      const messageContext = Object.assign({}, context)\r\n      try {\r\n        for (let plugin of middleware) {\r\n          await plugin(message, messageContext)\r\n        }\r\n      } catch (error) {\r\n        const logError = (messageContext.log && messageContext.log.error instanceof Function)\r\n          ? messageContext.log.error\r\n          : console.error\r\n        logError('Error running middleware', error)\r\n      }\r\n    }\r\n    return true\r\n  }","code-length":199,"reference":"Process messages from Facebook Messenger.\n\n","result":"Process the body of a message with the middleware.","score":[0.1219,0.1852]}
{"code":"\/*is used to<extra_id_0>\r\nfunction create(prop) {\r\n  if (typeof prop !== 'string') {\r\n    throw new Error('expected the first argument to be a string.');\r\n  }\r\n  return function(app) {\r\n    if (this.isRegistered('base-' + prop)) return;\r\n    var config = utils.mapper(app)\r\n      .map('store', store(app.store))\r\n      .map('data')\r\n      .map('enable')\r\n      .map('disable')\r\n      .map('option')\r\n      .alias('options', 'option')\r\n      .map('set')\r\n      .map('del')\r\n    app.define(prop, proxy(config));\r\n    app[prop].process = config.process;\r\n  };\r\n  function store(app) {\r\n    if (!app) return {};\r\n    var mapper = utils.mapper(app);\r\n    app.define(prop, proxy(mapper));\r\n    return mapper;\r\n  }\r\n}","code-length":247,"reference":"Create a function for mapping `app` properties onto the\ngiven `prop` namespace.\n\n","result":"Create a new base class.","score":[0.0838,0.1659]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ElementMatrix(top) {\r\n  CommanalityMatrix.call(this, top);\r\n  this.row(' ');\r\n  this.collum(' ');\r\n  this.classlist = top.root.classlist;\r\n}","code-length":65,"reference":"Collects features and bind them to the node density","result":"Create element matrix.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction publicS3URI(string) {\r\n\treturn encodeURIComponent(string)\r\n\t\t.replace(\/%20\/img, '+')\r\n\t\t.replace(\/%2F\/img, '\/')\r\n    .replace(\/\\\"\/img, \"%22\")\r\n    .replace(\/\\#\/img, \"%23\")\r\n    .replace(\/\\$\/img, \"%24\")\r\n    .replace(\/\\&\/img, \"%26\")\r\n    .replace(\/\\'\/img, \"%27\")\r\n\t\t.replace(\/\\(\/img, \"%28\")\r\n    .replace(\/\\)\/img, \"%29\")\r\n    .replace(\/\\,\/img, \"%2C\")\r\n    .replace(\/\\:\/img, \"%3A\")\r\n    .replace(\/\\;\/img, \"%3B\")\r\n    .replace(\/\\=\/img, \"%3D\")\r\n    .replace(\/\\?\/img, \"%3F\")\r\n    .replace(\/\\@\/img, \"%40\");\r\n}","code-length":240,"reference":"node-s3-encode-url","result":"Generate public S.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (done) {\r\n        fs.writeFile(\r\n          path.resolve(__dirname, '..\/..\/test\/reallife\/expected\/' + item.key + '.json'),\r\n          JSON.stringify({\r\n            'title': item.title,\r\n            'text': item.text\r\n          }, null, '\\t') + '\\n',\r\n          done\r\n        );\r\n      }","code-length":101,"reference":"Save expected file","result":"Test the reallife.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (done) {\r\n        fs.writeFile(\r\n          path.resolve(__dirname, '..\/..\/test\/reallife\/source\/' + item.key + '.html'),\r\n          SOURCES[item.key],\r\n          done\r\n        );\r\n      }","code-length":72,"reference":"Save source file","result":"Test the reallife.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (done) {\r\n        datamap[item.index].labeled = true;\r\n        fs.writeFile(\r\n          path.resolve(__dirname, '..\/..\/test\/reallife\/datamap.json'),\r\n          JSON.stringify(datamap, null, '\\t') + '\\n',\r\n          done\r\n        );\r\n      }","code-length":94,"reference":"Save labeled flag","result":"Label the item.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Node(type, parent) {\r\n  this.type = type;\r\n  this.parent = parent;\r\n  this.root = parent ? parent.root : this;\r\n  this.identifyer = parent ? (++parent.root._counter) : 0;\r\n  this._textLength = 0;\r\n  this.tags = 0;\r\n  this.density = -1;\r\n  this.children = [];\r\n  this._text = '';\r\n  this._textCompiled = false;\r\n  this._noneStyleText = '';\r\n  this._noneStyleTextCompiled = false;\r\n  this.blocky = false;\r\n  this.blockyChildren = false;\r\n  this.inTree = true;\r\n}","code-length":183,"reference":"Node General abstaction between all node types The rule is that this should contain the most obviouse implementation","result":"Create a node .","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TextNode(parent, text) {\r\n  Node.call(this, 'text', parent);\r\n  this.children = null;\r\n  this._text = text;\r\n  this._noneStyleText = text;\r\n}","code-length":64,"reference":"TextNode has a parent and a text containter","result":"Create a text node.","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ElementNode(parent, tagname, attributes) {\r\n  Node.call(this, 'element', parent);\r\n  this.tags = (tagname === 'br' || tagname === 'wbr') ? 0 : 1;\r\n  this.tagname = tagname;\r\n  this.attr = attributes;\r\n  this.classes = attributes.hasOwnProperty('class') ?\r\n    attributes['class'].trim().split(WHITE_SPACE) : [];\r\n  this.root.classlist.addNode(this);\r\n  this._blockySelfCache = domHelpers.BLOCK_ELEMENTS.hasOwnProperty(tagname);\r\n  this._countTagnames = {};\r\n}","code-length":165,"reference":"ElementNode has a parent, tagname and attributes","result":"Create a node for the DOM tree.","score":[0.1615,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n            var r;\r\n            if( Util.isnt.instanceof( NewClass, this ) ) {\r\n                return ClassUtil.construct( NewClass, arguments );\r\n            }\r\n            if ( Util.is.Function( this.initialize ) ) {\r\n                r = this.initialize.apply(this, arguments);\r\n            }\r\n            this.callInitHooks();\r\n            return typeof r != 'undefined' ? r : this;\r\n        }","code-length":120,"reference":"extended class with the new prototype","result":"Construct a new class.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction distribute(filename, content){\r\n    content = content;\r\n    fs.appendFile(filename, content + \"\\n\");\r\n    log(rulecount + ': Append to ' + filename + ' -> ' + content);\r\n  }","code-length":63,"reference":"Distribute content to the cssfiles object","result":"Distribute content.","score":[0.0677,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction detectTakeout(selectors){\r\n    var properties = {\r\n      takeout: false\r\n    };\r\n    options.takeout.forEach(function (takeout) {\r\n      selectors.forEach(function (selector) {\r\n        if (selector.indexOf(takeout.ruleprefix) === 0) {\r\n          properties.takeout = true;\r\n          properties.filename = takeout.filename;\r\n        }\r\n      });\r\n    });\r\n    return properties;\r\n  }","code-length":128,"reference":"Detect weather a selector should be extracted or not","result":"Detect takeout.","score":[0.0151,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseLineByLine(text) {\r\n    var lines = text.trim().split(\"\\n\");\r\n    var bookmarks = lines.splice(0, lines.length * 3 \/ 4);\r\n    return {\r\n        bookmarks: bookmarks,\r\n        lines: lines\r\n    };\r\n}","code-length":81,"reference":"create tuple that\n","result":"Parse line by line.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CommonalityInterface(MatrixConstructor, top) {\r\n  this.top = top;\r\n  this.length = null;\r\n  this.matrix = null;\r\n  this.MatrixConstructor = MatrixConstructor;\r\n}","code-length":61,"reference":"The exposed API used in all.js","result":"Create the CommonalityInterface.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CommanalityMatrix(classlist) {\r\n  this.rowKeys = {};\r\n  this.rowNames = [];\r\n  this.collumKeys = {};\r\n  this.collumNames = [];\r\n  this.nodeMatrix = [];\r\n  this.summaryMatrix = [];\r\n  this.dim = [0, 0];\r\n  this.bestIndex = [-1, -1];\r\n  this._bestNodes = {};\r\n}","code-length":120,"reference":"Some abstact API for the commanality matrix","result":"Create a classlist.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayVector(size) {\r\n  var vec = new Array(size);\r\n  for (var i = 0; i < size; i++) vec[i] = [];\r\n  return vec;\r\n}","code-length":59,"reference":"Extend the rows or the collums","result":"Create an array vector.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildAttributeMatcher(match) {\r\n  var keys = Object.keys(match);\r\n  var jskey, i, l;\r\n  var transform = '';\r\n  var bool = '';\r\n  transform = 'transform = {\\n';\r\n  for (i = 0, l = keys.length; i < l; i++) {\r\n    jskey = JSON.stringify(keys[i]);\r\n    transform += '  ' + jskey + ': attr.hasOwnProperty(' + jskey + ') ? attr[' + jskey + '].toLowerCase() : false';\r\n    if (i !== l - 1) transform += ',';\r\n    transform += '\\n';\r\n  }\r\n  transform += '};\\n';\r\n  bool = 'return !!(';\r\n  for (i = 0, l = keys.length; i < l; i++) {\r\n    jskey = JSON.stringify(keys[i]);\r\n    if (i > 0) bool += '    ||    ';\r\n    bool += ' ( transform[' + jskey + ']';\r\n    if (Array.isArray(match[keys[i]])) {\r\n      bool += ' && ( ';\r\n      for (var j = 0, s = match[keys[i]].length; j < s; j++) {\r\n        if (j > 0) bool += ' || ';\r\n        if (typeof match[keys[i]][j] === 'string') {\r\n          bool += 'transform[' + jskey + '] === \\'' + match[keys[i]][j].toLowerCase() + '\\'';\r\n        } else if (util.isRegExp(match[keys[i]][j])) {\r\n          bool += 'match[' + jskey + '][' + j + '].test(transform[' + jskey + '])';\r\n        }\r\n      }\r\n      bool += ' )';\r\n    }\r\n    bool += ' ) \\n';\r\n  }\r\n  bool += '         );';\r\n  var anonymous = new Function('attr', 'match', transform + '\\n' + bool);\r\n  return function (attr) {\r\n    return anonymous(attr, match);\r\n  };\r\n}","code-length":518,"reference":"Builds and attribute matching function, complexity is for uncomfirmed performace sake","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction containerOf(a, b) {\r\n  while (b = b.parent) {\r\n    if (a === b) return true;\r\n  }\r\n  return false;\r\n}","code-length":55,"reference":"Checks if container `a` is a container of `b`","result":"Detect containerOf .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction commonParent(a, b) {\r\n  if (a === b) {\r\n    return a;\r\n  } else if (containerOf(a, b)) {\r\n    return a;\r\n  } else if (containerOf(b, a)) {\r\n    return b;\r\n  } else {\r\n    while (b = b.parent) {\r\n      if (containerOf(b, a)) return b;\r\n    }\r\n  }\r\n}","code-length":120,"reference":"Find the common parent of a and b","result":"Detect the common parent of two nodes in a tree.","score":[0.3593,0.7182]}
{"code":"\/*is used to<extra_id_0>\r\nfunction styleParser(style) {\r\n  style = style || '';\r\n  var tokens = style.trim().split(\/\\s*(?:;|:)\\s*\/);\r\n  var output = {};\r\n  for (var i = 1, l = tokens.length; i < l; i += 2) {\r\n    output[tokens[i - 1]] = tokens[i];\r\n  }\r\n  return output;\r\n}","code-length":109,"reference":"Parse style attribute intro object","result":"Parse style strings.","score":[0.2964,0.3906]}
{"code":"\/*is used to<extra_id_0>\r\nfunction treeDistance(a, b) {\r\n  if (a === b) return 0;\r\n  var parent = commonParent(a, b);\r\n  var aParent = a;\r\n  var aCount = 0;\r\n  var bParent = b;\r\n  var bCount = 0;\r\n  if (parent !== a) {\r\n    while (parent !== aParent.parent) {\r\n      aCount += 1;\r\n      aParent = aParent.parent;\r\n    }\r\n  } else {\r\n    bCount += 1;\r\n  }\r\n  if (parent !== b) {\r\n    while (parent !== bParent.parent) {\r\n      bCount += 1;\r\n      bParent = bParent.parent;\r\n    }\r\n  } else {\r\n    aCount += 1;\r\n  }\r\n  var abCount = 0;\r\n  if (parent !== a && parent !== b) {\r\n    abCount = Math.abs(\r\n      parent.children.indexOf(aParent) - parent.children.indexOf(bParent)\r\n    );\r\n  }\r\n  return aCount + bCount + abCount;\r\n}","code-length":286,"reference":"Calculate the tree distance between a and b","result":"Calculate tree distance.","score":[0.0917,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Lexer(file, options) {\r\n  this.options = utils.extend({}, options);\r\n  this.file = file;\r\n  this.regex = new RegexCache();\r\n  this.names = [];\r\n  this.ast = {\r\n    tags: {},\r\n    type: 'root',\r\n    name: 'root',\r\n    nodes: []\r\n  };\r\n  this.unknown = {tags: [], blocks: []};\r\n  this.known = {\r\n    tags: ['extends', 'layout'],\r\n    blocks: ['block']\r\n  };\r\n  this.delimiters = {\r\n    variable: ['{{', '}}'],\r\n    block: ['{%', '%}'],\r\n    es6: ['${', '}'],\r\n  };\r\n  this.tokens = [this.ast];\r\n  this.errors = [];\r\n  this.stack = [];\r\n  this.stash = [];\r\n  this.lexers = {};\r\n  this.fns = [];\r\n}","code-length":260,"reference":"Create a new `Lexer` for the given `file` and `options`.\n","result":"Detect syntax errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this.isInitialized) return;\r\n    this.isInitialized = true;\r\n    var lexer = this;\r\n    this.lineno = 1;\r\n    this.column = 1;\r\n    this.lexed = '';\r\n    this.file = utils.normalize(this.file);\r\n    this.file.orig = this.file.contents;\r\n    this.input = this.file.contents.toString();\r\n    this.file.ast = this.ast;\r\n    this.file.ast.variables = {};\r\n    this.file.ast.blocks = {};\r\n    this.input = this.input.split('{% body %}')\r\n      .join('{% block \"body\" %}{% endblock %}');\r\n    if (this.file.extends) {\r\n      this.prependNode(this.file, 'extends');\r\n    }\r\n        this.captureTag('extends');\r\n    this.captureTag('layout');\r\n        this.captureBlock('block');\r\n        this.capture('text', utils.negateDelims(this.delimiters));\r\n    this.capture('newline', \/^\\n+\/);\r\n    this.capture('es6', \/^\\$\\{([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}\/);\r\n    this.capture('variable', \/^\\{{2,}([^\\\\}]*(?:\\\\.[^\\\\}]*)*)\\}{2,}\/);\r\n    this.capture('escape', \/^\\\\(.)\/);\r\n    this.capture('space', \/^[ \\t]+\/);\r\n        var helpers = this.options.helpers || {};\r\n    if (utils.isObject(helpers)) {\r\n      helpers = Object.keys(helpers);\r\n    }\r\n    helpers.forEach(function(key) {\r\n      lexer.known.blocks.push(key);\r\n      lexer.captureBlock(key);\r\n    });\r\n        var matches = this.input.match(\/\\{%\\s*([^%}]+)\/g);\r\n    var names = utils.getNames(matches);\r\n    names.tags.forEach(function(key) {\r\n      if (!utils.isRegistered(lexer, key)) {\r\n        lexer.unknown.tags.push(key);\r\n        lexer.captureTag(key);\r\n      }\r\n    });\r\n    names.blocks.forEach(function(key) {\r\n      if (!utils.isRegistered(lexer, key)) {\r\n        lexer.unknown.blocks.push(key);\r\n        lexer.captureBlock(key);\r\n      }\r\n    });\r\n  }","code-length":625,"reference":"Create default delimiters and tags","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(msg) {\r\n    var message = this.file.relative\r\n      + ' line:' + this.lineno\r\n      + ' column:' + this.column\r\n      + ': ' + msg;\r\n    var err = new Error(message);\r\n    err.reason = msg;\r\n    err.line = this.lineno;\r\n    err.column = this.column;\r\n    err.source = this.input;\r\n    err.path = this.file.path;\r\n    if (this.options.silent) {\r\n      this.errors.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }","code-length":165,"reference":"Set an error message with the current line number and column.\n","result":"Catch errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    var cached = this.regex.createVariable(type);\r\n    var file = this.file;\r\n    var lexer = this;\r\n    var fn = this.lexers[type] = function() {\r\n      var pos = lexer.position();\r\n      var m = lexer.match(cached.strict);\r\n      if (!m) return;\r\n      var parent = this.prev();\r\n      var node = pos({\r\n        type: type,\r\n        known: utils.has(lexer.known.tags, type),\r\n        val: m[0].trim()\r\n      });\r\n      parent.known = node.known;\r\n      var nodes = parent.nodes;\r\n      Object.defineProperty(file.ast.variables, type, {\r\n        configurable: true,\r\n        set: function(val) {\r\n          nodes = val;\r\n        },\r\n        get: function() {\r\n          return nodes;\r\n        }\r\n      });\r\n      Object.defineProperty(parent, 'nodes', {\r\n        configurable: true,\r\n        set: function(val) {\r\n          nodes = val;\r\n        },\r\n        get: function() {\r\n          return nodes;\r\n        }\r\n      });\r\n      utils.define(node, 'parent', parent);\r\n      parent.nodes.push(node);\r\n    };\r\n    this.addLexer(fn);\r\n    return this;\r\n  }","code-length":356,"reference":"Create a lexer for the given variable `type`.\n","result":"Create a variable.","score":[0.109,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    this.ast.tags[type] = null;\r\n    this.names.push(type);\r\n    var cached = this.regex.createTag(type);\r\n    var file = this.file;\r\n    var lexer = this;\r\n    var fn = this.lexers[type] = function() {\r\n      var pos = lexer.position();\r\n      var m = lexer.match(cached.strict);\r\n      if (!m) return;\r\n      var name = utils.getName(m[1]);\r\n      if (this.options.strict) {\r\n        var isKnown = utils.has(lexer.known.tags, type);\r\n        if (isKnown && file.hasOwnProperty(type) && !file.hasOwnProperty('isParsed')) {\r\n          throw new Error(`only one \"${type}\" tag may be defined per template`);\r\n        }\r\n      }\r\n      file[type] = name;\r\n      lexer.ast.tags[type] = name;\r\n      lexer.createNode(type, name, m, pos);\r\n    };\r\n    this.addLexer(fn);\r\n    return this;\r\n  }","code-length":287,"reference":"Create a tag lexer for the given `type`.\n","result":"Define a tag .","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, name, m, pos) {\r\n    var parent = this.prev();\r\n    var val = m[1];\r\n    var tok = { type: 'args', val: val };\r\n    var node = pos({\r\n      type: type,\r\n      name: name,\r\n      known: utils.has(this.known.tags, type),\r\n      val: val.trim(),\r\n      nodes: [tok]\r\n    });\r\n    utils.define(node, 'parent', parent);\r\n    utils.define(tok, 'parent', node);\r\n    parent.nodes.push(node);\r\n  }","code-length":160,"reference":"Push AST node `type` onto `parent.nodes`\n","result":"Parse arguments.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    this.names.push(type);\r\n    var cached = this.regex.createOpen(type);\r\n    var file = this.file;\r\n    var lexer = this;\r\n    return function() {\r\n      var pos = lexer.position();\r\n      var m = lexer.match(cached.strict);\r\n      if (!m) return;\r\n      var name = utils.getName(m[1]);\r\n      var action = utils.getAction(m[1]);\r\n      var val = m[0];\r\n      if (!name && lexer.options[type] && lexer.options[type].args === 'required') {\r\n        throw new Error(`no arguments defined on \"${type}\": ${m[0]}`);\r\n      }\r\n      if (!name) name = 'unnamed';\r\n      var node = pos({\r\n        type: `${type}.open`,\r\n        known: utils.has(lexer.known.blocks, type),\r\n        name: name,\r\n        val: val.trim()\r\n      });\r\n      var parent = lexer.prev();\r\n      if (parent && parent.name && parent.name !== 'root') {\r\n        name = parent.name + '.' + name;\r\n      }\r\n      var block = {\r\n        type: type,\r\n        name: name,\r\n        known: node.known,\r\n        action: action,\r\n        nodes: [node]\r\n      };\r\n      utils.define(node, 'parent', block);\r\n      utils.define(block, 'parent', parent);\r\n      block.rawArgs = m[1];\r\n      block.args = utils.parseArgs(m[1]);\r\n      Object.defineProperty(file.ast.blocks[type], name, {\r\n        configurable: true,\r\n        enumerable: true,\r\n        set: function(val) {\r\n          block = val;\r\n        },\r\n        get: function() {\r\n          return block;\r\n        }\r\n      });\r\n      parent.nodes.push(block);\r\n      lexer.tokens.push(block);\r\n      return block;\r\n    };\r\n  }","code-length":524,"reference":"Create an opening tag lexer for block `name`.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    var cached = this.regex.createClose(type);\r\n    var file = this.file;\r\n    var lexer = this;\r\n    return function() {\r\n      var pos = lexer.position();\r\n      var m = lexer.match(cached.strict);\r\n      if (!m) return;\r\n      var block = lexer.tokens.pop();\r\n      if (typeof block === 'undefined' || block.type !== type) {\r\n        throw new Error(`missing opening ${type}`);\r\n      }\r\n      if (block.name === 'body') {\r\n        lexer.ast.isLayout = true;\r\n        file.ast.isLayout = true;\r\n      }\r\n      var nodes = block.nodes;\r\n      Object.defineProperty(file.ast.blocks, block.name, {\r\n        configurable: true,\r\n        set: function(val) {\r\n          nodes = val;\r\n        },\r\n        get: function() {\r\n          return nodes;\r\n        }\r\n      });\r\n      Object.defineProperty(block, 'nodes', {\r\n        configurable: true,\r\n        set: function(val) {\r\n          nodes = val;\r\n        },\r\n        get: function() {\r\n          return nodes;\r\n        }\r\n      });\r\n      var tok = pos({\r\n        known: block.known,\r\n        type: `${type}.close`,\r\n        val: m[0].trim()\r\n      });\r\n      utils.define(block, 'position', tok.position);\r\n      utils.define(tok, 'parent', block);\r\n      block.nodes.push(tok);\r\n      return block;\r\n    };\r\n  }","code-length":419,"reference":"Create a closing tag lexer for block `name`.\n","result":"Create a block close function.","score":[0.2064,0.4099]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    this.file.ast.blocks[type] = this.file.ast.blocks[type] || {};\r\n    this.addLexer(this.captureOpen(type));\r\n    this.addLexer(this.captureClose(type));\r\n    return this;\r\n  }","code-length":81,"reference":"Create a block lexer with opening and closing tags for the given `name`.\n","result":"Create a new block.","score":[0.0476,0.155]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(file, prop) {\r\n    return this.createNode(prop, file[prop], `{% ${prop} \"${file[prop]}\" %}`, this.position());\r\n  }","code-length":52,"reference":"Unshift node `prop` onto the AST","result":"Create a function to create a file .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(str, len) {\r\n    var lines = str.match(\/\\n\/g);\r\n    if (lines) this.lineno += lines.length;\r\n    var i = str.lastIndexOf('\\n');\r\n    this.column = ~i ? len - i : this.column + len;\r\n    this.lexed += str;\r\n    this.consume(str, len);\r\n  }","code-length":105,"reference":"Update lineno and column based on `str`.","result":"Parse a string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var len = this.fns.length;\r\n    var idx = -1;\r\n    while (++idx < len) {\r\n      this.fns[idx].call(this);\r\n      if (!this.input) {\r\n        break;\r\n      }\r\n    }\r\n  }","code-length":86,"reference":"Run lexers to advance the curson position","result":"Run the functions in the main module.","score":[0.1921,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    while (this.input) {\r\n      var prev = this.input;\r\n      this.advance();\r\n      if (this.input && prev === this.input) {\r\n        throw new Error(`no lexers registered for: \"${this.input.substr(0, 10)}\"`);\r\n      }\r\n    }\r\n  }","code-length":95,"reference":"Get the next AST token","result":"Create a lexer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(file) {\r\n    debug('lexing <%s>', this.file.path);\r\n    if (file) this.file = file;\r\n    this.init();\r\n    while (this.input) this.next();\r\n    return this.ast;\r\n  }","code-length":76,"reference":"Tokenize the given string.\n","result":"Create a lexer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction notifyHook(e) {\r\n    message_count++;\r\n    var message;\r\n    if (!options.enabled) {\r\n      return;\r\n    }\r\n    if (!e) {\r\n      return;\r\n    }\r\n    if (e && e.length === 1) {\r\n      e = e[0];\r\n    }\r\n    if (\/Task .* failed\\.\/.test(e.message)) {\r\n      message = e.message;\r\n    } else if (e.message && e.stack) {\r\n      message = exception(e);\r\n    } else {\r\n      message = e + '';\r\n    }\r\n    if (message_count > 0 && message === 'Aborted due to warnings.') {\r\n      return;\r\n    }\r\n    message = message.replace(cwd, '').replace('\\x07', '');\r\n    return notify({\r\n      title:    options.title + (grunt.task.current.nameArgs ? ' ' + grunt.task.current.nameArgs : ''),\r\n      message:  message\r\n    });\r\n  }","code-length":270,"reference":"Hook for showing the automatic message\n","result":"Trigger the task.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this._initialized && this._isPaused) {\r\n      return false;\r\n    }\r\n    this._isPaused = true;\r\n    raf.cancel(this._requestID);\r\n    this._pauseTime = now();\r\n    this._onPause();\r\n    return true;\r\n  }","code-length":87,"reference":"pauses the timer","result":"Pause the application.","score":[0.4082,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    if (this._initialized && !this._isPaused) {\r\n      return false;\r\n    }\r\n    var pauseDuration;\r\n    this._isPaused = false;\r\n    this._prevTime = now();\r\n    pauseDuration = this._prevTime - this._pauseTime;\r\n    this._onResume(pauseDuration);\r\n    this._requestID = raf.request(this._tick);\r\n    return true;\r\n  }","code-length":118,"reference":"resumes the timer","result":"Prevent the browser from crashing.","score":[0.2403,0.1562]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mktmpdir(prefixSuffix, tmpdir, callback, onend) {\r\n  if ('function' == typeof prefixSuffix) {\r\n    onend = tmpdir;\r\n    callback = prefixSuffix;\r\n    tmpdir = null;\r\n    prefixSuffix = null;\r\n  } else if ('function' == typeof tmpdir) {\r\n    onend = callback;\r\n    callback = tmpdir;\r\n    tmpdir = null;\r\n  }\r\n  prefixSuffix = prefixSuffix || 'd';\r\n  onend = onend || function() {};\r\n  tmpname.create(prefixSuffix, tmpdir, function(err, path, next) {\r\n    if (err) return callback(err);\r\n    fs.mkdir(path, 0700, next);\r\n  }, function(err, path) {\r\n    if (err) return callback(err);\r\n    callback(null, path, function(err) {\r\n      if (!path) return onend(err);\r\n      rimraf(path, function(_err) {\r\n        onend(err || _err, path);\r\n      });\r\n    });\r\n  });\r\n}","code-length":274,"reference":"Creates a temporary directory.\n\nThe directory is created with 0700 permission.\nApplication should not change the permission to make the temporary directory accessible from other users.\n\nThe prefix and suffix of the name of the directory is specified by\nthe optional first argument, <i>prefixSuffix<\/i>.\n- If it is not specified or null, \"d\" is used as the prefix and no suffix is used.\n- If it is a string, it is used as the prefix and no suffix is used.\n- If it is an array, first element is used as the prefix and second element is used as a suffix.\n\nmktmpdir(function(err, dir) { dir is \"...\/d...\" });\nmktmpdir('foo', function(err, dir) { dir is \"...\/foo...\" });\nmktmpdir(['foo', 'bar'], function(err, dir) { dir is \"...\/foo...bar\" });\n\nThe directory is created under os.tmpdir() or\nthe optional second argument <i>tmpdir<\/i> if non-null value is given.\n\nmktmpdir(function(err, dir) { dir is os.tmpdir() + \"\/d...\" });\nmktmpdir(null, '\/var\/tmp', function(err, dir) { dir is \"\/var\/tmp\/d...\" });\n\nIf a callback is invoked,\nthe path of the directory and its contents are removed.\n\nmktmpdir(function(err, dir, done) {\nif (err) throw err;\n\/\/ use the directory...\nfs.open(dir + '\/foo', 'w', function(err, fd) {\ndone(err);\n});\n}, function(err) {\n\/\/ the directory has been removed.\n});\n\nIf a callback is not invoked, mktmpdir doesn't remove the directory.\n\nmktmpdir(function(err, dir) {\nif (err) throw err;\n\/\/ use the directory...\nfs.open(dir + '\/foo', 'w', function(err, fd) {\n\/\/ remove the directory.\nexec('rm -rf ' + dir);\n});\n});\n\n","result":"Create a temporary directory.","score":[3.495e-27,0.009]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyString(buffer, length, offsetBegin, offsetEnd) {\r\n  if (length > 2048) {\r\n    return buffer.toString('utf-8', offsetBegin, offsetEnd);\r\n  }\r\n  var string = '';\r\n  while(offsetBegin < offsetEnd) {\r\n    string += String.fromCharCode(buffer[offsetBegin++]);\r\n  }\r\n  return string;\r\n}","code-length":104,"reference":"This is not valid for simpleStrings","result":"Copy a string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseSimpleString(parser) {\r\n  var offset = parser.offset;\r\n  var length = parser.buffer.length;\r\n  var string = '';\r\n  while (offset < length) {\r\n    var c1 = parser.buffer[offset++];\r\n    if (c1 === 13) {\r\n      var c2 = parser.buffer[offset++];\r\n      if (c2 === 10) {\r\n        parser.offset = offset;\r\n        return string;\r\n      }\r\n      string += String.fromCharCode(c1) + String.fromCharCode(c2);\r\n      continue;\r\n    }\r\n    string += String.fromCharCode(c1);\r\n  }\r\n  return undefined;\r\n}","code-length":182,"reference":"This is not UTF-8 compliant","result":"Parse a simple string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBaseConfig(isProd) {\r\n  const libraryEntryPoint = path.join('src', LIBRARY_DESC.entry);\r\n  return {\r\n    entry: [\r\n      path.join(__dirname, libraryEntryPoint),\r\n    ],\r\n    output: {\r\n      devtoolLineToLine: true,\r\n      pathinfo: true,\r\n    },\r\n    module: {\r\n      preLoaders: [\r\n        {\r\n          test: \/\\.js$\/,\r\n          exclude: \/(node_modules|bower_components)\/,\r\n          loader: \"eslint-loader\",\r\n        },\r\n      ],\r\n      loaders: [\r\n        {\r\n          exclude: \/(node_modules|bower_components)\/,\r\n          loader: \"babel-loader\",\r\n          plugins: [\r\n            \"transform-runtime\",\r\n          ],\r\n          query: {\r\n            presets: [\r\n              \"es2015\",\r\n              \"stage-0\",\r\n              \"stage-1\",\r\n              \"stage-2\",\r\n            ],\r\n            cacheDirectory: false,\r\n          },\r\n          test: \/\\.js$\/,\r\n        },\r\n      ],\r\n    },\r\n    eslint: {\r\n      configFile: '.\/.eslintrc',\r\n    },\r\n    resolve: {\r\n      root: path.resolve('.\/src'),\r\n      extensions: ['', '.js'],\r\n    },\r\n    devtool: isProd ? \"source-map\" : \"source-map\",\r\n    debug: !isProd,\r\n    plugins: isProd ? [\r\n      new webpack.DefinePlugin({ 'process.env': { NODE_ENV: '\"production\"' } }),\r\n      new UglifyJsPlugin({\r\n        compress: { warnings: true },\r\n        minimize: true,\r\n        sourceMap: true,\r\n      }),\r\n    ] : [\r\n      new webpack.DefinePlugin({ 'process.env': { NODE_ENV: '\"development\"' } }),\r\n      new UglifyJsPlugin({\r\n        compress: { warnings: true },\r\n        minimize: true,\r\n        sourceMap: true,\r\n      }),\r\n    ],\r\n  };\r\n}","code-length":540,"reference":"Build base config\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction postNotification(options, cb) {\r\n  options.title = removeColor(options.title);\r\n  options.message = removeColor(options.message);\r\n  if (!options.message) {\r\n    return cb && cb(!options.message && 'Message is required');\r\n  }\r\n  if (!notifyPlatform) {\r\n    notifyPlatform = choosePlatform();\r\n  }\r\n  function resetPreviousTimer(newMessage) {\r\n    previousMessage = newMessage;\r\n    clearTimeout(previousMessageTimer);\r\n    previousMessageTimer = setTimeout(function(){previousMessage = false;}, previousMessageTimeoutMS);\r\n  }\r\n  if (options.message === previousMessage) {\r\n    resetPreviousTimer(options.message);\r\n    if (typeof cb === 'function') {\r\n            cb(err);\r\n          }\r\n    return;\r\n  }\r\n  resetPreviousTimer(options.message);\r\n  options.debug = debug(notifyPlatform.name);\r\n  return notifyPlatform.notify(options, function(err){\r\n      if (err) {\r\n        options.debug({\r\n          return_code: err\r\n        });\r\n      }\r\n      if (typeof cb === 'function') {\r\n        cb(err);\r\n      }\r\n    });\r\n}","code-length":314,"reference":"Public function to notify\n","result":"Post a notification.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateUsername(base) {\r\n    base = base.toLowerCase();\r\n    var entries = [];\r\n    var finalName;\r\n    return userDB.allDocs({startkey: base, endkey: base + '\\uffff', include_docs: false})\r\n      .then(function(results){\r\n        if(results.rows.length === 0) {\r\n          return BPromise.resolve(base);\r\n        }\r\n        for(var i=0; i<results.rows.length; i++) {\r\n          entries.push(results.rows[i].id);\r\n        }\r\n        if(entries.indexOf(base) === -1) {\r\n          return BPromise.resolve(base);\r\n        }\r\n        var num = 0;\r\n        while(!finalName) {\r\n          num++;\r\n          if(entries.indexOf(base+num) === -1) {\r\n            finalName = base + num;\r\n          }\r\n        }\r\n        return BPromise.resolve(finalName);\r\n      });\r\n  }","code-length":261,"reference":"Adds numbers to a base name until it finds a unique database key","result":"Generate a username.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction linkSuccess(req, res, next) {\r\n    var provider = getProvider(req.path);\r\n    var result = {\r\n      error: null,\r\n      session: null,\r\n      link: provider\r\n    };\r\n    var template;\r\n    if(config.getItem('testMode.oauthTest')) {\r\n      template = fs.readFileSync(path.join(__dirname, '..\/templates\/oauth\/auth-callback-test.ejs'), 'utf8');\r\n    } else {\r\n      template = fs.readFileSync(path.join(__dirname, '..\/templates\/oauth\/auth-callback.ejs'), 'utf8');\r\n    }\r\n    var html = ejs.render(template, result);\r\n    res.status(200).send(html);\r\n  }","code-length":198,"reference":"Called after an account has been succesfully linked","result":"Redirect to the provider.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction linkTokenSuccess(req, res, next) {\r\n    var provider = getProviderToken(req.path);\r\n    res.status(200).json({\r\n      ok: true,\r\n      success: util.capitalizeFirstLetter(provider) + ' successfully linked',\r\n      provider: provider\r\n    });\r\n  }","code-length":86,"reference":"Called after an account has been succesfully linked using access_token provider","result":"Link tokens.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction oauthErrorHandler(err,req,res,next) {\r\n    var template;\r\n    if(config.getItem('testMode.oauthTest')) {\r\n      template = fs.readFileSync(path.join(__dirname, '..\/templates\/oauth\/auth-callback-test.ejs'), 'utf8');\r\n    } else {\r\n      template = fs.readFileSync(path.join(__dirname, '..\/templates\/oauth\/auth-callback.ejs'), 'utf8');\r\n    }\r\n    var html = ejs.render(template, {error: err.message, session: null, link: null});\r\n    console.error(err);\r\n    if(err.stack) {\r\n      console.error(err.stack);\r\n    }\r\n    res.status(400).send(html);\r\n  }","code-length":203,"reference":"Handles errors if authentication fails","result":"Prevent the error handler from being called.","score":[0,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tokenAuthErrorHandler(err,req,res,next) {\r\n    var status;\r\n    if(req.user && req.user._id) {\r\n      status = 403;\r\n    } else {\r\n      status = 401;\r\n    }\r\n    console.error(err);\r\n    if(err.stack) {\r\n      console.error(err.stack);\r\n      delete err.stack;\r\n    }\r\n    res.status(status).json(err);\r\n  }","code-length":128,"reference":"Handles errors if authentication from access_token provider fails","result":"Authenticate tokens.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerProvider(provider, configFunction) {\r\n    provider = provider.toLowerCase();\r\n    var configRef = 'providers.' + provider;\r\n    if (config.getItem(configRef + '.credentials')) {\r\n      var credentials = config.getItem(configRef + '.credentials');\r\n      credentials.passReqToCallback = true;\r\n      var options = config.getItem(configRef + '.options') || {};\r\n      configFunction.call(null, credentials, passport, authHandler);\r\n      router.get('\/' + provider, passportCallback(provider, options, 'login'));\r\n      router.get('\/' + provider + '\/callback', passportCallback(provider, options, 'login'), initSession, oauthErrorHandler);\r\n      if(!config.getItem('security.disableLinkAccounts')) {\r\n        router.get('\/link\/' + provider, passport.authenticate('bearer', {session: false}), passportCallback(provider, options, 'link'));\r\n        router.get('\/link\/' + provider + '\/callback', passport.authenticate('bearer', {session: false}),\r\n          passportCallback(provider, options, 'link'), linkSuccess, oauthErrorHandler);\r\n      }\r\n      console.log(provider + ' loaded.');\r\n    }\r\n  }","code-length":312,"reference":"Framework to register OAuth providers with passport","result":"Register a provider.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerOAuth2 (providerName, Strategy) {\r\n    registerProvider(providerName, function (credentials, passport, authHandler) {\r\n      passport.use(new Strategy(credentials,\r\n        function (req, accessToken, refreshToken, profile, done) {\r\n          authHandler(req, providerName, {accessToken: accessToken, refreshToken: refreshToken}, profile)\r\n            .asCallback(done);\r\n        }\r\n      ));\r\n    });\r\n  }","code-length":117,"reference":"A shortcut to register OAuth2 providers that follow the exact accessToken, refreshToken pattern.","result":"Register OAuth.","score":[0,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerTokenProvider (providerName, Strategy) {\r\n    providerName = providerName.toLowerCase();\r\n    var configRef = 'providers.' + providerName;\r\n    if (config.getItem(configRef + '.credentials')) {\r\n      var credentials = config.getItem(configRef + '.credentials');\r\n      credentials.passReqToCallback = true;\r\n      var options = config.getItem(configRef + '.options') || {};\r\n      passport.use(providerName + '-token', new Strategy(credentials,\r\n        function (req, accessToken, refreshToken, profile, done) {\r\n          authHandler(req, providerName, {accessToken: accessToken, refreshToken: refreshToken}, profile)\r\n            .asCallback(done);\r\n        }));\r\n      router.post('\/' + providerName + '\/token', passportTokenCallback(providerName, options), initTokenSession, tokenAuthErrorHandler);\r\n      if(!config.getItem('security.disableLinkAccounts')) {\r\n        router.post('\/link\/' + providerName + '\/token', passport.authenticate('bearer', {session: false}),\r\n          passportTokenCallback(providerName, options), linkTokenSuccess, tokenAuthErrorHandler);\r\n      }\r\n      console.log(providerName + '-token loaded.');\r\n    }\r\n  }","code-length":308,"reference":"Registers a provider that accepts an access_token directly from the client, skipping the popup window and callback This is for supporting Cordova, native IOS and Android apps, as well as other devices","result":"Register the token provider.","score":[0.0003,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction authHandler(req, provider, auth, profile) {\r\n    if(req.user && req.user._id && req.user.key) {\r\n      return user.linkSocial(req.user._id, provider, auth, profile, req);\r\n    } else {\r\n      return user.socialAuth(provider, auth, profile, req);\r\n    }\r\n  }","code-length":98,"reference":"This is called after a user has successfully authenticated with a provider If a user is authenticated with a bearer token we will link an account, otherwise log in auth is an object containing 'access_token' and optionally 'refresh_token'","result":"Handle the request and response.","score":[0.0003,0.0144]}
{"code":"\/*is used to<extra_id_0>\r\nfunction passportCallback(provider, options, operation) {\r\n    return function(req, res, next) {\r\n      var theOptions = extend({}, options);\r\n      if(provider === 'linkedin') {\r\n        theOptions.state = true;\r\n      }\r\n      var accessToken = req.query.bearer_token || req.query.state;\r\n      if(accessToken && (stateRequired.indexOf(provider) > -1 || config.getItem('providers.' + provider + '.stateRequired') === true)) {\r\n        theOptions.state = accessToken;\r\n      }\r\n      theOptions.callbackURL = getLinkCallbackURLs(provider, req, operation, accessToken);\r\n      theOptions.session = false;\r\n      passport.authenticate(provider, theOptions)(req, res, next);\r\n    };\r\n  }","code-length":204,"reference":"Configures the passport.authenticate for the given provider, passing in options Operation is 'login' or 'link'","result":"Passport callback functions.","score":[0,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction passportTokenCallback(provider, options) {\r\n    return function(req, res, next) {\r\n      var theOptions = extend({}, options);\r\n      theOptions.session = false;\r\n      passport.authenticate(provider + '-token', theOptions)(req, res, next);\r\n    };\r\n  }","code-length":86,"reference":"Configures the passport.authenticate for the given access_token provider, passing in options","result":"Authenticate with passport.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getProvider(pathname) {\r\n    var items = pathname.split('\/');\r\n    var index = items.indexOf('callback');\r\n    if(index > 0) {\r\n      return items[index-1];\r\n    }\r\n  }","code-length":67,"reference":"Gets the provider name from a callback path","result":"Provide a provider.","score":[0.0771,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getProviderToken(pathname) {\r\n    var items = pathname.split('\/');\r\n    var index = items.indexOf('token');\r\n    if(index > 0) {\r\n      return items[index-1];\r\n    }\r\n  }","code-length":68,"reference":"Gets the provider name from a callback path for access_token strategy","result":"Get the provider token.","score":[0.0785,0.2859]}
{"code":"\/*is used to<extra_id_0>\r\nfunction requireRole(requiredRole) {\r\n    return function(req, res, next) {\r\n      if(!req.user) {\r\n        return next(superloginError);\r\n      }\r\n      var roles = req.user.roles;\r\n      if(!roles || !roles.length || roles.indexOf(requiredRole) === -1) {\r\n        res.status(forbiddenError.status);\r\n        res.json(forbiddenError);\r\n      } else {\r\n        next();\r\n      }\r\n    };\r\n  }","code-length":140,"reference":"Requires that the user have the specified role","result":"Require a role.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var foundLayer = null;\r\n    $.each(projectedTiles, function (layerName, layer) {\r\n      if (map.hasLayer(layer)) {\r\n        foundLayer = layer;\r\n      }\r\n    });\r\n    return foundLayer;\r\n  }","code-length":80,"reference":"Wire up rotation controls","result":"Find the layer that is used to map.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (crs, options) {\r\n    switch(crs) {\r\n      case \"EPSG:3857\":\r\n      return L.CRS.EPSG3857;\r\n      case \"EPSG:3395\":\r\n      return L.CRS.EPSG3395;\r\n      case \"EPSG:4326\":\r\n      return L.CRS.EPSG4326;\r\n      default:\r\n        return this._defineMapCRS(crs, options);\r\n    }\r\n  }","code-length":135,"reference":"Use default CRS classes for common codes, fallback to custom for all other codes.","result":"Define the map.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (group) {\r\n    var map = this;\r\n    if (group.eachLayer) {\r\n      group.eachLayer(function (layer) {\r\n        map._updateAllLayers(layer);\r\n      });\r\n    } else {\r\n      if (group.redraw) {\r\n        group.redraw();\r\n      } else if (group.update) {\r\n        group.update();\r\n      } else {\r\n        console.log(\"Don't know how to update\", group);\r\n      }\r\n    }\r\n  }","code-length":139,"reference":"This recurses through all the map's layers to update layer positions after their positions moved.","result":"Update all layers in a group.","score":[0.0512,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (layersArray) {\r\n    var fg = this._featureGroup,\r\n      npg = this._nonPointGroup,\r\n      chunked = this.options.chunkedLoading,\r\n      chunkInterval = this.options.chunkInterval,\r\n      chunkProgress = this.options.chunkProgress,\r\n      newMarkers, i, l, m;\r\n    if (this._map) {\r\n      var offset = 0,\r\n        started = (new Date()).getTime();\r\n      var process = L.bind(function () {\r\n        var start = (new Date()).getTime();\r\n        for (; offset < layersArray.length; offset++) {\r\n          if (chunked && offset % 200 === 0) {\r\n            var elapsed = (new Date()).getTime() - start;\r\n            if (elapsed > chunkInterval) {\r\n              break;\r\n            }\r\n          }\r\n          m = layersArray[offset];\r\n          if (!m.getLatLng) {\r\n            npg.addLayer(m);\r\n            continue;\r\n          }\r\n          if (this.hasLayer(m)) {\r\n            continue;\r\n          }\r\n          this._addLayer(m, this._maxZoom);\r\n          if (m.__parent) {\r\n            if (m.__parent.getChildCount() === 2) {\r\n              var markers = m.__parent.getAllChildMarkers(),\r\n                otherMarker = markers[0] === m ? markers[1] : markers[0];\r\n              fg.removeLayer(otherMarker);\r\n            }\r\n          }\r\n        }\r\n        if (chunkProgress) {\r\n          chunkProgress(offset, layersArray.length, (new Date()).getTime() - started);\r\n        }\r\n        if (offset === layersArray.length) {\r\n          this._featureGroup.eachLayer(function (c) {\r\n            if (c instanceof L.MarkerCluster && c._iconNeedsUpdate) {\r\n              c._updateIcon();\r\n            }\r\n          });\r\n          this._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\r\n        } else {\r\n          setTimeout(process, this.options.chunkDelay);\r\n        }\r\n      }, this);\r\n      process();\r\n    } else {\r\n      newMarkers = [];\r\n      for (i = 0, l = layersArray.length; i < l; i++) {\r\n        m = layersArray[i];\r\n        if (!m.getLatLng) {\r\n          npg.addLayer(m);\r\n          continue;\r\n        }\r\n        if (this.hasLayer(m)) {\r\n          continue;\r\n        }\r\n        newMarkers.push(m);\r\n      }\r\n      this._needsClustering = this._needsClustering.concat(newMarkers);\r\n    }\r\n    return this;\r\n  }","code-length":697,"reference":"Takes an array of markers and adds them in bulk","result":"Code too long,keep in 512.","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (layersArray) {\r\n    var i, l, m,\r\n      fg = this._featureGroup,\r\n      npg = this._nonPointGroup;\r\n    if (!this._map) {\r\n      for (i = 0, l = layersArray.length; i < l; i++) {\r\n        m = layersArray[i];\r\n        this._arraySplice(this._needsClustering, m);\r\n        npg.removeLayer(m);\r\n      }\r\n      return this;\r\n    }\r\n    for (i = 0, l = layersArray.length; i < l; i++) {\r\n      m = layersArray[i];\r\n      if (!m.__parent) {\r\n        npg.removeLayer(m);\r\n        continue;\r\n      }\r\n      this._removeLayer(m, true, true);\r\n      if (fg.hasLayer(m)) {\r\n        fg.removeLayer(m);\r\n        if (m.setOpacity) {\r\n          m.setOpacity(1);\r\n        }\r\n      }\r\n    }\r\n    this._topClusterLevel._recursivelyAddChildrenToMap(null, this._zoom, this._currentShownBounds);\r\n    fg.eachLayer(function (c) {\r\n      if (c instanceof L.MarkerCluster) {\r\n        c._updateIcon();\r\n      }\r\n    });\r\n    return this;\r\n  }","code-length":344,"reference":"Takes an array of markers and removes them in bulk","result":"Remove a layer from the map.","score":[0,0.0521]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    var bounds = new L.LatLngBounds();\r\n    if (this._topClusterLevel) {\r\n      bounds.extend(this._topClusterLevel._bounds);\r\n    }\r\n    for (var i = this._needsClustering.length - 1; i >= 0; i--) {\r\n      bounds.extend(this._needsClustering[i].getLatLng());\r\n    }\r\n    bounds.extend(this._nonPointGroup.getBounds());\r\n    return bounds;\r\n  }","code-length":131,"reference":"Override FeatureGroup.getBounds as it doesn't work","result":"Create a new MarkerClusterer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (method, context) {\r\n    var markers = this._needsClustering.slice(),\r\n      i;\r\n    if (this._topClusterLevel) {\r\n      this._topClusterLevel.getAllChildMarkers(markers);\r\n    }\r\n    for (i = markers.length - 1; i >= 0; i--) {\r\n      method.call(context, markers[i]);\r\n    }\r\n    this._nonPointGroup.eachLayer(method, context);\r\n  }","code-length":125,"reference":"Overrides LayerGroup.eachLayer","result":"Iterate over all layers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (layer) {\r\n    if (!layer) {\r\n      return false;\r\n    }\r\n    var i, anArray = this._needsClustering;\r\n    for (i = anArray.length - 1; i >= 0; i--) {\r\n      if (anArray[i] === layer) {\r\n        return true;\r\n      }\r\n    }\r\n    anArray = this._needsRemoving;\r\n    for (i = anArray.length - 1; i >= 0; i--) {\r\n      if (anArray[i] === layer) {\r\n        return false;\r\n      }\r\n    }\r\n    return !!(layer.__parent && layer.__parent._group === this) || this._nonPointGroup.hasLayer(layer);\r\n  }","code-length":193,"reference":"Returns true if the given layer is in this MarkerClusterGroup","result":"Detect if a layer is in the cluster.","score":[0.2531,0.4551]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (map) {\r\n    this._map = map;\r\n    var i, l, layer;\r\n    if (!isFinite(this._map.getMaxZoom())) {\r\n      throw \"Map has no maxZoom specified\";\r\n    }\r\n    this._featureGroup.onAdd(map);\r\n    this._nonPointGroup.onAdd(map);\r\n    if (!this._gridClusters) {\r\n      this._generateInitialClusters();\r\n    }\r\n    for (i = 0, l = this._needsRemoving.length; i < l; i++) {\r\n      layer = this._needsRemoving[i];\r\n      this._removeLayer(layer, true);\r\n    }\r\n    this._needsRemoving = [];\r\n    this._zoom = this._map.getZoom();\r\n    this._currentShownBounds = this._getExpandedVisibleBounds();\r\n    this._map.on('zoomend', this._zoomEnd, this);\r\n    this._map.on('moveend', this._moveEnd, this);\r\n    if (this._spiderfierOnAdd) {\r\n      this._spiderfierOnAdd();\r\n    }\r\n    this._bindEvents();\r\n    l = this._needsClustering;\r\n    this._needsClustering = [];\r\n    this.addLayers(l);\r\n  }","code-length":324,"reference":"Overrides FeatureGroup.onAdd","result":"Create a new instance of the clusterer class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (map) {\r\n    map.off('zoomend', this._zoomEnd, this);\r\n    map.off('moveend', this._moveEnd, this);\r\n    this._unbindEvents();\r\n    this._map._mapPane.className = this._map._mapPane.className.replace(' leaflet-cluster-anim', '');\r\n    if (this._spiderfierOnRemove) {\r\n      this._spiderfierOnRemove();\r\n    }\r\n    this._hideCoverage();\r\n    this._featureGroup.onRemove(map);\r\n    this._nonPointGroup.onRemove(map);\r\n    this._featureGroup.clearLayers();\r\n    this._map = null;\r\n  }","code-length":179,"reference":"Overrides FeatureGroup.onRemove","result":"Create a new function to create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (anArray, obj) {\r\n    for (var i = anArray.length - 1; i >= 0; i--) {\r\n      if (anArray[i] === obj) {\r\n        anArray.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n  }","code-length":84,"reference":"Remove the given object from the given array","result":"Remove an array from an array.","score":[0.182,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (layer, newCluster) {\r\n    if (newCluster === layer) {\r\n      this._featureGroup.addLayer(layer);\r\n    } else if (newCluster._childCount === 2) {\r\n      newCluster._addToMap();\r\n      var markers = newCluster.getAllChildMarkers();\r\n      this._featureGroup.removeLayer(markers[0]);\r\n      this._featureGroup.removeLayer(markers[1]);\r\n    } else {\r\n      newCluster._updateIcon();\r\n    }\r\n  }","code-length":133,"reference":"Shared animation code","result":"Create a cluster layer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (storageArray) {\r\n    storageArray = storageArray || [];\r\n    for (var i = this._childClusters.length - 1; i >= 0; i--) {\r\n      this._childClusters[i].getAllChildMarkers(storageArray);\r\n    }\r\n    for (var j = this._markers.length - 1; j >= 0; j--) {\r\n      storageArray.push(this._markers[j]);\r\n    }\r\n    return storageArray;\r\n  }","code-length":126,"reference":"Recursively retrieve all child markers of this cluster","result":"Get all child markers.","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    var childClusters = this._childClusters.slice(),\r\n      map = this._group._map,\r\n      boundsZoom = map.getBoundsZoom(this._bounds),\r\n      zoom = this._zoom + 1,\r\n      mapZoom = map.getZoom(),\r\n      i;\r\n    while (childClusters.length > 0 && boundsZoom > zoom) {\r\n      zoom++;\r\n      var newClusters = [];\r\n      for (i = 0; i < childClusters.length; i++) {\r\n        newClusters = newClusters.concat(childClusters[i]._childClusters);\r\n      }\r\n      childClusters = newClusters;\r\n    }\r\n    if (boundsZoom > zoom) {\r\n      this._group._map.setView(this._latlng, zoom);\r\n    } else if (boundsZoom <= mapZoom) {\r\n      this._group._map.setView(this._latlng, mapZoom + 1);\r\n    } else {\r\n      this._group._map.fitBounds(this._bounds);\r\n    }\r\n  }","code-length":265,"reference":"Zoom to the minimum of showing all of the child markers, or the extents of this cluster","result":"Create a new function to create a new object.","score":[0.0501,0.0309]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (marker) {\r\n    var addedCount,\r\n        addedLatLng = marker._wLatLng || marker._latlng;\r\n    if (marker instanceof L.MarkerCluster) {\r\n      this._bounds.extend(marker._bounds);\r\n      addedCount = marker._childCount;\r\n    } else {\r\n      this._bounds.extend(addedLatLng);\r\n      addedCount = 1;\r\n    }\r\n    if (!this._cLatLng) {\r\n      this._cLatLng = marker._cLatLng || addedLatLng;\r\n    }\r\n    var totalCount = this._childCount + addedCount;\r\n    if (!this._wLatLng) {\r\n      this._latlng = this._wLatLng = new L.LatLng(addedLatLng.lat, addedLatLng.lng);\r\n    } else {\r\n      this._wLatLng.lat = (addedLatLng.lat * addedCount + this._wLatLng.lat * this._childCount) \/ totalCount;\r\n      this._wLatLng.lng = (addedLatLng.lng * addedCount + this._wLatLng.lng * this._childCount) \/ totalCount;\r\n    }\r\n  }","code-length":288,"reference":"Expand our bounds and tell our parent to","result":"Create a new MarkerCluster .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    if (this._group._spiderfied === this || this._group._inZoomAnimation) {\r\n      return;\r\n    }\r\n    var childMarkers = this.getAllChildMarkers(),\r\n      group = this._group,\r\n      map = group._map,\r\n      center = map.latLngToLayerPoint(this._latlng),\r\n      positions;\r\n    this._group._unspiderfy();\r\n    this._group._spiderfied = this;\r\n    if (childMarkers.length >= this._circleSpiralSwitchover) {\r\n      positions = this._generatePointsSpiral(childMarkers.length, center);\r\n    } else {\r\n      center.y += 10;\r\n      positions = this._generatePointsCircle(childMarkers.length, center);\r\n    }\r\n    this._animationSpiderfy(childMarkers, positions);\r\n  }","code-length":225,"reference":"show spiral instead of circle from this marker count upwards. 0 -> always spiral; Infinity -> always circle","result":"Animate the animation.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (childMarkers, positions) {\r\n    var group = this._group,\r\n      map = group._map,\r\n      fg = group._featureGroup,\r\n      i, m, leg, newPos;\r\n    for (i = childMarkers.length - 1; i >= 0; i--) {\r\n      newPos = map.layerPointToLatLng(positions[i]);\r\n      m = childMarkers[i];\r\n      m._preSpiderfyLatlng = m._latlng;\r\n      m.setLatLng(newPos);\r\n      if (m.setZIndexOffset) {\r\n        m.setZIndexOffset(1000000);\r\n      }\r\n      fg.addLayer(m);\r\n      leg = new L.Polyline([this._latlng, newPos], { weight: 1.5, color: '#222' });\r\n      map.addLayer(leg);\r\n      m._spiderLeg = leg;\r\n    }\r\n    this.setOpacity(0.3);\r\n    group.fire('spiderfied');\r\n  }","code-length":262,"reference":"Non Animated versions of everything","result":"Create a new function to be passed to the constructor.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (layer) {\r\n    if (layer._spiderLeg) {\r\n      this._featureGroup.removeLayer(layer);\r\n      layer.setOpacity(1);\r\n      layer.setZIndexOffset(0);\r\n      this._map.removeLayer(layer._spiderLeg);\r\n      delete layer._spiderLeg;\r\n    }\r\n  }","code-length":95,"reference":"If the given layer is currently being spiderfied then we unspiderfy it so it isn't on the map anymore etc","result":"Remove a layer from the map.","score":[0.0223,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addToMap(location, map) {\r\n    var marker = L.marker(location.coordinates);\r\n    marker.addTo(map);\r\n  }","code-length":46,"reference":"Have to create a separate marker for each map else weirdness happens","result":"Add markers to a map.","score":[0.0705,0.1327]}
{"code":"\/*is used to<extra_id_0>\r\nfunction interpolate (path, data) {\r\n  return path.replace(\/:(\\w+)\/g, function (match, param) {\r\n    return data[param]\r\n  })\r\n}","code-length":55,"reference":"Interpolate the page path with pagination variables.\n\n","result":"Interpolate .","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createPagesUtility (pages, index) {\r\n  return function getPages (number) {\r\n    var offset = Math.floor(number \/ 2)\r\n    var start, end\r\n    if (index + offset >= pages.length) {\r\n      start = Math.max(0, pages.length - number)\r\n      end = pages.length\r\n    } else {\r\n      start = Math.max(0, index - offset)\r\n      end = Math.min(start + number, pages.length)\r\n    }\r\n    return pages.slice(start, end)\r\n  }\r\n}","code-length":152,"reference":"Create a \"get pages\" utility for people to use when rendering.\n\n","result":"Create pages utility functions.","score":[0.066,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var templates = { data: {} };\r\n        var stringTemplateSource = function(template) {\r\n            this.text = function(value) {\r\n                if (arguments.length === 0) {\r\n                    return templates[template];\r\n                }\r\n                templates[template] = value;\r\n            };\r\n        };\r\n        var templateEngine = new ko.nativeTemplateEngine();\r\n        templateEngine.makeTemplateSource = function(template) {\r\n            return new stringTemplateSource(template);\r\n        };\r\n        templateEngine.addTemplate = function(key, value) {\r\n            templates[key] = value;\r\n        };\r\n        return templateEngine;\r\n    }","code-length":181,"reference":"helper engine that can use a template from a string","result":"Create a template engine.","score":[0.1008,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Job(collection, data) {\r\n    this.collection = collection;\r\n    if (data) {\r\n        data.__proto__ = JobData.prototype;\r\n        this.data = data;\r\n    } else {\r\n        this.data = new JobData();\r\n    }\r\n}","code-length":80,"reference":"Job retry specification\n","result":"Create a job.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Worker(queues, options) {\r\n    options || (options = {});\r\n    this.empty = 0;\r\n    this.queues = queues || [];\r\n    this.interval = options.interval || 5000;\r\n    this.callbacks = options.callbacks || {};\r\n    this.strategies = options.strategies || {};\r\n    this.universal = options.universal || false;\r\n    this.strategies.linear || (this.strategies.linear = linear);\r\n    this.strategies.exponential || (this.strategies.exponential = exponential);\r\n    this.minPriority = options.minPriority;\r\n}","code-length":161,"reference":"Options for a new worker\n","result":"Create a worker.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleDragEvents(e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    return this.emit(e.type, e);\r\n  }","code-length":51,"reference":"generic drag event handler","result":"Handle drag events.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(value) {\r\n            if(value != value || value === 0) {\r\n                for(var i = this.length; i-- && !is(this[i], value);){}\r\n            } else {\r\n                i = [].indexOf.call(this, value);\r\n            }\r\n            return i;\r\n        }","code-length":89,"reference":"More reliable indexOf, courtesy of ","result":"Test the array index.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Tor(child, port, dir) {\r\n  this.process = child;\r\n  this.port    = port;\r\n  this.dir     = dir;\r\n}","code-length":51,"reference":"A wrapper for the tor process containing its ChildProcess, port number\nand data directory.\n\n","result":"Create a new Tor instance.","score":[0,0.0763]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getIncluded() {\r\n  var args = config.files().included || getDefaultArgs() ||\r\n              getPackageJsonArgs() || getBowerJsonArgs() || [];\r\n  return _expandGlobs(args);\r\n}","code-length":60,"reference":"Returns an Array containing the included locations.","result":"Generate the code.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDefaultArgs() {\r\n  var results = [];\r\n  DEFAULT_PATHS.forEach(function(dir) {\r\n    if( fs.existsSync(dir) ) results.push(dir);\r\n  });\r\n  return results.length == 0 ? null : results;\r\n}","code-length":78,"reference":"Returns an Array of default paths.","result":"Create a new file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getPackageJsonArgs() {\r\n  var results = [];\r\n  var config = _loadJson('package.json');\r\n  if( config.main ) results = results.concat(getMainFieldAsArray(config.main));\r\n  if( config.files ) results = results.concat(config.files);\r\n  return results.length == 0 ? null : results.filter(_uniqfilter);\r\n}","code-length":102,"reference":"Checks package.json for possible paths","result":"Return config.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBowerJsonArgs() {\r\n  var results = [];\r\n  var config = _loadJson('bower.json');\r\n  if( config.main ) results = results.concat(getMainFieldAsArray(config.main));\r\n  return results.length == 0 ? null : results.filter(_uniqfilter);\r\n}","code-length":85,"reference":"Checks bower.json for possible paths","result":"Create the bower.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getMainFieldAsArray(main) {\r\n  if( main.constructor === Array ) {\r\n    return main;\r\n  } else {\r\n    if( fs.existsSync(main) ) {\r\n      return [main];\r\n    } else if( fs.existsSync(main+'.js') ) {\r\n      return [main+'.js'];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n}","code-length":115,"reference":"Returns an Array of the files mentioned in a 'main' field\nIf the value is noted without '.js' at the end, it is appended.","result":"Create the main field.","score":[0.0022,0.0227]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TorAgent(opts) {\r\n  if (!(this instanceof TorAgent)) {\r\n    return new TorAgent();\r\n  }\r\n  http.Agent.call(this, opts);\r\n  this.socksHost   = opts.socksHost || 'localhost';\r\n  this.socksPort   = opts.socksPort || 9050;\r\n  this.defaultPort = 80;\r\n  this.tor = opts.tor;\r\n  this.protocol = null;\r\n  this.defaultDestroy = this.destroy;\r\n  this.destroy = this.destroyWrapper;\r\n}","code-length":148,"reference":"An HTTP Agent for proxying requests through Tor using SOCKS5.\n\n","result":"Test the Tor protocol.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction run(inch_args, options) {\r\n  var callback = function(filename) {\r\n      LocalInch.run(inch_args || ['suggest'], filename, noop);\r\n    }\r\n  if( options.dry_run ) callback = noop;\r\n  retriever.run(PathExtractor.extractPaths(inch_args), callback);\r\n}","code-length":96,"reference":"Runs a local version of Inch.","result":"Run local inch.","score":[0.1502,0.2632]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shutdown(addr, b) {\r\n\t    if(addr<0 || addr>=maxDevices)\r\n\t\t\tthrow 'address out of range';\r\n\t\t\t\r\n\t    if(b)\r\n\t\t\tspiTransfer(addr, OP_SHUTDOWN,0);\r\n\t    else\r\n\t\t\tspiTransfer(addr, OP_SHUTDOWN,1);\r\n\t}","code-length":98,"reference":"shutdown puts it into power saving sleep mode. call with false to wake it up.","result":"Shutdown the device.","score":[0,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setScanLimit(addr, limit) {\r\n\t    if(addr<0 || addr>=maxDevices)\r\n\t\t\treturn;\r\n\t\t\r\n\t    if(limit>=0 && limit<8)\r\n\t    \tspiTransfer(addr, OP_SCANLIMIT,limit);\r\n\t}","code-length":81,"reference":"sets the number of pixels per row, pretty much always 8 for most devices.","result":"Set the scan limit on the SPI device.","score":[0.0656,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setBrightness(addr, intensity) {\r\n\t    if(addr<0 || addr>=maxDevices)\r\n\t\t\treturn;\r\n\t \tif (typeof intensity == 'undefined') return; \r\n\t\t\r\n\t\tintensity = constrain(intensity, 0, 15); \r\n\t    \t\r\n\t\tspiTransfer(addr, OP_INTENSITY,intensity);\r\n\t}","code-length":102,"reference":"sets the brightness of the LEDs, 0 to 15","result":"Set the brightness of a device.","score":[0.2412,0.3628]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearDisplay(addr) {\r\n\t    if(addr<0 || addr>=maxDevices)\r\n\t\t\tthrow 'address out of range';\r\n\t\t\r\n\t    var offset;\r\n\t\t\t\r\n\t    offset=addr*8;\r\n\t    for(var i=0;i<8;i++) {\r\n\t\t\tstatus[offset+i]=0;\r\n\t\t\tspiTransfer(addr, i+1,status[offset+i]);\r\n\t    }\r\n\t}","code-length":125,"reference":"clears the entire display","result":"Clear display display.","score":[0.2925,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction showNumber(addr, num, decimalplaces, mindigits, leftjustified, pos, dontclear) { \r\n\t    if(addr<0 || addr>=maxDevices)\r\n\t\t\tthrow 'address out of range';\r\n\t\t\r\n\t\tnum = formatNumber(num, decimalplaces, mindigits); \r\n\t\r\n\t\t\r\n\t\tif(typeof pos === 'undefined') { \r\n\t\t\tif(leftjustified) { \r\n\t\t\t\tpos = 7; \r\n\t\t\t} else { \r\n\t\t\t\tpos = 0; \r\n\t\t\t}\r\n\t\t} else pos = 7-pos; \r\n\t\t\r\n\t\t\r\n\t\tvar decimalplace; \r\n\t\tif(num.indexOf('.')<0) decimalplace = -1; \r\n\t\telse {\r\n\t\t\tdecimalplace = num.length - num.indexOf('.') -1; \r\n\t\t\tnum = num.split('.').join('');\r\n\t\t}\r\n\t\tif(leftjustified) { \r\n\t\t\tpos-=(num.length-1); \r\n\t\t}\r\n\t\r\n\t\tfor(var i = 0; i<8; i++) { \r\n\t\t\tvar offset = i+pos; \r\n\t\t\tvar char = num.charAt(num.length-1-i); \r\n\t\t\t\r\n\t\t\tif((offset<8 && offset>=0) && (!dontclear || char!='')) \r\n\t\t\t{\r\n\t\t\t\tif(char=='-') setChar(addr, offset, char, i>0 && i==decimalplace); \r\n\t\t\t\telse setDigit(addr, offset, parseInt(char), i>0 && i==decimalplace); \r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t}","code-length":417,"reference":"pos is passed in as 0 to 7, 0 on the left, 7 on the right","result":"Show numbers in the device.","score":[0.0317,0.0671]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getExampleCode(comment) {\r\n  var expectedResult = comment.expectedResult;\r\n  var isAsync = comment.isAsync;\r\n  var testCase = comment.testCase;\r\n  if(isAsync) {\r\n    return '\\nfunction cb(err, result) {' +\r\n      'if(err) return done(err);' +\r\n      'result.should.eql(' + expectedResult + ');' +\r\n      'done();' +\r\n    '}\\n' +\r\n    'var returnValue = ' + testCase + ';' +\r\n    'if(returnValue && returnValue.then && typeof returnValue.then === \\'function\\') {' +\r\n      'returnValue.then(cb.bind(null, null), cb);' +\r\n    '}';\r\n  } else {\r\n    return '(' + testCase + ').should.eql(' + expectedResult + ');';\r\n  }\r\n}","code-length":222,"reference":"Compiles down an `example`. Async examples call an imaginary `done` function\nonce they're done.\n\n","result":"Generate code for the example .","score":[0,0.0379]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (options) {\r\n    \"use strict\";\r\n    if ((options.setter && options.setter.indexOf('.') > -1) || (options.getter && options.getter.indexOf('.') > -1)) {\r\n        throw new Error('Getter (' + options.getter + ') and setter (' + options.setter + ') methods cannot be nested, so they cannot contain dot(.)');\r\n    }\r\n    this.options = Joi.attempt(options, optionsSchema);\r\n    this.locales = this.getAvailableLocales();\r\n    this.default = this.options.default || this.locales[0];\r\n}","code-length":154,"reference":"Class to implement inner working of plugin.\n","result":"Create a new instance of the class.","score":[0.1615,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fileExists(path, shouldBeDir) {\r\n    \"use strict\";\r\n    try {\r\n        var lstat = fs.lstatSync(path);\r\n        if (shouldBeDir && lstat.isDirectory()) {\r\n            return true;\r\n        }\r\n        if (!shouldBeDir && lstat.isFile()) {\r\n            return true;\r\n        }\r\n    } catch (err) {\r\n        return false;\r\n    }\r\n    return false;\r\n}","code-length":126,"reference":"Checks synchroniously if given file or directory exists. Returns true or false.\n","result":"Check if a file exists.","score":[0.078,0.177]}
{"code":"\/*is used to<extra_id_0>\r\nasync function (server, options) {\r\n        try {\r\n            var internal = new Internal(options);\r\n        } catch (err) {\r\n            throw new Boom(err);\r\n        }\r\n                        server.expose('getLocales', function getLocales() {\r\n            return internal.locales;\r\n        });\r\n                server.expose('getDefaultLocale', function getDefaultLocale() {\r\n            return internal.default;\r\n        });\r\n                server.expose('getLocale', function getLocale(request) {\r\n            try {\r\n                return lodash.get(request, internal.options.getter)();\r\n            } catch (err) {\r\n                return null;\r\n            }\r\n        });\r\n        server.ext(internal.options.onEvent, internal.processRequest, {bind: internal});\r\n    }","code-length":203,"reference":"Hapi plugin function which adds i18n support to request and response objects.\n","result":"Create a middleware .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (currDeps, loc) {\r\n      loc.deps = loc.deps || [];\r\n      var covered = [];\r\n      currDeps.forEach(function (obj) {\r\n        if (covered.indexOf(obj.path) < 0) {\r\n          covered.push(obj.path);\r\n          var key = obj.name\r\n            , isRelative = (['\\\\', '\/', '.'].indexOf(key[0]) >= 0)\r\n            , notCovered = notCoveredInArray(loc.deps, key)\r\n            , isRecorded = (!isRelative || opts.showLocal) && notCovered\r\n            , res = isRecorded ? { name: key } : loc;\r\n          if (isRecorded) {\r\n            res.path = obj.path;\r\n            loc.deps.push(res);\r\n          }\r\n          traverse(lookup[obj.path] || [], res);\r\n        }\r\n      });\r\n    }","code-length":237,"reference":"build a dependency tree from the flat mdeps list by recursing","result":"Traverse the lookup .","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (ms, cycles) {\r\n  var removed = {};\r\n  cycles.forEach(function (c) {\r\n    var last = c[c.length-1];\r\n    var depsInCycle = ms[last].filter(function (deps) {\r\n      return deps.path && c.indexOf(deps.path) >= 0;\r\n    });\r\n    if (!depsInCycle.length) {\r\n      throw new Error(\"logic fail2\");\r\n    }\r\n    var depToRemove = depsInCycle[0].path;\r\n    for (var i = 0; i < ms[last].length; i += 1) {\r\n      var dep = ms[last][i];\r\n      if (dep.path && dep.path === depToRemove) {\r\n        removed[last] = dep.name;\r\n        ms[last].splice(i, 1);\r\n      }\r\n    }\r\n  });\r\n  return removed;\r\n}","code-length":233,"reference":"given a modules array with cycles - trim dependencies in each cycle","result":"Remove dependencies in a module.","score":[0.0927,0.2262]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n  assert(options,         \"options are required\");\r\n  assert(options.name,    \"Series must be named\");\r\n  options = _.defaults({}, options, {\r\n    columns:              {},\r\n    additionalColumns:    null\r\n  });\r\n  this._options = options;\r\n}","code-length":86,"reference":"Create a times series that you can report to.","result":"Create series.","score":[0.0151,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction whenRead (args) {\r\n    let value = getValue(args)\r\n    if (value && typeof value.then === 'function') {\r\n      value.then((val) => whenTest(args, val)).catch((error) => {\r\n        console.error(`${action.displayName} caught an error whilst getting a value to test`, error)\r\n      })\r\n    } else {\r\n      whenTest(args, value)\r\n    }\r\n  }","code-length":123,"reference":"define the action","result":"Test when a value is read.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findAndDelete(target, value) {\r\r\n    if (!isIterable(target))\r\r\n        return false;\r\r\n    if (isArray(target)) {\r\r\n        for (let i = 0; i < target.length; i++) {\r\r\n            if (deep_equal_1.default(target[i], value)) {\r\r\n                target.splice(i, 1);\r\r\n                return true;\r\r\n            }\r\r\n        }\r\r\n    }\r\r\n    else if (isObject(target)) {\r\r\n        const keys = Object.keys(target);\r\r\n        for (let i = 0; i < keys.length; i++) {\r\r\n            if (deep_equal_1.default(target[keys[i]], value)) {\r\r\n                delete target[keys[i]];\r\r\n                return true;\r\r\n            }\r\r\n        }\r\r\n    }\r\r\n    return false;\r\r\n}","code-length":239,"reference":"Finds and deletes first encounter of value in target\n","result":"Find and delete values in an iterable.","score":[0.1443,0.55]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findAndDeleteAll(target, value) {\r\r\n    let flag = false;\r\r\n    while (findAndDelete(target, value)) {\r\r\n        flag = true;\r\r\n    }\r\r\n    return flag;\r\r\n}","code-length":68,"reference":"Finds and deletes all encounters of value in target\n","result":"Find and delete all items.","score":[0.1284,0.4615]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n  assert(options,                   \"options are required\");\r\n  assert(options.connectionString,  \"options.connectionString is missing\");\r\n  assert(url.parse(options.connectionString).protocol === 'https:' ||\r\n         options.allowHTTP, \"InfluxDB connectionString must use HTTPS!\");\r\n  options = _.defaults({}, options, {\r\n    maxDelay:             60 * 5,\r\n    maxPendingPoints:     250\r\n  });\r\n  this._options           = options;\r\n  this._pendingPoints     = {};\r\n  this._nbPendingPoints   = 0;\r\n  this._flushTimeout = setTimeout(\r\n    this.flush.bind(this, true),\r\n    options.maxDelay * 1000\r\n  );\r\n}","code-length":193,"reference":"Create an Influx Database Connection\n\noptions:\n{\n\/\/ Connection string for\nconnectionString:  '<protocol>:\/\/<user>:<pwd>","result":"Create a new instance of the class.","score":[0.0685,0.0403]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(handler, options) {\r\n  assert(handler instanceof Function, \"A handler must be provided\");\r\n  assert(options,                     \"options required\");\r\n  assert(options.drain,               \"options.drain is required\");\r\n  assert(options.component,           \"options.component is required\");\r\n  var reporter = series.HandlerReports.reporter(options.drain);\r\n  return function(message) {\r\n    var point = {\r\n      component:      options.component,\r\n      duration:       undefined,\r\n      exchange:       message.exchange || '',\r\n      redelivered:    (message.redelivered ? 'true' : 'false'),\r\n      error:          'false'\r\n    };\r\n    var start = process.hrtime();\r\n    return Promise.resolve(handler(message)).then(function() {\r\n      var d = process.hrtime(start);\r\n      point.duration = d[0] * 1000 + (d[1] \/ 1000000);\r\n      reporter(point);\r\n    }, function(err) {\r\n      var d = process.hrtime(start);\r\n      point.duration = d[0] * 1000 + (d[1] \/ 1000000);\r\n      point.error = 'true';\r\n      reporter(point);\r\n      throw err;\r\n    });\r\n  };\r\n}","code-length":332,"reference":"Create a handler timer for AMQP messages received through","result":"Create a handler function.","score":[0.1885,0.3464]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n  assert(options,           \"Options are required\");\r\n  assert(options.drain,     \"A drain for the measurements must be provided!\");\r\n  assert(options.component, \"A component must be specified\");\r\n  assert(options.process,   \"A process name must be specified\");\r\n  options = _.defaults({}, options, {\r\n    interval:         60\r\n  });\r\n  if (_processUsageReportingInterval) {\r\n    debug(\"WARNING: startProcessUsageReporting() already started!\");\r\n    clearInterval(_processUsageReportingInterval);\r\n    _processUsageReportingInterval = null;\r\n  }\r\n  var usage = require('usage');\r\n  var reporter = series.UsageReports.reporter(options.drain);\r\n  _processUsageReportingInterval = setInterval(function() {\r\n    usage.lookup(process.pid, {keepHistory: true}, function(err, result) {\r\n      if (err) {\r\n        debug(\"Failed to get usage statistics, err: %s, %j\",\r\n              err, err, err.stack);\r\n        return;\r\n      }\r\n      reporter({\r\n        component:      options.component,\r\n        process:        options.process,\r\n        cpu:            result.cpu,\r\n        memory:         result.memory\r\n      });\r\n    });\r\n  }, options.interval * 1000);\r\n}","code-length":339,"reference":"Monitor CPU and memory for this instance.","result":"Start the process usage reporting.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n  options = _.defaults({}, options || {}, {\r\n    tags:   {},\r\n    drain:  undefined\r\n  });\r\n  assert(options.drain,                     \"options.drain is required\");\r\n  assert(typeof options.tags === 'object',  \"options.tags is required\");\r\n  assert(_.intersection(\r\n    _.keys(options.tags), series.APIClientCalls.columns()\r\n  ).length === 0, \"Can't used reserved tag names!\");\r\n  return series.APIClientCalls.reporter(options.drain, options.tags);\r\n}","code-length":152,"reference":"`stats` as function that will be call after an API call.","result":"Create a reporter.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildOptions (options) {\r\n  var result = [];\r\n  var keys = Object.keys(options);\r\n  keys.forEach(function (key) {\r\n    var props = options[key];\r\n    if (is.string(props)) {\r\n      props = {\r\n        type: props\r\n      };\r\n    }\r\n    var name = [\r\n      format('--%s', dasherize(key))\r\n    ];\r\n    var aliases = props.alias || props.aliases || [];\r\n    if (is.not.array(aliases)) {\r\n      aliases = [aliases];\r\n    }\r\n    aliases.forEach(function (alias) {\r\n      alias = format('-%s', alias);\r\n      name.unshift(alias);\r\n    });\r\n    result.push([\r\n      name.join(', '),\r\n      props.desc || ''\r\n    ]);\r\n  });\r\n  return table(result);\r\n}","code-length":244,"reference":"Helpers","result":"Return options.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction buildCommands (commands) {\r\n  var result = [];\r\n  commands.forEach(function (command) {\r\n    result.push([\r\n      command.name,\r\n      command.desc || ''\r\n    ]);\r\n  });\r\n  return table(result);\r\n}","code-length":79,"reference":"Output command list","result":"Build the commands.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Router(options) {\r\n\tconst logPrefix = topLogPrefix + 'Router() - ';\r\n\tconst that      = this;\r\n\tlet defaultRouteFound = false;\r\n\tthat.options = options || {};\r\n\tif (! that.options.paths) {\r\n\t\tthat.options.paths = {\r\n\t\t\t'controller': {\r\n\t\t\t\t'path': 'controllers',\r\n\t\t\t\t'exts': 'js'\r\n\t\t\t},\r\n\t\t\t'static': {\r\n\t\t\t\t'path': 'public',\r\n\t\t\t\t'exts': false\r\n\t\t\t},\r\n\t\t\t'template': {\r\n\t\t\t\t'path': 'public\/templates',\r\n\t\t\t\t'exts': ['tmpl', 'tmp', 'ejs', 'pug']\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\tif (! that.options.routes)   that.options.routes   = [];\r\n\tif (! that.options.basePath) that.options.basePath = process.cwd();\r\n\tif (! that.options.log) {\r\n\t\tconst lUtils = new LUtils();\r\n\t\tthat.options.log = new lUtils.Log();\r\n\t}\r\n\tfor (const key of Object.keys(that.options.paths)) {\r\n\t\tif (! Array.isArray(that.options.paths[key].exts) && that.options.paths[key].exts !== false) {\r\n\t\t\tthat.options.paths[key].exts = [that.options.paths[key].exts];\r\n\t\t}\r\n\t}\r\n\tif (! that.options.lfs) {\r\n\t\tthat.options.lfs = new Lfs({'basePath': that.options.basePath, 'log': that.options.log});\r\n\t}\r\n\tfor (let i = 0; that.options.routes[i] !== undefined; i ++) {\r\n\t\tif (that.options.routes[i].regex === '^\/$') {\r\n\t\t\tdefaultRouteFound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (defaultRouteFound === false) {\r\n\t\tthat.options.routes.push({\r\n\t\t\t'regex':          '^\/$',\r\n\t\t\t'controllerPath': 'default.js',\r\n\t\t\t'templatePath':   'default.tmpl'\r\n\t\t});\r\n\t}\r\n\tfor (const key of Object.keys(that.options)) {\r\n\t\tthat[key] = that.options[key];\r\n\t}\r\n\tthat.log.debug(logPrefix + 'Instantiated with options: ' + JSON.stringify(that.options));\r\n}","code-length":647,"reference":"Module main constructor\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDefaultPortByProtocol (rawProtocol) {\r\n  const protocol = rawProtocol.endsWith(':')\r\n    ? rawProtocol.slice(0, -1)\r\n    : rawProtocol\r\n  const portByProtocol = portNumbers.getPort(protocol)\r\n  return portByProtocol\r\n    ? Promise.resolve(String(portByProtocol.port))\r\n    : Promise.reject(new Error('Has no port'))\r\n}","code-length":110,"reference":"Helper method to look up port by protocol.\n\n","result":"Resolve port numbers.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearScripts(node){\r\n      var rslt = {};\r\n      for(var key in node){\r\n        var val = node[key];\r\n        if(_.isString(val)){\r\n          if(val.trim()) rslt[key] = \"...\";\r\n        }\r\n        else{\r\n          var childScripts = clearScripts(val);\r\n          if(!_.isEmpty(childScripts)) rslt[key] = childScripts;\r\n        }\r\n      }\r\n      return rslt;\r\n    }","code-length":131,"reference":"Replace scripts with \"...\" and prune empty scripts","result":"Clear the scripts in a node.","score":[0.1383,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj, array){\r\n    if(!Array.prototype.indexOf){\r\n      for(var i=0; i<array.length; i++){\r\n          if(array[i]===obj){\r\n              return i;\r\n          }\r\n      }\r\n      return -1;\r\n    }\r\n    else {\r\n      return array.indexOf(obj); \r\n    }\r\n  }","code-length":106,"reference":"holds functions and error handlers","result":"Detect array indexes.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getElementValues(nodeList, initialScope) {\r\n    const valueList = []\r\n    for (let i = 0; i < nodeList.length; ++i) {\r\n        const elementNode = nodeList[i]\r\n        if (elementNode == null) {\r\n            valueList.length = i + 1\r\n        } else if (elementNode.type === \"SpreadElement\") {\r\n            const argument = getStaticValueR(elementNode.argument, initialScope)\r\n            if (argument == null) {\r\n                return null\r\n            }\r\n            valueList.push(...argument.value)\r\n        } else {\r\n            const element = getStaticValueR(elementNode, initialScope)\r\n            if (element == null) {\r\n                return null\r\n            }\r\n            valueList.push(element.value)\r\n        }\r\n    }\r\n    return valueList\r\n}","code-length":217,"reference":"Get the element values of a given node list.\n","result":"Get the element values from a node list.","score":[0.4666,0.7556]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getStaticValueR(node, initialScope) {\r\n    if (node != null && Object.hasOwnProperty.call(operations, node.type)) {\r\n        return operations[node.type](node, initialScope)\r\n    }\r\n    return null\r\n}","code-length":70,"reference":"Get the value of a given node if it's a static value.\n","result":"Resolve the static value.","score":[0.0677,0.2282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isModifiedGlobal(variable) {\r\n    return (\r\n        variable == null ||\r\n        variable.defs.length !== 0 ||\r\n        variable.references.some(r => r.isWrite())\r\n    )\r\n}","code-length":62,"reference":"Check whether a given variable is modified or not.\n","result":"Check if global is modified.","score":[0.1284,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction config(ext) {\r\n    return {\r\n        input: \"src\/index.js\",\r\n        output: {\r\n            file: `index${ext}`,\r\n            format: ext === \".mjs\" ? \"es\" : \"cjs\",\r\n            sourcemap: true,\r\n            sourcemapFile: `index${ext}.map`,\r\n            strict: true,\r\n            banner: ``,\r\n        },\r\n        plugins: [sourcemaps()],\r\n        external: Object.keys(require(\".\/package.json\").dependencies),\r\n    }\r\n}","code-length":145,"reference":"Define the output configuration.\n","result":"Generate the config file.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isEscaped(str, index) {\r\n    let escaped = false\r\n    for (let i = index - 1; i >= 0 && str.charCodeAt(i) === 0x5c; --i) {\r\n        escaped = !escaped\r\n    }\r\n    return escaped\r\n}","code-length":78,"reference":"Check whether a given character is escaped or not.\n","result":"Detect if a string is escaped.","score":[0.1392,0.1149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceS(matcher, str, replacement) {\r\n    const chunks = []\r\n    let index = 0\r\n        let match = null\r\n        function replacer(key) {\r\n        switch (key) {\r\n            case \"$$\":\r\n                return \"$\"\r\n            case \"$&\":\r\n                return match[0]\r\n            case \"$`\":\r\n                return str.slice(0, match.index)\r\n            case \"$'\":\r\n                return str.slice(match.index + match[0].length)\r\n            default: {\r\n                const i = key.slice(1)\r\n                if (i in match) {\r\n                    return match[i]\r\n                }\r\n                return key\r\n            }\r\n        }\r\n    }\r\n    for (match of matcher.execAll(str)) {\r\n        chunks.push(str.slice(index, match.index))\r\n        chunks.push(replacement.replace(placeholder, replacer))\r\n        index = match.index + match[0].length\r\n    }\r\n    chunks.push(str.slice(index))\r\n    return chunks.join(\"\")\r\n}","code-length":278,"reference":"Replace a given string by a given matcher.\n","result":"Replace strings.","score":[0.0249,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceF(matcher, str, replace) {\r\n    const chunks = []\r\n    let index = 0\r\n    for (const match of matcher.execAll(str)) {\r\n        chunks.push(str.slice(index, match.index))\r\n        chunks.push(String(replace(...match, match.index, match.input)))\r\n        index = match.index + match[0].length\r\n    }\r\n    chunks.push(str.slice(index))\r\n    return chunks.join(\"\")\r\n}","code-length":131,"reference":"eslint-disable-next-line valid-jsdoc \nReplace a given string by a given matcher.\n","result":"Replace regexps.","score":[0.0092,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction send(msg) {\r\n    switch(ps.readyState) {\r\n      case 0:\r\n        setTimeout(function () { send(msg); }, 1000);\r\n        break;\r\n      case 2:\r\n      case 3:\r\n        _event('dev', 'pubsub - reconnect: send() - closing\/closed state');\r\n        connect();\r\n        setTimeout(function () { send(msg); }, 2000);\r\n        break;\r\n      case 1:\r\n        try {\r\n          ps.send(msg);\r\n        } catch (err) {\r\n          console.error(err);\r\n          setTimeout(function () { send(msg); }, 1500);\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n\t\t}\r\n  }","code-length":193,"reference":"this provides some preventative error handling because the pubsub edge seems to be unstable","result":"Send messages to the pubsub.","score":[0.0472,0.0763]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseMessage(data) {\r\n    switch (data.topic) {\r\n+ state.channel_id:\r\n        bits();\r\n        break;\r\n        moderation();\r\n        break;\r\n      case 'whispers.' + state.id:\r\n        whisper();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    function bits() {\r\n      let bits = JSON.parse(data.message);\r\n      _event('bits', bits);\r\n    }\r\n    function moderation() {\r\n      let moderation = JSON.parse(data.message).data;\r\n      _event('moderation', moderation);\r\n    }\r\n    function whisper() {\r\n      let message = JSON.parse(data.message).data_object;\r\n    }\r\n","code-length":203,"reference":"data is message.data, so it should have msg.topic and msg.message","result":"Parse messages.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction JWT(secret, options) {\r\n    this.token = '';\r\n    this.payload = {};\r\n    this.secret = secret;\r\n    this.options = options;\r\n    this.valid = false;\r\n    this.expired = false;\r\n    this.stale = true;\r\n}","code-length":83,"reference":"JWT - Class representing a JSON Web Token, it's payload, and it's status\n","result":"Create JWTs.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(payload) {\r\n        payload.stales = Date.now() + this.options.stales;\r\n                this.payload = payload;\r\n        this.token = utils.sign(this.payload, this.secret, this.options.signOptions);\r\n        this.valid = true;\r\n        this.expired = false;\r\n        this.stale = false;\r\n                return this;\r\n    }","code-length":107,"reference":"sign - generate a new token from the payload\n","result":"Validate the payload.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(res) {\r\n        if (this.options.cookies) {\r\n            res.cookie(this.options.cookie, this.token, this.options.cookieOptions);\r\n        }\r\n                return this;\r\n    }","code-length":64,"reference":"store - stores the JWT in the cookie\n","result":"Send the token.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        return {\r\n            token: this.token,\r\n            payload: this.payload,\r\n            valid: this.valid,\r\n            expired: this.expired,\r\n            stale: this.stale\r\n        };\r\n    }","code-length":71,"reference":"toJSON - this function is called when the jwt is passed through JSON.stringify\nwe don't want the secret or options to be stringified\n","result":"Create a new token.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(token) {\r\n        this.token = token || '';\r\n                try {\r\n            this.payload = utils.verify(this.token, this.secret, this.options.verifyOptions);\r\n            this.valid = true;\r\n        } catch (err) {\r\n            this.payload = utils.decode(this.token) || {};\r\n            if (err.name == 'TokenExpiredError') {\r\n                this.expired = true;\r\n            }\r\n        }\r\n                if (this.valid && !this.options.verify(this)) {\r\n            this.valid = false;\r\n        }\r\n                if (this.payload.stales && Date.now() <= this.payload.stales) {\r\n            this.stale = false;\r\n        }\r\n                return this;\r\n    }","code-length":204,"reference":"verify - verifies the JWT's token\n","result":"Authenticate a token.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(secret, options) {\r\n        if (!secret) {\r\n            throw new ReferenceError('secret must be defined');\r\n        }\r\n                if (typeof secret == 'string') {\r\n            var _secret = secret;\r\n            secret = function(req) {return _secret};\r\n        }\r\n                options = options || {};\r\n        var defaults = {\r\n            cookie: 'jwt-express',\r\n            cookieOptions: {\r\n                httpOnly: true\r\n            },\r\n            cookies: true,\r\n            refresh: true,\r\n            reqProperty: 'jwt',\r\n            revoke: function(jwt) {},\r\n            signOptions: {},\r\n            stales: 900000,\r\n            verify: function(jwt) {return true},\r\n            verifyOptions: {}\r\n        };\r\n                for (var key in defaults) {\r\n            this.options[key] = options[key] !== undefined? options[key]: defaults[key];\r\n        }\r\n                return function(req, res, next) {\r\n            var token;\r\n            if (this.options.cookies) {\r\n                token = req.cookies[this.options.cookie];\r\n            } else if (req.headers.authorization) {\r\n                token = req.headers.authorization.split(' ')[1];\r\n            }\r\n                        var jwt = new JWT(secret(req), this.options);\r\n            req[this.options.reqProperty] = jwt.verify(token);\r\n                        if (jwt.valid && !jwt.stale && jwt.options.refresh) {\r\n                jwt.resign().store(res);\r\n            }\r\n                                    res.jwt = function(payload) {\r\n                var jwt = new JWT(secret(req), this.options);\r\n                return jwt.sign(payload).store(res);\r\n            }.bind(this);\r\n                        this.clear = function() {\r\n                if (this.options.cookies) {\r\n                    res.clearCookie(this.options.cookie);\r\n                }\r\n            }.bind(this);\r\n                        next();\r\n        }.bind(this);\r\n    }","code-length":514,"reference":"init - initialize jwt-express\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        return function(req, res, next) {\r\n            var jwt = req[this.options.reqProperty] || {};\r\n                        if (!jwt.valid) {\r\n                next(new JWTExpressError('JWT is invalid'));\r\n            } else {\r\n                next();\r\n            }\r\n        }.bind(this);\r\n    }","code-length":97,"reference":"valid - requires that a JWT is valid\n","result":"Create a JWTExpress instance.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setupComponent (fixture, options) {\r\n    if (this.component) {\r\n      this.component.teardown();\r\n      this.$node.remove();\r\n    }\r\n    if (fixture instanceof jQuery || typeof fixture === 'string') {\r\n      this.$node = $(fixture).addClass('component-root');\r\n    } else {\r\n      this.$node = $('<div class=\"component-root\" \/>');\r\n      options = fixture;\r\n      fixture = null;\r\n    }\r\n    $('body').append(this.$node);\r\n    options = options === undefined ? {} : options;\r\n    this.component = (new this.Component()).initialize(this.$node, options);\r\n  }","code-length":182,"reference":"setupComponent\n- Assumes it has been called in the context of a jasmine spec.\n- Creates a new HTML element and attaches to it an instance of this.Component\n- If a fixture is provided, the fixture will serve as the component root.\n\n","result":"Setup the component.","score":[0.0,0.0131]}
{"code":"\/*is used to<extra_id_0>\r\nfunction describeModuleFactory (modulePath, specDefinitions) {\r\n    return function () {\r\n      beforeEach(function (done) {\r\n        this.module = null;\r\n        var requireCallback = function (module) {\r\n          this.module = module;\r\n          done();\r\n        }.bind(this);\r\n        require([modulePath], requireCallback);\r\n      });\r\n      specDefinitions.apply(this);\r\n    };\r\n  }","code-length":117,"reference":"Load amd module before executing specDefinitions","result":"Describe a module.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction consul (options, resilient) {\r\n      defineResilientOptions(params, options)\r\n      return {\r\n        'in': function inHandler (err, res, next) {\r\n          if (err) return next()\r\n          if (Array.isArray(res.data) && Object(res.data[0]) === res.data[0]) {\r\n            res.data = mapServers(res.data)\r\n          }\r\n          next()\r\n        },\r\n        'out': function outHandler (options, next) {\r\n          options.params = options.params || {}\r\n          if (params.datacenter) {\r\n            options.params.dc = params.datacenter\r\n          }\r\n          if (params.onlyHealthy) {\r\n            options.params.passing = true\r\n          }\r\n          if (params.tag) {\r\n            options.params.tag = params.tag\r\n          }\r\n          next()\r\n        }\r\n      }\r\n    }","code-length":245,"reference":"Middleware constructor function","result":"Connect to Consul servers.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inHandler (err, res, next) {\r\n          if (err) return next()\r\n          if (Array.isArray(res.data) && Object(res.data[0]) === res.data[0]) {\r\n            res.data = mapServers(res.data)\r\n          }\r\n          next()\r\n        }","code-length":88,"reference":"Incoming traffic middleware","result":"Handle incoming requests.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction outHandler (options, next) {\r\n          options.params = options.params || {}\r\n          if (params.datacenter) {\r\n            options.params.dc = params.datacenter\r\n          }\r\n          if (params.onlyHealthy) {\r\n            options.params.passing = true\r\n          }\r\n          if (params.tag) {\r\n            options.params.tag = params.tag\r\n          }\r\n          next()\r\n        }","code-length":118,"reference":"Outgoing traffic middleware","result":"Handle the response.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(categoryId, event) {\r\n    event.preventDefault();\r\n    this.refs.scroller.prepareAnimationSync();\r\n    this.setState({\r\n      mode: 'single',\r\n      selected: categoryId,\r\n      previousScrollPosition: this.refs.scroller.scrollTop,\r\n    }, function() {\r\n      this.refs.scroller.animateAndResetScroll(0, 0);\r\n    });\r\n  }","code-length":114,"reference":"When listing all categories and user taps on a given category","result":"Select a single category.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(event) {\r\n    event.preventDefault();\r\n    this.setState({\r\n      mode: 'all',\r\n      selected: null,\r\n    }, function() {\r\n      this.refs.scroller.animateAndResetScroll(0, this.state.previousScrollPosition);\r\n    });\r\n  }","code-length":86,"reference":"When showing a single category and user taps the stack","result":"Prevent default browser scrolling.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Service(displayName, UUID, subtype) {\r\n    if (!UUID) throw new Error(\"Services must be created with a valid UUID.\");\r\n  this.displayName = displayName;\r\n  this.UUID = UUID;\r\n  this.subtype = subtype;\r\n  this.iid = null;\r\n  this.characteristics = [];\r\n  this.optionalCharacteristics = [];\r\n    if (displayName) {\r\n    var nameCharacteristic =\r\n      this.getCharacteristic(Characteristic.Name) ||\r\n      this.addCharacteristic(Characteristic.Name);\r\n        nameCharacteristic.setValue(displayName);\r\n  }\r\n}","code-length":166,"reference":"Service represents a set of grouped values necessary to provide a logical function. For instance, a\n\"Door Lock Mechanism\" service might contain two values, one for the \"desired lock state\" and one for the\n\"current lock state\". A particular Service is distinguished from others by its \"type\", which is a UUID.\nHomeKit provides a set of known Service UUIDs defined in HomeKitTypes.js along with a corresponding\nconcrete subclass that you can instantiate directly to setup the necessary values. These natively-supported\nServices are expected to contain a particular set of Characteristics.\n\nUnlike Characteristics, where you cannot have two Characteristics with the same UUID in the same Service,\nyou can actually have multiple Services with the same UUID in a single Accessory. For instance, imagine\na Garage Door Opener with both a \"security light\" and a \"backlight\" for the display. Each light could be\na \"Lightbulb\" Service with the same UUID. To account for this situation, we define an extra \"subtype\"\nproperty on Service, that can be a string or other string-convertible object that uniquely identifies the\nService among its peers in an Accessory. For instance, you might have `service1.subtype = 'security_light'`\nfor one and `service2.subtype = 'backlight'` for the other.\n\nYou can also define custom Services by providing your own UUID for the type that you generate yourself.\nCustom Services can contain an arbitrary set of Characteristics, but Siri will likely not be able to\nwork with these.\n\n","result":"Create a new Service.","score":[1.61e-26,0.0023]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Characteristic(displayName, UUID, props) {\r\n  this.displayName = displayName;\r\n  this.UUID  = UUID;\r\n  this.iid   = null;\r\n  this.value = null;\r\n  this.props = props || {\r\n    format  : null,\r\n    unit    : null,\r\n    minValue: null,\r\n    maxValue: null,\r\n    minStep : null,\r\n    perms   : []\r\n  };\r\n}","code-length":124,"reference":"Characteristic represents a particular typed variable that can be assigned to a Service. For instance, a\n\"Hue\" Characteristic might store a 'float' value of type 'arcdegrees'. You could add the Hue Characteristic\nto a Service in order to store that value. A particular Characteristic is distinguished from others by its\nUUID. HomeKit provides a set of known Characteristic UUIDs defined in HomeKitTypes.js along with a\ncorresponding concrete subclass.\n\nYou can also define custom Characteristics by providing your own UUID. Custom Characteristics can be added\nto any native or custom Services, but Siri will likely not be able to work with these.\n\nNote that you can get the \"value\" of a Characteristic by accessing the \"value\" property directly, but this\nis really a \"cached value\". If you want to fetch the latest value, which may involve doing some work, then\ncall getValue().\n\n","result":"Create a new Characteristic.","score":[4.264e-16,0.0039]}
{"code":"\/*is used to<extra_id_0>\r\nfunction migrateDatabase(nativeDatabase, nativeTransaction, schemaDescriptors,\r\n    currentVersion) {\r\n  let descriptorsToProcess = schemaDescriptors.filter((descriptor) => {\r\n    return descriptor.version > currentVersion\r\n  })\r\n    if (!descriptorsToProcess.length) {\r\n    return PromiseSync.resolve(undefined)\r\n  }\r\n    return migrateDatabaseVersion(\r\n    nativeDatabase,\r\n    nativeTransaction,\r\n    descriptorsToProcess[0]\r\n  ).then(() => {\r\n    return migrateDatabase(\r\n      nativeDatabase,\r\n      nativeTransaction,\r\n      descriptorsToProcess,\r\n      descriptorsToProcess[0].version\r\n    )\r\n  })\r\n}","code-length":169,"reference":"Processes the schema descriptors to upgrade the database schema to the\ngreatest version specified.\n\n","result":"Migrate the database .","score":[0.0371,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction migrateDatabaseVersion(nativeDatabase, nativeTransaction,\r\n    descriptor) {\r\n  let fetchPromise\r\n  if (descriptor.fetchBefore && descriptor.fetchBefore.length) {\r\n    let fetcher = new RecordFetcher()\r\n    let objectStores = normalizeFetchBeforeObjectStores(descriptor.fetchBefore)\r\n    fetchPromise = fetcher.fetchRecords(nativeTransaction, objectStores)\r\n  } else {\r\n    fetchPromise = PromiseSync.resolve({})\r\n  }\r\n    return fetchPromise.then((recordsMap) => {\r\n    let versionMigrator = new DatabaseVersionMigrator(\r\n      nativeDatabase,\r\n      nativeTransaction,\r\n      descriptor.objectStores\r\n    )\r\n        return versionMigrator.executeMigration(\r\n      descriptor.after || (() => {}),\r\n      recordsMap\r\n    )\r\n  })\r\n}","code-length":208,"reference":"Performs a single-version database migration to the schema described by the\nprovided database schema descriptor.\n\n","result":"Migrate database version.","score":[0.0075,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeFetchBeforeObjectStores(objectStores) {\r\n  return objectStores.map((objectStore) => {\r\n    if (typeof objectStore === \"string\") {\r\n      return {\r\n        objectStore,\r\n        preprocessor: record => record\r\n      }\r\n    } else if (!objectStore.preprocessor) {\r\n      return {\r\n        objectStore: objectStore.objectStore,\r\n        preprocessor: record => record\r\n      }\r\n    } else {\r\n      return objectStore\r\n    }\r\n  })\r\n}","code-length":132,"reference":"Normalizes the provided array of object store fetch descriptors to process\nbefore upgrading the database schema.\n\n","result":"Normalize fetchBeforeObjectStores.","score":[0,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkSchemaDescriptorTypes(schemaDescriptors) {\r\n  let onlyPlainObjects = schemaDescriptors.every((descriptor) => {\r\n    return descriptor.constructor === Object\r\n  })\r\n  if (onlyPlainObjects) {\r\n    return\r\n  }\r\n    if (!(schemaDescriptors[0] instanceof DatabaseSchema)) {\r\n    throw new TypeError(\"The schema descriptor of the lowest described \" +\r\n        `database version (${schemaDescriptors[0].version}) must be a ` +\r\n        \"DatabaseSchema instance, or all schema descriptors must be plain \" +\r\n        \"objects\")\r\n  }\r\n  schemaDescriptors.slice(1).forEach((descriptor) => {\r\n    if (!(descriptor instanceof UpgradedDatabaseSchema)) {\r\n      throw new TypeError(\"The schema descriptors of the upgraded database \" +\r\n          \"versions must be UpgradedDatabaseSchema instances, but the \" +\r\n          `provided descriptor of version ${descriptor.version} was not an ` +\r\n          \"UpgradedDatabaseSchema instance, or all schema descriptors must \" +\r\n          \"be plain objects\")\r\n    }\r\n  })\r\n}","code-length":266,"reference":"Validates the types of the provided schema descriptors.\n\n","result":"Check the schema descriptors of the upgraded database.","score":[0.2336,0.3945]}
{"code":"\/*is used to<extra_id_0>\r\nfunction list(storage, keyRange, filter, direction, unique, pageSize,\r\n    storageFactory) {\r\n  return new Promise((resolve, reject) => {\r\n    let items = []\r\n    storage.createCursorFactory(keyRange, direction)((cursor) => {\r\n      if (!filter || filter(cursor.record, cursor.primaryKey, cursor.key)) {\r\n        if (items.length === pageSize) {\r\n          finalize(true, cursor.key, cursor.primaryKey)\r\n          return\r\n        } else {\r\n          items.push(cursor.record)\r\n        }\r\n      }\r\n            cursor.continue()\r\n    }).then(() => finalize(false, null, null)).catch(error => reject(error))\r\n    function finalize(hasNextPage, nextKey, nextPrimaryKey) {\r\n      resolve(new RecordList(items, storageFactory, nextKey, nextPrimaryKey,\r\n          direction, unique, filter, pageSize, hasNextPage))\r\n    }\r\n  })\r\n}","code-length":246,"reference":"Creates a promise that resolves to a record list containing the first page\nof records matching the provided filter.\n\n","result":"Create a list of records in a storage.","score":[0.0624,0.2855]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeCompoundObjectKey(keyPaths, key) {\r\n  let normalizedKey = []\r\n  keyPaths.forEach((keyPath) => {\r\n    let keyValue = key\r\n    keyPath.split(\".\").forEach((fieldName) => {\r\n      if (!keyValue.hasOwnProperty(fieldName)) {\r\n        throw new Error(`The ${keyPath} key path is not defined in the ` +\r\n            \"provided compound key\")\r\n      }\r\n      keyValue = keyValue[fieldName]\r\n    })\r\n    normalizedKey.push(keyValue)\r\n  })\r\n  return normalizedKey\r\n}","code-length":153,"reference":"Normalizes the provided compound key represented as an object into a\ncompound key representation compatible with the Indexed DB.\n\n","result":"Normalize compound object keys.","score":[0.0089,0.0857]}
{"code":"\/*is used to<extra_id_0>\r\nfunction iterateCursor(request, cursorConstructor, recordCallback) {\r\n  return new PromiseSync((resolve, reject) => {\r\n    let traversedRecords = 0\r\n    let canIterate = true\r\n        request.onerror = () => reject(request.error)\r\n    request.onsuccess = () => {\r\n      if (!canIterate) {\r\n        console.warn(\"Cursor iteration was requested asynchronously, \" +\r\n            \"ignoring the new cursor position\")\r\n        return\r\n      }\r\n            if (!request.result) {\r\n        resolve(traversedRecords)\r\n        return\r\n      }\r\n            traversedRecords++\r\n            let iterationRequested = handleCursorIteration(\r\n        request,\r\n        cursorConstructor,\r\n        recordCallback,\r\n        reject\r\n      )\r\n            if (!iterationRequested) {\r\n        canIterate = false\r\n        resolve(traversedRecords)\r\n      }\r\n    }\r\n  })\r\n}","code-length":232,"reference":"Iterates the cursor to which the provided Indexed DB request resolves. The\nmethod will iterate the cursor over the records in this storage within the\nrange specified when the cursor was opened until the provided callback does\nnot request iterating to the next record or the last matching record is\nreached.\n\n","result":"Iterate over a cursor.","score":[0.0,0.0216]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleCursorIteration(request, cursorConstructor, recordCallback,\r\n    reject) {\r\n  let iterationRequested = false\r\n  let cursor = new cursorConstructor(request, () => {\r\n    iterationRequested = true\r\n  }, (subRequest) => {\r\n    return PromiseSync.resolve(subRequest).catch((error) => {\r\n      reject(error)\r\n      throw error\r\n    })\r\n  })\r\n    try {\r\n    recordCallback(cursor)\r\n  } catch (error) {\r\n    iterationRequested = false\r\n    reject(error)\r\n  }\r\n    return iterationRequested\r\n}","code-length":157,"reference":"Handles a single iteration of a Indexed DB cursor iterating the records in\nthe storage.\n\n","result":"Return iterationRequested.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fetchAllRecords(transaction, objectStores) {\r\n  return PromiseSync.all(objectStores.map((descriptor) => {\r\n    return fetchRecords(\r\n      transaction.getObjectStore(descriptor.objectStore),\r\n      descriptor.preprocessor\r\n    )\r\n  })).then((fetchedRecords) => {\r\n    let recordsMap = {}\r\n        for (let i = 0; i < objectStores.length; i++) {\r\n      recordsMap[objectStores[i].objectStore] = fetchedRecords[i]\r\n    }\r\n        return recordsMap\r\n  })\r\n}","code-length":149,"reference":"Fetches all records from the specified object stores using the provided\nread-write transaction.\n\n","result":"Fetch all records.","score":[0.0146,0.1563]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fetchRecords(objectStore, preprocessor) {\r\n  return new PromiseSync((resolve, reject) => {\r\n    let records = []\r\n        objectStore.openCursor(null, CursorDirection.NEXT, (cursor) => {\r\n      let primaryKey = cursor.primaryKey\r\n      if (primaryKey instanceof Object) {\r\n        Object.freeze(primaryKey)\r\n      }\r\n            let preprocessedRecord = preprocessor(cursor.record, primaryKey)\r\n      if (preprocessedRecord === UpgradedDatabaseSchema.DELETE_RECORD) {\r\n        cursor.delete()\r\n        cursor.continue()\r\n        return\r\n      } else if (preprocessedRecord !== UpgradedDatabaseSchema.SKIP_RECORD) {\r\n        records.push({\r\n          key: primaryKey,\r\n          record: preprocessedRecord\r\n        })\r\n      } else {\r\n      }\r\n            cursor.continue()\r\n    }).then(() => resolve(records)).catch(error => reject(error))\r\n  })\r\n}","code-length":243,"reference":"Extracts all records from the provided object store and preprocess them\nusing the provided preprocessor.\n\nThe method traverses the records of the object store in ascending order of\ntheir primary keys, deleting the records for which the preprocessor returns\nthe {","result":"Fetch records from the database.","score":[0.0004,0.0401]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeFileP (outputPath, data, cb) {\r\n    outputPath = abs(outputPath);\r\n    let dirname = path.dirname(outputPath);\r\n    mkdirp(dirname, err => {\r\n        if (err) { return cb(err); }\r\n        let str = data;\r\n        if (typpy(data, Array) || typpy(data, Object)) {\r\n            str = JSON.stringify(data, null, 2);\r\n        }\r\n        fs.writeFile(outputPath, str, err => cb(err, data));\r\n    });\r\n}","code-length":145,"reference":"writeFileP\nCreate the directory structure and then create the file.\n\n","result":"Write data to a file.","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runTransaction(transaction, objectStoreNames, transactionOperations) {\r\n  let callbackArguments = objectStoreNames.map((objectStoreName) => {\r\n    return transaction.getObjectStore(objectStoreName)\r\n  })\r\n  callbackArguments.push(() => transaction.abort())\r\n    let resultPromise = transactionOperations(...callbackArguments)\r\n  return Promise.resolve(resultPromise).then((result) => {\r\n    return transaction.completionPromise.then(() => result)\r\n  })\r\n}","code-length":126,"reference":"Runs the provided transaction operations on the specified object stores\nobtained from the provided transaction.\n\nThe function returns a promise resolved when the transaction completes.\n\n","result":"Run a transaction.","score":[0.0003,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toNativeCursorDirection(direction, unique) {\r\n  if (typeof direction === \"string\") {\r\n    if (CURSOR_DIRECTIONS.indexOf(direction.toUpperCase()) === -1) {\r\n      throw new Error(\"When using a string as cursor direction, use NEXT \" +\r\n          `or PREVIOUS, ${direction} provided`);\r\n    }\r\n  } else {\r\n    direction = direction.value\r\n  }\r\n  let cursorDirection = direction.toLowerCase().substring(0, 4)\r\n  if (unique) {\r\n    cursorDirection += \"unique\"\r\n  }\r\n    return cursorDirection\r\n}","code-length":160,"reference":"Returns the cursor direction to use with the native Indexed DB API.\n\n","result":"Convert the cursor direction to native cursor direction.","score":[0.2788,0.3207]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createIndex(objectStore, indexSchema) {\r\n  let indexNames = Array.from(objectStore.indexNames)\r\n  if (indexNames.indexOf(indexSchema.name) !== -1) {\r\n    return\r\n  }\r\n  objectStore.createIndex(indexSchema.name, indexSchema.keyPath, {\r\n    unique: indexSchema.unique,\r\n    multiEntry: indexSchema.multiEntry\r\n  })\r\n}","code-length":113,"reference":"Creates a new index in the provided object store according to the provided\nindex schema.\n\n","result":"Create an index.","score":[0,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fetchNextPage(storageFactory, keyRange, cursorDirection, unique,\r\n    firstPrimaryKey, filter, pageSize) {\r\n  let storage = storageFactory()\r\n  let nextItems = []\r\n  return new Promise((resolve, reject) => {\r\n    let idb = idbProvider()\r\n    let cursorFactory = storage.createCursorFactory(\r\n      keyRange,\r\n      cursorDirection,\r\n      unique\r\n    )\r\n    cursorFactory((cursor) => {\r\n      if (!unique) {\r\n        let shouldSkip =\r\n          (\r\n            (cursorDirection === CursorDirection.NEXT) &&\r\n            (idb.cmp(firstPrimaryKey, cursor.primaryKey) > 0)\r\n          ) || (\r\n            (cursorDirection === CursorDirection.PREVIOUS) &&\r\n            (idb.cmp(firstPrimaryKey, cursor.primaryKey) < 0)\r\n          )\r\n        if (shouldSkip) {\r\n          cursor.continue()\r\n          return\r\n        }\r\n      }\r\n      if (!filter || filter(cursor.record, cursor.primaryKey, cursor.key)) {\r\n        if (nextItems.length === pageSize) {\r\n          finalize(true, cursor.key, cursor.primaryKey)\r\n          return\r\n        } else {\r\n          nextItems.push(cursor.record)\r\n        }\r\n      }\r\n      cursor.continue()\r\n    }).then(() => finalize(false, null, null)).catch(error => reject(error))\r\n    function finalize(hasNextPage, nextKey, nextPrimaryKey) {\r\n      resolve(new RecordList(nextItems, storageFactory, nextKey,\r\n          nextPrimaryKey, cursorDirection, unique, filter, pageSize,\r\n          hasNextPage))\r\n    }\r\n  })\r\n}","code-length":426,"reference":"Fetches the next page of records in a new ready-only transaction and\nresolves into a record list containing the fetched records.\n\n","result":"Fetch next page of records.","score":[0.0217,0.2299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction executeEventListeners(listeners, ...parameters) {\r\n  listeners.forEach((listener) => {\r\n    try {\r\n      listener.apply(null, parameters)\r\n    } catch (error) {\r\n      console.error(\"An event listener threw an error\", error)\r\n    }\r\n  })\r\n}","code-length":84,"reference":"Executes the provided event listeners with the provided parameters. Any\nerrors thrown by the executed event listeners will be caught and logged to\nthe console, and then the remaining event listeners will be executed.\n\n","result":"Execute the event listeners.","score":[0.0002,0.0484]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolve(instance, newState, value) {\r\n  if (instance[FIELDS.state] !== STATE.PENDING) {\r\n    return\r\n  }\r\n    instance[FIELDS.state] = newState\r\n  instance[FIELDS.value] = value\r\n    let listeners\r\n  if (newState === STATE.RESOLVED) {\r\n    listeners = instance[FIELDS.fulfillListeners]\r\n  } else {\r\n    listeners = instance[FIELDS.errorListeners]\r\n  }\r\n    for (let listener of listeners) {\r\n    listener()\r\n  }\r\n}","code-length":143,"reference":"Resolves the provided promise to the specified state and result value. This\nfunction has no effect if the provided promise has already been resolved.\n\n","result":"Resolve promises.","score":[0,0.0229]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runQuery(cursorFactory, filter, comparator, offset, limit, callback) {\r\n  let records = []\r\n  let recordIndex = -1\r\n  return cursorFactory((cursor) => {\r\n    if (!filter && offset && ((recordIndex + 1) < offset)) {\r\n      recordIndex = offset - 1\r\n      cursor.advance(offset)\r\n      return\r\n    }\r\n        let primaryKey = cursor.primaryKey\r\n    if (filter && !filter(cursor.record, primaryKey)) {\r\n      cursor.continue()\r\n      return\r\n    }\r\n        if (comparator) {\r\n      insertSorted(records, cursor.record, primaryKey, comparator)\r\n      if (offset || limit) {\r\n        if (records.length > (offset + limit)) {\r\n          records.pop()\r\n        }\r\n      }\r\n            cursor.continue()\r\n      return\r\n    }\r\n        recordIndex++\r\n    if (recordIndex < offset) {\r\n      cursor.continue()\r\n      return\r\n    }\r\n        callback(cursor.record, primaryKey)\r\n        if (!limit || ((recordIndex + 1) < (offset + limit))) {\r\n      cursor.continue()\r\n    }\r\n  }).then(() => {\r\n    if (!comparator) {\r\n      return\r\n    }\r\n        records = records.slice(offset)\r\n    for (let { record, primaryKey } of records) {\r\n      callback(record, primaryKey)\r\n    }\r\n  })\r\n}","code-length":370,"reference":"Executes the specified query using the provided cursor factory.\n\nNote that the callback will be executed on the records only after all\nrecords have been populated if the comparator if a function so the records\nare passed to the callback in the right order.\n\n","result":"Run a query.","score":[0.0,0.0251]}
{"code":"\/*is used to<extra_id_0>\r\nfunction insertSorted(records, record, primaryKey, comparator) {\r\n  let index = findInsertIndex(records, record, comparator)\r\n  records.splice(index, 0, {\r\n    record,\r\n    primaryKey\r\n  })\r\n}","code-length":67,"reference":"Inserts the provided record into the sorted array of records and their\nprimary keys, keeping it sorted.\n\n","result":"Sort records.","score":[0,0.0323]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findInsertIndex(records, record, comparator) {\r\n  if (!records.length) {\r\n    return 0\r\n  }\r\n    if (records.length === 1) {\r\n    let comparison = comparator(records[0].record, record)\r\n    return (comparison > 0) ? 0 : 1\r\n  }\r\n    let comparison = comparator(records[0].record, record)\r\n  if (comparison > 0) {\r\n    return 0\r\n  }\r\n    let bottom = 1\r\n  let top = records.length - 1\r\n    while (bottom <= top) {\r\n    let pivotIndex = Math.floor((bottom + top) \/ 2)\r\n        let comparison = comparator(records[pivotIndex].record, record)\r\n    if (comparison > 0) {\r\n      let previousElement = records[pivotIndex - 1].record\r\n      if (comparator(previousElement, record) <= 0) {\r\n        return pivotIndex\r\n      }\r\n            top = pivotIndex - 1\r\n    } else {\r\n      bottom = pivotIndex + 1\r\n    }\r\n  }\r\n    return records.length\r\n}","code-length":278,"reference":"Uses the binary search algorithm to find the index at which the specified\nrecord should be inserted into the specified array of records to keep the\narray sorted according to the provided comparator.\n\n","result":"Find insert index in records.","score":[0.0009,0.0497]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareQuery(thisStorage, filter, order) {\r\n  order = normalizeKeyPath(order)\r\n    let expectedSortingDirection = order[0].charAt(0) === \"!\"\r\n  let canSortingBeOptimized\r\n  canSortingBeOptimized = canOptimizeSorting(expectedSortingDirection, order)\r\n    let storages = new Map()\r\n  storages.set(normalizeKeyPath(thisStorage.keyPath), {\r\n    storage: thisStorage,\r\n    score: 1\r\n  })\r\n    for (let indexName of thisStorage.indexNames) {\r\n    let index = thisStorage.getIndex(indexName)\r\n    if (!index.multiEntry) {\r\n      storages.set(normalizeKeyPath(index.keyPath), {\r\n        storage: index,\r\n        score: 0\r\n      })\r\n    }\r\n  }\r\n    let simplifiedOrderFieldPaths = simplifyOrderingFieldPaths(order)\r\n    if (canSortingBeOptimized) {\r\n    prepareSortingOptimization(storages, simplifiedOrderFieldPaths)\r\n  }\r\n  prepareFilteringOptimization(storages, filter)\r\n    return chooseStorageForQuery(\r\n    storages,\r\n    order,\r\n    simplifiedOrderFieldPaths,\r\n    canSortingBeOptimized,\r\n    expectedSortingDirection\r\n  )\r\n}","code-length":326,"reference":"Prepares the query that uses the specified filter and record order for\nexecution on this storage.\n\nThe method attempts uses a heuristic to determine whether the query should\nbe run directly on this object store or on one of its indexes for maximum\nperformance.\n\nIf the method cannot optimize sorting and filtering, it prefers optimizing\nsorting to optimizing filtering, as optimizing sorting allows the query\nexecutor to skip the requested amount of records and the records following\nthe last record that fills the required amount of records.\n\nIf the sorting cannot be optimized, the method attempts to optimize\nfiltering so that the matching records can be selected by providing a key\nrange to cursor, so that only the matching records will be traversed.\n\nThe method constructs the filtering predicate and sorting comparator if\nneither the sorting nor filtering can be optimized, and prepares the query\nto be executed directly on the object store.\n\n","result":"Prepare a query.","score":[7.874e-23,0.0072]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareSortingOptimization(storages, simplifiedOrderFieldPaths) {\r\n  let idb = idbProvider()\r\n  for (let [keyPath, storageAndScore] of storages) {\r\n    let keyPathSlice = keyPath.slice(0, simplifiedOrderFieldPaths.length)\r\n    if (idb.cmp(keyPathSlice, simplifiedOrderFieldPaths) === 0) {\r\n      storageAndScore.score += 4\r\n    }\r\n  }\r\n}","code-length":119,"reference":"Calculates the best possible sorting optimization for the provided storages,\nupdating the provided map with sorting optimization scores for each storage.\n\n","result":"Optimize the storage .","score":[0.0046,0.0518]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareFilteringOptimization(storages, filter) {\r\n  if (filter instanceof Function) {\r\n    for (let [keyPath, storageAndScore] of storages) {\r\n      storageAndScore.filter = filter\r\n    }\r\n    return\r\n  }\r\n  for (let [keyPath, storageAndScore] of storages) {\r\n    let normalizedFilter = normalizeFilter(filter, keyPath)\r\n    if (normalizedFilter instanceof Function) {\r\n      let isOptimizableFilter =\r\n          (filter instanceof Object) &&\r\n          !(filter instanceof Date) &&\r\n          !(filter instanceof Array) &&\r\n          !(filter instanceof IDBKeyRange)\r\n      if (isOptimizableFilter) {\r\n        let partialOptimization = partiallyOptimizeFilter(filter, keyPath)\r\n        storageAndScore.keyRange = partialOptimization.keyRange\r\n        storageAndScore.filter = partialOptimization.filter\r\n        if (partialOptimization.score) {\r\n          storageAndScore.score += 1 + partialOptimization.score\r\n        }\r\n      } else {\r\n        storageAndScore.filter = normalizedFilter\r\n      }\r\n    } else {\r\n      storageAndScore.keyRange = normalizedFilter\r\n      storageAndScore.score += 2\r\n    }\r\n  }\r\n}","code-length":317,"reference":"Calculates the best possible filtering optimizations for the provided\nstorages, updating the provided map with optimized filtering info and\noptimization score for each storage.\n\n","result":"Optimize filtering.","score":[0,0.0229]}
{"code":"\/*is used to<extra_id_0>\r\nfunction chooseStorageForQuery(storages, order, simplifiedOrderFieldPaths,\r\n    canSortingBeOptimized, expectedSortingDirection) {\r\n  let sortedStorages = Array.from(storages.values())\r\n  sortedStorages.sort((storage1, storage2) => {\r\n    return storage2.score - storage1.score\r\n  })\r\n  let chosenStorageDetails = sortedStorages[0]\r\n  let chosenStorage = chosenStorageDetails.storage\r\n  let chosenStorageKeyPath = normalizeKeyPath(chosenStorage.keyPath)\r\n  let storageKeyPathSlice = chosenStorageKeyPath.slice(\r\n    0,\r\n    simplifiedOrderFieldPaths.length\r\n  )\r\n  let optimizeSorting = canSortingBeOptimized &&\r\n      (idbProvider().cmp(storageKeyPathSlice, simplifiedOrderFieldPaths) === 0)\r\n  return {\r\n    storage: chosenStorage,\r\n    direction: optimizeSorting ? (\r\n    CursorDirection[expectedSortingDirection ? \"PREVIOUS\" : \"NEXT\"]\r\n    ) : CursorDirection.NEXT,\r\n    comparator: optimizeSorting ? null : compileOrderingFieldPaths(order),\r\n    keyRange: chosenStorageDetails.keyRange,\r\n    filter: chosenStorageDetails.filter\r\n  }\r\n}","code-length":310,"reference":"Selects the storage on which the execute a query that should lead to the\nbest possible performance. The method returns all the data necessary to\nexecute the query.\n\n","result":"Determine the storage for a query.","score":[0.0083,0.0775]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prepareOrderingSpecificationForQuery(order, keyPath) {\r\n  if (order === null) {\r\n    order = CursorDirection.NEXT\r\n  }\r\n    let isCursorDirection = ((typeof order === \"string\") &&\r\n      (CURSOR_DIRECTIONS.indexOf(order.toUpperCase()) > -1)) ||\r\n      (CURSOR_DIRECTIONS.indexOf(order) > -1)\r\n  if (isCursorDirection && (typeof order === \"string\")) {\r\n    order = CursorDirection[order.toUpperCase()] || CursorDirection.PREVIOUS\r\n  }\r\n    if (order instanceof CursorDirection) {\r\n    keyPath = normalizeKeyPath(keyPath)\r\n        if (order === CursorDirection.NEXT) {\r\n      return keyPath\r\n    } else {\r\n      return keyPath.map(fieldPath => `!${fieldPath}`)\r\n    }\r\n  }\r\n    return order\r\n}","code-length":226,"reference":"Preprocess the raw ordering specification into form that can be used in\nquery optimization.\n\n","result":"Prepare ordering specification for query.","score":[0.0562,0.1431]}
{"code":"\/*is used to<extra_id_0>\r\nfunction openConnection(databaseName, sortedSchemaDescriptors) {\r\n  let version = sortedSchemaDescriptors.slice().pop().version\r\n  let request = NativeDBAccessor.indexedDB.open(databaseName, version)\r\n    return new Promise((resolve, reject) => {\r\n    let wasBlocked = false\r\n    let upgradeTriggered = false\r\n        let migrationPromiseResolver, migrationPromiseRejector\r\n    let migrationPromise = new Promise((resolve, reject) => {\r\n      migrationPromiseResolver = resolve\r\n      migrationPromiseRejector = reject\r\n    })\r\n    migrationPromise.catch(() => {})\r\n        request.onsuccess = () => {\r\n      let database = new Database(request.result)\r\n      resolve(database)\r\n      migrationPromiseResolver()\r\n    }\r\n    request.onupgradeneeded = (event) => {\r\n      if (!wasBlocked) {\r\n        upgradeTriggered = true\r\n      }\r\n            let database = request.result\r\n      let transaction = request.transaction\r\n            if (wasBlocked) {\r\n        transaction.abort()\r\n        return\r\n      }\r\n            upgradeDatabaseSchema(databaseName, event, migrationPromise, database,\r\n          transaction, sortedSchemaDescriptors, migrationPromiseResolver,\r\n          migrationPromiseRejector).catch((error) => {\r\n        transaction.abort()\r\n      })\r\n    }\r\n    request.onerror = (event) => {\r\n      handleConnectionError(event, request.error, wasBlocked, upgradeTriggered,\r\n          reject, migrationPromiseRejector)\r\n    }\r\n        request.onblocked = () => {\r\n      wasBlocked = true\r\n            let error = new Error(\"A database upgrade was needed, but could not \" +\r\n          \"be performed, because the attempt was blocked by a connection \" +\r\n          \"that remained opened after receiving the notification\")\r\n      reject(error)\r\n      migrationPromiseRejector(error)\r\n    }\r\n  })\r\n}","code-length":471,"reference":"Handles opening the connection to the database and wraps the whole process\nin a promise.\n\n","result":"Open a connection to a database.","score":[0.0674,0.2238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleConnectionError(event, error, wasBlocked, upgradeTriggered,\r\n    reject, migrationPromiseRejector) {\r\n  if (wasBlocked || upgradeTriggered) {\r\n    event.preventDefault()\r\n    return\r\n  }\r\n    reject(request.error)\r\n  migrationPromiseRejector(request.error)\r\n}","code-length":88,"reference":"Handles a database error encountered during connection establishing.\n\n","result":"Prevent default error handling.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction executeMigrationListeners(databaseName, oldVersion, newVersion,\r\n    completionPromise) {\r\n  for (let listener of migrationListeners) {\r\n    try {\r\n      listener(databaseName, oldVersion, newVersion, completionPromise)\r\n    } catch (e) {\r\n      console.warn(\"A schema migration event listener threw an error\", e);\r\n    }\r\n  }\r\n}","code-length":100,"reference":"Executes the currently registered database schema migration listeners with\nthe provided arguments.\n\n","result":"Execute migration listeners.","score":[0.0203,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitFilteringObject(filter, filterFieldPaths, storageKeyPath) {\r\n  let fieldsToOptimize = {}\r\n  let fieldsToCompile = {}\r\n  filterFieldPaths.forEach((fieldPath) => {\r\n    let value = getFieldValue(filter, fieldPath)\r\n    if (storageKeyPath.indexOf(fieldPath) > -1) {\r\n      setFieldValue(fieldsToOptimize, fieldPath, value)\r\n    } else {\r\n      setFieldValue(fieldsToCompile, fieldPath, value)\r\n    }\r\n  })\r\n  return {\r\n    fieldsToOptimize,\r\n    fieldsToCompile\r\n  }\r\n}","code-length":161,"reference":"Splits the provided filter object to two objects according the the provided\nstorage key path. This is used to separate a complex filter object into an\nobject optimizable into a key range and a simpler object that will be\ncompiled into a filter predicate function.\n\n","result":"Split the filtering object into separate objects.","score":[0.0012,0.0728]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFieldPaths(object, stopOnKeyRange = true) {\r\n  let fieldPaths = []\r\n  fieldPaths.containsKeyRange = false\r\n  generateFieldPaths(object, [])\r\n  return fieldPaths\r\n  function generateFieldPaths(object, parts) {\r\n    Object.keys(object).some((fieldName) => {\r\n      let value = object[fieldName]\r\n      if (stopOnKeyRange && (value instanceof IDBKeyRange)) {\r\n        fieldPaths = null\r\n        return true\r\n      }\r\n      let isTerminalValue =\r\n          !(value instanceof Object) ||\r\n          (value instanceof Date) ||\r\n          (value instanceof Array) ||\r\n          (value instanceof IDBKeyRange)\r\n      let fieldPath = parts.slice()\r\n      fieldPath.push(fieldName)\r\n      if (isTerminalValue) {\r\n        fieldPaths.push(fieldPath.join(\".\"))\r\n      } else {\r\n        generateFieldPaths(value, fieldPath)\r\n      }\r\n    })\r\n  }\r\n}","code-length":259,"reference":"Generates an array containing all field paths in the provided object.\n\nThe method also tests whether any of the leaf field values is an\n{","result":"Generate field paths.","score":[0.0003,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setFieldValue(object, fieldPath, value) {\r\n  let parts = fieldPath.split(\".\")\r\n  let done = []\r\n  let currentObject = object\r\n  while (parts.length) {\r\n    let field = parts.shift()\r\n    if (!parts.length) {\r\n      if (currentObject.hasOwnProperty(field)) {\r\n        throw new Error(`The ${fieldPath} field seems to be already present `)\r\n      }\r\n      currentObject[field] = value\r\n      break\r\n    }\r\n    if (!currentObject.hasOwnProperty(field)) {\r\n      currentObject[field] = {}\r\n    }\r\n    if (!(currentObject[field] instanceof Object)) {\r\n      throw new Error(`The ${fieldPath} field is in a conflict with the ` +\r\n          `${done.join(\".\")} field`)\r\n    }\r\n    currentObject = currentObject[field]\r\n    done.push(field)\r\n  }\r\n}","code-length":239,"reference":"Sets the specified field, denoted by the specified field path, on the\nprovided object to the provided value.\n\nIf the specified field path does not exist in the object, it is\nautomatically created by inserting new empty objects.\n\n","result":"Set the value of an object field.","score":[0.0023,0.043]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFieldValue(object, fieldPath) {\r\n  if (!fieldPath) {\r\n    return object\r\n  }\r\n  let currentObject = object\r\n  fieldPath.split(\".\").forEach((fieldName) => {\r\n    if (!currentObject.hasOwnProperty(fieldName)) {\r\n      throw new Error(`The field path ${fieldPath} does not exist in the ` +\r\n          \"provided object\")\r\n    }\r\n    currentObject = currentObject[fieldName]\r\n  })\r\n  return currentObject\r\n}","code-length":129,"reference":"Retrieves the value from the provided object at the specified field path.\n\n","result":"Get the field value of an object.","score":[0.104,0.1304]}
{"code":"\/*is used to<extra_id_0>\r\nfunction upgradeSchema(nativeDatabase, nativeTransaction, descriptors) {\r\n  let objectStoreNames = Array.from(nativeDatabase.objectStoreNames)\r\n  let newObjectStoreNames = descriptors.map((objectStore) => {\r\n    return objectStore.name\r\n  })\r\n  objectStoreNames.forEach((objectStoreName) => {\r\n    if (newObjectStoreNames.indexOf(objectStoreName) === -1) {\r\n      nativeDatabase.deleteObjectStore(objectStoreName)\r\n    }\r\n  })\r\n  descriptors.forEach((objectStoreDescriptor) => {\r\n    let objectStoreName = objectStoreDescriptor.name\r\n    let nativeObjectStore = objectStoreNames.indexOf(objectStoreName) > -1 ?\r\n        nativeTransaction.objectStore(objectStoreName) : null\r\n    let objectStoreMigrator = new ObjectStoreMigrator(nativeDatabase,\r\n        nativeObjectStore, objectStoreDescriptor)\r\n    objectStoreMigrator.executeMigration()\r\n  })\r\n}","code-length":234,"reference":"Updates the schema of the provided Indexed DB database to the schema\nspecified by the provided schema descriptors.\n\n","result":"Upgrade schema.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction container(width, height, position, elem) {\r\n    return new Element(new ContainerElement(position, elem)\r\n        , width, height)\r\n}","code-length":47,"reference":"Int -> Int -> Position -> Element -> Element","result":"Create a container element.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mainSection(state) {\r\n    var todos = state.todos\r\n    var route = state.route\r\n    return h(\"section.main\", { hidden: todos.length === 0 }, [\r\n        toggleAllPool.change(h(\"input#toggle-all.toggle-all\", {\r\n            type: \"checkbox\",\r\n            checked: todos.every(function (todo) {\r\n                return todo.completed\r\n            })\r\n        })),\r\n        h(\"label\", { htmlFor: \"toggle-all\" }, \"Mark all as complete\"),\r\n        h(\"ul.todo-list\", todos.filter(function (todo) {\r\n            return route === \"completed\" && todo.completed ||\r\n                route === \"active\" && !todo.completed ||\r\n                route === \"all\"\r\n        }).map(todoItem))\r\n    ])\r\n}","code-length":216,"reference":"Various template functions to render subsets of the UI","result":"Render the main section.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Client() {\r\n    EventEmitter.call(this);\r\n    this.debug = true;\r\n    this.socket = dgram.createSocket('udp4');\r\n    this.isSocketBound = false;\r\n    this.devices = {};\r\n    this.port = constants.DREAMSCREEN_PORT;\r\n    this.discoveryTimer = null;\r\n    this.messageHandlers = [];\r\n    this.messageHandlerTimeout = 5000;\r\n    this.broadcastIp = constants.DEFAULT_BROADCAST_IP;\r\n}","code-length":135,"reference":"Creates a dreamscreen client\n","result":"Create a client.","score":[0.2925,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Light(constr) {\r\n    this.client = constr.client;\r\n    this.ipAddress = constr.ipAddress;\r\n    this.serialNumber = constr.serialNumber;\r\n    this.productId = constr.productId;\r\n    this.lastSeen = constr.lastSeen;\r\n    this.isReachable = constr.isReachable;\r\n    this.name = constr.name;\r\n    this.groupName = constr.groupName;\r\n    this.groupNumber = constr.groupNumber;\r\n    this.mode = constr.mode;\r\n    this.brightness = constr.brightness;\r\n    this.ambientColor = constr.ambientColor;\r\n    this.ambientShow = constr.ambientShow;\r\n    this.ambientModeType = constr.ambientModeType;\r\n    this.hdmiInput = constr.hdmiInput;\r\n    this.hdmiInputName1 = constr.hdmiInputName1;\r\n    this.hdmiInputName2 = constr.hdmiInputName2;\r\n    this.hdmiInputName3 = constr.hdmiInputName3;\r\n}","code-length":277,"reference":"A representation of a light bulb\nDreamScreen HD, DreamScreen 4K, SideKick\n\n","result":"Create light objects.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction plainText(content) {\r\n    var textSize = getTextSize(content)\r\n    return new Element(new TextElement(\"left\", content)\r\n        , textSize.width, textSize.height)\r\n}","code-length":60,"reference":"String -> Element","result":"Create plain text elements.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json) {\r\n      var output = '[<ul class=\"array collapsible\">';\r\n      var hasContents = false;\r\n      for ( var prop in json ) {\r\n        hasContents = true;\r\n        output += '<li>';\r\n        output += this.valueToHTML(json[prop]);\r\n        output += '<\/li>';\r\n      }\r\n      output += '<\/ul>]';\r\n      if ( ! hasContents ) {\r\n        output = \"[ ]\";\r\n      }\r\n      return output;\r\n    }","code-length":137,"reference":"Convert an array into an HTML fragment","result":"Convert json to html .","score":[0.1611,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(error, data, uri) {\r\n        var output = '<div id=\"error\">Error parsing JSON: ' +\r\n        error.message+'<\/div>'\r\n        output += '<h1>'+error.stack+':<\/h1>';\r\n        output += '<div id=\"jsonview\">' + this.htmlEncode(data) + '<\/div>';\r\n        return this.toHTML(output, uri + ' - Error');\r\n    }","code-length":112,"reference":"Produce an error document for when parsing fails.","result":"Render error messages.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction write(chunk, encoding, callback) {\r\n    if (typeof encoding === 'function') {\r\n      callback = encoding\r\n      encoding = null\r\n    }\r\n    if (ended) {\r\n      throw new Error('Did not expect `write` after `end`')\r\n    }\r\n    chunks.push((chunk || '').toString(encoding || 'utf8'))\r\n    if (callback) {\r\n      callback()\r\n    }\r\n    return true\r\n  }","code-length":122,"reference":"Write a chunk into memory.","result":"Write to the stream.","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction end() {\r\n    write.apply(null, arguments)\r\n    ended = true\r\n    processor.process(chunks.join(''), done)\r\n    return true\r\n    function done(err, file) {\r\n      var messages = file ? file.messages : []\r\n      var length = messages.length\r\n      var index = -1\r\n      chunks = null\r\n      while (++index < length) {\r\n                if (messages[index] !== err) {\r\n          emitter.emit('warning', messages[index])\r\n        }\r\n      }\r\n      if (err) {\r\n        global.setTimeout(function() {\r\n          emitter.emit('error', err)\r\n        }, 4)\r\n      } else {\r\n        emitter.emit('data', file.contents)\r\n        emitter.emit('end')\r\n      }\r\n    }\r\n  }","code-length":217,"reference":"End the writing.  Passes all arguments to a final `write`.  Starts the process, which will trigger `error`, with a fatal error, if any; `data`, with the generated document in `string` form, if succesful.  If messages are triggered during the process, those are triggerd as `warning`s.","result":"Emit warnings.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction cleanup() {\r\n      emitter.removeListener('data', ondata)\r\n      emitter.removeListener('end', onend)\r\n      emitter.removeListener('error', onerror)\r\n      emitter.removeListener('end', cleanup)\r\n      emitter.removeListener('close', cleanup)\r\n      dest.removeListener('error', onerror)\r\n      dest.removeListener('close', cleanup)\r\n    }","code-length":103,"reference":"Clean listeners.","result":"Clean up.","score":[0.5,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onerror(err) {\r\n      var handlers = emitter._events.error\r\n      cleanup()\r\n      if (!handlers || handlers.length === 0 || handlers === onerror) {\r\n        throw err\r\n      }\r\n    }","code-length":62,"reference":"Close dangling pipes and handle unheard errors.","result":"Detect errors.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clean(root, name) {\r\n  const blacklist = ['.git', 'node_modules'];\r\n  for (const item of blacklist) {\r\n    const pathToItem = path.join(root, item);\r\n    if (fs.pathExistsSync(pathToItem)) {\r\n      fs.removeSync(pathToItem);\r\n      console.log(`${chalk.dim.redBright(item)} has been removed from ${chalk.yellow(name)}`);\r\n    }\r\n  }\r\n}","code-length":132,"reference":"clean out blacklisted content","result":"Clean the project.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ls() {\r\n  const vault = path.join(os.homedir(), '.snap');\r\n  const list = shell.ls(vault);\r\n  if (!list.length) {\r\n    console.log(\"\\nIt seems you don't have anything saved...\");\r\n    console.log(`You can run ${chalk.yellow('snap save')} to save a directory or Git repo for future use!`);\r\n    console.log(`Run ${chalk.yellow('snap save -h')} for more info.\\n`);\r\n    return;\r\n  }\r\n  console.log('\\nThe following boilerplates have been saved...');\r\n  console.log(`Run ${chalk.yellow('snap <boilerplate-name> <project-directory>')} to get started with your new project!`);\r\n  for (const bplate of list) {\r\n    console.log(`  \u25cb ${bplate}`);\r\n  }\r\n  console.log();\r\n}","code-length":244,"reference":"snap ls list saved boilerplates","result":"List boilerplates.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sessionData(req, res, session, cb){\r\n    const now = new Date();\r\n    if(session.continued)\r\n        return cb(null, req, res, session);\r\n    async.parallelLimit([\r\n            getIp,\r\n            getLocation,\r\n            getSystem\r\n        ], 2,\r\n        function(err){\r\n            cb(err, this.req, this.res, this.session);\r\n            if(opts.log_all)\r\n                log.timer('sessionData', now);\r\n        }.bind({\r\n            req: req,\r\n            res: res,\r\n            session: session\r\n        })\r\n    );\r\n    function getIp(cb){\r\n        session.ip = get_ip(req).clientIp;\r\n        cb(null)\r\n    }\r\n    function getLocation(cb){\r\n        if(!geo_lookup)\r\n            return cb(null);\r\n        const loc = geo_lookup.get(session.ip);\r\n        if(!session.geo)\r\n            session.geo = {};\r\n        if(loc){\r\n            try {\r\n                if(loc.city)\r\n                    session.geo.city = loc.city.names.en;\r\n                if(loc.subdivisions)\r\n                    session.geo.state = loc.subdivisions[0].iso_code;\r\n                if(loc.country)\r\n                    session.geo.country = loc.country.iso_code;\r\n                if(loc.continent)\r\n                    session.geo.continent = loc.continent.code;\r\n                if(loc.location)\r\n                    session.geo.time_zone = loc.location.time_zone;\r\n            }\r\n            catch(e){\r\n                log.error('geoIP error:', e);\r\n            }\r\n        }\r\n        cb(null)\r\n    }\r\n    function getSystem(cb){\r\n        var agent = useragent.parse(req.headers['user-agent']);\r\n        var os = agent.os;\r\n        if(!session.system)\r\n            session.system = {};\r\n        if(!session.system.browser)\r\n            session.system.browser = {};\r\n        if(!session.system.os)\r\n            session.system.os = {};\r\n        session.system.browser.name = agent.family;\r\n        session.system.browser.version = agent.major + '.' + agent.minor + '.' + agent.patch;\r\n        session.system.os.name = os.family;\r\n        session.system.os.version = os.major + '.' + os.minor + '.' + os.patch;\r\n        cb(null)\r\n    }\r\n}","code-length":662,"reference":"append session data","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction newRequest(req, res, session, cb){\r\n    const now = new Date();\r\n    const request = {\r\n        _id: `r${crypto.randomBytes(16).toString('hex')}${Date.now()}`,\r\n        host: req.hostname,\r\n        url: req.url,\r\n        method: req.method,\r\n        referrer: req.get('Referrer') || req.get('Referer')\r\n    };\r\n    for(let field in req.query){\r\n        if(field === 'ref')\r\n            request.ref = req.query[field];\r\n        else {\r\n            if(!request.query)\r\n                request.query = [];\r\n            request.query.push({\r\n                field: field,\r\n                value: req.query[field]\r\n            })\r\n        }\r\n    }\r\n    res.cookie('na_req', AES.encrypt(request._id), {\r\n        maxAge:     1000 * 60 * 15,\r\n        httpOnly:   true,\r\n        secure:     opts.secure\r\n    });\r\n    cb(null, req, res, session, request);\r\n    if(opts.log_all)\r\n        log.timer('newRequest', now);\r\n}","code-length":309,"reference":"return new request document, create req cookie","result":"Create a new request.","score":[0.1509,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(packet) {\r\n\tthis.updatePayload = function(packet) {\r\n\t\tthis.p_previous = this.p;\r\n\t\tthis.p = packet.payload;\r\n\t\tthis.changed = this.p_previous != this.p;\r\n\t\tthis.retained = packet.retain;\r\n\t\tthis.lastChange = this.currentChange;\r\n\t\tthis.currentChange = new Date();\r\n\t};\r\n\tthis.changedFromTo = function(from, to) {\r\n\t\treturn this.changed && this.p_previous == from && this.p == to;\r\n\t};\r\n\tthis.changedTo = function(to) {\r\n\t\treturn this.changed && this.p == to;\r\n\t};\r\n\tthis.changedFrom = function(from) {\r\n\t\treturn this.changed && this.p_previous == from;\r\n\t};\r\n\tthis.t = packet.topic;\r\n\tthis.updatePayload(packet);\r\n\tthis.currentChange = new Date();\r\n\tthis.lastChange = undefined;\r\n\t\r\n\tthis.payload = this.p;\r\n\tthis.topic = this.t;\r\n}","code-length":294,"reference":"Constructor for the message class","result":"Create a new packet object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(){\r\n    this.date = new Date();\r\n    this.getHours = function() {\r\n        return this.date.getHours();\r\n    };\r\n    this.getMinutes = function() {\r\n        return this.date.getMinutes();\r\n    };\r\n    this.hoursIsBetween = function(a, b) {\r\n\t\t\tif(a <= b) return this.date.getHours() >= a && this.date.getHours() <=b;\r\n\t\t\telse return this.date.getHours() >= a || this.date.getHours() <= b;\r\n    };\r\n    this.step = function(){\r\n        this.date = new Date();\r\n        this.isMorning = this.hoursIsBetween(6, 11);\r\n        this.isNoon = this.hoursIsBetween(12, 14);\r\n        this.isAfternoon = this.hoursIsBetween(15, 17);\r\n        this.isEvening = this.hoursIsBetween(18, 23);\r\n        this.isNight = this.hoursIsBetween(0,5);\r\n        return this;\r\n    };\r\n}","code-length":286,"reference":"Constructor for the clock class","result":"Create a new Date object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(req, cb) {\r\n    req = request.normalizeRequest(req);\r\n    var page;\r\n    try {\r\n      page = this.createPageForRequest(req);\r\n    } catch(err) {\r\n      if (cb)\r\n        return cb(err)\r\n      else\r\n        throw err;\r\n    }\r\n    var needData = typeof page.fetchData === 'function' && !this.state.request.data;\r\n    if (request.isEqual(this.state.request, req) && !needData)\r\n      return;\r\n    fetchDataForRequest(this, page, req, function(err, req) {\r\n      if (err) {\r\n        if (cb)\r\n          return cb(err)\r\n        else\r\n          throw err;\r\n      }\r\n      this.setState({request: req, page: page});\r\n    }.bind(this));\r\n  }","code-length":230,"reference":"Override request process so it first fetches the data needed for a pagetransition.","result":"Create a new page.","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction create (format, options) {\r\n  const ogrFormat = ogrFormats[format]\r\n  const output = format === 'zip' ? `${options.path || '.'}\/${options.name}` : '\/vsistdout\/'\r\n  const input = options.input || 'layer.vrt'\r\n  let cmd = ['--config', 'SHAPE_ENCODING', 'UTF-8', '-f', ogrFormat, output, input]\r\n  options.geometry = options.geometry && options.geometry.toUpperCase() || 'NONE'\r\n  if (format === 'csv') cmd = csvParams(cmd, options)\r\n  if (format === 'zip') cmd = shapefileParams(cmd, options)\r\n  if (format === 'georss') cmd = georssParams(cmd, options)\r\n  return finishOgrParams(cmd)\r\n}","code-length":209,"reference":"Gets a set of OGR Parameters for an export\n\n","result":"Create a layer .","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction csvParams (cmd, options) {\r\n  cmd.push('-lco', 'WRITE_BOM=YES')\r\n  const hasPointGeom = options.geometry === 'POINT'\r\n  const fields = options.fields.join('|').toLowerCase().split('|')\r\n  const hasXY = fields.indexOf('x') > -1 && fields.indexOf('y') > -1\r\n  if (hasPointGeom && !hasXY) cmd = cmd.concat(['-lco', 'GEOMETRY=AS_XY'])\r\n  return cmd\r\n}","code-length":141,"reference":"Add parameters specific to a csv export\n\n","result":"Generate the CSV params.","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shapefileParams (cmd, options) {\r\n  if (options.geometry !== 'NONE') cmd.push('-nlt', options.geometry.toUpperCase())\r\n  cmd.push('-fieldmap', 'identity')\r\n  if (!options.ignoreShpLimit) cmd.push('-lco', '2GB_LIMIT=yes')\r\n  if (options.srs) cmd.push('-t_srs', options.srs)\r\n  return cmd\r\n}","code-length":121,"reference":"Add parameters specific to a shapefile export\n\n","result":"Create a shapefile.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction watcherFn(schemaFilepath, watchInterval, reinitBabelRelayPlugin, prevMtime) {\r\n  try {\r\n    let stats;\r\n    try {\r\n      stats = fs.statSync(schemaFilepath);\r\n    } catch (e) {\r\n    }\r\n    if (stats) {\r\n      if (!prevMtime) prevMtime = stats.mtime;\r\n      if (stats.mtime.getTime() !== prevMtime.getTime()) {\r\n        prevMtime = stats.mtime;\r\n        reinitBabelRelayPlugin();\r\n      }\r\n    }\r\n    setTimeout(\r\n      () => {\r\n        watcherFn(schemaFilepath, watchInterval, reinitBabelRelayPlugin, prevMtime);\r\n      },\r\n      watchInterval\r\n    ).unref();\r\n  } catch (e) {\r\n    log(e);\r\n  }\r\n}","code-length":225,"reference":"file changes watcher","result":"Watch the schema file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction AkamaiPurge(username, password, objects, options) {\r\n  var auth = {},\r\n    requestBody = {},\r\n    requestOptions;\r\n  if (options === undefined || !lodash.isPlainObject(options)) {\r\n    options = {};\r\n  }\r\n  auth.username = username;\r\n  auth.password = password;\r\n  if (-1 !== constants.VALID_TYPES.indexOf(options.type)) {\r\n    requestBody.type = options.type;\r\n  } else if (options.hasOwnProperty('type')) {\r\n    warn('Invalid purge request type. Valid types: [' + constants.VALID_TYPES.join(', ') + ']. Given: ' + options.type);\r\n  }\r\n  if (-1 !== constants.VALID_DOMAINS.indexOf(options.domain)) {\r\n    requestBody.domain = options.domain;\r\n  } else if (options.hasOwnProperty('domain')) {\r\n    warn('Invalid purge request domain. Valid domains: [' + constants.VALID_DOMAINS.join(', ') + ']. Given: ' + options.domain);\r\n  }\r\n  if (-1 !== constants.VALID_ACTIONS.indexOf(options.action)) {\r\n    requestBody.action = options.action;\r\n  } else if (options.hasOwnProperty('action')) {\r\n    warn('Invalid purge request action. Valid actions: [' + constants.VALID_ACTIONS.join(', ') + ']. Given: ' + options.action);\r\n  }\r\n  requestBody.objects = objects;\r\n  requestOptions = {\r\n    uri: constants.AKAMAI_API_QUEUE,\r\n    method: 'POST',\r\n    json: requestBody,\r\n    auth: auth\r\n  };\r\n  applyModifiers(AkamaiPurge);\r\n  return AkamaiRequest(requestOptions).then(function (response) {\r\n    response.requestBody = requestBody;\r\n    response.status = function () {\r\n      if (!response.hasOwnProperty('progressUri')) {\r\n        return when.reject(new Error('Missing progressUri from response'));\r\n      }\r\n      return AkamaiStatus(username, password, response.progressUri);\r\n    };\r\n    return response;\r\n  });\r\n}","code-length":535,"reference":"Cornerstone function that sends a purge request to Akamai's CCU REST API It will return a promise. `options` is optional.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n        options = lodash.assign(options, modifier);\r\n        var AkamaiPurgeChain = function AkamaiPurgeChain (username, password, objects) {\r\n          return AkamaiPurge(username, password, objects, options);\r\n        };\r\n        applyModifiers(AkamaiPurgeChain, options);\r\n        AkamaiPurgeChain.options = options;\r\n        return AkamaiPurgeChain;\r\n      }","code-length":118,"reference":"Returns a new function pre-configured with the options that exist up to this point","result":"Create a new instance of the class.","score":[0.093,0.1921]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Mock(mount, options) {\r\n    this.mount = mount;\r\n    this.options = options || {};\r\n    this.options.params = this.options.params === undefined ? true : this.options.params;\r\n    this.locator = new Locator(mount);\r\n    debug('mount at %s', this.mount);\r\n}","code-length":92,"reference":"Initialize a `Mock` instance.\n\n","result":"Mock the mock.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction forEach (object, block, context) {\r\n\tif (object) {\r\n\t\tlet resolve = Object;\r\n\t\tif (object instanceof Function) {\r\n\t\t\t\r\n\t\t\tresolve = Function;\r\n\t\t} else if (object.forEach instanceof Function) {\r\n\t\t\t\r\n\t\t\tobject.forEach(block, context);\r\n\t\t\treturn;\r\n\t\t} else if (typeof object === \"string\") {\r\n\t\t\t\r\n\t\t\tresolve = String;\r\n\t\t} else if (typeof object.length === \"number\") {\r\n\t\t\t\r\n\t\t\tresolve = Array;\r\n\t\t}\r\n\t\tresolve.forEach(object, block, context);\r\n\t}\r\n}","code-length":177,"reference":"globally resolve forEach enumeration","result":"Iterate over an object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(target, source) {\r\n    var skeys = _.keys(source);\r\n    _.each(skeys, function(skey) {\r\n      if (!target[skey]) {\r\n        target[skey] = source[skey];\r\n      }\r\n    });\r\n    return target;\r\n  }","code-length":86,"reference":"merge in any properties to target that are excelusively only in source","result":"Merge objects.","score":[0,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createObject(proto, args) {\r\n    var instance = Object.create(proto);\r\n    if (instance.$meta.constructors) {\r\n        instance.$meta.constructors.forEach(function(constructor) {\r\n            constructor.apply(instance, args);\r\n        });\r\n    }\r\n    return instance;\r\n}","code-length":88,"reference":"Create an object for the prototype\n","result":"Create object.","score":[0.0677,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeProperty(destination, source, property) {\r\n    if (source[property] instanceof Array) {\r\n        mergeAsArray(destination, source, property);\r\n    }\r\n    else if (isPrimitive(source[property]) || !isLiteral(source[property])) {\r\n        overrideIfNotExists(destination, source, property);\r\n    }\r\n    else {\r\n        mergeAsObject(destination, source, property);\r\n    }\r\n}","code-length":113,"reference":"Merge a single property\n\nArrays are concatenated, primitives taken from the source if not\ndefined and complex object merged recursively\n\n","result":"Merge properties.","score":[0.0001,0.0275]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeAsArray(destination, source, property) {\r\n    destination[property] = source[property].concat(destination[property] || []);\r\n}","code-length":44,"reference":"Merges arrays by concatenating them\n\n","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeAsObject(destination, source, property) {\r\n    destination[property] = destination[property] || {};\r\n    merge(destination[property], source[property]);\r\n}","code-length":52,"reference":"Merges object recursively using merge function\n\n","result":"Merge arrays as objects.","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mixin(instance, mixins) {\r\n    mixins.forEach(function(Mixin) {\r\n        mix(instance, Mixin);\r\n    });\r\n    return instance;\r\n}","code-length":53,"reference":"Mixes all mixins into the instance\n","result":"Create a new instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mkdirp(dir, made) {\r\n  var mode = 0777 & (~process.umask());\r\n  if (!made) made = null;\r\n  dir = path.resolve(dir);\r\n  try {\r\n    fs.mkdirSync(dir, mode);\r\n    made = made || dir;\r\n  } catch (err0) {\r\n    switch (err0.code) {\r\n      case 'ENOENT':\r\n        made = mkdirp(path.dirname(dir), made);\r\n        mkdirp(dir, made);\r\n        break;\r\n      default:\r\n        var stat;\r\n        try {\r\n          stat = fs.statSync(dir);\r\n        } catch (err1) {\r\n          throw err0;\r\n        }\r\n        if (!stat.isDirectory()) throw err0;\r\n        break;\r\n    }\r\n  }\r\n  return made;\r\n}","code-length":228,"reference":"Copyright 2010 James Halliday (mail","result":"Create a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(identifier, target, cb) {\r\n    var systemId = _sr.findSystem(identifier);\r\n    if (!systemId) { logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID)); }\r\n    fetchTarget(systemId, target, function(err, target) {\r\n      if (err) { return cb(err); }\r\n      logger.info({ systemId: systemId, target: target }, 'get deployed system');\r\n      _sr.getDeployedRevision(systemId, target, cb);\r\n    });\r\n  }","code-length":141,"reference":"get the full deployed system definition","result":"Get the deployed system.","score":[0.2304,0.4406]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, name, namespace, cwd, cb) {\r\n    logger.info('create system name: ' + name + ', namespace: ' + namespace + ', cwd: ' + cwd);\r\n    _sr.createSystem(user, namespace, name, cwd, cb);\r\n  }","code-length":74,"reference":"create a new  blank system","result":"Create a system.","score":[0.2096,0.3906]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, path, cwd, cb) {\r\n    logger.info('link system: ' + path + ', ' + cwd);\r\n    _sr.linkSystem(user, path, cwd, cb);\r\n  }","code-length":60,"reference":"link a system from local fs","result":"Create a new link system.","score":[0.2339,0.1695]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(identifier, revisionId, out, cb) {\r\n    logger.info('list containers: ' + identifier);\r\n    var systemId = _sr.findSystem(identifier);\r\n    var containers = {};\r\n    if (!systemId) { return cb(new Error(ERR_NOSYSID)); }\r\n    _builder.loadTargets(systemId, revisionId, function(err, targets) {\r\n      if (err) { return cb(err); }\r\n      _.each(targets, function(target) {\r\n        _.each(target.containerDefinitions, function(cdef) {\r\n          containers[cdef.id] = cdef;\r\n        });\r\n      });\r\n      cb(null, _.values(containers));\r\n    });\r\n  }","code-length":187,"reference":"list all of the available containers in a system","result":"List containers.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, identifier, containerIdentifier, revision, target, out, cb) {\r\n    var containerDef;\r\n    var systemId;\r\n    systemId = _sr.findSystem(identifier);\r\n    if (!systemId) {\r\n      logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID));\r\n    }\r\n    var systemRoot = _sr.repoPath(systemId);\r\n    out.initProgress(9, '--> finding container');\r\n    fetchTarget(systemId, target, revision, function(err, target) {\r\n      if (err) { return cb(err); }\r\n        _builder.loadMatchingTargets(systemId, revision, target, function(err, targets) {\r\n          if (err) { return cb(err); }\r\n          _builder.findContainer(systemId, revision, targets, containerIdentifier, function(err, containerDefId, targets) {\r\n            if (err) { out.stdout(err); logger.error(err); return cb(err); }\r\n            if (!containerDefId) { out.stdout(ERR_NOCDEF); logger.error(ERR_NOCDEF); return cb(ERR_NOCDEF); }\r\n            async.eachSeries(_.values(targets), function(json, cb) {\r\n              var root = buildSys(json);\r\n              containerDef = root.containerDefByDefId(containerDefId);\r\n              json.repoPath = systemRoot;\r\n              if (!containerDef.specific || !containerDef.specific.repositoryUrl) {\r\n                return _builder.build(user, systemId, targets, json, containerDef, target, out, cb);\r\n              }\r\n              _synchrotron.synch(json, containerDef, out, function(err) {\r\n                if (err) { out.stdout(err); logger.error(err); return cb(err); }\r\n                _builder.build(user, systemId, targets, json, containerDef, target, out, cb);\r\n              });\r\n            }, cb);\r\n        });\r\n      });\r\n    });\r\n  }","code-length":502,"reference":"build a container","result":"Build a container.","score":[0.4082,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, systemName, revision, target, out, cb) {\r\n    var systemId = _sr.findSystem(systemName);\r\n    if (!systemId) {\r\n      logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID));\r\n    }\r\n    logger.info({ systemId: systemId, revision: revision }, 'building all containers');\r\n    fetchTarget(systemId, target, revision, function(err, target) {\r\n      if (err) { return cb(err); }\r\n      _builder.loadMatchingTargets(systemId, revision, target, function(err, targets) {\r\n        if (err) { return cb(err); }\r\n        out.stdout('--> building all containers for ' + targets[Object.keys(targets)[0]].name + ' revision ' + revision + ' target ' + target);\r\n        var containers = _.chain(targets)\r\n          .filter(function(value, key) {\r\n            return target === 'alltargets' || key === target;\r\n          })\r\n          .map(function(target) {\r\n            return _.map(target.containerDefinitions, function(cdef) {\r\n              return {\r\n                id: cdef.id,\r\n                target: target.topology.name,\r\n                type: cdef.type\r\n              };\r\n            });\r\n          })\r\n          .flatten()\r\n          .reduce(function(acc, cont) {\r\n            var notPresent = !_.find(acc, function(found) {\r\n              return found.id === cont.id && found.type === cont.type;\r\n            });\r\n            if (notPresent) {\r\n              acc.push(cont);\r\n            }\r\n            return acc;\r\n          }, [])\r\n          .value();\r\n        async.eachSeries(containers, function (cont, next) {\r\n          buildContainer(user, systemId, cont.id, revision, cont.target, out, function(err) {\r\n            if (err) { out.stderr(err); }\r\n            next(err);\r\n          });\r\n        }, cb);\r\n      });\r\n    });\r\n  }","code-length":522,"reference":"build all containers belonging to a system, in series","result":"Code too long,keep in 512.","score":[0.108,0.0581]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, target, revision, cb) {\r\n    if (target === 'alltargets') {\r\n      cb(null, target);\r\n    }\r\n    else {\r\n      _sr.getDeployedRevisionId(systemId, target, function(err, deployedRevId) {\r\n        if (typeof revision === 'function') {\r\n          cb = revision;\r\n          if (!err) {\r\n            revision = deployedRevId;\r\n          }\r\n          else {\r\n            revision = 'latest';\r\n          }\r\n        }\r\n        _builder.loadTargets(systemId, revision, function(err, targets) {\r\n          if (err) { return cb(err); }\r\n          var candidates = Object.keys(targets).filter(function(candidate) {\r\n          return candidate.indexOf(target) >= 0;\r\n          });\r\n          if (candidates.length === 0 || candidates.length > 1) {\r\n            logger.error(ERR_NOTARGET);\r\n            return cb(new Error(ERR_NOTARGET));\r\n          } else {\r\n            target = candidates[0];\r\n          }\r\n          cb(null, target);\r\n        });\r\n      });\r\n    }\r\n  }","code-length":296,"reference":"Supports target abbreviation","result":"Load targets.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, identifier, revisionIdentifier, target, mode, out, cb) {\r\n    var systemId = _sr.findSystem(identifier);\r\n    if (!systemId) { logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID)); }\r\n    fetchTarget(systemId, target, revisionIdentifier, function(err, target) {\r\n      if (err) { return cb(err); }\r\n      _sr.findRevision(systemId, revisionIdentifier, function(err, revisionId) {\r\n        if (err) { out.stdout(ERR_NOREV); logger.error(ERR_NOREV); return cb(ERR_NOREV); }\r\n        logger.info({\r\n          systemId: systemId,\r\n          revisionId: revisionId,\r\n          environment: target\r\n        }, 'deploy revision');\r\n        if (!mode) { mode = 'live'; }\r\n        if (!revisionId) {\r\n          return cb(new Error('revisionId is needed to deploy'));\r\n        }\r\n        return createAnalyzeAndDeployTask(user, systemId, revisionId, target, mode, out, cb);\r\n      });\r\n    });\r\n  }","code-length":284,"reference":"deploy the specified revision to the nominated targethandle if file is missing","result":"Create a task to deploy a revision.","score":[0.094,0.087]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, identifier, revisionIdentifier, target, out, cb) {\r\n    logger.info('preview revision: ' + identifier + ', ' + revisionIdentifier + ' ' + target);\r\n    deployRevision(user, identifier, revisionIdentifier, target, 'preview', out, function(err) {\r\n      cb(err, {plan: out.getPlan(), ops: out.operations()});\r\n    });\r\n  }","code-length":105,"reference":"preview a system deploy","result":"Create a new revision.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(identifier, cb) {\r\n    logger.info('list revisions: ' + identifier);\r\n    if (!identifier) {\r\n      return cb(new Error('no identifier'));\r\n    }\r\n    var systemId = _sr.findSystem(identifier);\r\n    if (!systemId) {\r\n      return cb(new Error('system not found'));\r\n    }\r\n    _sr.listRevisions(systemId, function(err, revisions) {\r\n      cb(err, _.first(revisions, 20));\r\n    });\r\n  }","code-length":137,"reference":"get the revision history for a system","result":"List revisions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(identifier, revisionIdentifier, target, cb) {\r\n    logger.info('get revision: ' + identifier + ', ' + revisionIdentifier);\r\n    var systemId = _sr.findSystem(identifier);\r\n    if (!systemId) { logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID)); }\r\n    fetchTarget(systemId, target, revisionIdentifier, function(err, target) {\r\n      if (err) { return cb(err); }\r\n      _sr.findRevision(systemId, revisionIdentifier, function(err, revisionId) {\r\n        if (err) { return cb(err); }\r\n        _sr.getRevision(systemId, revisionId, target, cb);\r\n      });\r\n    });\r\n  }","code-length":190,"reference":"get a specific revision","result":"Get the revision of a system.","score":[0.2296,0.3571]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, identifier, comment, out, cb) {\r\n    logger.info('compile system: ' + identifier);\r\n    var systemId = _sr.findSystem(identifier);\r\n    var system;\r\n    if (!systemId) { logger.error(ERR_NOSYSID); return cb(new Error(ERR_NOSYSID)); }\r\n    var repoPath = _sr.repoPath(systemId);\r\n    _compiler.compile(systemId, repoPath, out, function(err, systems) {\r\n      if (err) { return cb(err); }\r\n      async.eachSeries(_.keys(systems), function(key, next) {\r\n          system = systems[key];\r\n          _sr.writeFile(system.id, key + '.json', JSON.stringify(system, null, 2), next);\r\n        },\r\n        function(err) {\r\n          cb(err);\r\n        });\r\n    });\r\n  }","code-length":232,"reference":"compile the system into the various targets and commit them to the repository","result":"Compile a system.","score":[0,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, identifier, comment, out, cb) {\r\n    logger.info('commit system: ' + identifier);\r\n    var systemId = _sr.findSystem(identifier);\r\n    _sr.commitRevision(user, systemId, comment, function(err, revisionId) {\r\n      _sr.getDeployedTargets(systemId, function(err, targets) {\r\n        if (targets) {\r\n          async.eachSeries(targets, function(target, next) {\r\n            if (target.commit === 'edits') {\r\n              _sr.markDeployedRevision(user, systemId, revisionId, target.env, function() {\r\n                next();\r\n              });\r\n            }\r\n            else {\r\n              next();\r\n            }\r\n          }, function() { \r\n            cb(err, revisionId); \r\n          });\r\n        }\r\n        else {\r\n          cb(err, revisionId);\r\n        }\r\n      });\r\n    });\r\n  }","code-length":239,"reference":"commit the system","result":"Commit a system.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction finalizeBuild(sourceReport){\r\n        if(errorCount > 0) {\r\n          grunt.fail.warn(\"Coffeeification failed.\");\r\n        } else {\r\n          done(\"Coffeified \" + sourceReport.count + \": \" + sourceReport.locations);\r\n        }\r\n      }","code-length":81,"reference":"Finalize the task.","result":"Build the source files.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction injectCode() {\r\n\t\tvar fullpath = path.join(rootpath, \"app.js\");\r\n\t\tvar source = fs.readFileSync(fullpath, 'utf8');\r\n\t\tvar test = \/\\\/\\\/ALLOY-RESOLVER\/.test(source);\r\n\t\tlogger.trace(\"CODE INJECTED ALREADY: \" + test);\r\n\t\tif(!test) {\r\n\t\t\tsource = source.replace(\/(var\\s+Alloy[^;]+;)\/g, \"$1\\n\r\n\t\t\tfs.writeFileSync(fullpath, source);\r\n\t\t}\r\n\t}","code-length":155,"reference":"Inject necessary code into the file app.js","result":"Inject code.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fixFiles() {\r\n\t\tlogger.trace(\"inside fixFiles()\");\r\n\t\t_.each(registry.files, function(file) {\r\n\t\t\tvar fullpath = path.join(rootpath, file);\r\n\t\t\tvar basepath = path.posix.dirname(file);\r\n\t\t\tvar basefile = path.posix.resolve(file);\r\n\t\t\tvar source = fs.readFileSync(fullpath, 'utf8');\r\n\t\t\tlogger.trace(\"fixing file: \" + fullpath);\r\n\t\t\tvar requireRegex = \/(require)\\s*\\(((?:[^)(]+|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)\/g;\r\n\t\t\tvar staticRequireRegex = \/(require)(?:\\(\\s*['\"])([^'\"]+)(?:['\"]\\s*\\))\/g;\r\n\t\t\tsource = source.replace(requireRegex, function($1, $2, $3) {\r\n\t\t\t\tvar requestedModule = $2;\r\n\t\t\t\tif(staticRequireRegex.test($1)) {\r\n\t\t\t\t\tvar staticRequireSource = $1;\r\n\t\t\t\t\tstaticRequireSource = staticRequireSource.replace(staticRequireRegex, function($1, $2, $3) {\r\n\t\t\t\t\t\tvar resolved_path = resolver.resolve($3, basepath);\r\n\t\t\t\t\t\treturn 'require(\"' + resolved_path + '\")';\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn staticRequireSource;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 'require(Alloy.resolve(' + $3 + ', \"' + basepath + '\"))';\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tfs.writeFileSync(fullpath, source, { mode: 0o755 });\r\n\t\t});\r\n\t}","code-length":408,"reference":"Fix module resolution in all found javascript files","result":"Inside fixFiles.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findFiles(rootpath, patterns) {\r\n\t\tlogger.trace(\"inside findFiles()\");\r\n\t\tvar patterns = patterns || ['**'];\r\n\t\tif(_.isString(patterns)) {\r\n\t\t\tpatterns = [patterns];\r\n\t\t}\r\n\t\tvar files = _.map(wrench.readdirSyncRecursive(rootpath), function(filename) {\r\n\t\t\treturn path.posix.sep + replaceBackSlashes(filename);\r\n\t\t});\r\n\t\tvar matchedFiles = match(files, patterns, {\r\n\t\t\tnocase: true,\r\n\t\t\tmatchBase: true,\r\n\t\t\tdot: true,\r\n\t\t});\r\n\t\treturn _.filter(matchedFiles, function(file) {\r\n\t\t\treturn !fs.statSync(path.join(rootpath, file)).isDirectory();\r\n\t\t}) || [];\r\n\t}","code-length":219,"reference":"Find all files that match extension criteria\n\n","result":"Find files in a directory.","score":[0.1915,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadFiles() {\r\n\t\tlogger.trace(\"inside loadFiles()\");\r\n\t\tvar allfiles = findFiles(rootpath, includes);\r\n\t\tvar filepaths = _.filter(allfiles, function(filepath) {\r\n\t\t\treturn !\/.+(package\\.json)\/.test(filepath);\r\n\t\t});\r\n\t\t_.forEach(filepaths, function(filepath) {\r\n\t\t\tregistry.files.push(filepath);\r\n\t\t});\r\n\t\tvar packagepaths = _.filter(allfiles, function(filepath) {\r\n\t\t\treturn(\/.+(package\\.json)\/.test(filepath));\r\n\t\t});\r\n\t\t_.forEach(packagepaths, function(filepath) {\r\n\t\t\tvar content = fs.readFileSync(path.posix.join(rootpath, filepath), 'utf8');\r\n\t\t\tvar json = JSON.parse(content);\r\n\t\t\tif(json.main) {\r\n\t\t\t\tregistry.directories.push({\r\n\t\t\t\t\tid: path.posix.dirname(filepath),\r\n\t\t\t\t\tpath: path.posix.resolve(path.posix.join(path.posix.dirname(filepath), json.main))\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\tvar indexpaths = _.filter(allfiles, function(filepath) {\r\n\t\t\treturn(\/.+(index\\.js)\/.test(filepath));\r\n\t\t});\r\n\t\t_.forEach(indexpaths, function(filepath) {\r\n\t\t\tvar existingdir = _.find(registry.directories, function(dir) {\r\n\t\t\t\treturn dir.id === path.posix.dirname(filepath);\r\n\t\t\t});\r\n\t\t\tif(!existingdir) {\r\n\t\t\t\tregistry.directories.push({\r\n\t\t\t\t\tid: path.posix.dirname(filepath),\r\n\t\t\t\t\tpath: filepath\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn registry;\r\n\t}","code-length":463,"reference":"Find and process all files","result":"\tvar registry .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeRegistry() {\r\n\t\tlogger.trace(\"inside writeRegistry()\");\r\n\t\tvar filepath = path.join(rootpath, \"resolver.js\");\r\n\t\tvar content = fs.readFileSync(filepath, 'utf8');\r\n\t\tvar regex = \/(var\\s+registry\\s+=\\s+)[^;]*(;)\/g;\r\n\t\tvar modified = content.replace(regex, \"$1\" + JSON.stringify(registry) + \"$2\");\r\n\t\tfs.writeFileSync(filepath, modified);\r\n\t}","code-length":138,"reference":"Write registry file to resolver.js","result":"Write the registry.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction build(mode, system, cdef, out, cb) {\r\n    _containers.getHandler(system, cdef.type, function(err, container) {\r\n      if (err) { return cb(err); }\r\n      if (!container) {\r\n        err = new Error('no matching container available for type: ' + cdef.type);\r\n        logger.error(err.message);\r\n        return cb(err);\r\n      }\r\n      if (container.build) {\r\n        out.progress('--> executing container specific build for ' +  cdef.id);\r\n        logger.info({ containerDefinition: cdef.id }, 'executing container specific build');\r\n        container.build(mode, system, cdef, out, function(err, specific) {\r\n          if (err) { logger.error(err); out.stdout(err); return cb(err); }\r\n          out.progress('--> ' + cdef.id + ' built');\r\n          logger.info({ containerDefinition: cdef.id }, 'built');\r\n          cb(err);\r\n        });\r\n      } else {\r\n        out.progress('--> no need to build ' + cdef.id);\r\n        cb(null, {});\r\n      }\r\n    });\r\n  }","code-length":312,"reference":"Build the container and update all instantiations of the containerwith the new speicific block and replace identifiers for new uuids","result":"Build a container .","score":[0.007,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findContainer(systemId, revision, targets, containerIdentifier, cb) {\r\n    var cdefId;\r\n    var types = [];\r\n    async.filter(_.keys(targets), function(key, next) {\r\n      _sr.findContainer(systemId, revision, containerIdentifier, key, function(err, containerDefId, cdef) {\r\n        var def;\r\n        if (!err && containerDefId) {\r\n          cdefId = containerDefId;\r\n          def = _.find(targets[key].containerDefinitions, function(def) {\r\n            return def.id === cdefId;\r\n          });\r\n          if (types.indexOf(def.type) < 0) {\r\n            types.push(def.type);\r\n            return next(true);\r\n          }\r\n        }\r\n        next(false);\r\n      });\r\n    },\r\n    function(keys) {\r\n      var result = keys.reduce(function(acc, key) {\r\n        acc[key] = targets[key];\r\n        return acc;\r\n      }, {});\r\n      cb(null, cdefId, result);\r\n    });\r\n  }","code-length":286,"reference":"find the container in the supplied target files, return the container with the highest buildHead number","result":"Find the container definition .","score":[0.0377,0.1007]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setAppConsts() {\r\n  var mergedConstants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _seamlessImmutable2.default)(appConsts);\r\n  if (typeof self === 'undefined' && typeof global !== 'undefined') {\r\n    global.appConsts = global.appConsts ? _seamlessImmutable2.default.merge(global.appConsts, mergedConstants) : mergedConstants;\r\n    return global.appConsts;\r\n  } else if (typeof self !== 'undefined') {\r\n    self.appConsts = self.appConsts ? _seamlessImmutable2.default.merge(self.appConsts, mergedConstants) : mergedConstants;\r\n    return self.appConsts;\r\n  }\r\n  return {};\r\n}","code-length":191,"reference":"Set global variables on worker & main threads, else node\n","result":"Set appConsts in the browser.","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(cb) {\r\n    fse.readFile(systemsJsonPath, 'utf8', function(err, data) {\r\n      if (err) {\r\n        if (err.code !== 'ENOENT') { return cb(err); }\r\n        fse.mkdirpSync(sysRepoPath);\r\n        fse.writeFileSync(systemsJsonPath, JSON.stringify(blank, null, 2), 'utf8');\r\n        return git.createRepository(sysRepoPath, 'system', 'system@nfd.com', function(err_) {\r\n          _systems = blank;\r\n          cb(err_);\r\n        });\r\n      }\r\n      _systems = JSON.parse(data);\r\n      cb();\r\n    });\r\n  }","code-length":192,"reference":"ensures that the system repository is in place, creates it if doesn't exist","result":"Create a new repository.","score":[0,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, namespace, name, repoName, repoPath, systemId, cb) {\r\n    if (!_systems[systemId]) {\r\n      _systems[systemId] = { name: name, namespace: namespace, repoName: repoName, repoPath: repoPath };\r\n      fse.writeFileSync(systemsJsonPath, JSON.stringify(_systems, null, 2), 'utf8');\r\n      git.commit(sysRepoPath, 'registered system: ' + repoPath, user.name, user.email, cb);\r\n    }\r\n    else {\r\n      cb(null);\r\n    }\r\n  }","code-length":158,"reference":"register a system","result":"Register a system.","score":[0.4082,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, systemId, cb) {\r\n    if (!_systems[systemId]) { return cb(); }\r\n    var newSystems = _.clone(_systems);\r\n    delete newSystems[systemId];\r\n    fse.writeFileSync(systemsJsonPath, JSON.stringify(newSystems, null, 2), 'utf8');\r\n    _systems = newSystems;\r\n    git.commit(sysRepoPath, 'unregistered system: ' + systemId, user.name, user.email, cb);\r\n  }","code-length":132,"reference":"unregister a system","result":"Unregister a system.","score":[0.4082,0.625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var domWrapper;\r\n        this._children = [];\r\n        this._createRootHtml();\r\n                domWrapper = utils.html.parseHTML(this.html);\r\n        if (domWrapper.childNodes.length > 1) {\r\n            throw new Error(\"Component should have only one root element\");\r\n        }\r\n        this.root = domWrapper.firstChild;\r\n        this.processInstance();\r\n    }","code-length":114,"reference":"Init the object, construct and process DOM","result":"Create a component.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var i, elements, element, value;\r\n        if (this._root) {\r\n            (this.$meta.domProcessors || []).forEach(function(processor) {\r\n                elements =  this._root.querySelectorAll(\"[\" + processor.attribute + \"]\");\r\n                for (i = 0; i < elements.length; i++) {\r\n                    element = elements[i];\r\n                    value = element.getAttribute(processor.attribute);\r\n                    processor.process(this, element, value);\r\n                }\r\n            }, this);\r\n        }\r\n    }","code-length":149,"reference":"Process DOM using defined DOM processors","result":"Create a new instance of the class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(child) {\r\n        this._validateChild(child);\r\n        if (child.parent) {\r\n            child.parent.remove(child);\r\n        }\r\n        child.parent = this;\r\n        this._children.push(child);\r\n        this.root.appendChild(child.root);\r\n        if (this.__fastinject__) {\r\n            this.__fastinject__(child);\r\n        }\r\n    }","code-length":114,"reference":"Add a child component\n","result":"Inject child into the DOM.","score":[0.2403,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(child) {\r\n        var index = this._children.indexOf(child);\r\n        if (index !== -1) {\r\n            this._children.splice(index, 1);\r\n            child.root.parentNode.removeChild(child.root);\r\n            child.destroy();\r\n        }\r\n    }","code-length":84,"reference":"Remove child component\n","result":"Remove a child.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(child, element, root) {\r\n        this._children.push(child);\r\n        (root || this.root).insertBefore(child.root, element);\r\n        (root || this.root).removeChild(element);\r\n    }","code-length":67,"reference":"Attaches a component by replacing the provided element. Element must be an element inside the parent component.\n","result":"Create a new child node.","score":[0.0218,0.0316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(repoPath, doc, done) {\r\n    generify(path.join(__dirname, 'template'), repoPath, {\r\n      name: doc.name,\r\n      namespace: doc.namespace,\r\n      id: doc.id\r\n    }, done);\r\n  }","code-length":75,"reference":"ensures that system has all required files","result":"Generate the template.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(repoPath) {\r\n    var sys;\r\n    if (fse.existsSync(path.join(repoPath, 'system.js'))) {\r\n      sys = require(repoPath + '\/system.js');\r\n      delete require.cache[repoPath + '\/system.js'];\r\n    }\r\n    if (!sys) {\r\n      return new Error('missing system.js, is this an nscale repository?');\r\n    }\r\n    if (!sys.name) {\r\n      return new Error('missing name in system.js, correct and try again');\r\n    }\r\n    if (!sys.namespace) {\r\n      return new Error('missing namespace in system.js, correct and try again');\r\n    }\r\n    if (!sys.id) {\r\n      return new Error('missing id in system.js, correct and try again');\r\n    }\r\n  }","code-length":217,"reference":"system.json and system.js","result":"Create a repository.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, namespace, name, cwd, cb) {\r\n    var repoName = name;\r\n    var doc = _.extend({}, blank);\r\n    var repoPath = path.join(cwd, repoName);\r\n    doc.name = name;\r\n    doc.namespace = namespace;\r\n    doc.id = uuid.v4();\r\n    if (!fse.existsSync(repoPath)) {\r\n      fse.mkdirpSync(repoPath);\r\n      initNscaleFiles(repoPath, doc, function() {\r\n        git.createRepository(repoPath, user.name, user.email, function(err) {\r\n          if (err) { return cb(err); }\r\n          _meta.register(user, namespace, name, repoName, cwd + '\/' + repoName, doc.id, function(err) {\r\n            writeTimeline(user, doc.id, 'create', 'system created', function() {\r\n              cb(err, {id: doc.id, err: err});\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n    else {\r\n      cb(null, { id: _meta.repoId(repoName), err: null});\r\n    }\r\n  }","code-length":300,"reference":"create a new system repository","result":"Register a new repository.","score":[0.3519,0.3827]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, path_, cwd, cb) {\r\n    var repoPath = path.resolve(cwd, path_);\r\n    var sys;\r\n    var validationError = validateSystem(repoPath);\r\n    if (validationError) { return cb(validationError); }\r\n    sys = require(repoPath + '\/system.js');\r\n    delete require.cache[repoPath + '\/system.js'];\r\n    _meta.register(user, sys.namespace, sys.name, path.basename(repoPath), repoPath, sys.id, function(err) {\r\n      writeTimeline(user, sys.id, 'link', 'system linked', function() {\r\n        cb(err, {id: sys.id, err: err});\r\n      });\r\n    });\r\n  }","code-length":193,"reference":"create a new system by linking from local file system","result":"Register a system.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user, systemId, cb) {\r\n    writeTimeline(user, systemId, 'system unlinked', function() {\r\n      _meta.unregister(user, systemId, function(err) {\r\n        cb(err);\r\n      });\r\n    });\r\n  }","code-length":73,"reference":"unlink system from the daemon","result":"Unregister a system.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, fileName, contents, cb) {\r\n    var repoPath = _meta.repoPath(systemId);\r\n    fse.writeFile(path.join(repoPath, fileName), contents, 'utf8', cb);\r\n  }","code-length":67,"reference":"commit a new version of the system, the head of the commit logmay be ahead of the actual deployed version of the system","result":"Write a file.","score":[0.0005,0.0238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, target, cb) {\r\n    listRevisions(systemId, function(err, revs) {\r\n      if (err) { return cb(err); }\r\n      getRevision(systemId, revs[0].id, target, cb);\r\n    });\r\n  }","code-length":77,"reference":"get the head revision for a system","result":"Fetch a system.","score":[0.1076,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, revisionId, target, cb) {\r\n    var repoPath = _meta.repoPath(systemId);\r\n    git.getFileRevision(repoPath, revisionId, target + '.json', function(err, rev) {\r\n      if (err) { return cb(err); }\r\n      var s;\r\n      try {\r\n        s = JSON.parse(rev);\r\n      }\r\n      catch (e) {\r\n        return cb(new Error('invalid system definition: ' + e.message), null);\r\n      }\r\n      cb(err, s);\r\n    });\r\n  }","code-length":154,"reference":"get a revision from the history, with a specific version number","result":"Create a new system definition.","score":[0.0724,0.0481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, revisionId, target, cb) {\r\n    if (revisionId === EDITS) {\r\n      _getOnDiskVersion(systemId, revisionId, target, cb);\r\n    }\r\n    else {\r\n      findRevision(systemId, revisionId, function(err, rev) {\r\n        if (err) { return cb(err); }\r\n        if (rev === EDITS) {\r\n          _getOnDiskVersion(systemId, revisionId, target, cb);\r\n        }\r\n        else {\r\n          _getRevision(systemId, rev, target, cb);\r\n        }\r\n      });\r\n    }\r\n  }","code-length":164,"reference":"get a revision from the history, with abbreviation support","result":"Get the version of a revision.","score":[0.1392,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, env, cb) {\r\n    var repoPath = _meta.repoPath(systemId);\r\n    var tagName = baseTag + env;\r\n    var editsTagName = editsTag + env;\r\n    ngit.Repository.open(repoPath, function(err, repo) {\r\n      if (err) { return cb(err); }\r\n      ngit.Reference.nameToId(repo, tagName, function(err, head) {\r\n        if (err && (!err.message || err.message.indexOf('not found') === -1)) { return cb(err); }\r\n        if (head) {\r\n          cb(null, head.toString());\r\n        }\r\n        else {\r\n          ngit.Reference.nameToId(repo, editsTagName, function(err) {\r\n            if (err) { return cb(err); }\r\n            cb(null, EDITS);\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }","code-length":241,"reference":"get the currently deployed revision","result":"Determine the head of a repository.","score":[0.193,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, cb) {\r\n    var repoPath = _meta.repoPath(systemId);\r\n    getDeployedTargets(systemId, function(err, targets) {\r\n      if (err) { return cb(err); }\r\n      git.listRevisions(repoPath, function(err, revisions) {\r\n        revisions.forEach(function(revision) {\r\n          var deployedTo = _.find(targets, function(target) { return target.commit === revision.id; });\r\n          if (deployedTo) {\r\n            revision.deployedTo = deployedTo.env;\r\n          }\r\n        });\r\n        cb(err, revisions);\r\n      });\r\n    });\r\n  }","code-length":175,"reference":"list all of the available revisions in the system","result":"Create a new system.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(systemId, identifier, cb) {\r\n    var re = new RegExp('^' + identifier + '.*', ['i']);\r\n    var revision;\r\n    if (identifier !== 'head' && identifier !== 'latest') {\r\n      listRevisions(systemId, function(err, revisions) {\r\n        revision = _.find(revisions, function(revision) { return re.test(revision.id); });\r\n        if (revision) {\r\n          cb(err, revision.id);\r\n        }\r\n        else {\r\n          cb(new Error('revision not found'));\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      getHeadRevisionId(systemId, cb);\r\n    }\r\n  }","code-length":183,"reference":"find revision id by parital or full identifier","result":"Generate the revision ids.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (environment, baseConfig) {\r\n    if ('emoji' in baseConfig) {\r\n      if (!baseConfig.emoji) {\r\n        _emojiConfig = false;\r\n      } else {\r\n        Object.keys(_defaultEmojiConfig).forEach(function (key) {\r\n          _emojiConfig[key] = baseConfig.emoji.hasOwnProperty(key) ? baseConfig.emoji[key] : _defaultEmojiConfig[key];\r\n        });\r\n      }\r\n    } else {\r\n      _emojiConfig = _defaultEmojiConfig;\r\n    }\r\n    if (environment === 'development') {\r\n      return {\r\n        emoji: _emojiConfig,\r\n        contentSecurityPolicy: {\r\n          'script-src': \"'self' 'unsafe-eval' 'unsafe-inline'\"\r\n        }\r\n      };\r\n    }\r\n    return {\r\n      emoji: _emojiConfig\r\n    };\r\n  }","code-length":233,"reference":"Allows custom configuration from `environment`","result":"Create a new application.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(analyzed) {\r\n    var containers = analyzed.topology.containers;\r\n    var targets = [];\r\n    _.each(containers, function(c) {\r\n      if (c.containerDefinitionId.indexOf('__proxy') === 0) {\r\n        var cdef = _.find(analyzed.containerDefinitions, function(cdef) { return cdef.id === c.containerDefinitionId; });\r\n        targets.push({containerDef: cdef, container: c});\r\n      }\r\n    });\r\n    return targets;\r\n  }","code-length":136,"reference":"Determine the target containers - machine containers that have a proxy on them.","result":"Generate the proxy targets .","score":[0.0577,0.123]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( model, relation, options ) {\r\n\t\t\tvar type = !_.isString( relation.type ) ? relation.type : Backbone[ relation.type ] || this.getObjectByName( relation.type );\r\n\t\t\tif ( type && type.prototype instanceof Backbone.Relation ) {\r\n\t\t\t\tnew type( model, relation, options );\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tBackbone.Relational.showWarnings && typeof console !== 'undefined' && console.warn( 'Relation=%o; missing or invalid relation type!', relation );\r\n\t\t\t}\r\n\t\t}","code-length":146,"reference":"Create a new `Relation`.\n","result":"Instantiate a relation.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( modelType ) {\r\n\t\t\t_.find( this._subModels, function( subModelDef ) {\r\n\t\t\t\treturn _.find( subModelDef.subModels || [], function( subModelTypeName, typeValue ) {\r\n\t\t\t\t\tvar subModelType = this.getObjectByName( subModelTypeName );\r\n\t\t\t\t\tif ( modelType === subModelType ) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsubModelDef.superModelType._subModels[ typeValue ] = modelType;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmodelType._superModel = subModelDef.superModelType;\r\n\t\t\t\t\t\tmodelType._subModelTypeValue = typeValue;\r\n\t\t\t\t\t\tmodelType._subModelTypeAttribute = subModelDef.superModelType.prototype.subModelTypeAttribute;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this );\r\n\t\t\t}, this );\r\n\t\t}","code-length":215,"reference":"Check if the given modelType is registered as another model's subModel. If so, add it to the super model's\n'_subModels', and set the modelType's '_superModel', '_subModelTypeName', and '_subModelTypeAttribute'.\n\n","result":"Create a new model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( relation ) {\r\n\t\t\tvar exists = _.any( this._reverseRelations, function( rel ) {\r\n\t\t\t\treturn _.all( relation || [], function( val, key ) {\r\n\t\t\t\t\treturn val === rel[ key ];\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tif ( !exists && relation.model && relation.type ) {\r\n\t\t\t\tthis._reverseRelations.push( relation );\r\n\t\t\t\tthis._addRelation( relation.model, relation );\r\n\t\t\t\tthis.retroFitRelation( relation );\r\n\t\t\t}\r\n\t\t}","code-length":144,"reference":"Add a reverse relation. Is added to the 'relations' property on model's prototype, and to\nexisting instances of 'model' in the store as well.\n","result":"Create a reverse relation.","score":[0.0044,0.1338]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( relation ) {\r\n\t\t\tvar exists = _.any( this._orphanRelations, function( rel ) {\r\n\t\t\t\treturn _.all( relation || [], function( val, key ) {\r\n\t\t\t\t\treturn val === rel[ key ];\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tif ( !exists && relation.model && relation.type ) {\r\n\t\t\t\tthis._orphanRelations.push( relation );\r\n\t\t\t}\r\n\t\t}","code-length":118,"reference":"Deposit a `relation` for which the `relatedModel` can't be resolved at the moment.\n\n","result":"Create the relation .","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\r\n\t\t\t_.each( this._orphanRelations.slice( 0 ), function( rel ) {\r\n\t\t\t\tvar relatedModel = Backbone.Relational.store.getObjectByName( rel.relatedModel );\r\n\t\t\t\tif ( relatedModel ) {\r\n\t\t\t\t\tthis.initializeRelation( null, rel );\r\n\t\t\t\t\tthis._orphanRelations = _.without( this._orphanRelations, rel );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\t\t}","code-length":123,"reference":"Try to initialize any `_orphanRelation`s","result":"Initialize the relation.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( relation ) {\r\n\t\t\tvar coll = this.getCollection( relation.model, false );\r\n\t\t\tcoll && coll.each( function( model ) {\r\n\t\t\t\tif ( !( model instanceof relation.model ) ) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tnew relation.type( model, relation );\r\n\t\t\t}, this );\r\n\t\t}","code-length":99,"reference":"Add a 'relation' to all existing instances of 'relation.model' in the store\n","result":"Create a new relation.","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( type, create ) {\r\n\t\t\tif ( type instanceof Backbone.RelationalModel ) {\r\n\t\t\t\ttype = type.constructor;\r\n\t\t\t}\r\n\t\t\tvar rootModel = type;\r\n\t\t\twhile ( rootModel._superModel ) {\r\n\t\t\t\trootModel = rootModel._superModel;\r\n\t\t\t}\r\n\t\t\tvar coll = _.find( this._collections, function(item) {\r\n\t\t\t  return item.model === rootModel;\r\n\t\t\t});\r\n\t\t\tif ( !coll && create !== false ) {\r\n\t\t\t\tcoll = this._createCollection( rootModel );\r\n\t\t\t}\r\n\t\t\treturn coll;\r\n\t\t}","code-length":168,"reference":"Find the Store's collection for a certain type of model.\n","result":"Create a new collection.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( name ) {\r\n\t\t\tvar parts = name.split( '.' ),\r\n\t\t\t\ttype = null;\r\n\t\t\t_.find( this._modelScopes, function( scope ) {\r\n\t\t\t\ttype = _.reduce( parts || [], function( memo, val ) {\r\n\t\t\t\t\treturn memo ? memo[ val ] : undefined;\r\n\t\t\t\t}, scope );\r\n\t\t\t\tif ( type && type !== scope ) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\t\t\treturn type;\r\n\t\t}","code-length":138,"reference":"Find a model type on one of the modelScopes by name. Names are split on dots.\n","result":"Resolve a type name.","score":[0.0209,0.1014]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( type, item ) {\r\n\t\t\tvar id = _.isString( item ) || _.isNumber( item ) ? item : null;\r\n\t\t\tif ( id === null ) {\r\n\t\t\t\tif ( item instanceof Backbone.RelationalModel ) {\r\n\t\t\t\t\tid = item.id;\r\n\t\t\t\t}\r\n\t\t\t\telse if ( _.isObject( item ) ) {\r\n\t\t\t\t\tid = item[ type.prototype.idAttribute ];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( !id && id !== 0 ) {\r\n\t\t\t\tid = null;\r\n\t\t\t}\r\n\t\t\treturn id;\r\n\t\t}","code-length":165,"reference":"Find the attribute that is to be used as the `id` on a given object\n","result":"Create a new model.","score":[0.0204,0.036]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( type, item ) {\r\n\t\t\tvar id = this.resolveIdForItem( type, item );\r\n\t\t\tvar coll = this.getCollection( type );\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif ( coll ) {\r\n\t\t\t\tvar obj = coll.get( id );\r\n\t\t\t\tif ( obj instanceof type ) {\r\n\t\t\t\t\treturn obj;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}","code-length":116,"reference":"Find a specific model of a certain `type` in the store\n","result":"Resolve an item in a collection.","score":[0.0998,0.0952]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( model ) {\r\n\t\t\tvar coll = this.getCollection( model );\r\n\t\t\tif ( coll ) {\r\n\t\t\t\tvar modelColl = model.collection;\r\n\t\t\t\tcoll.add( model );\r\n\t\t\t\tthis.listenTo( model, 'destroy', this.unregister, this );\r\n\t\t\t\tthis.listenTo( model, 'relational:unregister', this.unregister, this );\r\n\t\t\t\tmodel.collection = modelColl;\r\n\t\t\t}\r\n\t\t}","code-length":126,"reference":"Add a 'model' to its appropriate collection. Retain the original contents of 'model.collection'.\n","result":"Register a model.","score":[0.0146,0.0417]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( model, id ) {\r\n\t\t\tvar coll = this.getCollection( model ),\r\n\t\t\t\tduplicate = coll && coll.get( id );\r\n\t\t\tif ( duplicate && model !== duplicate ) {\r\n\t\t\t\tif ( Backbone.Relational.showWarnings && typeof console !== 'undefined' ) {\r\n\t\t\t\t\tconsole.warn( 'Duplicate id! Old RelationalModel=%o, new RelationalModel=%o', duplicate, model );\r\n\t\t\t\t}\r\n\t\t\t\tthrow new Error( \"Cannot instantiate more than one Backbone.RelationalModel with the same id per type!\" );\r\n\t\t\t}\r\n\t\t}","code-length":150,"reference":"Check if the given model may use the given `id`\n","result":"Detect duplicates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( model, collection, options ) {\r\n\t\t\tthis.stopListening( model );\r\n\t\t\tvar coll = this.getCollection( model );\r\n\t\t\tcoll && coll.remove( model, options );\r\n\t\t}","code-length":62,"reference":"Remove a 'model' from the store.\n","result":"Remove a model.","score":[0.2124,0.3289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\tvar i = this.instance,\r\n\t\t\t\tk = this.key,\r\n\t\t\t\tm = this.model,\r\n\t\t\t\trm = this.relatedModel,\r\n\t\t\t\twarn = Backbone.Relational.showWarnings && typeof console !== 'undefined';\r\n\t\t\tif ( !m || !k || !rm ) {\r\n\t\t\t\twarn && console.warn( 'Relation=%o: missing model, key or relatedModel (%o, %o, %o).', this, m, k, rm );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( !( m.prototype instanceof Backbone.RelationalModel ) ) {\r\n\t\t\t\twarn && console.warn( 'Relation=%o: model does not inherit from Backbone.RelationalModel (%o).', this, i );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( !( rm.prototype instanceof Backbone.RelationalModel ) ) {\r\n\t\t\t\twarn && console.warn( 'Relation=%o: relatedModel does not inherit from Backbone.RelationalModel (%o).', this, rm );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( this instanceof Backbone.HasMany && this.reverseRelation.type === Backbone.HasMany ) {\r\n\t\t\t\twarn && console.warn( 'Relation=%o: relation is a HasMany, and the reverseRelation is HasMany as well.', this );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( i && _.keys( i._relations ).length ) {\r\n\t\t\t\tvar existing = _.find( i._relations, function( rel ) {\r\n\t\t\t\t\treturn rel.key === k;\r\n\t\t\t\t}, this );\r\n\t\t\t\tif ( existing ) {\r\n\t\t\t\t\twarn && console.warn( 'Cannot create relation=%o on %o for model=%o: already taken by relation=%o.',\r\n\t\t\t\t\t\tthis, k, i, existing );\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}","code-length":497,"reference":"Check several pre-conditions.\n","result":"Create a relation .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\tthis.stopListening();\r\n\t\t\tif ( this instanceof Backbone.HasOne ) {\r\n\t\t\t\tthis.setRelated( null );\r\n\t\t\t}\r\n\t\t\telse if ( this instanceof Backbone.HasMany ) {\r\n\t\t\t\tthis.setRelated( this._prepareCollection() );\r\n\t\t\t}\r\n\t\t\t_.each( this.getReverseRelations(), function( relation ) {\r\n\t\t\t\trelation.removeRelated( this.instance );\r\n\t\t\t}, this );\r\n\t\t}","code-length":131,"reference":"Get reverse relation, call removeRelated on each.","result":"Remove the related objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( keyContents ) {\r\n\t\t\tthis.keyContents = keyContents;\r\n\t\t\tthis.keyId = Backbone.Relational.store.resolveIdForItem( this.relatedModel, this.keyContents );\r\n\t\t}","code-length":63,"reference":"Normalize and reduce `keyContents` to an `id`, for easier comparison\n","result":"Create a new relation.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( model, coll, options ) {\r\n\t\t\tif ( ( this.keyId || this.keyId === 0 ) && model.id === this.keyId ) {\r\n\t\t\t\tthis.addRelated( model, options );\r\n\t\t\t\tthis.keyId = null;\r\n\t\t\t}\r\n\t\t}","code-length":82,"reference":"If a new 'this.relatedModel' appears in the 'store', try to match it to the last set 'keyContents'","result":"Create a new collection.","score":[0.0175,0.1194]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( collection ) {\r\n\t\t\tif ( this.related ) {\r\n\t\t\t\tthis.stopListening( this.related );\r\n\t\t\t}\r\n\t\t\tif ( !collection || !( collection instanceof Backbone.Collection ) ) {\r\n\t\t\t\tvar options = _.isFunction( this.options.collectionOptions ) ?\r\n\t\t\t\t\tthis.options.collectionOptions( this.instance ) : this.options.collectionOptions;\r\n\t\t\t\tcollection = new this.collectionType( null, options );\r\n\t\t\t}\r\n\t\t\tcollection.model = this.relatedModel;\r\n\t\t\tif ( this.options.collectionKey ) {\r\n\t\t\t\tvar key = this.options.collectionKey === true ? this.options.reverseRelation.key : this.options.collectionKey;\r\n\t\t\t\tif ( collection[ key ] && collection[ key ] !== this.instance ) {\r\n\t\t\t\t\tif ( Backbone.Relational.showWarnings && typeof console !== 'undefined' ) {\r\n\t\t\t\t\t\tconsole.warn( 'Relation=%o; collectionKey=%s already exists on collection=%o', this, key, this.options.collectionKey );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( key ) {\r\n\t\t\t\t\tcollection[ key ] = this.instance;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.listenTo( collection, 'relational:add', this.handleAddition )\r\n\t\t\t\t.listenTo( collection, 'relational:remove', this.handleRemoval )\r\n\t\t\t\t.listenTo( collection, 'relational:reset', this.handleReset );\r\n\t\t\treturn collection;\r\n\t\t}","code-length":382,"reference":"Bind events and setup collectionKeys for a collection that is to be used as the backing store for a HasMany.\nIf no 'collection' is supplied, a new collection will be created of the specified 'collectionType' option.\n","result":"Create a collection for the related model.","score":[0.0043,0.0755]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( keyContents ) {\r\n\t\t\tthis.keyContents = keyContents instanceof Backbone.Collection ? keyContents : null;\r\n\t\t\tthis.keyIds = [];\r\n\t\t\tif ( !this.keyContents && ( keyContents || keyContents === 0 ) ) {\r\n\t\t\t\t\r\n\t\t\t\tthis.keyContents = _.isArray( keyContents ) ? keyContents : [ keyContents ];\r\n\t\t\t\t_.each( this.keyContents, function( item ) {\r\n\t\t\t\t\tvar itemId = Backbone.Relational.store.resolveIdForItem( this.relatedModel, item );\r\n\t\t\t\t\tif ( itemId || itemId === 0 ) {\r\n\t\t\t\t\t\tthis.keyIds.push( itemId );\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this );\r\n\t\t\t}\r\n\t\t}","code-length":190,"reference":"Normalize and reduce `keyContents` to a list of `ids`, for easier comparison\n","result":"Create a new relation.","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( key, options, refresh ) {\r\n\t\t\t\r\n\t\t\toptions = _.extend( { update: true, remove: false }, options );\r\n\t\t\tvar setUrl,\r\n\t\t\t\trequests = [],\r\n\t\t\t\trel = this.getRelation( key ),\r\n\t\t\t\tidsToFetch = rel && ( ( rel.keyIds && rel.keyIds.slice( 0 ) ) || ( ( rel.keyId || rel.keyId === 0 ) ? [ rel.keyId ] : [] ) );\r\n\t\t\t\r\n\t\t\tif ( refresh ) {\r\n\t\t\t\tvar models = rel.related instanceof Backbone.Collection ? rel.related.models : [ rel.related ];\r\n\t\t\t\t_.each( models, function( model ) {\r\n\t\t\t\t\tif ( model.id || model.id === 0 ) {\r\n\t\t\t\t\t\tidsToFetch.push( model.id );\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif ( idsToFetch && idsToFetch.length ) {\r\n\t\t\t\t\r\n\t\t\t\tvar created = [],\r\n\t\t\t\t\tmodels = _.map( idsToFetch, function( id ) {\r\n\t\t\t\t\t\tvar model = Backbone.Relational.store.find( rel.relatedModel, id );\r\n\t\t\t\t\t\tif ( !model ) {\r\n\t\t\t\t\t\t\tvar attrs = {};\r\n\t\t\t\t\t\t\tattrs[ rel.relatedModel.prototype.idAttribute ] = id;\r\n\t\t\t\t\t\t\tmodel = rel.relatedModel.findOrCreate( attrs, options );\r\n\t\t\t\t\t\t\tcreated.push( model );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn model;\r\n\t\t\t\t\t}, this );\r\n\t\t\t\t\r\n\t\t\t\tif ( rel.related instanceof Backbone.Collection && _.isFunction( rel.related.url ) ) {\r\n\t\t\t\t\tsetUrl = rel.related.url( models );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif ( setUrl && setUrl !== rel.related.url() ) {\r\n\t\t\t\t\tvar opts = _.defaults(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\terror: function() {\r\n\t\t\t\t\t\t\t\tvar args = arguments;\r\n\t\t\t\t\t\t\t\t_.each( created, function( model ) {\r\n\t\t\t\t\t\t\t\t\tmodel.trigger( 'destroy', model, model.collection, options );\r\n\t\t\t\t\t\t\t\t\toptions.error && options.error.apply( model, args );\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\turl: setUrl\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\toptions\r\n\t\t\t\t\t);\r\n\t\t\t\t\trequests = [ rel.related.fetch( opts ) ];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trequests = _.map( models, function( model ) {\r\n\t\t\t\t\t\tvar opts = _.defaults(\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\terror: function() {\r\n\t\t\t\t\t\t\t\t\tif ( _.contains( created, model ) ) {\r\n\t\t\t\t\t\t\t\t\t\tmodel.trigger( 'destroy', model, model.collection, options );\r\n\t\t\t\t\t\t\t\t\t\toptions.error && options.error.apply( model, arguments );\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\toptions\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\treturn model.fetch( opts );\r\n\t\t\t\t\t}, this );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requests;\r\n\t\t}","code-length":777,"reference":"Retrieve related objects.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( options ) {\r\n\t\t\t\r\n\t\t\tif ( this.isLocked() ) {\r\n\t\t\t\treturn this.id;\r\n\t\t\t}\r\n\t\t\tthis.acquire();\r\n\t\t\tvar json = Backbone.Model.prototype.toJSON.call( this, options );\r\n\t\t\tif ( this.constructor._superModel && !( this.constructor._subModelTypeAttribute in json ) ) {\r\n\t\t\t\tjson[ this.constructor._subModelTypeAttribute ] = this.constructor._subModelTypeValue;\r\n\t\t\t}\r\n\t\t\t_.each( this._relations, function( rel ) {\r\n\t\t\t\tvar related = json[ rel.key ],\r\n\t\t\t\t\tincludeInJSON = rel.options.includeInJSON,\r\n\t\t\t\t\tvalue = null;\r\n\t\t\t\tif ( includeInJSON === true ) {\r\n\t\t\t\t\tif ( related && _.isFunction( related.toJSON ) ) {\r\n\t\t\t\t\t\tvalue = related.toJSON( options );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( _.isString( includeInJSON ) ) {\r\n\t\t\t\t\tif ( related instanceof Backbone.Collection ) {\r\n\t\t\t\t\t\tvalue = related.pluck( includeInJSON );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( related instanceof Backbone.Model ) {\r\n\t\t\t\t\t\tvalue = related.get( includeInJSON );\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif ( includeInJSON === rel.relatedModel.prototype.idAttribute ) {\r\n\t\t\t\t\t\tif ( rel instanceof Backbone.HasMany ) {\r\n\t\t\t\t\t\t\tvalue = value.concat( rel.keyIds );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if  ( rel instanceof Backbone.HasOne ) {\r\n\t\t\t\t\t\t\tvalue = value || rel.keyId;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse if ( _.isArray( includeInJSON ) ) {\r\n\t\t\t\t\tif ( related instanceof Backbone.Collection ) {\r\n\t\t\t\t\t\tvalue = [];\r\n\t\t\t\t\t\trelated.each( function( model ) {\r\n\t\t\t\t\t\t\tvar curJson = {};\r\n\t\t\t\t\t\t\t_.each( includeInJSON, function( key ) {\r\n\t\t\t\t\t\t\t\tcurJson[ key ] = model.get( key );\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tvalue.push( curJson );\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ( related instanceof Backbone.Model ) {\r\n\t\t\t\t\t\tvalue = {};\r\n\t\t\t\t\t\t_.each( includeInJSON, function( key ) {\r\n\t\t\t\t\t\t\tvalue[ key ] = related.get( key );\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdelete json[ rel.key ];\r\n\t\t\t\t}\r\n\t\t\t\tif ( includeInJSON ) {\r\n\t\t\t\t\tjson[ rel.keyDestination ] = value;\r\n\t\t\t\t}\r\n\t\t\t\tif ( rel.keyDestination !== rel.key ) {\r\n\t\t\t\t\tdelete json[ rel.key ];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.release();\r\n\t\t\treturn json;\r\n\t\t}","code-length":740,"reference":"Convert relations to JSON, omits them when required","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( attributes, options ) {\r\n\t\t\toptions || ( options = {} );\r\n\t\t\toptions.create = false;\r\n\t\t\treturn this.findOrCreate( attributes, options );\r\n\t\t}","code-length":56,"reference":"Find an instance of `this` type in 'Backbone.Relational.store'.\n- If `attributes` is a string or a number, `find` will just query the `store` and return a model if found.\n- If `attributes` is an object and is found in the store, the model will be updated with `attributes` unless `options.update` is `false`.\n","result":"Create a new model.","score":[0.0,0.0106]}
{"code":"\/*is used to<extra_id_0>\r\nfunction XtallatX(superClass) {\r\n    return class extends superClass {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._evCount = {};\r\n        }\r\n        static get observedAttributes() {\r\n            return [disabled];\r\n        }\r\n                get disabled() {\r\n            return this._disabled;\r\n        }\r\n        set disabled(val) {\r\n            this.attr(disabled, val, '');\r\n        }\r\n                attr(name, val, trueVal) {\r\n            const v = val ? 'set' : 'remove';\r\n            this[v + 'Attribute'](name, trueVal || val);\r\n        }\r\n                to$(n) {\r\n            const mod = n % 2;\r\n            return (n - mod) \/ 2 + '-' + mod;\r\n        }\r\n                incAttr(name) {\r\n            const ec = this._evCount;\r\n            if (name in ec) {\r\n                ec[name]++;\r\n            }\r\n            else {\r\n                ec[name] = 0;\r\n            }\r\n            this.attr('data-' + name, this.to$(ec[name]));\r\n        }\r\n        attributeChangedCallback(name, oldVal, newVal) {\r\n            switch (name) {\r\n                case disabled:\r\n                    this._disabled = newVal !== null;\r\n                    break;\r\n            }\r\n        }\r\n                de(name, detail, asIs = false) {\r\n            const eventName = name + (asIs ? '' : '-changed');\r\n            const newEvent = new CustomEvent(eventName, {\r\n                detail: detail,\r\n                bubbles: true,\r\n                composed: false,\r\n            });\r\n            this.dispatchEvent(newEvent);\r\n            this.incAttr(eventName);\r\n            return newEvent;\r\n        }\r\n                _upgradeProperties(props) {\r\n            props.forEach(prop => {\r\n                if (this.hasOwnProperty(prop)) {\r\n                    let value = this[prop];\r\n                    delete this[prop];\r\n                    this[prop] = value;\r\n                }\r\n            });\r\n        }\r\n    };\r\n}","code-length":538,"reference":"Base class for many xtal- components\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Bitmap(imageOrUri) {\r\n\t\tthis.DisplayObject_constructor();\r\n\t\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t\tif (typeof imageOrUri == \"string\") {\r\n\t\t\tthis.image = document.createElement(\"img\");\r\n\t\t\tthis.image.src = imageOrUri;\r\n\t\t} else {\r\n\t\t\tthis.image = imageOrUri;\r\n\t\t}\r\n\t\r\n\t\t\r\n\t\tthis.sourceRect = null;\r\n\t\r\n\t\t\r\n\t\tthis._webGLRenderStyle = createjs.DisplayObject._StageGL_BITMAP;\r\n\t}","code-length":158,"reference":"A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing\nHTML element, or a string.\n\n<h4>Example<\/h4>\n\nvar bitmap = new createjs.Bitmap(\"imagePath.jpg\");\n\n<strong>Notes:<\/strong>\n<ol>\n<li>When using a video source that may loop or seek, use a {{#crossLink \"VideoBuffer\"}}{{\/crossLink}} object to\nprevent blinking \/ flashing.\n<li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it\nwill be displayed.<\/li>\n<li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,\nthe Bitmap can be cached.<\/li>\n<li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This\nhappens in all browsers except recent Firefox builds.<\/li>\n<li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using\nmethods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting\n`crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin=\"Anonymous\";`<\/li>\n<\/ol>\n\n","result":"Create a Bitmap object.","score":[1.701e-19,0.0064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction canonicalize(value, stack) {\r\n  var canonicalizedObj;\r\n    var prop;\r\n    var type = getType(value);\r\n  function withStack(value, fn) {\r\n    stack.push(value);\r\n    fn();\r\n    stack.pop();\r\n  }\r\n  stack = stack || [];\r\n  if (stack.indexOf(value) !== -1) {\r\n    return '[Circular]';\r\n  }\r\n  switch (type) {\r\n    case 'undefined':\r\n    case 'buffer':\r\n    case 'null':\r\n      canonicalizedObj = value;\r\n      break;\r\n    case 'array':\r\n      withStack(value, function() {\r\n        canonicalizedObj = value.map(function(item) {\r\n          return canonicalize(item, stack);\r\n        });\r\n      });\r\n      break;\r\n    case 'function':\r\n            for (prop in value) {\r\n        canonicalizedObj = {};\r\n        break;\r\n      }\r\n            if (!canonicalizedObj) {\r\n        canonicalizedObj = emptyRepresentation(value, type);\r\n        break;\r\n      }\r\n        case 'object':\r\n      canonicalizedObj = canonicalizedObj || {};\r\n      withStack(value, function() {\r\n        Object.keys(value).sort().forEach(function(key) {\r\n          canonicalizedObj[key] = canonicalize(value[key], stack);\r\n        });\r\n      });\r\n      break;\r\n    case 'date':\r\n    case 'number':\r\n    case 'regexp':\r\n    case 'boolean':\r\n      canonicalizedObj = value;\r\n      break;\r\n    default:\r\n      canonicalizedObj = value.toString();\r\n  }\r\n  return canonicalizedObj;\r\n}","code-length":437,"reference":"Return a new Thing that has the keys in sorted order.","result":"Canonicalize a value.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction emptyRepresentation(value, type) {\r\n  type = type || getType(value);\r\n  switch (type) {\r\n    case 'function':\r\n      return '[Function]';\r\n    case 'object':\r\n      return '{}';\r\n    case 'array':\r\n      return '[]';\r\n    default:\r\n      return value.toString();\r\n  }\r\n}","code-length":98,"reference":"If a value could have properties, and has none, this function is called,which returns a string representation of the empty value.","result":"Create empty representation.","score":[0.001,0.026]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(doc, first, last) { \r\n\t\t\t\t\t\t\tvar f = doc.WordPos[first];\r\n\t\t\t\t\t\t\tvar l;\r\n\t\t\t\t\t\t\tif (last==doc.WordPos.length-1)\r\n\t\t\t\t\t\t\t\tl = doc.DocLength;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tl = doc.WordPos[last+1]; \r\n\t\t\t\t\t\t\treturn l-f; \r\n\t\t\t\t\t\t}","code-length":108,"reference":"increment anchor count","result":"Calculate the distance between two words.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compile() {\r\n  var buf = '';\r\n  buf += '(function() {\\n';\r\n  buf += '\\n\r\n  buf += browser.require + '\\n\\n';\r\n  buf += 'require.modules = {};\\n\\n';\r\n  buf += 'require.resolve = ' + browser.resolve + ';\\n\\n';\r\n  buf += 'require.register = ' + browser.register + ';\\n\\n';\r\n  buf += 'require.relative = ' + browser.relative + ';\\n\\n';\r\n  args.forEach(function(file){\r\n    var js = files[file];\r\n    file = file.replace('lib\/', '');\r\n    buf += '\\nrequire.register(\"' + file + '\", function(module, exports, require){\\n';\r\n    buf += js;\r\n    buf += '\\n});\r\n  });\r\n  buf += '\\nwindow.kiwi = require(\"kiwi\");\\n';\r\n  buf += '})();\\n';\r\n  fs.writeFile('kiwi.js', buf, function(err){\r\n    if (err) throw err;\r\n    console.log('  \\033[90m create : \\033[0m\\033[36m%s\\033[0m', 'kiwi.js');\r\n    console.log();\r\n  });\r\n}","code-length":331,"reference":"Compile the files.","result":"Browserify.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fp() {\r\n      var args = Array.prototype.slice.call(arguments, 0);\r\n      if (args.length) {\r\n        if (!args.every(isStringOrFunction)) {\r\n          var signature = args.map(humanizeArgument).join('\\n\\t');\r\n          throw new Error('Invalid arguments to functional pipeline - not a string or function\\n\\t' +\r\n            signature);\r\n        }\r\n        var fns = splitDots(args);\r\n        return function (d) {\r\n          var originalObject = d;\r\n          fns.forEach(function (fn) {\r\n            if (typeof fn === 'string') {\r\n              if (typeof d[fn] === 'function') {\r\n                d = d[fn].call(d, d);\r\n              } else if (typeof d[fn] !== 'undefined') {\r\n                d = d[fn];\r\n              } else {\r\n                var signature = args.map(humanizeArgument).join('\\n\\t');\r\n                throw new Error('Cannot use property ' + fn + ' from object ' +\r\n                  JSON.stringify(d, null, 2) + '\\npipeline\\n\\t' + signature +\r\n                  '\\noriginal object\\n' + JSON.stringify(originalObject, null, 2));\r\n              }\r\n            } else if (typeof fn === 'function') {\r\n              d = fn(d);\r\n            } else {\r\n              throw new Error('Cannot apply ' + JSON.stringify(fn, null, 2) +\r\n                ' to value ' + d + ' not a property name or a function');\r\n            }\r\n          });\r\n          return d;\r\n        };\r\n      }\r\n    }","code-length":415,"reference":"Creates an optimistic chain, no checks before calling a function or accessing a property, or calling a method","result":"Create a function that returns a function that returns a function .","score":[0.0909,0.1437]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(tickRate){\r\n    events.EventEmitter.call(this);\r\n    this._milliseconds = 0;\r\n    this._setState('stopped');\r\n    this._timer = new NanoTimer();\r\n    tickRate = tickRate || 100;\r\n    Object.defineProperty(this, 'tickRate', {\r\n        enumerable: true,\r\n        configurable: false,\r\n        writable: false,\r\n        value: tickRate\r\n    });\r\n}","code-length":120,"reference":"Construct a new Rieussec stopwatch\n\n","result":"Create a new instance of the NanoTimer.","score":[0.2284,0.3606]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onProcessed(err, processed) {\r\n    if(err) return callback(err);\r\n    _this._tokenize(processed, onTokenized);\r\n  }","code-length":49,"reference":"Callback for utils.applyAll","result":"Generate code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Template(str, options) {\r\n  if(_.isObject(str) && !options){\r\n    options = str;\r\n    str = null;\r\n  }\r\n  options = options ? _.clone(options) : {};\r\n  if(!_.isBoolean(options.cache)) {\r\n    options.cache = process.env.NODE_ENV === 'production';\r\n  }\r\n  options = _.defaults(options, DEFAULTS);\r\n  options.cacheContext = options.cacheContext || Template;\r\n  this.template = str;\r\n  this.options = options;\r\n  this._compiled = null;\r\n  if(options.cache && !(this._getCache() instanceof options.cacheHandler)) {\r\n    var cacheOptions = [options.cacheHandler].concat(options.cacheOptions);\r\n    options.cacheContext[options._cacheProp] = typeof window !== 'undefined' ?\r\n                                                 new options.cacheHandler() :\r\n                                                 construct.apply(this,\r\n                                                                 cacheOptions);\r\n  }\r\n}","code-length":255,"reference":"Initializes `Template` with optionnally the given `str` and\n`options`.\n\n","result":"Create a template instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (fn, rate) {\r\n  var allowed = true;\r\n  return function () {\r\n    if (allowed) {\r\n      allowed = false;\r\n      fn.apply(null, [].slice.call(arguments, 0));\r\n      setTimeout(function () {\r\n        allowed = true;\r\n      }, rate);\r\n    }\r\n  }\r\n}","code-length":97,"reference":"used to fix fs.watch on windows triggering cascading events the function fn can only be called once per rate","result":"Allow functions to be synchronous.","score":[0.0174,0.0852]}
{"code":"\/*is used to<extra_id_0>\r\nfunction get_data (callback) {\r\n  var data;\r\n  try {\r\n    data = program.data ? JSON.parse(program.data) : {};\r\n    callback(data);\r\n  } catch (err) {\r\n    fs.readFile(program.data, function (err, str) {\r\n      str = '' + str;\r\n      if (!err) {\r\n        try {\r\n          data = JSON.parse(str);\r\n          callback(data);\r\n        } catch (err) {\r\n          data = eval(str);\r\n          callback(data);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  return data;\r\n}","code-length":173,"reference":"get optional data from command line as json or file containing json or javascript","result":"Get data from a file.","score":[0.0562,0.1951]}
{"code":"\/*is used to<extra_id_0>\r\nfunction secureWebhookEndpoints() {\r\n    var authenticationMiddleware = require(__dirname + '\/middleware\/slack_authentication.js');\r\n    var tokens = Array.prototype.slice.call(arguments);\r\n    var webserver = tokens.shift();\r\n    slack_botkit.logger.info(\r\n      '** Requiring token authentication for webhook endpoints for Slash commands ' +\r\n      'and outgoing webhooks; configured ' + tokens.length + ' token(s)'\r\n    );\r\n    webserver.use(authenticationMiddleware(tokens));\r\n  }","code-length":137,"reference":"adds the webhook authentication middleware module to the webserver","result":"Secure webhooks endpoints.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction postForm(url, formData, cb, multipart) {\r\n        cb = cb || noop;\r\n        bot.logger.info('** API CALL: ' + url);\r\n        var params = {\r\n            url: url,\r\n            headers: {\r\n                'User-Agent': bot.userAgent(),\r\n            }\r\n        };\r\n        if (multipart === true) {\r\n            params.formData = formData;\r\n        } else {\r\n            params.form = formData;\r\n        }\r\n        request.post(params, function(error, response, body) {\r\n            bot.logger.debug('Got response', error, body);\r\n            if (error) {\r\n                return cb(error);\r\n            }\r\n            if (response.statusCode == 200) {\r\n                var json;\r\n                try {\r\n                    json = JSON.parse(body);\r\n                } catch (parseError) {\r\n                    return cb(parseError);\r\n                }\r\n                return cb((json.ok ? null : json.error), json);\r\n            } else if (response.statusCode == 429) {\r\n                return cb(new Error('Rate limit exceeded'));\r\n            } else {\r\n                return cb(new Error('Invalid response'));\r\n            }\r\n        });\r\n    }","code-length":316,"reference":"Makes a POST request as a form to the given url with the options as data\n\n","result":"Send form data to the API.","score":[0.0613,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction verifyRequest(req, res, buf, encoding) {\r\n    var expected = req.headers['x-hub-signature'];\r\n    var calculated = getSignature(buf);\r\n    if (expected !== calculated) {\r\n      throw new Error('Invalid signature on incoming request');\r\n    } else {\r\n    }\r\n  }","code-length":86,"reference":"Verifies the SHA1 signature of the raw request payload before bodyParser parses it Will abort parsing if signature is invalid, and pass a generic error to response","result":"Verify the incoming request signature.","score":[0.0035,0.0605]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\t\tif ( !this.selfUpdating ) {\r\n\t\t\t\t\tthis.deferred = true;\r\n\t\t\t\t}\r\n\t\t\t\tvar i = this.refs.length;\r\n\t\t\t\twhile ( i-- ) {\r\n\t\t\t\t\tthis.refs[ i ].update();\r\n\t\t\t\t}\r\n\t\t\t\tif ( this.deferred ) {\r\n\t\t\t\t\tthis.update();\r\n\t\t\t\t\tthis.deferred = false;\r\n\t\t\t\t}\r\n\t\t\t}","code-length":120,"reference":"This method forces the evaluator to sync with the current model in the case of a smart update","result":"Update the DOM.","score":[0.0028,0.0606]}
{"code":"\/*is used to<extra_id_0>\r\nfunction DockerCmdManager(dockerdescPath) {\r\n    dockerdescPath = dockerdescPath || '.\/dockerdesc.json';\r\n    if (!fs.existsSync(dockerdescPath)) {\r\n        throw new Error(util.format('The path \"%s\" does not exists.', dockerdescPath));\r\n    }\r\n        this.dockerdescDir = path.dirname(dockerdescPath);\r\n    var dockerdescPathStat = fs.statSync(dockerdescPath);\r\n    if (dockerdescPathStat.isDirectory()) {\r\n        this.dockerdescDir = dockerdescPath;\r\n        dockerdescPath = path.join(dockerdescPath, 'dockerdesc.json');\r\n    }\r\n        var dockerdescContent = fs.readFileSync(dockerdescPath);\r\n    try {\r\n        this.dockerdesc = JSON.parse(dockerdescContent);\r\n    } catch (err) {\r\n        throw new Error('Problem in the dockerdesc.json file format.\\n' + err.stack);\r\n    }\r\n}","code-length":246,"reference":"This class manages the DockerCmd and handles dockerdesc.json\n","result":"Create DockerCmdManager.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dd(object, _context, _key, _root, _rootPath) {\r\n    _root = _root || object;\r\n    _rootPath = _rootPath || [];\r\n    var drill = function(key) {\r\n        var nextObject = (\r\n            object &&\r\n            object.hasOwnProperty(key) &&\r\n            object[key] ||\r\n            undefined\r\n        );\r\n        return dd(nextObject, object, key, _root, _rootPath.concat(key));\r\n    };\r\n    drill.val = object;\r\n    drill.exists = object !== undefined;\r\n    drill.set = function(value) {\r\n        if (_rootPath.length === 0) {\r\n            return;\r\n        }\r\n        var contextIterator = _root;\r\n        for (var depth = 0; depth < _rootPath.length; depth++) {\r\n            var key = _rootPath[depth];\r\n            var isFinalDepth = (depth === _rootPath.length - 1);\r\n            if (!isFinalDepth) {\r\n                contextIterator[key] = (\r\n                    contextIterator.hasOwnProperty(key) &&\r\n                    typeof contextIterator[key] === 'object' ?\r\n                        contextIterator[key] : {}\r\n                );\r\n                contextIterator = contextIterator[key];\r\n            } else {\r\n                _context = contextIterator;\r\n                _key = key;\r\n            }\r\n        }\r\n        _context[_key] = value;\r\n        drill.val = value;\r\n        drill.exists = value !== undefined;\r\n        return value;\r\n    };\r\n    drill.update = function(value) {\r\n        if (drill.exists) {\r\n            _context[_key] = value;\r\n            drill.val = value;\r\n            return value;\r\n        }\r\n    };\r\n    drill.invoke = isFunction(object) ? Function.prototype.bind.call(object, _context) : function () {\r\n    };\r\n    return drill;\r\n}","code-length":505,"reference":"drilldown\nSafely accesses deep properties of objects.\n\nvar foo;\nfoo.bar;\n\/\/ TypeError: Cannot read property 'bar' of undefined\n\nvar foo = {abc: {def: {ghi: 'jkl'}}};\ndd(foo)('abc')('def')('ghi').val is 'jkl'\ndd(foo)('abc')('zzz')('yyy').val is undefined\n\nCheck if a deep property exists:\ndd(foo)('abc').exists\n\nWorks with arrays too:\nvar foo = {abc: [ {bar: 'def'},{bar: 'ghi'} ]};\ndd(foo)('abc')(0)('bar') is 'def'\n\nSafely call functions:\nvar foo = {abc: {addOne: function(x) { return x + 1; }}};\ndd(foo)('abc')('addOne').invoke(5); returns 6\ndd(foo)('zzz')('aaa').invoke(5); returns undefined\n\nUpdate values if the original value exists:\nvar foo = {abc: {def: {ghi: 'jkl'}}};\nvar newValue = {ping: 'pong'};\ndd(foo)('abc')('def').update(newValue);\n- foo is now {abc: {def: {ping: 'pong'}}}\n- {ping: 'pong'} is returned\ndd(foo)('abc')('zzz').update(5);\n- foo is unchanged\n- undefined is returned\n\nSet values even if the path drilled to does not exist:\nvar foo = {abc: {}};\ndd(foo)('abc')('def')('ghi').set('jkl');\n- foo is now {abc: {def: {ghi: 'jkl}}}\n\nTo prevent confusion, only own properties are drilled into.\n\nAvailable properties:\n- val - the value\n- exists - true if val is defined\n- update function(value) - sets the value if the value exists\n- set function(value) - sets the value at any path\n- invoke - the value if the value is a function, or else a dummy function\n\n","result":"Create a deep copy of an object.","score":[0.0,0.0082]}
{"code":"\/*is used to<extra_id_0>\r\nfunction printTasks(tasks, verbose) {\r\n  tasks = tasks\r\n    .filterHidden(verbose)\r\n    .sort();\r\n  var results = [\r\n    'Usage: gulp [task] [task2] ...',\r\n    '',\r\n    'Tasks: '\r\n  ];\r\n  var fieldTaskLen = tasks.getLongestNameLength();\r\n  tasks.forEach(function(task) {\r\n    var comment = task.comment || {};\r\n    var lines = comment.lines || [];\r\n    results.push(formatColumn(task.name, fieldTaskLen) + (lines[0] || ''));\r\n    for (var i = 1; i < lines.length; i++) {\r\n      results.push(formatColumn('', fieldTaskLen) + '  ' + lines[i]);\r\n    }\r\n  });\r\n  return results.join('\\n');\r\n}","code-length":223,"reference":"Render output from tasks\n","result":"Print the tasks.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatColumn(text, width, offsetLeft, offsetRight) {\r\n  offsetLeft  = undefined !== offsetLeft  ? offsetLeft  : 3;\r\n  offsetRight = undefined !== offsetRight ? offsetRight : 3;\r\n  return new Array(offsetLeft + 1).join(' ') +\r\n    text +\r\n    new Array(Math.max(width - text.length, 0) + 1).join(' ') +\r\n    new Array(offsetRight + 1).join(' ');\r\n}","code-length":122,"reference":"Return a text surrounded by space\n","result":"Format column .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inheritGulp() {\r\n  function TaskDoc() {\r\n    this.taskList = new TaskList();\r\n    gulp.Gulp.call(this);\r\n  }\r\n  TaskDoc.prototype = gulp;\r\n  return new TaskDoc();\r\n}","code-length":72,"reference":"Return a new instance that is inherited from Gulp\n","result":"Inherit gulp.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _log(level) {\r\n  return function() {\r\n    var meta = null;\r\n    var args = arguments;\r\n    if (arguments.length === 0) {\r\n      return this._winston.level === level;\r\n    } else if (arguments[0] instanceof Error) {\r\n      meta = arguments[0].toString();\r\n      args = Array.prototype.slice.call(arguments, 1);\r\n      args.push(meta);\r\n    } else if (typeof (args[0]) === 'string') {\r\n      args = Array.prototype.slice.call(arguments);\r\n    } else {\r\n      meta = arguments[0];\r\n      args = Array.prototype.slice.call(arguments, 1);\r\n      args.push(meta);\r\n    }\r\n    args.unshift(level);\r\n    this._winston.log.apply(this._winston, args);\r\n  }\r\n}","code-length":232,"reference":"We are creating one generic version of logger.","result":"Define the log function for the console.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isPromise(item) {\r\n\tif (!item) return false;\r\n\treturn (\r\n\t\t(util.types && util.types.isPromise && util.types.isPromise(item))\r\n\t\t|| (item.constructor && item.constructor.name == 'Promise')\r\n\t\t|| (!item instanceof objectInstance && item.then && typeof item.then == 'function')\r\n\t);\r\n}","code-length":105,"reference":"Try and idenfity if the given item is a promise or is promise like\n","result":"Check if a promise is a promise.","score":[0.1106,0.1504]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hasCallback(fn) {\r\n\tvar fnString = fn.toString();\r\n\t\r\n\t\r\n\tvar bits, fnArgs;\r\n\tif (\/^async \/.test(fnString)) {\r\n\t\t\r\n\t\treturn false;\r\n\t} else if (bits = \/^function\\s*(?:.*?)\\s*\\((.*?)\\)\/.exec(fnString)) {\r\n\t\t\r\n\t\tfnArgs = bits[1];\r\n\t} else if (\/^\\(\\s*\\)\\s*=>\/.test(fnString)) {\r\n\t\t\r\n\t\treturn false;\r\n\t} else if (bits = \/^\\s\\((.*?)\\)\\s*?=>\/.exec(fnString)) {\r\n\t\t\r\n\t\tfnArgs = bits[1];\r\n\t} else if (bits = \/^(.*?)\\s*=>\/.exec(fnString)) {\r\n\t\t\r\n\t\tfnArgs = bits[1];\r\n\t} else {\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\tfnArgs = fnArgs.replace(\/^\\s+\/, '').replace(\/\\s+$\/, '');\r\n\t\r\n\treturn !! fnArgs;\r\n}","code-length":281,"reference":"Figure out if a function declaration looks like it takes a callback\nReally this just checks the setup of a function for an argument - it cannot check if that argument is a function\n","result":"Detect async functions .","score":[0,0.0161]}
{"code":"\/*is used to<extra_id_0>\r\nfunction race() {\r\n\tvar self = this;\r\n\targy(arguments)\r\n\t\t.ifForm('', function() {})\r\n\t\t.ifForm('array', function(tasks) {\r\n\t\t\tself._struct.push({ type: 'race', payload: tasks });\r\n\t\t})\r\n\t\t.ifForm('string array', function(id, tasks) {\r\n\t\t\tself._struct.push({ type: 'race', id: arguments[0], payload: arguments[1] });\r\n\t\t})\r\n\t\t.ifFormElse(function(form) {\r\n\t\t\tthrow new Error('Unknown call style for .parallel(): ' + form);\r\n\t\t})\r\n\treturn self;\r\n}","code-length":179,"reference":"Like parallel but only return the first, non-undefined, non-null result\n","result":"Avoid the race .","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deferAdd(id, task, parentChain) {\r\n\tvar self = this;\r\n\tparentChain.waitingOn = (parentChain.waitingOn || 0) + 1;\r\n\tif (! parentChain.waitingOnIds)\r\n\t\tparentChain.waitingOnIds = [];\r\n\tparentChain.waitingOnIds.push(id);\r\n\tself._deferred.push({\r\n\t\tid: id || null,\r\n\t\tprereq: parentChain.prereq || [],\r\n\t\tpayload: function(next) {\r\n\t\t\tself._context._id = id;\r\n\t\t\trun(self._options.context, task, function(err, value) {\r\n\t\t\t\tif (id) self._context[id] = value;\r\n\t\t\t\tself._deferredRunning--;\r\n\t\t\t\tif (--parentChain.waitingOn == 0) {\r\n\t\t\t\t\tparentChain.completed = true;\r\n\t\t\t\t\tif (self._struct.length && self._struct[self._structPointer].type == 'await') self._execute(err);\r\n\t\t\t\t}\r\n\t\t\t\tself._execute(err);\r\n\t\t\t}, (parentChain.prereq || []).map(function(pre) {\r\n\t\t\t\treturn self._context[pre];\r\n\t\t\t}));\r\n\t\t}\r\n\t});\r\n}","code-length":321,"reference":"Collection of items that have been deferred\n","result":"Add tasks to the queue.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction await() {\r\n\tvar payload = [];\r\n\t\r\n\targy(arguments)\r\n\t\t.getForm()\r\n\t\t.split(',')\r\n\t\t.forEach(function(type, offset) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase '':\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tpayload.push(args[offset]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'array':\r\n\t\t\t\t\tpayload.concat(args[offset]);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error('Unknown argument type passed to .await(): ' + type);\r\n\t\t\t}\r\n\t\t});\r\n\tthis._struct.push({ type: 'await', payload: payload });\r\n\treturn this;\r\n}","code-length":204,"reference":"Queue up an await point\nThis stops the execution queue until its satisfied that dependencies have been resolved\n","result":"Create an await function.","score":[0.0136,0.113]}
{"code":"\/*is used to<extra_id_0>\r\nfunction timeout(newTimeout) {\r\n\tvar self = this;\r\n\targy(arguments)\r\n\t\t.ifForm('', function() {\r\n\t\t\tself._struct.push({ type: 'timeout', delay: false });\r\n\t\t})\r\n\t\t.ifForm('boolean', function(setTimeout) {\r\n\t\t\tif (setTimeout) throw new Error('When calling .timeout(Boolean) only False is accepted to disable the timeout');\r\n\t\t\tself._struct.push({ type: 'timeout', delay: false });\r\n\t\t})\r\n\t\t.ifForm('number', function(delay) {\r\n\t\t\tself._struct.push({ type: 'timeout', delay: delay });\r\n\t\t})\r\n\t\t.ifForm('function', function(callback) {\r\n\t\t\tself._struct.push({ type: 'timeout', callback: callback });\r\n\t\t})\r\n\t\t.ifForm('number function', function(delay, callback) {\r\n\t\t\tself._struct.push({ type: 'timeout', delay: delay, callback: callback });\r\n\t\t})\r\n\t\t.ifForm('function number', function(delay, callback) {\r\n\t\t\tself._struct.push({ type: 'timeout', delay: delay, callback: callback });\r\n\t\t})\r\n\t\t.ifFormElse(function(form) {\r\n\t\t\tthrow new Error('Unknown call style for .timeout():' + form);\r\n\t\t});\r\n\treturn self;\r\n}","code-length":354,"reference":"Queue up a timeout setter\n","result":"Set the timeout on the object.","score":[0.193,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _timeoutHandler() {\r\n\tvar currentTaskIndex = this._struct.findIndex(function(task) { return ! task.completed });\r\n\tif (!currentTaskIndex < 0) {\r\n\t\tconsole.log('Async-Chainable timeout on unknown task');\r\n\t\tconsole.log('Full structure:', this._struct);\r\n\t} else {\r\n\t\tconsole.log('Async-Chainable timeout: Task #', currentTaskIndex + 1, '(' + this._struct[currentTaskIndex].type + ')', 'elapsed timeout of', this._options.timeout + 'ms');\r\n\t}\r\n\tthis.fire('timeout');\r\n}","code-length":159,"reference":"The default timeout handler","result":"Chainable timeouts.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction run(context, fn, finish, args) {\r\n\t\r\n\tif (typeof context == 'function') {\r\n\t\targs = finish;\r\n\t\tfinish = fn;\r\n\t\tfn = context;\r\n\t\tcontext = this;\r\n\t}\r\n\t\r\n\tif (isPromise(fn)) {\r\n\t\tfn\r\n\t\t\t.then(function(value) {\r\n\t\t\t\tfinish.apply(context, [null, value]);\r\n\t\t\t})\r\n\t\t\t.catch(function(err) {\r\n\t\t\t\tfinish.call(context, err || 'An error occured');\r\n\t\t\t});\r\n\t} else if (hasCallback(fn)) {\r\n\t\tvar result = fn.apply(context, args ? [finish].concat(args) : [finish]);\r\n\t\tif (isPromise(result)) {\r\n\t\t\tresult\r\n\t\t\t\t.then(function(value) {\r\n\t\t\t\t\tfinish.apply(context, [null, value]);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(err) {\r\n\t\t\t\t\tfinish.call(context, err || 'An error occured');\r\n\t\t\t\t});\r\n\t\t}\r\n\t} else {\r\n\t\tvar result;\r\n\t\ttry {\r\n\t\t\tresult = fn.apply(context, args || []);\r\n\t\t} catch (e) {\r\n\t\t\tfinish.call(context, e);\r\n\t\t}\r\n\t\tif (isPromise(result)) {\r\n\t\t\tresult\r\n\t\t\t\t.then(function(value) {\r\n\t\t\t\t\tfinish.apply(context, [null, value]);\r\n\t\t\t\t})\r\n\t\t\t\t.catch(function(err) {\r\n\t\t\t\t\tfinish.call(context, err || 'An error occured');\r\n\t\t\t\t});\r\n\t\t} else {\r\n\t\t\tfinish.apply(context, [null, result]);\r\n\t\t}\r\n\t}\r\n}","code-length":463,"reference":"Run a single function, promise return, promise factory or any other combination - then a callback when finished\nTake a function reference and treat it as a callback style function\nIf the function returns a promise this behaviour is transformed into a callback style function\n\nThis function accepts all types of input functions:\n- callback functions (e.g. `next => ...`)\n- async functions (e.g. `async ()=> ...`)\n- promise functions (e.g. `new Promise(resolve => ...)`)\n- promise factories (e.g. `()=> new Promise(resolve => ...)`)\n\n","result":"Run a function in a context.","score":[0.0,0.0262]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runWhile(iter, limit, callback) {\r\n\tvar index = 0;\r\n\tvar hasExited = false;\r\n\tvar err;\r\n\tvar running = 0;\r\n\tif (!Number.isFinite(limit)) limit = 10;\r\n\tvar invoke = function() {\r\n\t\titer.call(this._context, function(taskErr, taskResult) {\r\n\t\t\tif (taskErr) err = taskErr;\r\n\t\t\tif (taskErr || !taskResult) hasExited = true;\r\n\t\t\t--running;\r\n\t\t\tif (err && !running) {\r\n\t\t\t\tcallback(err, res);\r\n\t\t\t} else if (running <= 0 && hasExited) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t} else if (!hasExited) {\r\n\t\t\t\tsetTimeout(invoke);\r\n\t\t\t}\r\n\t\t}, index++);\r\n\t};\r\n\tfor (var i = 0; i < limit; i++) {\r\n\t\trunning++;\r\n\t\tsetTimeout(invoke);\r\n\t}\r\n\treturn this;\r\n}","code-length":270,"reference":"Internal function to run a callback until it returns a falsy value\n","result":"Run a function in a context.","score":[0.0935,0.2769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reset() {\r\n\tthis._struct = [];\r\n\tthis._structPointer = 0;\r\n\tvar reAttachContext = (this._options.context == this._context);\r\n\tthis._context = {\r\n\t\t_struct: this._struct,\r\n\t\t_structPointer: this._structPointer,\r\n\t\t_options: this._options,\r\n\t\t_deferredRunning: this._deferredRunning,\r\n\t\thook: this.hook.bind(this),\r\n\t\tfire: this.fire.bind(this),\r\n\t};\r\n\tif (reAttachContext) this._options.context = this._context;\r\n}","code-length":161,"reference":"}}} \nReset all state variables and return the object into a pristine condition\n","result":"Reset the context.","score":[0.0173,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hook() {\r\n\tvar self = this;\r\n\targy(arguments)\r\n\t\t.ifForm('', function() {})\r\n\t\t.ifForm('string function', function(hook, callback) {\r\n\t\t\tif (!self._hooks[hook]) self._hooks[hook] = [];\r\n\t\t\tself._hooks[hook].push({cb: callback});\r\n\t\t})\r\n\t\t.ifForm('string string function', function(hook, id, callback) {\r\n\t\t\tif (!self._hooks[hook]) self._hooks[hook] = [];\r\n\t\t\tself._hooks[hook].push({id: id, cb: callback});\r\n\t\t})\r\n\t\t.ifForm('string array function', function(hook, prereqs, callback) {\r\n\t\t\tif (!self._hooks[hook]) self._hooks[hook] = [];\r\n\t\t\tself._hooks[hook].push({prereqs: prereqs, cb: callback});\r\n\t\t})\r\n\t\t.ifForm('string string array function', function(hook, id, prereqs, callback) {\r\n\t\t\tif (!self._hooks[hook]) self._hooks[hook] = [];\r\n\t\t\tself._hooks[hook].push({id: id, prereqs: prereqs, cb: callback});\r\n\t\t})\r\n\t\t.ifForm('array function', function(hooks, callback) {\r\n\t\t\thooks.forEach(function(hook) {\r\n\t\t\t\tif (!self._hooks[hook]) self._hooks[hook] = [];\r\n\t\t\t\tself._hooks[hook].push({cb: callback});\r\n\t\t\t});\r\n\t\t})\r\n\t\t.ifFormElse(function(form) {\r\n\t\t\tthrow new Error('Unknown call style for .on(): ' + form);\r\n\t\t});\r\n\treturn self;\r\n}","code-length":443,"reference":"Hooks {{{ \nSet up a hook\n","result":"Prevent multiple calls to.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction tag(name) {\r\n    if (!this.comment || !this.comment.tags) {\r\n      return null;\r\n    }\r\n        for (var i = 0; i < this.comment.tags.length; i++) {\r\n      var tagObj = this.comment.tags[i];\r\n      if (tagObj.name === name) {\r\n        return tagObj.value;\r\n      }\r\n    }\r\n    return null;\r\n  }","code-length":120,"reference":"Return the first tag with a name=name\n","result":"Tag a comment with a given.","score":[0.2311,0.3704]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkPattern(file, blackList, whiteList){\r\n  if (util.isRegExp(blackList) && blackList.test(file)) {\r\n    return false;\r\n  }\r\n  if (util.isRegExp(whiteList)) {\r\n    if (whiteList.test(file)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  return true;\r\n}","code-length":108,"reference":"Helper functions\n \nChecks blackList- and whitList-regex against\nthe given file name and returns if this file can\nbe deleted.\n\n","result":"Check the pattern.","score":[0.002,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Seven(_a) {\r\n                    var _b = _a === void 0 ? {} : _a, height = _b.height, width = _b.width, _c = _b.angle, angle = _c === void 0 ? 10 : _c, _d = _b.ratioLtoW, ratioLtoW = _d === void 0 ? 4 : _d, _e = _b.ratioLtoS, ratioLtoS = _e === void 0 ? 32 : _e, _f = _b.digit, digit = _f === void 0 ? Digit.BLANK : _f;\r\n                                        this._horizontalSegmentGeometry = [\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 }\r\n                    ];\r\n                                        this._verticalSegmentGeometry = [\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 },\r\n                        { x: 0, y: 0 }\r\n                    ];\r\n                                        this._translations = [\r\n                        { x: 0, y: 0, a: this._horizontalSegmentGeometry },\r\n                        { x: 0, y: 0, a: this._verticalSegmentGeometry },\r\n                        { x: 0, y: 0, a: this._verticalSegmentGeometry },\r\n                        { x: 0, y: 0, a: this._horizontalSegmentGeometry },\r\n                        { x: 0, y: 0, a: this._verticalSegmentGeometry },\r\n                        { x: 0, y: 0, a: this._verticalSegmentGeometry },\r\n                        { x: 0, y: 0, a: this._horizontalSegmentGeometry }\r\n                    ];\r\n                                        this.segments = [new Segment(), new Segment(), new Segment(), new Segment(), new Segment(), new Segment(), new Segment()];\r\n                    this._angleDegree = angle;\r\n                    this.digit = digit;\r\n                    this._ratioLtoW = ratioLtoW;\r\n                    this._ratioLtoS = ratioLtoS;\r\n                    this._height = this._width = 100;\r\n                    this._isHeightFixed = true;\r\n                    if (height !== undefined) {\r\n                        this._height = height;\r\n                    }\r\n                    else if (width !== undefined) {\r\n                        this._width = width;\r\n                        this._isHeightFixed = false;\r\n                    }\r\n                    this._positionSegments();\r\n                }","code-length":652,"reference":"Construct a new Seven object.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onChange(event) { try {\r\n\t\tif (remove()) { return; }\r\n\t\tresolve(Array.from(input.files));\r\n\t} catch (error) { reject(error); } }","code-length":58,"reference":"after dialog close, wait for 'change'","result":"Detect changes.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RemoveObserver_init(ref, node) {\r\n\tlet self = Self.get(node);\r\n\tif (!self) {\r\n\t\tself = new RemoveObserverPrivate(node);\r\n\t\tSelf.set(node, self);\r\n\t}\r\n\tSelf.set(ref, self);\r\n}","code-length":83,"reference":"there are no properties on a `RemoveObserver`, every object that went as ref through this function can be used as `this` in any of the RemoveObserver methods","result":"Initialize the observer.","score":[0.0001,0.0203]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parsePropertyChains(expr) {\r\n  var parsedExpr = '', chain;\r\n  var prevCurrentIndex = currentIndex;\r\n  var prevLastIndex = propertyRegex.lastIndex;\r\n  currentIndex = 0;\r\n  propertyRegex.lastIndex = 0;\r\n  while ((chain = nextChain(expr)) !== false) {\r\n    parsedExpr += chain;\r\n  }\r\n  currentIndex = prevCurrentIndex;\r\n  propertyRegex.lastIndex = prevLastIndex;\r\n  return parsedExpr;\r\n}","code-length":129,"reference":"Finds and parses the property chains in an expression.","result":"Parse property chains in expressions.","score":[0.2224,0.436]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseFunction(link, index, expr) {\r\n  var call = getFunctionCall(expr);\r\n  if (index === 0) {\r\n    link = addThisOrGlobal(link);\r\n  } else {\r\n    link = '_ref' + currentReference + link;\r\n  }\r\n  var calledLink = link + '(~~insideParens~~)';\r\n  link = 'typeof ' + link + ' !== \\'function\\' ? void 0 : ' + calledLink;\r\n  var insideParens = call.slice(1, -1);\r\n  if (expr.charAt(propertyRegex.lastIndex) === '.') {\r\n    currentReference = ++referenceCount;\r\n    var ref = '_ref' + currentReference;\r\n    link = '(' + ref + ' = (' + link + ')) == null ? void 0 : ';\r\n  }\r\n  var ref = currentReference;\r\n  link = link.replace('~~insideParens~~', parsePropertyChains(insideParens));\r\n  currentReference = ref;\r\n  return link;\r\n}","code-length":256,"reference":"Handles a function to be called in its correct scope Finds the end of the function and processes the arguments","result":"Parse function expressions.","score":[0.0014,0.0273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseBrackets(link, index, expr) {\r\n  var call = getFunctionCall(expr);\r\n  var insideBrackets = call.slice(1, -1);\r\n  var evaledLink = parsePart(link, index);\r\n  index += 1;\r\n  link = '[~~insideBrackets~~]';\r\n  if (expr.charAt(propertyRegex.lastIndex) === '.') {\r\n    link = parsePart(link, index);\r\n  } else {\r\n    link = '_ref' + currentReference + link;\r\n  }\r\n  link = evaledLink + link;\r\n  var ref = currentReference;\r\n  link = link.replace('~~insideBrackets~~', parsePropertyChains(insideBrackets));\r\n  currentReference = ref;\r\n  return link;\r\n}","code-length":195,"reference":"Handles a bracketed expression to be parsed","result":"Parse the link .","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addReferences(expr) {\r\n  if (referenceCount) {\r\n    var refs = [];\r\n    for (var i = 1; i <= referenceCount; i++) {\r\n      refs.push('_ref' + i);\r\n    }\r\n    expr = 'var ' + refs.join(', ') + ';\\n' + expr;\r\n  }\r\n  return expr;\r\n}","code-length":104,"reference":"Prepends reference variable definitions","result":"Add references to expressions.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn) {\r\n    var pending\r\n    var hasNext\r\n    function next() {\r\n      setTimeout(function() {\r\n        if (pending === false) return\r\n        pending = false\r\n        if (hasNext) {\r\n          hasNext = false\r\n          fn(next)\r\n        }\r\n      }, 50)\r\n    }\r\n    return function() {\r\n      if (pending) return (hasNext = true)\r\n      pending = true\r\n      fn(next)\r\n    }\r\n  }","code-length":133,"reference":"Run once and lastest one","result":"Wrap functions in a function.","score":[0,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assert (t, m) {\r\n  if (!t) {\r\n    var err = new AssertionError(m)\r\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\r\n    throw err\r\n  }\r\n}","code-length":67,"reference":"Minimal assert function\n","result":"Assert the given value.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bindArguments(func) {\r\n  function binder() {\r\n    return func.apply(this, args.concat(slice.call(arguments)));\r\n  }\r\n  var args = slice.call(arguments, 1);\r\n  return binder;\r\n}","code-length":71,"reference":"a custom \"bind\" function to bind arguments to a function without binding the context","result":"Bind arguments to function.","score":[0.0371,0.2265]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getExceptions() {\r\n      const openers = [];\r\n      const closers = [];\r\n      if ( options.braceException ) {\r\n        openers.push('{');\r\n        closers.push('}');\r\n      }\r\n      if ( options.bracketException ) {\r\n        openers.push('[');\r\n        closers.push(']');\r\n      }\r\n      if ( options.parenException ) {\r\n        openers.push('(');\r\n        closers.push(')');\r\n      }\r\n      if ( options.empty ) {\r\n        openers.push(')');\r\n        closers.push('(');\r\n      }\r\n      return {\r\n        openers,\r\n        closers\r\n      };\r\n    }","code-length":197,"reference":"Produces an object with the opener and closer exception values\n","result":"Get the exceptions .","score":[0.0713,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldOpenerHaveSpace( left, right ) {\r\n      if ( sourceCode.isSpaceBetweenTokens( left, right ) ) {\r\n        return false;\r\n      }\r\n      if ( ALWAYS ) {\r\n        if ( astUtils.isClosingParenToken( right ) ) {\r\n          return false;\r\n        }\r\n        return !isOpenerException( right );\r\n      }\r\n      return isOpenerException( right );\r\n    }","code-length":116,"reference":"Determines if an opener paren should have a missing space after it\n","result":"Detect if the opener has space.","score":[0.0845,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldCloserHaveSpace( left, right ) {\r\n      if ( astUtils.isOpeningParenToken( left ) ) {\r\n        return false;\r\n      }\r\n      if ( sourceCode.isSpaceBetweenTokens( left, right ) ) {\r\n        return false;\r\n      }\r\n      if ( ALWAYS ) {\r\n        return !isCloserException( left );\r\n      }\r\n      return isCloserException( left );\r\n    }","code-length":113,"reference":"Determines if an closer paren should have a missing space after it\n","result":"Check if the closure is closed.","score":[0.071,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldOpenerRejectSpace( left, right ) {\r\n      if ( right.type === 'Line' ) {\r\n        return false;\r\n      }\r\n      if ( !astUtils.isTokenOnSameLine( left, right ) ) {\r\n        return false;\r\n      }\r\n      if ( !sourceCode.isSpaceBetweenTokens( left, right ) ) {\r\n        return false;\r\n      }\r\n      if ( ALWAYS ) {\r\n        return isOpenerException( right );\r\n      }\r\n      return !isOpenerException( right );\r\n    }","code-length":146,"reference":"Determines if an opener paren should not have an existing space after it\n","result":"Detect if the function should be called on the opener.","score":[0.0956,0.1181]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldCloserRejectSpace( left, right ) {\r\n      if ( astUtils.isOpeningParenToken( left ) ) {\r\n        return false;\r\n      }\r\n      if ( !astUtils.isTokenOnSameLine( left, right ) ) {\r\n        return false;\r\n      }\r\n      if ( !sourceCode.isSpaceBetweenTokens( left, right ) ) {\r\n        return false;\r\n      }\r\n      if ( ALWAYS ) {\r\n        return isCloserException( left );\r\n      }\r\n      return !isCloserException( left );\r\n    }","code-length":146,"reference":"Determines if an closer paren should not have an existing space after it\n","result":"Test if the closure is closed.","score":[0.0601,0.0813]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineConfigurable ( obj, key, val ) {\r\n    Object.defineProperty(obj, key, {\r\n      configurable: true,\r\n      enumerable: false,\r\n      writable: true,\r\n      value: val\r\n    });\r\n  }","code-length":68,"reference":"set a value as configurable and non-enumerable","result":"Define configurable properties.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ToInteger ( argument ) {\r\n    var number = +argument;\r\n    if ( number !== number ) {\r\n      return 0;\r\n    }\r\n    if ( number === 0 || number === Infinity || number === -Infinity ) {\r\n      return number;\r\n    }\r\n    return ( number >= 0 ? 1 : -1 ) * Math.floor(Math.abs(number));\r\n  }","code-length":105,"reference":"7.1.4 ToInteger","result":"Convert the argument to an integer.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ToLength ( argument ) {\r\n    var len = ToInteger(argument);\r\n    return len <= 0 ? 0 : Math.min(len, Math.pow(2, 53) - 1);\r\n  }","code-length":58,"reference":"7.1.15 ToLength","result":"Avoid recursion.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CreateArrayIterator ( array, kind ) {\r\n    var O = ToObject(array),\r\n      iterator = Object.create(ArrayIteratorPrototype);\r\n    defineInternal(iterator, '[[IteratedObject]]', O);\r\n    defineInternal(iterator, '[[ArrayIteratorNextIndex]]', 0);\r\n    defineInternal(iterator, '[[ArrayIteratorKind]]', kind);\r\n    return iterator;\r\n  }","code-length":105,"reference":"22.1.5.1 CreateArrayIterator Abstract Operation","result":"Create an array iterator.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PromiseResolve () {\r\n    return function F ( resolution ) {\r\n      var promise = F['[[Promise]]'], reactions;\r\n      if ( Type(promise) !== 'object' ) {\r\n        throw TypeError();\r\n      }\r\n      if ( promise['[[PromiseStatus]]'] !== 'unresolved' ) {\r\n        return undefined;\r\n      }\r\n      reactions = promise['[[PromiseResolveReactions]]'];\r\n      defineInternal(promise, '[[PromiseResult]]', resolution);\r\n      defineInternal(promise, '[[PromiseResolveReactions]]', undefined);\r\n      defineInternal(promise, '[[PromiseRejectReactions]]', undefined);\r\n      defineInternal(promise, '[[PromiseStatus]]', 'has-resolution');\r\n      return TriggerPromiseReactions(reactions, resolution);\r\n    };\r\n  }","code-length":201,"reference":"25.4.1.4.1 Promise Resolve Functions","result":"Return resolution.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GetCapabilitiesExecutor () {\r\n    return function F ( resolve, reject ) {\r\n      var promiseCapability = F['[[Capability]]'];\r\n      if ( Type(promiseCapability['[[Resolve]]']) !== 'undefined' ) {\r\n        throw TypeError();\r\n      }\r\n      if ( Type(promiseCapability['[[Reject]]']) !== 'undefined' ) {\r\n        throw TypeError();\r\n      }\r\n      defineInternal(promiseCapability, '[[Resolve]]', resolve);\r\n      defineInternal(promiseCapability, '[[Reject]]', reject);\r\n    };\r\n  }","code-length":142,"reference":"25.4.1.5.2 GetCapabilitiesExecutor Functions","result":"Get the capabilities of the application.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PromiseResolutionHandlerFunction () {\r\n    return function F ( x ) {\r\n      var promise = F['[[Promise]]'],\r\n        fulfillmentHandler = F['[[FulfillmentHandler]]'],\r\n        rejectionHandler = F['[[RejectionHandler]]'],\r\n        selfResolutionError, C, promiseCapability, updateResult;\r\n      if ( SameValue(x, promise) ) {\r\n        selfResolutionError = TypeError();\r\n        return rejectionHandler.call(undefined, selfResolutionError);\r\n      }\r\n      C = promise['[[PromiseConstructor]]'];\r\n      try {\r\n        promiseCapability = NewPromiseCapability(C);\r\n      } catch ( e ) {\r\n        return e;\r\n      }\r\n      try {\r\n        updateResult = UpdatePromiseFromPotentialThenable(x,\r\n          promiseCapability\r\n        );\r\n      } catch ( e ) {\r\n        return e;\r\n      }\r\n      if ( updateResult !== 'not a thenable') {\r\n        return promiseCapability['[[Promise]]'].then(fulfillmentHandler,\r\n          rejectionHandler\r\n        );\r\n      }\r\n      return fulfillmentHandler.call(undefined, x);\r\n    };\r\n  }","code-length":294,"reference":"25.4.5.3.2 PromiseResolutionHandlerFunctions","result":"Create a function to handle promise resolution .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(target, sequence, t) {\r\n            sequence = sequence.split(_.splitRE);\r\n            for (var i=0, e, props; i<sequence.length && (!e||!e.isSequenceStopped()); i++) {\r\n                props = _.parse(sequence[i]);\r\n                if (props) {\r\n                    props.sequence = sequence;\r\n                    if (e){ props.previousEvent = e; }\r\n                    if (t){ props.trigger = t; }\r\n                    _.controls(props, target, sequence, i);\r\n                    e = _.event(target, props);\r\n                }\r\n            }\r\n            return e;\r\n        }","code-length":166,"reference":"custom event stuff","result":"Return target.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(e) {\r\n            var el = e.target, attr,\r\n                type = e.type,\r\n                key = type.indexOf('key') === 0 ? e.which || e.keyCode || '' : '',\r\n                special = _.special[type+key];\r\n            if (el && special) {\r\n                type = special(e, el, el.nodeName.toLowerCase());\r\n                if (!type){ return; }\r\n            }\r\n            el = _.find(el, type),\r\n            attr = _.attr(el, type);\r\n            if (attr) {\r\n                _.all(el, attr, e);\r\n                if (type === 'click' && !_.boxRE.test(el.type)) {\r\n                    e.preventDefault();\r\n                }\r\n            }\r\n        }","code-length":203,"reference":"native DOM and event stuff","result":"Prevent default event.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reportNoEndingSpace( node, token, tokenBefore ) {\r\n    context.report({\r\n      node: node,\r\n      loc: token.loc.start,\r\n      message: 'There should be no space before \\'' + token.value + '\\'',\r\n      fix: function( fixer ) {\r\n        return fixer.removeRange([ tokenBefore.range[ 1 ], token.range[ 0 ] ]);\r\n      }\r\n    });\r\n  }","code-length":115,"reference":"Reports that there shouldn't be a space before the last token\n","result":"Report errors.","score":[0,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reportRequiredBeginningSpace( node, token ) {\r\n    context.report({\r\n      node: node,\r\n      loc: token.loc.start,\r\n      message: 'A space is required after \\'' + token.value + '\\'',\r\n      fix: function( fixer ) {\r\n        return fixer.insertTextAfter( token, ' ' );\r\n      }\r\n    });\r\n  }","code-length":102,"reference":"Reports that there should be a space after the first token\n","result":"Report required beginning spaces.","score":[0,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reportRequiredEndingSpace( node, token ) {\r\n    context.report({\r\n      node: node,\r\n      loc: token.loc.start,\r\n      message: 'A space is required before \\'' + token.value + '\\'',\r\n      fix: function( fixer ) {\r\n        return fixer.insertTextBefore( token, ' ' );\r\n      }\r\n    });\r\n  }","code-length":101,"reference":"Reports that there should be a space before the last token\n","result":"Report required ending space.","score":[0,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateDestinationLonLat ({\r\n  lat,\r\n  lon\r\n}) {\r\n  const latOffset = (getDistance() \/ LAT_DEGREE) * getSign()\r\n  const lonOffset = (getDistance() \/ (LAT_DEGREE * Math.cos(lat))) * getSign()\r\n  return {\r\n    lat: lat + latOffset,\r\n    lon: lon + lonOffset\r\n  }\r\n}","code-length":108,"reference":"Get a random point offset from the origin","result":"Generate destination lon.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (keyParts, hash) {\r\n\t\tfor (var i = 0; i < keyParts.length-1; ++i) {\r\n\t\t\thash = getValue(keyParts[i], hash);\r\n\t\t\tif (typeof(hash) === 'undefined') {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar lastKeyPartIndex = keyParts.length-1;\r\n\t\treturn getValue(keyParts[lastKeyPartIndex], hash)\r\n\t}","code-length":125,"reference":"Get a nested value from the specified object. Returns undefined if not found.","result":"Get the value of a key part.","score":[0.0969,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction gitAuthors (cb) {\r\n  return exec('git log --pretty=\"%an <%ae>\"', function (er, stdout, stderr) {\r\n    if (er || stderr) throw new Error(er || stderr)\r\n    return cb(null, stdout.split('\\n').reverse())\r\n  })\r\n}","code-length":84,"reference":"returns array of strings like \"firstname lastname <email","result":"Identify the author of a project.","score":[0.1383,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction lookupGithubLogin (p, print, callback) {\r\n  var apiURI = 'https:\r\n  var options = { json: true, headers: { 'user-agent': pkg.name + '\/' + pkg.version } }\r\n  if (process.env.OAUTH_TOKEN) {\r\n    options.headers['Authorization'] = 'token ' + process.env.OAUTH_TOKEN.trim()\r\n  }\r\n  function cb (err, p) {\r\n    callback(err, p)\r\n  }\r\n  if (print) process.stdout.write('.')\r\n  request(apiURI + encodeURIComponent(p.email + ' in:email type:user'), options, onEmail)\r\n  function onEmail (err, data) {\r\n    rateLimitExceeded = rateLimitExceeded || data.body.message\r\n    if (!err && data.body.items && data.body.items[0]) {\r\n      p.login = data.body.items[0].login\r\n      return cb(err, p)\r\n    }\r\n    request(apiURI + encodeURIComponent(p.name + ' in:fullname type:user'), options, onName)\r\n  }\r\n  function onName (err, data) {\r\n    rateLimitExceeded = rateLimitExceeded || data.body.message\r\n    if (!err && data.body.items && data.body.items[0]) {\r\n      p.login = data.body.items[0].login\r\n      return cb(err, p)\r\n    }\r\n    cb(err, p)\r\n  }\r\n}","code-length":378,"reference":"look for the email first. if no results, look for the name.","result":"Var rateLimitExceeded.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _unpackOutput(message) {\r\n    if (message.charAt(0) != keyczar_util.VERSION_BYTE) {\r\n        throw new Error('Unsupported version byte: ' + message.charCodeAt(0));\r\n    }\r\n    var keyhash = message.substr(1, keyczar_util.KEYHASH_LENGTH);\r\n    message = message.substr(1 + keyczar_util.KEYHASH_LENGTH);\r\n    return {keyhash: keyhash, message: message};\r\n}","code-length":133,"reference":"Unpacks Keyczar's output format","result":"Unpack output messages.","score":[0.2925,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _rsaHash(publicKey) {\r\n    var md = forge.md.sha1.create();\r\n    _hashBigNumber(md, publicKey.n);\r\n    _hashBigNumber(md, publicKey.e);\r\n    var digest = md.digest();\r\n    return digest.getBytes(keyczar_util.KEYHASH_LENGTH);\r\n}","code-length":95,"reference":"Returns the keyhash for an RSA public key.","result":"Generate the key.","score":[0.0917,0.1333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _makeRsaKey(rsaKey) {\r\n    var key = {\r\n        keyhash: _rsaHash(rsaKey),\r\n        size: rsaKey.n.bitLength()\r\n    };\r\n    key.encrypt = function(plaintext) {\r\n        var tempKey = forge.pki.setRsaPublicKey(rsaKey.n, rsaKey.e);\r\n        var ciphertext = tempKey.encrypt(plaintext, 'RSA-OAEP');\r\n        return _packOutput(key.keyhash, ciphertext);\r\n    };\r\n    key.verify = function(message, signature) {\r\n        signature = _unpackOutput(signature);\r\n        _checkKeyHash(key.keyhash, signature);\r\n        var digest = _mdForSignature(message).digest().getBytes();\r\n        var tempKey = forge.pki.setRsaPublicKey(rsaKey.n, rsaKey.e);\r\n        return tempKey.verify(digest, signature.message);\r\n    };\r\n    return key;\r\n}","code-length":252,"reference":"Returns a key object for an RSA key.","result":"Generate the key.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (!result) {\r\n        var exec = grunt.config.get('exec');\r\n        for (var key in exec) {\r\n          exec[key].cmd = nvmUse + ' && ' + exec[key].cmd;\r\n        }\r\n        grunt.config.set('exec', exec);\r\n      }\r\n    }","code-length":93,"reference":"Extend grunt-exec","result":"Execute the nvm command .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback) {\r\n      var command = '. ' + nvmPath;\r\n      childProcess.exec(command, cmdOpts, function(err, stdout, stderr) {\r\n        if (stderr.indexOf('No such file or directory') !== -1) {\r\n          if (nvmPath === home + '\/.nvm\/nvm.sh') {\r\n            nvmPath = home + '\/nvm\/nvm.sh';\r\n            nvmInit = '. ' + nvmPath + ' && ';\r\n            checkNVM(callback);\r\n          } else {\r\n            grunt[options.errorLevel]('Expected node ' + expected + ', but found v' + actual + '\\nNVM does not appear to be installed.\\nPlease install (https:\r\n          }\r\n        } else {\r\n          callback();\r\n        }\r\n      });\r\n    }","code-length":209,"reference":"Check for NVM","result":"Test node version .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(thisPackage, callback) {\r\n      var command = nvmUse + ' && npm install -g ' + thisPackage;\r\n      childProcess.exec(command, cmdOpts,function(err, stdout, stderr) {\r\n        if (err) { throw err ;}\r\n        grunt.verbose.writeln(stdout);\r\n        grunt.log.oklns('Installed ' + thisPackage);\r\n        callback();\r\n      });\r\n    }","code-length":115,"reference":"Install missing packages","result":"Install a package.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      prompt.start();\r\n      var prop = {\r\n        name: 'yesno',\r\n        message: 'You do not have any node versions installed that satisfy this project\\'s requirements ('.white + expected.yellow + '). Would you like to install the latest compatible version? (y\/n)'.white,\r\n        validator: \/y[es]*|n[o]?\/,\r\n        required: true,\r\n        warning: 'Must respond yes or no'\r\n      };\r\n      prompt.get(prop, function (err, result) {\r\n        result = result.yesno.toLowerCase();\r\n        if (result === 'yes' ||\r\n            result === 'y') {\r\n          nvmInstall();\r\n        } else {\r\n          grunt[options.errorLevel]('Expected node v' + expected + ', but found ' + actual);\r\n        }\r\n      });\r\n    }","code-length":225,"reference":"Prompt to install","result":"Test the node version .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      nvmLs('remote', function() {\r\n        bestMatch = semver.maxSatisfying(remotes, expected);\r\n        nvmUse = nvmInit + 'nvm use ' + bestMatch;\r\n        var command = nvmInit + 'nvm install ' + bestMatch;\r\n        childProcess.exec(command, cmdOpts,function(err, stdout, stderr) {\r\n          if (err) { throw err ;}\r\n          var nodeVersion = stdout.split(' ')[3];\r\n          grunt.log.ok('Installed node v' + bestMatch);\r\n          printVersion(nodeVersion);\r\n          extendExec();\r\n          checkPackages(options.globals);\r\n        });\r\n      });\r\n    }","code-length":185,"reference":"Install latest compatible node version","result":"Test node version .","score":[0.3519,0.3827]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(loc, callback) {\r\n      var command = nvmInit + 'nvm ls';\r\n      if (loc === 'remote') {\r\n        command += '-remote';\r\n      }\r\n      childProcess.exec(command, cmdOpts, function(err, stdout, stderr) {\r\n        var data = stripColorCodes(stdout.toString()).replace(\/\\s+\/g, '|'),\r\n            available = data.split('|');\r\n        for (var i = 0; i < available.length; i++) {\r\n          available[i] = available[i].replace(\/\\s\/g, '');\r\n          var ver = semver.valid(available[i]);\r\n          if (ver) {\r\n            if (loc === 'remote') {\r\n              remotes.push(ver);\r\n            } else if (loc === 'local') {\r\n              locals.push(ver);\r\n            }\r\n          }\r\n        }\r\n        callback();\r\n      });\r\n    }","code-length":239,"reference":"Check for available node versions","result":"Fetch the latest version of a given location.","score":[0,0.0943]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      nvmLs('local', function() {\r\n        var matches = semver.maxSatisfying(locals, expected);\r\n        if (matches) {\r\n          bestMatch = matches;\r\n          nvmUse = nvmInit + 'nvm use ' + bestMatch;\r\n          childProcess.exec(nvmUse, cmdOpts,function(err, stdout, stderr) {\r\n            printVersion(stdout.split(' ')[3]);\r\n            extendExec();\r\n            checkPackages(options.globals);\r\n          });\r\n        } else {\r\n          if (options.alwaysInstall) {\r\n            nvmInstall();\r\n          } else {\r\n            askInstall();\r\n          }\r\n        }\r\n      });\r\n    }","code-length":188,"reference":"Check for compatible node version","result":"Test the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction EachSubject(subject, elements, elementName, opt_noIndex) {\r\n  ProxyBase.call(this);\r\n  this.elementSubjects = [];\r\n  for (var i = 0; i < elements.length; ++i) {\r\n    var es = subjectFactory.newSubject(subject.failureStrategy, elements[i]);\r\n    es.named(elementName + (opt_noIndex ? '' : (' ' + i)) + ' of ' + subject.describe());\r\n    es.failureMessage = subject.failureMessage;\r\n    this.elementSubjects.push(es);\r\n  }\r\n}","code-length":152,"reference":"A subject which executes its assertions on each element of an iterable.\n","result":"Create a subject for each subject.","score":[0.0845,0.2242]}
{"code":"\/*is used to<extra_id_0>\r\nfunction EventualSubject(subject, promise) {\r\n  DeferredSubject.call(this);\r\n  this.subject = subject;\r\n  var self = this;\r\n  this.promise = promise.then(\r\n    function(value) {\r\n      var valueSubject = subjectFactory.newSubject(subject.failureStrategy, value);\r\n      valueSubject.failureMessage = subject.failureMessage;\r\n      self.run(valueSubject);\r\n      return value;\r\n    },\r\n    function(reason) {\r\n      subject.fail('Expected promise ' + subject.describe() +\r\n        ' to succeed, but failed with ' + this.format(reason) + '.');\r\n      return reason;\r\n    }\r\n  );\r\n  this.then = this.promise.then.bind(this.promise);\r\n  this.catch = this.promise.catch.bind(this.promise);\r\n}","code-length":219,"reference":"A class which functions as a subject, but doesn't actually execute any assertions until\nthe promise has resolved. Once the promise succeeds, any method calls will be played back\non the result value of the promise.\n","result":"Create an EventualSubject.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction PromiseSubject(failureStrategy, value) {\r\n  Subject.call(this, failureStrategy, value);\r\n  this.then = this.value.then.bind(this.value);\r\n  this.catch = this.value.catch.bind(this.value);\r\n}","code-length":74,"reference":"Subject subclass which provides assertion methods for promise types.\n","result":"Test promiseSubject.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction doGet(store, key, options = {}) {\r\n  key = store._resolveRefKey(key);\r\n  const { referenceDepth = 1 } = options;\r\n  const cacheKey = `${key}:${referenceDepth}`;\r\n  const shouldCache = !store._isWritable;\r\n  if (shouldCache) {\r\n    if (store._getCache[cacheKey]) {\r\n      return store._getCache[cacheKey];\r\n    }\r\n  }\r\n  let value = property.get(store._data, key);\r\n  if (referenceDepth > 0) {\r\n    value = resolveReferences(store, value, referenceDepth);\r\n  }\r\n  if (shouldCache) {\r\n    store._getCache[cacheKey] = value;\r\n  }\r\n  return value;\r\n}","code-length":200,"reference":"Retrieve value stored at 'key'\n","result":"Resolve references.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveReferences(store, value, depth) {\r\n  if (--depth < 0) {\r\n    return value;\r\n  }\r\n  if (Array.isArray(value)) {\r\n    const n = value.length;\r\n    const v = new Array(n);\r\n    let item;\r\n    for (let i = n - 1; i >= 0; i--) {\r\n      item = value[i];\r\n      v[i] = resolveReferences(\r\n        store,\r\n        store._isRefValue(item) ? property.get(store._data, store._parseRefKey(item)) : item,\r\n        depth\r\n      );\r\n    }\r\n    value = v;\r\n  } else if (isPlainObject(value)) {\r\n    const v = {};\r\n    let item;\r\n    for (const prop in value) {\r\n      item = value[prop];\r\n      v[prop] = resolveReferences(\r\n        store,\r\n        store._isRefValue(item) ? property.get(store._data, store._parseRefKey(item)) : item,\r\n        depth\r\n      );\r\n    }\r\n    value = v;\r\n  }\r\n  return value;\r\n}","code-length":301,"reference":"Resolve all references in 'value' up to max 'depth'\n","result":"Resolve references in the store.","score":[0.169,0.2972]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatString(value, options) {\r\n  var opts = options || {};\r\n  var result = value.replace(\/[\\0-\\37]\/g, function (ch) {\r\n    switch (ch) {\r\n      case '\\n': return '\\\\n';\r\n      case '\\r': return '\\\\r';\r\n      case '\\t': return '\\\\t';\r\n      case '\\b': return '\\\\b';\r\n      case '\\v': return '\\\\v';\r\n      case '\\f': return '\\\\f';\r\n      default: return '\\\\' + ch.charCodeAt(0).toString(8);\r\n    }\r\n  });\r\n  if (opts.clip && result.length > opts.clip) {\r\n    result = result.slice(0, Math.max(0, opts.clip - 3)) + '...';\r\n  }\r\n  return '\"' + result + '\"';\r\n}","code-length":212,"reference":"Convert a string value to a printable string representation.\n","result":"Format strings.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatObject(value, options) {\r\n  if (value === undefined) {\r\n    return 'undefined';\r\n  }\r\n  if (value === null) {\r\n    return 'null';\r\n  }\r\n  if (typeof(value) == 'object') {\r\n    if (value instanceof RegExp || value instanceof Date) {\r\n      return value + '';\r\n    }\r\n    var opts = options || {};\r\n    var innerOpts = Object.assign({}, opts, { clip: false });\r\n    var proto = Object.getPrototypeOf(value);\r\n    if (proto === Object.prototype || proto === null) {\r\n      var keys = [];\r\n      for (var k in value) {\r\n        keys.push(k);\r\n      }\r\n      keys.sort();\r\n      var parts = ['{'];\r\n      var length = 4;\r\n      for (var i = 0; i < keys.length; ++i) {\r\n        var key = keys[i];\r\n        var sep = i > 0 ? ', ' : ' ';\r\n        var s = registry.format(value[key], innerOpts);\r\n        length += sep.length + key.length + 2 + s.length;\r\n        if (opts.clip && opts.clip < length) {\r\n          parts.push(', ...');\r\n          break;\r\n        }\r\n        parts.push(sep);\r\n        parts.push(key);\r\n        parts.push(': ');\r\n        parts.push(s);\r\n      }\r\n      if (keys.length > 0) {\r\n        parts.push(' ');\r\n      }\r\n      parts.push('}');\r\n      return parts.join('');\r\n    }\r\n    if (typeof value.toString == 'function') {\r\n      return value.toString();\r\n    }\r\n    return String(value);\r\n  }\r\n  throw new Error('Implement');\r\n}","code-length":467,"reference":"Convert an object value to a printable string representation.\n","result":"Function registry.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _exportPublicKey(key) {\r\n    var t = key.metadata.type;\r\n    var p = key.metadata.purpose;\r\n    if (!(t == keyczar.TYPE_RSA_PRIVATE && (p == keyczar.PURPOSE_DECRYPT_ENCRYPT || p == keyczar.PURPOSE_SIGN_VERIFY))) {\r\n        throw new Error('Unsupported key type\/purpose:' + t + '\/' + p);\r\n    }\r\n    var publicPurpose = keyczar.PURPOSE_ENCRYPT;\r\n    if (p == keyczar.PURPOSE_SIGN_VERIFY) {\r\n        publicPurpose = keyczar.PURPOSE_VERIFY;\r\n    }\r\n    var metadata = {\r\n        name: key.metadata.name,\r\n        purpose: publicPurpose,\r\n        type: keyczar.TYPE_RSA_PUBLIC,\r\n        encrypted: false,\r\n        versions: key.metadata.versions\r\n    };\r\n    if (key.metadata.versions.length != 1) {\r\n        throw new Error('TODO: Support key sets with multiple keys');\r\n    }\r\n    var primaryVersion = _getPrimaryVersion(key.metadata);\r\n    var data = {\r\n        meta: JSON.stringify(metadata)\r\n    };\r\n    data[String(primaryVersion)] = key.primary.exportPublicKeyJson();\r\n    return _makeKeyczar(data);\r\n}","code-length":356,"reference":"Return a new keyczar containing the public part of key, which must be an asymmetric key.","result":"Export public keys.","score":[0.0054,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _getPrimaryVersion(metadata) {\r\n    var primaryVersion = null;\r\n    for (var i = 0; i < metadata.versions.length; i++) {\r\n        if (metadata.versions[i].status == STATUS_PRIMARY) {\r\n            if (primaryVersion !== null) {\r\n                throw new Error('Invalid key: multiple primary keys');\r\n            }\r\n            primaryVersion = metadata.versions[i].versionNumber;\r\n        }\r\n    }\r\n    if (primaryVersion === null) {\r\n        throw new Error('No primary key');\r\n    }\r\n    return primaryVersion;\r\n}","code-length":154,"reference":"find the primary version; ensure we don't have more than one","result":"Determine the primary key.","score":[0.0785,0.182]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatMap(value, options) {\r\n  return 'Map(' + registry.format(Array.from(value.entries()), options) + ')';\r\n}","code-length":47,"reference":"Convert a map value to a printable string representation.\n","result":"Format the map.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction load(store, key, url, options) {\r\n  const { cacheControl, rejectOnError, retry, timeout } = options;\r\n  options.id = key;\r\n  store.debug('load %s from %s', key, url);\r\n  return agent\r\n    .get(url, options)\r\n    .timeout(timeout)\r\n    .retry(retry)\r\n    .then(res => {\r\n      if (store.destroyed) {\r\n        throw Error('store destroyed');\r\n      }\r\n      store.debug('loaded \"%s\" in %dms', key, res.duration);\r\n      if (res.body) {\r\n        if (res.headers && 'expires' in res.headers) {\r\n          res.body[store.EXPIRY_KEY] = generateExpiry(res.headers, cacheControl);\r\n        }\r\n        store.set(key, res.body, options);\r\n      }\r\n      return res;\r\n    })\r\n    .catch(err => {\r\n      if (store.destroyed) {\r\n        throw err;\r\n      }\r\n      store.debug('unable to load \"%s\" from %s', key, url);\r\n      if (rejectOnError) {\r\n        store.set(key, undefined, options);\r\n      }\r\n      throw err;\r\n    });\r\n}","code-length":329,"reference":"Load data from 'url' and store at 'key'\n","result":"Load data from a url.","score":[0.2716,0.3824]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeCacheControl(cacheControl, defaultCacheControl) {\r\n  if (cacheControl == null) {\r\n    return Object.assign({}, defaultCacheControl);\r\n  }\r\n  return {\r\n    maxAge: 'maxAge' in cacheControl ? cacheControl.maxAge : defaultCacheControl.maxAge,\r\n    staleIfError: 'staleIfError' in cacheControl ? cacheControl.staleIfError : defaultCacheControl.staleIfError\r\n  };\r\n}","code-length":122,"reference":"Merge 'cacheControl' with defaults\n","result":"Return cacheControl.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateExpiry(headers = {}, defaultCacheControl) {\r\n  const cacheControl = mergeCacheControl(parseCacheControl(headers['cache-control']), defaultCacheControl);\r\n  const now = Date.now();\r\n  let expires = now;\r\n  if (headers.expires) {\r\n    expires = typeof headers.expires === 'string' ? Number(new Date(headers.expires)) : headers.expires;\r\n  }\r\n  if (now >= expires) {\r\n    expires = now + cacheControl.maxAge;\r\n  }\r\n  return {\r\n    expires,\r\n    expiresIfError: expires + cacheControl.staleIfError\r\n  };\r\n}","code-length":168,"reference":"Generate expiry object from 'headers'\n","result":"Generate the expiry.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateResponseHeaders(expiry = {}, defaultCacheControl, isError) {\r\n  const now = Date.now();\r\n  let maxAge;\r\n  if (isError) {\r\n    maxAge =\r\n      expiry && expiry.expiresIfError > now && expiry.expiresIfError - now < defaultCacheControl.maxAge\r\n        ? Math.ceil((expiry.expiresIfError - now) \/ 1000)\r\n        : defaultCacheControl.maxAge \/ 1000;\r\n  } else {\r\n    maxAge =\r\n      expiry && expiry.expires > now ? Math.ceil((expiry.expires - now) \/ 1000) : defaultCacheControl.maxAge \/ 1000;\r\n  }\r\n  return {\r\n    'cache-control': `public, max-age=${maxAge}`,\r\n    expires: new Date(now + maxAge * 1000).toUTCString()\r\n  };\r\n}","code-length":215,"reference":"Generate serialized headers object for response\n","result":"Generate response headers.","score":[0.1786,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hasExpired(expiry, isError) {\r\n  if (!expiry) {\r\n    return true;\r\n  }\r\n  return Math.ceil(Date.now() \/ 1000) * 1000 > (isError ? expiry.expiresIfError : expiry.expires);\r\n}","code-length":72,"reference":"Check if expired\n","result":"Check if a value has expired.","score":[0.273,0.5682]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatSet(value, options) {\r\n  return 'Set(' + registry.format(Array.from(value.values()), options) + ')';\r\n}","code-length":47,"reference":"Convert a set value to a printable string representation.\n","result":"Format the set.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatArray(value, options) {\r\n  var opts = options || {};\r\n  var innerOpts = Object.assign({}, opts, { clip: false });\r\n  var parts = ['['];\r\n  var length = 2;\r\n  for (var i = 0; i < value.length; ++i) {\r\n    var sep = i > 0 ? ', ' : '';\r\n    var s = registry.format(value[i], innerOpts);\r\n    length += sep.length + s.length;\r\n    if (opts.clip && opts.clip < length) {\r\n      parts.push(', ...');\r\n      break;\r\n    }\r\n    parts.push(sep);\r\n    parts.push(s);\r\n  }\r\n  parts.push(']');\r\n  return parts.join('');\r\n}","code-length":206,"reference":"Convert an array value to a printable string representation.\n","result":"Format array values.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reset(store, data) {\r\n  store.debug('reset');\r\n  store._data = data;\r\n  store.changed = true;\r\n}","code-length":47,"reference":"Reset underlying 'data'\n","result":"Reset the data.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction serialise(key, data, config) {\r\n  if (isPlainObject(data)) {\r\n    const obj = {};\r\n    for (const prop in data) {\r\n      const keyChain = key ? `${key}\/${prop}` : prop;\r\n      const value = data[prop];\r\n      if (config[keyChain] !== false) {\r\n        if (isPlainObject(value)) {\r\n          obj[prop] = serialise(keyChain, value, config);\r\n        } else if (value != null && typeof value === 'object' && 'toJSON' in value) {\r\n          obj[prop] = value.toJSON();\r\n        } else {\r\n          obj[prop] = value;\r\n        }\r\n      }\r\n    }\r\n    return obj;\r\n  }\r\n  return config[key] !== false ? data : null;\r\n}","code-length":219,"reference":"Retrieve serialisable 'data'\n","result":"Serialize data.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction explode(store, data) {\r\n  if (isPlainObject(data)) {\r\n    const obj = {};\r\n    for (const prop in data) {\r\n      obj[prop] = explode(store, data[prop]);\r\n    }\r\n    return obj;\r\n  } else if (Array.isArray(data)) {\r\n    return data.map(value => explode(store, value));\r\n  } else if (store._isRefValue(data)) {\r\n    return explode(store, store.get(store._parseRefKey(data)));\r\n  }\r\n  return data;\r\n}","code-length":154,"reference":"Resolve all nested references for 'data'\n","result":"Explode data.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Subject(failureStrategy, value) {\r\n  this.failureStrategy = failureStrategy;\r\n  this.value = value;\r\n  this.name = null;\r\n  this.format = format;\r\n  this.failureMessage = null;\r\n}","code-length":69,"reference":"Represents the value being checked, and provides assertion methods. Can be subclassed to\nprovide assertion methods that are type-specific.\n","result":"Create a subject.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof User)){\r\n      return new User(json);\r\n    }\r\n        if(User.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":74,"reference":"FamilySearch user.\n\n","result":"Initialize.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n        for (var fls in configs) {\r\n            dirName = utils.folderName(configs[fls]['input'], configs[fls]['folderName']);\r\n            dirType = configs[fls]['type'];\r\n            destFolderDir = path.join(configs[fls]['destinationSourcePath'], dirName);\r\n            destDir = configs[fls]['destinationSourcePath'];\r\n            tmpDir = configs[fls]['tempFolderPath'];\r\n            tempFolderName = utils.getBaseFolderName(tmpDir);\r\n            refSrcDir = configs[fls]['refrenceSourcePath'];\r\n            ignoreExtentions = configs[fls]['ignoreExts'] || [];\r\n            ignoreFolders = configs[fls]['ignoreFolders'] || [];\r\n            contentReplaceRegx = new RegExp(utils.regxContent(configs[fls]['replaceContent']), 'g');\r\n            if (configs[fls]['replaceContent']) {\r\n                replaceContentLength = Object.keys(configs[fls]['replaceContent']).length;\r\n            }\r\n            console.log(':::~~' + fls + ':::~~');\r\n            folderSync(configs[fls]);\r\n        }\r\n    }","code-length":291,"reference":"initilize create directory process","result":"Generate the folder .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (fls) {\r\n        if (fs.existsSync(destFolderDir)) {\r\n            console.log(':::~~' + dirName + ' exists, please pick another name or delete previous to create new~~:::')\r\n            deferred.reject(fls.type + ' exists, please pick another name.');\r\n        } else {\r\n            console.log(':::~~' + dirName + ' does not exists, creating new~~:::');\r\n            if (!fs.existsSync(destFolderDir)) {\r\n                fse.ensureDirSync(destFolderDir);\r\n                console.log(':::~~Created new directory:' + fls.type + \"\/\" + dirName + '~~:::');\r\n            }\r\n            copyRefToTemp();\r\n            updateTempSubDirNames(fls);\r\n            copyTempToDest();\r\n            deferred.resolve('successfuly created directory');\r\n        }\r\n        return deferred.promise;\r\n    }","code-length":231,"reference":"sync folder to create new directories with provided Configurations\n","result":"Create a new folder.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n        fse.emptyDirSync(tmpDir);\r\n        fse.copySync(refSrcDir, tmpDir, { overwrite: true }, err => {\r\n            if (err) {\r\n                console.log(':::~~error in copying to temp directory:' + err + '~~:::');\r\n                fse.removeSync(destFolderDir);\r\n                fse.emptyDirSync(tmpDir);\r\n                deferred.reject('Error in copying to temp directory');\r\n            }\r\n            console.log(':::~~ temp directory created~~:::');\r\n        });\r\n    }","code-length":150,"reference":"Copy refrence directory in temporary directory","result":"Create a new file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (oldPath, fls) {\r\n        console.log(\":::~~processing your temp folder and file~~:::\"+oldPath);\r\n        var parsedPath = updateFileNamePath(path.parse(oldPath), fls);\r\n        var newPath = path.format(parsedPath);\r\n        var firstFolderName = utils.getFirstFolderName(oldPath, tempFolderName);\r\n        fs.renameSync(oldPath, newPath);\r\n        if (replaceContentLength > 0 && ignoreExtentions.indexOf(parsedPath.ext) < 0 && ignoreFolders.indexOf(firstFolderName) < 0) {\r\n            console.log(\":::~~writing your temp file~~:::\"+newPath);\r\n            var oldContent = fs.readFileSync(newPath, 'utf8');\r\n            var newContent = updateFileContent(oldContent, fls.replaceContent, fls);\r\n            fs.writeFileSync(newPath, newContent);\r\n        }else{\r\n            console.log(\":::~~skipping writing of your temp file~~:::\"+newPath);\r\n        }\r\n    }","code-length":258,"reference":"Process files that were recently copied in temp directory\n","result":"Process your folder and file.","score":[0.108,0.0581]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (parsedPath, fls) {\r\n        var newName = \"\";\r\n        var fileConfigs = \"\";\r\n        var folderDirArray = getNestedFolderName(parsedPath);\r\n        parsedPath['folderName'] = utils.getBaseFolderName(parsedPath.dir) != tempFolderName ? utils.getBaseFolderName(parsedPath.dir) : \"\";\r\n        if (folderDirArray == \"base\" && fls.replaceFileName[parsedPath.base]) {\r\n            fileConfigs = fls.replaceFileName[parsedPath.base];\r\n        } else if (Array.isArray(folderDirArray)) {\r\n            var replaceFileNameArray = fls.replaceFileName;\r\n            for (var i in folderDirArray) {\r\n                if (replaceFileNameArray[folderDirArray[i]] && Object.keys(replaceFileNameArray[folderDirArray[i]]).length > 0) {\r\n                    replaceFileNameArray = replaceFileNameArray[folderDirArray[i]];\r\n                } else {\r\n                    replaceFileNameArray = [];\r\n                    break;\r\n                }\r\n            }\r\n            if (replaceFileNameArray && replaceFileNameArray[parsedPath.base]) {\r\n                fileConfigs = replaceFileNameArray[parsedPath.base];\r\n            } else {\r\n                fileConfigs = [];\r\n            }\r\n        } else {\r\n            fileConfigs = []\r\n        }\r\n        console.log(\":::~~Configurations from replaceFileName~~:::\" +fileConfigs);\r\n        newName = utils.getupdatedFileName(parsedPath.name, fileConfigs, fls.input);\r\n        parsedPath.base = newName + parsedPath.ext;\r\n        parsedPath.name = newName;\r\n        return parsedPath;\r\n    }","code-length":407,"reference":"update refrence directory files names as per config provided by replaceFileName key\n","result":"Replace files in a folder.","score":[0.0593,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (parsedPath) {\r\n        var tempPathArray = tmpDir.split(\"\\\\\");\r\n        var parsedPathArray = parsedPath.dir.split(\"\\\\\");\r\n        if (parseInt(tempPathArray.length) === parseInt(parsedPathArray.length)) {\r\n            return \"base\";\r\n        } else if (parseInt(tempPathArray.length) < parseInt(parsedPathArray.length)) {\r\n            var folderNameArray = [];\r\n            for (var i in parsedPathArray) {\r\n                if (i > parseInt(tempPathArray.length) - 1) {\r\n                    folderNameArray.push(parsedPathArray[i]);\r\n                }\r\n            }\r\n            return folderNameArray;\r\n        }\r\n    }","code-length":181,"reference":"get array of folders from base temp path\n","result":"Create a temporary folder .","score":[0,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (oldContent, replaceConfig, fls) {\r\n        var newContent = oldContent.replace(contentReplaceRegx, function (e) {\r\n            for (var cont in replaceConfig) {\r\n                var contRegex = new RegExp(cont, 'g');\r\n                if (e.match(contRegex)) {\r\n                    var replaceValue = utils.getReplacableContent(fls.input, replaceConfig[cont]);\r\n                    return replaceValue;\r\n                }\r\n            }\r\n        });\r\n        return newContent;\r\n    }","code-length":136,"reference":"update content of refrence directory files as per config provided by replaceContent key\n","result":"Replace content.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n        fse.emptyDirSync(destFolderDir);\r\n        fse.copySync(tmpDir, destFolderDir, { overwrite: true }, err => {\r\n            if (err) {\r\n                console.log(':::~~error in copying to destination directory:' + err + '~~:::');\r\n                fse.removeSync(destFolderDir);\r\n                fse.emptyDirSync(tmpDir);\r\n                deferred.reject('Error in copying to destination directory');\r\n            }\r\n            console.log(':::~~ destination directory created:' + dirName + '~~:::');\r\n        });\r\n        fse.emptyDirSync(tmpDir);\r\n        console.log(':::~~Created new ' + dirType + \" \/ \" + dirName + ':::~~');\r\n    }","code-length":197,"reference":"copy data from writed temp directory to destination drive","result":"Create a new directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scan(text) {\r\n    let sr = SReader.create(text);\r\n    let tokens = [];\r\n    while (!sr.isDone()) {\r\n        tokens.push(readNext(sr));\r\n    }\r\n    return tokens;\r\n}","code-length":72,"reference":"string => array","result":"Scan a text.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction KeystoneClient(url, options) {\r\n  options = options || {};\r\n  if (options.username) {\r\n    if (!options.password && !options.apiKey) {\r\n      throw new Error('If username is provided you also need to provide password or apiKey');\r\n    }\r\n  }\r\n  this._url = url;\r\n  this._username = options.username;\r\n  this._apiKey = options.apiKey;\r\n  this._password = options.password;\r\n  this._extraArgs = options.extraArgs || {};\r\n  this._cacheTokenFor = options.cacheTokenFor || DEFAULT_CACHE_TOKEN_FOR;\r\n  this._token = null;\r\n  this._tokenExpires = null;\r\n  this._refreshTokenCompletions = [];\r\n  this._tokenUpdated = 0;\r\n  this._tenantId = null;\r\n  this._serviceCatalog = [];\r\n}","code-length":228,"reference":"OpenStack Keystone Identity API client.\n\n","result":"Throw new Error.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findAllParents( p ) {\r\n\tvar lastParent = p[ 0 ];\r\n\tvar lastParentsParent = parents[ lastParent ];\r\n\tif ( lastParentsParent === undefined ) {\r\n\t\treturn p;\r\n\t} else {\r\n\t\tp.unshift( lastParentsParent );\r\n\t\treturn findAllParents( p );\r\n\t}\r\n}","code-length":96,"reference":"A recursive function that finds all the parents of a given class.\n\n","result":"Find all the parents of a node.","score":[0.329,0.5205]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findDirectChildren( className ) {\r\n\tvar children = [];\r\n\tfor ( var longname in parents ) {\r\n\t\tif ( parents[ longname ] === className ) {\r\n\t\t\tchildren.push( longname );\r\n\t\t}\r\n\t}\r\n\treturn children;\r\n}","code-length":81,"reference":"Finds all the direct children of a given class name.\n\n","result":"Find direct children of a class.","score":[0.3102,0.5042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeHierarchyList( classes ) {\r\n\tif ( classes.length === 0 ) {\r\n\t\treturn '';\r\n\t} else {\r\n\t\tvar className = classes.shift();\r\n\t\treturn '<ul><li>' + linkTo( className ) + ' ' + makeHierarchyList( classes ) + '<\/li><\/ul>'\r\n\t}\r\n}","code-length":91,"reference":"Recursive function that creates a nested list of a class' parents.\n\n","result":"Create a list of classes to display in the listing.","score":[0.1537,0.2896]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeChildrenList( classes ) {\r\n\tvar list = '<ul>';\r\n\tclasses.forEach( function ( className ) {\r\n\t\tlist += '<li>' + linkTo( className ) + '<\/li>';\r\n\t})\r\n\tlist += '<\/ul>';\r\n\treturn list;\r\n}","code-length":82,"reference":"Creates a list of child classes.\n\n","result":"Create the children list.","score":[0,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ( e ) {\r\n\t\tvar doclet = e.doclet;\r\n\t\tif (\r\n\t\t\tdoclet.kind === 'class' &&\r\n\t\t\tdoclet.augments !== undefined &&\r\n\t\t\tdoclet.augments.length > 0\r\n\t\t) {\r\n\t\t\tparents[ doclet.longname ] = doclet.augments[ 0 ];\r\n\t\t}\r\n\t}","code-length":104,"reference":"Add names to the parents map for every new doclet","result":"Detect class hierarchy.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof Tag)){\r\n      return new Tag(json);\r\n    }\r\n        if(Tag.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":74,"reference":"A tag in the FamilySearch system.\n\n","result":"Initialize a new instance of a tag.","score":[0,0.082]}
{"code":"\/*is used to<extra_id_0>\r\nfunction gotOption (option) {\r\n    if (map[option]) {\r\n      option = map[option]\r\n      var name = option[0]\r\n      var value = true\r\n      var count = option[2]\r\n      while (count--) {\r\n        value = argv[++index]\r\n        if (argv.length === index) {\r\n          return cli.error('The \"' + name + '\" option requires an argument.')\r\n        }\r\n      }\r\n      var type = option[1]\r\n      if (type === 'Array') {\r\n        value = value.split(',')\r\n      } else if (type === 'RegExp') {\r\n        try {\r\n          value = new RegExp(value)\r\n        } catch (e) {\r\n          return cli.error('The \"' + name + '\" option received an invalid expression: \"' + value + '\".')\r\n        }\r\n      } else if (type === 'Number') {\r\n        var number = value * 1\r\n        if (isNaN(number)) {\r\n          return cli.error('The \"' + name + '\" option received a non-numerical argument: \"' + value + '\".')\r\n        }\r\n      }\r\n      args[name] = value\r\n    } else {\r\n      return cli.error('Unknown option: \"' + option + '\".')\r\n    }\r\n  }","code-length":333,"reference":"Handle the event of an option being seen.","result":"Parse the command line arguments.","score":[0.1319,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof Error)){\r\n      return new Error(json);\r\n    }\r\n        if(Error.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":74,"reference":"A common representation of an error on the FamilySearch platform.\n\n","result":"Construct error objects.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof ChildAndParentsRelationship)){\r\n      return new ChildAndParentsRelationship(json);\r\n    }\r\n        if(ChildAndParentsRelationship.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":83,"reference":"The FamilySearch-proprietary model for a relationship between a child and a pair of parents.\n\n","result":"Initialize.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof ArtifactMetadata)){\r\n      return new ArtifactMetadata(json);\r\n    }\r\n        if(ArtifactMetadata.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":77,"reference":"A representation of metadata about an artifact such as a memory.\n\n","result":"Initialize a new instance of ArtifactMetadata.","score":[0.0998,0.0952]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof FeatureSet)){\r\n      return new FeatureSet(json);\r\n    }\r\n        if(FeatureSet.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":77,"reference":"A description of a FamilySearch feature.\n\n","result":"Initialize a new instance of this class.","score":[0.1921,0.1639]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (key) {\r\n\t\t\tvar tmp = window.document.cookie.match((new RegExp(key + '=[^;]+($|;)', 'gi')));\r\n\t\t\tif (!tmp || !tmp[0]) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else {\r\n\t\t\t\treturn window.unescape(tmp[0].substring(key.length + 1, tmp[0].length).replace(';', '')) || null;\r\n\t\t\t}\r\n\t\t}","code-length":121,"reference":"Get a cookie","result":"Retrieve a cookie value.","score":[0.4518,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, func, pluginName) {\r\n\t\t\t\t\tif(pluginName !== undefined) {\r\n\t\t\t\t\t\tcurrentPluginName = pluginName;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar eventCurrentPluginName = currentPluginName,\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmyEventFunc = function() {\r\n\t\t\t\t\t\t\tvar pubsubCore = pubsub.getCore();\r\n\t\t\t\t\t\t\tcurrentPluginName = eventCurrentPluginName;\r\n\t\t\t\t\t\t\tfunc.apply((pubsubCore? pubsubCore(): pubsub), arguments);\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tpluginBindings[this.pluginName] = pluginBindings[this.pluginName] || [];\r\n\t\t\t\t\tpluginBindings[this.pluginName].push({ name: name, func: myEventFunc });\r\n\t\t\t\t\tpubsub.on(name, myEventFunc);\r\n\t\t\t\t}","code-length":198,"reference":"Listen to events in the events manager","result":"Bind events to pubsub.","score":[0.1795,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof ChangeInfo)){\r\n      return new ChangeInfo(json);\r\n    }\r\n        if(ChangeInfo.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":77,"reference":"Information about a change.\n\n","result":"Initialize a new instance of ChangeInfo.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(repo) {\r\n\treturn p.spawn('git', ['remote', 'show', program.remote], CHILD_IGNORE).then(function() {\r\n\t\t\r\n\t}, function(e) {\r\n\t\t\r\n\t\treturn p.spawn('git', ['remote','add',program.remote,'git@github.com:' + repo]);\r\n\t});\r\n}","code-length":97,"reference":"Ensure that there is a github remote, named 'github'.","result":"Create a new remote.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(repo, branchname) {\r\n\treturn ensureRemote(repo).then(function() {\r\n\t\treturn p.spawn('git', ['push', program.remote, 'HEAD:refs\/heads\/' + branchname], CHILD_IGNORE);\r\n\t});\r\n}","code-length":73,"reference":"Push to github.","result":"Create a new branch.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runSync () {\r\n    for (runIndex = 0; runIndex < sampleSize; runIndex++) {\r\n      fn.call(child)\r\n    }\r\n    setTimeout(finishChild, 0)\r\n  }","code-length":61,"reference":"Run the current child's test function synchronously.","result":"Run the sync function.","score":[0.2134,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runAsync () {\r\n    if (runIndex++ < sampleSize) {\r\n      fn.call(child, function () {\r\n        setTimeout(runAsync, 0)\r\n      })\r\n    } else {\r\n      setTimeout(finishChild, 0)\r\n    }\r\n  }","code-length":78,"reference":"Run the current child's test function asynchronously.","result":"Run the function asynchronously.","score":[0.2809,0.5597]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof Comment)){\r\n      return new Comment(json);\r\n    }\r\n        if(Comment.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":74,"reference":"Comment on a discussion\n\n","result":"Initialize.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction watch (dir) {\r\n  if (!ignoreDir.test(dir) && !map[dir]) {\r\n    fs.lstat(dir, function (e, stat) {\r\n      if (!e) {\r\n        if (stat.isSymbolicLink()) {\r\n          var source = dir\r\n          fs.readlink(source, function (e, link) {\r\n            if (!e) {\r\n              var dest = link\r\n              if (dest[0] !== '\/') {\r\n                while (dest.substr(0, 3) === '..\/') {\r\n                  dest = dest.substr(3)\r\n                  source = source.replace(\/\\\/[^\\\/]+$\/, '')\r\n                }\r\n                if (dest.substr(0, 2) === '.\/') {\r\n                  dest = dest.substr(2)\r\n                }\r\n                dest = source + '\/' + dest\r\n              }\r\n              watch(dest)\r\n            }\r\n          })\r\n        } else if (stat.isDirectory()) {\r\n          addDir(dir, stat)\r\n        } else {\r\n          dir = dirname(dir)\r\n          map[dir] = Math.max(map[dir], stat.mtime.getTime())\r\n        }\r\n      }\r\n    })\r\n  }\r\n}","code-length":316,"reference":"Recurse to find directories we can watch.","result":"Watch a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addDir (dir, stat) {\r\n  var mtime = stat.mtime.getTime()\r\n  if (!map[dir] && list.length <= maxListSize) {\r\n    map[dir] = mtime\r\n    list.push(dir)\r\n    clearTimeout(sortList.timer)\r\n    sortList.timer = setTimeout(sortList, checkInterval)\r\n    fs.readdir(dir, function (e, files) {\r\n      if (!e) {\r\n        files.forEach(function (file) {\r\n          watch(dir + '\/' + file)\r\n        })\r\n      }\r\n    })\r\n  }\r\n}","code-length":164,"reference":"Add a watchable directory to the map and list of directories we're watching.","result":"Watch directories.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startWatches () {\r\n  list.forEach(function (dir, i) {\r\n    if (i < maxFsWatches) {\r\n      try {\r\n        fs.watch(dir, function (op, file) {\r\n          notify(dir + '\/' + file)\r\n        })\r\n      } catch (e) {\r\n      }\r\n    }\r\n  })\r\n}","code-length":105,"reference":"Iterate over the age-prioritized list, and start fs watches.","result":"Start watchers.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkDir () {\r\n  var n = indexes[i]\r\n  if (i > 44) {\r\n    indexes[i] = (indexes[i] + 5) % list.length\r\n  }\r\n  i = (i + 1) % indexes.length\r\n  var dir = list[n]\r\n  if (dir) {\r\n    fs.stat(dir, function (e, stat) {\r\n      if (!e && (stat.mtime > okToNotifyAfter)) {\r\n        fs.readdir(dir, function (e, files) {\r\n          if (!e) {\r\n            files.forEach(function (file) {\r\n              var path = dir + '\/' + file\r\n              fs.stat(path, function (e, stat) {\r\n                if (!e && (stat.mtime > okToNotifyAfter)) {\r\n                  notify(path)\r\n                }\r\n              })\r\n            })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n}","code-length":253,"reference":"Check a directory for changes.","result":"Check if a directory is checked.","score":[0.3021,0.5011]}
{"code":"\/*is used to<extra_id_0>\r\nfunction notify (path) {\r\n  var now = Date.now()\r\n  if ((now > okToNotifyAfter) && !ignoreFile.test(path)) {\r\n    process.send(path)\r\n    okToNotifyAfter = now + notifyInterval\r\n    sortList()\r\n  }\r\n}","code-length":81,"reference":"Notify the master process that something changed.","result":"Notify the process.","score":[0.1522,0.2841]}
{"code":"\/*is used to<extra_id_0>\r\nfunction decorateFn (fn) {\r\n  fn.returns = function (value) {\r\n    fn._returns = value\r\n    return fn\r\n  }\r\n  return fn\r\n}","code-length":53,"reference":"Decorate a mock function with chainable methods.","result":"Decorate functions.","score":[0.041,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MockDate (value) {\r\n  var innerDate\r\n  if (arguments.length) {\r\n    innerDate = new timers.Date(value)\r\n  } else if (global.Date === timers.Date) {\r\n    innerDate = new timers.Date()\r\n  } else {\r\n    innerDate = new timers.Date(mock.time._CURRENT_TIME)\r\n  }\r\n  Object.defineProperty(this, '_INNER_DATE', {\r\n    enumerable: false,\r\n    value: innerDate\r\n  })\r\n}","code-length":139,"reference":"Construct a `MockDate` using a `Date` constructor value.","result":"Mock Date objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction moveTime () {\r\n  if (mock.time._SPEED) {\r\n    mock.time._PREVIOUS_TIME = realNow()\r\n    setTimeout(function () {\r\n      var now = realNow()\r\n      var elapsed = now - mock.time._PREVIOUS_TIME\r\n      if (elapsed) {\r\n        var add = elapsed * mock.time._SPEED\r\n        mock.time.add(add)\r\n      }\r\n      moveTime()\r\n    }, 0)\r\n  }\r\n}","code-length":133,"reference":"If mock time is moving forward, schedule a time check.","result":"Move time.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getScheduler (isInterval) {\r\n  return function (fn, time) {\r\n    schedules.push({\r\n      id: ++schedules.id,\r\n      fn: fn,\r\n      time: Date.now() + time,\r\n      interval: isInterval ? time : false\r\n    })\r\n  }\r\n}","code-length":88,"reference":"The `getScheduler` returns mocks for `setTimeout` and `setInterval`.","result":"Create a scheduler.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getUnscheduler () {\r\n  return function (id) {\r\n    for (var i = 0, l = schedules.length; i < l; i++) {\r\n      var schedule = schedules[i]\r\n      if (schedule.id === id) {\r\n        schedules.splice(i, 1)\r\n        break\r\n      }\r\n    }\r\n  }\r\n}","code-length":98,"reference":"The `getUnscheduler` returns mocks for `clearTimeout` and `clearInterval`.","result":"Unschedule the scheduler.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction runSchedules () {\r\n  schedules.sort(function (a, b) {\r\n    return b.time - a.time\r\n  })\r\n  var minNewTime = Number.MAX_VALUE\r\n  var i = schedules.length - 1\r\n  var schedule = schedules[i]\r\n  while (schedule && (schedule.time <= mock.time._CURRENT_TIME)) {\r\n    schedule.fn()\r\n    if (!schedule.interval) {\r\n      schedules.splice(i, 1)\r\n    } else {\r\n      schedule.time += schedule.interval\r\n      minNewTime = Math.min(minNewTime, schedule.time)\r\n    }\r\n    schedule = schedules[--i]\r\n  }\r\n  if (minNewTime <= mock.time._CURRENT_TIME) {\r\n    process.nextTick(runSchedules)\r\n  }\r\n}","code-length":216,"reference":"When `mock.time.add` is called, run schedules whose time has come.","result":"Run the schedules .","score":[0.0713,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction startGc(db, options) {\r\n  this.options = options || {}\r\n  var freqMs = options.gcFreqMs || 60000\r\n  var maxVersions = options.gcMaxVersions\r\n  var maxAge = options.gcMaxAge\r\n  var backup = options.gcBackup\r\n  var callback = options.gcCallback\r\n  if (maxAge || maxVersions) {\r\n    maxAge = maxAge || Math.pow(2, 53)\r\n    maxVersion = maxVersions || Math.pow(2, 53)\r\n    function filter(record) {\r\n      if (record.version != null) {\r\n        if (Date.now() - record.version > maxAge) return true\r\n      }\r\n      if (record.key != this.currentKey) {\r\n        this.currentKey = record.key\r\n        this.currentCount = 0\r\n      }\r\n      return this.currentCount++ >= maxVersions\r\n    }\r\n    this.scanner = gc(db, filter, backup)\r\n    return looseInterval(scanner.run.bind(scanner), freqMs, callback)\r\n  }\r\n}","code-length":271,"reference":"Start a gc task if options dictate it. GC task will kick off\noccasionally to reap expired versions of records.\n","result":"Start GC.","score":[0.0001,0.0275]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof NameFormInfo)){\r\n      return new NameFormInfo(json);\r\n    }\r\n        if(NameFormInfo.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":80,"reference":"Extra information about a name form.\n\n","result":"Initialize a new instance of NameFormInfo.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof OAuth2)){\r\n      return new OAuth2(json);\r\n    }\r\n        if(OAuth2.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":77,"reference":"OAuth 2 token responses\n\n","result":"Initialize.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction forceInRange (value, min, max)\r\n{\r\n\tif (value > max)\r\n\t{return max;}\r\n\telse if (value < min)\r\n\t{return min;}\r\n\telse\r\n\t{return value;}\r\n}","code-length":72,"reference":"Sets `value` back to the given `min` - `max` range if necessary\n\n","result":"Force a value to be in range.","score":[0.0791,0.0435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction insertIntoList(item, position, list)\r\n{\r\n\tvar before = list.slice(0, position);\r\n\tvar after  = list.slice(position);\r\n\treturn before.push(item).concat(after)\r\n}","code-length":67,"reference":"Insert `item` into the `list` at a given `position`\n\n","result":"Insert into a list.","score":[0.1205,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateProps(token) {\r\n    Object.keys(token.props).forEach(key => {\r\n        if (!validateProp(key, token.props[key])) {\r\n            throw Tools.syntaxError(`Invalid value for \"${key}\" property`, token);\r\n        }\r\n    });\r\n}","code-length":81,"reference":"object => undefined","result":"Validate the props of a token.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Event(name, attributes) {\r\n    this._name = name;\r\n    this._stopped = false;\r\n    this._attrs = {};\r\n    if (attributes) {\r\n        this.setAttributes(attributes);\r\n    }\r\n}","code-length":69,"reference":"A named event\n\n","result":"Create an Event instance.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction create(text) {\r\n    return Tools.instance({\r\n        text,\r\n        pos: 0\r\n    }, {\r\n        isDone,\r\n        getPos,\r\n        expect,\r\n        accept,\r\n        expectRE,\r\n        acceptRE,\r\n        goto\r\n    });\r\n}","code-length":82,"reference":"string => object","result":"Create a new instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof FeedbackInfo)){\r\n      return new FeedbackInfo(json);\r\n    }\r\n        if(FeedbackInfo.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":79,"reference":"Information about feedback for places.\n\n","result":"Initialize.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof Reservation)){\r\n      return new Reservation(json);\r\n    }\r\n        if(Reservation.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":74,"reference":"LDS ordinance reservation\n\n","result":"Initialize.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(json){\r\n        if(!(this instanceof SearchInfo)){\r\n      return new SearchInfo(json);\r\n    }\r\n        if(SearchInfo.isInstance(json)){\r\n      return json;\r\n    }\r\n        this.init(json);\r\n  }","code-length":77,"reference":"Information about a search.\n\n","result":"Initialize a new instance of SearchInfo.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction asyncForEach (array, iterator, done) {\r\n  if (array.length === 0) {\r\n    done();\r\n    return;\r\n  }\r\n  let pending = array.length;\r\n  array.forEach(item => {\r\n    iterator(item, () => {\r\n      if (--pending === 0) {\r\n        done();\r\n      }\r\n    });\r\n  });\r\n}","code-length":109,"reference":"Simultaneously processes all items in the given array.\n\n","result":"Avoid recursive calls.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction safeCall (fn, args) {\r\n  args = Array.prototype.slice.call(arguments, 1);\r\n  let callback = call.once(args.pop());\r\n  args.push(callback);\r\n  try {\r\n    fn.apply(null, args);\r\n  }\r\n  catch (err) {\r\n    callback(err);\r\n  }\r\n}","code-length":100,"reference":"Calls a function with the given arguments, and ensures that the error-first callback is _always_\ninvoked exactly once, even if the function throws an error.\n\n","result":"Avoid recursive calls.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction callOnce (fn) {\r\n  let fulfilled = false;\r\n  return function onceWrapper (err) {\r\n    if (!fulfilled) {\r\n      fulfilled = true;\r\n      return fn.apply(this, arguments);\r\n    }\r\n    else if (err) {\r\n      throw err;\r\n    }\r\n  };\r\n}","code-length":96,"reference":"Returns a wrapper function that ensures the given callback function is only called once.\nSubsequent calls are ignored, unless the first argument is an Error, in which case the\nerror is thrown.\n\n","result":"Call once functions.","score":[0,0.0172]}
{"code":"\/*is used to<extra_id_0>\r\nfunction uniqNoSet(arr) {\r\n\tvar ret = [];\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tif (ret.indexOf(arr[i]) === -1) {\r\n\t\t\tret.push(arr[i]);\r\n\t\t}\r\n\t}\r\n\treturn ret;\r\n}","code-length":93,"reference":"there's 3 implementations written in increasing order of efficiency 1 - no Set type is defined","result":"Remove duplicates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction uniqSetWithForEach(arr) {\r\n\tvar ret = [];\r\n\t(new Set(arr)).forEach(function (el) {\r\n\t\tret.push(el);\r\n\t});\r\n\treturn ret;\r\n}","code-length":68,"reference":"3 - a standard Set type is defined and it has a forEach method","result":"Create a unique set with forEach.","score":[0.0509,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Base(config, options) {\r\n    if (!(this instanceof Base)) {\r\n      return new Base(config, options);\r\n    }\r\n    Cache.call(this, config);\r\n    this.is('base');\r\n    this.initBase(config, options);\r\n  }","code-length":79,"reference":"Create an instance of `Base` with the given `config` and `options`.\n\n```js\n\/\/ initialize with `config` and `options`\nvar app = new Base({isApp: true}, {abc: true});\napp.set('foo', 'bar');\n\n\/\/ values defined with the given `config` object will be on the root of the instance\nconsole.log(app.baz); \/\/=> undefined\nconsole.log(app.foo); \/\/=> 'bar'\n\/\/ or use `.get`\nconsole.log(app.get('isApp')); \/\/=> true\nconsole.log(app.get('foo')); \/\/=> 'bar'\n\n\/\/ values defined with the given `options` object will be on `app.options\nconsole.log(app.options.abc); \/\/=> true\n```\n\n","result":"Create a base class.","score":[0.0,0.0145]}
{"code":"\/*is used to<extra_id_0>\r\nfunction memoize(type, pattern, options, fn) {\r\n  var key = utils.createKey(type + ':' + pattern, options);\r\n  var disabled = options && options.cache === false;\r\n  if (disabled) {\r\n    braces.clearCache();\r\n    return fn(pattern, options);\r\n  }\r\n  if (cache.hasOwnProperty(key)) {\r\n    return cache[key];\r\n  }\r\n  var res = fn(pattern, options);\r\n  cache[key] = res;\r\n  return res;\r\n}","code-length":140,"reference":"Memoize a generated regex or function.","result":"Return cache[key].","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction multiply(queue, n, options) {\r\n  return utils.flatten(utils.repeat(utils.arrayify(queue), n));\r\n}","code-length":43,"reference":"Multiply the segments in the current brace level","result":"Create a new queue.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction noInner(node, type) {\r\n  if (node.parent.queue.length === 1) {\r\n    return true;\r\n  }\r\n  var nodes = node.parent.nodes;\r\n  return nodes.length === 3\r\n    && isType(nodes[0], 'brace.open')\r\n    && !isType(nodes[1], 'text')\r\n    && isType(nodes[2], 'brace.close');\r\n}","code-length":115,"reference":"Returns true if the given `node` does not have an inner value.\n","result":"Detect inner block .","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction brackets(pattern, options) {\r\n  debug('initializing from <%s>', __filename);\r\n  var res = brackets.create(pattern, options);\r\n  return res.output;\r\n}","code-length":57,"reference":"Parses the given POSIX character class `pattern` and returns a\nstring that can be used for creating regular expressions for matching.\n\n","result":"Create brackets.","score":[0,0.0262]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrap(arr, sep, opts) {\r\n  if (sep === '~') { sep = '-'; }\r\n  var str = arr.join(sep);\r\n  var pre = opts && opts.regexPrefix;\r\n  if (sep === '|') {\r\n    str = pre ? pre + str : str;\r\n    str = '(' + str + ')';\r\n  }\r\n  if (sep === '-') {\r\n    str = (pre && pre === '^')\r\n      ? pre + str\r\n      : str;\r\n    str = '[' + str + ']';\r\n  }\r\n  return [str];\r\n}","code-length":157,"reference":"Wrap the string with the correct regexsyntax.","result":"Wrap arrays in a regex.","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatPadding(ch, pad) {\r\n  var res = pad ? pad + ch : ch;\r\n  if (pad && ch.toString().charAt(0) === '-') {\r\n    res = '-' + pad + ch.toString().substr(1);\r\n  }\r\n  return res.toString();\r\n}","code-length":84,"reference":"Format padding, taking leading `-` into account","result":"Format padding .","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isPadded(origA, origB) {\r\n  if (hasZeros(origA) || hasZeros(origB)) {\r\n    var alen = length(origA);\r\n    var blen = length(origB);\r\n    var len = alen >= blen\r\n      ? alen\r\n      : blen;\r\n    return function (a) {\r\n      return repeatStr('0', len - length(a));\r\n    };\r\n  }\r\n  return false;\r\n}","code-length":129,"reference":"If the string is padded, returns a curried function with\nthe a cached padding string, or `false` if no padding.\n\n","result":"Determine if a string is padded or not .","score":[0.0638,0.2256]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Extglob(options) {\r\n  this.options = extend({source: 'extglob'}, options);\r\n  this.snapdragon = this.options.snapdragon || new Snapdragon(this.options);\r\n  this.snapdragon.patterns = this.snapdragon.patterns || {};\r\n  this.compiler = this.snapdragon.compiler;\r\n  this.parser = this.snapdragon.parser;\r\n  compilers(this.snapdragon);\r\n  parsers(this.snapdragon);\r\n    define(this.snapdragon, 'parse', function(str, options) {\r\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\r\n    parsed.input = str;\r\n    var last = this.parser.stack.pop();\r\n    if (last && this.options.strict !== true) {\r\n      var node = last.nodes[0];\r\n      node.val = '\\\\' + node.val;\r\n      var sibling = node.parent.nodes[1];\r\n      if (sibling.type === 'star') {\r\n        sibling.loose = true;\r\n      }\r\n    }\r\n    define(parsed, 'parser', this.parser);\r\n    return parsed;\r\n  });\r\n    define(this, 'parse', function(ast, options) {\r\n    return this.snapdragon.parse.apply(this.snapdragon, arguments);\r\n  });\r\n    define(this, 'compile', function(ast, options) {\r\n    return this.snapdragon.compile.apply(this.snapdragon, arguments);\r\n  });\r\n}","code-length":400,"reference":"Customize Snapdragon parser and renderer","result":"Detect globs that are not globs.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction micromatch(list, patterns, options) {\r\n  patterns = utils.arrayify(patterns);\r\n  list = utils.arrayify(list);\r\n  var len = patterns.length;\r\n  if (list.length === 0 || len === 0) {\r\n    return [];\r\n  }\r\n  if (len === 1) {\r\n    return micromatch.match(list, patterns[0], options);\r\n  }\r\n  var omit = [];\r\n  var keep = [];\r\n  var idx = -1;\r\n  while (++idx < len) {\r\n    var pattern = patterns[idx];\r\n    if (typeof pattern === 'string' && pattern.charCodeAt(0) === 33 ) {\r\n      omit.push.apply(omit, micromatch.match(list, pattern.slice(1), options));\r\n    } else {\r\n      keep.push.apply(keep, micromatch.match(list, pattern, options));\r\n    }\r\n  }\r\n  var matches = utils.diff(keep, omit);\r\n  if (!options || options.nodupes !== false) {\r\n    return utils.unique(matches);\r\n  }\r\n  return matches;\r\n}","code-length":305,"reference":"The main function takes a list of strings and one or more\nglob patterns to use for matching.\n\n```js\nvar mm = require('micromatch');\nmm(list, patterns[, options]);\n\nconsole.log(mm(['a.js', 'a.txt'], ['*.js']));\n\/\/=> [ 'a.js' ]\n```\n","result":"Match files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sync(source, opts) {\r\n    var works = getWorks(source, reader_sync_1.default, opts);\r\n    return arrayUtils.flatten(works);\r\n}","code-length":52,"reference":"Synchronous API.","result":"Sync the source.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stream(source, opts) {\r\n    var works = getWorks(source, reader_stream_1.default, opts);\r\n    return merge2(works);\r\n}","code-length":50,"reference":"Stream API.","result":"Create a stream.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateTasks(source, opts) {\r\n    var patterns = [].concat(source);\r\n    var options = optionsManager.prepare(opts);\r\n    return taskManager.generate(patterns, options);\r\n}","code-length":59,"reference":"Return a set of tasks based on provided patterns.","result":"Generate tasks.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getWorks(source, _Reader, opts) {\r\n    var patterns = [].concat(source);\r\n    var options = optionsManager.prepare(opts);\r\n    var tasks = taskManager.generate(patterns, options);\r\n    var reader = new _Reader(options);\r\n    return tasks.map(reader.read, reader);\r\n}","code-length":90,"reference":"Returns a set of works based on provided tasks and class of the reader.","result":"Generate the works.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generate(patterns, options) {\r\n    var unixPatterns = patterns.map(patternUtils.unixifyPattern);\r\n    var unixIgnore = options.ignore.map(patternUtils.unixifyPattern);\r\n    var positivePatterns = getPositivePatterns(unixPatterns);\r\n    var negativePatterns = getNegativePatternsAsPositive(unixPatterns, unixIgnore);\r\n    var staticPatterns = positivePatterns.filter(patternUtils.isStaticPattern);\r\n    var dynamicPatterns = positivePatterns.filter(patternUtils.isDynamicPattern);\r\n    var staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns,  false);\r\n    var dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns,  true);\r\n    return staticTasks.concat(dynamicTasks);\r\n}","code-length":183,"reference":"Generate tasks based on parent directory of each pattern.","result":"Generate tasks.","score":[0.0151,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convertPatternsToTasks(positive, negative, dynamic) {\r\n    var positivePatternsGroup = groupPatternsByBaseDirectory(positive);\r\n    var negativePatternsGroup = groupPatternsByBaseDirectory(negative);\r\n    if ('.' in positivePatternsGroup) {\r\n        var task = convertPatternGroupToTask('.', positive, negative, dynamic);\r\n        return [task];\r\n    }\r\n    return convertPatternGroupsToTasks(positivePatternsGroup, negativePatternsGroup, dynamic);\r\n}","code-length":120,"reference":"Convert patterns to tasks based on parent directory of each pattern.","result":"Convert patterns to tasks.","score":[0.1143,0.2859]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNegativePatternsAsPositive(patterns, ignore) {\r\n    var negative = patternUtils.getNegativePatterns(patterns).concat(ignore);\r\n    var positive = negative.map(patternUtils.convertToPositivePattern);\r\n    return positive;\r\n}","code-length":67,"reference":"Return only negative patterns.","result":"Generate the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction groupPatternsByBaseDirectory(patterns) {\r\n    return patterns.reduce(function (collection, pattern) {\r\n        var base = patternUtils.getBaseDirectory(pattern);\r\n        if (base in collection) {\r\n            collection[base].push(pattern);\r\n        }\r\n        else {\r\n            collection[base] = [pattern];\r\n        }\r\n        return collection;\r\n    }, {});\r\n}","code-length":109,"reference":"Group patterns by base directory of each pattern.","result":"Group patterns by base directory.","score":[0.4128,0.5154]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convertPatternGroupsToTasks(positive, negative, dynamic) {\r\n    var globalNegative = '.' in negative ? negative['.'] : [];\r\n    return Object.keys(positive).map(function (base) {\r\n        var localNegative = findLocalNegativePatterns(base, negative);\r\n        var fullNegative = localNegative.concat(globalNegative);\r\n        return convertPatternGroupToTask(base, positive[base], fullNegative, dynamic);\r\n    });\r\n}","code-length":117,"reference":"Convert group of patterns to tasks.","result":"Convert pattern groups to tasks.","score":[0.3079,0.6305]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findLocalNegativePatterns(positiveBase, negative) {\r\n    return Object.keys(negative).reduce(function (collection, base) {\r\n        if (base.startsWith(positiveBase)) {\r\n            collection.push.apply(collection, __spread(negative[base]));\r\n        }\r\n        return collection;\r\n    }, []);\r\n}","code-length":92,"reference":"Returns those negative patterns whose base paths includes positive base path.","result":"Find local negative patterns.","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convertPatternGroupToTask(base, positive, negative, dynamic) {\r\n    return {\r\n        base: base,\r\n        dynamic: dynamic,\r\n        patterns: [].concat(positive, negative.map(patternUtils.convertToNegativePattern)),\r\n        positive: positive,\r\n        negative: negative\r\n    };\r\n}","code-length":89,"reference":"Create a task for positive and negative patterns.","result":"Convert pattern groups to tasks.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchAny(entry, patternsRe) {\r\n    try {\r\n        for (var patternsRe_1 = __values(patternsRe), patternsRe_1_1 = patternsRe_1.next(); !patternsRe_1_1.done; patternsRe_1_1 = patternsRe_1.next()) {\r\n            var regexp = patternsRe_1_1.value;\r\n            if (regexp.test(entry)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n    finally {\r\n        try {\r\n            if (patternsRe_1_1 && !patternsRe_1_1.done && (_a = patternsRe_1.return)) _a.call(patternsRe_1);\r\n        }\r\n        finally { if (e_1) throw e_1.error; }\r\n    }\r\n    return false;\r\n    var e_1, _a;\r\n}","code-length":252,"reference":"Returns true if the entry match any of the given RegExp's.","result":"Match any pattern.","score":[0.0284,0.1838]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n        removeNotFoundFiles();\r\n        var entries = normalizedEntries;\r\n        var keys = Object.keys( entries );\r\n        if ( keys.length === 0 ) {\r\n          return;\r\n        }\r\n        keys.forEach( function ( entryName ) {\r\n          var cacheEntry = entries[ entryName ];\r\n          try {\r\n            var stat = fs.statSync( cacheEntry.key );\r\n            var meta = assign( cacheEntry.meta, {\r\n              size: stat.size,\r\n              mtime: stat.mtime.getTime()\r\n            } );\r\n            cache.setKey( entryName, meta );\r\n          } catch (err) {\r\n            if ( err.code !== 'ENOENT' ) {\r\n              throw err;\r\n            }\r\n          }\r\n        } );\r\n        cache.save( true );\r\n      }","code-length":216,"reference":"Sync the files and persist them to the cache\n","result":"Test the cache.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ( pathToFile ) {\r\n    var me = this;\r\n    var dir = path.dirname( pathToFile );\r\n    var fName = path.basename( pathToFile );\r\n    me.load( fName, dir );\r\n  }","code-length":66,"reference":"Load the cache from the provided file\n","result":"Load a file.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ( noPrune ) {\r\n    var me = this;\r\n    (!noPrune) && me._prune();\r\n    writeJSON( me._pathToFile, me._persisted );\r\n  }","code-length":55,"reference":"Save the state of the cache identified by the docId to disk\nas a JSON structure\n","result":"Create a new instance of the class.","score":[0.0699,0.0993]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ( docId, cacheDir ) {\r\n    var obj = Object.create( cache );\r\n    obj.load( docId, cacheDir );\r\n    return obj;\r\n  }","code-length":49,"reference":"Load a cache identified by the given Id. If the element does not exists, then initialize an empty\ncache storage.\n\n","result":"Cache documents.","score":[0,0.0275]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ( docId, cacheDir ) {\r\n    var filePath = cacheDir ? path.resolve( cacheDir, docId ) : path.resolve( __dirname, '.\/.cache\/', docId );\r\n    return del( filePath, { force: true } ).length > 0;\r\n  }","code-length":70,"reference":"Clear the cache identified by the given id. Caches stored in a different cache directory can be deleted directly\n\n","result":"Delete the document.","score":[0.002,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(cacheName, key, val) {\r\n    var cache = this.cache(cacheName);\r\n    cache.set(key, val);\r\n    return cache;\r\n  }","code-length":53,"reference":"Set a value for property `key` on cache `name`\n\n```js\nfragment.set('files', 'somefile.js', new File({path: 'somefile.js'}));\n```\n","result":"Cache the data.","score":[0,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction LOOP() {\r\n    if (pos >= p.length) {\r\n      if (cache) cache[original] = p;\r\n      return cb(null, p);\r\n    }\r\n    nextPartRe.lastIndex = pos;\r\n    var result = nextPartRe.exec(p);\r\n    previous = current;\r\n    current += result[0];\r\n    base = previous + result[1];\r\n    pos = nextPartRe.lastIndex;\r\n    if (knownHard[base] || (cache && cache[base] === base)) {\r\n      return process.nextTick(LOOP);\r\n    }\r\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\r\n      return gotResolvedLink(cache[base]);\r\n    }\r\n    return fs.lstat(base, gotStat);\r\n  }","code-length":211,"reference":"walk down the path, swapping out linked pathparts for their real values","result":"Detect links in the source.","score":[0.0593,0.0885]}
{"code":"\/*is used to<extra_id_0>\r\nfunction micromatch(files, patterns, opts) {\r\n  if (!files || !patterns) return [];\r\n  opts = opts || {};\r\n  if (typeof opts.cache === 'undefined') {\r\n    opts.cache = true;\r\n  }\r\n  if (!Array.isArray(patterns)) {\r\n    return match(files, patterns, opts);\r\n  }\r\n  var len = patterns.length, i = 0;\r\n  var omit = [], keep = [];\r\n  while (len--) {\r\n    var glob = patterns[i++];\r\n    if (typeof glob === 'string' && glob.charCodeAt(0) === 33 ) {\r\n      omit.push.apply(omit, match(files, glob.slice(1), opts));\r\n    } else {\r\n      keep.push.apply(keep, match(files, glob, opts));\r\n    }\r\n  }\r\n  return utils.diff(keep, omit);\r\n}","code-length":242,"reference":"The main function. Pass an array of filepaths,\nand a string or array of glob patterns\n\n","result":"Match files with globs.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction match(files, pattern, opts) {\r\n  if (utils.typeOf(files) !== 'string' && !Array.isArray(files)) {\r\n    throw new Error(msg('match', 'files', 'a string or array'));\r\n  }\r\n  files = utils.arrayify(files);\r\n  opts = opts || {};\r\n  var negate = opts.negate || false;\r\n  var orig = pattern;\r\n  if (typeof pattern === 'string') {\r\n    negate = pattern.charAt(0) === '!';\r\n    if (negate) {\r\n      pattern = pattern.slice(1);\r\n    }\r\n    if (opts.nonegate === true) {\r\n      negate = false;\r\n    }\r\n  }\r\n  var _isMatch = matcher(pattern, opts);\r\n  var len = files.length, i = 0;\r\n  var res = [];\r\n  while (i < len) {\r\n    var file = files[i++];\r\n    var fp = utils.unixify(file, opts);\r\n    if (!_isMatch(fp)) { continue; }\r\n    res.push(fp);\r\n  }\r\n  if (res.length === 0) {\r\n    if (opts.failglob === true) {\r\n      throw new Error('micromatch.match() found no matches for: \"' + orig + '\".');\r\n    }\r\n    if (opts.nonull || opts.nullglob) {\r\n      res.push(utils.unescapeGlob(orig));\r\n    }\r\n  }\r\n  if (negate) { res = utils.diff(files, res); }\r\n  if (opts.ignore && opts.ignore.length) {\r\n    pattern = opts.ignore;\r\n    opts = utils.omit(opts, ['ignore']);\r\n    res = utils.diff(res, micromatch(res, pattern, opts));\r\n  }\r\n  if (opts.nodupes) {\r\n    return utils.unique(res);\r\n  }\r\n  return res;\r\n}","code-length":506,"reference":"Return an array of files that match the given glob pattern.\n\nThis function is called by the main `micromatch` function If you only\nneed to pass a single pattern you might get very minor speed improvements\nusing this function.\n\n","result":"Function matcher.","score":[0,0.0142]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isMatch(fp, pattern, opts) {\r\n  if (typeof fp !== 'string') {\r\n    throw new TypeError(msg('isMatch', 'filepath', 'a string'));\r\n  }\r\n  fp = utils.unixify(fp, opts);\r\n  if (utils.typeOf(pattern) === 'object') {\r\n    return matcher(fp, pattern);\r\n  }\r\n  return matcher(pattern, opts)(fp);\r\n}","code-length":115,"reference":"Returns true if the filepath contains the given\npattern. Can also return a function for matching.\n\n```js\nisMatch('foo.md', '*.md', {});\n\/\/=> true\n\nisMatch('*.md', {})('foo.md')\n\/\/=> true\n```\n","result":"Return pattern .","score":[0,0.0203]}
{"code":"\/*is used to<extra_id_0>\r\nfunction contains(fp, pattern, opts) {\r\n  if (typeof fp !== 'string') {\r\n    throw new TypeError(msg('contains', 'pattern', 'a string'));\r\n  }\r\n  opts = opts || {};\r\n  opts.contains = (pattern !== '');\r\n  fp = utils.unixify(fp, opts);\r\n  if (opts.contains && !utils.isGlob(pattern)) {\r\n    return fp.indexOf(pattern) !== -1;\r\n  }\r\n  return matcher(pattern, opts)(fp);\r\n}","code-length":139,"reference":"Returns true if the filepath matches thegiven pattern.","result":"Test for globbing .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction any(fp, patterns, opts) {\r\n  if (!Array.isArray(patterns) && typeof patterns !== 'string') {\r\n    throw new TypeError(msg('any', 'patterns', 'a string or array'));\r\n  }\r\n  patterns = utils.arrayify(patterns);\r\n  var len = patterns.length;\r\n  fp = utils.unixify(fp, opts);\r\n  while (len--) {\r\n    var isMatch = matcher(patterns[len], opts);\r\n    if (isMatch(fp)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}","code-length":157,"reference":"Returns true if a file path matches any of the\ngiven patterns.\n\n","result":"Match files .","score":[0,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matchKeys(obj, glob, options) {\r\n  if (utils.typeOf(obj) !== 'object') {\r\n    throw new TypeError(msg('matchKeys', 'first argument', 'an object'));\r\n  }\r\n  var fn = matcher(glob, options);\r\n  var res = {};\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key) && fn(key)) {\r\n      res[key] = obj[key];\r\n    }\r\n  }\r\n  return res;\r\n}","code-length":140,"reference":"Filter the keys of an object with the given `glob` pattern\nand `options`\n\n","result":"Match keys in object.","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction matcher(pattern, opts) {\r\n  if (typeof pattern === 'function') {\r\n    return pattern;\r\n  }\r\n  if (pattern instanceof RegExp) {\r\n    return function(fp) {\r\n      return pattern.test(fp);\r\n    };\r\n  }\r\n  if (typeof pattern !== 'string') {\r\n    throw new TypeError(msg('matcher', 'pattern', 'a string, regex, or function'));\r\n  }\r\n  pattern = utils.unixify(pattern, opts);\r\n  if (!utils.isGlob(pattern)) {\r\n    return utils.matchPath(pattern, opts);\r\n  }\r\n  var re = makeRe(pattern, opts);\r\n  if (opts && opts.matchBase) {\r\n    return utils.hasFilename(re, opts);\r\n  }\r\n  return function(fp) {\r\n    fp = utils.unixify(fp, opts);\r\n    return re.test(fp);\r\n  };\r\n}","code-length":245,"reference":"Return a function for matching based on the\ngiven `pattern` and `options`.\n\n","result":"Match files in the filesystem.","score":[0.0593,0.0885]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toRegex(glob, options) {\r\n  var opts = Object.create(options || {});\r\n  var flags = opts.flags || '';\r\n  if (opts.nocase && flags.indexOf('i') === -1) {\r\n    flags += 'i';\r\n  }\r\n  var parsed = expand(glob, opts);\r\n  opts.negated = opts.negated || parsed.negated;\r\n  opts.negate = opts.negated;\r\n  glob = wrapGlob(parsed.pattern, opts);\r\n  var re;\r\n  try {\r\n    re = new RegExp(glob, flags);\r\n    return re;\r\n  } catch (err) {\r\n    err.reason = 'micromatch invalid regex: (' + re + ')';\r\n    if (opts.strict) throw new SyntaxError(err);\r\n  }\r\n  return \/$^\/;\r\n}","code-length":222,"reference":"Create and cache a regular expression for matching\nfile paths.\n\nIf the leading character in the `glob` is `!`, a negation\nregex is returned.\n\n","result":"Convert globs to regex.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapGlob(glob, opts) {\r\n  var prefix = (opts && !opts.contains) ? '^' : '';\r\n  var after = (opts && !opts.contains) ? '$' : '';\r\n  glob = ('(?:' + glob + ')' + after);\r\n  if (opts && opts.negate) {\r\n    return prefix + ('(?!^' + glob + ').*$');\r\n  }\r\n  return prefix + glob;\r\n}","code-length":114,"reference":"Create the regex to do the matching. If the leading\ncharacter in the `glob` is `!` a negation regex is returned.\n\n","result":"Wrap a glob .","score":[0.0046,0.0259]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeRe(glob, opts) {\r\n  if (utils.typeOf(glob) !== 'string') {\r\n    throw new Error(msg('makeRe', 'glob', 'a string'));\r\n  }\r\n  return utils.cache(toRegex, glob, opts);\r\n}","code-length":77,"reference":"Create and cache a regular expression for matching file paths.\nIf the leading character in the `glob` is `!`, a negation\nregex is returned.\n\n","result":"Make a regex for the glob.","score":[0.0136,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction collapse(str, ch) {\r\n  var res = str.split(ch);\r\n  var isFirst = res[0] === '';\r\n  var isLast = res[res.length - 1] === '';\r\n  res = res.filter(Boolean);\r\n  if (isFirst) res.unshift('');\r\n  if (isLast) res.push('');\r\n  return res.join(ch);\r\n}","code-length":107,"reference":"Collapse repeated character sequences.\n\n```js\ncollapse('a\/..\/..\/..\/b', '..\/');\n\/\/=> 'a\/..\/b'\n```\n\n","result":"Collapse strings.","score":[0.0092,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction exponential(str, options, fn) {\r\n  if (typeof options === 'function') {\r\n    fn = options;\r\n    options = null;\r\n  }\r\n  var opts = options || {};\r\n  var esc = '__ESC_EXP__';\r\n  var exp = 0;\r\n  var res;\r\n  var parts = str.split('{,}');\r\n  if (opts.nodupes) {\r\n    return fn(parts.join(''), opts);\r\n  }\r\n  exp = parts.length - 1;\r\n  res = fn(parts.join(esc), opts);\r\n  var len = res.length;\r\n  var arr = [];\r\n  var i = 0;\r\n  while (len--) {\r\n    var ele = res[i++];\r\n    var idx = ele.indexOf(esc);\r\n    if (idx === -1) {\r\n      arr.push(ele);\r\n    } else {\r\n      ele = ele.split('__ESC_EXP__').join('');\r\n      if (!!ele && opts.nodupes !== false) {\r\n        arr.push(ele);\r\n      } else {\r\n        var num = Math.pow(2, exp);\r\n        arr.push.apply(arr, repeat(ele, num));\r\n      }\r\n    }\r\n  }\r\n  return arr;\r\n}","code-length":342,"reference":"Expand exponential ranges","result":"Parse the exponential string.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitWhitespace(str) {\r\n  var segs = str.split(' ');\r\n  var len = segs.length;\r\n  var res = [];\r\n  var i = 0;\r\n  while (len--) {\r\n    res.push.apply(res, braces(segs[i++]));\r\n  }\r\n  return res;\r\n}","code-length":95,"reference":"Handle patterns with whitespace","result":"Split whitespace.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction filter(arr, cb) {\r\n  if (arr == null) return [];\r\n  if (typeof cb !== 'function') {\r\n    throw new TypeError('braces: filter expects a callback function.');\r\n  }\r\n  var len = arr.length;\r\n  var res = arr.slice();\r\n  var i = 0;\r\n  while (len--) {\r\n    if (!cb(arr[len], i++)) {\r\n      res.splice(len, 1);\r\n    }\r\n  }\r\n  return res;\r\n}","code-length":142,"reference":"Fast array filter","result":"Filter arrays.","score":[0,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extglob(str, opts) {\r\n  opts = opts || {};\r\n  var o = {}, i = 0;\r\n  str = str.replace(\/!\\(([^\\w*()])\/g, '$1!(');\r\n  str = str.replace(\/([*\\\/])\\.!\\([*]\\)\/g, function (m, ch) {\r\n    if (ch === '\/') {\r\n      return escape('\\\\\/[^.]+');\r\n    }\r\n    return escape('[^.]+');\r\n  });\r\n  var key = str\r\n    + String(!!opts.regex)\r\n    + String(!!opts.contains)\r\n    + String(!!opts.escape);\r\n  if (cache.hasOwnProperty(key)) {\r\n    return cache[key];\r\n  }\r\n  if (!(re instanceof RegExp)) {\r\n    re = regex();\r\n  }\r\n  opts.negate = false;\r\n  var m;\r\n  while (m = re.exec(str)) {\r\n    var prefix = m[1];\r\n    var inner = m[3];\r\n    if (prefix === '!') {\r\n      opts.negate = true;\r\n    }\r\n    var id = '__EXTGLOB_' + (i++) + '__';\r\n    o[id] = wrap(inner, prefix, opts.escape);\r\n    str = str.split(m[0]).join(id);\r\n  }\r\n  var keys = Object.keys(o);\r\n  var len = keys.length;\r\n  while (len--) {\r\n    var prop = keys[len];\r\n    str = str.split(prop).join(o[prop]);\r\n  }\r\n  var result = opts.regex\r\n    ? toRegex(str, opts.contains, opts.negate)\r\n    : str;\r\n  result = result.split('.').join('\\\\.');\r\n  return (cache[key] = result);\r\n}","code-length":476,"reference":"Convert the given extglob `string` to a regex-compatible\nstring.\n\n```js\nvar extglob = require('extglob');\nextglob('!(a?(b))');\n\/\/=> '(?!a(?:b)?)[^\/]*?'\n```\n\n","result":"Match files .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrap(inner, prefix, esc) {\r\n  if (esc) inner = escape(inner);\r\n  switch (prefix) {\r\n    case '!':\r\n      return '(?!' + inner + ')[^\/]' + (esc ? '%%%~' : '*?');\r\n    case '@':\r\n      return '(?:' + inner + ')';\r\n    case '+':\r\n      return '(?:' + inner + ')+';\r\n    case '*':\r\n      return '(?:' + inner + ')' + (esc ? '%%' : '*')\r\n    case '?':\r\n      return '(?:' + inner + '|)';\r\n    default:\r\n      return inner;\r\n  }\r\n}","code-length":166,"reference":"Convert `string` to a regex string.\n\n","result":"Wrap a string in a regex.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toRegex(pattern, contains, isNegated) {\r\n  var prefix = contains ? '^' : '';\r\n  var after = contains ? '$' : '';\r\n  pattern = ('(?:' + pattern + ')' + after);\r\n  if (isNegated) {\r\n    pattern = prefix + negate(pattern);\r\n  }\r\n  return new RegExp(prefix + pattern);\r\n}","code-length":98,"reference":"Create the regex to do the matching. If\nthe leading character in the `pattern` is `!`\na negation regex is returned.\n\n","result":"Return pattern.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copy(val, key) {\r\n  if (key === '__proto__') {\r\n    return;\r\n  }\r\n  var obj = this[key];\r\n  if (isObject(val) && isObject(obj)) {\r\n    mixinDeep(obj, val);\r\n  } else {\r\n    this[key] = val;\r\n  }\r\n}","code-length":97,"reference":"Copy properties from the source object to the\ntarget object.\n\n","result":"Return a copy of a value.","score":[0,0.0521]}
{"code":"\/*is used to<extra_id_0>\r\nfunction advanceTo(input, endChar) {\r\n  var ch = input.charAt(0);\r\n  var tok = { len: 1, val: '', esc: '' };\r\n  var idx = 0;\r\n  function advance() {\r\n    if (ch !== '\\\\') {\r\n      tok.esc += '\\\\' + ch;\r\n      tok.val += ch;\r\n    }\r\n    ch = input.charAt(++idx);\r\n    tok.len++;\r\n    if (ch === '\\\\') {\r\n      advance();\r\n      advance();\r\n    }\r\n  }\r\n  while (ch && ch !== endChar) {\r\n    advance();\r\n  }\r\n  return tok;\r\n}","code-length":180,"reference":"Advance to the next non-escaped character","result":"Create a new parser.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\r\n  var sourceMap = aSourceMap;\r\n  if (typeof aSourceMap === 'string') {\r\n    sourceMap = util.parseSourceMapInput(aSourceMap);\r\n  }\r\n  var version = util.getArg(sourceMap, 'version');\r\n  var sources = util.getArg(sourceMap, 'sources');\r\n  var names = util.getArg(sourceMap, 'names', []);\r\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\r\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\r\n  var mappings = util.getArg(sourceMap, 'mappings');\r\n  var file = util.getArg(sourceMap, 'file', null);\r\n  if (version != this._version) {\r\n    throw new Error('Unsupported version: ' + version);\r\n  }\r\n  if (sourceRoot) {\r\n    sourceRoot = util.normalize(sourceRoot);\r\n  }\r\n  sources = sources\r\n    .map(String)\r\n    .map(util.normalize)\r\n    .map(function (source) {\r\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\r\n        ? util.relative(sourceRoot, source)\r\n        : source;\r\n    });\r\n  this._names = ArraySet.fromArray(names.map(String), true);\r\n  this._sources = ArraySet.fromArray(sources, true);\r\n  this._absoluteSources = this._sources.toArray().map(function (s) {\r\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\r\n  });\r\n  this.sourceRoot = sourceRoot;\r\n  this.sourcesContent = sourcesContent;\r\n  this._mappings = mappings;\r\n  this._sourceMapURL = aSourceMapURL;\r\n  this.file = file;\r\n}","code-length":472,"reference":"A BasicSourceMapConsumer instance represents a parsed source map which we canquery for information about the original file positions by giving it a fileposition in the generated source.","result":"Create a source map consumer.","score":[0.0046,0.103]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\r\n  var cmp = strcmp(mappingA.source, mappingB.source);\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.originalLine - mappingB.originalLine;\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\r\n  if (cmp !== 0 || onlyCompareOriginal) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  return strcmp(mappingA.name, mappingB.name);\r\n}","code-length":235,"reference":"Comparator between two mappings where the original positions are compared.","result":"Compare two mappings by original position.","score":[0.1551,0.3288]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\r\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\r\n  if (cmp !== 0 || onlyCompareGenerated) {\r\n    return cmp;\r\n  }\r\n  cmp = strcmp(mappingA.source, mappingB.source);\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.originalLine - mappingB.originalLine;\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\r\n  if (cmp !== 0) {\r\n    return cmp;\r\n  }\r\n  return strcmp(mappingA.name, mappingB.name);\r\n}","code-length":238,"reference":"Comparator between two mappings with deflated source and name indices wherethe generated positions are compared.","result":"Sort the generated positions .","score":[0.046,0.1339]}
{"code":"\/*is used to<extra_id_0>\r\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\r\n  sourceURL = sourceURL || '';\r\n  if (sourceRoot) {\r\n    if (sourceRoot[sourceRoot.length - 1] !== '\/' && sourceURL[0] !== '\/') {\r\n      sourceRoot += '\/';\r\n    }\r\n    sourceURL = sourceRoot + sourceURL;\r\n  }\r\n  if (sourceMapURL) {\r\n    var parsed = urlParse(sourceMapURL);\r\n    if (!parsed) {\r\n      throw new Error(\"sourceMapURL could not be parsed\");\r\n    }\r\n    if (parsed.path) {\r\n      var index = parsed.path.lastIndexOf('\/');\r\n      if (index >= 0) {\r\n        parsed.path = parsed.path.substring(0, index + 1);\r\n      }\r\n    }\r\n    sourceURL = join(urlGenerate(parsed), sourceURL);\r\n  }\r\n  return normalize(sourceURL);\r\n}","code-length":242,"reference":"Compute the URL of a source given the the source root, the source's\nURL, and the source map's URL.","result":"Compute sourceURL.","score":[0.0001,0.0289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction CorkedRequest(state) {\r\n  var _this = this;\r\n  this.next = null;\r\n  this.entry = null;\r\n  this.finish = function () {\r\n    onCorkedFinish(_this, state);\r\n  };\r\n}","code-length":76,"reference":"It seems a linked list but it is not there will be only 2 of these for each stream","result":"Create a request.","score":[0.002,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearBuffer(stream, state) {\r\n  state.bufferProcessing = true;\r\n  var entry = state.bufferedRequest;\r\n  if (stream._writev && entry && entry.next) {\r\n    var l = state.bufferedRequestCount;\r\n    var buffer = new Array(l);\r\n    var holder = state.corkedRequestsFree;\r\n    holder.entry = entry;\r\n    var count = 0;\r\n    var allBuffers = true;\r\n    while (entry) {\r\n      buffer[count] = entry;\r\n      if (!entry.isBuf) allBuffers = false;\r\n      entry = entry.next;\r\n      count += 1;\r\n    }\r\n    buffer.allBuffers = allBuffers;\r\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\r\n    state.pendingcb++;\r\n    state.lastBufferedRequest = null;\r\n    if (holder.next) {\r\n      state.corkedRequestsFree = holder.next;\r\n      holder.next = null;\r\n    } else {\r\n      state.corkedRequestsFree = new CorkedRequest(state);\r\n    }\r\n    state.bufferedRequestCount = 0;\r\n  } else {\r\n    while (entry) {\r\n      var chunk = entry.chunk;\r\n      var encoding = entry.encoding;\r\n      var cb = entry.callback;\r\n      var len = state.objectMode ? 1 : chunk.length;\r\n      doWrite(stream, state, false, len, chunk, encoding, cb);\r\n      entry = entry.next;\r\n      state.bufferedRequestCount--;\r\n      if (state.writing) {\r\n        break;\r\n      }\r\n    }\r\n    if (entry === null) state.lastBufferedRequest = null;\r\n  }\r\n  state.bufferedRequest = entry;\r\n  state.bufferProcessing = false;\r\n}","code-length":467,"reference":"if there's something in the buffer waiting, then process it","result":"Clear the buffer .","score":[0.1008,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Node(val, type, parent) {\r\n  if (typeof type !== 'string') {\r\n    parent = type;\r\n    type = null;\r\n  }\r\n  define(this, 'parent', parent);\r\n  define(this, 'isNode', true);\r\n  define(this, 'expect', null);\r\n  if (typeof type !== 'string' && isObject(val)) {\r\n    lazyKeys();\r\n    var keys = Object.keys(val);\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i];\r\n      if (ownNames.indexOf(key) === -1) {\r\n        this[key] = val[key];\r\n      }\r\n    }\r\n  } else {\r\n    this.type = type;\r\n    this.val = val;\r\n  }\r\n}","code-length":218,"reference":"Create a new AST `Node` with the given `val` and `type`.\n\n```js\nvar node = new Node('*', 'Star');\nvar node = new Node({type: 'star', val: '*'});\n```\n","result":"Create a node .","score":[0.0016,0.1035]}
{"code":"\/*is used to<extra_id_0>\r\nfunction append(compiler, val, node) {\r\n  if (typeof compiler.append !== 'function') {\r\n    return compiler.emit(val, node);\r\n  }\r\n  return compiler.append(val, node);\r\n}","code-length":64,"reference":"Shim to ensure the `.append` methods work with any version of snapdragon","result":"Append the value.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Snapdragon(options) {\r\n  Base.call(this, null, options);\r\n  this.options = utils.extend({source: 'string'}, this.options);\r\n  this.compiler = new Compiler(this.options);\r\n  this.parser = new Parser(this.options);\r\n  Object.defineProperty(this, 'compilers', {\r\n    get: function() {\r\n      return this.compiler.compilers;\r\n    }\r\n  });\r\n  Object.defineProperty(this, 'parsers', {\r\n    get: function() {\r\n      return this.parser.parsers;\r\n    }\r\n  });\r\n  Object.defineProperty(this, 'regex', {\r\n    get: function() {\r\n      return this.parser.regex;\r\n    }\r\n  });\r\n}","code-length":207,"reference":"Create a new instance of `Snapdragon` with the given `options`.\n\n```js\nvar snapdragon = new Snapdragon();\n```\n\n","result":"Create a new Snapdragon instance.","score":[0.0449,0.1998]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(msg, node) {\r\n    var pos = node.position || {start: {column: 0}};\r\n    var message = this.options.source + ' column:' + pos.start.column + ': ' + msg;\r\n    var err = new Error(message);\r\n    err.reason = msg;\r\n    err.column = pos.start.column;\r\n    err.source = this.pattern;\r\n    if (this.options.silent) {\r\n      this.errors.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }","code-length":149,"reference":"Throw an error message with details including the cursor position.\n","result":"Report errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node, nodes, i) {\r\n    var fn = this.compilers[node.type];\r\n    this.idx = i;\r\n    if (typeof fn !== 'function') {\r\n      throw this.error('compiler \"' + node.type + '\" is not registered', node);\r\n    }\r\n    return fn.call(this, node, nodes, i);\r\n  }","code-length":101,"reference":"Visit `node`.","result":"Compile a node.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(ast, options) {\r\n    var opts = utils.extend({}, this.options, options);\r\n    this.ast = ast;\r\n    this.parsingErrors = this.ast.errors;\r\n    this.output = '';\r\n    if (opts.sourcemap) {\r\n      var sourcemaps = require('.\/source-maps');\r\n      sourcemaps(this);\r\n      this.mapVisit(this.ast.nodes);\r\n      this.applySourceMaps();\r\n      this.map = opts.sourcemap === 'generator' ? this.map : this.map.toJSON();\r\n      return this;\r\n    }\r\n    this.mapVisit(this.ast.nodes);\r\n    return this;\r\n  }","code-length":182,"reference":"Compile `ast`.","result":"Parse the AST .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Parser(options) {\r\n  debug('initializing', __filename);\r\n  this.options = utils.extend({source: 'string'}, options);\r\n  this.init(this.options);\r\n  use(this);\r\n}","code-length":66,"reference":"Create a new `Parser` with the given `input` and `options`.\n","result":"Parse.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, fn) {\r\n    if (this.types.indexOf(type) === -1) {\r\n      this.types.push(type);\r\n    }\r\n    this.parsers[type] = fn.bind(this);\r\n    return this;\r\n  }","code-length":75,"reference":"Set parser `name` with the given `fn`\n","result":"Return this.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, token) {\r\n    this.sets[type] = this.sets[type] || [];\r\n    this.count++;\r\n    this.stack.push(token);\r\n    return this.sets[type].push(token);\r\n  }","code-length":72,"reference":"Push a `token` onto the `type` stack.\n\n","result":"Create a new token.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n    this.sets[type] = this.sets[type] || [];\r\n    this.count--;\r\n    this.stack.pop();\r\n    return this.sets[type].pop();\r\n  }","code-length":66,"reference":"Pop a token off of the `type` stack\n","result":"Create a new object.","score":[0.1175,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(n) {\r\n    return this.stack.length > 0\r\n      ? utils.last(this.stack, n)\r\n      : utils.last(this.nodes, n);\r\n  }","code-length":57,"reference":"Get the previous AST node\n","result":"Create a function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(str, len) {\r\n    var lines = str.match(\/\\n\/g);\r\n    if (lines) this.line += lines.length;\r\n    var i = str.lastIndexOf('\\n');\r\n    this.column = ~i ? len - i : this.column + len;\r\n    this.parsed += str;\r\n    this.consume(len);\r\n  }","code-length":102,"reference":"Update column based on `str`.","result":"Parse a string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, openRegex, closeRegex, fn) {\r\n    this.sets[type] = this.sets[type] || [];\r\n        this.set(type + '.open', function() {\r\n      var parsed = this.parsed;\r\n      var pos = this.position();\r\n      var m = this.match(openRegex);\r\n      if (!m || !m[0]) return;\r\n      var val = m[0];\r\n      this.setCount++;\r\n      this.specialChars = true;\r\n      var open = pos({\r\n        type: type + '.open',\r\n        val: val,\r\n        rest: this.input\r\n      });\r\n      if (typeof m[1] !== 'undefined') {\r\n        open.inner = m[1];\r\n      }\r\n      var prev = this.prev();\r\n      var node = pos({\r\n        type: type,\r\n        nodes: [open]\r\n      });\r\n      define(node, 'rest', this.input);\r\n      define(node, 'parsed', parsed);\r\n      define(node, 'prefix', m[1]);\r\n      define(node, 'parent', prev);\r\n      define(open, 'parent', node);\r\n      if (typeof fn === 'function') {\r\n        fn.call(this, open, node);\r\n      }\r\n      this.push(type, node);\r\n      prev.nodes.push(node);\r\n    });\r\n        this.set(type + '.close', function() {\r\n      var pos = this.position();\r\n      var m = this.match(closeRegex);\r\n      if (!m || !m[0]) return;\r\n      var parent = this.pop(type);\r\n      var node = pos({\r\n        type: type + '.close',\r\n        rest: this.input,\r\n        suffix: m[1],\r\n        val: m[0]\r\n      });\r\n      if (!this.isType(parent, type)) {\r\n        if (this.options.strict) {\r\n          throw new Error('missing opening \"' + type + '\"');\r\n        }\r\n        this.setCount--;\r\n        node.escaped = true;\r\n        return node;\r\n      }\r\n      if (node.suffix === '\\\\') {\r\n        parent.escaped = true;\r\n        node.escaped = true;\r\n      }\r\n      parent.nodes.push(node);\r\n      define(node, 'parent', parent);\r\n    });\r\n    return this;\r\n  }","code-length":613,"reference":"Create a parser with open and close for parens,brackets or braces","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var pos = this.position();\r\n    if (this.input) return;\r\n    var prev = this.prev();\r\n    while (prev.type !== 'root' && !prev.visited) {\r\n      if (this.options.strict === true) {\r\n        throw new SyntaxError('invalid syntax:' + util.inspect(prev, null, 2));\r\n      }\r\n      if (!hasDelims(prev)) {\r\n        prev.parent.escaped = true;\r\n        prev.escaped = true;\r\n      }\r\n      visit(prev, function(node) {\r\n        if (!hasDelims(node.parent)) {\r\n          node.parent.escaped = true;\r\n          node.escaped = true;\r\n        }\r\n      });\r\n      prev = prev.parent;\r\n    }\r\n    var tok = pos({\r\n      type: 'eos',\r\n      val: this.append || ''\r\n    });\r\n    define(tok, 'parent', this.ast);\r\n    return tok;\r\n  }","code-length":259,"reference":"Capture end-of-string","result":"Generate the code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    var parsed = this.parsed;\r\n    var len = this.types.length;\r\n    var idx = -1;\r\n    var tok;\r\n    while (++idx < len) {\r\n      if ((tok = this.parsers[this.types[idx]].call(this))) {\r\n        define(tok, 'rest', this.input);\r\n        define(tok, 'parsed', parsed);\r\n        this.last = tok;\r\n        return tok;\r\n      }\r\n    }\r\n  }","code-length":136,"reference":"Run parsers to advance the cursor position","result":"Parse tokens.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(input) {\r\n    if (typeof input !== 'string') {\r\n      throw new TypeError('expected a string');\r\n    }\r\n    this.init(this.options);\r\n    this.orig = input;\r\n    this.input = input;\r\n    var self = this;\r\n    function parse() {\r\n      input = self.input;\r\n      var node = self.next();\r\n      if (node) {\r\n        var prev = self.prev();\r\n        if (prev) {\r\n          define(node, 'parent', prev);\r\n          if (prev.nodes) {\r\n            prev.nodes.push(node);\r\n          }\r\n        }\r\n        if (self.sets.hasOwnProperty(prev.type)) {\r\n          self.currentType = prev.type;\r\n        }\r\n      }\r\n      if (self.input && input === self.input) {\r\n        throw new Error('no parsers registered for: \"' + self.input.slice(0, 5) + '\"');\r\n      }\r\n    }\r\n    while (this.input) parse();\r\n    if (this.stack.length && this.options.strict) {\r\n      var node = this.stack.pop();\r\n      throw this.error('missing opening ' + node.type + ': \"' + this.orig + '\"');\r\n    }\r\n    var eos = this.eos();\r\n    var tok = this.prev();\r\n    if (tok.type !== 'eos') {\r\n      this.ast.nodes.push(eos);\r\n    }\r\n    return this.ast;\r\n  }","code-length":395,"reference":"Parse the given string.\n","result":"Parse a string.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mixin(compiler) {\r\n  define(compiler, '_comment', compiler.comment);\r\n  compiler.map = new utils.SourceMap.SourceMapGenerator();\r\n  compiler.position = { line: 1, column: 1 };\r\n  compiler.content = {};\r\n  compiler.files = {};\r\n  for (var key in exports) {\r\n    define(compiler, key, exports[key]);\r\n  }\r\n}","code-length":112,"reference":"Mixin source map support into `compiler`.\n\n","result":"Mixin the compiler.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction utf8End(buf) {\r\n  var r = buf && buf.length ? this.write(buf) : '';\r\n  if (this.lastNeed) return r + '\\ufffd';\r\n  return r;\r\n}","code-length":64,"reference":"For UTF-8, a replacement character is added when ending on a partial character.","result":"End the encoding .","score":[0,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rangeToPattern(start, stop, options) {\r\n  if (start === stop) {\r\n    return {pattern: String(start), digits: []};\r\n  }\r\n  var zipped = zip(String(start), String(stop));\r\n  var len = zipped.length, i = -1;\r\n  var pattern = '';\r\n  var digits = 0;\r\n  while (++i < len) {\r\n    var numbers = zipped[i];\r\n    var startDigit = numbers[0];\r\n    var stopDigit = numbers[1];\r\n    if (startDigit === stopDigit) {\r\n      pattern += startDigit;\r\n    } else if (startDigit !== '0' || stopDigit !== '9') {\r\n      pattern += toCharacterClass(startDigit, stopDigit);\r\n    } else {\r\n      digits += 1;\r\n    }\r\n  }\r\n  if (digits) {\r\n    pattern += options.shorthand ? '\\\\d' : '[0-9]';\r\n  }\r\n  return { pattern: pattern, digits: [digits] };\r\n}","code-length":270,"reference":"Convert a range to a regex pattern\n","result":"Create a rangeToPattern function.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction use(type, fn, options) {\r\n    var offset = 1;\r\n    if (typeof type === 'string' || Array.isArray(type)) {\r\n      fn = wrap(type, fn);\r\n      offset++;\r\n    } else {\r\n      options = fn;\r\n      fn = type;\r\n    }\r\n    if (typeof fn !== 'function') {\r\n      throw new TypeError('expected a function');\r\n    }\r\n    var self = this || app;\r\n    var fns = self[prop];\r\n    var args = [].slice.call(arguments, offset);\r\n    args.unshift(self);\r\n    if (typeof opts.hook === 'function') {\r\n      opts.hook.apply(self, args);\r\n    }\r\n    var val = fn.apply(self, args);\r\n    if (typeof val === 'function' && fns.indexOf(val) === -1) {\r\n      fns.push(val);\r\n    }\r\n    return self;\r\n  }","code-length":251,"reference":"Call plugin `fn`.","result":"Register a new middleware.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrap(type, fn) {\r\n    return function plugin() {\r\n      return this.type === type ? fn.apply(this, arguments) : plugin;\r\n    };\r\n  }","code-length":55,"reference":"Wrap a named plugin function so that it's only called on objects of the\ngiven `type`\n\n","result":"Wrap plugins .","score":[0.0054,0.068]}
{"code":"\/*is used to<extra_id_0>\r\nfunction memoize(fun) {\r\n    const cache = {};\r\n  if (fun.length === 1) {\r\n    return ( arg) => {\r\n      if (arg in cache) {\r\n        return cache[arg];\r\n      }\r\n      const result = fun(arg);\r\n      cache[arg] = result;\r\n      return result;\r\n    };\r\n  }\r\n  return ( arg1,  arg2) => {\r\n    if (cache[arg1] && arg2 in cache[arg1]) {\r\n      return cache[arg1][arg2];\r\n    }\r\n    const result = fun(arg1, arg2);\r\n    if (!cache[arg1]) {\r\n      cache[arg1] = {};\r\n    }\r\n    cache[arg1][arg2] = result;\r\n    return result;\r\n  };\r\n}","code-length":219,"reference":"Caches results of unary or binary function.\n","result":"Memoize functions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction keyblade (obj, opts) {\r\n  opts = Object.assign({\r\n    message: _defaultMessage,\r\n    logBeforeThrow: true,\r\n    ignore: []\r\n  }, opts)\r\n  opts.ignore = (opts.ignore && Array.isArray(opts.ignore)) ? opts.ignore : []\r\n  return new Proxy(obj, {\r\n    get (target, propKey, receiver) {\r\n      const useGetter = Reflect.has(target, propKey, receiver) || _isReserved(propKey, opts.ignore)\r\n      if (useGetter) {\r\n        return Reflect.get(target, propKey, receiver)\r\n      }\r\n      if (typeof propKey === 'symbol') {\r\n        return Reflect.get(target, propKey, receiver)\r\n      }\r\n      const message = opts.message(propKey)\r\n      if (opts.logBeforeThrow) {\r\n        if (typeof opts.logBeforeThrow === 'function') {\r\n          opts.logBeforeThrow(message, propKey)\r\n        } else {\r\n          console.error(message)\r\n        }\r\n      }\r\n      throw new UndefinedKeyError(message)\r\n    }\r\n  })\r\n}","code-length":298,"reference":"Protects the given object by wrapping it in a Proxy.\n\n","result":"Create a keyblade object.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction subRegister(obj, name) {\r\n  var res;\r\n  res = isPrimitive(obj[name]) ? {} : obj[name];\r\n  return obj[name] = mixable(res).mixin(proto, 'register', 'extend');\r\n}","code-length":70,"reference":"Get or build a sub register for an object.","result":"Register sub classes.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction registerDir(leaf, dir, name) {\r\n  var files;\r\n  try {\r\n    files = fs.readdirSync(dir);\r\n  } catch (_error) {}\r\n  if (files == null) {\r\n    return false;\r\n  }\r\n  if (name != null) {\r\n    leaf = subRegister(leaf, name);\r\n  }\r\n  for (var i = 0, len = files.length; i < len; i++) {\r\n    name = files[i];\r\n    leaf.register(dir, name);\r\n  }\r\n  return true;\r\n}","code-length":156,"reference":"Try to handle as a directory.","result":"Register directories.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction containerStatus(original, status, parent) {\r\n  var state = {\r\n    topology: {\r\n      containers: {}\r\n    }\r\n  };\r\n  var container = {\r\n    id: original.id\r\n  };\r\n  if (parent === null) {\r\n  } else if (parent !== undefined) {\r\n    container.containedBy = parent;\r\n  } else {\r\n    container.containedBy = original.containedBy;\r\n  }\r\n  if (typeof status === 'string') {\r\n    switch(status) {\r\n      case 'detached':\r\n        container.added   = false;\r\n        container.started = false;\r\n        container.running = false;\r\n        break;\r\n      case 'added':\r\n        container.added   = true;\r\n        break;\r\n      case 'started':\r\n        container.started = true;\r\n        break;\r\n      case 'running':\r\n        container.running = true;\r\n        break;\r\n      default:\r\n        throw new Error('unknown state');\r\n    }\r\n  } else {\r\n    _.forIn(status, function(value, key) {\r\n      container[key] = value;\r\n    });\r\n  }\r\n  if (container.added === false) {\r\n    delete container.containedBy;\r\n  }\r\n  state.topology.containers[container.id] = container;\r\n  return state;\r\n}","code-length":361,"reference":"Creates a container status to be used as a precondition\n\nValid values for the status parameters are:\n- a string, such as 'detached', 'added', 'started', 'running'\n- an object, such as { added: true, started: true, running: false }\n\n","result":"Create a containerStatus function.","score":[0.0001,0.0282]}
{"code":"\/*is used to<extra_id_0>\r\nasync function lstatFiles(dirPath, dirContent) {\r\n  const readFiles = dirContent.map(async (relativePath) => {\r\n    const path = join(dirPath, relativePath)\r\n    const ls = await makePromise(lstat, path)\r\n    return {\r\n      lstat: ls,\r\n      path,\r\n      relativePath,\r\n    }\r\n  })\r\n  const res = await Promise.all(readFiles)\r\n  return res\r\n}","code-length":123,"reference":"Update information about directory's content with lstat.\n","result":"Lstat files in a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function readDirStructure(dirPath) {\r\n  if (!dirPath) {\r\n    throw new Error('Please specify a path to the directory')\r\n  }\r\n  const ls = await makePromise(lstat, dirPath)\r\n  if (!ls.isDirectory()) {\r\n    const err = new Error('Path is not a directory')\r\n    err.code = 'ENOTDIR'\r\n    throw err\r\n  }\r\n  const dir =  (await makePromise(readdir, dirPath))\r\n  const lsr = await lstatFiles(dirPath, dir)\r\n  const directories = lsr.filter(isDirectory)\r\n  const notDirectories = lsr.filter(isNotDirectory)\r\n  const files = notDirectories.reduce((acc, current) => {\r\n    const type = getType(current)\r\n    return {\r\n      ...acc,\r\n      [current.relativePath]: {\r\n        type,\r\n      },\r\n    }\r\n  }, {})\r\n  const dirs = await directories.reduce(async (acc, { path, relativePath }) => {\r\n    const res = await acc\r\n    const structure = await readDirStructure(path)\r\n    return {\r\n      ...res,\r\n      [relativePath]: structure,\r\n    }\r\n  }, {})\r\n  const content = {\r\n    ...files,\r\n    ...dirs,\r\n  }\r\n  return {\r\n    content,\r\n    type: 'Directory',\r\n  }\r\n}","code-length":362,"reference":"Read a directory, and return its structure as an object. Only `Files`, `Directories` and `Symlinks` are included!\n","result":"Read the directory structure of a directory.","score":[0.0509,0.0938]}
{"code":"\/*is used to<extra_id_0>\r\nfunction propertyNameToAttribute(name) {\r\n  var result = name.replace(\/([A-Z])\/g, function (match, letter) {\r\n    return '-' + letter.toLowerCase();\r\n  });\r\n  return 'data-' + result;\r\n}","code-length":70,"reference":"Function converts dataset property name \"someValue\" to \"data-some-value\".\n\n","result":"Convert property names to attributes.","score":[0.1568,0.4099]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateCommands(origin, dest) {\r\n  var destCmds = _.chain(dest.topology.containers)\r\n    .values()\r\n    .filter(function(container) {\r\n      return container.containedBy === container.id || !container.containedBy;\r\n    })\r\n    .map(function(container) {\r\n      return {\r\n        cmd: 'configure',\r\n        id: container.id\r\n      };\r\n    })\r\n    .value();\r\n  var originCmds = _.chain(origin.topology.containers)\r\n    .values()\r\n    .map(function(container) {\r\n      if (!dest.topology.containers[container.id]) {\r\n        return {\r\n          cmd: 'detach',\r\n          id: container.id\r\n        };\r\n      }\r\n      return null;\r\n    }).filter(function(container) {\r\n      return container !== null;\r\n    })\r\n    .value();\r\n  return destCmds.concat(originCmds);\r\n}","code-length":261,"reference":"Generate the configure and detach commands for all root elements.\n\n","result":"Generate commands for containers.","score":[0.1116,0.2719]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Limon (input, options) {\r\n  if (!(this instanceof Limon)) {\r\n    return new Limon(input, options)\r\n  }\r\n  lazy.use(this, {\r\n    fn: function (app, opts) {\r\n      app.options = lazy.utils.extend(app.options, opts)\r\n    }\r\n  })\r\n  this.defaults(input, options)\r\n  this.use(lazy.plugin.prevNext())\r\n}","code-length":127,"reference":"> Initialize `Limon` with `input` and `options`.\nBoth are completely optional. You can pass plugins\nand tokens to `options`.\n\n**Example**\n\n```js\nvar Limon = require('limon').Limon\nvar lexer = new Limon('foo bar')\n\n\/\/ or pass only options\nvar limon = new Limon({ foo: 'bar' })\nvar tokens = limon.tokenize('baz qux')\n```\n\n","result":"Create a Limon instance.","score":[0.0,0.011]}
{"code":"\/*is used to<extra_id_0>\r\nfunction planner(origin, dest, opts)  {\r\n  var tasks   = new TaskPlanner();\r\n  var cmds    = generateCommands(origin, dest);\r\n  var state   = _.cloneDeep(origin);\r\n  var result;\r\n  opts = xtend(defaults, opts);\r\n  assert(opts.mode === 'quick' || opts.mode === 'safe', 'unknown mode');\r\n  tasks.addTask({ cmd: 'nop' }, {});\r\n  generateDetachTasks(tasks, origin, opts);\r\n  generateDetachTasks(tasks, dest, opts);\r\n  generateConfigureTasks(tasks, origin, dest, opts);\r\n  _.forIn(state.topology.containers, function(container) {\r\n    container.running = true;\r\n    container.started = true;\r\n    container.added = true;\r\n  });\r\n  _.forIn(dest.topology.containers, function(container) {\r\n    var containers = state.topology.containers;\r\n    if (!containers[container.id]) {\r\n      containers[container.id] = {\r\n        id: container.id,\r\n        containedBy: container.containedBy,\r\n        running: false,\r\n        started: false,\r\n        added: false\r\n      };\r\n    }\r\n  });\r\n  result = cmds.reduce(function(acc, cmd) {\r\n    var plan = tasks.plan(state, cmd);\r\n    if (!plan) {\r\n      throw new Error('unable to generate ' + cmd.cmd + ' for id ' + cmd.id);\r\n    }\r\n    return acc.concat(plan);\r\n  }, []).filter(function(cmd) {\r\n    return cmd && cmd.cmd !== 'nop';\r\n  });\r\n  if (!opts.noLinkUnlinkRemove) {\r\n    result = linkFilter(result);\r\n  }\r\n  return result;\r\n}","code-length":460,"reference":"Creates a new planner\n\n","result":"Generate the tasks to be run.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(strip) {\r\n        if (!strip) {\r\n            console.log(messagingTexts.noStrip);\r\n        }\r\n        if (!(strip instanceof pixel.Strip)) {\r\n            console.log(messagingTexts.wrongStrip);\r\n        }\r\n        pattern.reset(strip, interval);\r\n        interval = pattern.domino(strip, 'white');\r\n    }","code-length":99,"reference":"Set the strip to a loading pattern.","result":"Create a new pattern.","score":[0.1795,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(strip) {\r\n        if (!strip) {\r\n            console.log(messagingTexts.noStrip);\r\n        }\r\n        if (!(strip instanceof pixel.Strip)) {\r\n            console.log(messagingTexts.wrongStrip);\r\n        }\r\n        pattern.reset(strip, interval);\r\n        setTimeout(function() {\r\n            pattern.flash(strip, 'green', 2);\r\n        }, 10);\r\n    }","code-length":112,"reference":"Flash the strip with green lights,indicating tests were successful.","result":"Create a new pattern.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction create(parent, baseUrl, params, callback) {\r\n  parent.getClient().post(baseUrl, params, function(err, definition, response) {\r\n    if (err) return callback(err);\r\n    callback(null, new this(parent, definition));\r\n  }.bind(this));\r\n}","code-length":82,"reference":"Creates a new resource.\n\n","result":"Create a new object.","score":[0.4518,0.7361]}
{"code":"\/*is used to<extra_id_0>\r\nfunction register ( type, lang, handler ) {\r\n    if (Array.isArray(lang)) {\r\n        lang.forEach((v) => store[type].langs[v] = handler);\r\n        return;\r\n    }\r\n    store[type].langs[lang] = handler;\r\n}","code-length":82,"reference":"Register Loader of different Language\n","result":"Register a new language handler.","score":[0.2403,0.2]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( kind, promisesDfd ) {\r\n  return function() {\r\n    var dfd = promisesDfd || this;\r\n    var fnSet = [].slice.call( arguments );\r\n    if ( kind === 'progress' || dfd.state === 'pending' ) {\r\n      dfd[ kind + 's' ].push( fnSet );\r\n    } else {\r\n      callSet.call( dfd, fnSet, this[ kind + 'Args' ] );\r\n    }\r\n    if ( promisesDfd ) {\r\n      return dfd.promise;\r\n    }\r\n    return dfd;\r\n  };\r\n}","code-length":163,"reference":"generator to add callbacks to a bucked and possible fire them","result":"Create a function that returns a function that returns a promise.","score":[0.0979,0.0455]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( set, args) {\r\n  if ( set.length <  1 ) {\r\n    return;\r\n  }\r\n  var apply = [];\r\n  if ( set.length > 1 ) {\r\n    for ( var i = 1; i < set.length; i++ ) {\r\n      if ( set[i] instanceof Argument ) {\r\n        apply[i] = args[ set[i].num ];\r\n      } else {\r\n        apply[i] = set[i];\r\n      }\r\n      apply = apply.slice(1);\r\n    }\r\n  } else {\r\n    apply = args;\r\n  }\r\n  set[0].apply( this, apply );\r\n}","code-length":178,"reference":"call a callback set","result":"Create a new function .","score":[0.2403,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( kind, args ) {\r\n  var bucket = this[ kind + 's' ];\r\n  for ( var i = 0; i < bucket.length; i++ ) {\r\n    callSet.call( this, bucket[i], args );\r\n  }\r\n}","code-length":74,"reference":"call all the callback sets in a callback bucket","result":"Create a new bucket.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n  var dfd = this;\r\n  var promise = function(){\r\n    return promise;\r\n  };\r\n  promise.done = stackNFire( 'done', dfd );\r\n  promise.fail = stackNFire( 'fail', dfd );\r\n  promise.progress = stackNFire( 'progress', dfd );\r\n  promise.state = dfd.state;\r\n  return promise;\r\n}","code-length":113,"reference":"promise generator - psuedo read-only","result":"Create a promise .","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( kind ) {\r\n  return function() {\r\n    if ( this.state === 'pending' ) {\r\n      if ( kind !== 'progress' ) {\r\n        this[ kind + 'Args' ] = arguments;\r\n        this.state = this.promise.state = kind;\r\n      }\r\n      callSets.call( this, kind, arguments );\r\n    }\r\n    return this;\r\n  };\r\n}","code-length":112,"reference":"pass judgement onto thy deferred","result":"Create a function for the given kind.","score":[0,0.0962]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n  this.dones = [];\r\n  this.doneArgs = [];\r\n  this.fails = [];\r\n  this.failArgs = [];\r\n  this.pendings = [];\r\n  this.pendingArgs = [];\r\n  this.state = 'pending';\r\n  this.promise = iPromise.call( this );\r\n}","code-length":99,"reference":"the heart of the beast","result":"Create a new instance of the class.","score":[0.2284,0.3606]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( performer ) {\r\n  var state = performer.state;\r\n    if ( state.allCount === 0 ) {\r\n    var args = [];\r\n    for ( var i = 0; i < performer.args.length; i++ ) {\r\n      args = args.concat( [].concat( performer.args[i].args ) );\r\n    }\r\n    if ( state.targetCount === 0 ) {\r\n      performer._dfd.resolve.apply ( performer._dfd, args );\r\n    } else {\r\n      performer._dfd.reject.apply( performer._dfd, args );\r\n    }\r\n  }\r\n}","code-length":169,"reference":"upon any action on the dependencies, check the resolution","result":"Reject a promise.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(schema) {\r\n  this._decoders = decoders;\r\n  this._encoders = encoders;\r\n  this._schemas = {};\r\n  if(Object.keys(schema).join(',') !== 'name,fields'){\r\n    schema = {\r\n      name: '_auto-' + new Date().getTime(),\r\n      fields: schema\r\n    };\r\n  }\r\n  this._schema = schema;\r\n  this._fieldIndex = Object.keys(schema.fields);\r\n  this._schemas[schema.name] = schema;\r\n}","code-length":148,"reference":"Bolty main class\n","result":"Create a new instance of the class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(selector, properties, value) {\r\n    let rule = postcss.rule({selector: selector})\r\n    let decls = _.map(properties, function(property) {\r\n        return postcss.decl({prop: property, value: value})\r\n    })\r\n    rule.append(decls)\r\n    return rule\r\n}","code-length":90,"reference":"Make a functional CSS rule\n","result":"Create a rule.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(breakpoints, spacingScale) {\r\n    return _.map(breakpoints, function(breakpointValue, breakpointKey) {\r\n        let mediaQuery = postcss.atRule({\r\n            name: 'media',\r\n            params: breakpointValue,\r\n        })\r\n        let rules = _.flatMap(spacingScale, function(scaleValue, scaleKey) {\r\n            return _.map(helpers, function(helperValues, helperKey) {\r\n                return makeFunctionalRule(\r\n                    `.${breakpointKey}-${helperKey}${scaleKey}`,\r\n                    helperValues,\r\n                    scaleValue\r\n                )\r\n            })\r\n        })\r\n        return mediaQuery.append(rules)\r\n    })\r\n}","code-length":184,"reference":"Generate a complete set of responsive spacing helpers\n","result":"Generate media queries.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction destroy(callback) {\r\n  this.getClient().destroy(this.definition._links.self.href, function(err, definition, response) {\r\n    if (err) return callback(err);\r\n    callback();\r\n  }.bind(this));\r\n}","code-length":73,"reference":"Allows a resource to be deleted.\n\n","result":"Destroy the model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction load_config () {\r\n\tlet config = {};\r\n\tif (fs.existsSync(pgrunner_config_file)) {\r\n\t\tconfig = JSON.parse(fs.readFileSync(pgrunner_config_file, {'encoding':'utf8'}));\r\n\t\tif (argv.v) {\r\n\t\t\tdebug.log('Loaded from ', pgrunner_config_file);\r\n\t\t}\r\n\t}\r\n\tif (!is.array(config.servers)) {\r\n\t\tconfig.servers = [];\r\n\t}\r\n\treturn config;\r\n}","code-length":148,"reference":"Returns current config","result":"Load the config file.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction save_config (config) {\r\n\tfs.writeFileSync(pgrunner_config_file, JSON.stringify(config, null, 2), {'encoding':'utf8'});\r\n\tif (argv.v) {\r\n\t\tdebug.log('Saved to ', pgrunner_config_file);\r\n\t}\r\n}","code-length":86,"reference":"Save current config\n\n","result":"Save the config.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction get_server_opts (opts) {\r\n\tdebug.assert(opts).is('object');\r\n\tdebug.assert(opts.settings).is('object');\r\n\treturn {\r\n\t\t'dbconfig': opts.dbconfig,\r\n\t\t'host': opts.settings.host,\r\n\t\t'port': opts.settings.port,\r\n\t\t'user': opts.settings.user,\r\n\t\t'database': opts.settings.database\r\n\t};\r\n}","code-length":123,"reference":"Returns server options\n\n","result":"Get server options.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getResources(domains) {\r\n  return store.getResources().then(rsrcs => {\r\n    return rsrcs.filter(e => domains.includes(e.domain));\r\n  });\r\n}","code-length":58,"reference":"API data resource on local IndexedDB","result":"Get the resources.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction urlFormat(obj) {\r\n    if (isString(obj)) {\r\n        obj = urlParse(obj);\r\n    } else if (!isObject(obj) || isNull(obj)) {\r\n        throw new TypeError('Parameter \"urlObj\" must be an object, not ' +\r\n            isNull(obj) ? 'null' : typeof obj);\r\n    } else if (!(obj instanceof Url)) {\r\n        return Url.prototype.format.call(obj);\r\n    } else {\r\n        return obj.format();\r\n    }\r\n}","code-length":138,"reference":"format a parsed object into a url string","result":"Format the url in the browser.","score":[0.1383,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rayLineVsCircle(ray, circle) {\r\n  var rayLine = new Line2(\r\n    ray.start.x,\r\n    ray.start.y,\r\n    ray.end.x,\r\n    ray.end.y\r\n  );\r\n  return rayLine.intersectCircle(circle.position, circle.radius);\r\n}","code-length":91,"reference":"Treats ray like an infinite line see where it intersects circle.\n\n","result":"Test the rayLineVsCircle function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scopeUrl(options, inst) {\r\n    options = _.extend(_.clone(options || {}), inst)\r\n    if (typeof options !== 'object' && (!options.tournament_id || !options.flight_id))\r\n      throw new Error('tournament_id or flight_id required to make tibreak preference api calls')\r\n    var url = ''\r\n    if (options.tournament_id) {\r\n      url += ngin.Tournament.urlRoot() + '\/' + options.tournament_id\r\n    } else if (options.flight_id) {\r\n      url += ngin.Flight.urlRoot() + '\/' + options.flight_id\r\n    }\r\n    return url + TiebreakPreference.urlRoot()\r\n  }","code-length":187,"reference":"Scopes the url to the tournament, league, or flight\n\n","result":"Construct the scope url.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options, callback) {\r\n      var url = scopeUrl(options, this)\r\n      return Super.fetch.call(this, url, options, callback)\r\n    }","code-length":51,"reference":"Fetch is used by Tournament and list is being used by Flight. Can those be consolidated?","result":"Fetch a resource.","score":[0.0054,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(module, debug) {\r\n  this.debug = debug || false;\r\n  this.jsonrpc = \"2.0\";\r\n  this.methods = module;\r\n  if(handy.getType(module)=='string') {\r\n    this.methods = require(module);\r\n  }\r\n  if(this.debug) {\r\n    logger.debug('Loaded with methods:'+_.functions(this.methods));\r\n  }\r\n}","code-length":117,"reference":"JSON RPC library entry point","result":"Load the methods.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _getParamNames(func) {\r\n  var funStr = func.toString();\r\n  return funStr.slice(funStr.indexOf('(')+1, funStr.indexOf(')')).match(\/([^\\s,]+)\/g);\r\n}","code-length":66,"reference":"returns the function parameters","result":"Get the param names of the function.","score":[0.1615,0.1163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _getChangedProperties() {\r\n  var retVal = {}, key;\r\n  for (key in this._changed) {\r\n    retVal[key] = this._changed[key];\r\n  }\r\n  return retVal;\r\n}","code-length":64,"reference":"Get only changed properties as a hash.\n\n","result":"Get the changed properties.","score":[0.1795,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction update(properties, callback) {\r\n  if (typeof properties == 'function') {\r\n    callback = properties;\r\n    properties = {};\r\n  }\r\n  var key, changed;\r\n  var exceptions = ['addresses_update_action', 'emails_update_action', 'phone_numbers_update_action'];\r\n  for (key in properties) {\r\n    if ('set' + inflection.camelize(key) in this) {\r\n      this['set' + inflection.camelize(key)](properties[key]);\r\n    } else if(exceptions.indexOf(key) != -1) {\r\n      this._changed[key] = properties[key];\r\n    }\r\n  }\r\n  changed = this._getChangedProperties();\r\n  this.getClient().patch(this.definition._links.self.href, changed, function(err, definition, response) {\r\n    if (err) return callback(err);\r\n    this.definition = definition;\r\n    this._setup();\r\n    callback(null, this);\r\n  }.bind(this));\r\n}","code-length":267,"reference":"Allows a resource to be updated.\n\n","result":"Update the object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction byClass (c) {\r\n  c = classnames(c)\r\n  if (\/^\\.\/.test(c)) {\r\n    throw new Error('No need to \".\" on start')\r\n  }\r\n  return bySelector(`.${c}`)\r\n}","code-length":73,"reference":"By class name\n","result":"Return bySelector.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction subtemplate(template, data) {\r\n\ttry {\r\n\t\treturn new JSDOC.JsPlate(publish.conf.templatesDir+template).process(data);\r\n\t}\r\n\tcatch(e) { print(e.message); quit(); }\r\n}","code-length":73,"reference":"Include a sub-template in the current template, specifying a data object","result":"Create subtemplates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeSignature(params) {\r\n\tif (!params) return \"()\";\r\n\tvar signature = \"(\"\r\n\t+\r\n\tparams.filter(\r\n\t\tfunction($) {\r\n      return !\/\\w+\\.\\w+\/.test($.name);\r\n\t\t}\r\n\t).map(\r\n\t\tfunction($) {\r\n      var name = $.isOptional ?\r\n          '[' + $.name + ']' : $.name;\r\n\t\t\treturn name;\r\n\t\t}\r\n\t).join(\", \")\r\n\t+\r\n\t\")\";\r\n\treturn signature;\r\n}","code-length":154,"reference":"Build output for displaying function parameters.","result":"Generate the signature.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction approach(index, x, onAxis)\r\n        {\r\n            while (0 <= x && x <= 1) {\r\n                candidateHSVA[index] = x;\r\n                WebInspector.Color.hsva2rgba(candidateHSVA, candidateRGBA);\r\n                WebInspector.Color.blendColors(candidateRGBA, bgRGBA, blendedRGBA);\r\n                var fgLuminance = WebInspector.Color.luminance(blendedRGBA);\r\n                var dLuminance = fgLuminance - desiredLuminance;\r\n                if (Math.abs(dLuminance) < (onAxis ? epsilon \/ 10 : epsilon))\r\n                    return x;\r\n                else\r\n                    x += (index === V ? -dLuminance : dLuminance);\r\n            }\r\n            return null;\r\n        }","code-length":194,"reference":"Approach the desired contrast ratio by modifying the given component\nfrom the given starting value.\n","result":"Find the closest color to the desired color.","score":[0.0906,0.1049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateNodeColor(data) {\r\n  d3.selectAll('.node').select('.node-symbol')\r\n    .style('fill', d => d3scale.scaleFunction(data.scale)(d[data.column.key]));\r\n}","code-length":69,"reference":"Update DOM attributes","result":"Update node color.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mainControlBox() {\r\n  d3.select('#show-struct')\r\n    .on('change', function () {\r\n      const data = nodeContentInput();\r\n      d3.select('#main-control').datum(data);\r\n      updateNodeStructure(data);\r\n    })\r\n    .dispatch('change');\r\n}","code-length":92,"reference":"Generate controlBox elements","result":"Create the main controlBox.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction centerGraph(newScale, duration, delay)\r\n   {\r\n      if (typeof delay === 'function') { delay = delay.call(this); }\r\n      delay = typeof delay === 'number' ? delay : 0;\r\n      setTimeout(function()\r\n      {\r\n         if (typeof newScale === 'function') { newScale = newScale.call(this); }\r\n         if (typeof duration === 'function') { duration = duration.call(this); }\r\n         newScale = typeof newScale === 'number' ? newScale : zoom.scale();\r\n         duration = typeof duration === 'number' ? duration : 200;\r\n         if (typeof newScale !== 'number') { throw new TypeError(\"centerGraph error: 'newScale' is not a 'number'.\"); }\r\n         if (typeof duration !== 'number') { throw new TypeError(\"centerGraph error: 'duration' is not a 'number'.\"); }\r\n         var bounds = graph.node().getBBox();\r\n         var centerSVGX = (graphWidth * newScale \/ 2);\r\n         var centerSVGY = (graphHeight * newScale \/ 2);\r\n         var centerGraphX = (bounds.x * newScale) + (bounds.width * newScale \/ 2);\r\n         var centerGraphY = (bounds.y * newScale) + (bounds.height * newScale \/ 2);\r\n         var centerTranslate =\r\n         [\r\n            (graphWidth \/ 2) - centerSVGX + (centerSVGX - centerGraphX),\r\n            (graphHeight \/ 2) - centerSVGY + (centerSVGY - centerGraphY)\r\n         ];\r\n         zoom\r\n          .translate(centerTranslate)\r\n          .scale(newScale);\r\n         graph.transition()\r\n          .duration(duration)\r\n          .attr('transform', 'translate(' + zoom.translate() + ')' + ' scale(' + zoom.scale() + ')');\r\n         hideNodeContextMenu();\r\n      }, delay);\r\n   }","code-length":465,"reference":"Centers the graph. All parameters can be either a number or a function evaluated for a number result.\n\n`newScale` and `duration` are evaluated in the centering anonymous function allowing values to be determined\nafter debounce.\n\n","result":"Center the graph.","score":[0.0,0.0472]}
{"code":"\/*is used to<extra_id_0>\r\nfunction detectAllNodesFixed()\r\n   {\r\n      if (data)\r\n      {\r\n         var currentNodesFixed = data.allNodesFixed;\r\n         var allNodesFixed = true;\r\n         data.nodes.forEach(function(node) { if (!node.fixed) { allNodesFixed = false; } });\r\n         data.allNodesFixed = allNodesFixed;\r\n         if (currentNodesFixed !== allNodesFixed) { updateMenuUI(); }\r\n      }\r\n   }","code-length":124,"reference":"Helper function to determin if all nodes are fixed. This is run after any node is dragged and set to fixed.","result":"Detect all nodes fixed.","score":[0.0071,0.1324]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fadeRelatedNodes(targetNode, selected, nodes, links)\r\n   {\r\n      var opacity = selected ? 0.1 : 1;\r\n      var elm = findElementByNode('circle', targetNode);\r\n      elm.classed('selected', opacity < 1);\r\n      $('path.link').removeAttr('data-show');\r\n      nodes.style('stroke-opacity', function(otherNode)\r\n      {\r\n         var thisOpacity = isConnected(targetNode, otherNode) ? 1 : opacity;\r\n         this.setAttribute('fill-opacity', thisOpacity);\r\n         this.setAttribute('stroke-opacity', thisOpacity);\r\n         this.classList[thisOpacity === 1 ? 'remove' : 'add']('dimmed');\r\n         return thisOpacity;\r\n      });\r\n      links.style('stroke-opacity', function(otherNode)\r\n      {\r\n         if (otherNode.source === targetNode)\r\n         {\r\n            var elmNodes = graph.selectAll('.' + formatClassName('node', otherNode.target));\r\n            elmNodes.attr('fill-opacity', 1);\r\n            elmNodes.attr('stroke-opacity', 1);\r\n            elmNodes.classed('dimmed', false);\r\n            var elmCurrentLink = $('path.link[data-source=' + otherNode.source.index + ']');\r\n            elmCurrentLink.attr('data-show', true);\r\n            elmCurrentLink.attr('marker-end', 'url(#regular)');\r\n            return 1;\r\n         }\r\n         else\r\n         {\r\n            return opacity;\r\n         }\r\n      });\r\n      var elmAllLinks = $('path.link:not([data-show])');\r\n      elmAllLinks.attr('marker-end', opacity === 1 ? 'url(#regular)' : '');\r\n   }","code-length":439,"reference":"Fades and unfades connected nodes to a given `targetNode`.\n\n","result":"Fade related nodes in the graph.","score":[0.1171,0.1149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction findElementByNode(prefix, node)\r\n   {\r\n      var selector = '.' + formatClassName(prefix, node);\r\n      return graph.select(selector);\r\n   }","code-length":52,"reference":"A helper to select a given SVG element from given node data.\n\n","result":"Find elements by node.","score":[0,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getElementCoords(element)\r\n   {\r\n      var ctm = element.getCTM();\r\n      return { x: ctm.e + element.getAttribute('cx') * ctm.a, y: ctm.f + element.getAttribute('cy') * ctm.d };\r\n   }","code-length":83,"reference":"Pass in the element and the screen coordinates are returned.\n\n","result":"Get element coordinates.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getSVG(elementType)\r\n   {\r\n      var returnVal;\r\n      var svgElement;\r\n      var cached;\r\n      switch (elementType)\r\n      {\r\n         case 'circle':\r\n         case 'g':\r\n         case 'path':\r\n         case 'text':\r\n            returnVal = function(data)\r\n            {\r\n               svgElement = svgElementMap[elementType].pop();\r\n               cached = svgElement != null;\r\n               svgElement = svgElement != null ? svgElement : document.createElementNS('http:\r\n                elementType);\r\n               if (typeof data === 'object') { for (var key in data) { svgElement.setAttribute(key, data[key]); } }\r\n               return svgElement;\r\n            };\r\n            break;\r\n         default:\r\n            throw new TypeError('getSVG error: unknown elementType.');\r\n      }\r\n      return returnVal;\r\n   }","code-length":229,"reference":"Gets a recycled SVG element from the pool, `svgElementMap`, or creates a new element for the given type. Any\ndata specified by D3 will be copied to the element. Returns a function which is evaluated by D3.\n\n","result":"Create a new SVG element.","score":[0.0007,0.074]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hideNodeContextMenu(event)\r\n   {\r\n      if (typeof selectedContextNode === 'undefined') { return; }\r\n      var contextMenuButton = $('#context-menu');\r\n      var popupmenu = $('#contextpopup .mdl-menu__container');\r\n      if (event)\r\n      {\r\n         event.preventDefault();\r\n         if (!$(event.target).parents('#contextpopup').length > 0)\r\n         {\r\n            if (popupmenu.hasClass('is-visible')) { contextMenuButton.click(); }\r\n            fadeRelatedNodes(selectedContextNode, false, nodes, links);\r\n            selectedContextNode = undefined;\r\n         }\r\n      }\r\n      else\r\n      {\r\n         if (popupmenu.hasClass('is-visible')) { contextMenuButton.click(); }\r\n         fadeRelatedNodes(selectedContextNode, false, nodes, links);\r\n         selectedContextNode = undefined;\r\n      }\r\n   }","code-length":238,"reference":"Hides the node context menu if visible and removes any node highlighting. If an event is supplied it is checked\nagainst any existing context menu and is ignored if the context menu is within the parent hierarchy.\n\n","result":"Hide node context menu.","score":[0.0001,0.0445]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isConnected(targetNode, otherNode)\r\n   {\r\n      return targetNode.index === otherNode.index || linkedByIndex[targetNode.index + ',' + otherNode.index];\r\n   }","code-length":54,"reference":"Checks if a target node is connected to another given node by checking `index` or the `linkedByIndex` map.\n\n","result":"Detect links in the tree.","score":[0.0178,0.0599]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onControlDepsClicked()\r\n   {\r\n      if (this.value === appOptions.currentScope) { return; }\r\n      if (appOptions.maxDepthSticky && appOptions.currentLevel === dataPackageMap[appOptions.currentScope].maxLevel)\r\n      {\r\n         appOptions.currentLevel = dataPackageMap[this.value].maxLevel\r\n      }\r\n      appOptions.currentScope = this.value;\r\n      var maxLevel = dataPackageMap[appOptions.currentScope].maxLevel;\r\n      if (appOptions.currentLevel > maxLevel) { appOptions.currentLevel = maxLevel; }\r\n      $('.control-level input').attr({ max: maxLevel });\r\n      $('.control-level input').val(appOptions.currentLevel);\r\n      $('.control-level label').html(appOptions.currentLevel);\r\n      updateAll({ redrawOnly: true });\r\n      centerGraph(zoomFit, 1000, data.allNodesFixed ? 0 : 2000);\r\n   }","code-length":247,"reference":"Handles responding to the dependencies radio group.","result":"Trigger the onControlDepsClicked event.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onControlLevelChanged()\r\n   {\r\n      appOptions.currentLevel = parseInt(this.value);\r\n      $('.control-level input').val(appOptions.currentLevel);\r\n      $('.control-level label').html(appOptions.currentLevel);\r\n      updateAll({ redrawOnly: true });\r\n      centerGraph(zoomFit, 1000, data.allNodesFixed ? 0 : 2000);\r\n   }","code-length":108,"reference":"Handles responding to the level slider.","result":"Update the graph.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onControlMenuClicked()\r\n   {\r\n      switch ($(this).data('action'))\r\n      {\r\n         case 'toggleFreezeAllNodes':\r\n            setNodesFixed(!data.allNodesFixed);\r\n            break;\r\n         case 'showFullNames':\r\n            appOptions.showFullNames = !appOptions.showFullNames;\r\n            updateAll({ redrawOnly: true });\r\n            break;\r\n         case 'showTableView':\r\n            appOptions.showTableView = !appOptions.showTableView;\r\n            $('.control-table').toggleClass('hidden', !appOptions.showTableView);\r\n            updateTableUIExtent();\r\n            break;\r\n         case 'maxDepthSticky':\r\n            appOptions.maxDepthSticky = !appOptions.maxDepthSticky;\r\n            break;\r\n      }\r\n      setTimeout(updateMenuUI, 200);\r\n   }","code-length":225,"reference":"Handles responding to overflow menu selections.","result":"Detect if a control menu is clicked .","score":[0.1389,0.0806]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onControlTableRowContextClick(node, event)\r\n   {\r\n      event.preventDefault();\r\n      onNodeContextClick(node, { x: event.pageX, y: event.pageY });\r\n   }","code-length":61,"reference":"Handles a context click on a table row showing the related node context menu.\n\n","result":"Create the control table row context click handlers.","score":[0.1291,0.2776]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onControlTableRowMouseOver(nodes, links, node, enter)\r\n   {\r\n      if (node !== selectedContextNode) { hideNodeContextMenu(event); }\r\n      onNodeMouseOverOut(nodes, links, enter, node);\r\n   }","code-length":68,"reference":"Handles a context click on a table row showing the related node context menu. Defers to `onNodeMouseOverOut`.\n\n","result":"Hide nodeContextMenu.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onControlZoomClicked()\r\n   {\r\n      var newScale = 1;\r\n      var scalePercentile = 0.20;\r\n      switch ($(this).data('action'))\r\n      {\r\n         case 'zoom_in':\r\n            newScale = Math.max(Math.min(zoom.scale() * (1 + scalePercentile), maxScaleExtent), minScaleExtent);\r\n            break;\r\n         case 'zoom_out':\r\n            newScale = Math.max(zoom.scale() * (1 - scalePercentile), minScaleExtent);\r\n            break;\r\n         case 'zoom_all_out':\r\n            newScale = zoomFit();\r\n            break;\r\n      }\r\n      centerGraph(newScale);\r\n   }","code-length":186,"reference":"Handles clicks on zoom control buttons and invokes `centerGraph` with new scale value.","result":"Trigger the zoom button .","score":[0.0485,0.082]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onNodeContextMenuClick()\r\n   {\r\n      hideNodeContextMenu();\r\nconsole.log('!! action: ' + $(this).data('action') + '; link: ' + $(this).data('link'));\r\n      switch ($(this).data('action'))\r\n      {\r\n         case 'openLink':\r\n            var link = $(this).data('link');\r\n            if (typeof link === 'string')\r\n            {\r\n               window.open(link, '_blank', 'location=yes,menubar=yes,scrollbars=yes,status=yes');\r\n            }\r\n            break;\r\n      }\r\n   }","code-length":159,"reference":"Handles clicks on the node context menu invoking any active actions.","result":"Hide the node context menu.","score":[0.1491,0.2831]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onNodeContextClick(targetNode, coords)\r\n   {\r\n      hideNodeContextMenu();\r\n      if (typeof coords !== 'object') { coords = getElementCoords(this); }\r\n      var popupmenu = $('#contextpopup .mdl-menu__container');\r\n      var packageData = targetNode.packageData;\r\n      var packageLink, packageType, scmLink, scmType;\r\n      if (packageData)\r\n      {\r\n         if (packageData.packageLink)\r\n         {\r\n            packageLink = packageData.packageLink.link;\r\n            packageType = packageData.packageLink.type;\r\n            switch (packageType)\r\n            {\r\n               case 'npm':\r\n                  packageType = 'NPM';\r\n                  break;\r\n            }\r\n         }\r\n         if (packageData.scmLink)\r\n         {\r\n            scmLink = packageData.scmLink.link;\r\n            scmType = packageData.scmLink.type;\r\n            switch (scmType)\r\n            {\r\n               case 'github':\r\n                  scmType = 'Github';\r\n                  break;\r\n            }\r\n         }\r\n      }\r\n      popupmenu.find('li').each(function(index)\r\n      {\r\n         var liTarget = $(this);\r\n         switch (index)\r\n         {\r\n            case 0:\r\n               if (scmLink && scmType)\r\n               {\r\n                  liTarget.text('Open on ' + scmType);\r\n                  liTarget.data('link', scmLink);\r\n                  liTarget.removeClass('hidden');\r\n               }\r\n               else\r\n               {\r\n                  liTarget.addClass('hidden');\r\n               }\r\n               break;\r\n            case 1:\r\n               if (packageLink && packageType)\r\n               {\r\n                  liTarget.text('Open on ' + packageType);\r\n                  liTarget.data('link', packageLink);\r\n                  liTarget.removeClass('hidden');\r\n               }\r\n               else\r\n               {\r\n                  liTarget.addClass('hidden');\r\n               }\r\n               break;\r\n            case 2:\r\n               if (packageData && packageData.version)\r\n               {\r\n                  liTarget.text('Version: ' + packageData.version);\r\n                  liTarget.removeClass('hidden');\r\n               }\r\n               else\r\n               {\r\n                  liTarget.addClass('hidden');\r\n               }\r\n               break;\r\n         }\r\n      });\r\n      setTimeout(function()\r\n      {\r\n         selectedContextNode = targetNode;\r\n         fadeRelatedNodes(selectedContextNode, true, nodes, links);\r\n         var contextMenuButton = $(\"#context-menu\");\r\n         contextMenuButton.click();\r\n         setTimeout(function()\r\n         {\r\n            popupmenu.parent().css({ position: 'relative' });\r\n            popupmenu.css({ left: coords.x, top: coords.y, position:'absolute' });\r\n         }, 0);\r\n      }, 100);\r\n   }","code-length":734,"reference":"Shows the node context menu\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onNodeMouseDown(nodes, links, targetNode)\r\n   {\r\n      hideNodeContextMenu();\r\n      if (d3.event.button === 0)\r\n      {\r\n         selectedDragNode = targetNode;\r\n         fadeRelatedNodes(targetNode, true, nodes, links);\r\n      }\r\n      else\r\n      {\r\n         d3.event.stopPropagation();\r\n      }\r\n   }","code-length":106,"reference":"Handles a mouse down action on a graph node. Hides any showing context menu. For left clicks the selected node\nbecomes the drag target and related nodes are faded. Any other mouse button is ignored.\n\n","result":"Hide nodeContextMenu.","score":[0,0.0158]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onNodeMouseOverOut(nodes, links, enter, targetNode)\r\n   {\r\n      if (isNodeSelected()) { return; }\r\n      fadeRelatedNodes(targetNode, enter, nodes, links);\r\n   }","code-length":61,"reference":"Handles fading related nodes to the given `targetNode` if there is no currently selected node.\n\n","result":"Handle mouse over.","score":[0,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onResize()\r\n   {\r\n      graphWidth = window.innerWidth;\r\n      graphHeight = window.innerHeight;\r\n      graph.attr('width', graphWidth).attr('height', graphHeight);\r\n      layout.size([graphWidth, graphHeight]).resume();\r\n      updateMenuUI();\r\n      updateTableUIExtent();\r\n      hideNodeContextMenu();\r\n      centerGraph(zoomFit, 1000, data.allNodesFixed ? 0 : 2000);\r\n   }","code-length":121,"reference":"Handles the window resize event.","result":"Detect when the window is resized.","score":[0.273,0.3676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction onTick()\r\n   {\r\n      nodes.attr('cx', function(node) { return node.x; })\r\n       .attr('cy', function(node) { return node.y; })\r\n       .attr('transform', function(node) { return 'translate(' + node.x + ',' + node.y + ')'; });\r\n      links.attr('d', function(link)\r\n      {\r\n         var sourceX = data.nodes[link.source.index].x;\r\n         var sourceY = data.nodes[link.source.index].y;\r\n         var targetX = data.nodes[link.target.index].x;\r\n         var targetY = data.nodes[link.target.index].y;\r\n         var dx = targetX - sourceX,\r\n          dy = targetY - sourceY,\r\n          dr = Math.sqrt(dx * dx + dy * dy);\r\n         return 'M' + sourceX + ',' + sourceY + 'A' + dr + ',' + dr + ' 0 0,1 ' + targetX + ',' + targetY;\r\n      });\r\n   }","code-length":272,"reference":"D3 tick handler for the forced graph layout.","result":"Trigger the tick event.","score":[0.1398,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction recycleGraph()\r\n   {\r\n      var childNodes = graph.selectAll('g > *').remove();\r\n      if (!Array.isArray(childNodes) && !Array.isArray(childNodes['0'])) { return; }\r\n      childNodes = childNodes['0'];\r\n      for (var cntr = 0; cntr < childNodes.length; cntr++)\r\n      {\r\n         var childNode = childNodes[cntr];\r\n         if (childNode instanceof SVGPathElement) { svgElementMap['path'].push(childNode); }\r\n         else if (childNode instanceof SVGCircleElement) { svgElementMap['circle'].push(childNode); }\r\n         else if (childNode instanceof SVGTextElement) { svgElementMap['text'].push(childNode); }\r\n         else if (childNode instanceof SVGGElement)\r\n         {\r\n            childNode.removeAttribute('transform');\r\n            svgElementMap['g'].push(childNode);\r\n         }\r\n      }\r\n   }","code-length":240,"reference":"Recycles all SVG elements above the top level SVGGElement defining the graph.","result":"Recycle the graph.","score":[0.0287,0.2302]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reverseGraphLinks()\r\n   {\r\n      for (var key in dataPackageMap)\r\n      {\r\n         var graphData = dataPackageMap[key];\r\n         graphData.links.forEach(function(link)\r\n         {\r\n            var linkSource = link.source;\r\n            link.source = link.target;\r\n            link.target = linkSource;\r\n         });\r\n      }\r\n   }","code-length":110,"reference":"Reverses all graph links.","result":"Reverse graph links.","score":[0.4137,0.6553]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateMenuUI()\r\n   {\r\n      if (data)\r\n      {\r\n         $('.control-menu li[data-action=toggleFreezeAllNodes]').html(data.allNodesFixed ?\r\n          'Unfreeze nodes' : 'Freeze nodes');\r\n      }\r\n      appMenuToggleOptions.forEach(function(key)\r\n      {\r\n         var icon = appOptions[key] ? 'check_box' : 'check_box_outline_blank';\r\n         $('.control-menu li[data-action=' + key + '] i').html(icon);\r\n      });\r\n   }","code-length":156,"reference":"Provides handling of changing menu text & material icons based on current state.","result":"Update the menu UI.","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateTableUI()\r\n   {\r\n      var table = $('.control-table tbody');\r\n      table.off('mouseenter', 'tr', onControlTableRowMouseOver);\r\n      table.off('mouseleave', 'tr', onControlTableRowMouseOver);\r\n      table.off('contextmenu', 'tr', onControlTableRowContextClick);\r\n      table.empty();\r\n      if (data)\r\n      {\r\n         data.nodes.forEach(function(node)\r\n         {\r\n            var nd = node.packageData;\r\n            var name = appOptions.showFullNames ? nd.actualPackageName : nd.packageName;\r\n            var isAliased = nd.isAlias ? ' isAliased' : '';\r\n            var tr = $(\r\n             '<tr>' +\r\n                '<td class=\"mdl-data-table__cell--non-numeric' + isAliased + '\">' + name + '<\/td>' +\r\n                '<td class=\"mdl-data-table__cell--non-numeric\">' + nd.jspmType + '<\/td>' +\r\n                '<td class=\"mdl-data-table__cell--non-numeric\">' + nd.version + '<\/td>' +\r\n                '<td class=\"mdl-data-table__cell--non-numeric\">' + node.minLevel + '<\/td>' +\r\n             '<\/tr>');\r\n            table.append(tr);\r\n            tr.on('mouseenter', onControlTableRowMouseOver.bind(this, nodes, links, node, true));\r\n            tr.on('mouseleave', onControlTableRowMouseOver.bind(this, nodes, links, node, false));\r\n            tr.on('contextmenu', onControlTableRowContextClick.bind(this, node));\r\n         });\r\n         $('#nodeTable th').removeClass('headerSortDown');\r\n         $('#nodeTable th').removeClass('headerSortUp');\r\n         $('#nodeTable').trigger('update');\r\n         updateTableUIExtent();\r\n      }\r\n   }","code-length":478,"reference":"Builds the table UI with all current node data and associates the active events on each row.","result":"Update the table ui extent.","score":[0.0308,0.1617]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateTableUIExtent()\r\n   {\r\n      var tableDiv = $('.control-table-inner');\r\n      var nodeTable = $('#nodeTable');\r\n      var tableHeight = nodeTable.height();\r\n      var offset = tableDiv.offset();\r\n      var maxTableHeight = window.innerHeight - offset.top - 20;\r\n      tableDiv.css('max-height', maxTableHeight);\r\n      nodeTable.css('margin-right', tableHeight > maxTableHeight ? '10px' : '0px');\r\n   }","code-length":138,"reference":"Updates the node table max-height enabling scrolling as necessary.","result":"Update table UI extent.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction zoomFit()\r\n   {\r\n      var bounds = graph.node().getBBox();\r\n      var parent = graph.node().parentElement;\r\n      var fullWidth = parent.clientWidth, fullHeight = parent.clientHeight;\r\n      var width = bounds.width, height = bounds.height;\r\n      if (width === 0 || height === 0) { return 1; }\r\n      var scale = 0.75 \/ Math.max(width \/ fullWidth, height \/ fullHeight);\r\n      scale = Math.max(Math.min(scale, maxScaleExtent), minScaleExtent);\r\n      return scale;\r\n   }","code-length":154,"reference":"Determines a new scale that fits the entire graph into view.\n\n","result":"Zoom the graph .","score":[0.066,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getWindowWidth() {\r\r\n\t\tif (window.innerWidth) {\r\r\n\t\t\treturn window.innerWidth;\r\r\n\t\t} else if (document.documentElement.clientWidth) {\r\r\n\t\t\treturn document.documentElement.clientWidth;\r\r\n\t\t} else if (document.body.clientWidth) {\r\r\n\t\t\treturn document.body.clientWidth;\r\r\n\t\t} else{\r\r\n\t\t\treturn 0;\t\r\r\n\t\t}\r\r\n\t}","code-length":128,"reference":"Get the the inner width of the browser window","result":"Get the window width.","score":[0.1433,0.1765]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(cssScreen, cssHandheld, mobileMaxWidth) {\r\r\n\t\t\t\r\n\t\t\tif (typeof(cssScreen) != \"undefined\") {\r\r\n\t\t\t\tconfig.cssScreen = cssScreen;\t\r\r\n\t\t\t}\r\r\n\t\t\tif (typeof(cssHandheld) != \"undefined\") {\r\r\n\t\t\t\tconfig.cssHandheld = cssHandheld;\t\r\r\n\t\t\t}\r\r\n\t\t\tif (typeof(mobileMaxWidth) != \"undefined\") {\r\r\n\t\t\t\tconfig.mobileMaxWidth = mobileMaxWidth;\t\r\r\n\t\t\t}\r\r\n\t\t\t\r\r\n\t\t\t\r\n\t\t\tvar cssloadCheckNode = document.createElement('div');\r\r\n\t\t\tcssloadCheckNode.className = config.testDivClass;\r\r\n\t\t\tdocument.getElementsByTagName(\"body\")[0].appendChild(cssloadCheckNode);\r\r\n\t\t\tif (cssloadCheckNode.offsetWidth != 100 && noMediaQuery == false) {\r\r\n\t\t\t\tnoMediaQuery = true;\r\r\n\t\t\t}\r\r\n\t\t\tcssloadCheckNode.parentNode.removeChild(cssloadCheckNode)\r\r\n\t\t\t\r\r\n\t\t\tif (noMediaQuery == true) {\r\r\n\t\t\t\t\r\n\t\t\t\tvar cssHref = \"\";\r\r\n\t\t\t\t\r\r\n\t\t\t\t\r\n\t\t\t\tif (getWindowWidth() <= config.mobileMaxWidth) {\r\r\n\t\t\t\t\tcssHref = config.cssHandheld;\r\r\n\t\t\t\t\tnewCssMediaType = \"handheld\";\r\r\n\t\t\t\t} else {\r\r\n\t\t\t\t\tcssHref = config.cssScreen;\r\r\n\t\t\t\t\tnewCssMediaType = \"screen\";\r\r\n\t\t\t\t}\r\r\n\t\t\t\t\r\r\n\t\t\t\t\r\n\t\t\t\tif (cssHref != \"\" && currentCssMediaType != newCssMediaType) {\r\r\n\t\t\t\t\tvar currentCssLinks = document.styleSheets\r\r\n\t\t\t\t\tfor (var i = 0; i < currentCssLinks.length; i++) {\r\r\n\t\t\t\t\t\tfor (var ii = 0; ii < currentCssLinks[i].media.length; ii++) {\r\r\n\t\t\t\t\t\t\tif (typeof(currentCssLinks[i].media) == \"object\") {\r\r\n\t\t\t\t\t\t\t\tif (currentCssLinks[i].media.item(ii) == \"fallback\") {\r\r\n\t\t\t\t\t\t\t\t\tcurrentCssLinks[i].ownerNode.parentNode.removeChild(currentCssLinks[i].ownerNode)\r\r\n\t\t\t\t\t\t\t\t\ti--\r\r\n\t\t\t\t\t\t\t\t\tbreak;\r\r\n\t\t\t\t\t\t\t\t}\r\r\n\t\t\t\t\t\t\t} else {\r\r\n\t\t\t\t\t\t\t\tif (currentCssLinks[i].media.indexOf(\"fallback\") >= 0) {\r\r\n\t\t\t\t\t\t\t\t\tcurrentCssLinks[i].owningElement.parentNode.removeChild(currentCssLinks[i].owningElement)\r\r\n\t\t\t\t\t\t\t\t\ti--\r\r\n\t\t\t\t\t\t\t\t\tbreak;\r\r\n\t\t\t\t\t\t\t\t}\r\r\n\t\t\t\t\t\t\t}\r\r\n\t\t\t\t\t\t}\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\tif (typeof(cssHref) == \"object\") {\r\r\n\t\t\t\t\t\tfor (var i = 0; i < cssHref.length; i++) {\r\r\n\t\t\t\t\t\t\taddCssLink(cssHref[i])\r\r\n\t\t\t\t\t\t}\r\r\n\t\t\t\t\t} else {\r\r\n\t\t\t\t\t\taddCssLink(cssHref)\r\r\n\t\t\t\t\t}\r\r\n\t\t\t\t\t\t\t\t\t\t\r\r\n\t\t\t\t\tcurrentCssMediaType = newCssMediaType;\r\r\n\t\t\t\t}\r\r\n\r\r\n\t\t\t\t\r\r\n\t\t\t\t\r\n\t\t\t\taddEvent(window, wbos.CssTools.MediaQueryFallBack.LoadCssDelayed, 'onresize')\r\r\n\t\t\t}\r\r\n\t\t}","code-length":866,"reference":"Adds link to CSS in the head if no CSS is loaded\n\n","result":"Code too long,keep in 512.","score":[0.0593,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction do_success(req, res, msg) {\r\n\tres.writeHead(200, {'Content-Type': ((typeof msg === 'string') ? 'text\/plain' : 'application\/json')});\r\n\tmsg = (typeof msg === 'string') ? msg : helpers.stringify(msg);\r\n\tres.end(msg);\r\n}","code-length":89,"reference":"Sends successful HTTP reply","result":"Handle the success message.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction do_failure(req, res, opts) {\r\n\topts = opts || {};\r\n\tvar obj = {\r\n\t\t'type': opts.type || 'error',\r\n\t\t'code': opts.code || 501,\r\n\t\t'desc': opts.desc || (''+opts)\r\n\t};\r\n\tres.writeHead(obj.code, {'Content-Type': 'application\/json'});\r\n\tres.end(helpers.stringify(obj) + '\\n');\r\n}","code-length":128,"reference":"Sends failed HTTP reply","result":"Handle the failure.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction do_create_req(config, routes) {\r\n\troutes = routes || {};\r\n\tvar version = routes.version || {};\r\n\tif(version && (typeof version === 'object')) {\r\n\t} else {\r\n\t\tversion = {'self':routes.version || config.pkg.version};\r\n\t}\r\n\t\r\n\tif(!version.api) {\r\n\t\tversion.api = api_config.pkg.version;\r\n\t}\r\n\t\r\n\troutes.version = version;\r\n\tvar router = new RequestRouter(routes);\r\n\tvar req_counter = 0;\r\n\t\r\n\tfunction do_req(req, res) {\r\n\t\treq_counter += 1;\r\n\t\treturn router.resolve( req, res );\r\n\t}\r\n\treturn do_req;\r\n}","code-length":208,"reference":"Builder for generic HTTP Request Handler","result":"Create a request.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction do_create_server(config, do_req) {\r\n\tvar http = require('http');\r\n\tif(config.host) {\r\n\t\thttp.createServer(do_req).listen(config.port, config.host);\r\n\t\t).listen(config.port);\r\n\t\t","code-length":80,"reference":"HTTP Server Creation","result":"Create server.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setup_server(config, opts) {\r\n\tconfig._def('port', 3000);\r\n\tvar req_handler = do_create_req(config, opts);\r\n\tvar server = do_create_server(config, function(req, res) {\r\n\t\treq_handler(req, res).then(function(obj) {\r\n\t\t\tif(obj === api.replySent) {\r\n\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t} else if(obj === api.notFound) {\r\n\t\t\t\tdo_failure(req, res, {'verb': 'notFound', 'desc':'The requested resource could not be found.', 'code':404});\r\n\t\t\t} else {\r\n\t\t\t\tdo_success(req, res, obj);\r\n\t\t\t}\r\n\t\t}).fail(function(err) {\r\n\t\t\tdo_failure(req, res, err);\r\n\t\t\tif(!(err instanceof errors.HTTPError)) {\r\n\t\t\t\trequire('prettified').errors.print(err);\r\n\t\t\t}\r\n\t\t}).done();\r\n\t});\r\n\treturn server;\r\n}","code-length":275,"reference":"API server builder","result":"Setup the server.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(element, ev, fn){\r\n\tif(element.addEventListener) \r\n\t\telement.addEventListener(ev, fn, false);\r\n\telse element.attachEvent(\"on\" + ev, fn);\r\n}","code-length":61,"reference":"Cross-browser event listener","result":"Create a new element.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Reply(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  Reply.super_.apply(this, arguments);\r\n}","code-length":67,"reference":"Initialize a new `Reply` with the given `parent` and `definition`.\n\n","result":"Create a reply object.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction serveGitFile(repo, tree, parts, res, next) {\r\n  var thisPart = parts.shift();\r\n  var isLastPart = parts.length === 0;\r\n  var entryIndex = -1;\r\n  for (var i=0; i < tree.entries.length; i++) {\r\n    if (tree.entries[i].name === thisPart) {\r\n      entryIndex = i;\r\n      break;\r\n    }\r\n  }\r\n  if (entryIndex < 0) return next();\r\n  var entry = tree.entries[entryIndex];\r\n  if (isLastPart) {\r\n    repo.getBlob(entry.id, function(err, buf) {\r\n      if (err) return next(err);\r\n      if (!buf.data) return next();\r\n      serveBuffer(buf.data, res, thisPart);\r\n    });\r\n  } else {\r\n    repo.getTree(entry.id, function(err, entryTree) {\r\n      if (err) return next(err);\r\n      serveGitFile(repo, entryTree, parts, res, next);\r\n    });\r\n  }\r\n}","code-length":283,"reference":"Returns a Buffer of the specified file from the specified repo and commit reference. Recursively gets the tree instances until the last part, which is gets the rawObject for and serves back over HTTP.","result":"Serve files from git.","score":[0.0002,0.0824]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processFileList(files, base, settings, state) {\r\n    for (var i = 0; i < files.length; i++) {\r\n        var modulePath = path.join(base, files[i]);\r\n        var stats = fs.statSync(modulePath);\r\n        if (stats.isFile()) {\r\n            var module = require(modulePath);            \r\n            var relative = path.relative(settings.source, modulePath);\r\n            __log('Relative path: %s', relative);\r\n            var pathWithoutExtension = relative.substr(0, relative.lastIndexOf('.'));\r\n            var routeName = pathWithoutExtension.replace(\/\\\\\/g, '\/').replace(\/\\.\/g, '_');\r\n                        var isRoot = new RegExp(settings.rootModule + '\/?$', 'g').test(routeName);\r\n            var routePath = routeName;\r\n            if (isRoot) {\r\n                if(routePath.lastIndexOf('\/') > -1)\r\n                    routePath = routePath.substr(0, routePath.lastIndexOf('\/'));\r\n                else\r\n                    routePath = undefined;\r\n            }\r\n            __log('%s (%s)', routeName, routePath);\r\n            var apiPath = utils.combineApiPath(settings.root, routePath);\r\n            state.endpoints[routeName] = {\r\n                baseUrl: apiPath,\r\n                filename: modulePath,\r\n                routeName: routeName\r\n            };\r\n            __log(state.endpoints[routeName]);\r\n            settings.app.use(apiPath, module);\r\n        }\r\n        else if (stats.isDirectory()) {\r\n            var dirFiles = fs.readdirSync(modulePath);\r\n            processFileList(dirFiles, modulePath, settings, state);\r\n        }\r\n    }\r\n}","code-length":428,"reference":"Processes a list of files and produces the api routing for them\n","result":"Process files in the source folder.","score":[0.0845,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction packageModule(global, name, api) {\r\n  if (global.define && global.define.amd) {\r\n    define([], api);\r\n  } else if (typeof exports !== \"undefined\") {\r\n    module.exports = api;\r\n  } else {\r\n    global[name] = api;\r\n  }\r\n}","code-length":91,"reference":"package module for different environments","result":"Package the module.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Ebus(p) {\r\n\t\"use strict\";\r\n\t\r\n\tthis.debug = false;\r\n\tthis.yields = false;\r\n\tthis.handlers = {};\r\n\tif (p) {\r\n\t\tthis.priorities = p;\r\n\t} else {\r\n\t\tthis.priorities = {};\r\n\t}\r\n}","code-length":97,"reference":"polyfills the global setImmediate","result":"Create Ebus.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ApiClient(config) {\r\n  var self = this\r\n  this.config = _.extend({}, config, {client:this})\r\n  config.headers = _.extend({}, config.headers, { Accept: 'application\/json' })\r\n  this.auth = config.auth\r\n  models.sync = require('.\/sync')\r\n  models.Model = require('.\/modelbase')\r\n  models.NginModel = require('.\/nginModel')\r\n  Object.keys(models).forEach(function(modelName) {\r\n    Object.defineProperty(self, modelName, {\r\n      get: function() { return models[modelName](self) },\r\n      enumerable:true,\r\n      configurable:true\r\n    })\r\n  })\r\n  _.extend(this, models)\r\n}","code-length":204,"reference":"Common entry point for all API models\n\n","result":"Create a new client.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFirstIndexOf(value, array) {\r\n    error_if_not_primitive_or_array_1.errorIfNotPrimitiveOrArray(value);\r\n    if (isArray_notArray_1.isArray(value)) {\r\n        return getFirstIndexOfArray_1.getFirstIndexOfArray(value, array);\r\n    }\r\n    else {\r\n        return getIndexOfPrimitive_1.getIndexOfPrimitive(value, array);\r\n    }\r\n}","code-length":115,"reference":"returns -1 if value being searched for isn't found. value cannot be object.","result":"ErrorIfNotPrimitiveOrArray.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scopeUrl(options, inst) {\r\n    options = _.extend({}, inst, options)\r\n    if (!options.season_id)\r\n      throw new Error('season_id required to make division instance api calls')\r\n    return ngin.Season.urlRoot() + '\/' + options.season_id + Division.urlRoot()\r\n  }","code-length":92,"reference":"Scopes the url to the season\n\n","result":"Make scopeUrl api calls.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Customer(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  Customer.super_.apply(this, arguments);\r\n}","code-length":67,"reference":"Initialize a new `Customer` with the given `parent` and `definition`.\n\n","result":"Create a new instance of the class.","score":[0.1647,0.2635]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copy(obj) {\r\n    return Object.getOwnPropertyNames(obj || {}).reduce((a, c) => {\r\n        a[c] = obj[c];\r\n        return a;\r\n    }, {});\r\n}","code-length":64,"reference":"This does a shallow copy of objects. This is needed for objects such as Errors Otherwise some properties may not be available.","result":"Copy object.","score":[0,0.025]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatWith(options) {\r\n        options = Object.assign({}, DEFAULTS, options);\r\n        return (message, ...args) => {\r\n            return _formatter(options, message, ...args);\r\n        };\r\n    }","code-length":66,"reference":"Formats a message using the specified options.\n\n","result":"Format messages.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sourceDir, destFile, opts) {\r\n        opts = opts || { archive_path: '\/' };\r\n        return new Promise(function (resolve, reject) {\r\n            try {\r\n                var archive = archiver.create('zip', {\r\n                    zlib: {\r\n                        level: 9\r\n                    }\r\n                });\r\n                var output = fs.createWriteStream(destFile);\r\n                output.on('finish', function () {\r\n                    resolve(destFile);\r\n                });\r\n                archive.pipe(output);\r\n                archive.directory(sourceDir, opts.archive_path);\r\n                archive.finalize();\r\n            } catch(err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }","code-length":186,"reference":"Zips up a directory.\n\n","result":"Create a zip file .","score":[0.2403,0.2439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sourceFile, destDir) {\r\n        return new Promise(function(resolve, reject) {\r\n            var zip = new AdmZip(sourceFile);\r\n            try {\r\n                zip.extractAllTo(destDir);\r\n                resolve(destDir);\r\n            } catch(err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }","code-length":98,"reference":"Extracts a zip to a directory.\nThis will fail if the destination already exists.\n\n","result":"Extract a zip file.","score":[0.0371,0.1154]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sourceDir, destFile, opts) {\r\n        opts = opts || { archive_path: '\/' };\r\n        return new Promise(function(resolve, reject) {\r\n            var tempFile = destFile + '.tmp.tar';\r\n            try {\r\n                var archive = archiver.create('tar');\r\n                var output = fs.createWriteStream(tempFile);\r\n                output.on('finish', function () {\r\n                    resolve(tempFile);\r\n                });\r\n                archive.pipe(output);\r\n                archive.directory(sourceDir, opts.archive_path);\r\n                archive.finalize();\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        })\r\n        .then(function(tempFile) {\r\n            try {\r\n                var data = new Buffer(fs.readFileSync(tempFile), 'utf8');\r\n                var compressed = new Buffer(Bzip2.compressFile(data));\r\n                fs.writeFileSync(destFile, compressed);\r\n                return destFile;\r\n            } catch(err) {\r\n                throw err;\r\n            } finally {\r\n                rimraf.sync(tempFile);\r\n            }\r\n        });\r\n    }","code-length":297,"reference":"Create a Bzip2 compressed tar of a directory.\n\n","result":"Create a tar file .","score":[0.2064,0.1948]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sourceFile, destDir) {\r\n        return new Promise(function(resolve, reject) {\r\n            var tempFile = sourceFile + '.tmp.tar';\r\n            try {\r\n                var data = new Buffer(fs.readFileSync(sourceFile));\r\n                var expanded = Bzip2.decompressFile(data);\r\n                fs.writeFileSync(tempFile, new Buffer(expanded));\r\n                resolve(tempFile);\r\n            } catch(err) {\r\n                reject(err);\r\n            }\r\n        }).then(function(tempFile) {\r\n            return new Promise(function(resolve, reject) {\r\n                try {\r\n                    var rs = fs.createReadStream(tempFile);\r\n                    rs.pipe(tar.extract(destDir).on('finish', function() {\r\n                        rimraf.sync(tempFile);\r\n                        resolve(destDir);\r\n                    }));\r\n                } catch (err) {\r\n                    rimraf.sync(tempFile);\r\n                    reject(err);\r\n                }\r\n            });\r\n        });\r\n    }","code-length":265,"reference":"Extracts a tar to a directory.\n\n","result":"Extract a file.","score":[0.1502,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nasync function make(dir) {\r\n  try {\r\n    await makePromise(mkdir, dir)\r\n  } catch (err) {\r\n    if (err.code == 'ENOENT') {\r\n      const parentDir = dirname(dir)\r\n      await make(parentDir)\r\n      await make(dir)\r\n    } else if (err.code != 'EEXIST') {\r\n      throw err\r\n    }\r\n  }\r\n}","code-length":116,"reference":"Recursive promise-based mkdir.\n","result":"Create a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fabricator(stack, options) {\r\n  options = options || {};\r\n  if (empty(stack)) return [];\r\n  switch (is(stack)) {\r\n    case 'string':\r\n      stack = read(stack, options);\r\n    break;\r\n    case 'object':\r\n      stack = Object.keys(stack).reduce(iterator(read, stack, options), []);\r\n    break;\r\n    case 'array':\r\n      stack = stack.reduce(iterator(read, null, options), []);\r\n    break;\r\n    default:\r\n      if ('function' !== typeof stack) {\r\n        throw new Error('Unsupported type, cannot fabricate an: '+ is(stack));\r\n      }\r\n      stack = [init(stack, undefined, options)];\r\n  }\r\n  return (stack || []).filter(Boolean);\r\n}","code-length":214,"reference":"Expose small fabrication helper.\n\nPossible options:\n\n- source:    {String}   Absolute path to be used to resolve file paths.\n- recursive: {Boolean}  Should file paths be recursively discovered.\n- name:      {String}   Force a name for a given constructor.\n\n","result":"Create a fabricator function.","score":[0.0001,0.0297]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read(filepath, options) {\r\n  if ('string' !== is(filepath)) return fabricator(filepath, options);\r\n  if (options.source) filepath = path.resolve(options.source, filepath);\r\n  if (js(filepath) || options.recursive === false) return [\r\n    init(filepath, path.basename(filepath, '.js'), options)\r\n  ];\r\n  if (!fs.existsSync(filepath)) return false;\r\n  return fs.readdirSync(filepath).map(function locate(file) {\r\n    file = path.resolve(filepath, file);\r\n    var stat = fs.statSync(file);\r\n    if (stat.isDirectory() && fs.existsSync(path.join(file, 'index.js'))) {\r\n      return init(path.join(file, 'index.js'), path.basename(file, '.js'), options);\r\n    }\r\n    if (!stat.isFile() || !js(file)) return;\r\n    return init(file, path.basename(file, '.js'), options);\r\n  });\r\n}","code-length":265,"reference":"Read directory and initialize JavaScript files.\n\n","result":"Return a fabricator object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction iterator(traverse, obj, options) {\r\n  return function reduce(stack, entity) {\r\n    var base = obj ? obj[entity] : entity\r\n      , name = options.name || entity;\r\n    if (obj) options.name = entity;\r\n    if (js(base)) {\r\n      return stack.concat(init(\r\n        base,\r\n        'string' === is(name) ? name : '',\r\n        options\r\n      ));\r\n    }\r\n    if (Array.isArray(base)) {\r\n      options.name = name;\r\n      stack.push(traverse(base, options));\r\n      return stack;\r\n    }\r\n    return stack.concat(traverse(base, options));\r\n  };\r\n}","code-length":193,"reference":"Return iterator for array or object.\n\n","result":"Iterate over an object.","score":[0.1938,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction js(file) {\r\n  var type = is(file);\r\n  return 'function' === type\r\n  || 'string' === type && path.extname(file) === '.js';\r\n}","code-length":58,"reference":"Make sure only valid JavaScript files are used as source. Ignore other files,\nlike .log files. Also allow constructors.\n\n","result":"Detect js files.","score":[0.002,0.0287]}
{"code":"\/*is used to<extra_id_0>\r\nfunction empty(value) {\r\n  if (!value) return true;\r\n  switch (is(value)) {\r\n    case \"object\": return !Object.keys(value).length;\r\n    case \"array\": return !value.length;\r\n    default: return !value;\r\n  }\r\n}","code-length":81,"reference":"Simple check to see if the provided stack is empty or falsy.\n\n","result":"Return true if value is empty.","score":[0.0845,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction click(e) {\r\n\t\tvar op = 'remove';\r\n\t\tif (this.className==='menuLink') {\r\n\t\t\top = document.body.classList.contains('menu-open') ? 'remove' : 'add';\r\n\t\t\te.preventDefault();\r\n\t\t}\r\n\t\tdocument.body.classList[op]('menu-open');\r\n\t}","code-length":103,"reference":"menu link is a toggle, sidebar links are close-only","result":"Open the menu.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ShellStream(args){\r\n    if(this instanceof ShellStream === false){\r\n        return new ShellStream(args);\r\n    }\r\n    this._command = args;\r\n    this._events = [];\r\n    var self = this;\r\n    streams.forEach(function(stream){\r\n        self[stream] = {on:this.on, _events:[]};\r\n    });\r\n}","code-length":106,"reference":"Main function for creating a shellstream\n\n","result":"Create a shell stream.","score":[0.1938,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, specs) {\r\n\tthis.name = name;\r\n\tthis.id = 0;\r\n\tthis.properties = specs.properties || [];\r\n\tthis.extends = specs.extends || null;\r\n\tthis.depends = specs.depends || null;\r\n\tthis.factory = specs.factory || \"new\";\r\n\tthis.init = specs.init || \"default\";\r\n\tthis.frequent = false;\r\n\tthis.keepUsedProperties = false;\r\n\tthis.initProperties = true;\r\n\tthis.initConstructorArgs = [];\r\n\tthis.propCustomAssign = {};\r\n\tthis.propAssign = \"\";\r\n\tthis.propCustomGet = {};\r\n\tthis.propGet = \"\";\r\n\tthis.postInit = specs.postInit || \"\";\r\n\tthis.embed = specs.embed || [];\r\n\tif (this.postInit) this.postInit += \"\\n\";\r\n\t\r\n\tthis.safeName = name.replace(\/[,\\.\\- \\_]\/g, '_');\r\n\t\r\n\tif (this.init instanceof Array) {\r\n\t\tthis.initConstructorArgs = this.init;\r\n\t\tthis.init = \"constructor\";\r\n\t\tthis.factory = \"create\"\r\n\t} else if (this.init instanceof {}.constructor) {\r\n\t\tthis.propCustomAssign = this.init;\r\n\t\tthis.init = \"default\";\r\n\t\t\r\n\t\tif (this.propCustomAssign['default']) {\r\n\t\t\tthis.propAssign = this.propCustomAssign['default'];\r\n\t\t\tdelete this.propCustomAssign['default'];\r\n\t\t}\r\n\t} else if (this.init !== \"default\") {\r\n\t\t\r\n\t\tif (this.factory === \"new\")\r\n\t\t\tthis.factory = \"create\";\r\n\t}\r\n\t\r\n\tif (specs.getter) {\r\n\t\tif (typeof specs == 'object') {\r\n\t\t\tthis.propCustomGet = specs.getter;\r\n\t\t\t\r\n\t\t\tif (this.propCustomGet['default']) {\r\n\t\t\t\tthis.propGet = this.propCustomGet['default'];\r\n\t\t\t\tdelete this.propCustomGet['default'];\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.propGet = specs.getter;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (specs.frequent !== undefined) {\r\n\t\tthis.frequent = ([\"yes\",\"true\",\"1\"].indexOf(specs.frequent.toString().toLowerCase()) >= 0);\r\n\t}\r\n\tif (specs.initProperties !== undefined) {\r\n\t\tthis.initProperties = ([\"yes\",\"true\",\"1\"].indexOf(specs.initProperties.toString().toLowerCase()) >= 0);\r\n\t}\r\n\tif (specs.keepUsedProperties !== undefined) {\r\n\t\tthis.keepUsedProperties = ([\"yes\",\"true\",\"1\"].indexOf(specs.keepUsedProperties.toString().toLowerCase()) >= 0);\r\n\t}\r\n}","code-length":736,"reference":"A representation of an object in the profile","result":"Code too long,keep in 512.","score":[0.1319,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( o ) {\r\n\t\t\r\n\t\tif (this.extends) {\r\n\t\t\tthis.embed = o.embed.concat(this.embed);\r\n\t\t\tthis.properties = o.properties.concat(this.properties);\r\n\t\t\tthis.postInit = o.postInit + this.postInit;\r\n\t\t\t\r\n\t\t\tif (this.init === \"default\") this.init = o.init;\r\n\t\t\tif (this.factory === \"new\") this.factory = o.factory;\r\n\t\t\t\r\n\t\t\tif (!this.propAssign) this.propAssign = o.propAssign;\r\n\t\t\t\r\n\t\t\tfor (var k in o.propCustomAssign) {\r\n\t\t\t\tif (!this.propCustomAssign[k]) {\r\n\t\t\t\t\tthis.propCustomAssign[k] = o.propCustomAssign[k];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":226,"reference":"Extend our properties based on specified object","result":"Extend object properties.","score":[0.128,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( instVar, prefix ) {\r\n\t\tvar code = \"[\", getCode = \"\", prop=\"\", defaultGet = \"$inst.$prop\";\r\n\t\tif (this.defaultGet) defaultGet = defaultGet;\r\n\t\tfor (var i=0, l=this.properties.length; i<l; ++i) {\r\n\t\t\tprop = this.properties[i];\r\n\t\t\tif (i > 0) code += \",\";\r\n\t\t\tif (this.propCustomGet[prop]) {\r\n\t\t\t\tgetCode = this.propCustomGet[prop]\r\n\t\t\t\t\t.replace(\/\\$inst\/g, instVar)\r\n\t\t\t\t\t.replace(\/\\$prop\/g, prop);\r\n\t\t\t} else {\r\n\t\t\t\tgetCode = defaultGet\r\n\t\t\t\t\t.replace(\/\\$inst\/g, instVar)\r\n\t\t\t\t\t.replace(\/\\$prop\/g, prop);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.embed.indexOf(prop) === -1) {\r\n\t\t\t\tcode += \"\\n\" + prefix + getCode;\r\n\t\t\t} else {\r\n\t\t\t\tcode += \"\\n\" + prefix + \"new BinaryEncoder.FileResource( \" + getCode + \" )\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tcode += \"]\";\r\n\t\treturn code;\r\n\t}","code-length":318,"reference":"Generate the property getter","result":"Generate code for the array .","score":[0.2296,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tvar props = this.properties.slice().sort();\r\n\t\treturn 'init' + crypto.createHash('md5').update(props.join(\",\")).digest(\"hex\");\r\n\t}","code-length":61,"reference":"Generate the name of the property initialization function.","result":"Generate the name of the function.","score":[0.6025,0.755]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( instVar, valVar, pageszVar, offsetVar, prefix, indent ) {\r\n\t\tvar code = \"\", usedProps = {}, defaultAssign = \"$inst.$prop = $value\",\r\n\t\t\treplaceVariableMacro = (function(s,v) {\r\n\t\t\t\tvar i = this.properties.indexOf(v);\r\n\t\t\t\tif (i >= 0) {\r\n\t\t\t\t\tusedProps[v] = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow \"Macro \"+s+\" refers to a property not part of property table!\"; \r\n\t\t\t\t}\r\n\t\t\t}).bind(this);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tif (this.init == \"default\") {\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t} else if (this.init == 'constructor') {\r\n\t\t\tcode += prefix + this.name+\".call(\"+instVar;\r\n\t\t\tfor (var i=0, l=this.initConstructorArgs.length; i<l; i++) {\r\n\t\t\t\tvar arg = this.initConstructorArgs[i],\r\n\t\t\t\t\tpartIdx = arg.search(\/[\\.\\[]\/),\r\n\t\t\t\t\tpart = \"\", found = false;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tif (partIdx == -1) partIdx = arg.length;\r\n\t\t\t\tpart = arg.substr(0,partIdx);\r\n\t\t\t\tfor (var j=0, jl=this.properties.length; j<jl; ++j) {\r\n\t\t\t\t\tif (this.properties[j] == part) {\r\n\t\t\t\t\t\targ = valVar + \"[\"+offsetVar+'+'+pageszVar+'*'+j+\"]\" + arg.substr(partIdx);\r\n\t\t\t\t\t\tusedProps[part] = true;\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!found) {\r\n\t\t\t\t\tconsole.warn(\"Could not find property '\"+arg+\"' in \"+this.name+\". Assuming literal\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tcode += \",\\n\"+prefix+indent+arg;\r\n\t\t\t}\r\n\t\t\tcode += \");\\n\";\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t} else {\r\n\t\t\tconsole.warn(\"Using custom init function for \"+this.name);\r\n\t\t\tcode += prefix + this.init + \"(\" + instVar +\", \" + valVar + \");\\n\";\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tfor (var k in this.propCustomAssign) {\r\n\t\t\tthis.propCustomAssign[k] = this.propCustomAssign[k]\r\n\t\t\t\t.replace(\/\\$\\$(\\w+)\/g, replaceVariableMacro);\r\n\t\t}\r\n\t\t\r\n\t\tif (this.propAssign) defaultAssign = this.propAssign;\r\n\t\tdefaultAssign = defaultAssign\r\n\t\t\t.replace(\/\\$\\$(\\w+)\/g, replaceVariableMacro);\r\n\t\t\r\n\t\tif (this.initProperties) {\r\n\t\t\tfor (var i=0, l=this.properties.length; i<l; ++i) {\r\n\t\t\t\tvar prop = this.properties[i];\r\n\t\t\t\t\r\n\t\t\t\tif (usedProps[prop] && !this.keepUsedProperties) continue;\r\n\t\t\t\tif (this.propCustomAssign[prop]) {\r\n\t\t\t\t\tcode += prefix + this.propCustomAssign[prop]\r\n\t\t\t\t\t\t.replace(\/\\$inst\/g, instVar)\r\n\t\t\t\t\t\t.replace(\/\\$prop\/g, prop)\r\n\t\t\t\t\t\t.replace(\/\\$values\/g, valVar)\r\n\t\t\t\t\t\t.replace(\/\\$value\/g, valVar+\"[\"+offsetVar+'+'+pageszVar+'*'+i+\"]\") + \";\\n\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcode += prefix + defaultAssign\r\n\t\t\t\t\t\t.replace(\/\\$inst\/g, instVar)\r\n\t\t\t\t\t\t.replace(\/\\$prop\/g, prop)\r\n\t\t\t\t\t\t.replace(\/\\$values\/g, valVar)\r\n\t\t\t\t\t\t.replace(\/\\$value\/g, valVar+\"[\"+offsetVar+'+'+pageszVar+'*'+i+\"]\") + \";\\n\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (this.postInit) {\r\n\t\t\tcode += \"\\n\" + prefix + \"\r\n\t\t\tcode += prefix + this.postInit.replace(\/\\n\/g, \"\\n\"+prefix)\r\n\t\t\t\t\t.replace(\/\\$inst\/g, instVar)\r\n\t\t\t\t\t.replace(\/\\$values\/g, valVar)\r\n\t\t\t\t\t.replace(\/\\$\\$(\\w+)\/g, replaceVariableMacro);\r\n\t\t}\r\n\t\treturn code;\r\n\t}","code-length":1123,"reference":"Generate the piece of code that initializes an instance of the object","result":"Code too long,keep in 512.","score":[0,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bufferMode( contents, options, callback ) {\r\n\tProfileCompiler( contents.toString('utf-8'), options, function(err, encBuf, decBuf){\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tcallback(null, new Buffer(encBuf,'utf8'), \r\n\t\t\t\t\t   new Buffer(decBuf,'utf8') );\r\n\t});\r\n}","code-length":115,"reference":"Read entire buffer and compile","result":"Buffer mode.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction streamMode( contents, options, callback ) {\r\n\ttoArray(contents, function(err, chunks) {\r\n\t\tif (err) {\r\n\t\t\tcallback(err);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbufferMode( Buffer.concat(chunks), options, function(err, encBuf, decBuf) {\r\n\t\t\tif (err) {\r\n\t\t\t\tcallback(err);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar encStream = new Readable();\r\n\t\t\tencStream.push(encBuf);\r\n\t\t\tencStream.push(null);\r\n\t\t\tvar decStream = new Readable();\r\n\t\t\tdecStream.push(decBuf);\r\n\t\t\tdecStream.push(null);\r\n\t\t\t\r\n\t\t\tcallback(null, encStream, decStream);\r\n\t\t});\r\n\t});\r\n}","code-length":213,"reference":"Read entire stream and process","result":"Stream the contents.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( err, encContents, decContents ) {\r\n\t    \t\r\n\t\t\tif (err) {\r\n\t\t\t\tvar error = new PluginError(PLUGIN_NAME, err, { showStack: true });\r\n\t\t\t\tself.emit('error', error);\r\n\t\t\t\tdone();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar dir = path.dirname( originalFile.path );\r\n\t\t\tvar name = path.basename( originalFile.path );\r\n\t\t\tvar parts = name.split(\".\"); parts.pop();\r\n\t\t\tvar baseName = self.config.name || parts.join(\".\");\r\n\t\t\t\r\n\t\t\tvar f = originalFile.clone();\r\n\t\t\tf.contents = encContents;\r\n\t\t\tf.path = path.join( dir, baseName + '-encode.js' );\r\n\t\t\tself.push(f);\r\n\t\t\t\r\n\t\t\tvar f = originalFile.clone();\r\n\t\t\tf.contents = decContents;\r\n\t\t\tf.path = path.join( dir, baseName + '-decode.js' );\r\n\t\t\tself.push(f);\r\n\t    \t\r\n\t\t\tdone();\r\n\t\t\treturn;\r\n\t    }","code-length":295,"reference":"Call when finished with compression","result":"Encode and decode the file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction journal() {\r\n  'use strict';\r\n    var fs = require('fs');\r\n  var eventList = {\r\n    'creationEvents' : {},\r\n    'executionEvents' : {} \r\n  };\r\n  var logMode;\r\n  function setLogMode(mode) {\r\n    logMode = mode;\r\n  }\r\n   function logCreationEvent(id, type, message, time) {\r\n        if (logMode === 'l') {\r\n      if (!eventList.creationEvents[id]) {\r\n        eventList.creationEvents[id] =  [];\r\n      }\r\n      eventList.creationEvents[id].push({'type': type, 'event': message, \"timestamp\": time});\r\n    } else if (logMode === 'v') {\r\n      console.log(type + ': Agent ' + id +  ' ' + message + ' on ' + time);\r\n    }\r\n  }\r\n  function logExecutionEvent(id, type, message, time) {\r\n    if (logMode === 'l') {\r\n      if (!eventList.executionEvents[id]) {\r\n        eventList.executionEvents[id] =  [];\r\n      }\r\n      eventList.executionEvents[id].push({'type': type, 'event': message, \"timestamp\": time});\r\n    } else if (logMode === 'v') {\r\n      console.log(type + ': Agent ' + id +  ' ' + message + ' on ' + time);\r\n    }\r\n  }\r\n  function report(logFile) {\r\n    var defaultLogFile = (new Date()).toJSON() + '.log';\r\n    var data = JSON.stringify(eventList, null, 3);\r\n    if (logFile) {\r\n      fs.writeFile(logFile, data, function(err) {\r\n        if(err) {\r\n          console.log('\\nCould not write log to file \"' + logFile + '\"\\n' + err);\r\n          fs.writeFile(defaultLogFile, data, function(err) {\r\n            if(err) {\r\n              console.log('Could not write log file: ' + err);\r\n            } else {\r\n              console.log('Log was written on default file \"' + defaultLogFile + '\"');\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      fs.writeFile(defaultLogFile, data, function(err) {\r\n        if(err) {\r\n          console.log('Could not write log file: ' + err);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return {\r\n    setLogMode: setLogMode,\r\n    logCreationEvent: logCreationEvent,\r\n    logExecutionEvent: logExecutionEvent,\r\n    report: report\r\n  };\r\n}","code-length":678,"reference":"journal.js","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction logCreationEvent(id, type, message, time) {\r\n        if (logMode === 'l') {\r\n      if (!eventList.creationEvents[id]) {\r\n        eventList.creationEvents[id] =  [];\r\n      }\r\n      eventList.creationEvents[id].push({'type': type, 'event': message, \"timestamp\": time});\r\n    } else if (logMode === 'v') {\r\n      console.log(type + ': Agent ' + id +  ' ' + message + ' on ' + time);\r\n    }\r\n  }","code-length":145,"reference":"records the agent's validation and creation events in a temporary structure if log method is 'l' or outputs the same events to the console if method is 'v'","result":"Log agent creation events.","score":[0.0008,0.0391]}
{"code":"\/*is used to<extra_id_0>\r\nfunction logExecutionEvent(id, type, message, time) {\r\n    if (logMode === 'l') {\r\n      if (!eventList.executionEvents[id]) {\r\n        eventList.executionEvents[id] =  [];\r\n      }\r\n      eventList.executionEvents[id].push({'type': type, 'event': message, \"timestamp\": time});\r\n    } else if (logMode === 'v') {\r\n      console.log(type + ': Agent ' + id +  ' ' + message + ' on ' + time);\r\n    }\r\n  }","code-length":145,"reference":"records the agent's execution events in a temporary structure if log method is 'l' or outputs the same events to the console if method is 'v'","result":"Log execution events.","score":[0.0002,0.0422]}
{"code":"\/*is used to<extra_id_0>\r\nfunction report(logFile) {\r\n    var defaultLogFile = (new Date()).toJSON() + '.log';\r\n    var data = JSON.stringify(eventList, null, 3);\r\n    if (logFile) {\r\n      fs.writeFile(logFile, data, function(err) {\r\n        if(err) {\r\n          console.log('\\nCould not write log to file \"' + logFile + '\"\\n' + err);\r\n          fs.writeFile(defaultLogFile, data, function(err) {\r\n            if(err) {\r\n              console.log('Could not write log file: ' + err);\r\n            } else {\r\n              console.log('Log was written on default file \"' + defaultLogFile + '\"');\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      fs.writeFile(defaultLogFile, data, function(err) {\r\n        if(err) {\r\n          console.log('Could not write log file: ' + err);\r\n        }\r\n      });\r\n    }\r\n  }","code-length":263,"reference":"outputs the contents of the temporary creation and execution structure to a specific file defined by the user; if file is not defined outputs to a default file; otherwise outputs error to the console","result":"Report the events to a file.","score":[0.0028,0.0481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scopeUrl(options, inst) {\r\n    options = _.extend({}, inst, options)\r\n    if (!options.teamcenter_team_id)\r\n      throw new Error('teamcenter_team_id required to make TeamCenterContact instance api calls')\r\n    if (!options.teamcenter_member_id)\r\n      throw new Error('teamcenter_member_id require to make TeamCenterContact instance api calls')\r\n    return ngin.TeamCenterTeam.urlRoot() + '\/' + options.teamcenter_team_id + ngin.TeamCenterMember.urlRoot() + '\/' + options.teamcenter_member_id + TeamCenterContact.urlRoot()\r\n  }","code-length":164,"reference":"Scopes the url to the team and member\n\n","result":"Generate the scope url.","score":[0.1175,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ArticleTranslation(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  ArticleTranslation.super_.apply(this, arguments);\r\n}","code-length":69,"reference":"Initialize a new `ArticleTranslation` with the given `parent` and `definition`.\n\n","result":"Create a new instance of the class.","score":[0.1647,0.2635]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MacroAction(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  MacroAction.super_.apply(this, arguments);\r\n}","code-length":69,"reference":"Initialize a new `MacroAction` with the given `parent` and `definition`.\n\n","result":"Create a new action.","score":[0.1008,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction map(obj, source, target, isRecursive = true) {\r\n\t\r\n\tif ((typeof obj) != \"object\") throw new TypeError(\"The object should be JSON\");\r\n\tif ((typeof source) != \"string\" && (typeof source) != \"array\") throw new TypeError(\"Source should be aither string or array\");\r\n\tif ((typeof target) != \"string\" && (typeof target) != \"array\") throw new TypeError(\"Target should be aither string or array\");\r\n\t\r\n\tlet res = {};\r\n\t\r\n\tlet propS = (typeof source == \"string\") ? source.replace(\/ \/g, '').split(\",\") : source;\r\n\tlet propT = (typeof target == \"string\") ? target.replace(\/ \/g, '').split(\",\") : target;\r\n  \t\r\n\tfor (let propertyName in obj) {\r\n\t\t\r\n\t\tlet propIndexInSource = propS.indexOf(propertyName);\r\n\t\tlet newName = (propIndexInSource != -1) ? propT[propIndexInSource] : propertyName;\r\n\t\t\r\n\t\tif (isRecursive && obj[propertyName] instanceof Array) {\r\n\t\t\tres[newName] = [];\r\n\t\t\tfor (var i = 0; i < obj[propertyName].length; i++) {\r\n\t\t\t\tlet mappedItem = map(obj[propertyName][i], source, target, isRecursive)\r\n\t\t\t\tres[newName].push(mappedItem);\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\tif (isRecursive && ((typeof obj[propertyName]) == \"object\"))\r\n\t\t\tres[newName] = map(obj[propertyName], source, target, isRecursive);\r\n\t\telse\r\n\t\t\tres[newName] = obj[propertyName];\r\n\t}\r\n\treturn res;\r\n}","code-length":447,"reference":"Converts one JSON object to another using maps specified with from->to array\n\nobj {JSON Object} - Object need be converted,\nsource {string} - Either comma-separated string or array of properties the object has\ntarget {string} - Either comma-separated string or array of properties the new object has have\nisRecurcive {boolean} - True if nested objects should be converted too\n","result":"Map JSON objects to JSON objects.","score":[0.0,0.0372]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (visit, onFail, opts) {\r\n        var fail = onFail ? onFail : utils.ret(false),\r\n            config = opts || { compact: true };\r\n        return function (list) {\r\n            var p = Promise.resolve(false),\r\n                results = [];\r\n            list.forEach(function (l, i) {\r\n                p = p.then(visit.bind(null, l))\r\n                    .catch(function (err) {\r\n                        return fail(err, l);\r\n                    })\r\n                    .then(function (result) {\r\n                        results.push(result);\r\n                        if(config.onProgress) config.onProgress(list.length, i + 1, l);\r\n                    });\r\n            });\r\n            return p.then(function () {\r\n                return config.compact ? results.filter(Boolean) : results;\r\n            });\r\n        };\r\n    }","code-length":230,"reference":"Executes a function as a promise for every item in a list.\n\n","result":"Create a visitor function.","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      console.warn('Code is using deprecated teams_advancing, switch to teamsAdvancing')\r\n      var where = (new Error().stack || '').split('\\n', 3)[2]\r\n      if (where) console.warn(where)\r\n      this.teamsAdvancing.apply(this, arguments)\r\n    }","code-length":92,"reference":"Old snake_case method","result":"Support code is using deprecated code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getIndexOfPrimitive(primitive, array, startingPosition) {\r\n    if (startingPosition === void 0) { startingPosition = 0; }\r\n    errorIfNotPrimitive_1.errorIfNotPrimitive(primitive);\r\n    error_if_not_populated_array_1.errorIfNotPopulatedArray(array);\r\n    errorIfNotInteger_1.errorIfNotInteger(startingPosition);\r\n    return array.indexOf(primitive, startingPosition);\r\n}","code-length":114,"reference":"According to tests, this error-checking does not slow down execution. It's not necessary to worry about repetitive error-checking slowing down execution when this function is called inside a loop.","result":"Determine the index of a primitive.","score":[0.0042,0.0187]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loads(xhr, ee) {\r\n  var onreadystatechange\r\n    , onprogress\r\n    , ontimeout\r\n    , onabort\r\n    , onerror\r\n    , onload\r\n    , timer;\r\n    onerror = xhr.onerror = one(function onerror(evt) {\r\n    var status = statuscode(xhr)\r\n      , err = fail(new Error('Network request failed'), status);\r\n    ee.emit('error', err);\r\n    ee.emit('end', err, status);\r\n  });\r\n    onabort = xhr.onabort = function onabort(evt) {\r\n    onerror(evt);\r\n  };\r\n    onreadystatechange = xhr.onreadystatechange = function change(evt) {\r\n    var target = evt.target;\r\n    if (4 === target.readyState) return onload(evt);\r\n  };\r\n    ontimeout = xhr.ontimeout = one(function timeout(evt) {\r\n    ee.emit('timeout', evt);\r\n    if (xhr.abort) xhr.abort();\r\n    onerror(evt);\r\n  });\r\neout, +xhr.timeout);\r\n    onprogress = xhr.onprogress = function progress(evt) {\r\n    var status = statuscode(xhr)\r\n      , data;\r\n    ee.emit('progress', evt, status);\r\n    if (xhr.readyState >= 3 && status.code === 200 && (data = response(xhr))) {\r\n      ee.emit('stream', data, status);\r\n    }\r\n  };\r\n    onload = xhr.onload = one(function load(evt) {\r\n    var status = statuscode(xhr)\r\n      , data = response(xhr);\r\n    if (status.code < 100 || status.code > 599) return onerror(evt);\r\n  ee.emit('stream', data, status);\r\n    }\r\n    ee.emit('end', undefined, status);\r\n  });\r\n  ee.once('end', function cleanup() {\r\n    xhr.onreadystatechange = onreadystatechange =\r\n    xhr.onprogress = onprogress =\r\n    xhr.ontimeout = ontimeout =\r\n    xhr.onerror = onerror =\r\n    xhr.onabort = onabort =\r\n    xhr.onload = onload = nope;\r\n    if (timer) clearTimeout(timer);\r\n  });\r\n  return xhr;\r\n}","code-length":603,"reference":"Attach various of event listeners to a given XHR request.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addWithDependencies (allFiles, newFile, dependencies, currentFiles, cycleCheck) {\r\n  if (cycleCheck.indexOf(newFile) >= 0) {\r\n    throw new Error('Dependency cycle found ' + JSON.stringify(cycleCheck))\r\n  }\r\n  cycleCheck.push(newFile)\r\n  try {\r\n    if (dependencies[newFile]) {\r\n      dependencies[newFile].forEach(function (dependency) {\r\n        if (allFiles.indexOf(dependency) < 0) {\r\n          throw new Error('Dependency \"' + dependency + '\" of file \"' + newFile + '\" is not part of ' + JSON.stringify(allFiles))\r\n        }\r\n        addWithDependencies(allFiles, dependency, dependencies, currentFiles, cycleCheck)\r\n      })\r\n    }\r\n    if (currentFiles.indexOf(newFile) < 0) {\r\n      currentFiles.push(newFile)\r\n    }\r\n  } finally {\r\n    cycleCheck.pop()\r\n  }\r\n  return currentFiles\r\n}","code-length":252,"reference":"Add a filename to the list with its dependencies first\n","result":"Add files with dependencies.","score":[0.0848,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction batchForms(batch, form, merkle) {\r\n  var stringified = stringify(form)\r\n  var digest = merkle.digest\r\n  batch.put(digest, stringified)\r\n  form.content\r\n    .forEach(function(element, index) {\r\n      if (isChild(element)) {\r\n        var childForm = element.form\r\n        var childMerkle = merkle.content[index]\r\n        batchForms(batch, childForm, childMerkle) } }) }","code-length":126,"reference":"Given a new LevelUp chain-style batch, a denormalized Common Form, and the output of commonform-merkleize for that Common Form, add LevelUp put operations to the batch for the Common Form and each of its children.","result":"Batch forms in a batch.","score":[0.0006,0.0469]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseJSON(input, callback) {\r\n  var error\r\n  var result\r\n  try {\r\n    result = JSON.parse(input) }\r\n  catch (e) {\r\n    error = e }\r\n  callback(error, result) }","code-length":70,"reference":"JSON.parse, wrapped to take an errback.","result":"Parse JSON.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scopeUrl(options, inst) {\r\n    options = _.extend(_.clone(options || {}), inst)\r\n    var route = []\r\n    if (options.season_id) route.push('seasons', options.season_id)\r\n    if (options.flight_stage_id) route.push('flight_stages', options.flight_stage_id)\r\n    else if (options.division_id) route.push('divisions', options.division_id)\r\n    else if (options.pool_id) route.push('pools', options.pool_id)\r\n    route.push('standings')\r\n    var base = config.urls && config.urls.sports || config.url\r\n    return Url.resolve(base, route.join('\/'))\r\n  }","code-length":197,"reference":"Builds the url based on crazy\n\n","result":"Create a scope for the url.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ReconnectingWebSocket(url, opts) {\r\n    if (!(this instanceof ReconnectingWebSocket)) {\r\n      throw new TypeError('Cannot call a constructor as a function');\r\n    }\r\n    opts = opts || {};\r\n    var self = this;\r\n    function getOpt(name, def) {\r\n      return opts.hasOwnProperty(name)? opts[name] : def;\r\n    }\r\n    var timeout = getOpt('timeout', 100);\r\n    var maxRetries = getOpt('maxRetries', 5);\r\n    var curRetries = 0;\r\n    self.onmessage = noop;\r\n    self.onopen = noop;\r\n    self.onclose = noop;\r\n    function unreliableOnOpen(e) {\r\n      self.onopen(e);\r\n      curRetries = 0;\r\n    }\r\n    function unreliableOnClose(e) {\r\n      self.onclose(e);\r\n      if (curRetries < maxRetries) {\r\n        ++curRetries;\r\n        setTimeout(connect, timeout);\r\n      }\r\n    }\r\n    function unreliableOnMessage(e) {\r\n      self.onmessage(e);\r\n    }\r\n    function connect() {\r\n      if (opts.protocols) {\r\n        self.ws = new WebSocket(url, opts.protocols);\r\n      } else {\r\n        self.ws = new WebSocket(url);\r\n      }\r\n      self.ws.onopen = unreliableOnOpen;\r\n      self.ws.onclose = unreliableOnClose;\r\n      self.ws.onmessage = unreliableOnMessage;\r\n    }\r\n    connect();\r\n    this.connect = connect;\r\n  }","code-length":418,"reference":"Extend WebSocket to automatically reconnect","result":"Reconnect websockets.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFirstIndexOfArray(arrayToSearchFor, arrayToSearchInside) {\r\n    errorIfNotArray_1.errorIfNotArray(arrayToSearchFor);\r\n    error_if_not_populated_array_1.errorIfNotPopulatedArray(arrayToSearchInside);\r\n    return arrayToSearchInside.findIndex(function (value) {\r\n        return (isArray_notArray_1.isArray(value) && arrays_match_1.arraysMatch(value, arrayToSearchFor));\r\n    });\r\n}","code-length":126,"reference":"returns -1 if array being searched for isn't found. if arrayToSearchFor contains objects, this will always return -1.","result":"Create a new array.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writePath(parentDir, path, data) {\r\n    let files = path.split('\/');\r\n    let file = files.shift();\r\n    if(!parentDir[file]) parentDir[file] = {\r\n        content: undefined,\r\n        tree: {}\r\n    };\r\n    if(files.length > 0) {\r\n        writePath(parentDir[file].tree, files.join('\/'), data);\r\n    } else if(data) {\r\n        parentDir[file].content = data.toString();\r\n    }\r\n}","code-length":143,"reference":"Recursively creates a file\n","result":"Write files to disk.","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(mainFiles ) {\r\n                for (var i=0; i<mainFiles.length; i++ ){\r\n                    var parts = mainFiles[i].split('.'),\r\n                        ext   = parts.pop(),\r\n                        min   = parts.pop(),\r\n                        fName;\r\n                    if (min == 'min'){\r\n                      parts.push(ext);\r\n                        fName = parts.join('.');\r\n                        if (grunt.file.exists(fName))\r\n                            mainFiles[i] = fName;\r\n                    }\r\n                }\r\n                return mainFiles;\r\n            }","code-length":155,"reference":"Is set by the task \"_read_overrides_and_resolutions\"","result":"Generate the minified version of the js files.","score":[0.1389,0.0806]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\tthis.objects = {};\r\n\tthis.index = [];\r\n\tthis._objTree = [];\r\n\tthis._objList = [];\r\n\tthis._properties = {};\r\n\tthis._propID = 0;\r\n\tthis._decodeIndex = [];\r\n\tthis._objFreq = [];\r\n\tthis._objInfeq = [];\r\n\tthis.shortNames = true;\r\n\tthis.indent = \"\\t\";\r\n\tthis.hasEmbed = false;\r\n}","code-length":134,"reference":"The profile index where profile objectsare contained.","result":"Create the object tree.","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( po ) {\r\n\t\tthis.objects[po.name] = po;\r\n\t\tif (po.extends) {\r\n\t\t\tthis._objTree.push([ po.extends, po.name ]);\r\n\t\t} else if (po.depends) {\r\n\t\t\tthis._objTree.push([ po.depends, po.name ]);\r\n\t\t} else {\r\n\t\t\tthis._objList.push( po.name );\r\n\t\t}\r\n\t}","code-length":124,"reference":"Add a profile object on the index","result":"Store objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( index_offset, size, depth, prefix, testVar, callback ) {\r\n\t\tif (size == 0) \r\n\t\t\treturn prefix + this.indent + \"\\n\";\r\n\t\tvar code = \"\";\r\n\t\t\tgenChunk = (function( s, e, d, pf ) {\r\n\t\t\t\tif (d === 0) {\r\n\t\t\t\t\tcode += pf + \"switch (\"+testVar+\") {\\n\";\r\n\t\t\t\t\tfor (var i=s; i<e; ++i) {\r\n\t\t\t\t\t\tcode += pf + this.indent + \"case \"+(index_offset+i)+\": return \"+callback(i);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcode += pf + \"}\\n\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (e == s) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t} else if (e == s+1) {\r\n\t\t\t\t\t\tcode += pf + \"if (\" + testVar + \" === \" + (index_offset+s) + \")\\n\";\r\n\t\t\t\t\t\tcode += pf + this.indent + \"return \"+callback(s);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar mid = Math.round((s+e) \/ 2);\r\n\t\t\t\t\t\tcode += pf + \"if (\" + testVar + \" < \" + (index_offset+mid) + \") {\\n\";\r\n\t\t\t\t\t\tgenChunk(s, mid, d - 1, pf + this.indent);\r\n\t\t\t\t\t\tcode += pf + \"} else {\\n\";\r\n\t\t\t\t\t\tgenChunk(mid, e, d - 1, pf + this.indent);\r\n\t\t\t\t\t\tcode += pf + \"}\\n\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}).bind(this);\r\n\t\tgenChunk( 0, size, depth, prefix + this.indent );\r\n\t\treturn code;\r\n\t}","code-length":436,"reference":"This is intended for optimizing the lookup speed ofelements when processing.","result":"Generate code for a given index .","score":[0.0912,0.0472]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( name ) {\r\n\t\tvar id = this._properties[name];\r\n\t\tif (id === undefined) {\r\n\t\t\tif (this.shortNames) {\r\n\t\t\t\tid = this._properties[name] = 'p' + (this._propID++).toString()\r\n\t\t\t} else {\r\n\t\t\t\tid = this._properties[name] = 'p' + name[0].toUpperCase() +\r\n\t\t\t\t\tname.substr(1).toLowerCase().replace(\/[,\\.\\- \\_]\/g, '_')\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":148,"reference":"Return the property variable name, used to optimize for sizethe minified result.","result":"Identify a property.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\r\n\t\tthis.index = [];\r\n\t\t\r\n\t\tfor (var i=0, l=this._objTree.length; i<l; ++i) {\r\n\t\t\tif (this.objects[this._objTree[i][0]] === undefined) {\r\n\t\t\t\tthrow \"Extending unknown object \"+this._objTree[i][0];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.objects[this._objTree[i][1]].applyExtend(\r\n\t\t\t\tthis.objects[this._objTree[i][0]]\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\tvar deps = toposort( this._objTree ).reverse(), used = {};\r\n\t\tfor (var i=0, l=deps.length; i<l; ++i) {\r\n\t\t\tused[deps[i]] = 1;\r\n\t\t\tthis.objects[deps[i]].id = this.index.length;\r\n\t\t\tthis.index.push( this.objects[deps[i]] );\r\n\t\t}\r\n\t\t\r\n\t\tfor (var i=0, l=this._objList.length; i<l; ++i) {\r\n\t\t\t\r\n\t\t\tif (!used[this._objList[i]])  {\r\n\t\t\t\tthis.index.push( this.objects[this._objList[i]] );\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\r\n\t\t\tvar pp = this.index[i].properties;\r\n\t\t\tfor (var j=0, jl=pp.length; j<jl; ++j) {\r\n\t\t\t\tthis.propertyVar(pp[j]);\r\n\t\t\t}\r\n\t\t\tif (this.index[i].embed.length > 0) {\r\n\t\t\t\tthis.hasEmbed = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\r\n\t\t\tvar obj = this.index[i], isFreq = obj.frequent;\r\n\t\t\t\r\n\t\t\tif (isFreq) {\r\n\t\t\t\tif (this._objFreq.length >= MAX_FREQ_ITEMS) {\r\n\t\t\t\t\tisFreq = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (isFreq) {\r\n\t\t\t\tobj.id = this._objFreq.length;\r\n\t\t\t\tthis._objFreq.push(obj);\r\n\t\t\t} else {\r\n\t\t\t\tobj.id = this._objInfeq.length+MAX_FREQ_ITEMS;\r\n\t\t\t\tthis._objInfeq.push(obj);\r\n\t\t\t}\r\n\t\t}\r\n\t}","code-length":687,"reference":"Resolve dependencies and arrange objectsaccoridng to priority and priority.","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tvar pn = Object.keys(this._properties);\r\n\t\tvar code = \"var \";\r\n\t\tfor (var i=0, l=pn.length; i<l; ++i) {\r\n\t\t\tif (i!==0) code += \",\\n\";\r\n\t\t\tcode += this.indent + this._properties[pn[i]] + \" = '\"+ pn[i] + \"'\";\r\n\t\t}\r\n\t\tcode += \";\\n\";\r\n\t\treturn code;\r\n\t}","code-length":133,"reference":"Generate a table with all the property constants","result":"Generate code.","score":[0.0249,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tvar code = \"\";\r\n\t\t\r\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\r\n\t\t\tvar o = this.index[i];\r\n\t\t\tcode += \"\\n\";\r\n\t\t\tcode += \"var factory_\"+o.safeName+\" = {\\n\";\r\n\t\t\tcode += this.indent + \"props: \"+o.properties.length+\",\\n\";\r\n\t\t\tcode += this.indent + \"create: function() {\\n\";\r\n\t\t\tcode += this.indent + this.indent + \"return \" + o.generateFactory() + \";\\n\";\r\n\t\t\tcode += this.indent + \"},\\n\";\r\n\t\t\tcode += this.indent + \"init: function(inst, props, pagesize, offset) {\\n\";\r\n\t\t\tcode += o.generateInitializer('inst','props','pagesize','offset',this.indent+this.indent, this.indent);\r\n\t\t\tcode += this.indent + \"}\\n\";\r\n\t\t\tcode += \"}\\n\\n\";\r\n\t\t}\r\n\t\treturn code;\r\n\t}","code-length":278,"reference":"Generate the list of init functions used by the lookup fcatoryto generate the items","result":"Generate code for the factory.","score":[0.0472,0.0763]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(prefix) {\r\n\t\tvar code = \"function( id ) {\\n\";\r\n\t\tcode += prefix + this.indent + \"if (id < \"+MAX_FREQ_ITEMS+\") {\\n\";\r\n\t\tcode += this.generateDnCif( 0, this._objFreq.length, 3, prefix+this.indent, 'id', (function(i) {\r\n\t\t\treturn \"factory_\"+this._objFreq[i].safeName+\";\\n\"\r\n\t\t}).bind(this));\r\n\t\tcode += prefix + this.indent + \"} else {\\n\";\r\n\t\tcode += this.generateDnCif( MAX_FREQ_ITEMS, this._objInfeq.length, 3, prefix+this.indent, 'id', (function(i) {\r\n\t\t\treturn \"factory_\"+this._objInfeq[i].safeName+\";\\n\"\r\n\t\t}).bind(this));\r\n\t\tcode += prefix + this.indent + \"}\\n\";\r\n\t\tcode += prefix + \"}\\n\";\r\n\t\treturn code;\r\n\t}","code-length":265,"reference":"Generate the lookup factory by ID","result":"Generate code for the factory functions.","score":[0.2541,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( prefix ) {\r\n\t\tvar code = \"function( inst ) {\\n\";\r\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\r\n\t\t\tvar o = this.index[i];\r\n\t\t\tif (i === 0) code += prefix + this.indent + \"if\";\r\n\t\t\telse code += prefix + this.indent + \"} else if\";\r\n\t\t\tcode += \" (inst instanceof \"+o.name+\") {\\n\";\r\n\t\t\tcode += prefix + this.indent + this.indent + \"return [\" + o.id + \", getter_\"+o.safeName+\"];\\n\";\r\n\t\t}\r\n\t\tcode += prefix + this.indent + \"}\\n\";\r\n\t\tcode += prefix + \"}\\n\"\r\n\t\treturn code;\r\n\t}","code-length":207,"reference":"Generate the function to use for identifying an object","result":"Generate code for the generated code.","score":[0.1541,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tvar code = \"\";\r\n\t\t\r\n\t\tfor (var i=0, l=this.index.length; i<l; ++i) {\r\n\t\t\tvar o = this.index[i];\r\n\t\t\tcode += \"\\n\";\r\n\t\t\tcode += \"function getter_\"+o.safeName+\"(inst) {\\n\";\r\n\t\t\tcode += this.indent + \"return \"+o.generatePropertyGetter('inst',this.indent+this.indent) + \";\\n\";\r\n\t\t\tcode += \"}\\n\\n\";\r\n\t\t}\r\n\t\tcode += \"\\n\"\r\n\t\treturn code;\r\n\t}","code-length":165,"reference":"Generate the function that is used to encode an object","result":"Generate the getter functions.","score":[0.1008,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Client(options) {\r\n  options = options || {};\r\n  this.isClient = true;\r\n  this.subdomain = options.subdomain;\r\n  this.endpoint = options.endpoint;\r\n  if (!this.subdomain && !this.endpoint) throw new Error('No subdomain was specified.');\r\n  if(this.endpoint && typeof this.endpoint !== 'undefined') {\r\n    this.baseUrl = this.endpoint;\r\n  } else {\r\n    this.baseUrl = 'https:\r\n  }\r\n  if (options.username && options.password) {\r\n    this.auth = { username: options.username, password: options.password, sendImmediately: true };\r\n  } else if (options.consumerKey && options.consumerSecret && options.token && options.tokenSecret) {\r\n    this.auth = {\r\n      consumer_key: options.consumerKey,\r\n      consumer_secret: options.consumerSecret,\r\n      token: options.token,\r\n      token_secret: options.tokenSecret\r\n    };\r\n  } else {\r\n    throw new Error('No authentication specified, use either Basic Authentication or OAuth.');\r\n  }\r\n  this.retry = options.retry || false;\r\n  this.maxRetry = options.maxRetry || 3;\r\n  this.timeout = options.timeout;\r\n  this.logger = options.logger || null;\r\n  this.queue = async.queue(this.request.bind(this), 60);\r\n  linkMixin.call(this, JSON.parse(fs.readFileSync(__dirname + '\/resources.json', 'utf-8')));\r\n}","code-length":393,"reference":"Initialize a new `Client` with the given `options`.\n\nOptions:\n\n- `subdomain` the desk.com subdomain to use\n- `endpoint` the desk.com custom domain to use - if you use your own domain\n- `username` username for basic authentication\n- `password` password for basic authentication\n- `consumerKey` consumer key for the oauth application\n- `consumerSecret` secret for the oauth application\n- `token` the token for the oauth authentication\n- `tokenSecret` secret for the oauth authentication\n- `retry` retry request on 429 and 503\n- `logger` logging function to use for request logging\n\n","result":"Create a client.","score":[0.0,0.0062]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Imagesloader(opts){\r\n\t\r\n    var self = {};\r\n        var opts = opts || {};\r\n    \tvar imageloader = Imageloader();\r\n    \tvar imgs = [];\r\n\t\r\n\tvar srcs = [];\r\n\t\r\n\tvar def;\r\n\t\r\n\tfunction load(images){\r\n\t\tdef = Deferred();\r\n\t\t\r\n\t\t\r\n\t\tsrcs = convertImagesToSrc(images);\r\n\t\t\r\n\t\tfor (var i = 0; i < srcs.length; i++) {\r\n\t\t\timageloader.load(srcs[i])\r\n\t\t\t.success(function(img){\r\n\t\t\t\t\r\n\t\t\t\timageLoaded(img);\r\n\t\t\t})\r\n\t\t\t.error(function(msg){\r\n\t\t\t\tdef.reject(msg + ' couldn\\'t be loaded');\r\n\t\t\t});\r\n\t\t};\r\n\t\treturn def.promise;\r\n\t}\r\n\t\r\n\tfunction imageLoaded(img){\r\n\t\t\r\n\t\tdef.notify(\"notify\");\r\n\t\t\r\n\t\timgs.push(img);\r\n\t\t\r\n\t\tif(imgs.length == srcs.length){\r\n\t\t\t\r\n\t\t\tsortImages();\r\n\t\t\t\r\n\t\t\tdef.resolve(imgs);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction convertImagesToSrc(imgs){\r\n\t\tvar src = [];\r\n\t\tfor (var i = 0; i < imgs.length; i++) {\r\n\t\t\t\r\n\t\t\tif(typeof imgs[i]  == 'object'){\r\n\t\t\t\tsrc.push(imgs[i].src);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\treturn src.length ? src : imgs;\r\n\t}\r\n\t\r\n\tfunction sortImages(){\r\n\t\tvar arr = [];\r\n\t\t\r\n\t\tfor (var i = 0; i < srcs.length; i++) {\r\n\t\t\tfor (var j = 0; j < imgs.length; j++) {\r\n\t\t\t\tvar str = imgs[j].src.toString();\r\n\t\t\t\tvar reg = new RegExp(srcs[i])\r\n\t\t\t\t\r\n\t\t\t\tif(str.match(reg)) arr.push(imgs[j]);\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\timgs = arr;\r\n\t}\r\n\t\r\n\tself.load = load;\r\n\t\r\n\treturn self;\r\n}","code-length":600,"reference":"Image collection loader\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction load(images){\r\n\t\tdef = Deferred();\r\n\t\t\r\n\t\t\r\n\t\tsrcs = convertImagesToSrc(images);\r\n\t\t\r\n\t\tfor (var i = 0; i < srcs.length; i++) {\r\n\t\t\timageloader.load(srcs[i])\r\n\t\t\t.success(function(img){\r\n\t\t\t\t\r\n\t\t\t\timageLoaded(img);\r\n\t\t\t})\r\n\t\t\t.error(function(msg){\r\n\t\t\t\tdef.reject(msg + ' couldn\\'t be loaded');\r\n\t\t\t});\r\n\t\t};\r\n\t\treturn def.promise;\r\n\t}","code-length":159,"reference":"Load a collection of images\n","result":"\t\timageLoaded .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction imageLoaded(img){\r\n\t\t\r\n\t\tdef.notify(\"notify\");\r\n\t\t\r\n\t\timgs.push(img);\r\n\t\t\r\n\t\tif(imgs.length == srcs.length){\r\n\t\t\t\r\n\t\t\tsortImages();\r\n\t\t\t\r\n\t\t\tdef.resolve(imgs);\r\n\t\t}\r\n\t}","code-length":93,"reference":"Image loaded checker\n","result":"Trigger the imageLoaded event.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction convertImagesToSrc(imgs){\r\n\t\tvar src = [];\r\n\t\tfor (var i = 0; i < imgs.length; i++) {\r\n\t\t\t\r\n\t\t\tif(typeof imgs[i]  == 'object'){\r\n\t\t\t\tsrc.push(imgs[i].src);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\treturn src.length ? src : imgs;\r\n\t}","code-length":112,"reference":"Convert img to src\n","result":"Convert images to src.","score":[0.3799,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortImages(){\r\n\t\tvar arr = [];\r\n\t\t\r\n\t\tfor (var i = 0; i < srcs.length; i++) {\r\n\t\t\tfor (var j = 0; j < imgs.length; j++) {\r\n\t\t\t\tvar str = imgs[j].src.toString();\r\n\t\t\t\tvar reg = new RegExp(srcs[i])\r\n\t\t\t\t\r\n\t\t\t\tif(str.match(reg)) arr.push(imgs[j]);\r\n\t\t\t};\r\n\t\t};\r\n\t\t\r\n\t\timgs = arr;\r\n\t}","code-length":146,"reference":"Sort images after the originally order\n","result":"Sort images by src.","score":[0.274,0.3233]}
{"code":"\/*is used to<extra_id_0>\r\nfunction builder(envList, envName) {\r\n  if (envList == null) {\r\n    envList = DEFAULT_ENV_LIST;\r\n  }\r\n  if (envName == null) {\r\n    envName = DEFAULT_ENV_NAME;\r\n  }\r\n  if (!Array.isArray(envList)) {\r\n    throw new Error('envList must be an array');\r\n  }\r\n  if (typeof envName !== 'string') {\r\n    throw new Error('envName must be a string');\r\n  }\r\n  const index = envList.indexOf(env.get(envName, DEFAULT_ENV).required().asString());\r\n    let body;\r\n  if (index < 0) {\r\n    body = 'return function defaults() {}';\r\n  } else {\r\n    body = `return function defaults(obj) { return 'object' !== typeof obj ? obj : obj[${index}] }`;\r\n  }\r\n  return new Function(body)();\r\n}","code-length":245,"reference":"Build a default value getter.\n\n","result":"Build the builder function.","score":[0.2488,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateId(id) {\r\n    if (id && id.trim() && \/^[a-zA-Z0-9_]+$\/.test(id)) {\r\n      if (agency.isIdInUse(id)) {\r\n        err.name = 'DuplicateIdError';\r\n        err.message = 'duplication (use a different id)'; \r\n        return err;\r\n      } else {\r\n        return id;\r\n      }\r\n    } else {\r\n      err.name = 'ValidateIdError';\r\n      err.message = 'failed id validation (please use alphanumeric characters and underscore)'; \r\n      return err;\r\n    }\r\n  }","code-length":167,"reference":"validates the agent's id according to the validity of the symbols used and the possibility of duplication inside the same agency","result":"Validate the id.","score":[0.001,0.0521]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayGetUniques(arr) {\r\n    var a = [];\r\n      for (var i=0, l=arr.length; i<l; i++) {\r\n        if (a.indexOf(arr[i]) === -1 && arr[i] !== '')\r\n          a.push(arr[i]);\r\n      }\r\n      return a;\r\n  }","code-length":98,"reference":"returns a list of unique dependency agents","result":"Get the arrayGetUniques function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setFunction(f) {\r\n    if (canExecute) {\r\n      if (Object.getPrototypeOf(f) === Function.prototype) {\r\n        func = f;\r\n        jn.logCreationEvent(id, 'INFO', 'function definition completed', (new Date()).toJSON());\r\n      } else {\r\n        setCanExecute(false);\r\n        jn.logCreationEvent(id, 'ERROR', 'function definition failed', (new Date()).toJSON());\r\n      }\r\n    } \r\n  }","code-length":134,"reference":"setter for function property","result":"Set the function to be executed.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setCallback(cb) {\r\n    if (canExecute) {\r\n      if (Object.getPrototypeOf(cb) === Function.prototype) {\r\n        callback = cb;\r\n        jn.logCreationEvent(id, 'INFO', 'callback definition completed', (new Date()).toJSON());\r\n      } else {\r\n        setCanExecute(false);\r\n        jn.logCreationEvent(id, 'ERROR', 'callback definition failed', (new Date()).toJSON());\r\n      }\r\n    }\r\n  }","code-length":134,"reference":"setter for callback property","result":"Set the callback function.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Case(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  Case.super_.apply(this, arguments);\r\n}","code-length":67,"reference":"Initialize a new `Case` with the given `parent` and `definition`.\n\n","result":"Create a new instance of a class in the case.","score":[0.1699,0.15]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Resource(parent, definition) {\r\n  this.parent = parent;\r\n  this.definition = definition;\r\n  this._link = linkMixin;\r\n  this._setup();\r\n}","code-length":55,"reference":"Initialize a new `Resource` with the given `parent` and `definition`.\n\n","result":"Create resource objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction containerSlug(language_slug, project_slug, resource_slug) {\r\n    if(!language_slug || !project_slug || !resource_slug) throw new Error('Invalid resource container slug parameters');\r\n    return language_slug\r\n        + '_' + project_slug\r\n        + '_' + resource_slug;\r\n}","code-length":85,"reference":"Returns a properly formatted container slug.\n\n","result":"Generate resource container slugs.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n            let dir = path.join(container_directory, content_dir);\r\n            return fs.readdirSync(dir).filter(function(file) {\r\n                try {\r\n                    return fs.statSync(file).isDirectory();\r\n                } catch (err) {\r\n                    console.log(err);\r\n                    return false;\r\n                }\r\n            });\r\n        }","code-length":104,"reference":"Returns an array of chapters in this resource container","result":"Filter out the content.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(chapterSlug, chunkSlug) {\r\n            let file = path.join(container_directory, content_dir, chapterSlug, chunkSlug + '.' + this.chunkExt);\r\n            return fs.readFileSync(file, {encoding: 'utf8'});\r\n        }","code-length":73,"reference":"Returns the contents of a chunk.\nIf the chunk does not exist or there is an exception an empty string will be returned.\n","result":"Load the chunk.","score":[0.0006,0.0476]}
{"code":"\/*is used to<extra_id_0>\r\nfunction makeContainer(container_directory, opts) {\r\n    return new Promise(function(resolve, reject) {\r\n        if(fileUtils.fileExists(container_directory)) {\r\n            reject(new Error('Container already exists'));\r\n            return;\r\n        }\r\n        let package_json = {};\r\n        reject(new Error('Not implemented yet.'));\r\n    });\r\n}","code-length":102,"reference":"Creates a new resource container.\nRejects with an error if the container exists.\n\n","result":"Create a container.","score":[0.0173,0.213]}
{"code":"\/*is used to<extra_id_0>\r\nfunction openContainer(container_archive, container_directory, opts) {\r\n    opts = opts || { compression_method : 'tar' };\r\n    if(fileUtils.fileExists(container_directory)) {\r\n        return loadContainer(container_directory);\r\n    }\r\n    if(!fileUtils.fileExists(container_archive)) return Promise.reject(new Error('Missing resource container'));\r\n    if(opts.compression_method === 'zip') {\r\n        return compressionUtils.unzip(container_archive, container_directory)\r\n            .then(function(dir) {\r\n                return loadContainer(dir);\r\n            });\r\n    } else {\r\n        return compressionUtils.untar(container_archive, container_directory)\r\n            .then(function(dir) {\r\n                return loadContainer(dir);\r\n            });\r\n    }\r\n}","code-length":213,"reference":"Opens an archived resource container.\nIf the container is already opened it will be loaded\n\n","result":"Open a resource container.","score":[0.0289,0.1839]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inspectContainer(container_path, opts) {\r\n    return new Promise(function(resolve, reject) {\r\n            if(path.extname(container_path) !== '.' + spec.file_ext) {\r\n                reject(new Error('Invalid resource container file extension'));\r\n                return;\r\n            }\r\n            try {\r\n                resolve(fs.statSync(container_path).isFile());\r\n            } catch(err) {\r\n                reject(new Error('The resource container does not exist at', container_path));\r\n            }\r\n        })\r\n        .then(function(isFile) {\r\n            if(isFile) {\r\n                let containerDir = path.join(path.dirname(container_path), path.basename(container_path, '.' + spec.file_ext));\r\n                return openContainer(container_path, containerDir, opts)\r\n                    .then(function(container) {\r\n                        return closeContainer(containerDir, opts)\r\n                            .then(function() {\r\n                                return Promise.resolve(container.info);\r\n                            });\r\n                    });\r\n            } else {\r\n                loadContainer(container_path)\r\n                    .then(function(container) {\r\n                        return Promise.resolve(container.info);\r\n                    });\r\n            }\r\n        });\r\n}","code-length":320,"reference":"Reads the resource container info without opening it.\nThis will however, work on containers that are both open and closed.\n\n","result":"Load the resource container.","score":[0.0083,0.1019]}
{"code":"\/*is used to<extra_id_0>\r\nfunction UserPreference(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  UserPreference.super_.apply(this, arguments);\r\n}","code-length":69,"reference":"Initialize a new `UserPreference` with the given `parent` and `definition`.\n\n","result":"Create a new user preference.","score":[0.125,0.1974]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getUpdater(errorFn) {\r\n  errorFn = errorFn || new Function();\r\n  return updater;\r\n    function updater(file, ast) {\r\n    if (ast.comments) {\r\n      ast.comments\r\n        .filter(testDocTag)\r\n        .map(getAnnotatedNode)\r\n        .concat(inferAngular(ast))\r\n        .filter(testFirstOccurrence)\r\n        .forEach(processNode);\r\n    } else {\r\n      errorFn('Esprima AST is required to have top-level comments array');\r\n    }\r\n    return ast;\r\n  }\r\n    function getAnnotatedNode(comment) {\r\n    var result;\r\n    if (comment.annotates) {\r\n      var candidateTrees;\r\n      var parent = comment.annotates.parent;\r\n      if (testNode.isBlockOrProgram(parent)) {\r\n        var body = parent.body;\r\n        var index = body.indexOf(comment.annotates);\r\n        var candidates = body.slice(index);\r\n        var length = candidates.map(testNode.isGeneratedCode).indexOf(false) + 1;\r\n        candidateTrees = candidates.slice(0, length || candidates.length);\r\n      }\r\n      else {\r\n        candidateTrees = [comment.annotates];\r\n      }\r\n      while (!result && candidateTrees.length) {\r\n        result = esprimaTools\r\n          .orderNodes(candidateTrees.shift())\r\n          .filter(testNode.isFunctionNotIFFE)\r\n          .shift();\r\n      }\r\n    }\r\n    if (result) {\r\n      return result;\r\n    } else {\r\n      errorFn('Doc-tag @ngInject does not annotate anything');\r\n    }\r\n  }\r\n}","code-length":433,"reference":"Create an updater function for the esprima transform with the given error handler\n","result":"Function processNode.","score":[0,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updater(file, ast) {\r\n    if (ast.comments) {\r\n      ast.comments\r\n        .filter(testDocTag)\r\n        .map(getAnnotatedNode)\r\n        .concat(inferAngular(ast))\r\n        .filter(testFirstOccurrence)\r\n        .forEach(processNode);\r\n    } else {\r\n      errorFn('Esprima AST is required to have top-level comments array');\r\n    }\r\n    return ast;\r\n  }","code-length":125,"reference":"The updater function for the esprima transform\n","result":"Update the file .","score":[0.1509,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getAnnotatedNode(comment) {\r\n    var result;\r\n    if (comment.annotates) {\r\n      var candidateTrees;\r\n      var parent = comment.annotates.parent;\r\n      if (testNode.isBlockOrProgram(parent)) {\r\n        var body = parent.body;\r\n        var index = body.indexOf(comment.annotates);\r\n        var candidates = body.slice(index);\r\n        var length = candidates.map(testNode.isGeneratedCode).indexOf(false) + 1;\r\n        candidateTrees = candidates.slice(0, length || candidates.length);\r\n      }\r\n      else {\r\n        candidateTrees = [comment.annotates];\r\n      }\r\n      while (!result && candidateTrees.length) {\r\n        result = esprimaTools\r\n          .orderNodes(candidateTrees.shift())\r\n          .filter(testNode.isFunctionNotIFFE)\r\n          .shift();\r\n      }\r\n    }\r\n    if (result) {\r\n      return result;\r\n    } else {\r\n      errorFn('Doc-tag @ngInject does not annotate anything');\r\n    }\r\n  }","code-length":282,"reference":"Get the node that is annotated by the comment or throw if not present.\n","result":"Detect if a comment is annotated .","score":[0.0999,0.2373]}
{"code":"\/*is used to<extra_id_0>\r\nfunction locationStr( runtime , line ) {\r\n\tvar loc ;\r\n\tloc = 'line: ' + ( line !== undefined ? line : runtime.lineNumber ) ;\r\n\tif ( runtime.file ) { loc += ' -- file: ' + runtime.file ; }\r\n\treturn loc ;\r\n}","code-length":79,"reference":"Used to report errors","result":"Create a location string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Macro(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  this.destroy = destroyMixin;\r\n  Macro.super_.apply(this, arguments);\r\n}","code-length":77,"reference":"Initialize a new `Macro` with the given `parent` and `definition`.\n\n","result":"Create a new instance of a class.","score":[0.1488,0.1031]}
{"code":"\/*is used to<extra_id_0>\r\nfunction quickSort(a, l, h, k, c) {\r\n  const s = [];\r\n  let t = 0;\r\n  s[t++] = l;\r\n  s[t++] = h;\r\n  while (t > 0) {\r\n    h = s[--t];\r\n    l = s[--t];\r\n    if (h - l > k) {\r\n      const p = partition(a, l, h, c);\r\n      if (p > l) {\r\n        s[t++] = l;\r\n        s[t++] = p;\r\n      }\r\n      if (p + 1 < h) {\r\n        s[t++] = p + 1;\r\n        s[t++] = h;\r\n      }\r\n    }\r\n  }\r\n}","code-length":207,"reference":"Quick sort an array.\n\n","result":"Sort a list of arrays .","score":[0,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pivot(a, l, h, c) {\r\n  const p = (l + ((h - l) \/ 2)) | 0;\r\n  if (c(a[h], a[l]) < 0) {\r\n    [a[l], a[h]] = [a[h], a[l]];\r\n  }\r\n  if (c(a[p], a[l]) < 0) {\r\n    [a[l], a[p]] = [a[p], a[l]];\r\n  }\r\n  if (c(a[h], a[p]) < 0) {\r\n    [a[h], a[p]] = [a[p], a[h]];\r\n  }\r\n  return p;\r\n}","code-length":188,"reference":"Select the pivot element using the median-of-three rule.\n\n","result":"Pivot a matrix.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction partition(a, l, h, c) {\r\n  const p = a[pivot(a, l, h, c)];\r\n  let i = l - 1;\r\n  let j = h + 1;\r\n  for (;;) {\r\n    do {\r\n      i++;\r\n    } while (c(a[i], p) < 0);\r\n    do {\r\n      j--;\r\n    } while (c(a[j], p) > 0);\r\n    if (i < j) {\r\n      [a[i], a[j]] = [a[j], a[i]];\r\n    } else {\r\n      return j;\r\n    }\r\n  }\r\n}","code-length":180,"reference":"Partition a subarray according to the Hoare partitioning scheme.\n\n","result":"Partition a array into two.","score":[0.1527,0.218]}
{"code":"\/*is used to<extra_id_0>\r\nfunction insertionSort(a, l, h, c) {\r\n  for (let i = l + 1; i <= h; i++) {\r\n    const x = a[i];\r\n    let j = i - 1;\r\n    while (j >= 0 && c(a[j], x) > 0) {\r\n      a[j + 1] = a[j];\r\n      j--;\r\n    }\r\n    a[j + 1] = x;\r\n  }\r\n}","code-length":125,"reference":"Insertion sort an array.\n\n","result":"Sort the array .","score":[0,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction search(parent, baseUrl, callback) {\r\n  var resource = new (getResource('page'))(parent, {\r\n    _links: { self: { href: baseUrl, 'class': 'page' } }\r\n  });\r\n    if (typeof callback == 'function') return resource.exec(callback);\r\n  return resource;\r\n}","code-length":89,"reference":"Searches a resource.\n\n","result":"Return resource.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createPipeStream(cmd){\r\n    var proc;\r\n    var command;\r\n    if(Array.isArray(cmd)){\r\n    var firstCmd = cmd.shift();\r\n    var open = Array.isArray(firstCmd) ? createPipeStream.apply({}, firstCmd) : createPipeStream(firstCmd);\r\n    cmd.forEach(function(p){\r\n        open = open.pipe(p);\r\n    });\r\n    return open;\r\n    } else if(cmd instanceof EventEmitter){\r\n        proc = cmd;\r\n        command = 'pre-defined';\r\n    } else if(typeof cmd === 'object'){\r\n        throw new TypeError('Invalid input, expected object type -> EventEmitter');\r\n    } else {\r\n        var input = utils.normalizeInput.apply(this, arguments);\r\n        command = utils.getCommand(input);\r\n        proc = spawn.apply({}, input);\r\n    }\r\n    proc._command = command;\r\n    if(proc.exitCode){\r\n        throw new Error('Process already dead');\r\n    }\r\n    return PipeStream(proc);\r\n}","code-length":273,"reference":"Main entrance function, will create PipeStream or joined pipe based on input\n\n","result":"Return new EventEmitter.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapMethods(self){\r\n    var methods = ['on'];\r\n    var childObjects = ['stdin','stdout','stderr'];\r\n    methods.forEach(function(m){\r\n        var old = self[m];\r\n        self[m] = function(){\r\n            old.apply(self, arguments);\r\n            return self;\r\n        };\r\n    });\r\n    if(utils.isSpawn(self)){\r\n        childObjects.forEach(function(child){\r\n            methods.forEach(function(m){\r\n                var old = self[child][m];\r\n                self[child][m] = function(){\r\n                    old.apply(self[child], arguments);\r\n                    return self;\r\n                };\r\n            });\r\n        });\r\n    }\r\n}","code-length":202,"reference":"Function for wrapping default EventEmitter functions to return itself\n\n","result":"Wrap methods in the spawn function.","score":[0,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction connectEvents(self){\r\n    if(self.stdout){\r\n        self.stdout.on('data', function(d){\r\n            self.emit('data', d);\r\n        });\r\n        self.stderr.on('data', function(d){\r\n            self.emit('error', d);\r\n        });\r\n    }\r\n}","code-length":91,"reference":"Function for connecting some events\n\n","result":"Connect events.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addEventHandlers(self){\r\n    self.on('error',function(d){\r\n        var fn = self._error;\r\n        self._cleanUp();\r\n        if(fn){\r\n            fn('pipeline[' + self._nr + ']:\"' + self._command + '\" failed with: ' + d.toString());\r\n        }\r\n    });\r\n}","code-length":94,"reference":"Function for adding internal event handlers\n","result":"Add event handlers.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _resolve(routes, path, req, res) {\r\n\treturn Q.fcall(function() {\r\n\t\tpath = path || [];\r\n\t\tvar obj = routes;\r\n\t\t\r\n\t\t\r\n\t\tif(IS.obj(obj) && IS.fun(obj.then)) {\r\n\t\t\tvar p = obj.then(function(ret) {\r\n\t\t\t\treturn _resolve(ret, path, req, res);\r\n\t\t\t});\r\n\t\t\treturn p;\r\n\t\t}\r\n\t\t\r\n\t\tif(IS.fun(obj)) {\r\n\t\t\tvar p2 = Q.when(obj(req, res)).then(function(ret) {\r\n\t\t\t\treturn _resolve(ret, path, req, res);\r\n\t\t\t});\r\n\t\t\treturn p2;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(obj === undefined) {\r\n\t\t\treturn flags.notFound;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(path.length === 0) {\r\n\t\t\treturn obj;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(IS.array(obj)) {\r\n\t\t\tvar k = path[0],\r\n\t\t\t    n = parseInt(path.shift(), 10);\r\n\t\t\tif(k === \"length\") {\r\n\t\t\t\treturn _resolve(obj.length, path.shift(), req, res);\r\n\t\t\t}\r\n\t\t\tif(k !== \"\"+n) {\r\n\t\t\t\treturn Q.fcall(function() { throw new errors.HTTPError({'code':400, 'desc':'Bad Request'}); });\r\n\t\t\t}\r\n\t\t\treturn _resolve(obj[n], path.shift(), req, res);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif(IS.obj(obj)) {\r\n\t\t\tvar k2 = path[0];\r\n\t\t\tif(obj[k2] === undefined) {\r\n\t\t\t\treturn flags.notFound;\r\n\t\t\t}\r\n\t\t\tif(!obj.hasOwnProperty(k2)) {\r\n\t\t\t\treturn Q.fcall(function() { throw new errors.HTTPError({'code':403, 'desc':'Forbidden'}); });\r\n\t\t\t}\r\n\t\t\treturn _resolve(obj[path.shift()], path, req, res);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn flags.notFound;\r\n\t});\r\n}","code-length":592,"reference":"Internal target resolver\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _buildFunction(resource) {\r\n  return function(callback) {\r\n    if (typeof callback == 'function') {\r\n      if (resource !== null) return resource.exec.call(resource, callback);\r\n      else return callback(null, null);\r\n    }\r\n    return resource;\r\n  }\r\n}","code-length":86,"reference":"Builds the function for the resource.\n\n","result":"Build a function for resource .","score":[0.273,0.4259]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getApiKey () {\r\n  if (isLocal() && pkg.apiKey) {\r\n    log.trace('using apiKey in fhconfig');\r\n    return pkg.apiKey;\r\n  } else {\r\n    log.trace('using api key in FH_APP_API_KEY env var');\r\n    return env('FH_APP_API_KEY').asString();\r\n  }\r\n}","code-length":103,"reference":"Returns the app api key required to make a service request\n","result":"Get the api key.","score":[0.066,0.1456]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getResource(name) {\r\n  if (name in resources) return resources[name];\r\n  try { return resources[name] = require('..\/resource\/' + name); }\r\n  catch(err) { return resources[name] = require('..\/resource'); }\r\n}","code-length":72,"reference":"Get or require the resource based on the class name.\n\n","result":"Get the resource.","score":[0.0471,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction signMsg(msg, key, alg) {\r\n  var signer = crypto.createSign(alg);\r\n  signer.update(msg);\r\n  return signer.sign(key);\r\n}","code-length":55,"reference":"sign msg with the given key and alg","result":"Sign messages.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hashMsg(msg, alg) {\r\n  var hash = crypto.createHash(alg);\r\n  hash.update(msg);\r\n  return hash.digest();\r\n}","code-length":51,"reference":"hash the msg with the msg and alg","result":"Generate the code.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addSignatureHeaders(body, headers, keyId, key) {\r\n  if (!headers) {\r\n    headers = {};\r\n  }\r\n  if (!headers.date) {\r\n    headers.date = (new Date()).toUTCString();\r\n  }\r\n  if (!headers.digest) {\r\n    headers.digest = 'SHA256=' + hashMsg(JSON.stringify(body), 'sha256')\r\n        .toString('base64');\r\n  }\r\n  var combine = function(names, headers) {\r\n    var parts = [];\r\n    names.forEach(function(e) {\r\n      parts.push(e + ': ' + headers[e]);\r\n    });\r\n    return parts.join('\\n');\r\n  };\r\n  headers.authorization = 'Signature ' +\r\n    'keyId=\"' + keyId + '\", ' +\r\n    'headers=\"date digest\", ' +\r\n    'algorithm=\"rsa-sha256\", ' +\r\n    'signature=\"' +\r\n    signMsg(combine([ 'date', 'digest' ], headers), key, 'RSA-SHA256')\r\n      .toString('base64') + '\"';\r\n  return headers;\r\n}","code-length":292,"reference":"Compute the signature headers \"date\", \"digest\", and \"authorization\" headers\naccording to IETF I-D draft-cavage-http-signatures-05 using rsa-sha256 algorithm\n\nIf the `date` header already exists in the input, it's used as-is\nIf the `digest` header already exists in the input, it's used as-is (which means that body is ignored)\n\n\n","result":"Add signature headers to the.","score":[0.0001,0.035]}
{"code":"\/*is used to<extra_id_0>\r\nasync function waitVariableToBe (variableExpression, value, timeout) {\r\n  return await this.waitUntil(async () => {\r\n    const result = await this.execute(`return ${variableExpression} === ${JSON.stringify(value)}`)\r\n    return result.value\r\n  }, timeout, `Timeout to wait expression \\`${variableExpression}\\` to be \\`${JSON.stringify(value)}\\``)\r\n}","code-length":106,"reference":"Wait variable expression matches value\n","result":"Wait for a variable to be set.","score":[0.1921,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nasync function waitAttributeToBe (selector, key, value, timeout) {\r\n  return await this.waitUntil(async () => {\r\n    const got = await this.element(selector).getAttribute(key)\r\n    return [].concat(value).some((value) => got === value || String(got) === String(value))\r\n  }, timeout, `Timeout to wait attribute \"${key}\" on \\`${selector}\\` to be \\`${JSON.stringify(value)}\\``)\r\n}","code-length":122,"reference":"Wait attribute matches value\n","result":"Wait for an attribute to be set.","score":[0.1921,0.2326]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view) {\r\n            this.unmount();\r\n            this.currentView = view;\r\n            var renderReturnsView = this.currentView.render();\r\n            if (renderReturnsView) {\r\n                $(SpecialK.mainContainer).empty().append(renderReturnsView.el).fadeIn('slow');\r\n            }\r\n        }","code-length":92,"reference":"Realiza un unmount y renderiza la nueva vista.\n\nPara poder renderizar una vista es necesario que devuelva \"this\"\nen el m\u00e9todo render.\n\n","result":"Mount a view.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n            if (!this.currentView) return false;\r\n            $(SpecialK.container).hide();\r\n            this.currentView.unbind();\r\n            this.currentView.remove();\r\n            this.currentView = null;\r\n            return true;\r\n        }","code-length":77,"reference":"Elimina la vista actual y sus eventos en DOM.\n","result":"Return true.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeAll(safe, obj) {\r\n\tlet args = toArray(arguments).slice(2);\r\n\tfor (let i = 0; i < args.length; i++) {\r\n\t\tobj = merge(obj, args[i], safe);\r\n\t}\r\n\treturn obj;\r\n}","code-length":80,"reference":"keeping it DRY","result":"Avoid recursive merge.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction quality(str) {\r\n  var parts = str.split(\/ *; *\/),\r\n      val = parts[0];\r\n  var q = parts[1] ? parseFloat(parts[1].split(\/ *= *\/)[1]) : 1;\r\n  return { value: val, quality: q };\r\n}","code-length":82,"reference":"Parse quality `str` returning an\nobject with `.value` and `.quality`.\n\n","result":"Parse the string for quality.","score":[0.0884,0.0526]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBrightness( hex ) {\r\n        var r = parseInt( hex.substr(2+0*2, 2), 16),\r\n\t\t    g = parseInt( hex.substr(2+1*2, 2), 16),\r\n\t\t    b = parseInt( hex.substr(2+2*2, 2), 16);\r\n    \tfunction lin2log(n) { return n <= 0.0031308 ? n * 12.92 : 1.055 * Math.pow(n,1\/2.4) - 0.055; }\r\n        function log2lin(n) { return n <= 0.04045   ? n \/ 12.92 : Math.pow(((n + 0.055)\/1.055),2.4); }\r\n\t\tr = log2lin( r\/255 );\r\n\t    g = log2lin( g\/255 );\r\n    \tb = log2lin( b\/255 );\r\n\t\treturn lin2log(0.2126 * r + 0.7152 * g + 0.0722 * b) * 100;\r\n\t}","code-length":262,"reference":"Functions to calculate brightness","result":"Calculate the brightness of a color.","score":[0.193,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction command_exists (paths, name) {\r\n\tif (is.string(paths)) {\r\n\t\tpaths = paths.split(':');\r\n\t}\r\n\tdebug.assert(paths).is('array');\r\n\treturn paths.some(dir => fs.existsSync(PATH.join(dir, name)));\r\n}","code-length":87,"reference":"Search command from PATH\n\n","result":"Check if a command exists.","score":[0.2403,0.122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction qExec(command, options) {\r\n    var d = Q.defer();\r\n    exec(command, options, function(err, stdout, stderr) {\r\n        if(err) {\r\n            err.stdout = stdout;\r\n            err.stderr = stderr;\r\n            return d.reject(err);\r\n        }\r\n        return d.resolve(stdout, stderr);\r\n    });\r\n    return d.promise;\r\n}","code-length":113,"reference":"Execute with promises","result":"Execute a command in a Q module.","score":[0.1615,0.1471]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initDynamic() {\r\n        $('a[data-toggle=popover]')\r\n            .popover()\r\n            .click(function(e) {\r\n                e.preventDefault();\r\n            })\r\n        ;\r\n        var version = $('#version strong').html();\r\n        $('#sidenav li').removeClass('is-new');\r\n        if (apiProject.template.withCompare) {\r\n            $('#sidenav li[data-version=\\'' + version + '\\']').each(function(){\r\n                var group = $(this).data('group');\r\n                var name = $(this).data('name');\r\n                var length = $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']').length;\r\n                var index  = $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']').index($(this));\r\n                if (length === 1 || index === (length - 1))\r\n                    $(this).addClass('is-new');\r\n            });\r\n        }\r\n        $('.nav-tabs-examples a').click(function (e) {\r\n            e.preventDefault();\r\n            $(this).tab('show');\r\n        });\r\n        $('.nav-tabs-examples').find('a:first').tab('show');\r\n        $('.sample-request-switch').click(function (e) {\r\n            var name = '.' + $(this).attr('name') + '-fields';\r\n            $(name).addClass('hide');\r\n            $(this).parent().next(name).removeClass('hide');\r\n        });\r\n        sampleRequest.initDynamic();\r\n    }","code-length":427,"reference":"On Template changes, recall plugins.","result":"Initialize dynamic sample requests.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction changeAllVersionCompareTo(e) {\r\n        e.preventDefault();\r\n        $('article:visible .versions').each(function(){\r\n            var $root = $(this).parents('article');\r\n            var currentVersion = $root.data('version');\r\n            var $foundElement = null;\r\n            $(this).find('li.version a').each(function() {\r\n                var selectVersion = $(this).html();\r\n                if (selectVersion < currentVersion && ! $foundElement)\r\n                    $foundElement = $(this);\r\n            });\r\n            if($foundElement)\r\n                $foundElement.trigger('click');\r\n        });\r\n        initDynamic();\r\n    }","code-length":172,"reference":"Compare all currently selected Versions with their predecessor.","result":"Change all version compare to.","score":[0.1319,0.1948]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addArticleSettings(fields, entry) {\r\n        fields.id = fields.article.group + '-' + fields.article.name + '-' + fields.article.version;\r\n        fields.id = fields.id.replace(\/\\.\/g, '_');\r\n        if (entry.header && entry.header.fields)\r\n            fields._hasTypeInHeaderFields = _hasTypeInFields(entry.header.fields);\r\n        if (entry.parameter && entry.parameter.fields)\r\n            fields._hasTypeInParameterFields = _hasTypeInFields(entry.parameter.fields);\r\n        if (entry.error && entry.error.fields)\r\n            fields._hasTypeInErrorFields = _hasTypeInFields(entry.error.fields);\r\n        if (entry.success && entry.success.fields)\r\n            fields._hasTypeInSuccessFields = _hasTypeInFields(entry.success.fields);\r\n        if (entry.info && entry.info.fields)\r\n            fields._hasTypeInInfoFields = _hasTypeInFields(entry.info.fields);\r\n        fields.template = apiProject.template;\r\n    }","code-length":273,"reference":"Add article settings.","result":"Add article settings.","score":[0.8409,0.9815]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renderArticle(group, name, version) {\r\n        var entry = {};\r\n        $.each(apiByGroupAndName[group][name], function(index, currentEntry) {\r\n            if (currentEntry.version === version)\r\n                entry = currentEntry;\r\n        });\r\n        var fields = {\r\n            article: entry,\r\n            versions: articleVersions[group][name]\r\n        };\r\n        addArticleSettings(fields, entry);\r\n        return templateArticle(fields);\r\n    }","code-length":132,"reference":"Render Article.","result":"Render articles.","score":[0.5,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resetArticle(group, name, version) {\r\n        var $root = $('article[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\']:visible');\r\n        var content = renderArticle(group, name, version);\r\n        $root.after(content);\r\n        var $content = $root.next();\r\n        $content.find('.versions li.version a').on('click', changeVersionCompareTo);\r\n        $('#sidenav li[data-group=\\'' + group + '\\'][data-name=\\'' + name + '\\'][data-version=\\'' + version + '\\']').removeClass('has-modifications');\r\n        $root.remove();\r\n        return;\r\n    }","code-length":185,"reference":"Render original Article and remove the current visible Article.","result":"Reset the article.","score":[0.0553,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadGoogleFontCss() {\r\n        var host = document.location.hostname.toLowerCase();\r\n        var protocol = document.location.protocol.toLowerCase();\r\n        var googleCss = '\r\n        if (host == 'localhost' || !host.length || protocol === 'file:')\r\n            googleCss = 'http:' + googleCss;\r\n        $('<link\/>', {\r\n            rel: 'stylesheet',\r\n            type: 'text\/css',\r\n            href: googleCss\r\n        }).appendTo('head');\r\n    }","code-length":138,"reference":"Load google fonts.","result":"Load google font css.","score":[0.4518,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortByOrder(elements, order, splitBy) {\r\n        var results = [];\r\n        order.forEach (function(name) {\r\n            if (splitBy)\r\n                elements.forEach (function(element) {\r\n                    var parts = element.split(splitBy);\r\n                    var key = parts[1];\r\n                    if (key == name)\r\n                        results.push(element);\r\n                });\r\n            else\r\n                elements.forEach (function(key) {\r\n                    if (key == name)\r\n                        results.push(name);\r\n                });\r\n        });\r\n        elements.forEach(function(element) {\r\n            if (results.indexOf(element) === -1)\r\n                results.push(element);\r\n        });\r\n        return results;\r\n    }","code-length":202,"reference":"Return ordered entries by custom order and append not defined entries to the end.\n","result":"Sort elements by order.","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction browserifyNgInject(opt) {\r\n  var options = defaults(opt, {\r\n        filter: defaultFilter\r\n      }),\r\n      updater = getUpdater(throwError);\r\n  return esprimaTools.createTransform(updater, options);\r\n}","code-length":72,"reference":"Esprima based explicitly ","result":"Inject ngInject .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (scope) {\r\n            if (scope.model) {\r\n                var modelInData = false;\r\n                for(var i = 0; i < scope.data.length; i++) {\r\n                    if (angular.equals(scope.data[i], scope.model)) {\r\n                        scope.model = scope.data[i];\r\n                        modelInData = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!modelInData) {\r\n                    scope.model = null;\r\n                }\r\n            }\r\n            if (!scope.model && !scope.chooseText && scope.data.length) {\r\n                scope.model = scope.data[0];\r\n            }\r\n        }","code-length":180,"reference":"a) \"ngModel compares by reference, not value. This is important when binding to an array of objects.\" b) Regardless of data type also check whether the given model exists within the options-data","result":"Create a new form .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scopeUrl(options, inst) {\r\n    options = _.extend(options || {}, inst)\r\n    if (!options.url && !options.user_id && !options.group_id && !(options.query || options.query.owner_type && options.query.owner_id)) {\r\n      return callback(new Error('user_id or group_id or (owner_type and owner_id) are required'))\r\n    }\r\n    if (options.user_id) {\r\n      return ngin.User.urlRoot() + '\/' + options.user_id + '\/personas'\r\n    }\r\n    if (options.group_id) {\r\n      return ngin.Group.urlRoot() + '\/' + options.group_id + '\/personas'\r\n    }\r\n    if (options.url || options.query.owner_type && options.query.owner_id) {\r\n      return Persona.urlRoot()\r\n    }\r\n  }","code-length":236,"reference":"Scopes the url to a user, group, or persona\n\n","result":"Generate the scope url.","score":[0.0915,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processNode(node) {\r\n  var isVarAssignment = (node.parent.type === 'VariableDeclarator');\r\n  var params = node.params\r\n    .map(paramToLiteral);\r\n  if ((node.type === 'FunctionExpression') && !isVarAssignment) {\r\n    esprimaTools.nodeSplicer(node)({\r\n      parent  : node.parent,\r\n      type    : 'ArrayExpression',\r\n      elements: params.concat(node)\r\n    });\r\n  }\r\n  else {\r\n    var appendTo = isVarAssignment ? node.parent.parent : node;\r\n    esprimaTools.nodeSplicer(appendTo, offset)({\r\n      type      : 'ExpressionStatement',\r\n      expression: {\r\n        type    : 'AssignmentExpression',\r\n        operator: '=',\r\n        left    : {\r\n          type    : 'MemberExpression',\r\n          computed: false,\r\n          object  : {\r\n            type: 'Identifier',\r\n            name: node.id.name\r\n          },\r\n          property: {\r\n            type: 'Identifier',\r\n            name: '$inject'\r\n          }\r\n        },\r\n        right   : {\r\n          type    : 'ArrayExpression',\r\n          elements: params\r\n        }\r\n      }\r\n    });\r\n  }\r\n}","code-length":329,"reference":"Add explicit dependency statements to the node.\n","result":"Process the AST .","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createApplication() {\r\n  function app(req, res) { app.handle(req, res); }\r\n  utils.merge(app, application);\r\n  utils.merge(app, EventEmitter.prototype);\r\n  app.request = { __proto__ : req };\r\n  app.response = { __proto__ : res };\r\n  app.init();\r\n  return app;\r\n}","code-length":104,"reference":"Create a new application.","result":"Create the application.","score":[0.3479,0.2564]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(){\r\n                            var chai = require('chai');\r\n                            chai.should();\r\n                            global.assert = chai.assert;\r\n                            global.expect = chai.expect;\r\n                        }","code-length":60,"reference":"Globally include the chai expect module so each test doesn't need to manually require it","result":"Test the code.","score":[0.0075,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Company(parent, definition) {\r\n  var key;\r\n  for (key in updateMixin) {\r\n    this[key] = updateMixin[key];\r\n  }\r\n  Company.super_.apply(this, arguments);\r\n}","code-length":67,"reference":"Initialize a new `Company` with the given `parent` and `definition`.\n\n","result":"Create a new company.","score":[0.1008,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inferAngular(ast) {\r\n  return esprimaTools.breadthFirst(ast)\r\n    .map(getAnnotationCandidates)\r\n    .filter(Boolean)\r\n    .map(followReference)\r\n    .filter(Boolean);\r\n}","code-length":70,"reference":"Find functions that are obvious angular entities.\n","result":"Infer Angular .","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getAnnotationCandidates(node) {\r\n  var callExpression = testNode.isModuleExpression(node) && node.parent;\r\n  if (callExpression) {\r\n    return callExpression['arguments']\r\n      .filter(testNode.anyOf(testNode.isFunction, testNode.isIdentifier))\r\n      .pop();\r\n  } else {\r\n    return null;\r\n  }\r\n}","code-length":104,"reference":"Find inject candidates\n","result":"Find annotation candidates.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction followReference(node) {\r\n  var result;\r\n  if (testNode.isFunction(node)) {\r\n    return node;\r\n  }\r\n  else {\r\n    var name = node.name;\r\n    while (node.parent && !result) {\r\n      node = node.parent;\r\n      var isBlock = testNode.isBlockOrProgram(node);\r\n      if (isBlock) {\r\n        esprimaTools.breadthFirst(node)\r\n          .some(function eachNode(subNode) {\r\n            switch (subNode.type) {\r\n              case 'FunctionDeclaration':\r\n                if (subNode.id.name === name) {\r\n                  result = subNode;\r\n                }\r\n                break;\r\n              case 'VariableDeclarator':\r\n                if (subNode.id.name === name) {\r\n                  result = subNode.init;\r\n                }\r\n                break;\r\n              case 'AssignmentExpression':\r\n                if ((subNode.left.type === 'Identifier') && (subNode.left.name === name)) {\r\n                  result = subNode.right;\r\n                }\r\n                break;\r\n            }\r\n            return !!result;\r\n          });\r\n      }\r\n    }\r\n    return result ? followReference(result) : null;\r\n  }\r\n}","code-length":328,"reference":"Given a function or reference that points to one will resolve to the function node.\n","result":"Find the function that references a function in a block.","score":[0.1296,0.2069]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback) {\r\n\t\r\n\t\r\n\t\r\n\ttry {\r\n    TacitServer.app_server.close();\r\n\t\tconsole.log(TacitServer.configs.server_prefix + \" - Shutdown app successful.\");\r\n\t}\r\n\tcatch(ex) {\r\n\t\tconsole.log(TacitServer.configs.server_prefix + \" - Shutdown app failed.\");\r\n\t\tconsole.log(ex);\r\n\t}\r\n\ttry {\r\n    TacitServer.api_server.close();\r\n\t\tconsole.log(TacitServer.configs.server_prefix + \" - Shutdown api successful.\");\r\n\t}\r\n\tcatch(ex) {\r\n\t\tconsole.log(TacitServer.configs.server_prefix + \" - Shutdown api failed.\");\r\n\t\tconsole.log(ex);\r\n\t}\r\n\tconsole.log(TacitServer.configs.server_prefix + \" - All preparations for shutdown completed.\");\r\n\tcallback();\r\n}","code-length":254,"reference":"Manage prepare for shutdown","result":"Shutdown the server.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction transformBody(req, input) {\r\n  req.log.debug('attempting transformation', input);\r\n  const body = input.data;\r\n  const { attributes } = body;\r\n  const { password, referral } = attributes;\r\n  const { autoGeneratePassword } = config;\r\n  if (autoGeneratePassword === true && password) {\r\n    throw new Errors.ValidationError('password is auto-generated, do not pass it', 400);\r\n  }\r\n  if (autoGeneratePassword === false && !password) {\r\n    throw new Errors.ValidationError('password must be provided', 400);\r\n  }\r\n  const { country } = body;\r\n  if (country && !countryData.info(country, 'ISO3')) {\r\n    const err = `country name must be specified as ISO3.\r\n    Please refer to https:\r\n    throw new Errors.ValidationError(err, 400, 'data.country');\r\n  }\r\n  const message = {\r\n    username: body.id,\r\n    metadata: ld.pick(attributes, WHITE_LIST),\r\n    activate: config.usersRequireActivate !== true || !password,\r\n    audience: getAudience(),\r\n    ipaddress: proxyaddr(req, config.trustProxy),\r\n  };\r\n  if (password) {\r\n    message.password = password;\r\n  }\r\n  if (attributes.alias) {\r\n    message.alias = attributes.alias.toLowerCase();\r\n  }\r\n  if (referral) {\r\n    message.referral = referral;\r\n  }\r\n  if (attributes.additionalInformation && !message.metadata.longDescription) {\r\n    message.metadata.longDescription = attributes.additionalInformation;\r\n  }\r\n  return message;\r\n}","code-length":424,"reference":"Transform body into ms-users message\n","result":"Transform the body of the request.","score":[0.2296,0.1961]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( val, num, max ) {\r\n         if ( max ) {\r\n            var indx,\r\n             len = val ? val.length : 0,\r\n             n = max + num;\r\n            for ( indx = 0; indx < len; indx++ ) {\r\n               n += val.charCodeAt( indx );\r\n            }\r\n            return num * n;\r\n         }\r\n         return 0;\r\n      }","code-length":110,"reference":"return text string value by adding up ascii value so the text is somewhat sorted when using a digital sort this is NOT an alphanumeric sort","result":"Calculate the number of characters in a string.","score":[0.0174,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( table ) {\r\n         table = $( table )[ 0 ];\r\n         var overallWidth, percent, $tbodies, len, index,\r\n          c = table.config,\r\n          $colgroup = c.$table.children( 'colgroup' );\r\n         if ( $colgroup.length && $colgroup.hasClass( ts.css.colgroup ) ) {\r\n            $colgroup.remove();\r\n         }\r\n         if ( c.widthFixed && c.$table.children( 'colgroup' ).length === 0 ) {\r\n            $colgroup = $( '<colgroup class=\"' + ts.css.colgroup + '\">' );\r\n            overallWidth = c.$table.width();\r\n            $tbodies = c.$tbodies.find( 'tr:first' ).children( ':visible' );\r\n            len = $tbodies.length;\r\n            for ( index = 0; index < len; index++ ) {\r\n               percent = parseInt( ( $tbodies.eq( index ).width() \/ overallWidth ) * 1000, 10 ) \/ 10 + '%';\r\n               $colgroup.append( $( '<col>' ).css( 'width', percent ) );\r\n            }\r\n            c.$table.prepend( $colgroup );\r\n         }\r\n      }","code-length":308,"reference":"automatically add a colgroup with col elements set to a percentage width","result":"Create a table .","score":[0.0432,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( str ) {\r\n         str = ( str || '' ).replace( ts.regex.spaces, ' ' ).replace( ts.regex.shortDateReplace, '\/' );\r\n         return ts.regex.shortDateTest.test( str );\r\n      }","code-length":69,"reference":"'mmddyyyy', 'ddmmyyyy' or 'yyyymmdd'","result":"Test the regex.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkCallExpression(node) {\r\n  var callee = node.callee;\r\n  if (callee.type === 'Identifier' && callee.name === 'require') {\r\n    var pathNode = node.arguments[0];\r\n    if (pathNode.type === 'Literal') {\r\n      var p = pathNode.value;\r\n      if (startswith(p, ['\/', '.\/', '..\/'])) {\r\n        return !endswith(p, '.js');\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}","code-length":140,"reference":"Returns false if `node` is a require expression where the module path ends with '.js'.","result":"Check the require call .","score":[0.0387,0.0714]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(event, listener){\r\n        switch (event) {\r\n            case \"log\":\r\n                bus.subscribe(EVENT_BUSLINE, {\r\n                    onRemoteLogReceived: function(logObj){\r\n                        listener(logObj);\r\n                    }\r\n                });\r\n                break;\r\n            default: console.error(\"[LOGIA] Unknown event name: '\" + event + \"'\");\r\n        }\r\n    }","code-length":109,"reference":"Listens for certain server events.\nCurrently the only supported event is the \"log\" event which is triggered when Logia server receives a log.\n","result":"Subscribe to events.","score":[0.0005,0.0238]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createGitRepository(basePath, options) {\r\n    if (typeof (options) === \"undefined\")\r\n        options = defaultRepositoryOptions;\r\n    var gitRepository = new GitRepository();\r\n    configureGitRepository(gitRepository, basePath, options);\r\n    return gitRepository;\r\n}","code-length":76,"reference":"Create a instance of a GitCapsule.\n","result":"Create git repository.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction recoverPubKey(curve, e, signature, i) {\r\n  assert.strictEqual(i & 3, i, 'Recovery param is more than two bits')\r\n  var n = curve.n\r\n  var G = curve.G\r\n  var r = signature.r\r\n  var s = signature.s\r\n  assert(r.signum() > 0 && r.compareTo(n) < 0, 'Invalid r value')\r\n  assert(s.signum() > 0 && s.compareTo(n) < 0, 'Invalid s value')\r\n  var isYOdd = i & 1\r\n  var isSecondKey = i >> 1\r\n  var x = isSecondKey ? r.add(n) : r\r\n  var R = curve.pointFromX(isYOdd, x)\r\n  var nR = R.multiply(n)\r\n  assert(curve.isInfinity(nR), 'nR is not a valid curve point')\r\n  var eNeg = e.negate().mod(n)\r\n  var rInv = r.modInverse(n)\r\n  var Q = R.multiplyTwo(s, G, eNeg).multiply(rInv)\r\n  curve.validate(Q)\r\n  return Q\r\n}","code-length":307,"reference":"Recover a public key from a signature.","result":"Recover public keys from public keys.","score":[0.2151,0.4574]}
{"code":"\/*is used to<extra_id_0>\r\nfunction calcPubKeyRecoveryParam(curve, e, signature, Q) {\r\n  for (var i = 0; i < 4; i++) {\r\n    var Qprime = recoverPubKey(curve, e, signature, i)\r\n    if (Qprime.equals(Q)) {\r\n      return i\r\n    }\r\n  }\r\n  throw new Error('Unable to find valid recovery factor')\r\n}","code-length":102,"reference":"Calculate pubkey extraction parameter.","result":"Calculate the recovery param.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (permissions) {\r\n    _.merge(this.permissions, permissions, function (a, b) {\r\n      return _.isArray(a) ? a.concat(b) : undefined;\r\n    });\r\n    return this;\r\n  }","code-length":67,"reference":"allows additional permissions for this acl\n\n","result":"Set permissions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (roles) {\r\n    if (!Array.isArray(roles)) {\r\n      roles = [roles];\r\n    }\r\n    this.permissions = _.reduce(this.permissions, function (result, actions, key) {\r\n      if (roles.indexOf(key) === -1) {\r\n        result[key] = actions;\r\n      }\r\n      return result;\r\n    }, {});\r\n    return this;\r\n  }","code-length":114,"reference":"Revoke a role\n\n","result":"Remove roles from the permissions.","score":[0,0.1562]}
{"code":"\/*is used to<extra_id_0>\r\nfunction DAOImplementation(config) {\r\n  let basePath = config.basePath || 'backend\/persistence\/catalog\/';\r\n  let isDBloaded = true;\r\n  if (config.filename) {\r\n    config.filename = basePath + config.filename;\r\n  }\r\n  if (config.schema) {\r\n    this.schema = fs.readJSON(path.join(appRoot.toString(),\r\n      basePath, config.schema));\r\n  } else {\r\n    this.schema = {};\r\n  }\r\n  let db = new DataStore(config);\r\n  if (config.filename && !config.autoload) {\r\n    isDBloaded = false;\r\n  }\r\n  this.collection = db;\r\n  this.isDBloaded = isDBloaded;\r\n}","code-length":195,"reference":"DAO implementation.\n","result":"Create a DAOImplementation.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Model(attributes) {\r\n    this._events = {};\r\n    EventEmitter.call(this);\r\n    attributes = attributes || {};\r\n    this._separator = ':';\r\n    this.attributes = {};\r\n    this._changed = {};\r\n    this._silent  = {};\r\n    this._pending = {};\r\n    this.set(attributes, { silent: true });\r\n    this._changes = {};\r\n    this._silent  = {};\r\n    this._pending = {};\r\n    this._previous = _.clone(this.attributes);\r\n    this.initialize.apply(this, arguments);\r\n}","code-length":160,"reference":"Model implementation based on Backbone.js' Model implementation.\n\nThe Model object uses an internal hash to store it's values and\nemits events on Model attribute changes.\n\n","result":"Create a new model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ProxiedModel(attributes) {\r\n    var model;\r\n    if (attributes instanceof Model) {\r\n        model = attributes;\r\n    }\r\n    else {\r\n        model = new Model(attributes);\r\n    }\r\n    return createModelProxy(model);\r\n}","code-length":76,"reference":"ProxiedModel constructor.","result":"Create a proxy for the model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createModelProxy(model) {\r\n    var handle = {\r\n        getOwnPropertyDescriptor: function(target, name) {\r\n            return ObjProto.getOwnPropertyDescriptor.call(model.attributes, name);\r\n        },\r\n        getOwnPropertyNames: function(target) {\r\n            return ObjProto.getOwnPropertyNames.call(model.attributes);\r\n        },\r\n        defineProperty: function(name, propertyDescriptor) {\r\n            return Object.defineProperty(model.attributes, name, propertyDescriptor);\r\n        },\r\n        get: function(target, name, reciever) {\r\n            if (model[name]) {\r\n                return model[name];\r\n            }\r\n            return model.get(name);\r\n        },\r\n        set: function(target, name, value, receiver) {\r\n            return model.set(name, value);\r\n        },\r\n        delete: function(name) {\r\n            model.unset(name);\r\n        },\r\n        has: function(target, name) {\r\n            return model.has('name');\r\n        },\r\n        hasOwn: function(target, name) {\r\n            return this.has(target, name);\r\n        },\r\n        enumerate: function(target) {\r\n            return model.attributes;\r\n        },\r\n        keys: function(target) {\r\n            return Object.keys(model.attributes);\r\n        }\r\n    };\r\n    return ProxyCtor.create(handle, Model);\r\n}","code-length":359,"reference":"Create a Proxy for a Model. This function will return a new Proxy handle for the given Model.\n","result":"Create a proxy for the model .","score":[0.0624,0.2201]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(target, name, reciever) {\r\n            if (model[name]) {\r\n                return model[name];\r\n            }\r\n            return model.get(name);\r\n        }","code-length":56,"reference":"Get an attribute from the Model. This will first check for Model properties before checking the Model's internal attributes map.","result":"Create a new model .","score":[0,0.027]}
{"code":"\/*is used to<extra_id_0>\r\nfunction detectDestType(dest) {\r\n        if (grunt.util._.endsWith(dest, '\/')) {\r\n            return cnst.directory;\r\n        } else {\r\n            return cnst.file;\r\n        }\r\n    }","code-length":68,"reference":"Private functions.","result":"Detect the destination type.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n    return {\r\n      r: Math.floor(Math.random() * 256),\r\n      g: Math.floor(Math.random() * 256),\r\n      b: Math.floor(Math.random() * 256),\r\n      a: 255\r\n    };\r\n  }","code-length":83,"reference":"Get a random color\n\n","result":"Generate a random color .","score":[0.4949,0.7182]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn) {\r\n      for (var y = 0; y < this.getHeight(); y++) {\r\n        for (var x = 0; x < this.getWidth(); x++) {\r\n          var rgba = this.getColor(x, y);\r\n          var out = fn.call(this, x, y, rgba);\r\n          this.setColor(x, y, (out || rgba));\r\n        }\r\n      }\r\n      return this;\r\n    }","code-length":122,"reference":"Execute a function on each point in an image\n\nThe rgba object passed to the callback will be saved back to the image,\nso no need to call `set_rgba` there\n\nIf the callback returns an object, it will be used as the new rgba value\n\n","result":"Create a new color .","score":[0.0001,0.0244]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(x, y) {\r\n      var i = this._getIndex(x, y);\r\n      return {\r\n        r: this._png.data[i + 0],\r\n        g: this._png.data[i + 1],\r\n        b: this._png.data[i + 2],\r\n        a: this._png.data[i + 3]\r\n      };\r\n    }","code-length":105,"reference":"Get the RGBA value of a coordinate\n\n","result":"Create a new PNG image.","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(x, y, rgba) {\r\n      var i = this._getIndex(x, y);\r\n      var prev = this.getColor(x, y);\r\n      this._png.data[i + 0] = is_num(rgba.r) ? to_rgba_int(rgba.r): prev.r;\r\n      this._png.data[i + 1] = is_num(rgba.g) ? to_rgba_int(rgba.g): prev.g;\r\n      this._png.data[i + 2] = is_num(rgba.b) ? to_rgba_int(rgba.b): prev.b;\r\n      this._png.data[i + 3] = is_num(rgba.a) ? to_rgba_int(rgba.a): prev.a;\r\n      return this.getColor(x, y);\r\n    }","code-length":213,"reference":"Set the RGBA value of a coordinate\n\n","result":"Set the color of a pixel in PNG file.","score":[0.2268,0.5208]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(factor) {\r\n      factor = clamp(to_int(factor), 1);\r\n      var width = this.getWidth() * factor;\r\n      var height = this.getHeight() * factor;\r\n      var buf = new buffer(width, height);\r\n      for (var y = 0; y < height; y++) {\r\n        for (var x = 0; x < width; x++) {\r\n          var i = get_index(width, x, y);\r\n          var rgba = this.getColor(to_int(x \/ factor), to_int(y \/ factor));\r\n          buf[i + 0] = rgba.r;\r\n          buf[i + 1] = rgba.g;\r\n          buf[i + 2] = rgba.b;\r\n          buf[i + 3] = rgba.a;\r\n        }\r\n      }\r\n      this._png.width = width;\r\n      this._png.height = height;\r\n      this._png.data = buf;\r\n      return this;\r\n    }","code-length":254,"reference":"Enlarge by some integer factor\n\n","result":"Scale the image to a given factor.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn) {\r\n      fn = fn || console.log.bind(console);\r\n      var buffers = [];\r\n      var base64 = new Stream();\r\n      base64.readable = base64.writable = true;\r\n      base64.write = function(data) {\r\n        buffers.push(data);\r\n      };\r\n      base64.end = function() {\r\n        fn(Buffer.concat(buffers).toString('base64'));\r\n      }\r\n      this._png.pack().pipe(base64);\r\n    }","code-length":139,"reference":"Get the base64 encoding\n\n","result":"Print png to console.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn) {\r\n      fn = fn || console.log.bind(console);\r\n      return this.toBase64(function(str) {\r\n        fn('data:image\/png;base64,' + str);\r\n      });\r\n    }","code-length":69,"reference":"Get the base64 encoding as a data URI\n\n","result":"Generate data URIs.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deepest(a, b, ca, cb) {\r\n  if (a === b) {\r\n    return true;\r\n  }\r\n  else if (typeof a !== 'object' || typeof b !== 'object') {\r\n    return false;\r\n  }\r\n  else if (a === null || b === null) {\r\n    return false;\r\n  }\r\n  else if (Buffer.isBuffer(a) && Buffer.isBuffer(b)) {\r\n    if (fastEqual) {\r\n      return fastEqual.call(a, b);\r\n    }\r\n    else {\r\n      if (a.length !== b.length) return false;\r\n      for (var i = 0; i < a.length; i++) if (a[i] !== b[i]) return false;\r\n      return true;\r\n    }\r\n  }\r\n  else if (a instanceof Date && b instanceof Date) {\r\n    return a.getTime() === b.getTime();\r\n  }\r\n  else if (isArguments(a) || isArguments(b)) {\r\n    if (!(isArguments(a) && isArguments(b))) return false;\r\n    var slice = Array.prototype.slice;\r\n    return deepest(slice.call(a), slice.call(b), ca, cb);\r\n  }\r\n  else {\r\n    if (a.constructor !== b.constructor) return false;\r\n    var pa = Object.getOwnPropertyNames(a);\r\n    var pb = Object.getOwnPropertyNames(b);\r\n    if (pa.length !== pb.length) return false;\r\n    var cal = ca.length;\r\n    while (cal--) if (ca[cal] === a) return cb[cal] === b;\r\n    ca.push(a); cb.push(b);\r\n    pa.sort(); pb.sort();\r\n    for (var j = pa.length - 1; j >= 0; j--) if (pa[j] !== pb[j]) return false;\r\n    var name, da, db;\r\n    for (var k = pa.length - 1; k >= 0; k--) {\r\n      name = pa[k];\r\n      da = Object.getOwnPropertyDescriptor(a, name);\r\n      db = Object.getOwnPropertyDescriptor(b, name);\r\n      if (da.enumerable   !== db.enumerable   ||\r\n          da.writable     !== db.writable     ||\r\n          da.configurable !== db.configurable ||\r\n          da.get          !== db.get          ||\r\n          da.set          !== db.set) {\r\n        return false;\r\n      }\r\n      if (!deepest(da.value, db.value, ca, cb)) return false;\r\n    }\r\n    ca.pop(); cb.pop();\r\n    return true;\r\n  }\r\n}","code-length":685,"reference":"on bits and pieces of many other versions of this check, most notably","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assertParasite(fn) {\r\n    return function _deeperAssert() {\r\n      if (this._bailedOut) return;\r\n      var res = fn.apply(tap.assert, arguments);\r\n      this.result(res);\r\n      return res;\r\n    };\r\n  }","code-length":82,"reference":"copied straight from tap-test.js","result":"Assert parasite.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getIgnored(filepath) {\r\n      for (var i in options.ignore) {\r\n        if (filepath.indexOf(options.ignore[i]) !== -1) {\r\n          return options.ignore[i];\r\n        }\r\n      }\r\n      return null;\r\n    }","code-length":77,"reference":"Validates \"ignore\" option for given path\n","result":"Filter files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction renderInputPrompt() {\r\n    process.stdout.write(prefix);\r\n    process.stdout.write(textToRender.join(''));\r\n}","code-length":46,"reference":"Basic input prompt rendering.","result":"Render input prompt.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction calculateFieldColor(selectedColor, nonSelectedColor, focusedColor, index, out)\r\n{\r\n    if(selected.indexOf(index) !== -1 && focused == index)\r\n    return chalk.bold.rgb(selectedColor.r, selectedColor.g, selectedColor.b)(out);\r\n    if(selected.indexOf(index) !== -1)\r\n        return chalk.rgb(selectedColor.r, selectedColor.g, selectedColor.b)(out);\r\n    if(focused == index)\r\n        return chalk.bold.rgb(focusedColor.r, focusedColor.g, focusedColor.b)(out);\r\n    return chalk.rgb(nonSelectedColor.r, nonSelectedColor.g, nonSelectedColor.b)(out);\r\n}","code-length":186,"reference":"Will return a chalk function based on selected index, etc..\n","result":"Calculate field color.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction render(errors) {\r\n  if (!errors) { return ''; };\r\n  return errors.map(function(error) {\r\n    return error.line + ':' + error.column + ' ' +\r\n      ' - ' + error.message + ' (' + error.ruleId +')';\r\n  }).join('\\n');\r\n}","code-length":92,"reference":"Use `app.import` to add additional libraries to the generated output files.  If you need to use different assets in different environments, specify an object as the first parameter. That object's keys should be the environment name and the values should be the asset to use in that environment.  If the library that you are including contains AMD or ES6 modules that you would like to import into your application please specify an object with the list of modules as keys along with the exports of each module as its value.","result":"Render the errors.","score":[0.0,0.0062]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(url) {\r\n    let request = parseRequest(url);\r\n    let resource = getRequestedResource(request);\r\n    return resource.get(request)\r\n      .then(returnGetResponse);\r\n    function returnGetResponse(result) {\r\n      return new RESTResponse(url, \"GET\", result);\r\n    }\r\n  }","code-length":91,"reference":"Handle GET request.\n","result":"Create a new function to call the resource.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(url, data) {\r\n    let request = parseRequest(url, data);\r\n    let resource = getRequestedResource(request);\r\n    return resource.put(request)\r\n      .then(returnResponse);\r\n    function returnResponse(result) {\r\n      return new RESTResponse(url, \"PUT\", result);\r\n    }\r\n  }","code-length":93,"reference":"Handle PUT request.\n","result":"Create a new REST API.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mapPrune(input, schema) {\r\n  var result = {};\r\n  _.forOwn(schema, function (value, key) {\r\n    if (_.isPlainObject(value)) {\r\n      result[key] = mapPrune(input[key] || {}, value);\r\n    } else {\r\n      result[key] = input[key] || null;\r\n    }\r\n  });\r\n  return result;\r\n}","code-length":112,"reference":"Returns a copy of the input in which any property that hasn't explicitly been expressed in the schema is stripped.","result":"Prune the input.","score":[0.0014,0.0273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createYamlSchema(customTypes) {\r\n\tvar yamlTypes = [];\r\n\t_.each(customTypes, function(resolver, tagAndKindString) {\r\n\t\tvar tagAndKind = tagAndKindString.split(\/\\s+\/),\r\n\t\t\tyamlType = new yaml.Type(tagAndKind[0], {\r\n\t\t\t\tkind: tagAndKind[1],\r\n\t\t\t\tconstruct: function(data) {\r\n\t\t\t\t\tvar result = resolver.call(this, data, loadYamlFile);\r\n\t\t\t\t\tif (_.isUndefined(result) || _.isFunction(result)) {\r\n\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tyamlTypes.push(yamlType);\r\n\t});\r\n\treturn yaml.Schema.create(yamlTypes);\r\n}","code-length":215,"reference":"Creates the YAML schema based on default and passed custom types.\n\n","result":"Create a yaml schema.","score":[0,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadYamlFile(filepath) {\r\n\ttry {\r\n\t\treturn yaml.safeLoad(\r\n\t\t\tfs.readFileSync(filepath), {\r\n\t\t\t\tschema: yamlSchema,\r\n\t\t\t\tfilename: filepath\r\n\t\t\t}\r\n\t\t);\r\n\t} catch (err) {\r\n\t\treturn null;\r\n\t}\r\n}","code-length":94,"reference":"Loads a YAML file and parses it into an Object.\n\n","result":"Load yaml files.","score":[0,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadTheme(props) {\r\n\tvar relPath = '\/' + props.join('\/') + '.yml',\r\n\t\tdefaultsPath = path.resolve(base + '\/scss\/themes\/default' + relPath),\r\n\t\tcustomPath = (custom) ? custom + relPath : null,\r\n\t\tdefaultVars = {},\r\n\t\tcustomVars = null,\r\n\t\tresult = {};\r\n\t\r\n\tcustomVars = loadYamlFile(customPath);\r\n\t\r\n\tif (customVars && customVars['merge-mode'] === 'replace') {\r\n\t\tresult = _.omit(customVars, 'merge-mode');\r\n\t} else {\r\n\t\tdefaultVars = loadYamlFile(defaultsPath);\r\n\t\tresult = _.merge(defaultVars, customVars);\r\n\t}\r\n\t\r\n\t_.set(theme, props.join('.'), result);\r\n\treturn result;\r\n}","code-length":223,"reference":"Load theme variables from a YAML file.\n\n","result":"Load theme properties.","score":[0.1522,0.2841]}
{"code":"\/*is used to<extra_id_0>\r\nfunction luiTheme(props) {\r\n\tvar propsS = (_.isArray(props)) ? props.join('.') : props,\r\n\t\tpropsA = (_.isString(props)) ? props.split('.') : props,\r\n\t\tobjectVars,\r\n\t\tobjectPath = [];\r\n\tobjectVars = _.result(theme, propsS);\r\n\t\r\n\tif (objectVars) {\r\n\t\treturn objectVars;\r\n\t\r\n\t} else {\r\n\t\t\r\n\t\t_.each(propsA, function(prop) {\r\n\t\t\tif (_.result(build, _.union(objectPath, [prop]).join('.')) || (_.includes(_.result(build, objectPath.join('.')), prop))) {\r\n\t\t\t\tobjectPath.push(prop);\r\n\t\t\t} else {\r\n\t\t\t\treturn objectPath;\r\n\t\t\t}\r\n\t\t});\r\n\t\tloadTheme(objectPath);\r\n\t\treturn _.result(theme, propsS);\r\n\t}\r\n}","code-length":254,"reference":"Retrieves theme variables from cached theme var or from file if need be\n\n","result":"Load the theme .","score":[0.0337,0.0413]}
{"code":"\/*is used to<extra_id_0>\r\nfunction write(destination, data, callback) {\r\n\t\r\n\tmkdirp(path.dirname(destination), null, (err, made) => {\r\n\t\tif (err) {\r\n\t\t\tconsole.error(err);\r\n\t\t} else {\r\n\t\t\tfs.writeFile(destination, data, (err) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tconsole.error(err);\r\n\t\t\t\t}\r\n\t\t\t\tif (typeof(callback) == 'function') {\r\n\t\t\t\t\tcallback(destination, data);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\treturn destination;\r\n}","code-length":164,"reference":"Writes a string in a file.\n\n","result":"Write to a file.","score":[0.274,0.4406]}
{"code":"\/*is used to<extra_id_0>\r\nfunction init(_options) {\r\n\t\r\n\tvar options = _.merge(defaults, _options);\r\n\t\r\n\tbase = options.base;\r\n\tcustom = options.custom;\r\n\t\r\n\tbuild = options.build = (typeof options.build === 'object') ? options.build : require(options.build);\r\n\t\r\n\tyamlSchema = createYamlSchema(options.customTypes);\r\n\treturn options;\r\n}","code-length":112,"reference":"Initializes global variables. In particular, merges defaults and custom options.\n\n","result":"Initialize the plugin.","score":[0,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction redact(_options, callback) {\r\n\tvar imports = [], \t\r\n\t\toutput = '', \t\r\n\t\terrors = [];\t\r\n\t\r\n\ttheme['core'] = {};\r\n\t_.each(_options.build.core, function(objects, family) {\r\n\t\ttheme['core'][family] = {};\r\n\t\t_.each(objects, function(objectName) {\r\n\t\t\tluiTheme('core.' + family + '.' + objectName);\r\n\t\t\timports.push('core\/' + family + '\/' + objectName);\r\n\t\t});\r\n\t});\r\n\t\r\n\tif (_options.build.plugins) {\r\n\t\ttheme['plugins'] = {};\r\n\t\t_.each(_options.build.plugins, function(plugin) {\r\n\t\t\tluiTheme('plugins.' + plugin);\r\n\t\t});\r\n\t}\r\n\toutput = tosass.format({theme: theme, imports: imports});\r\n\tif (typeof(callback) === 'function') {\r\n\t\tcallback(output);\r\n\t}\r\n\treturn output;\r\n}","code-length":269,"reference":"Compiles build definitions and theme variables into a ready-to-import scss string.\n\n","result":"Redact the sass file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(_options, callback) {\r\n\t\tvar options = init(_options);\r\n\t\treturn write(options.dest, redact(options), callback);\r\n\t}","code-length":49,"reference":"Builds the scss and writes it into destination file passed in options.\n\n","result":"Write to file.","score":[0,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(map) {\r\n\t\treturn '(' + Object.keys(map).map(function (key) {\r\n\t\t\treturn key + ': ' + parseValue(map[key]);\r\n\t\t}).join(',') + ')';\r\n\t}","code-length":68,"reference":"Converts objects to a map typed scss variable","result":"Parse map values.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction objectToSass(object) {\r\n\t return Object.keys(object).map(function (key) {\r\n\t\t return '$' + key + ': ' + parseValue(object[key]) + ';';\r\n\t }).join('\\n');\r\n }","code-length":69,"reference":"Parses a Javascript Object and returns a sass map string\n\n","result":"Convert object to sass.","score":[0,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseValue(value) {\r\n\tif (_.isArray(value))\r\n\t\treturn converters.list(value);\r\n\telse if (_.isPlainObject(value))\r\n\t\treturn converters.map(value);\r\n\telse\r\n\t\treturn value;\r\n}","code-length":76,"reference":"Distinguishes between strings, list and maps and calls the appropriate parser\n\n","result":"Parse the value.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction domSafeRandomGuid() {\r\n    var _arguments = arguments;\r\n    var _again = true;\r\n    _function: while (_again) {\r\n        numberOfBlocks = output = num = undefined;\r\n        var s4 = function s4() {\r\n            return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);\r\n        };\r\n        _again = false;\r\n        var numberOfBlocks = _arguments[0] === undefined ? 4 : _arguments[0];\r\n        var output = '';\r\n        var num = numberOfBlocks;\r\n        while (num > 0) {\r\n            output += s4();\r\n            if (num > 1) output += '-';\r\n            num--;\r\n        }\r\n        if (null === document.getElementById(output)) {\r\n            return output;\r\n        } else {\r\n            _arguments = [numberOfBlocks];\r\n            _again = true;\r\n            continue _function;\r\n        }\r\n    }\r\n}","code-length":251,"reference":"generate a guid that is tested unique against id's on the current doc","result":"Generate a random guid from a dom safe guid.","score":[0.0929,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction objectProperty (obj, indentLength = 1, inArray = 0) {\r\n    if (Object.keys(obj).length === 0) {\r\n      return ' {}';\r\n    }\r\n    let str = '\\n';\r\n    const objectPrefix = getPrefix(indentLength, indentChars);\r\n    Object\r\n      .keys(obj)\r\n      .forEach((name) => {\r\n        const value = obj[name];\r\n        const type = typeOf(value);\r\n        const inArrayPrefix = getPrefix(inArray, '  ');\r\n        const afterPropsIndent = NO_INDENT_TYPES.includes(type) ? '' : ' ';\r\n        const valueString = checkCircular(value) ? ' [Circular]' : typifiedString(type, value, indentLength + 1, inArray);\r\n        str += `${\r\n          inArrayPrefix\r\n        }${\r\n          objectPrefix\r\n        }${\r\n          name\r\n        }:${\r\n          afterPropsIndent\r\n        }${\r\n          valueString\r\n        }\\n`;\r\n      });\r\n    return str.substring(0, str.length - 1);\r\n  }","code-length":274,"reference":"Object to yaml string formatter\n\n","result":"Generate the objectProperty function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrayProperty (values, indentLength = 1, inArray = 0) {\r\n    if (values.length === 0) {\r\n      return ' []';\r\n    }\r\n    let str = '\\n';\r\n    const arrayPrefix = getPrefix(indentLength, indentChars);\r\n    values\r\n      .forEach((value) => {\r\n        const type = typeOf(value);\r\n        const inArrayPrefix = getPrefix(inArray, '  ');\r\n        const valueString = checkCircular(value) ? '[Circular]' : typifiedString(type, value, indentLength, inArray + 1)\r\n          .toString()\r\n          .trimLeft();\r\n        str += `${\r\n          inArrayPrefix\r\n        }${\r\n          arrayPrefix\r\n        }- ${\r\n          valueString\r\n        }\\n`;\r\n      });\r\n    return str.substring(0, str.length - 1);\r\n  }","code-length":221,"reference":"Array to yaml string formatter\n\n","result":"Create array properties.","score":[0,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RESTResponse(url, method, body) {\r\n    this.request = {\r\n    url: url,\r\n    method: method\r\n  };\r\n    this.body = body || \"\";\r\n    this.status = \"200\";\r\n}","code-length":70,"reference":"Backend response.\n","result":"Create a RESTResponse object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (map, receive) {\r\n\tvar entries = mapEntries.call(map);\r\n\tvar next;\r\n\tdo {\r\n\t\tnext = entries.next();\r\n\t} while (!next.done && receive(next.value));\r\n}","code-length":69,"reference":"polyfilled Maps with es6-shim might exist without for..of","result":"Create a map.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(component) {\r\n        var id = component.getId();\r\n        if (this.map[id]) {\r\n            Ext.Logger.warn('Registering a component with a id (`' + id + '`) which has already been used. Please ensure the existing component has been destroyed (`Ext.Component#destroy()`.');\r\n        }\r\n        this.map[component.getId()] = component;\r\n    }","code-length":105,"reference":"Registers an item to be managed.\n","result":"Register a component.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(component, defaultType) {\r\n        if (component.isComponent) {\r\n            return component;\r\n        }\r\n        else if (Ext.isString(component)) {\r\n            return Ext.createByAlias('widget.' + component);\r\n        }\r\n        else {\r\n            var type = component.xtype || defaultType;\r\n            return Ext.createByAlias('widget.' + type, component);\r\n        }\r\n    }","code-length":115,"reference":"Creates a new Component from the specified config object using the\nconfig object's `xtype` to determine the class to instantiate.\n","result":"Create a component.","score":[0.0014,0.1025]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rns() {\r\n  let jargv = _.$('env.jargv')\r\n  let key = _.get(jargv, '_[0]')\r\n  let prop = key ? _.get(snapptop, key) : null\r\n  if(!_.isFunction(prop)) return _.log(`\\nApi.Method ${key || 'NO KEY'} not found\\n`)\r\n  _.log(`\\nRunnng test: ${key}\\n`)\r\n  _.log(jargv)\r\n  _.log()\r\n  jargv = _.omit(jargv, ['_'])\r\n  var ret = _.attempt(prop, jargv, (err, result) => {\r\n    if(err) return _.log(err)\r\n    _.log(result)\r\n  })\r\n  if(_.isError(ret)) _.log(ret)\r\n  return ret\r\n}","code-length":221,"reference":"runs a name.space","result":"Test runnng tests.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (node) {\r\n            var result = '',\r\n                i, n, attr, child;\r\n            if (node.nodeType === document.TEXT_NODE) {\r\n                return node.nodeValue;\r\n            }\r\n            result += '<' + node.nodeName;\r\n            if (node.attributes.length) {\r\n                for (i = 0, n = node.attributes.length; i < n; i++) {\r\n                    attr = node.attributes[i];\r\n                    result += ' ' + attr.name + '=\"' + attr.value + '\"';\r\n                }\r\n            }\r\n            result += '>';\r\n            if (node.childNodes && node.childNodes.length) {\r\n                for (i = 0, n = node.childNodes.length; i < n; i++) {\r\n                    child = node.childNodes[i];\r\n                    result += this.serializeNode(child);\r\n                }\r\n            }\r\n            result += '<\/' + node.nodeName + '>';\r\n            return result;\r\n        }","code-length":256,"reference":"Serializes a DOM element and its children recursively into a string.\n","result":"Serialize a DOM node.","score":[0.0785,0.1456]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, namespace) {\r\n        var dom = this.dom;\r\n        return dom.getAttributeNS(namespace, name) || dom.getAttribute(namespace + \":\" + name)\r\n               || dom.getAttribute(name) || dom[name];\r\n    }","code-length":72,"reference":"Returns the value of an attribute from the element's underlying DOM node.\n","result":"Get the attribute value.","score":[0.0514,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (rules) {\r\n  this._instantiatedDate = new Date();\r\n  this._instanceCount = 0;\r\n  this._propertyCount = 0;\r\n  this._collatedInstances = null;\r\n  this._rules = (rules && this._checkRules(rules)) || [];\r\n  this.initEventualSchema();\r\n}","code-length":90,"reference":"An eventual schema exists for a key-value object.","result":"Create a schema.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sorters, defaultDirection) {\r\n        var currentSorters = this.getSorters();\r\n        return this.insertSorters(currentSorters ? currentSorters.length : 0, sorters, defaultDirection);\r\n    }","code-length":64,"reference":"This method adds all the sorters in a passed array.\n","result":"Sort the data.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index, sorters, defaultDirection) {\r\n        if (!Ext.isArray(sorters)) {\r\n            sorters = [sorters];\r\n        }\r\n        var ln = sorters.length,\r\n            direction = defaultDirection || this.getDefaultSortDirection(),\r\n            sortRoot = this.getSortRoot(),\r\n            currentSorters = this.getSorters(),\r\n            newSorters = [],\r\n            sorterConfig, i, sorter, currentSorter;\r\n        if (!currentSorters) {\r\n            currentSorters = this.createSortersCollection();\r\n        }\r\n        for (i = 0; i < ln; i++) {\r\n            sorter = sorters[i];\r\n            sorterConfig = {\r\n                direction: direction,\r\n                root: sortRoot\r\n            };\r\n            if (typeof sorter === 'string') {\r\n                currentSorter = currentSorters.get(sorter);\r\n                if (!currentSorter) {\r\n                    sorterConfig.property = sorter;\r\n                } else {\r\n                    if (defaultDirection) {\r\n                        currentSorter.setDirection(defaultDirection);\r\n                    } else {\r\n                        currentSorter.toggle();\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            else if (Ext.isFunction(sorter)) {\r\n                sorterConfig.sorterFn = sorter;\r\n            }\r\n            else if (Ext.isObject(sorter)) {\r\n                if (!sorter.isSorter) {\r\n                    if (sorter.fn) {\r\n                        sorter.sorterFn = sorter.fn;\r\n                        delete sorter.fn;\r\n                    }\r\n                    sorterConfig = Ext.apply(sorterConfig, sorter);\r\n                }\r\n                else {\r\n                    newSorters.push(sorter);\r\n                    if (!sorter.getRoot()) {\r\n                        sorter.setRoot(sortRoot);\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                Ext.Logger.warn('Invalid sorter specified:', sorter);\r\n            }\r\n            sorter = Ext.create('Ext.util.Sorter', sorterConfig);\r\n            newSorters.push(sorter);\r\n        }\r\n        for (i = 0, ln = newSorters.length; i < ln; i++) {\r\n            currentSorters.insert(index + i, newSorters[i]);\r\n        }\r\n        this.dirtySortFn = true;\r\n        if (currentSorters.length) {\r\n            this.sorted = true;\r\n        }\r\n        return currentSorters;\r\n    }","code-length":630,"reference":"This method inserts all the sorters in the passed array at the given index.\n","result":"Code too long,keep in 512.","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sorters) {\r\n        if (!Ext.isArray(sorters)) {\r\n            sorters = [sorters];\r\n        }\r\n        var ln = sorters.length,\r\n            currentSorters = this.getSorters(),\r\n            i, sorter;\r\n        for (i = 0; i < ln; i++) {\r\n            sorter = sorters[i];\r\n            if (typeof sorter === 'string') {\r\n                currentSorters.removeAtKey(sorter);\r\n            }\r\n            else if (typeof sorter === 'function') {\r\n                currentSorters.each(function(item) {\r\n                    if (item.getSorterFn() === sorter) {\r\n                        currentSorters.remove(item);\r\n                    }\r\n                });\r\n            }\r\n            else if (sorter.isSorter) {\r\n                currentSorters.remove(sorter);\r\n            }\r\n        }\r\n        if (!currentSorters.length) {\r\n            this.sorted = false;\r\n        }\r\n    }","code-length":257,"reference":"This method removes all the sorters in a passed array.\n","result":"Sort the collection .","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(items, item, sortFn, containsItem) {\r\n        var start = 0,\r\n            end   = items.length - 1,\r\n            sorterFn = sortFn || this.getSortFn(),\r\n            middle,\r\n            comparison;\r\n        while (start < end || start === end && !containsItem) {\r\n            middle = (start + end) >> 1;\r\n            var middleItem = items[middle];\r\n            if (middleItem === item) {\r\n                start = middle;\r\n                break;\r\n            }\r\n            comparison = sorterFn(item, middleItem);\r\n            if (comparison > 0 || (!containsItem && comparison === 0)) {\r\n                start = middle + 1;\r\n            } else if (comparison < 0) {\r\n                end = middle - 1;\r\n            } else if (containsItem && (start !== end)) {\r\n                start = middle + 1;\r\n            }\r\n        }\r\n        return start;\r\n    }","code-length":240,"reference":"This method returns the index that a given item would be inserted into a\ngiven array based on the current sorters.\n","result":"Sort items.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(attribute, newValue) {\r\n        var input = this.input;\r\n        if (!Ext.isEmpty(newValue, true)) {\r\n            input.dom.setAttribute(attribute, newValue);\r\n        } else {\r\n            input.dom.removeAttribute(attribute);\r\n        }\r\n    }","code-length":82,"reference":"Helper method to update a specified attribute on the `fieldEl`, or remove the attribute all together.\n","result":"Remove attributes.","score":[0,0.0342]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var el = this.input,\r\n            checked;\r\n        if (el) {\r\n            checked = el.dom.checked;\r\n            this._checked = checked;\r\n        }\r\n        return checked;\r\n    }","code-length":69,"reference":"Returns the `checked` value of this field\n","result":"Check the input element.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            el = me.input;\r\n        if (el && el.dom.focus) {\r\n            el.dom.focus();\r\n        }\r\n        return me;\r\n    }","code-length":66,"reference":"Attempts to set the field as the active input focus.\n","result":"Focus input.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            el = this.input;\r\n        if (el && el.dom.blur) {\r\n            el.dom.blur();\r\n        }\r\n        return me;\r\n    }","code-length":66,"reference":"Attempts to forcefully blur input focus for the field.\n","result":"Create the input element.","score":[0.1088,0.1176]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            el = me.input;\r\n        if (el && el.dom.setSelectionRange) {\r\n            el.dom.setSelectionRange(0, 9999);\r\n        }\r\n        return me;\r\n    }","code-length":74,"reference":"Attempts to forcefully select all the contents of the input field.\n","result":"Create the input.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(date, format) {\r\n        if (utilDate.formatFunctions[format] == null) {\r\n            utilDate.createFormat(format);\r\n        }\r\n        var result = utilDate.formatFunctions[format].call(date);\r\n        return result + '';\r\n    }","code-length":77,"reference":"Formats a date given the supplied format string.\n","result":"Create a new Date object.","score":[0.1319,0.1299]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(date, interval, value) {\r\n        var d = Ext.Date.clone(date);\r\n        if (!interval || value === 0) return d;\r\n        switch(interval.toLowerCase()) {\r\n            case Ext.Date.MILLI:\r\n                d= new Date(d.valueOf() + value);\r\n                break;\r\n            case Ext.Date.SECOND:\r\n                d= new Date(d.valueOf() + value * 1000);\r\n                break;\r\n            case Ext.Date.MINUTE:\r\n                d= new Date(d.valueOf() + value * 60000);\r\n                break;\r\n            case Ext.Date.HOUR:\r\n                d= new Date(d.valueOf() + value * 3600000);\r\n                break;\r\n            case Ext.Date.DAY:\r\n                d= new Date(d.valueOf() + value * 86400000);\r\n                break;\r\n            case Ext.Date.MONTH:\r\n                var day = date.getDate();\r\n                if (day > 28) {\r\n                    day = Math.min(day, Ext.Date.getLastDateOfMonth(Ext.Date.add(Ext.Date.getFirstDateOfMonth(date), 'mo', value)).getDate());\r\n                }\r\n                d.setDate(day);\r\n                d.setMonth(date.getMonth() + value);\r\n                break;\r\n            case Ext.Date.YEAR:\r\n                d.setFullYear(date.getFullYear() + value);\r\n                break;\r\n        }\r\n        return d;\r\n    }","code-length":382,"reference":"Provides a convenient method for performing basic date arithmetic. This method\ndoes not modify the Date instance being called - it creates and returns\na new Date instance containing the resulting date value.\n\n","result":"Add a date to a date object.","score":[0.0056,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (min, max, unit) {\r\n        var ExtDate = Ext.Date, est, diff = +max - min;\r\n        switch (unit) {\r\n            case ExtDate.MILLI:\r\n                return diff;\r\n            case ExtDate.SECOND:\r\n                return Math.floor(diff \/ 1000);\r\n            case ExtDate.MINUTE:\r\n                return Math.floor(diff \/ 60000);\r\n            case ExtDate.HOUR:\r\n                return Math.floor(diff \/ 3600000);\r\n            case ExtDate.DAY:\r\n                return Math.floor(diff \/ 86400000);\r\n            case 'w':\r\n                return Math.floor(diff \/ 604800000);\r\n            case ExtDate.MONTH:\r\n                est = (max.getFullYear() * 12 + max.getMonth()) - (min.getFullYear() * 12 + min.getMonth());\r\n                if (Ext.Date.add(min, unit, est) > max) {\r\n                    return est - 1;\r\n                } else {\r\n                    return est;\r\n                }\r\n            case ExtDate.YEAR:\r\n                est = max.getFullYear() - min.getFullYear();\r\n                if (Ext.Date.add(min, unit, est) > max) {\r\n                    return est - 1;\r\n                } else {\r\n                    return est;\r\n                }\r\n        }\r\n    }","code-length":345,"reference":"Calculate how many units are there between two time.\n","result":"Calculate the number of milliseconds between two dates .","score":[0.1907,0.284]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (date, unit, step) {\r\n        var num = new Date(+date);\r\n        switch (unit.toLowerCase()) {\r\n            case Ext.Date.MILLI:\r\n                return num;\r\n                break;\r\n            case Ext.Date.SECOND:\r\n                num.setUTCSeconds(num.getUTCSeconds() - num.getUTCSeconds() % step);\r\n                num.setUTCMilliseconds(0);\r\n                return num;\r\n                break;\r\n            case Ext.Date.MINUTE:\r\n                num.setUTCMinutes(num.getUTCMinutes() - num.getUTCMinutes() % step);\r\n                num.setUTCSeconds(0);\r\n                num.setUTCMilliseconds(0);\r\n                return num;\r\n                break;\r\n            case Ext.Date.HOUR:\r\n                num.setUTCHours(num.getUTCHours() - num.getUTCHours() % step);\r\n                num.setUTCMinutes(0);\r\n                num.setUTCSeconds(0);\r\n                num.setUTCMilliseconds(0);\r\n                return num;\r\n                break;\r\n            case Ext.Date.DAY:\r\n                if (step == 7 || step == 14){\r\n                    num.setUTCDate(num.getUTCDate() - num.getUTCDay() + 1);\r\n                }\r\n                num.setUTCHours(0);\r\n                num.setUTCMinutes(0);\r\n                num.setUTCSeconds(0);\r\n                num.setUTCMilliseconds(0);\r\n                return num;\r\n                break;\r\n            case Ext.Date.MONTH:\r\n                num.setUTCMonth(num.getUTCMonth() - (num.getUTCMonth() - 1) % step,1);\r\n                num.setUTCHours(0);\r\n                num.setUTCMinutes(0);\r\n                num.setUTCSeconds(0);\r\n                num.setUTCMilliseconds(0);\r\n                return num;\r\n                break;\r\n            case Ext.Date.YEAR:\r\n                num.setUTCFullYear(num.getUTCFullYear() - num.getUTCFullYear() % step, 1, 1);\r\n                num.setUTCHours(0);\r\n                num.setUTCMinutes(0);\r\n                num.setUTCSeconds(0);\r\n                num.setUTCMilliseconds(0);\r\n                return date;\r\n                break;\r\n        }\r\n    }","code-length":580,"reference":"Align the date to `unit`.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getOptions(messageType) {\r\n        const options = Object.assign({}, _defaults);\r\n        if (messageType in _options) {\r\n            Object.assign(options, _options[messageType]);\r\n        }\r\n        return options;\r\n    }","code-length":71,"reference":"Returns options for specified message type\n","result":"Get options for a given messageType.","score":[0.273,0.4259]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parse(messageType, args) {\r\n        const options = getOptions(messageType);\r\n                if (typeof options.interpreter === \"function\") {\r\n            for (const index in args) {\r\n                                if (typeof args[index] === \"string\") {\r\n                    continue;\r\n                }\r\n                args[index] = options.interpreter(args[index]);\r\n            }\r\n        }\r\n                if (options.labels) {\r\n            args.unshift(`[${messageType.toUpperCase()}]`);\r\n        }\r\n                if (options.timestamp) {\r\n            switch (typeof options.timestamp) {\r\n                case \"boolean\":\r\n                    args.unshift(`[${new Date().toLocaleString()}]`);\r\n                    break;\r\n                case \"string\":\r\n                    args.unshift(`[${moment().format(options.timestamp)}]`);\r\n                    break;\r\n                default:\r\n                    throw new Error(`Invalid timestamp type (${typeof options.timestamp}). Should be (boolean | string)`);\r\n            }\r\n        }\r\n        return args.join(\" \");\r\n    }","code-length":277,"reference":"Prepare message and return as string\n","result":"Parse a message.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stdout(messageType) {\r\n        return (...args) => {\r\n            const options = getOptions(messageType);\r\n            let message = parse(messageType, args);\r\n                        if (messageType === \"trace\") {\r\n                message += `\\n${getTrace()}`;\r\n            }\r\n                        if (!options.fileOnly) {\r\n                _console.log(message);\r\n            }\r\n                        if (typeof options.filePath === \"string\" && options.filePath.length > 0) {\r\n                fs.appendFileSync(options.filePath, `${message}\\n`);\r\n            }\r\n        };\r\n    }","code-length":161,"reference":"Main stdout function\n","result":"Print the stdout of the console.","score":[0.193,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assignOptions(defaults, userDefined) {\r\n        for (const optionKey in userDefined) {\r\n            if (defaults.hasOwnProperty(optionKey)) {\r\n                defaults[optionKey] = userDefined[optionKey];\r\n            }\r\n            else {\r\n                throw new Error(`Unknown {IOptions} parameter '${optionKey}'`);\r\n            }\r\n        }\r\n        return defaults;\r\n    }","code-length":108,"reference":"Assign user options to object\n","result":"Assign options.","score":[0.1116,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (pagesPath, allPartials) {\r\n\t\t\tif (options.verbose) {\r\n\t\t\t\tgrunt.log.writeln('- using pages path: %s', pagesPath);\r\n\t\t\t}\r\n\t\t\tvar allPages = {};\r\n\t\t\t\r\n\t\t\tif (grunt.file.exists(options.src + '\/globals.json')) {\r\n\t\t\t\tfileGlobals = grunt.file.readJSON(options.src + '\/globals.json');\r\n\t\t\t\tgruntGlobals = mergeObj(gruntGlobals, fileGlobals);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tgrunt.file.recurse(pagesPath, function (absPath, rootDir, subDir, fileName) {\r\n\t\t\t\t\r\n\t\t\t\tif (!fileName.match(tplMatcher)) {\r\n\t\t\t\t\tif (options.verbose) {\r\n\t\t\t\t\t\tgrunt.log.writeln('-- ignoring file: %s', fileName);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar pageName = absPath.replace(rootDir, '').replace(tplMatcher, '').substring(1),\r\n\t\t\t\t    pageSrc = grunt.file.read(absPath),\r\n\t\t\t\t    pageJson = {},\r\n\t\t\t\t    dataPath = absPath.replace(tplMatcher, '.json'),\r\n\t\t\t\t    compiledPage = Hogan.compile(pageSrc);\r\n\t\t\t\tif (options.verbose) {\r\n\t\t\t\t\tgrunt.log.writeln('-- compiled page: %s', pageName);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (grunt.file.exists(dataPath)) {\r\n\t\t\t\t\tif (options.verbose) {\r\n\t\t\t\t\t\tgrunt.log.writeln('--- using page data from: %s', dataPath);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpageJson = grunt.file.readJSON(dataPath);\r\n\t\t\t\t\tpageData[pageName] = mergeObj(gruntGlobals, pageJson);\r\n\t\t\t\t\tif (options.verbose) {\r\n\t\t\t\t\t\tgrunt.log.writeln('--- json for %s', pageName, pageData[pageName]);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpageData[pageName] = gruntGlobals;\r\n\t\t\t\t}\r\n\t\t\t\tallPages[pageName] = compiledPage.render(pageData[pageName], allPartials);\r\n\t\t\t});\r\n\t\t\treturn allPages;\r\n\t\t}","code-length":571,"reference":"Hogan render each page, return rendered pages","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(result) {\r\n                    if (fd && result.slice(0, 3) !== '[D]' && result.match(\/\\u001b\\[\/g) === null) {\r\n                        fs.writeSync(fd, result);\r\n                    }\r\n                    if (options.quiet) {\r\n                        return hooker.preempt();\r\n                    }\r\n                }","code-length":95,"reference":"This gets executed before the original process.stdout.write","result":"Capture the output of the hook.","score":[0.1634,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(cb, param) {\r\n            return function() {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if(typeof param !== 'undefined') {\r\n                    args.unshift(param);\r\n                } else if (arguments.length === 1) {\r\n                    args.unshift(arguments[0]);\r\n                }\r\n                args.unshift(null);\r\n                cb.apply(null, args);\r\n            };\r\n        }","code-length":120,"reference":"helper function for asyncjs","result":"Wrap a function into a closure.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback) {\r\n                if (tunnel) {\r\n                    return callback(null);\r\n                }\r\n                grunt.log.debug('checking if selenium is running');\r\n                var options = {\r\n                    host: capabilities.host || 'localhost',\r\n                    port: capabilities.port || 4444,\r\n                    path: '\/wd\/hub\/status'\r\n                };\r\n                http.get(options, function() {\r\n                    grunt.log.debug('selenium is running');\r\n                    isSeleniumServerRunning = true;\r\n                    callback(null);\r\n                }).on('error', function() {\r\n                    grunt.log.debug('selenium is not running');\r\n                    callback(null);\r\n                });\r\n            }","code-length":184,"reference":"check if selenium server is already running","result":"Checking if selenium is running.","score":[0.2521,0.5515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback) {\r\n                if (tunnel || isSeleniumServerRunning) {\r\n                    return callback(null);\r\n                }\r\n                grunt.log.debug('installing driver if needed');\r\n                selenium.install(options.seleniumInstallOptions, function(err) {\r\n                    if (err) {\r\n                        return callback(err);\r\n                    }\r\n                    grunt.log.debug('driver installed');\r\n                    callback(null);\r\n                });\r\n            }","code-length":121,"reference":"install drivers if needed","result":"Starting selenium server.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n                var callback = arguments[arguments.length - 1];\r\n                grunt.log.debug('init WebdriverIO instance');\r\n                GLOBAL.browser.init(function(err) {\r\n                                        callback(err);\r\n                });\r\n            }","code-length":71,"reference":"init WebdriverIO instance","result":"Initialize WebdriverIO instance.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback) {\r\n                grunt.log.debug('run mocha tests');\r\n                                sessionID = GLOBAL.browser.requestHandler.sessionID;\r\n                mocha.run(next(callback));\r\n            }","code-length":58,"reference":"run mocha tests","result":"Create a new function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(result, callback) {\r\n                grunt.log.debug('end selenium session');\r\n                unmanageExceptions();\r\n                GLOBAL.browser.end(next(callback, result === 0));\r\n            }","code-length":57,"reference":"end selenium session","result":"Create a function to create a function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(result) {\r\n                var callback = arguments[arguments.length - 1];\r\n                if (!options.user && !options.key && !options.updateSauceJob) {\r\n                    return callback(null, result);\r\n                }\r\n                grunt.log.debug('update job on Sauce Labs');\r\n                var sauceAccount = new SauceLabs({\r\n                    username: options.user,\r\n                    password: options.key\r\n                });\r\n                sauceAccount.updateJob(sessionID, {\r\n                    passed: result,\r\n                    public: true\r\n                }, next(callback, result));\r\n            }","code-length":160,"reference":"update job on Sauce Labs","result":"Test the result of the test function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(result) {\r\n                var callback = arguments[arguments.length - 1];\r\n                grunt.log.debug('finish grunt task');\r\n                if (isLastTask) {\r\n                    if (fd) {\r\n                        fs.closeSync(fd);\r\n                    }\r\n                    hooker.unhook(process.stdout, 'write');\r\n                }\r\n                done(result);\r\n                callback();\r\n            }","code-length":109,"reference":"finish grunt task","result":"Call done.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction render (req, res, body) {\r\n  var response = {};\r\n  var parsedURL = parseURL(req.url);\r\n  for (var prop in parsedURL)\r\n    response[prop] = parsedURL[prop];\r\n  ['method', 'url'].forEach(function (prop) {\r\n    response[prop] = req[prop];\r\n  });\r\n  ['headers', 'statusCode'].forEach(function (prop) {\r\n    response[prop] = res[prop];\r\n  });\r\n  response.body = body;\r\n  return response;\r\n}","code-length":149,"reference":"Takes a request, response and body object and return a response object\nfor the `send` callback.\n\n","result":"Render the response.","score":[0.0054,0.068]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (val, key) {\r\n        const optVal = _M._option.getIn(key);\r\n        if (optVal !== null) {\r\n          if (_.isObject(optVal)) {\r\n            _M._option.mergeIn(key, _.defaultsDeep(val, _M._option.getIn(key)));\r\n          }else {\r\n            _M._option.mergeIn(key, val);\r\n          }\r\n        }\r\n      }","code-length":120,"reference":"wrapper for bellow each loop","result":"Merge options.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (optionObj) {\r\n        if (_.hasIn(optionObj, ['transitionDefault'])) {\r\n          _M._option.updateTransDefault(optionObj.transitionDefault);\r\n          delete optionObj.transitionDefault;\r\n        }\r\n        _.each(optionObj, function (val, key) {\r\n          if (_.isObject(val)) {\r\n            _.each(val, function (_val, _key) {\r\n              mergeOption(_val, [key, _key]);\r\n            });\r\n          }else {\r\n            mergeOption(val, [key]);\r\n          }\r\n        });\r\n      }","code-length":157,"reference":"wrapper for set option","result":"Update the default values of the option.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (key, keyType, funk, passKey = true) {\r\n          if (_H.util.regularExp.keyTest(key, keyType)) {\r\n            const data = self.doNotUse(objectArgs.get(key), keyType);\r\n            if (!data) { return true; }\r\n            if (passKey) {\r\n              funk(key, data, target, keyType);\r\n            }else {\r\n              funk(data, target, keyType, key);\r\n            }\r\n            return true;\r\n          }\r\n        }","code-length":139,"reference":"So the gist of this funk is its a wrapper funk for the passed in args.\nI would take a look at whats happening below in the loop to get a better\nidea of whats going on but we are just passing the keyArgs into this funk\n","result":"No valid comments generated.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (sourceObj) {\r\n      for (const property in sourceObj) {\r\n        if (sourceObj.hasOwnProperty(property)) {\r\n          if (_.isPlainObject(sourceObj[property])) {\r\n            const use = _.get(sourceObj[property], 'use');\r\n            if (useIsFalse(use)) {\r\n              sourceObj = _.omit(sourceObj, property);\r\n            }else {\r\n              if (useIsTrue(use)) {\r\n                sourceObj[property] = _.omit(sourceObj[property], 'use');\r\n              }\r\n              sourceObj[property] = searchObject(sourceObj[property]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return sourceObj;\r\n    }","code-length":188,"reference":"recurse check these, since there may be deeper options like tl to remove","result":"Search object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction add(reducers, scope, defaultState) {\r\n  if (scope === undefined) scope = \"general\";\r\n  _combines[scope] !== undefined || defineReducer(scope);\r\n  var scopeReducers = _reducers[scope] || {};\r\n  for (var type in reducers) {\r\n    var reducer = reducers[type];\r\n    if (typeof reducer === 'function') {\r\n      if (scopeReducers[type] === undefined) {\r\n        scopeReducers[type] = [ reducer ];\r\n      } else {\r\n        scopeReducers[type].push(reducer);\r\n      }\r\n    }\r\n  }\r\n  if (defaultState !== undefined) {\r\n    scopeReducers._default = defaultState;\r\n  }\r\n  _reducers[scope] = scopeReducers;\r\n}","code-length":221,"reference":"add - add reducers\n\n","result":"Add a reducer to the combines object.","score":[0,0.2326]}
{"code":"\/*is used to<extra_id_0>\r\nfunction remove(scope, type) {\r\n  if (scope === undefined) scope = \"general\";\r\n  if (type === undefined) {\r\n    delete _combines[scope];\r\n    delete _reducers[scope];\r\n  } else {\r\n    delete _reducers[scope][type];\r\n  }\r\n}","code-length":88,"reference":"remove - remove reducers by scope & type\n\n","result":"Remove a specific combination.","score":[0,0.0658]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replace(reducers, scope, defaultState) {\r\n  remove(scope);\r\n  add(reducers, scope, defaultState);\r\n}","code-length":46,"reference":"replace - replace with new reducers\n\n","result":"Replace the state.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toInteger(value) {\r\n      if (!value) {\r\n        return value === 0 ? value : 0;\r\n      }\r\n      value = toNumber(value);\r\n      if (value === INFINITY || value === -INFINITY) {\r\n        var sign = (value < 0 ? -1 : 1);\r\n        return sign * MAX_INTEGER;\r\n      }\r\n      var remainder = value % 1;\r\n      return value === value ? (remainder ? value - remainder : value) : 0;\r\n    }","code-length":131,"reference":"Converts `value` to an integer.\n\n**Note:** This function is loosely based on [`ToInteger`](http:\/\/www.ecma-international.org\/ecma-262\/6.0\/#sec-tointeger).\n\n","result":"Convert a value to an integer.","score":[0.1238,0.3049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeError(type, file, line, message) {\r\n\tif (!messages[type]) {\r\n\t\tmessages[type] = [];\r\n\t}\r\n\tmessages[type].push({\r\n\t\ttype : type,\r\n\t\tfile : file,\r\n\t\tline : line,\r\n\t\tmessage : message\r\n\t});\r\n}","code-length":93,"reference":"Write an error to the errors buffer\n","result":"Write errors to files.","score":[0.1986,0.2239]}
{"code":"\/*is used to<extra_id_0>\r\nfunction flushMessages() {\r\n\tObject.keys(messages)\r\n\t\t.forEach(function(type) {\r\n\t\t\tmessages[type].forEach(function(msg) {\r\n\t\t\t\twriteLine(msg.type + \" error: [\" + msg.file + \":\" + msg.line + \"] \" + msg.message);\r\n\t\t\t});\r\n\t\t});\r\n}","code-length":98,"reference":"Flush the errors buffer","result":"Flush messages.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getConfig(file) {\r\n\tvar config = {},\r\n\t\tsubConfig;\r\n\ttry {\r\n\t\tconfig = JSON.parse(fs.readFileSync(file, \"utf8\"));\r\n\t\tif (config.extends) {\r\n\t\t\tsubConfig = JSON.parse(fs.readFileSync(config.extends, \"utf8\"));\r\n\t\t\tutil._extend(subConfig, config);\r\n\t\t\tdelete subConfig.extends;\r\n\t\t\tconfig = subConfig;\r\n\t\t}\r\n\t} catch (e) {\r\n\t\t\r\n\t}\r\n\treturn config;\r\n}","code-length":156,"reference":"Get a JSON based config file\n","result":"Generate the config file.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isIgnored(file) {\r\n\treturn ignorePatterns.some(function(pattern) {\r\n\t\treturn minimatch(file, pattern, {\r\n\t\t\tnocase : true,\r\n\t\t\tmatchBase : true\r\n\t\t});\r\n\t});\r\n}","code-length":72,"reference":"Check if a filename matches an ignore pattern\n","result":"Detect if a file is ignored.","score":[0.1956,0.2404]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractStyles(src) {\r\n\tvar isInBlock = false,\r\n\t\tlines = [];\r\n\tsrc.replace(\/\\r\/g, \"\").split(\"\\n\").forEach(function(l) {\r\n\t\t\r\n\t\tif (l.indexOf(\"<\/style\") > -1) {\r\n\t\t\tlines[lines.length] = \"\";\r\n\t\t\tisInBlock = false;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (isInBlock) {\r\n\t\t\tlines[lines.length] = l;\r\n\t\t} else {\r\n\t\t\tlines[lines.length] = \"\";\r\n\t\t}\r\n\t\tif (l.indexOf(\"<style\") > -1) {\r\n\t\t\tisInBlock = true;\r\n\t\t}\r\n\t});\r\n\treturn lines.join(\"\\n\").replace(\/\\{\\$(\\w+\\.)*\\w+\\}\/g, \"{}\");\r\n}","code-length":231,"reference":"Replace non css content in a html file with empty lines\n","result":"Extract styles from source .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction read() {\r\n\tvar filename = process.argv[2],\r\n\t\tsrc = fs.readFileSync(process.argv[3], \"utf8\");\r\n\t\r\n\ttry {\r\n\t\tsrc = require(path.join(process.cwd(), \".git-hooks\/pre-commit-plugins\/pre-commit-modifier\"))(filename, src);\r\n\t} catch (e) {\r\n\t\t\r\n\t}\r\n\t\r\n\treturn Bluebird.resolve({\r\n\t\tfilename : filename,\r\n\t\tsrc : src\r\n\t});\r\n}","code-length":145,"reference":"Get file contents and file name from process.argv\n","result":"Read the file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction loadFileCheckerPlugins() {\r\n\tvar checkers = {};\r\n\ttry {\r\n\t\tfs.readdirSync(path.join(process.cwd(), \".git-hooks\/pre-commit-plugins\/plugins\"))\r\n\t\t\t.forEach(function(file) {\r\n\t\t\t\tvar check = file.replace(\/\\.js$\/, \"\");\r\n\t\t\t\tif (!(\/\\.js$\/).test(file)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tcheckers[check] = require(path.join(process.cwd(), \".git-hooks\/pre-commit-plugins\/plugins\", file));\r\n\t\t\t});\r\n\t} catch (e) {\r\n\t\t\r\n\t}\r\n\treturn checkers;\r\n}","code-length":182,"reference":"Load all file checking plugins\n","result":"Load the file checker plugins.","score":[0.2857,0.5111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(oldName, newName, prefix, suffix) {\r\n        if (!oldName && !newName) {\r\n            return this;\r\n        }\r\n        oldName = oldName || [];\r\n        newName = newName || [];\r\n        if (!this.isSynchronized) {\r\n            this.synchronize();\r\n        }\r\n        if (!suffix) {\r\n            suffix = '';\r\n        }\r\n        var dom = this.dom,\r\n            map = this.hasClassMap,\r\n            classList = this.classList,\r\n            SEPARATOR = this.SEPARATOR,\r\n            i, ln, name;\r\n        prefix = prefix ? prefix + SEPARATOR : '';\r\n        suffix = suffix ? SEPARATOR + suffix : '';\r\n        if (typeof oldName == 'string') {\r\n            oldName = oldName.split(this.spacesRe);\r\n        }\r\n        if (typeof newName == 'string') {\r\n            newName = newName.split(this.spacesRe);\r\n        }\r\n        for (i = 0, ln = oldName.length; i < ln; i++) {\r\n            name = prefix + oldName[i] + suffix;\r\n            if (map[name]) {\r\n                delete map[name];\r\n                Ext.Array.remove(classList, name);\r\n            }\r\n        }\r\n        for (i = 0, ln = newName.length; i < ln; i++) {\r\n            name = prefix + newName[i] + suffix;\r\n            if (!map[name]) {\r\n                map[name] = true;\r\n                classList.push(name);\r\n            }\r\n        }\r\n        dom.className = classList.join(' ');\r\n        return this;\r\n    }","code-length":409,"reference":"Replaces a CSS class on the element with another.\nIf the old name does not exist, the new name will simply be added.\n","result":"Change the class name of a node in the DOM.","score":[0.0442,0.1152]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(className) {\r\n        var map = this.hasClassMap,\r\n            i, ln, name;\r\n        if (typeof className == 'string') {\r\n            className = className.split(this.spacesRe);\r\n        }\r\n        for (i = 0, ln = className.length; i < ln; i++) {\r\n            name = className[i];\r\n            if (!map[name]) {\r\n                map[name] = true;\r\n            }\r\n        }\r\n        this.classList = className.slice();\r\n        this.dom.className = className.join(' ');\r\n    }","code-length":154,"reference":"Sets the specified CSS class on this element's DOM node.\n","result":"Create a class instance.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(width, height) {\r\n        if (Ext.isObject(width)) {\r\n            height = width.height;\r\n            width = width.width;\r\n        }\r\n        this.setWidth(width);\r\n        this.setHeight(height);\r\n        return this;\r\n    }","code-length":81,"reference":"Set the size of this Element.\n\n","result":"Create a new window.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(prop) {\r\n        var me = this,\r\n            dom = me.dom,\r\n            hook = me.styleHooks[prop],\r\n            cs, result;\r\n        if (dom == document) {\r\n            return null;\r\n        }\r\n        if (!hook) {\r\n            me.styleHooks[prop] = hook = { name: Ext.dom.Element.normalize(prop) };\r\n        }\r\n        if (hook.get) {\r\n            return hook.get(dom, me);\r\n        }\r\n        cs = window.getComputedStyle(dom, '');\r\n        result = (cs && cs[hook.name]);\r\n        return result;\r\n    }","code-length":174,"reference":"Normalizes `currentStyle` and `computedStyle`.\n","result":"Get computed style values for a given property.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(prop, value) {\r\n        var me = this,\r\n            dom = me.dom,\r\n            hooks = me.styleHooks,\r\n            style = dom.style,\r\n            valueFrom = Ext.valueFrom,\r\n            name, hook;\r\n        if (typeof prop == 'string') {\r\n            hook = hooks[prop];\r\n            if (!hook) {\r\n                hooks[prop] = hook = { name: Ext.dom.Element.normalize(prop) };\r\n            }\r\n            value = valueFrom(value, '');\r\n            if (hook.set) {\r\n                hook.set(dom, value, me);\r\n            } else {\r\n                style[hook.name] = value;\r\n            }\r\n        }\r\n        else {\r\n            for (name in prop) {\r\n                if (prop.hasOwnProperty(name)) {\r\n                    hook = hooks[name];\r\n                    if (!hook) {\r\n                        hooks[name] = hook = { name: Ext.dom.Element.normalize(name) };\r\n                    }\r\n                    value = valueFrom(prop[name], '');\r\n                    if (hook.set) {\r\n                        hook.set(dom, value, me);\r\n                    }\r\n                    else {\r\n                        style[hook.name] = value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return me;\r\n    }","code-length":345,"reference":"Wrapper for setting style properties, also takes single object parameter of multiple styles.\n","result":"Set style properties.","score":[0.0146,0.1563]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        Ext.Logger.deprecate(\"Ext.dom.Element.getViewSize() is deprecated\", this);\r\n        var doc = document,\r\n            dom = this.dom;\r\n        if (dom == doc || dom == doc.body) {\r\n            return {\r\n                width: Element.getViewportWidth(),\r\n                height: Element.getViewportHeight()\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                width: dom.clientWidth,\r\n                height: dom.clientHeight\r\n            };\r\n        }\r\n    }","code-length":148,"reference":"Returns the dimensions of the element available to lay content out in.\n\nIf the element (or any ancestor element) has CSS style `display: none`, the dimensions will be zero.\n\nExample:\n\nvar vpSize = Ext.getBody().getViewSize();\n\n\/\/ all Windows created afterwards will have a default value of 90% height and 95% width\nExt.Window.override({\nwidth: vpSize.width * 0.9,\nheight: vpSize.height * 0.95\n});\n\/\/ To handle window resizing you would have to hook onto onWindowResize.\n\n","result":"Get the size of the viewport.","score":[0.0,0.0306]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(prop) {\r\n        Ext.Logger.deprecate(\"Ext.dom.Element.isTransparent() is deprecated\", this);\r\n        var value = this.getStyle(prop);\r\n        return value ? this.transparentRe.test(value) : false;\r\n    }","code-length":74,"reference":"Returns `true` if the value of the given property is visually transparent. This\nmay be due to a 'transparent' style value or an rgba value with 0 in the alpha\ncomponent.\n","result":"Test transparent styles.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction printCounter(indicator) {\r\n\tcounter++;\r\n\tprocess.stdout.write(indicator);\r\n\tif (counter === filesLength || counter % lineLength === 0) {\r\n\t\tprocess.stdout.write(lineSpacing.slice(-1 * ((lineLength - counter) % lineLength)) + \" \");\r\n\t\tprocess.stdout.write(String(\"   \" + counter).slice(-3) + \" \/ \" + String(\"   \" + filesLength).slice(-3));\r\n\t\tprocess.stdout.write(\"\\n\");\r\n\t}\r\n}","code-length":139,"reference":"Write a character to the screen indicating lint status\n","result":"Print the counter.","score":[0.0553,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction encode(string) {\r\n    function hex(code) {\r\n        var hex_code = code.toString(16).toUpperCase();\r\n        if (hex_code.length < 2) {\r\n            hex_code = 0 + hex_code;\r\n        }\r\n        return '%' + hex_code;\r\n    }\r\n    string = string + '';\r\n    var reserved_chars = \/[ :\\\/?#\\[\\]@!$&'()*+,;=<>\"{}|\\\\`\\^%\\r\\n\\u0080-\\uffff]\/;\r\n    var str_len = string.length;\r\n    var i;\r\n    var string_arr = string.split('');\r\n    var c;\r\n    for (i = 0; i < str_len; i += 1) {\r\n        if (c = string_arr[i].match(reserved_chars)) {\r\n            c = c[0].charCodeAt(0);\r\n            if (c < 128) {\r\n                string_arr[i] = hex(c);\r\n            } else if (c < 2048) {\r\n                string_arr[i] = hex(192 + (c >> 6)) + hex(128 + (c & 63));\r\n            } else if (c < 65536) {\r\n                string_arr[i] = hex(224 + (c >> 12)) + hex(128 + ((c >> 6) & 63)) + hex(128 + (c & 63));\r\n            } else if (c < 2097152) {\r\n                string_arr[i] = hex(240 + (c >> 18)) + hex(128 + ((c >> 12) & 63)) + hex(128 + ((c >> 6) & 63)) + hex(128 + (c & 63));\r\n            }\r\n        }\r\n    }\r\n    return string_arr.join('');\r\n}","code-length":446,"reference":"rfc3986 compatable encode of a string\n\n","result":"Encode a string.","score":[0.1502,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction decode(string) {\r\n    return string.replace(\/%[a-fA-F0-9]{2}\/ig, function (match) {\r\n        return String.fromCharCode(parseInt(match.replace('%', ''), 16));\r\n    });\r\n}","code-length":71,"reference":"rfc3986 compatable decode of a string\n\n","result":"Detect encoding.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getNonce(key_length) {\r\n    function rand() {\r\n        return Math.floor(Math.random() * chars.length);\r\n    }\r\n    key_length = key_length || 64;\r\n    var key_bytes = key_length \/ 8;\r\n    var value = '';\r\n    var key_iter = key_bytes \/ 4;\r\n    var key_remainder = key_bytes % 4;\r\n    var i;\r\n    var chars = ['20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B', '2C', '2D', '2E', '2F', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3A', '3B', '3C', '3D', '3E', '3F', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4A', '4B', '4C', '4D', '4E', '4F', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5A', '5B', '5C', '5D', '5E', '5F', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6A', '6B', '6C', '6D', '6E', '6F', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7A', '7B', '7C', '7D', '7E'];\r\n    for (i = 0; i < key_iter; i += 1) {\r\n        value += chars[rand()] + chars[rand()] + chars[rand()] + chars[rand()];\r\n    }\r\n    for (i = 0; i < key_remainder; i += 1) {\r\n        value += chars[rand()];\r\n    }\r\n    return value;\r\n}","code-length":539,"reference":"Generate a nonce for the request\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toHeaderString(params, realm) {\r\n    var arr = [];\r\n    var i;\r\n    for (i in params) {\r\n        if (typeof params[i] !== 'object' && params[i] !== '' && params[i] !== undefined) {\r\n            arr.push(encode(i) + '=\"' + encode(params[i]) + '\"');\r\n        }\r\n    }\r\n    arr.sort();\r\n    if (realm) {\r\n        arr.unshift('realm=\"' + encode(realm) + '\"');\r\n    }\r\n    return arr.join(', ');\r\n}","code-length":153,"reference":"Get a string of the parameters for the OAuth Authorization header\n\n","result":"Create a header string.","score":[0.066,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toSignatureBaseString(method, url, header_params, query_params) {\r\n    var arr = [];\r\n    var i;\r\n    for (i in header_params) {\r\n        if (header_params[i] !== undefined && header_params[i] !== '') {\r\n            arr.push([encode(i), encode(header_params[i] + '')]);\r\n        }\r\n    }\r\n    for (i in query_params) {\r\n        if (query_params[i] !== undefined && query_params[i] !== '') {\r\n            arr.push([encode(i), encode(query_params[i] + '')]);\r\n        }\r\n    }\r\n    arr = arr.sort(function lexicalSort(a, b) {\r\n        if (a[0] < b[0]) {\r\n            return -1;\r\n        } else if (a[0] > b[0]) {\r\n            return 1;\r\n        } else {\r\n            if (a[1] < b[1]) {\r\n                return -1;\r\n            } else if (a[1] > b[1]) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n    }).map(function (el) {\r\n        return el.join(\"=\");\r\n    });\r\n    return [method, encode(url), encode(arr.join('&'))].join('&');\r\n}","code-length":360,"reference":"Generate a signature base string for the request\n\n","result":"Generate a signature base string.","score":[0.4128,0.5154]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (application_secret, token_secret, signature_base) {\r\n        var passphrase;\r\n        var signature;\r\n        application_secret = encode(application_secret);\r\n        token_secret = encode(token_secret || '');\r\n        passphrase = application_secret + '&' + token_secret;\r\n        signature = Cryptography.hmac(Cryptography.SHA1, passphrase, signature_base);\r\n        return btoa(signature);\r\n    }","code-length":113,"reference":"Sign the request\n\n","result":"Generate a signature.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(values, animated) {\r\n        var me = this,\r\n            slots = me.getInnerItems(),\r\n            ln = slots.length,\r\n            key, slot, loopSlot, i, value;\r\n        if (!values) {\r\n            values = {};\r\n            for (i = 0; i < ln; i++) {\r\n                values[slots[i].config.name] = null;\r\n            }\r\n        }\r\n        for (key in values) {\r\n            slot = null;\r\n            value = values[key];\r\n            for (i = 0; i < slots.length; i++) {\r\n                loopSlot = slots[i];\r\n                if (loopSlot.config.name == key) {\r\n                    slot = loopSlot;\r\n                    break;\r\n                }\r\n            }\r\n            if (slot) {\r\n                if (animated) {\r\n                    slot.setValueAnimated(value);\r\n                } else {\r\n                    slot.setValue(value);\r\n                }\r\n            }\r\n        }\r\n        me._values = me._value = values;\r\n        return me;\r\n    }","code-length":283,"reference":"Sets the values of the pickers slots.\n","result":"Set values on the items.","score":[0.1915,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(useDom) {\r\n        var values = {},\r\n            items = this.getItems().items,\r\n            ln = items.length,\r\n            item, i;\r\n        if (useDom) {\r\n            for (i = 0; i < ln; i++) {\r\n                item = items[i];\r\n                if (item && item.isSlot) {\r\n                    values[item.getName()] = item.getValue(useDom);\r\n                }\r\n            }\r\n            this._values = values;\r\n        }\r\n        return this._values;\r\n    }","code-length":148,"reference":"Returns the values of each of the pickers slots\n","result":"Get the values of the slots.","score":[0.2785,0.431]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addTranslation(translations, locale) {\r\n  if (typeof translations !== 'object') {\r\n    return;\r\n  }\r\n  if (locale === undefined) {\r\n    for (var key in translations) {\r\n      addTranslation(translations[key], key);\r\n    }\r\n    return;\r\n  }\r\n  if (I18n.translations[locale] === undefined) {\r\n    I18n.translations[locale] = translations;\r\n  } else {\r\n    Object.assign(I18n.translations[locale], translations);\r\n  }\r\n}","code-length":146,"reference":"addTranslation - add translations\n\n","result":"Add translations to the language.","score":[0.2403,0.4573]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            pressedButtons = [],\r\n            ln, i, item, items;\r\n        me.callParent(arguments);\r\n        items = this.getItems();\r\n        ln = items.length;\r\n        for (i = 0; i < ln; i++) {\r\n            item = items.items[i];\r\n            if (item.getInitialConfig('pressed')) {\r\n                pressedButtons.push(items.items[i]);\r\n            }\r\n        }\r\n        me.updateFirstAndLastCls(items);\r\n        me.setPressedButtons(pressedButtons);\r\n    }","code-length":160,"reference":"We override `initItems` so we can check for the pressed config.","result":"Create a new instance of the class.","score":[0.0912,0.0472]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(newButtons, oldButtons) {\r\n        var me    = this,\r\n            items = me.getItems(),\r\n            pressedCls = me.getPressedCls(),\r\n            events = [],\r\n            item, button, ln, i, e;\r\n        ln = items.length;\r\n        if (oldButtons && oldButtons.length) {\r\n            for (i = 0; i < ln; i++) {\r\n                item = items.items[i];\r\n                if (oldButtons.indexOf(item) != -1 && newButtons.indexOf(item) == -1) {\r\n                    item.removeCls([pressedCls, item.getPressedCls()]);\r\n                    events.push({\r\n                        item: item,\r\n                        toggle: false\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        ln = newButtons.length;\r\n        for (i = 0; i < ln; i++) {\r\n            button = newButtons[i];\r\n            if (!oldButtons || oldButtons.indexOf(button) == -1) {\r\n                button.addCls(pressedCls);\r\n                events.push({\r\n                    item: button,\r\n                    toggle: true\r\n                });\r\n            }\r\n        }\r\n        ln = events.length;\r\n        if (ln && oldButtons !== undefined) {\r\n            Ext.defer(function() {\r\n                for (i = 0; i < ln; i++) {\r\n                    e = events[i];\r\n                    me.fireEvent('toggle', me, e.item, e.toggle);\r\n                }\r\n            }, 50);\r\n        }\r\n    }","code-length":395,"reference":"Updates the pressed buttons.\n","result":"Toggle the items of the list.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            record;\r\n        if (me.getAutoSelect()) {\r\n            var store = me.getStore();\r\n            record = (me.originalValue) ? me.originalValue : store.getAt(0);\r\n        } else {\r\n            var usePicker = me.getUsePicker(),\r\n                picker = usePicker ? me.picker : me.listPanel;\r\n            if (picker) {\r\n                picker = picker.child(usePicker ? 'pickerslot' : 'dataview');\r\n                picker.deselectAll();\r\n            }\r\n            record = null;\r\n        }\r\n        me.setValue(record);\r\n        return me;\r\n    }","code-length":182,"reference":"Resets the Select field to the value of the first record in the store.\n","result":"Create a new instance of the class.","score":[0.084,0.0752]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RPC (contact, options) {\r\n  assert(this instanceof RPC, 'Invalid instance supplied')\r\n  assert(contact instanceof Contact, 'Invalid contact was supplied')\r\n  events.EventEmitter.call(this)\r\n  options = options || {}\r\n  if (options.replyto) {\r\n    assert(options.replyto instanceof Contact, 'Invalid contact was supplied')\r\n  }\r\n  this._hooks = {\r\n    before: {},\r\n    after: {}\r\n  }\r\n  this._pendingCalls = {}\r\n  this._contact = options.replyto || contact\r\n  this._log = options && options.logger\r\n  this.readyState = 0\r\n  this.open()\r\n}","code-length":176,"reference":"Represents an RPC interface\n","result":"Create a new instance of RPC.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Channel (id, exchange) {\r\n  var self = this;\r\n  events.EventEmitter.call(this);\r\n  this.id = id;\r\n  this.exchange = exchange;\r\n  this.exchange.on(this.id, function (message) {\r\n    self.emit('message', message);\r\n  });\r\n  this.setMaxListeners(0);\r\n}","code-length":102,"reference":"An Channel is where messages are sent to and receive\n\n","result":"Create a channel.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction continuable(func, context) {\r\n      ensureFunc(func, 'function');\r\n      if (context) {\r\n        func = bind(func, context);\r\n      }\r\n      steps.push(func);\r\n      return continuable;\r\n    }","code-length":72,"reference":"Subsequent invocation of the function returned from the `jam` function simply adds the given function to the chain.","result":"Create a new function to return a new function.","score":[0.0634,0.1494]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractDescription (d) {\r\n      if (!d) return;\r\n      if (d === \"ERROR: No README data found!\") return;\r\n      d = d.trim().split('\\n')\r\n      for (var s = 0; d[s] && d[s].trim().match(\/^(#|$)\/); s ++);\r\n      var l = d.length\r\n      for (var e = s + 1; e < l && d[e].trim(); e ++);\r\n      return d.slice(s, e).join(' ').trim()\r\n    }","code-length":145,"reference":"Extracts description from contents of a readme file in markdown format","result":"Extract the description of a file.","score":[0.1313,0.3006]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addComment(type, value, start, end, loc) {\r\n            var comment;\r\n            assert(typeof start === 'number', 'Comment must have valid position');\r\n                if (state.lastCommentStart >= start) {\r\n                return;\r\n            }\r\n            state.lastCommentStart = start;\r\n                comment = {\r\n                type: type,\r\n                value: value\r\n            };\r\n            if (extra.range) {\r\n                comment.range = [start, end];\r\n            }\r\n            if (extra.loc) {\r\n                comment.loc = loc;\r\n            }\r\n            extra.comments.push(comment);\r\n            if (extra.attachComment) {\r\n                extra.leadingComments.push(comment);\r\n                extra.trailingComments.push(comment);\r\n            }\r\n        }","code-length":209,"reference":"7.4 Comments","result":"Add a comment to the AST.","score":[0,0.2083]}
{"code":"\/*is used to<extra_id_0>\r\nfunction expectKeyword(keyword, contextual) {\r\n            var token = lex();\r\n            if (token.type !== (contextual ? Token.Identifier : Token.Keyword) ||\r\n                    token.value !== keyword) {\r\n                throwUnexpected(token);\r\n            }\r\n        }","code-length":74,"reference":"Expect the next token to match the specified keyword. If not, an exception will be thrown.","result":"Expect keyword syntax.","score":[0.0054,0.034]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseArrayInitialiser() {\r\n            var elements = [], blocks = [], filter = null, tmp, possiblecomprehension = true,\r\n                marker = markerCreate();\r\n                expect('[');\r\n            while (!match(']')) {\r\n                if (lookahead.value === 'for' &&\r\n                        lookahead.type === Token.Keyword) {\r\n                    if (!possiblecomprehension) {\r\n                        throwError({}, Messages.ComprehensionError);\r\n                    }\r\n                    matchKeyword('for');\r\n                    tmp = parseForStatement({ignoreBody: true});\r\n                    tmp.of = tmp.type === Syntax.ForOfStatement;\r\n                    tmp.type = Syntax.ComprehensionBlock;\r\n                    if (tmp.left.kind) {\r\n                        throwError({}, Messages.ComprehensionError);\r\n                    }\r\n                    blocks.push(tmp);\r\n                } else if (lookahead.value === 'if' &&\r\n                               lookahead.type === Token.Keyword) {\r\n                    if (!possiblecomprehension) {\r\n                        throwError({}, Messages.ComprehensionError);\r\n                    }\r\n                    expectKeyword('if');\r\n                    expect('(');\r\n                    filter = parseExpression();\r\n                    expect(')');\r\n                } else if (lookahead.value === ',' &&\r\n                               lookahead.type === Token.Punctuator) {\r\n                    possiblecomprehension = false;\r\n                    lex();\r\n                    elements.push(null);\r\n                } else {\r\n                    tmp = parseSpreadOrAssignmentExpression();\r\n                    elements.push(tmp);\r\n                    if (tmp && tmp.type === Syntax.SpreadElement) {\r\n                        if (!match(']')) {\r\n                            throwError({}, Messages.ElementAfterSpreadElement);\r\n                        }\r\n                    } else if (!(match(']') || matchKeyword('for') || matchKeyword('if'))) {\r\n                        expect(',');\r\n                        possiblecomprehension = false;\r\n                    }\r\n                }\r\n            }\r\n                expect(']');\r\n                if (filter && !blocks.length) {\r\n                throwError({}, Messages.ComprehensionRequiresBlock);\r\n            }\r\n                if (blocks.length) {\r\n                if (elements.length !== 1) {\r\n                    throwError({}, Messages.ComprehensionError);\r\n                }\r\n                return markerApply(marker, delegate.createComprehensionExpression(filter, blocks, elements[0]));\r\n            }\r\n            return markerApply(marker, delegate.createArrayExpression(elements));\r\n        }","code-length":615,"reference":"11.1.4 Array Initialiser","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parsePropertyFunction(options) {\r\n            var previousStrict, previousYieldAllowed, previousAwaitAllowed,\r\n                params, defaults, body, marker = markerCreate();\r\n                previousStrict = strict;\r\n            previousYieldAllowed = state.yieldAllowed;\r\n            state.yieldAllowed = options.generator;\r\n            previousAwaitAllowed = state.awaitAllowed;\r\n            state.awaitAllowed = options.async;\r\n            params = options.params || [];\r\n            defaults = options.defaults || [];\r\n                body = parseConciseBody();\r\n            if (options.name && strict && isRestrictedWord(params[0].name)) {\r\n                throwErrorTolerant(options.name, Messages.StrictParamName);\r\n            }\r\n            strict = previousStrict;\r\n            state.yieldAllowed = previousYieldAllowed;\r\n            state.awaitAllowed = previousAwaitAllowed;\r\n                return markerApply(marker, delegate.createFunctionExpression(\r\n                null,\r\n                params,\r\n                defaults,\r\n                body,\r\n                options.rest || null,\r\n                options.generator,\r\n                body.type !== Syntax.BlockStatement,\r\n                options.async,\r\n                options.returnType,\r\n                options.typeParameters\r\n            ));\r\n        }","code-length":305,"reference":"11.1.5 Object Initialiser","result":"Parse a function property.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parsePostfixExpression() {\r\n            var marker = markerCreate(),\r\n                expr = parseLeftHandSideExpressionAllowCall(),\r\n                token;\r\n                if (lookahead.type !== Token.Punctuator) {\r\n                return expr;\r\n            }\r\n                if ((match('++') || match('--')) && !peekLineTerminator()) {\r\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\r\n                    throwErrorTolerant({}, Messages.StrictLHSPostfix);\r\n                }\r\n                    if (!isLeftHandSide(expr)) {\r\n                    throwError({}, Messages.InvalidLHSInAssignment);\r\n                }\r\n                    token = lex();\r\n                expr = markerApply(marker, delegate.createPostfixExpression(token.value, expr));\r\n            }\r\n                return expr;\r\n        }","code-length":211,"reference":"11.3 Postfix Expressions","result":"Parse a function call .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseUnaryExpression() {\r\n            var marker, token, expr;\r\n                if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {\r\n                return parsePostfixExpression();\r\n            }\r\n                if (match('++') || match('--')) {\r\n                marker = markerCreate();\r\n                token = lex();\r\n                expr = parseUnaryExpression();\r\n                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {\r\n                    throwErrorTolerant({}, Messages.StrictLHSPrefix);\r\n                }\r\n                    if (!isLeftHandSide(expr)) {\r\n                    throwError({}, Messages.InvalidLHSInAssignment);\r\n                }\r\n                    return markerApply(marker, delegate.createUnaryExpression(token.value, expr));\r\n            }\r\n                if (match('+') || match('-') || match('~') || match('!')) {\r\n                marker = markerCreate();\r\n                token = lex();\r\n                expr = parseUnaryExpression();\r\n                return markerApply(marker, delegate.createUnaryExpression(token.value, expr));\r\n            }\r\n                if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {\r\n                marker = markerCreate();\r\n                token = lex();\r\n                expr = parseUnaryExpression();\r\n                expr = markerApply(marker, delegate.createUnaryExpression(token.value, expr));\r\n                if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\r\n                    throwErrorTolerant({}, Messages.StrictDelete);\r\n                }\r\n                return expr;\r\n            }\r\n                return parsePostfixExpression();\r\n        }","code-length":410,"reference":"11.4 Unary Operators","result":"Parse unary expressions in strict mode.","score":[0,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reinterpretAsAssignmentBindingPattern(expr) {\r\n            var i, len, property, element;\r\n                if (expr.type === Syntax.ObjectExpression) {\r\n                expr.type = Syntax.ObjectPattern;\r\n                for (i = 0, len = expr.properties.length; i < len; i += 1) {\r\n                    property = expr.properties[i];\r\n                    if (property.type === Syntax.SpreadProperty) {\r\n                        if (i < len - 1) {\r\n                            throwError({}, Messages.PropertyAfterSpreadProperty);\r\n                        }\r\n                        reinterpretAsAssignmentBindingPattern(property.argument);\r\n                    } else {\r\n                        if (property.kind !== 'init') {\r\n                            throwError({}, Messages.InvalidLHSInAssignment);\r\n                        }\r\n                        reinterpretAsAssignmentBindingPattern(property.value);\r\n                    }\r\n                }\r\n            } else if (expr.type === Syntax.ArrayExpression) {\r\n                expr.type = Syntax.ArrayPattern;\r\n                for (i = 0, len = expr.elements.length; i < len; i += 1) {\r\n                    element = expr.elements[i];\r\n                                        if (element) {\r\n                        reinterpretAsAssignmentBindingPattern(element);\r\n                    }\r\n                }\r\n            } else if (expr.type === Syntax.Identifier) {\r\n                if (isRestrictedWord(expr.name)) {\r\n                    throwError({}, Messages.InvalidLHSInAssignment);\r\n                }\r\n            } else if (expr.type === Syntax.SpreadElement) {\r\n                reinterpretAsAssignmentBindingPattern(expr.argument);\r\n                if (expr.argument.type === Syntax.ObjectPattern) {\r\n                    throwError({}, Messages.ObjectPatternAsSpread);\r\n                }\r\n            } else {\r\n                                if (expr.type !== Syntax.MemberExpression && expr.type !== Syntax.CallExpression && expr.type !== Syntax.NewExpression) {\r\n                    throwError({}, Messages.InvalidLHSInAssignment);\r\n                }\r\n            }\r\n        }","code-length":485,"reference":"11.13 Assignment Operators 12.14.5 AssignmentPattern","result":"Reinterpret the given binding pattern as an assignment.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseExpressionStatement() {\r\n            var marker = markerCreate(), expr = parseExpression();\r\n            consumeSemicolon();\r\n            return markerApply(marker, delegate.createExpressionStatement(expr));\r\n        }","code-length":55,"reference":"12.4 Expression Statement","result":"Create a statement to parse expression statements.","score":[0,0.2941]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseReturnStatement() {\r\n            var argument = null, marker = markerCreate();\r\n                expectKeyword('return');\r\n                if (!state.inFunctionBody) {\r\n                throwErrorTolerant({}, Messages.IllegalReturn);\r\n            }\r\n                if (source.charCodeAt(index) === 32) {\r\n                if (isIdentifierStart(source.charCodeAt(index + 1))) {\r\n                    argument = parseExpression();\r\n                    consumeSemicolon();\r\n                    return markerApply(marker, delegate.createReturnStatement(argument));\r\n                }\r\n            }\r\n                if (peekLineTerminator()) {\r\n                return markerApply(marker, delegate.createReturnStatement(null));\r\n            }\r\n                if (!match(';')) {\r\n                if (!match('}') && lookahead.type !== Token.EOF) {\r\n                    argument = parseExpression();\r\n                }\r\n            }\r\n                consumeSemicolon();\r\n                return markerApply(marker, delegate.createReturnStatement(argument));\r\n        }","code-length":246,"reference":"12.9 The return statement","result":"Parse the return statement in a function body.","score":[0.1964,0.6692]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extend(object, properties) {\r\n            var entry, result = {};\r\n                for (entry in object) {\r\n                                if (object.hasOwnProperty(entry)) {\r\n                    result[entry] = object[entry];\r\n                }\r\n            }\r\n                for (entry in properties) {\r\n                                if (properties.hasOwnProperty(entry)) {\r\n                    result[entry] = properties[entry];\r\n                }\r\n            }\r\n                return result;\r\n        }","code-length":123,"reference":"This is used to modify the delegate.","result":"Extend objects.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reflowText (text, width, gfm) {\r\n      var splitRe = gfm ? HARD_RETURN_GFM_RE : HARD_RETURN_RE,\r\n          sections = text.split(splitRe),\r\n          reflowed = [];\r\n          sections.forEach(function (section) {\r\n        var words = section.split(\/[ \\t\\n]+\/),\r\n            column = 0,\r\n            nextText = '';\r\n            words.forEach(function (word) {\r\n          var addOne = column != 0;\r\n          if ((column + textLength(word) + addOne) > width) {\r\n            nextText += '\\n';\r\n            column = 0;\r\n          } else if (addOne) {\r\n            nextText += \" \";\r\n            column += 1;\r\n          }\r\n          nextText += word;\r\n          column += textLength(word);\r\n        });\r\n        reflowed.push(nextText);\r\n      });\r\n      return reflowed.join('\\n');\r\n    }","code-length":258,"reference":"Munge \\n's and spaces in \"text\" so that the number of characters between \\n's is less than or equal to \"width\".","result":"Reflow text.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isAbsolute(fp) {\r\n      if (typeof fp !== 'string') {\r\n        throw new TypeError('isAbsolute expects a string.');\r\n      }\r\n      if (!isWindows() && isAbsolute.posix(fp)) {\r\n        return true;\r\n      }\r\n      return isAbsolute.win32(fp);\r\n    }","code-length":86,"reference":"Returns true if a file path is absolute.\n\n","result":"Check if the path is absolute.","score":[0.3062,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction repeat(str, num) {\r\n      if (typeof str !== 'string') {\r\n        throw new TypeError('repeat-string expects a string.');\r\n      }\r\n          if (num === 1) return str;\r\n      if (num === 2) return str + str;\r\n          var max = str.length * num;\r\n      if (cache !== str || typeof cache === 'undefined') {\r\n        cache = str;\r\n        res = '';\r\n      }\r\n          while (max > res.length && num > 0) {\r\n        if (num & 1) {\r\n          res += str;\r\n        }\r\n            num >>= 1;\r\n        if (!num) break;\r\n        str += str;\r\n      }\r\n          return res.substr(0, max);\r\n    }","code-length":199,"reference":"Repeat the given `string` the specified `number`\nof times.\n\n**Example:**\n\n```js\nvar repeat =  require('repeat-string');\nrepeat('A', 5);\n\/\/=> AAAAA\n```\n\n","result":"Create a string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction uniqSet(arr) {\r\n    \tvar seen = new Set();\r\n    \treturn arr.filter(function (el) {\r\n    \t\tif (!seen.has(el)) {\r\n    \t\t\tseen.add(el);\r\n    \t\t\treturn true;\r\n    \t\t}\r\n    \t});\r\n    }","code-length":88,"reference":"2 - a simple Set type is defined","result":"Filter unique set.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction error(msg, _continue) {\r\n      if (state.error === null)\r\n        state.error = '';\r\n      state.error += state.currentCmd + ': ' + msg + '\\n';\r\n          if (msg.length > 0)\r\n        log(state.error);\r\n          if (config.fatal)\r\n        process.exit(1);\r\n          if (!_continue)\r\n        throw '';\r\n    }","code-length":112,"reference":"Shows error message. Throws unless _continue or config.fatal are true","result":"Catch errors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrap(cmd, fn, options) {\r\n      return function() {\r\n        var retValue = null;\r\n            state.currentCmd = cmd;\r\n        state.error = null;\r\n            try {\r\n          var args = [].slice.call(arguments, 0);\r\n              if (options && options.notUnix) {\r\n            retValue = fn.apply(this, args);\r\n          } else {\r\n            if (args.length === 0 || typeof args[0] !== 'string' || args[0][0] !== '-')\r\n              args.unshift('');\r\n            retValue = fn.apply(this, args);\r\n          }\r\n        } catch (e) {\r\n          if (!state.error) {\r\n            console.log('shell.js: internal error');\r\n            console.log(e.stack || e);\r\n            process.exit(1);\r\n          }\r\n          if (config.fatal)\r\n            throw e;\r\n        }\r\n            state.currentCmd = 'shell.js';\r\n        return retValue;\r\n      };\r\n    }","code-length":267,"reference":"Common wrapper for all Unix-like commands","result":"Wrap commands in a shell.","score":[0.1967,0.1695]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeableDir(dir) {\r\n      if (!dir || !fs.existsSync(dir))\r\n        return false;\r\n          if (!fs.statSync(dir).isDirectory())\r\n        return false;\r\n          var testFile = dir+'\/'+common.randomFileName();\r\n      try {\r\n        fs.writeFileSync(testFile, ' ');\r\n        common.unlinkSync(testFile);\r\n        return dir;\r\n      } catch (e) {\r\n        return false;\r\n      }\r\n    }","code-length":134,"reference":"Returns false if 'dir' is not a writeable directory, 'dir' otherwise","result":"Create a directory .","score":[0.0555,0.0485]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mkdirSyncRecursive(dir) {\r\n      var baseDir = path.dirname(dir);\r\n          if (fs.existsSync(baseDir)) {\r\n        fs.mkdirSync(dir, parseInt('0777', 8));\r\n        return;\r\n      }\r\n          mkdirSyncRecursive(baseDir);\r\n          fs.mkdirSync(dir, parseInt('0777', 8));\r\n    }","code-length":100,"reference":"Recursively creates 'dir'","result":"Create a directory.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitPath(p) {\r\n      for (i=1;i<2;i++) {}\r\n          if (!p)\r\n        return [];\r\n          if (common.platform === 'win')\r\n        return p.split(';');\r\n      else\r\n        return p.split(':');\r\n    }","code-length":85,"reference":"Cross-platform method for splitting environment PATH variables","result":"Split paths.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction updateStdout() {\r\n        if (options.silent || !fs.existsSync(stdoutFile))\r\n          return;\r\n            var stdoutContent = fs.readFileSync(stdoutFile, 'utf8');\r\n        if (stdoutContent.length <= previousStdoutContent.length)\r\n          return;\r\n            process.stdout.write(stdoutContent.substr(previousStdoutContent.length));\r\n        previousStdoutContent = stdoutContent;\r\n      }","code-length":112,"reference":"Echoes stdout changes from running process, if not silent","result":"Update the stdout.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatArgs() {\r\n      var args = arguments;\r\n      var useColors = this.useColors;\r\n      var name = this.namespace;\r\n          if (useColors) {\r\n        var c = this.color;\r\n            args[0] = '  \\u001b[3' + c + ';1m' + name + ' '\r\n          + '\\u001b[0m'\r\n          + args[0] + '\\u001b[3' + c + 'm'\r\n          + ' +' + exports.humanize(this.diff) + '\\u001b[0m';\r\n      } else {\r\n        args[0] = new Date().toUTCString()\r\n          + ' ' + name + ' ' + args[0];\r\n      }\r\n      return args;\r\n    }","code-length":203,"reference":"Adds ANSI color escape codes if enabled.\n\n","result":"Format the arguments to the console.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GNTP(type, opts) {\r\n        opts = opts || {};\r\n        this.type = type;\r\n        this.host = opts.host || 'localhost';\r\n        this.port = opts.port || 23053;\r\n        this.request = 'GNTP\/1.0 ' + type + ' NONE' + nl;\r\n        this.resources = [];\r\n        this.attempts = 0;\r\n        this.maxAttempts = 5;\r\n    }","code-length":123,"reference":"Create a new GNTP request of the given `type`.\n\n","result":"Create a GNTP instance.","score":[0.1433,0.3007]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Growly() {\r\n        this.appname = 'Growly';\r\n        this.notifications = undefined;\r\n        this.labels = undefined;\r\n        this.count = 0;\r\n        this.registered = false;\r\n        this.host = undefined;\r\n        this.port = undefined;\r\n    }","code-length":85,"reference":"Interface for registering Growl applications and sending Growl notifications.\n\n","result":"Create a Growly instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Command(name) {\r\n      this.commands = [];\r\n      this.options = [];\r\n      this._execs = [];\r\n      this._allowUnknownOption = false;\r\n      this._args = [];\r\n      this._name = name;\r\n    }","code-length":76,"reference":"Initialize a new `Command`.\n\n","result":"Create a command.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction baseDifference(array, values) {\r\n      var length = array ? array.length : 0,\r\n          result = [];\r\n          if (!length) {\r\n        return result;\r\n      }\r\n      var index = -1,\r\n          indexOf = baseIndexOf,\r\n          isCommon = true,\r\n          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\r\n          valuesLength = values.length;\r\n          if (cache) {\r\n        indexOf = cacheIndexOf;\r\n        isCommon = false;\r\n        values = cache;\r\n      }\r\n      outer:\r\n      while (++index < length) {\r\n        var value = array[index];\r\n            if (isCommon && value === value) {\r\n          var valuesIndex = valuesLength;\r\n          while (valuesIndex--) {\r\n            if (values[valuesIndex] === value) {\r\n              continue outer;\r\n            }\r\n          }\r\n          result.push(value);\r\n        }\r\n        else if (indexOf(values, value, 0) < 0) {\r\n          result.push(value);\r\n        }\r\n      }\r\n      return result;\r\n    }","code-length":301,"reference":"The base implementation of `_.difference` which accepts a single array\nof values to exclude.\n\n","result":"Create a base difference function .","score":[0.0605,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction peek(p) {\r\n        var i = p || 0, j = 0, t;\r\n            while (j <= i) {\r\n          t = lookahead[j];\r\n          if (!t) {\r\n            t = lookahead[j] = lex.token();\r\n          }\r\n          j += 1;\r\n        }\r\n            if (!t && state.tokens.next.id === \"(end)\") {\r\n          return state.tokens.next;\r\n        }\r\n            return t;\r\n      }","code-length":131,"reference":"We need a peek function. If it has an argument, it peeks that much farther ahead. It is used to distinguish for ( var i in ... from for ( var i = ...","result":"Create a new function to create a new token.","score":[0.009,0.0811]}
{"code":"\/*is used to<extra_id_0>\r\nfunction identifier(fnparam, prop) {\r\n        var i = optionalidentifier(fnparam, prop, false);\r\n        if (i) {\r\n          return i;\r\n        }\r\n            if (state.tokens.next.value === \"...\") {\r\n          if (!state.option.esnext) {\r\n            warning(\"W119\", state.tokens.next, \"spread\/rest operator\");\r\n          }\r\n          advance();\r\n              if (checkPunctuators(state.tokens.next, [\"...\"])) {\r\n            warning(\"E024\", state.tokens.next, \"...\");\r\n            while (checkPunctuators(state.tokens.next, [\"...\"])) {\r\n              advance();\r\n            }\r\n          }\r\n              if (!state.tokens.next.identifier) {\r\n            warning(\"E024\", state.tokens.curr, \"...\");\r\n            return;\r\n          }\r\n              return identifier(fnparam, prop);\r\n        } else {\r\n          error(\"E030\", state.tokens.next, state.tokens.next.value);\r\n              if (state.tokens.next.id !== \";\") {\r\n            advance();\r\n          }\r\n        }\r\n      }","code-length":296,"reference":"fnparam means that this identifier is being defined as a function argument prop means that this identifier is that of an object property","result":"Identify a function identifier.","score":[0.0039,0.1211]}
{"code":"\/*is used to<extra_id_0>\r\nfunction destructuringAssignOrJsonValue() {\r\n            var block = lookupBlockType();\r\n        if (block.notJson) {\r\n          if (!state.inESNext() && block.isDestAssign) {\r\n            warning(\"W104\", state.tokens.curr, \"destructuring assignment\");\r\n          }\r\n          statements();\r\n        } else {\r\n          state.option.laxbreak = true;\r\n          state.jsonMode = true;\r\n          jsonValue();\r\n        }\r\n      }","code-length":130,"reference":"Check whether this function has been reached for a destructuring assign with undeclared values","result":"Detect destructuring assignment.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction shouldGetter() {\r\n          if (this instanceof String || this instanceof Number || this instanceof Boolean ) {\r\n            return new Assertion(this.valueOf(), null, shouldGetter);\r\n          }\r\n          return new Assertion(this, null, shouldGetter);\r\n        }","code-length":71,"reference":"explicitly define this method as function as to have it's name to include as `ssfi`","result":"Return true.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isA(object, value) {\r\n      if (_isFunction2['default'](value)) return object instanceof value;\r\n          if (value === 'array') return Array.isArray(object);\r\n          return typeof object === value;\r\n    }","code-length":68,"reference":"Returns true if the given object is an instanceof valueor its typeof is the given value.","result":"Check if an object is an instance of a value.","score":[0.1394,0.1623]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(bin, opt) {\r\n        \t\tcmd = bin;\r\n        \t\tif ( opt.testing !== 'undefined') { opt.dryRun = opt.testing; }\r\n        \t\tif (typeof opt.testSuite === 'undefined')     { opt.testSuite = ''; }\r\n    \t\tif (typeof opt.verbose === 'undefined')       { opt.verbose = ''; }\r\n    \t\tif (typeof opt.dryRun === 'undefined')        { opt.dryRun = false; }\r\n    \t\tif (typeof opt.silent === 'undefined')        { opt.silent = false; }\r\n    \t\tif (typeof opt.testing === 'undefined')       { opt.testing = false; }\r\n    \t\tif (typeof opt.debug === 'undefined')         { opt.debug = false; }\r\n    \t\tif (typeof opt.testClass === 'undefined')     { opt.testClass = ''; }\r\n    \t\tif (typeof opt.clear === 'undefined')         { opt.clear = false; }\r\n    \t\tif (typeof opt.flags === 'undefined')         { opt.flags = ''; }\r\n    \t\tif (typeof opt.notify === 'undefined')        { opt.notify = false; }\r\n    \t\tif (typeof opt.noInteraction === 'undefined') { opt.noInteraction = true; }\r\n    \t\tif (typeof opt.noAnsi === 'undefined')        { opt.noAnsi = false; }\r\n    \t\tif (typeof opt.quiet === 'undefined')         { opt.quiet = false; }\r\n    \t\tif (typeof opt.formatter === 'undefined')     { opt.formatter = ''; }\r\n        \t\tcmd = opt.clear ? 'clear && ' + cmd : cmd;\r\n        \t\t\r\n    \t\tif (opt.testSuite)     { cmd += ' ' + opt.testSuite; }\r\n    \t\tif (opt.testClass)     { cmd += ' ' + opt.testClass; }\r\n    \t\tif (opt.verbose)       { cmd += ' -' + opt.verbose; }\r\n    \t\tif (opt.formatter)     { cmd += ' -f' + opt.formatter; }\r\n    \t\tif (opt.quiet)         { cmd += ' --quiet'; }\r\n    \t\tif (opt.noInteraction) { cmd += ' --no-interaction'; }\r\n        \t\tcmd += opt.noAnsi ? ' --no-ansi' : ' --ansi';\r\n        \t\tcmd += ' ' + opt.flags;\r\n        \t\tcmd.trim();\r\n        \t\treturn cmd;\r\n    \t}","code-length":623,"reference":"add all options to the default command","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction eatNargs (i, key, args) {\r\n        var toEat = checkAllAliases(key, opts.narg)\r\n            if (args.length - (i + 1) < toEat) error = Error(__('Not enough arguments following: %s', key))\r\n            for (var ii = i + 1; ii < (toEat + i + 1); ii++) {\r\n          setArg(key, args[ii])\r\n        }\r\n            return (i + toEat)\r\n      }","code-length":132,"reference":"how many arguments should we consume, based on the nargs option?","result":"Eat the nargs .","score":[0.0785,0.182]}
{"code":"\/*is used to<extra_id_0>\r\nfunction setConfig (argv) {\r\n        var configLookup = {}\r\n            applyDefaultsAndAliases(configLookup, aliases, defaults)\r\n            Object.keys(flags.configs).forEach(function (configKey) {\r\n          var configPath = argv[configKey] || configLookup[configKey]\r\n          if (configPath) {\r\n            try {\r\n              var config = require(path.resolve(process.cwd(), configPath))\r\n                  Object.keys(config).forEach(function (key) {\r\n                if (argv[key] === undefined || (flags.defaulted[key])) {\r\n                  delete argv[key]\r\n                  setArg(key, config[key])\r\n                }\r\n              })\r\n            } catch (ex) {\r\n              if (argv[configKey]) error = Error(__('Invalid JSON config file: %s', configPath))\r\n            }\r\n          }\r\n        })\r\n      }","code-length":227,"reference":"set args from config.json file, this should be applied last so that defaults can be applied.","result":"Set the config file.","score":[0,0.0338]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extendAliases (obj) {\r\n        Object.keys(obj || {}).forEach(function (key) {\r\n          aliases[key] = [].concat(opts.alias[key] || [])\r\n          aliases[key].concat(key).forEach(function (x) {\r\n            if (\/-\/.test(x)) {\r\n              var c = camelCase(x)\r\n              aliases[key].push(c)\r\n              newAliases[c] = true\r\n            }\r\n          })\r\n          aliases[key].forEach(function (x) {\r\n            aliases[x] = [key].concat(aliases[key].filter(function (y) {\r\n              return x !== y\r\n            }))\r\n          })\r\n        })\r\n      }","code-length":193,"reference":"extend the aliases list with inferred aliases.","result":"Return obj.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkAllAliases (key, flag) {\r\n        var isSet = false\r\n        var toCheck = [].concat(aliases[key] || [], key)\r\n            toCheck.forEach(function (key) {\r\n          if (flag[key]) isSet = flag[key]\r\n        })\r\n            return isSet\r\n      }","code-length":89,"reference":"check if a flag is set for any of a key's aliases.","result":"Check all aliases.","score":[0.0203,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction guessType (key, flags) {\r\n        var type = 'boolean'\r\n            if (flags.strings && flags.strings[key]) type = 'string'\r\n        else if (flags.arrays && flags.arrays[key]) type = 'array'\r\n            return type\r\n      }","code-length":77,"reference":"given a flag, enforce a default type.","result":"Detect the type of a key.","score":[0.1634,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction maxWidth (table) {\r\n        var width = 0\r\n            if (!Array.isArray(table)) {\r\n          table = Object.keys(table).map(function (key) {\r\n            return [table[key]]\r\n          })\r\n        }\r\n            table.forEach(function (v) {\r\n          width = Math.max(v[0].length, width)\r\n        })\r\n            if (wrap) width = Math.min(width, parseInt(wrap * 0.5, 10))\r\n            return width\r\n      }","code-length":140,"reference":"return the maximum width of a string in the left-hand column of a table.","result":"Calculate the max width of a table.","score":[0.1654,0.3353]}
{"code":"\/*is used to<extra_id_0>\r\nfunction normalizeAliases () {\r\n        var demanded = yargs.getDemanded()\r\n        var options = yargs.getOptions()\r\n            ;(Object.keys(options.alias) || []).forEach(function (key) {\r\n          options.alias[key].forEach(function (alias) {\r\n            if (descriptions[alias]) self.describe(key, descriptions[alias])\r\n            if (demanded[alias]) yargs.demand(key, demanded[alias].msg)\r\n                if (~options.boolean.indexOf(alias)) yargs.boolean(key)\r\n            if (~options.count.indexOf(alias)) yargs.count(key)\r\n            if (~options.string.indexOf(alias)) yargs.string(key)\r\n            if (~options.normalize.indexOf(alias)) yargs.normalize(key)\r\n            if (~options.array.indexOf(alias)) yargs.array(key)\r\n          })\r\n        })\r\n      }","code-length":245,"reference":"make sure any options set for aliases, are copied to the keys being aliased.","result":"Var descriptions .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defaultString (value, defaultDescription) {\r\n        var string = '[' + __('default:') + ' '\r\n            if (value === undefined && !defaultDescription) return null\r\n            if (defaultDescription) {\r\n          string += defaultDescription\r\n        } else {\r\n          switch (typeof value) {\r\n            case 'string':\r\n              string += JSON.stringify(value)\r\n              break\r\n            case 'object':\r\n              string += JSON.stringify(value)\r\n              break\r\n            default:\r\n              string += value\r\n          }\r\n        }\r\n            return string + ']'\r\n      }","code-length":155,"reference":"format the default-value-string displayed in the right-hand column.","result":"Create a default string for the default value.","score":[0.1389,0.0625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction find_attr_value(attrForms, attrName) {\r\n  var attrVal;\r\n  var attrPos = -1;\r\n  if(attrForms && Array.isArray(attrForms)) {\r\n    attrKey = attrForms.find(function (form, i) {\r\n      attrPos = i;\r\n      return (i % 2 === 1) && form.value === attrName;\r\n    })\r\n    if(attrKey && attrPos+1 < attrForms.length) {\r\n      attrVal = attrForms[attrPos+1];\r\n    }\r\n  }\r\n  return attrVal;\r\n}","code-length":156,"reference":"find the value form with the given name in the attribute forms, otherwise undefined","result":"Find the attribute value.","score":[0.0371,0.1966]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n            options = options || {}\r\n            if (\r\n              this.passports\r\n              && this.passports.every(t => t instanceof app.orm['Passport'])\r\n              && options.reload !== true\r\n            ) {\r\n              return Promise.resolve(this)\r\n            }\r\n            else {\r\n              return this.getPassports({transaction: options.transaction || null})\r\n                .then(passports => {\r\n                  passports = passports || []\r\n                  this.passports = passports\r\n                  this.setDataValue('passports', passports)\r\n                  this.set('passports', passports)\r\n                  return this\r\n                })\r\n            }\r\n          }","code-length":182,"reference":"Get's user's passports if not on DAO\n","result":"Create a new function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction write(path, str) {\r\n  fs.writeFileSync(path, str);\r\n  console.log(terminal.cyan(pad('create : ')) + path);\r\n}","code-length":53,"reference":"echo str > path.\n\n","result":"Create a file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mkdir(path, silent) {\r\n  if(!exists(path)) {\r\n    fs.mkdirSync(path, 0755);\r\n    if(!silent) console.log(terminal.cyan(pad('create : ')) + path);\r\n  }\r\n}","code-length":72,"reference":"mkdir -p\n\n","result":"Create a directory.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isEmptyDirectory(path) {\r\n  var files;\r\n  try {\r\n    files = fs.readdirSync(path);\r\n    if(files.length > 0) {\r\n      return false;\r\n    }\r\n  } catch(err) {\r\n    if(err.code) {\r\n      terminal.abort('Error: ', err);\r\n    } else {\r\n      throw e;\r\n    }\r\n  }\r\n  return true;\r\n}","code-length":122,"reference":"Tests if `path` is empty.\n\n","result":"Check if a directory is empty.","score":[0.3021,0.5011]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config,callback,scope) {\r\n\t\t\r\n\t\tExt.data.utilities.check('DatabaseDefinition', 'constructor', 'config', config, ['key','database_name','generation','system_name','replica_number']);\r\n\t\t\r\n\t\tthis.set(config);\r\n\t\tconfig.config_id= 'definition';\r\n\t\tExt.data.DatabaseDefinition.superclass.constructor.call(this, config);\r\n\t}","code-length":115,"reference":"of the storage scheme JCM include the epoch of the clock here?","result":"Create a new database definition.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var actions = this.getActions(),\r\n            previousAction = actions[actions.length - 2];\r\n        if (previousAction) {\r\n            actions.pop();\r\n            previousAction.getController().getApplication().redirectTo(previousAction.getUrl());\r\n        }\r\n        else {\r\n            actions[actions.length - 1].getController().getApplication().redirectTo('');\r\n        }\r\n    }","code-length":112,"reference":"Navigate to the previous active action. This changes the page url.","result":"Create a new controller.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction GrelRequest(grel) {\r\n    var authString;\r\n        if (grel.token) {\r\n        authString = grel.token + ':';\r\n    } else {\r\n        authString = grel.user + ':' + grel.password;\r\n    }\r\n        this.headers = {\r\n        'Authorization': 'Basic ' + new Buffer(authString).toString('base64'),\r\n        'Accept': 'application\/vnd.github.manifold-preview',\r\n        'User-Agent': 'Grel'\r\n    };\r\n    this.grel = grel;\r\n    this.content = null;\r\n}","code-length":164,"reference":"Creates a new instance of the GrelRequest class.\n\nThis class is used when sending HTTP requests to GitHub and it automatically handles\nuser authentication and a few other things.\n\n","result":"Create a request object.","score":[0.0006,0.0566]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleResponse(res, data, callback) {\r\n    var json = data && JSON.parse(data) || {};\r\n    if ((res.statusCode >= 200) && (res.statusCode <= 206)) {\r\n        switch (json.message) {\r\n            case 'Bad credentials':\r\n                callback.call(this, json);\r\n                break;\r\n            default:\r\n                callback.call(this, null, json);\r\n        }\r\n    } else {\r\n        callback.call(this, json);\r\n    }\r\n}","code-length":138,"reference":"Private method that handles HTTP responses we get from GitHub.\nThis method will always be executed in the context of a GrelRequest.\n\n","result":"Handle the response.","score":[0.0007,0.0498]}
{"code":"\/*is used to<extra_id_0>\r\nfunction splitHeader(content) {\r\n    const lines = content.split(\/\\r?\\n\/);\r\n    if (lines[0] !== '---') {\r\n        return {};\r\n    }\r\n    let i = 1;\r\n    for (; i < lines.length - 1; ++i) {\r\n        if (lines[i] === '---') {\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        header: lines.slice(1, i + 1).join('\\n'),\r\n        content: lines.slice(i + 1).join('\\n'),\r\n    };\r\n}","code-length":160,"reference":"split markdown header","result":"Split the header .","score":[0.3195,0.3226]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(x, y, animation) {\r\n        if (this.isDestroyed) {\r\n            return this;\r\n        }\r\n        if (typeof x != 'number' && arguments.length === 1) {\r\n            Ext.Logger.deprecate(\"Calling scrollTo() with an object argument is deprecated, \" +\r\n                \"please pass x and y arguments instead\", this);\r\n            y = x.y;\r\n            x = x.x;\r\n        }\r\n        var translatable = this.getTranslatable(),\r\n            position = this.position,\r\n            positionChanged = false,\r\n            translationX, translationY;\r\n        if (this.isAxisEnabled('x')) {\r\n            if (isNaN(x) || typeof x != 'number') {\r\n                x = position.x;\r\n            }\r\n            else {\r\n                if (position.x !== x) {\r\n                    position.x = x;\r\n                    positionChanged = true;\r\n                }\r\n            }\r\n            translationX = -x;\r\n        }\r\n        if (this.isAxisEnabled('y')) {\r\n            if (isNaN(y) || typeof y != 'number') {\r\n                y = position.y;\r\n            }\r\n            else {\r\n                if (position.y !== y) {\r\n                    position.y = y;\r\n                    positionChanged = true;\r\n                }\r\n            }\r\n            translationY = -y;\r\n        }\r\n        if (positionChanged) {\r\n            if (animation !== undefined && animation !== false) {\r\n                translatable.translateAnimated(translationX, translationY, animation);\r\n            }\r\n            else {\r\n                this.fireEvent('scroll', this, position.x, position.y);\r\n                translatable.translate(translationX, translationY);\r\n            }\r\n        }\r\n        return this;\r\n    }","code-length":455,"reference":"Scrolls to the given location.\n\n","result":"Scroll the element to the specified position.","score":[0.2284,0.4915]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(animation) {\r\n        var size    = this.getSize(),\r\n            cntSize = this.getContainerSize();\r\n        return this.scrollTo(size.x - cntSize.x, size.y - cntSize.y, animation);\r\n    }","code-length":71,"reference":"Scrolls to the end of the scrollable view.\n","result":"Animate the scroll.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(x, y, animation) {\r\n        var position = this.position;\r\n        x = (typeof x == 'number') ? x + position.x : null;\r\n        y = (typeof y == 'number') ? y + position.y : null;\r\n        return this.scrollTo(x, y, animation);\r\n    }","code-length":89,"reference":"Change the scroll offset by the given amount.\n","result":"Scroll to a specific position.","score":[0,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        var element;\r\n        this.extraConstraint = {};\r\n        this.initialConfig = config;\r\n        this.offset = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        this.listeners = {\r\n            dragstart: 'onDragStart',\r\n            drag     : 'onDrag',\r\n            dragend  : 'onDragEnd',\r\n            resize   : 'onElementResize',\r\n            touchstart : 'onPress',\r\n            touchend   : 'onRelease',\r\n            scope: this\r\n        };\r\n        if (config && config.element) {\r\n            element = config.element;\r\n            delete config.element;\r\n            this.setElement(element);\r\n        }\r\n        return this;\r\n    }","code-length":203,"reference":"Creates new Draggable.\n","result":"Create a new DragDrop instance.","score":[0.2403,0.3125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addActions(actions) {\r\n  if (typeof actions === 'string') {\r\n    add(actions);\r\n  } else if (Array.isArray(actions)) {\r\n    actions.forEach(addActions);\r\n  } else if (typeof actions === 'object') {\r\n    for (var type in actions) {\r\n      add(type, actions[type]);\r\n    }\r\n  }\r\n}","code-length":108,"reference":"addActions - add actions util\n\n","result":"Add actions.","score":[0,0.1064]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(pattern, count, sep) {\r\n        for (var buf = [], i = count; i--; ) {\r\n            buf.push(pattern);\r\n        }\r\n        return buf.join(sep || '');\r\n    }","code-length":65,"reference":"Returns a string with a specified number of repetitions a given string pattern.\nThe pattern be separated by a different string.\n\nvar s = Ext.String.repeat('---', 4); \/\/ '------------'\nvar t = Ext.String.repeat('--', 3, '\/'); \/\/ '--\/--\/--'\n\n","result":"Build the pattern.","score":[0.0,0.0306]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                var options = new FileUploadOptions();\r\n                options.fileKey = config.fileKey || \"file\";\r\n                options.fileName = this.path.substr(this.path.lastIndexOf('\/') + 1);\r\n                options.mimeType = config.mimeType || \"image\/jpeg\";\r\n                options.params = config.params || {};\r\n                options.headers = config.headers || {};\r\n                options.chunkMode = config.chunkMode || true;\r\n                var fileTransfer = new FileTransfer();\r\n                fileTransfer.upload(this.path, encodeURI(config.url), config.success, config.failure, options, config.trustAllHosts || false);\r\n                return fileTransfer;\r\n            }","code-length":182,"reference":"Send a file to a server\n\n","result":"Config .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                var fileTransfer = new FileTransfer();\r\n                fileTransfer.download(\r\n                    encodeURI(config.source),\r\n                    this.path,\r\n                    config.success,\r\n                    config.failure,\r\n                    config.trustAllHosts || false,\r\n                    config.options || {}\r\n                );\r\n                return fileTransfer;\r\n            }","code-length":98,"reference":"Downloads a file from the server saving it into the Local File System\n\n","result":"Return this.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(property, value, anyMatch, caseSensitive) {\r\n        if (property) {\r\n            if (Ext.isString(property)) {\r\n                this.addFilters({\r\n                    property     : property,\r\n                    value        : value,\r\n                    anyMatch     : anyMatch,\r\n                    caseSensitive: caseSensitive\r\n                });\r\n                return this.items;\r\n            }\r\n            else {\r\n                this.addFilters(property);\r\n                return this.items;\r\n            }\r\n        }\r\n        this.items = this.mixins.filterable.filter.call(this, this.all.slice());\r\n        this.updateAfterFilter();\r\n        if (this.sorted && this.getAutoSort()) {\r\n            this.sort();\r\n        }\r\n    }","code-length":196,"reference":"This method will sort a collection based on the currently configured sorters.\n","result":"Filter the items.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn, scope) {\r\n        var keys = this.keys,\r\n            items = this.items,\r\n            ln = keys.length, i;\r\n        for (i = 0; i < ln; i++) {\r\n            fn.call(scope || window, keys[i], items[i], i, ln);\r\n        }\r\n    }","code-length":93,"reference":"Executes the specified function once for every key in the collection, passing each key, and its associated item\nas the first two parameters.\n","result":"Iterate over the items.","score":[0.0028,0.0237]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn, scope) {\r\n        var me = this,\r\n            newCollection = new this.self(),\r\n            keys   = me.keys,\r\n            items  = me.all,\r\n            length = items.length,\r\n            i;\r\n        newCollection.getKey = me.getKey;\r\n        for (i = 0; i < length; i++) {\r\n            if (fn.call(scope || me, items[i], me.getKey(items[i]))) {\r\n                newCollection.add(keys[i], items[i]);\r\n            }\r\n        }\r\n        return newCollection;\r\n    }","code-length":162,"reference":"Filter by a function. Returns a _new_ collection that has been filtered. The passed function will be called with\neach object in the collection. If the function returns `true`, the value is included otherwise it is filtered.\n","result":"Filter the collection.","score":[0.0,0.0446]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(item) {\r\n        var index = this.items.indexOf(item);\r\n        if (index === -1) {\r\n            Ext.Array.remove(this.all, item);\r\n            if (typeof this.getKey == 'function') {\r\n                var key = this.getKey(item);\r\n                if (key !== undefined) {\r\n                    delete this.map[key];\r\n                }\r\n            }\r\n            return item;\r\n        }\r\n        return this.removeAt(this.items.indexOf(item));\r\n    }","code-length":141,"reference":"Remove an item from the collection.\n","result":"Remove an item from the collection.","score":[1.0,0.9977]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(items) {\r\n        if (items) {\r\n            var ln = items.length, i;\r\n            for (i = 0; i < ln; i++) {\r\n                this.remove(items[i]);\r\n            }\r\n        }\r\n        return this;\r\n    }","code-length":79,"reference":"Remove all items in the passed array from the collection.\n","result":"Remove items.","score":[0.0092,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(item) {\r\n        if (this.dirtyIndices) {\r\n            this.updateIndices();\r\n        }\r\n        var index = item ? this.indices[this.getKey(item)] : -1;\r\n        return (index === undefined) ? -1 : index;\r\n    }","code-length":79,"reference":"Returns index within the collection of the passed Object.\n","result":"Get the index of an item.","score":[0.1541,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(item) {\r\n        var key = this.getKey(item);\r\n        if (key) {\r\n            return this.containsKey(key);\r\n        } else {\r\n            return Ext.Array.contains(this.items, item);\r\n        }\r\n    }","code-length":76,"reference":"Returns `true` if the collection contains the passed Object as an item.\n","result":"Check if an item is contained in the collection.","score":[0.1149,0.1709]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(start, end) {\r\n        var me = this,\r\n            items = me.items,\r\n            range = [],\r\n            i;\r\n        if (items.length < 1) {\r\n            return range;\r\n        }\r\n        start = start || 0;\r\n        end = Math.min(typeof end == 'undefined' ? me.length - 1 : end, me.length - 1);\r\n        if (start <= end) {\r\n            for (i = start; i <= end; i++) {\r\n                range[range.length] = items[i];\r\n            }\r\n        } else {\r\n            for (i = start; i >= end; i--) {\r\n                range[range.length] = items[i];\r\n            }\r\n        }\r\n        return range;\r\n    }","code-length":205,"reference":"Returns a range of items in this collection\n","result":"Create a range object.","score":[0.1662,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn, scope, start) {\r\n        var me = this,\r\n            keys = me.keys,\r\n            items = me.items,\r\n            i = start || 0,\r\n            ln = items.length;\r\n        for (; i < ln; i++) {\r\n            if (fn.call(scope || me, items[i], keys[i])) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }","code-length":122,"reference":"Find the index of the first matching object in this collection by a function. If the function returns `true` it\nis considered a match.\n","result":"Filter items.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            copy = new this.self(),\r\n            keys = me.keys,\r\n            items = me.items,\r\n            i = 0,\r\n            ln = items.length;\r\n        for(; i < ln; i++) {\r\n            copy.add(keys[i], items[i]);\r\n        }\r\n        copy.getKey = me.getKey;\r\n        return copy;\r\n    }","code-length":119,"reference":"Creates a shallow copy of this collection\n","result":"Create a copy of the object.","score":[0.2558,0.5435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(newMonthText, oldMonthText) {\r\n        var innerItems = this.getInnerItems,\r\n            ln = innerItems.length,\r\n            item, i;\r\n        if (this.initialized) {\r\n            for (i = 0; i < ln; i++) {\r\n                item = innerItems[i];\r\n                if ((typeof item.title == \"string\" && item.title == oldMonthText) || (item.title.html == oldMonthText)) {\r\n                    item.setTitle(newMonthText);\r\n                }\r\n            }\r\n        }\r\n    }","code-length":149,"reference":"Updates the monthText configuration","result":"Change the month title.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(yearText) {\r\n        var innerItems = this.getInnerItems,\r\n            ln = innerItems.length,\r\n            item, i;\r\n        if (this.initialized) {\r\n            for (i = 0; i < ln; i++) {\r\n                item = innerItems[i];\r\n                if (item.title == this.yearText) {\r\n                    item.setTitle(yearText);\r\n                }\r\n            }\r\n        }\r\n    }","code-length":123,"reference":"Updates the yearText configuration","result":"Set the year text.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me        = this,\r\n            slotOrder = me.getSlotOrder(),\r\n            yearsFrom = me.getYearFrom(),\r\n            yearsTo   = me.getYearTo(),\r\n            years     = [],\r\n            days      = [],\r\n            months    = [],\r\n            reverse   = yearsFrom > yearsTo,\r\n            ln, i, daysInMonth;\r\n        while (yearsFrom) {\r\n            years.push({\r\n                text  : yearsFrom,\r\n                value : yearsFrom\r\n            });\r\n            if (yearsFrom === yearsTo) {\r\n                break;\r\n            }\r\n            if (reverse) {\r\n                yearsFrom--;\r\n            } else {\r\n                yearsFrom++;\r\n            }\r\n        }\r\n        daysInMonth = me.getDaysInMonth(1, new Date().getFullYear());\r\n        for (i = 0; i < daysInMonth; i++) {\r\n            days.push({\r\n                text  : i + 1,\r\n                value : i + 1\r\n            });\r\n        }\r\n        for (i = 0, ln = Ext.Date.monthNames.length; i < ln; i++) {\r\n            months.push({\r\n                text  : Ext.Date.monthNames[i],\r\n                value : i + 1\r\n            });\r\n        }\r\n        var slots = [];\r\n        slotOrder.forEach(function (item) {\r\n            slots.push(me.createSlot(item, days, months, years));\r\n        });\r\n        me.setSlots(slots);\r\n    }","code-length":397,"reference":"Generates all slots for all years specified by this component, and then sets them on the component\n","result":"Create the slots .","score":[0.0147,0.0637]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, days, months, years) {\r\n        switch (name) {\r\n            case 'year':\r\n                return {\r\n                    name: 'year',\r\n                    align: 'center',\r\n                    data: years,\r\n                    title: this.getYearText(),\r\n                    flex: 3\r\n                };\r\n            case 'month':\r\n                return {\r\n                    name: name,\r\n                    align: 'right',\r\n                    data: months,\r\n                    title: this.getMonthText(),\r\n                    flex: 4\r\n                };\r\n            case 'day':\r\n                return {\r\n                    name: 'day',\r\n                    align: 'center',\r\n                    data: days,\r\n                    title: this.getDayText(),\r\n                    flex: 2\r\n                };\r\n        }\r\n    }","code-length":206,"reference":"Returns a slot config for a specified date.\n","result":"Create a new object with the correct properties.","score":[0.1389,0.0625]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(user) {\r\n\t\t\tif (user) {\r\n\t\t\t\tif (!!~this.roles.indexOf('*')) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (var userRoleIndex in user.roles) {\r\n\t\t\t\t\t\tfor (var roleIndex in this.roles) {\r\n\t\t\t\t\t\t\tif (this.roles[roleIndex] === user.roles[userRoleIndex]) {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn this.isPublic;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}","code-length":172,"reference":"A private function for rendering decision","result":"Check if a user is authorized.","score":[0,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var text = this.backButtonStack[this.backButtonStack.length - 2],\r\n            useTitleForBackButtonText = this.getUseTitleForBackButtonText();\r\n        if (!useTitleForBackButtonText) {\r\n            if (text) {\r\n                text = this.getDefaultBackButtonText();\r\n            }\r\n        }\r\n        return text;\r\n    }","code-length":106,"reference":"Returns the text needed for the current back button at anytime.\n","result":"Create a new function to create a new back button .","score":[0.1384,0.1705]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(element) {\r\n        var ghost, x, y, left, width;\r\n        ghost = element.dom.cloneNode(true);\r\n        ghost.id = element.id + '-proxy';\r\n        element.getParent().dom.appendChild(ghost);\r\n        ghost = Ext.get(ghost);\r\n        x = element.getX();\r\n        y = element.getY();\r\n        left = element.getLeft();\r\n        width = element.getWidth();\r\n        ghost.setStyle('position', 'absolute');\r\n        ghost.setX(x);\r\n        ghost.setY(y);\r\n        ghost.setHeight(element.getHeight());\r\n        ghost.setWidth(width);\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            left: left,\r\n            width: width,\r\n            ghost: ghost\r\n        };\r\n    }","code-length":239,"reference":"Creates a proxy element of the passed element, and positions it in the same position, using absolute positioning.\nThe createNavigationBarProxy method uses this to create proxies of the backButton and the title elements.\n","result":"Create proxy objects for the element.","score":[0.0026,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction plugin(options) {\r\n  options = options || {};\r\n  options.key = options.key || 'untemplatized';\r\n  return function(files, metalsmith, done){\r\n    setImmediate(done);\r\n    Object.keys(files).forEach(function(file){\r\n      debug('checking file: %s', file);\r\n      var data = files[file];\r\n      var contents = data.contents.toString().replace(\/^\\n+\/g, '');\r\n      debug('storing untemplatized content: %s', file);\r\n      data[options.key] = new Buffer(contents);\r\n    });\r\n  };\r\n}","code-length":168,"reference":"A Metalsmith plugin to extract untemplatized file contents.\n\n","result":"Build the plugin.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defaultMapFn(data) {\r\n  return Object.keys(data).slice(0, this.headers.length).map(function(key) {\r\n    return data[key]\r\n  })\r\n}","code-length":60,"reference":"the row values","result":"Create the default mapFn.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction scheduleJob(trigger, jobFunc, jobData) {\r\n    const job = Job.createJob(trigger, jobFunc, jobData);\r\n    const excuteTime = job.excuteTime();\r\n    const id = job.id;\r\n    map[id] = job;\r\n    const element = {\r\n        id: id,\r\n        time: excuteTime\r\n    };\r\n    const curJob = queue.peek();\r\n    if (!curJob || excuteTime < curJob.time) {\r\n        queue.offer(element);\r\n        setTimer(job);\r\n        return job.id;\r\n    }\r\n    queue.offer(element);\r\n    return job.id;\r\n}","code-length":181,"reference":"Schedule a new Job","result":"Schedule jobs.","score":[0.1839,0.1316]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineType(type, validator) {\r\n  var typeDef;\r\n  var regKey;\r\n  if (type instanceof Function) {\r\n    validator = _customValidator(type);\r\n    type = type.name;\r\n  } else if (!(validator instanceof Function)) {\r\n    throw TypeException('Validator must be a function for `{{type}}`', null, null, { type: type });\r\n  }\r\n  typeDef = parseTypeDef(type);\r\n  regKey = typeDef.name.toLocaleLowerCase();\r\n  if (primitives[regKey]) {\r\n    throw TypeException('Cannot override primitive type `{{type}}`', null, null, { type: typeDef.name });\r\n  } else if (registry[regKey] && (registry[regKey].validator !== validator)) {\r\n    throw TypeException('Validator conflict for type `{{type}}` ', null, null, { type: typeDef.name });\r\n  }\r\n  registry[regKey] = {\r\n    type: typeDef.name,\r\n    validator: validator\r\n  };\r\n  return validator;\r\n}","code-length":272,"reference":"Define a new type.\n\n","result":"Define a type.","score":[0.4578,0.6553]}
{"code":"\/*is used to<extra_id_0>\r\nfunction undefineType(type) {\r\n  var validator;\r\n  var typeDef = parseTypeDef(type);\r\n  var regKey = typeDef.name.toLocaleLowerCase();\r\n  if (primitives[regKey]) {\r\n    throw TypeException('Cannot undefine primitive type `{{type}}`', null, null, { type: typeDef.name });\r\n  }\r\n  validator = registry[regKey] && registry[regKey].validator;\r\n  delete registry[regKey];\r\n  return validator || false;\r\n}","code-length":136,"reference":"Undefine a type.","result":"Remove type definitions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkType(type, value, previous, attributeName) {\r\n  var typeDef = parseTypeDef(type);\r\n  var regKey = typeDef.name.toLocaleLowerCase();\r\n  validator = primitives[regKey] || (registry[regKey] && registry[regKey].validator);\r\n  if (!validator) {\r\n    throw TypeException('Unknown type `{{type}}`', null, [ attributeName ], { type: typeDef.name });\r\n  } else if (typeDef.indexes) {\r\n    return arrayValidation(typeDef, 0, value, previous, attributeName, validator);\r\n  }\r\n  return validator(value, previous, attributeName);\r\n}","code-length":164,"reference":"Check value against type","result":"Validate the value.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getDefinedNames() {\r\n  return Object.keys(primitives).concat(Object.keys(registry).map(function (type) {\r\n    return registry[type].type;\r\n  }));\r\n}","code-length":59,"reference":"Return all defined type names","result":"Generate the generated code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(comment) {\r\n              const isLicense =\r\n                comment.toLowerCase().includes(\"license\") ||\r\n                comment.toLowerCase().includes(\"copyright\");\r\n              if (isLicense === false) {\r\n                return false;\r\n              }\r\n              if (lastLicense !== comment) {\r\n                lastLicense = comment;\r\n                return true;\r\n              } else {\r\n                return false;\r\n              }\r\n            }","code-length":112,"reference":"don't include redundant license or copyright notice","result":"Let lastLicense .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction get(k) {\r\n  if(!k) return _SETTINGS\r\n  let v = _.get(_SETTINGS, k)\r\n  if(!v) return\r\n  if(_.isString(k) && k.indexOf('paths.') !== 0) return v\r\n  let args = _.drop(_.toArray(arguments))\r\n  let argsLength = args.unshift(v)\r\n  return path.join.apply(path, args)\r\n}","code-length":116,"reference":"get setting key","result":"Get the paths.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction load(src) {\r\n  if(!src || !_.isString(src)) return\r\n  let file = _.attempt(require, src)\r\n  if(!file || _.isError(file) || !_.isPlainObject(file)) return\r\n  return _.merge(_SETTINGS, file)\r\n}","code-length":82,"reference":"require src and merge with SETTINGS if exists","result":"Load modules.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(size, units) {\r\n        if (size === \"\" || size == \"auto\" || size === undefined || size === null) {\r\n            return size || '';\r\n        }\r\n        if (Ext.isNumber(size) || this.numberRe.test(size)) {\r\n            return size + (units || this.defaultUnit || 'px');\r\n        }\r\n        else if (!this.unitRe.test(size)) {\r\n            Ext.Logger.warn(\"Warning, size detected (\" + size + \") not a valid property value on Element.addUnits.\");\r\n            return size || '';\r\n        }\r\n        return size;\r\n    }","code-length":162,"reference":"Test if size has a unit, otherwise appends the passed unit string, or the default for this Element.\n","result":"Create a function to create a function to return a string .","score":[0.0541,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(form) {\r\n        var fElements = form.elements || (document.forms[form] || Ext.getDom(form)).elements,\r\n            hasSubmit = false,\r\n            encoder = encodeURIComponent,\r\n            name,\r\n            data = '',\r\n            type,\r\n            hasValue;\r\n        Ext.each(fElements, function(element) {\r\n            name = element.name;\r\n            type = element.type;\r\n            if (!element.disabled && name) {\r\n                if (\/select-(one|multiple)\/i.test(type)) {\r\n                    Ext.each(element.options, function(opt) {\r\n                        if (opt.selected) {\r\n                            hasValue = opt.hasAttribute ? opt.hasAttribute('value') : opt.getAttributeNode('value').specified;\r\n                            data += Ext.String.format(\"{0}={1}&\", encoder(name), encoder(hasValue ? opt.value : opt.text));\r\n                        }\r\n                    });\r\n                } else if (!(\/file|undefined|reset|button\/i.test(type))) {\r\n                    if (!(\/radio|checkbox\/i.test(type) && !element.checked) && !(type == 'submit' && hasSubmit)) {\r\n                        data += encoder(name) + '=' + encoder(element.value) + '&';\r\n                        hasSubmit = \/submit\/i.test(type);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return data.substr(0, data.length - 1);\r\n    }","code-length":371,"reference":"Serializes a DOM form into a url encoded string\n","result":"Get the form data.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        Ext.Logger.deprecate(\"Ext.Element.getDocumentWidth() is no longer supported. \" +\r\n            \"Please use Ext.Viewport#getWindowWidth() instead\", this);\r\n        return Math.max(!Ext.isStrict ? document.body.scrollWidth : document.documentElement.scrollWidth, this.getViewportWidth());\r\n    }","code-length":94,"reference":"Retrieves the document width\n","result":"Detect the document width.","score":[0.4518,0.4688]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        Ext.Logger.deprecate(\"Ext.Element.getOrientation() is no longer supported. \" +\r\n            \"Please use Ext.Viewport#getOrientation() instead\", this);\r\n        if (Ext.supports.OrientationChange) {\r\n            return (window.orientation == 0) ? 'portrait' : 'landscape';\r\n        }\r\n        return (window.innerHeight > window.innerWidth) ? 'portrait' : 'landscape';\r\n    }","code-length":120,"reference":"Retrieves the current orientation of the window. This is calculated by\ndetermining if the height is greater than the width.\n","result":"Detect orientation .","score":[0.0014,0.0273]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(el, config) {\r\n        config = config || {};\r\n        Ext.apply(this, config);\r\n        this.addEvents(\r\n                        'sortstart',\r\n                        'sortend',\r\n                        'sortchange'\r\n        );\r\n        this.el = Ext.get(el);\r\n        this.callParent();\r\n        this.mixins.observable.constructor.call(this);\r\n        if (this.direction == 'horizontal') {\r\n            this.horizontal = true;\r\n        }\r\n        else if (this.direction == 'vertical') {\r\n            this.vertical = true;\r\n        }\r\n        else {\r\n            this.horizontal = this.vertical = true;\r\n        }\r\n        this.el.addCls(this.baseCls);\r\n        this.startEventName = (this.getDelay() > 0) ? 'taphold' : 'tapstart';\r\n        if (!this.disabled) {\r\n            this.enable();\r\n        }\r\n    }","code-length":250,"reference":"Creates new Sortable.\n","result":"Create a sort instance.","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        this.el.on(this.startEventName, this.onStart, this, {delegate: this.itemSelector, holdThreshold: this.getDelay()});\r\n        this.disabled = false;\r\n    }","code-length":63,"reference":"Enables sorting for this Sortable.","result":"Create the element.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _compareMaps(a,b, options) {\r\n    debug(a,b);\r\n    let alength = a.size === undefined ? a.length : a.size;\r\n    let blength = b.size === undefined ? b.length : b.size;\r\n    if (alength === 0 && blength === 0) return ops.NOP;\r\n    if (alength === 0 || blength === 0) return new ops.Map([...b]);\r\n    let patch = [];\r\n    if (!options.sorted) {\r\n        a = Array.from(a).sort((a,b) => utils.compare(a,b,options));\r\n        b = Array.from(b).sort((a,b) => utils.compare(a,b,options));\r\n    }\r\n    let ai = 1, bi = 1;\r\n    let ao = a[0], bo = b[0]\r\n    let element_options = options.getArrayElementOptions();\r\n    do {\r\n        let comparison = utils.compare(ao,bo,options);\r\n        debug(\"comparing items\", ao, bo, comparison);\r\n        if (comparison < 0) {\r\n            debug('skip');\r\n            ao = a[ai++]; \r\n        } else if (comparison > 0) {\r\n            debug('insert');\r\n            patch.push([options.key(bo), new ops.Ins(options.value(bo))]);\r\n            bo = b[bi++];\r\n        } else {\r\n            if (options.value(ao) !== options.value(bo)) {\r\n                let element_patch = compare(options.value(ao), options.value(bo), element_options)\r\n                if (element_patch != ops.NOP) patch.push([options.key(bo), element_patch]);\r\n            }\r\n            else debug('skip2');\r\n            ao = a[ai++]; \r\n            bo = b[bi++];\r\n        }\r\n    } while (ai <= a.length && bi <= b.length);\r\n    while (ai <= a.length) {\r\n        patch.push([options.key(ao), ops.DEL]);\r\n        ao=a[ai++]; \r\n    }\r\n    while (bi <= b.length) {\r\n        patch.push([options.key(bo), new ops.Ins(options.value(bo))]); \r\n        bo=b[bi++]; \r\n    }\r\n    return new ops.Map(patch);\r\n}","code-length":597,"reference":"Patch for objects\n\nFunctions that should allow us to compare two objects, compute a difference, send the difference over the wire, and apply a patch at the far end\nto sync a remote object with the changes.\n\nFor 'patch' to work properly, the patched object (and child objects) should have a static 'fromJSON' method somewhere in its inheritance tree.\nYou may also implement a static 'getAttrProps(name)' object, which may return a variety of options that are applied to\nchild properties with the given name (see {","result":"Code too long,keep in 512.","score":[0.0,0.0128]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compare(a,b,options) {\r\n    debug('compare %j,%j options: %j', a, b, options);\r\n    options = Options.addDefaults(options);\r\n    debug('compare - options %j', options);\r\n    if (a === b)\r\n        return ops.NOP;\r\n    if (b === undefined) \r\n        return ops.DEL;\r\n    if (a === undefined) \r\n        return new ops.Rpl(b);\r\n    if (typeof a === 'object' && typeof b === 'object') {\r\n        if (utils.isArrayLike(a) && utils.isArrayLike(b)) { \r\n            if (options.map) {\r\n                return _compareMaps(a,b,options);\r\n            } else  {\r\n                return _compareArrays(a,b,options);\r\n            }\r\n        } else if (a instanceof Map && b instanceof Map) {\r\n            return _compareMaps(a,b,options);\r\n        } else if (a.constructor === b.constructor) {\r\n            return _compareObjects(a,b,options);\r\n        } \r\n    }\r\n    return new ops.Rpl(b);\r\n}","code-length":295,"reference":"Compare two object to produce a patch object.\n\n","result":"Compare objects.","score":[0.0249,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fromJSON(object) {\r\n        if (object instanceof ops.Op) return object;\r\n        if (object === undefined) return ops.NOP;\r\n        if (object.op) {\r\n            if (object.op === ops.Rpl.name)\r\n                return new ops.Rpl(object.data);\r\n            if (object.op === ops.Ins.name)\r\n                return new ops.Ins(object.data);\r\n            else if (object.op === ops.NOP.name)\r\n                return ops.NOP;\r\n            else if (object.op === ops.DEL.name)\r\n                return ops.DEL;\r\n            else if (object.op === ops.Mrg.name) \r\n                return new ops.Mrg(utils.map(object.data, fromJSON));\r\n            else if (object.op === ops.Map.name) \r\n                return new ops.Map(object.data.map(([key,op]) => [key, fromJSON(op)]));\r\n            else if (object.op === ops.Arr.name) \r\n                return new ops.Arr(object.data.map(([key,op]) => [key, fromJSON(op)]));\r\n            else throw new Error('unknown diff.op ' + object.op);\r\n        } else {\r\n            return new ops.Rpl(object);   \r\n        }    \r\n}","code-length":340,"reference":"Convert over-the-wire JSON format back into typed patch object","result":"Convert a diff object to a diff object.","score":[0.1458,0.1124]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sorterFn) {\r\n        var me     = this,\r\n            items  = me.items,\r\n            keys   = me.keys,\r\n            length = items.length,\r\n            temp   = [],\r\n            i;\r\n        for (i = 0; i < length; i++) {\r\n            temp[i] = {\r\n                key  : keys[i],\r\n                value: items[i],\r\n                index: i\r\n            };\r\n        }\r\n        Ext.Array.sort(temp, function(a, b) {\r\n            var v = sorterFn(a.value, b.value);\r\n            if (v === 0) {\r\n                v = (a.index < b.index ? -1 : 1);\r\n            }\r\n            return v;\r\n        });\r\n        for (i = 0; i < length; i++) {\r\n            items[i] = temp[i].value;\r\n            keys[i]  = temp[i].key;\r\n        }\r\n        me.fireEvent('sort', me, items, keys);\r\n    }","code-length":273,"reference":"Sorts the collection by a single sorter function.\n","result":"Sort the array .","score":[0.1175,0.2467]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(mapping) {\r\n        var me = this,\r\n            items = me.items,\r\n            index = 0,\r\n            length = items.length,\r\n            order = [],\r\n            remaining = [],\r\n            oldIndex;\r\n        me.suspendEvents();\r\n        for (oldIndex in mapping) {\r\n            order[mapping[oldIndex]] = items[oldIndex];\r\n        }\r\n        for (index = 0; index < length; index++) {\r\n            if (mapping[index] == undefined) {\r\n                remaining.push(items[index]);\r\n            }\r\n        }\r\n        for (index = 0; index < length; index++) {\r\n            if (order[index] == undefined) {\r\n                order[index] = remaining.shift();\r\n            }\r\n        }\r\n        me.clear();\r\n        me.addAll(order);\r\n        me.resumeEvents();\r\n        me.fireEvent('sort', me);\r\n    }","code-length":245,"reference":"Reorders each of the items based on a mapping from old index to new index. Internally this just translates into a\nsort. The `sort` event is fired whenever reordering has occured.\n","result":"Sort items by mapping.","score":[0.0004,0.0177]}
{"code":"\/*is used to<extra_id_0>\r\nfunction apply (func, args, self) {\r\n  return (typeof func === 'function')\r\n    ? func.apply(self, array(args))\r\n    : func\r\n}","code-length":52,"reference":"Invoke .apply if value is a function, otherwise, return default value.\n\n","result":"Create a function to be used to be used to be used to be.","score":[0.0756,0.0442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction detectDeviceClass() {\r\n    var body = document.body;\r\n    if (isMobile.any()) {\r\n        body.classList.add('mobile');\r\n    }\r\n    if (isMobile.Android()) {\r\n        body.classList.add('android');\r\n    }\r\n    if (isTablet.any()) {\r\n        body.classList.add('tablet');\r\n    }\r\n}","code-length":110,"reference":"Following functions are not executed on import anymore","result":"Detect device class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction detectWindowWidth() {\r\n    var mobileWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 730;\r\n    var isMobileWidth = window.innerWidth < mobileWidth;\r\n    var body = document.body;\r\n    if (isMobileWidth) {\r\n        body.classList.add('is-mobile-width');\r\n    } else {\r\n        body.classList.remove('is-mobile-width');\r\n    }\r\n}","code-length":124,"reference":"This function can be triggered on window resize","result":"Detect window width.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config,callback,scope) {\r\n\t\tvar changed= false;\r\n\t\tif (config) {\r\n\t\t\tconfig.config_id= 'csv';\r\n\t\t\tExt.data.CSV.superclass.constructor.call(this, config);\r\n\t\t\tif (config.v) {\r\n\t\t\t\tthis.v= [];\r\n\t\t\t\tthis.do_add(config.v);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.v===undefined) {\r\n\t\t\tthis.v= [];\r\n\t\t\tchanged= true;\r\n\t\t}\r\n\t\tthis.writeAndCallback(changed,callback,scope);\r\n\t}","code-length":171,"reference":"array of change stamps","result":"Create a CSV object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(array, insert, at) {\r\n    at = Math.min(Math.max(at, 0), array.length);\r\n    var tail = Array(array.length - at);\r\n    var length = insert.length;\r\n    for (var i = 0; i < tail.length; i++) tail[i] = array[i + at];\r\n    for (i = 0; i < length; i++) array[i + at] = insert[i];\r\n    for (i = 0; i < tail.length; i++) array[i + length + at] = tail[i];\r\n  }","code-length":152,"reference":"Splices `insert` into `array` at index `at`.","result":"Insert a string into an array.","score":[0.1634,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(models, options) {\r\n      options = _.extend({}, options);\r\n      var singular = !_.isArray(models);\r\n      models = singular ? [models] : _.clone(models);\r\n      var removed = this._removeModels(models, options);\r\n      if (!options.silent && removed) this.trigger('update', this, options);\r\n      return singular ? removed[0] : removed;\r\n    }","code-length":109,"reference":"Remove a model, or a list of models from the set.","result":"Remove models.","score":[0.0056,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(models, options) {\r\n      var removed = [];\r\n      for (var i = 0; i < models.length; i++) {\r\n        var model = this.get(models[i]);\r\n        if (!model) continue;\r\n        var index = this.indexOf(model);\r\n        this.models.splice(index, 1);\r\n        this.length--;\r\n        if (!options.silent) {\r\n          options.index = index;\r\n          model.trigger('remove', model, this, options);\r\n        }\r\n        removed.push(model);\r\n        this._removeReference(model, options);\r\n      }\r\n      return removed.length ? removed : false;\r\n    }","code-length":178,"reference":"Internal method called by both remove and set.","result":"Remove a collection.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var path = this.decodeFragment(this.location.pathname);\r\n      var root = path.slice(0, this.root.length - 1) + '\/';\r\n      return root === this.root;\r\n    }","code-length":66,"reference":"Does the pathname match the root?","result":"Test the location object.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getViewTemplateData ( view, viewOptions ) {\r\n        var data,\r\n            meta = view.declarativeViews.meta;\r\n        if ( ! meta.processed ) {\r\n            if ( view.template && _.isString( view.template ) ) {\r\n                meta.originalTemplateProp = view.template;\r\n                data = getTemplateData( view.template, view, viewOptions );\r\n                meta.processed = true;\r\n                meta.inGlobalCache = true;\r\n                if ( data ) events.trigger( \"cacheEntry:view:process\", _copyCacheEntry( data ), meta.originalTemplateProp, view, viewOptions );\r\n            } else {\r\n                data = undefined;\r\n                meta.processed = true;\r\n                meta.inGlobalCache = false;\r\n            }\r\n        } else {\r\n            data = meta.inGlobalCache ? getTemplateData( meta.originalTemplateProp, view, viewOptions ) : undefined;\r\n        }\r\n        if ( data ) events.trigger( \"cacheEntry:view:fetch\", data, meta.originalTemplateProp, view, viewOptions );\r\n        return data;\r\n    }","code-length":274,"reference":"Returns the template data associated with a given view, provided that the template is set to a non-empty string.\nOtherwise, it returns undefined. Manages caching behind the scenes.\n\nThe template data is returned as a hash. For a list of properties, see readme.\n\nEvents\n------\n\nThe method fires two events:\n\n- cacheEntry:view:process\n\nFires only once per view, on first access to the template from that particular view. Fires whether or not the\ntemplate is already in the cache.\n\nThe event handler receives a **copy** of the returned cache data. Modifications of the data are ineffective,\nthey don't show up anywhere outside of the handler.\n\n(That is by design. When setting up the el of a view, the cache is accessed several times - once for each\nel-related property. The handler would be able to modify the data during the very first access, when the\n`attributes` property is requested, but not for `className`, `tagName`, `id`. That behaviour can be confusing\nand cause bugs which are difficult to track down. Hence data modification is actively prevented even during\nfirst access, making the behaviour consistent.)\n\nBut there is an exception: the _pluginData property. If the handler needs to change or store data, it can write\nto the _pluginData hash. Changes to the hash are persistent. They are stored in the original cache entry and\nhence show up in every subsequent cache query for that entry.\n\nNB: When `el`-related properties from the cache, like tagName or html, need to be manipulated on the fly, it\nmust be done in a handler for another event: cacheEntry:view:fetch. That handler _is_ allowed to change the\nreturned data. It also has access to the _pluginData created during the cacheEntry:view:process event.\n\n- cacheEntry:view:fetch\n\nFires every time data is requested from the cache in the context of a querying view. The event fires on first\naccess as well. On that occasion, it is preceded by the cacheEntry:view:process event.\n\nThe event handler receives the returned cache data and has full access to it. If the handler modifies the data,\nthe modifications show up in the returned result.\n\nHowever, the original cache entry is protected from modification (with the exception of the _pluginData\nproperty, see above), so changes made by the event handler do not alter the values stored in the cache.\n\nThe events fire only if the cache is accessed with getViewTemplateData(), ie when the cache is queried from a\nview: during view instantiation, or when called with `view.declarativeViews.getCachedTemplate()`.\n\nThe events do **not** fire when the cache is queried from the global API, even if a view is provided as an\nadditional argument, as in `Backbone.DeclarativeViews.getCachedTemplate( \"#template\", view )`.\n\n","result":"Return meta.","score":[0,0.0013]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearCache ( fromMarionette ) {\r\n        templateCache = {};\r\n        if ( ! fromMarionette && Backbone.Marionette && Backbone.Marionette.TemplateCache ) Backbone.Marionette.TemplateCache.clear();\r\n    }","code-length":75,"reference":"Clears the cache as a whole.\n\nAlso clears the Marionette cache (if Marionette is available).\n\n","result":"Clear the cache.","score":[0.0075,0.1359]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearCachedTemplate ( templateProp ) {\r\n        var fromMarionette = false,\r\n            args = _.toArray( arguments ),\r\n            lastArg = _.last( args );\r\n        if ( args.length && _.isBoolean( lastArg ) ) fromMarionette = args.pop();\r\n        if ( args.length > 1 ) {\r\n            _.each( args, function ( singleProp ) { clearCachedTemplate( singleProp, fromMarionette ); } );\r\n        } else if ( _.isArray( templateProp ) || _.isArguments( templateProp ) ) {\r\n            _.each( templateProp, function ( singleProp ) { clearCachedTemplate( singleProp, fromMarionette ); } );\r\n        } else {\r\n            if ( ! templateProp ) throw new GenericError( \"Missing argument: string identifying the template. The string should be a template selector or the raw HTML of a template, as provided to the template property of a view when the cache entry was created\" );\r\n            if ( _.isString( templateProp ) ) {\r\n                _clearCachedTemplate( templateProp );\r\n                if ( ! fromMarionette && Backbone.Marionette && Backbone.Marionette.TemplateCache ) {\r\n                    try {\r\n                        Backbone.Marionette.TemplateCache.clear( templateProp );\r\n                    } catch ( err ) {}\r\n                }\r\n            }\r\n        }\r\n    }","code-length":341,"reference":"Removes one or more cache entries.\n\nArguments\n---------\n\nThe strings identifying the cache entries can be passed in as individual arguments (prop1, prop2, ...), or as an\narray. Each string must be\n\n- a template selector\n- raw HTML of a template, if that's what the template property held when a view made use of it.\n\nA template selector must be identical to the one which was used when creating the cache entry, ie the selector\nspecified in the template property or template option of a view. Mere selector equivalence (e.g. \"#template\" and\n\"script#template\") won't match the cache.\n\nStrings not matching a cache entry are ignored, as are non-string arguments.\n\nMarionette.TemplateCache\n------------------------\n\nWhen templates are cleared here, they are removed from the Marionette template cache as well (if Marionette is\nloaded).\n\n","result":"Clear the cache of the template.","score":[0.0,0.0211]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clearViewTemplateCache ( view ) {\r\n        var meta = view.declarativeViews.meta;\r\n        if ( meta.processed ) {\r\n            if ( meta.inGlobalCache ) _clearCachedTemplate( meta.originalTemplateProp );\r\n        } else if ( view.template && _.isString( view.template ) ) {\r\n            _clearCachedTemplate( view.template );\r\n        }\r\n    }","code-length":106,"reference":"Removes the template cache entry associated with a given view, provided that a cache entry exists.\n\n","result":"Clear the view template cache.","score":[0.0317,0.0671]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _copyCacheEntry ( cacheEntry ) {\r\n        var copy = _.clone( cacheEntry );\r\n        if ( _.isObject( copy.attributes ) ) copy.attributes = _.clone( copy.attributes );\r\n        return copy;\r\n    }","code-length":63,"reference":"Creates a copy of a cache entry and returns it. Protects the original cache entry from modification, except for\nthe _pluginData property, which remains writable and can be accessed from the copy.\n\nNB The `attribute` property is cloned and protected, too, if it exists.\n\n","result":"Copy the cache entry.","score":[0.0,0.0375]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _createTemplateCache( templateProp, view, viewOptions ) {\r\n        var $template, data, html,\r\n            customLoader = Backbone.DeclarativeViews.custom.loadTemplate,\r\n            defaultLoader = Backbone.DeclarativeViews.defaults.loadTemplate,\r\n            modifiedDefaultLoader = defaultLoader !== loadTemplate,\r\n            cacheId = templateProp;\r\n        try {\r\n            $template = customLoader ? customLoader( templateProp, view, viewOptions ) : defaultLoader( templateProp, view, viewOptions );\r\n        } catch ( err ) {\r\n            if( _isDeclarativeViewsErrorType( err ) ) throw err;\r\n            $template = \"\";\r\n        }\r\n        if ( ( customLoader || modifiedDefaultLoader ) && $template !== \"\" && ! ( $template instanceof Backbone.$ ) ) {\r\n            throw new CustomizationError( \"Invalid return value. The \" + ( customLoader ? \"custom\" : \"default\" ) + \" loadTemplate function must return a jQuery instance, but it hasn't\" );\r\n        }\r\n        if ( $template.length ) {\r\n            data = _getDataAttributes( $template ) ;\r\n            html = $template.html();\r\n            templateCache[cacheId] = {\r\n                html: html,\r\n                compiled: _tryCompileTemplate( html, $template ),\r\n                tagName: data.tagName,\r\n                className: data.className,\r\n                id: data.id,\r\n                attributes: data.attributes,\r\n                _pluginData: {}\r\n            };\r\n            events.trigger( \"cacheEntry:create\", templateCache[cacheId], templateProp, view, viewOptions );\r\n        } else {\r\n            templateCache[cacheId] = { invalid: true };\r\n        }\r\n        return templateCache[cacheId];\r\n    }","code-length":438,"reference":"Creates a cache entry for a given template property.\n\nReturns the cached entry if creating it has succeeded. In case of failure, it returns the hash { invalid: true }.\nIt signals that the template has been processed, but that the returned hash, as well as the cache itself, does\nnot contain valid data for the template property.\n\nThe creation of a cache entry can fail if the template property is an empty string, or a selector which doesn't\nmatch anything, or a string which jQuery can't process.\n\nUses a custom loader if specified, instead of loading the template with jQuery (default).\n\nEvents\n------\n\nThe method fires the following event:\n\n- cacheEntry:create\n\nFires only once per cache entry, when a valid cache entry is created. That may happen in the context of a view,\nor with a global query.\n\nThe event handler receives the original cache entry. If the handler modifies the data, the modifications show\nup in the returned result **and** alter the content in the cache.\n\nIf a valid cache entry can't be created (flagged as invalid), the event does NOT fire.\n\n","result":"Create a template cache.","score":[1.204e-20,0.012]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _updateJQueryDataCache ( $elem ) {\r\n        var add = {},\r\n            remove = [];\r\n        if ( $.hasData( $elem[0] ) ) {\r\n            _.each( registeredDataAttributes.primitives, function ( attributeName ) {\r\n                var attributeValue = $elem.attr( \"data-\" + attributeName );\r\n                if ( attributeValue === undefined ) {\r\n                    remove.push( attributeName );\r\n                } else {\r\n                    add[toCamelCase( attributeName )] = attributeValue;\r\n                }\r\n            } );\r\n            _.each( registeredDataAttributes.json, function ( attributeName ) {\r\n                var attributeValue = $elem.attr( \"data-\" + attributeName );\r\n                if ( attributeValue === undefined ) {\r\n                    remove.push( attributeName );\r\n                } else {\r\n                    try {\r\n                        add[toCamelCase( attributeName )] = $.parseJSON( attributeValue );\r\n                    } catch ( err ) {\r\n                        remove.push( attributeName );\r\n                    }\r\n                }\r\n            } );\r\n            if ( remove.length ) $elem.removeData( remove );\r\n            if ( _.size( add ) ) $elem.data( add );\r\n        }\r\n    }","code-length":293,"reference":"Reads registered data attributes of a given element from the DOM, and updates an existing jQuery data cache with\nthese values.\n\nIf no jQuery data cache exists, it is NOT created by the call. (This function is meant to be used as an efficient,\ninternal tool.) If you need to make sure the jQuery data cache is current and in sync with the DOM, and also\ncreate it if it doesn't exist, just call _getDataAttributes() instead.\n\nThe function is needed because jQuery keeps its own cache of data attributes, but there is no API to clear or\ncircumvent that cache. The jQuery functions $.fn.removeData() and $.removeData() don't do that job: despite their\nname, they don't actually remove the cached values but set them to undefined. So undefined is returned on next\naccess - not the actual values in the DOM.\n\nHere, we force-update the jQuery cache, making sure that changes of the HTML5 data-* attributes in the DOM are\npicked up.\n\nThe implementation circumvents the numerous bugs of jQuery.fn.data(), in particular when removing data. The\nbehaviour and bugs of a .data() call vary by jQuery version. For an overview of that mess, see\nhttp:\/\/jsbin.com\/venuqo\/4\/edit?html,js,console\n\nNB The cache update is limited to the data attributes which have been registered with _registerDataAttribute().\nBy default, only attributes which are \"owned\" by Backbone.Declarative.Views are updated - ie, the ones describing\nthe `el` of a view. Other HTML5 data-* attributes are not updated in the jQuery cache because it would interfere\nwith the responsibilities of other code.\n\n","result":"Update jQuery data cache.","score":[5.925e-28,0.0088]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _registerCacheAlias( namespaceObject, instanceCachePropertyName ) {\r\n        namespaceObject.getCachedTemplate = Backbone.DeclarativeViews.getCachedTemplate;\r\n        namespaceObject.clearCachedTemplate = Backbone.DeclarativeViews.clearCachedTemplate;\r\n        namespaceObject.clearCache = Backbone.DeclarativeViews.clearCache;\r\n        namespaceObject.custom = Backbone.DeclarativeViews.custom;\r\n                if ( instanceCachePropertyName ) {\r\n            instanceCacheAliases.push( instanceCachePropertyName );\r\n            instanceCacheAliases = _.unique( instanceCacheAliases );\r\n        }\r\n    }","code-length":150,"reference":"Registers an alternative way to access the cache and set up a custom compiler and loader. Intended for use by\nplugins.\n\nA cache alias just adds syntactic sugar for users wanting to manage and access the cache from a plugin namespace.\nThe registration creates references to `getCachedTemplate`, `clearCachedTemplate`, `clearCache`, and the `custom`\nobject in the alternative namespace.\n\nYou can also register the name of an alias to use on view instances (optional). A property of that name will be\ncreated on each view. It references the declarativeViews property of the view.\n\n","result":"Register cache aliases.","score":[0.0,0.0122]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _isDeclarativeViewsErrorType ( error ) {\r\n        return error instanceof GenericError ||\r\n               error instanceof TemplateError ||\r\n               error instanceof CompilerError ||\r\n               error instanceof CustomizationError ||\r\n               error instanceof ConfigurationError;\r\n    }","code-length":67,"reference":"Checks if an error belongs to the error types of Backbone.DeclarativeViews.\n\nATTN Update this check as new error types are added to Backbone.DeclarativeViews.\n\n","result":"Create a new instance of the class .","score":[0.028,0.0698]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createCustomErrorType ( name ) {\r\n        function CustomError ( message ) {\r\n            this.message = message;\r\n            if ( Error.captureStackTrace ) {\r\n                Error.captureStackTrace( this, this.constructor );\r\n            } else {\r\n                this.stack = ( new Error() ).stack;\r\n            }\r\n        }\r\n        CustomError.prototype = new Error();\r\n        CustomError.prototype.name = name;\r\n        CustomError.prototype.constructor = CustomError;\r\n        return CustomError;\r\n    }","code-length":138,"reference":"Creates and returns a custom error type.\n\nSee gist at https:\/\/gist.github.com\/hashchange\/4c1ce239570c77e698c1d2df09d0e540\n\n","result":"Create custom error types.","score":[0.0785,0.2481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name) {\r\n          var config = this._wreqrHandlers[name];\r\n          if (!config) {\r\n            return;\r\n          }\r\n          return function() {\r\n            return config.callback.apply(config.context, arguments);\r\n          };\r\n        }","code-length":78,"reference":"Get the currently registered handler for the specified name. Throws an exception if no handler is found.","result":"Create a handler function.","score":[0.0124,0.0318]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name) {\r\n          name = arguments[0];\r\n          var args = _.rest(arguments);\r\n          if (this.hasHandler(name)) {\r\n            this.getHandler(name).apply(this, args);\r\n          } else {\r\n            this.storage.addCommand(name, args);\r\n          }\r\n        }","code-length":91,"reference":"Execute a named command with the supplied args","result":"Create a command.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, hash, context) {\r\n          if (!hash) {\r\n            return;\r\n          }\r\n          context = context || this;\r\n          var method = type === \"vent\" ? \"on\" : \"setHandler\";\r\n          _.each(hash, function(fn, eventName) {\r\n            this[type][method](eventName, _.bind(fn, context));\r\n          }, this);\r\n        }","code-length":108,"reference":"Attach the handlers to a given message system `type`","result":"This[type] .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction iterateEvents(target, entity, bindings, functionCallback, stringCallback) {\r\n      if (!entity || !bindings) { return; }\r\n        if (!_.isObject(bindings)) {\r\n        throw new Marionette.Error({\r\n          message: 'Bindings must be an object or function.',\r\n          url: 'marionette.functions.html#marionettebindentityevents'\r\n        });\r\n      }\r\n        bindings = Marionette._getValue(bindings, target);\r\n        _.each(bindings, function(methods, evt) {\r\n          if (_.isFunction(methods)) {\r\n          functionCallback(target, entity, evt, methods);\r\n        } else {\r\n          stringCallback(target, entity, evt, methods);\r\n        }\r\n        });\r\n    }","code-length":197,"reference":"generic looping function","result":"Iterate over all events in an entity.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(callback, contextOverride) {\r\n      var promise = _.result(this._deferred, 'promise');\r\n        this._callbacks.push({cb: callback, ctx: contextOverride});\r\n        promise.then(function(args) {\r\n        if (contextOverride) { args.context = contextOverride; }\r\n        callback.call(args.context, args.options);\r\n      });\r\n    }","code-length":103,"reference":"Add a callback to be executed. Callbacks added here are guaranteed to execute, even if they are added after the `run` method is called.","result":"Create a new callback.","score":[0.0022,0.0227]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view, options) {\r\n      if (!this._ensureElement()) {\r\n        return;\r\n      }\r\n        this._ensureViewIsIntact(view);\r\n      Marionette.MonitorDOMRefresh(view);\r\n        var showOptions     = options || {};\r\n      var isDifferentView = view !== this.currentView;\r\n      var preventDestroy  = !!showOptions.preventDestroy;\r\n      var forceShow       = !!showOptions.forceShow;\r\n        var isChangingView = !!this.currentView;\r\n        var _shouldDestroyView = isDifferentView && !preventDestroy;\r\n        var _shouldShowView = isDifferentView || forceShow;\r\n        if (isChangingView) {\r\n        this.triggerMethod('before:swapOut', this.currentView, this, options);\r\n      }\r\n        if (this.currentView && isDifferentView) {\r\n        delete this.currentView._parent;\r\n      }\r\n        if (_shouldDestroyView) {\r\n        this.empty();\r\n        } else if (isChangingView && _shouldShowView) {\r\n        this.currentView.off('destroy', this.empty, this);\r\n      }\r\n        if (_shouldShowView) {\r\n          view.once('destroy', this.empty, this);\r\n          view._parent = this;\r\n        this._renderView(view);\r\n          if (isChangingView) {\r\n          this.triggerMethod('before:swap', view, this, options);\r\n        }\r\n          this.triggerMethod('before:show', view, this, options);\r\n        Marionette.triggerMethodOn(view, 'before:show', view, this, options);\r\n          if (isChangingView) {\r\n          this.triggerMethod('swapOut', this.currentView, this, options);\r\n        }\r\n          var attachedRegion = Marionette.isNodeAttached(this.el);\r\n          var displayedViews = [];\r\n          var attachOptions = _.extend({\r\n          triggerBeforeAttach: this.triggerBeforeAttach,\r\n          triggerAttach: this.triggerAttach\r\n        }, showOptions);\r\n          if (attachedRegion && attachOptions.triggerBeforeAttach) {\r\n          displayedViews = this._displayedViews(view);\r\n          this._triggerAttach(displayedViews, 'before:');\r\n        }\r\n          this.attachHtml(view);\r\n        this.currentView = view;\r\n          if (attachedRegion && attachOptions.triggerAttach) {\r\n          displayedViews = this._displayedViews(view);\r\n          this._triggerAttach(displayedViews);\r\n        }\r\n          if (isChangingView) {\r\n          this.triggerMethod('swap', view, this, options);\r\n        }\r\n          this.triggerMethod('show', view, this, options);\r\n        Marionette.triggerMethodOn(view, 'show', view, this, options);\r\n          return this;\r\n      }\r\n        return this;\r\n    }","code-length":726,"reference":"Displays a backbone view instance inside of the region. Handles calling the `render` method for you. Reads content directly from the `el` attribute. Also calls an optional `onShow` and `onDestroy` method on your view, just after showing or just before destroying the view, respectively. The `preventDestroy` option can be used to prevent a view from the old view being destroyed on show. The `forceShow` option can be used to force a view to be re-rendered if it's already shown in the region.","result":"Code too long,keep in 512.","score":[0.0,0.0135]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n      var view = this.currentView;\r\n        var emptyOptions = options || {};\r\n      var preventDestroy  = !!emptyOptions.preventDestroy;\r\n      if (!view) { return this; }\r\n        view.off('destroy', this.empty, this);\r\n      this.triggerMethod('before:empty', view);\r\n      if (!preventDestroy) {\r\n        this._destroyView();\r\n      }\r\n      this.triggerMethod('empty', view);\r\n        delete this.currentView;\r\n        if (preventDestroy) {\r\n        this.$el.contents().detach();\r\n      }\r\n        return this;\r\n    }","code-length":170,"reference":"Destroy the current view, if there is one. If there is no current view, it does nothing and returns immediately.","result":"Create a view to empty.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(regionDefinitions, defaults) {\r\n      regionDefinitions = Marionette._getValue(regionDefinitions, this, arguments);\r\n        return _.reduce(regionDefinitions, function(regions, definition, name) {\r\n        if (_.isString(definition)) {\r\n          definition = {selector: definition};\r\n        }\r\n        if (definition.selector) {\r\n          definition = _.defaults({}, definition, defaults);\r\n        }\r\n          regions[name] = this.addRegion(name, definition);\r\n        return regions;\r\n      }, {}, this);\r\n    }","code-length":143,"reference":"Add multiple regions using an object literal or a function that returns an object literal, where each key becomes the region name, and each value is the region definition.","result":"Create regions.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, definition) {\r\n      var region;\r\n        if (definition instanceof Marionette.Region) {\r\n        region = definition;\r\n      } else {\r\n        region = Marionette.Region.buildRegion(definition, Marionette.Region);\r\n      }\r\n        this.triggerMethod('before:add:region', name, region);\r\n        region._parent = this;\r\n      this._store(name, region);\r\n        this.triggerMethod('add:region', name, region);\r\n      return region;\r\n    }","code-length":142,"reference":"Add an individual region to the region manager, and return the region instance","result":"Create a new region.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var regions = this.getRegions();\r\n      _.each(this._regions, function(region, name) {\r\n        this._remove(name, region);\r\n      }, this);\r\n        return regions;\r\n    }","code-length":67,"reference":"Empty all regions in the region manager, and remove them","result":"Remove regions.","score":[0,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, region) {\r\n      this.triggerMethod('before:remove:region', name, region);\r\n      region.empty();\r\n      region.stopListening();\r\n        delete region._parent;\r\n      delete this._regions[name];\r\n      this.length--;\r\n      this.triggerMethod('remove:region', name, region);\r\n    }","code-length":95,"reference":"internal method to remove a region","result":"Remove a region.","score":[0.1502,0.3289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(templateId, options) {\r\n      var cachedTemplate = this.templateCaches[templateId];\r\n        if (!cachedTemplate) {\r\n        cachedTemplate = new Marionette.TemplateCache(templateId);\r\n        this.templateCaches[templateId] = cachedTemplate;\r\n      }\r\n        return cachedTemplate.load(options);\r\n    }","code-length":93,"reference":"Get the specified template by id. Either retrieves the cached version, or loads it from the DOM.","result":"Cache templates.","score":[0,0.0323]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n      if (this.compiledTemplate) {\r\n        return this.compiledTemplate;\r\n      }\r\n        var template = this.loadTemplate(this.templateId, options);\r\n      this.compiledTemplate = this.compileTemplate(template, options);\r\n        return this.compiledTemplate;\r\n    }","code-length":86,"reference":"Internal method to load the template","result":"Compile templates.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(template, data) {\r\n      if (!template) {\r\n        throw new Marionette.Error({\r\n          name: 'TemplateNotFoundError',\r\n          message: 'Cannot render the template since its false, null or undefined.'\r\n        });\r\n      }\r\n        var templateFunc = _.isFunction(template) ? template : Marionette.TemplateCache.get(template);\r\n        return templateFunc(data);\r\n    }","code-length":112,"reference":"Render a template with data. The `template` parameter is passed to the `TemplateCache` object to retrieve the template function. Override this method to provide your own custom rendering and template handling for all of Marionette.","result":"Render a template.","score":[0.0,0.059]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(target) {\r\n      target = target || {};\r\n      var templateHelpers = this.getOption('templateHelpers');\r\n      templateHelpers = Marionette._getValue(templateHelpers, this);\r\n      return _.extend(target, templateHelpers);\r\n    }","code-length":72,"reference":"Mix in template helper methods. Looks for a `templateHelpers` attribute, which can either be an object literal, or a function that returns an object literal. All methods and attributes from this object are copies to the object passed in.","result":"Create a new function .","score":[0.0003,0.0281]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(events) {\r\n      this._delegateDOMEvents(events);\r\n      this.bindEntityEvents(this.model, this.getOption('modelEvents'));\r\n      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));\r\n        _.each(this._behaviors, function(behavior) {\r\n        behavior.bindEntityEvents(this.model, behavior.getOption('modelEvents'));\r\n        behavior.bindEntityEvents(this.collection, behavior.getOption('collectionEvents'));\r\n      }, this);\r\n        return this;\r\n    }","code-length":147,"reference":"Overriding Backbone.View's delegateEvents to handle the `triggers`, `modelEvents`, and `collectionEvents` configuration","result":"Bind events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(eventsArg) {\r\n      var events = Marionette._getValue(eventsArg || this.events, this);\r\n        events = this.normalizeUIKeys(events);\r\n      if (_.isUndefined(eventsArg)) {this.events = events;}\r\n        var combinedEvents = {};\r\n        var behaviorEvents = _.result(this, 'behaviorEvents') || {};\r\n      var triggers = this.configureTriggers();\r\n      var behaviorTriggers = _.result(this, 'behaviorTriggers') || {};\r\n        _.extend(combinedEvents, behaviorEvents, events, triggers, behaviorTriggers);\r\n        Backbone.View.prototype.delegateEvents.call(this, combinedEvents);\r\n    }","code-length":171,"reference":"internal method to delegate DOM events and triggers","result":"Create a new function to create a new object.","score":[0.1219,0.0617]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      Backbone.View.prototype.undelegateEvents.apply(this, arguments);\r\n        this.unbindEntityEvents(this.model, this.getOption('modelEvents'));\r\n      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));\r\n        _.each(this._behaviors, function(behavior) {\r\n        behavior.unbindEntityEvents(this.model, behavior.getOption('modelEvents'));\r\n        behavior.unbindEntityEvents(this.collection, behavior.getOption('collectionEvents'));\r\n      }, this);\r\n        return this;\r\n    }","code-length":157,"reference":"Overriding Backbone.View's undelegateEvents to handle unbinding the `triggers`, `modelEvents`, and `collectionEvents` config","result":"Create a new view.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (this.isDestroyed) { return this; }\r\n        var args = _.toArray(arguments);\r\n        this.triggerMethod.apply(this, ['before:destroy'].concat(args));\r\n        this.isDestroyed = true;\r\n      this.triggerMethod.apply(this, ['destroy'].concat(args));\r\n        this.unbindUIElements();\r\n        this.isRendered = false;\r\n        this.remove();\r\n        _.invoke(this._behaviors, 'destroy', args);\r\n        return this;\r\n    }","code-length":141,"reference":"Default `destroy` implementation, for removing a view from the DOM and unbinding it. Regions will call this method for you. You can specify an `onDestroy` method in your view to add custom code that is called after the view is destroyed.","result":"Destroy a component.","score":[0.0,0.0134]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (!this.ui) { return; }\r\n        if (!this._uiBindings) {\r\n        this._uiBindings = this.ui;\r\n      }\r\n        var bindings = _.result(this, '_uiBindings');\r\n        this.ui = {};\r\n        _.each(bindings, function(selector, key) {\r\n        this.ui[key] = this.$(selector);\r\n      }, this);\r\n    }","code-length":116,"reference":"This method binds the elements specified in the \"ui\" hash inside the view's code with the associated jQuery selectors.","result":"Initialize ui.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var ret = Marionette._triggerMethod(this, arguments);\r\n        this._triggerEventOnBehaviors(arguments);\r\n      this._triggerEventOnParentLayout(arguments[0], _.rest(arguments));\r\n        return ret;\r\n    }","code-length":72,"reference":"import the `triggerMethod` to trigger events with corresponding methods if the method exists","result":"Trigger methods.","score":[0,0.042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var children = this._getImmediateChildren();\r\n        if (!children.length) { return children; }\r\n        return _.reduce(children, function(memo, view) {\r\n        if (!view._getNestedViews) { return memo; }\r\n        return memo.concat(view._getNestedViews());\r\n      }, children);\r\n    }","code-length":94,"reference":"Returns an array of every nested view within this view","result":"Get the nested views .","score":[0.0884,0.1053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (!this.model && !this.collection) {\r\n        return {};\r\n      }\r\n        var args = [this.model || this.collection];\r\n      if (arguments.length) {\r\n        args.push.apply(args, arguments);\r\n      }\r\n        if (this.model) {\r\n        return this.serializeModel.apply(this, args);\r\n      } else {\r\n        return {\r\n          items: this.serializeCollection.apply(this, args)\r\n        };\r\n      }\r\n    }","code-length":144,"reference":"Serialize the model or collection for the view. If a model is found, the view's `serializeModel` is called. If a collection is found, each model in the collection is serialized by calling the view's `serializeCollection` and put into an `items` array in the resulting data. If both are found, defaults to the model. You can override the `serializeData` method in your own view definition, to provide custom serialization for your view's data.","result":"Serialize a model.","score":[0.0,0.023]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var template = this.getTemplate();\r\n        if (template === false) {\r\n        return;\r\n      }\r\n        if (!template) {\r\n        throw new Marionette.Error({\r\n          name: 'UndefinedTemplateError',\r\n          message: 'Cannot render the template since it is null or undefined.'\r\n        });\r\n      }\r\n        var data = this.mixinTemplateHelpers(this.serializeData());\r\n        var html = Marionette.Renderer.render(template, data, this);\r\n      this.attachElContent(html);\r\n        return this;\r\n    }","code-length":157,"reference":"Internal method to render the template with the serialized data and template helpers via the `Marionette.Renderer` object. Throws an `UndefinedTemplateError` error if the template is any falsely value but literal `false`.","result":"Render the template.","score":[0.0,0.0355]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (this.collection) {\r\n        this.listenTo(this.collection, 'add', this._onCollectionAdd);\r\n        this.listenTo(this.collection, 'remove', this._onCollectionRemove);\r\n        this.listenTo(this.collection, 'reset', this.render);\r\n          if (this.getOption('sort')) {\r\n          this.listenTo(this.collection, 'sort', this._sortViews);\r\n        }\r\n      }\r\n    }","code-length":128,"reference":"Configured the initial events that the collection view binds to.","result":"Create a view.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(child, collection, opts) {\r\n      var index = opts.at !== undefined && (opts.index || collection.indexOf(child));\r\n        if (this.getOption('filter') || index === false) {\r\n        index = _.indexOf(this._filteredSortedModels(index), child);\r\n      }\r\n        if (this._shouldAddChild(child, index)) {\r\n        this.destroyEmptyView();\r\n        var ChildView = this.getChildView(child);\r\n        this.addChild(child, ChildView, index);\r\n      }\r\n    }","code-length":144,"reference":"Handle a child added to the collection","result":"Create a child view.","score":[0.2134,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var models = this._filteredSortedModels();\r\n        var orderChanged = _.find(models, function(item, index) {\r\n        var view = this.children.findByModel(item);\r\n        return !view || view._index !== index;\r\n      }, this);\r\n        if (orderChanged) {\r\n        this.resortView();\r\n      }\r\n    }","code-length":104,"reference":"Internal method. This checks for any changes in the order of the collection. If the index of any view doesn't match, it will render.","result":"Create a view.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      this.destroyEmptyView();\r\n      this.destroyChildren({checkEmpty: false});\r\n        if (this.isEmpty(this.collection)) {\r\n        this.showEmptyView();\r\n      } else {\r\n        this.triggerMethod('before:render:collection', this);\r\n        this.startBuffering();\r\n        this.showCollection();\r\n        this.endBuffering();\r\n        this.triggerMethod('render:collection', this);\r\n          if (this.children.isEmpty() && this.getOption('filter')) {\r\n          this.showEmptyView();\r\n        }\r\n      }\r\n    }","code-length":162,"reference":"Internal method. Separated so that CompositeView can have more control over events being triggered, around the rendering process","result":"Create a new instance of the view.","score":[0.0336,0.0296]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var ChildView;\r\n        var models = this._filteredSortedModels();\r\n        _.each(models, function(child, index) {\r\n        ChildView = this.getChildView(child);\r\n        this.addChild(child, ChildView, index);\r\n      }, this);\r\n    }","code-length":85,"reference":"Internal method to loop through collection and show each child view.","result":"Create child views.","score":[0.0284,0.049]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(addedAt) {\r\n      var viewComparator = this.getViewComparator();\r\n      var models = this.collection.models;\r\n      addedAt = Math.min(Math.max(addedAt, 0), models.length - 1);\r\n        if (viewComparator) {\r\n        var addedModel;\r\n        if (addedAt) {\r\n          addedModel = models[addedAt];\r\n          models = models.slice(0, addedAt).concat(models.slice(addedAt + 1));\r\n        }\r\n        models = this._sortModelsBy(models, viewComparator);\r\n        if (addedModel) {\r\n          models.splice(addedAt, 0, addedModel);\r\n        }\r\n      }\r\n        if (this.getOption('filter')) {\r\n        models = _.filter(models, function(model, index) {\r\n          return this._shouldAddChild(model, index);\r\n        }, this);\r\n      }\r\n        return models;\r\n    }","code-length":242,"reference":"Allow the collection to be sorted by a custom view comparator","result":"Add a child to the collection.","score":[0.1104,0.1429]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var EmptyView = this.getEmptyView();\r\n        if (EmptyView && !this._showingEmptyView) {\r\n        this.triggerMethod('before:render:empty');\r\n          this._showingEmptyView = true;\r\n        var model = new Backbone.Model();\r\n        this.addEmptyView(model, EmptyView);\r\n          this.triggerMethod('render:empty');\r\n      }\r\n    }","code-length":114,"reference":"Internal method to show an empty view in place of a collection of child views, when the collection is empty","result":"Create the empty view.","score":[0.007,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(child, ChildView, index) {\r\n      var childViewOptions = this.getOption('childViewOptions');\r\n      childViewOptions = Marionette._getValue(childViewOptions, this, [child, index]);\r\n        var view = this.buildChildView(child, ChildView, childViewOptions);\r\n        this._updateIndices(view, true, index);\r\n        this.triggerMethod('before:add:child', view);\r\n      this._addChildView(view, index);\r\n      this.triggerMethod('add:child', view);\r\n        view._parent = this;\r\n        return view;\r\n    }","code-length":158,"reference":"Render the child's view and add it to the HTML for the collection view at a given index. This will also update the indices of later views in the collection in order to keep the children in sync with the collection.","result":"Build child views.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view, index) {\r\n      var canTriggerAttach = this._isShown && !this.isBuffering && Marionette.isNodeAttached(this.el);\r\n      var nestedViews;\r\n        this.proxyChildEvents(view);\r\n        view.once('render', function() {\r\n        if (this._isShown && !this.isBuffering) {\r\n          Marionette.triggerMethodOn(view, 'before:show', view);\r\n        }\r\n          if (canTriggerAttach && this._triggerBeforeAttach) {\r\n          nestedViews = this._getViewAndNested(view);\r\n          this._triggerMethodMany(nestedViews, this, 'before:attach');\r\n        }\r\n      }, this);\r\n        this.children.add(view);\r\n      this.renderChildView(view, index);\r\n        if (canTriggerAttach && this._triggerAttach) {\r\n        nestedViews = this._getViewAndNested(view);\r\n        this._triggerMethodMany(nestedViews, this, 'attach');\r\n      }\r\n      if (this._isShown && !this.isBuffering) {\r\n        Marionette.triggerMethodOn(view, 'show', view);\r\n      }\r\n    }","code-length":302,"reference":"Internal Method. Add the view to children and render it at the given index.","result":"Create a view .","score":[0.0262,0.0385]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view, index) {\r\n      if (!view.supportsRenderLifecycle) {\r\n        Marionette.triggerMethodOn(view, 'before:render', view);\r\n      }\r\n      view.render();\r\n      if (!view.supportsRenderLifecycle) {\r\n        Marionette.triggerMethodOn(view, 'render', view);\r\n      }\r\n      this.attachHtml(this, view, index);\r\n      return view;\r\n    }","code-length":119,"reference":"render the child view","result":"Attach html to a view.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(child, ChildViewClass, childViewOptions) {\r\n      var options = _.extend({model: child}, childViewOptions);\r\n      var childView = new ChildViewClass(options);\r\n      Marionette.MonitorDOMRefresh(childView);\r\n      return childView;\r\n    }","code-length":79,"reference":"Build a `childView` for a model in the collection.","result":"Create child views.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view) {\r\n      if (!view) { return view; }\r\n        this.triggerMethod('before:remove:child', view);\r\n        if (!view.supportsDestroyLifecycle) {\r\n        Marionette.triggerMethodOn(view, 'before:destroy', view);\r\n      }\r\n      if (view.destroy) {\r\n        view.destroy();\r\n      } else {\r\n        view.remove();\r\n      }\r\n      if (!view.supportsDestroyLifecycle) {\r\n        Marionette.triggerMethodOn(view, 'destroy', view);\r\n      }\r\n        delete view._parent;\r\n      this.stopListening(view);\r\n      this.children.remove(view);\r\n      this.triggerMethod('remove:child', view);\r\n        this._updateIndices(view, false);\r\n        return view;\r\n    }","code-length":213,"reference":"Remove the child view and destroy it. This function also updates the indices of later views in the collection in order to keep the children in sync with the collection.","result":"Remove a view from the DOM.","score":[0.0047,0.0543]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var elBuffer = document.createDocumentFragment();\r\n      _.each(this._bufferedChildren, function(b) {\r\n        elBuffer.appendChild(b.el);\r\n      });\r\n      return elBuffer;\r\n    }","code-length":69,"reference":"Create a fragment buffer from the currently buffered children","result":"Create a new buffer.","score":[0.1294,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(collectionView, childView, index) {\r\n      if (collectionView.isBuffering) {\r\n        collectionView._bufferedChildren.splice(index, 0, childView);\r\n      } else {\r\n        if (!collectionView._insertBefore(childView, index)) {\r\n          collectionView._insertAfter(childView);\r\n        }\r\n      }\r\n    }","code-length":98,"reference":"Append the HTML to the collection's `el`. Override this method to do something other than `.append`.","result":"Insert a child view into a collection.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(childView, index) {\r\n      var currentView;\r\n      var findPosition = this.getOption('sort') && (index < this.children.length - 1);\r\n      if (findPosition) {\r\n        currentView = this.children.find(function(view) {\r\n          return view._index === index + 1;\r\n        });\r\n      }\r\n        if (currentView) {\r\n        currentView.$el.before(childView.el);\r\n        return true;\r\n      }\r\n        return false;\r\n    }","code-length":140,"reference":"Internal method. Check whether we need to insert the view into the correct position.","result":"Sort the views.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (this.isDestroyed) { return this; }\r\n        this.triggerMethod('before:destroy:collection');\r\n      this.destroyChildren({checkEmpty: false});\r\n      this.triggerMethod('destroy:collection');\r\n        return Marionette.View.prototype.destroy.apply(this, arguments);\r\n    }","code-length":91,"reference":"Handle cleanup and other destroying needs for the collection of views","result":"Destroy the view.","score":[0.0284,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n      var destroyOptions = options || {};\r\n      var shouldCheckEmpty = true;\r\n      var childViews = this.children.map(_.identity);\r\n        if (!_.isUndefined(destroyOptions.checkEmpty)) {\r\n        shouldCheckEmpty = destroyOptions.checkEmpty;\r\n      }\r\n        this.children.each(this.removeChildView, this);\r\n        if (shouldCheckEmpty) {\r\n        this.checkEmpty();\r\n      }\r\n      return childViews;\r\n    }","code-length":134,"reference":"Destroy the child views that this collection view is holding on to, if any","result":"Destroy a view.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n          if (this.collection) {\r\n        this.listenTo(this.collection, 'add', this._onCollectionAdd);\r\n        this.listenTo(this.collection, 'remove', this._onCollectionRemove);\r\n        this.listenTo(this.collection, 'reset', this._renderChildren);\r\n          if (this.getOption('sort')) {\r\n          this.listenTo(this.collection, 'sort', this._sortViews);\r\n        }\r\n      }\r\n    }","code-length":129,"reference":"Configured the initial events that the composite view binds to. Override this method to prevent the initial events, or to add your own initial events.","result":"Render the collection.","score":[0.0003,0.0219]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var data = {};\r\n        if (this.model) {\r\n        data = _.partial(this.serializeModel, this.model).apply(this, arguments);\r\n      }\r\n        return data;\r\n    }","code-length":67,"reference":"Serialize the model for the view. You can override the `serializeData` method in your own view definition, to provide custom serialization for your view's data.","result":"Serialize the model.","score":[0.0004,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      this._ensureViewIsIntact();\r\n      this._isRendering = true;\r\n      this.resetChildViewContainer();\r\n        this.triggerMethod('before:render', this);\r\n        this._renderTemplate();\r\n      this._renderChildren();\r\n        this._isRendering = false;\r\n      this.isRendered = true;\r\n      this.triggerMethod('render', this);\r\n      return this;\r\n    }","code-length":115,"reference":"Renders the model and the collection.","result":"Render the view.","score":[0.1502,0.1754]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      var data = {};\r\n      data = this.serializeData();\r\n      data = this.mixinTemplateHelpers(data);\r\n        this.triggerMethod('before:render:template');\r\n        var template = this.getTemplate();\r\n      var html = Marionette.Renderer.render(template, data, this);\r\n      this.attachElContent(html);\r\n        this.bindUIElements();\r\n      this.triggerMethod('render:template');\r\n    }","code-length":126,"reference":"Render the root template that the children views are appended to","result":"Render templates.","score":[0.0056,0.0495]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n      options = options || {};\r\n        this._firstRender = true;\r\n      this._initializeRegions(options);\r\n        Marionette.ItemView.call(this, options);\r\n    }","code-length":64,"reference":"Ensure the regions are available when the `initialize` method is called.","result":"Create a new view.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      this._ensureViewIsIntact();\r\n        if (this._firstRender) {\r\n        this._firstRender = false;\r\n      } else {\r\n        this._reInitializeRegions();\r\n      }\r\n        return Marionette.ItemView.prototype.render.apply(this, arguments);\r\n    }","code-length":89,"reference":"LayoutView's render will use the existing region objects the first time it is called. Subsequent calls will destroy the views that the regions are showing and then reset the `el` for the regions to the newly rendered DOM elements.","result":"Render the item.","score":[0.0,0.0282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (this.isDestroyed) { return this; }\r\n      if (this.getOption('destroyImmediate') === true) {\r\n        this.$el.remove();\r\n      }\r\n      this.regionManager.destroy();\r\n      return Marionette.ItemView.prototype.destroy.apply(this, arguments);\r\n    }","code-length":93,"reference":"Handle destroying regions, and then destroy the view itself.","result":"Destroy the itemView.","score":[0.0553,0.2232]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(regions) {\r\n      var defaults = {\r\n        regionClass: this.getOption('regionClass'),\r\n        parentEl: _.partial(_.result, this, 'el')\r\n      };\r\n        return this.regionManager.addRegions(regions, defaults);\r\n    }","code-length":77,"reference":"internal method to build regions","result":"Create a new region.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n      var regions;\r\n      this._initRegionManager();\r\n        regions = Marionette._getValue(this.regions, this, [options]) || {};\r\n        var regionOptions = this.getOption.call(options, 'regions');\r\n        regionOptions = Marionette._getValue(regionOptions, this, [options]);\r\n        _.extend(regions, regionOptions);\r\n        regions = this.normalizeUIValues(regions, ['selector', 'el']);\r\n        this.addRegions(regions);\r\n    }","code-length":138,"reference":"Internal method to initialize the regions that have been defined in a `regions` attribute on this layoutView.","result":"Initialize the plugin.","score":[0.0038,0.1202]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      this.regionManager = this.getRegionManager();\r\n      this.regionManager._parent = this;\r\n        this.listenTo(this.regionManager, 'before:add:region', function(name) {\r\n        this.triggerMethod('before:add:region', name);\r\n      });\r\n        this.listenTo(this.regionManager, 'add:region', function(name, region) {\r\n        this[name] = region;\r\n        this.triggerMethod('add:region', name, region);\r\n      });\r\n        this.listenTo(this.regionManager, 'before:remove:region', function(name) {\r\n        this.triggerMethod('before:remove:region', name);\r\n      });\r\n        this.listenTo(this.regionManager, 'remove:region', function(name, region) {\r\n        delete this[name];\r\n        this.triggerMethod('remove:region', name, region);\r\n      });\r\n    }","code-length":240,"reference":"Internal method to initialize the region manager and all regions in it","result":"Create a new instance of the class.","score":[0.0791,0.0435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options, key) {\r\n        if (options.behaviorClass) {\r\n          return options.behaviorClass;\r\n        }\r\n          return Marionette._getValue(Behaviors.behaviorsLookup, this, [options, key])[key];\r\n      }","code-length":71,"reference":"Takes care of getting the behavior class given options and a key. If a user passes in options.behaviorClass default to using that. Otherwise delegate the lookup to the users `behaviorsLookup` implementation.","result":"Create a behavior class .","score":[0.0021,0.09]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(view, behaviors) {\r\n        return _.chain(behaviors).map(function(options, key) {\r\n          var BehaviorClass = Behaviors.getBehaviorClass(options, key);\r\n            var behavior = new BehaviorClass(options, view);\r\n          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));\r\n            return [behavior].concat(nestedBehaviors);\r\n        }).flatten().value();\r\n      }","code-length":119,"reference":"Iterate over the behaviors object, for each behavior instantiate it and get its grouped behaviors.","result":"Parse behaviors.","score":[0.0008,0.0365]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(behavior, i) {\r\n        var triggersHash = _.clone(_.result(behavior, 'triggers')) || {};\r\n          triggersHash = Marionette.normalizeUIKeys(triggersHash, getBehaviorsUI(behavior));\r\n          _.each(triggersHash, _.bind(this._setHandlerForBehavior, this, behavior, i));\r\n      }","code-length":93,"reference":"Internal method to build all trigger handlers for a given behavior","result":"Set handlers for all behaviors.","score":[0.1133,0.2457]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(behavior, i, eventName, trigger) {\r\n        var triggerKey = trigger.replace(\/^\\S+\/, function(triggerName) {\r\n          return triggerName + '.' + 'behaviortriggers' + i;\r\n        });\r\n          this._triggers[triggerKey] = this._view._buildViewTrigger(eventName);\r\n      }","code-length":89,"reference":"Internal method to create and assign the trigger handler for a given behavior","result":"Build the view trigger objects.","score":[0.0577,0.082]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(routeName, routeArgs) {\r\n      if (_.isFunction(this.onRoute)) {\r\n        var routePath = _.invert(this.getOption('appRoutes'))[routeName];\r\n        this.onRoute(routeName, routePath, routeArgs);\r\n      }\r\n    }","code-length":81,"reference":"process the route event and trigger the onRoute method call, if it exists","result":"Route the app.","score":[0.0146,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(moduleNames, moduleDefinition) {\r\n        var ModuleClass = Marionette.Module.getClass(moduleDefinition);\r\n        var args = _.toArray(arguments);\r\n      args.unshift(this);\r\n        return ModuleClass.create.apply(ModuleClass, args);\r\n    }","code-length":78,"reference":"Create a module, attached to the application","result":"Create a module.","score":[0.1522,0.2841]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n      var regions = _.isFunction(this.regions) ? this.regions(options) : this.regions || {};\r\n        this._initRegionManager();\r\n        var optionRegions = Marionette.getOption(options, 'regions');\r\n        if (_.isFunction(optionRegions)) {\r\n        optionRegions = optionRegions.call(this, options);\r\n      }\r\n        _.extend(regions, optionRegions);\r\n        this.addRegions(regions);\r\n        return this;\r\n    }","code-length":134,"reference":"Internal method to initialize the regions that have been defined in a `regions` attribute on the application instance","result":"Initialize the regions.","score":[0.0028,0.0606]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      this._regionManager = this.getRegionManager();\r\n      this._regionManager._parent = this;\r\n        this.listenTo(this._regionManager, 'before:add:region', function() {\r\n        Marionette._triggerMethod(this, 'before:add:region', arguments);\r\n      });\r\n        this.listenTo(this._regionManager, 'add:region', function(name, region) {\r\n        this[name] = region;\r\n        Marionette._triggerMethod(this, 'add:region', arguments);\r\n      });\r\n        this.listenTo(this._regionManager, 'before:remove:region', function() {\r\n        Marionette._triggerMethod(this, 'before:remove:region', arguments);\r\n      });\r\n        this.listenTo(this._regionManager, 'remove:region', function(name) {\r\n        delete this[name];\r\n        Marionette._triggerMethod(this, 'remove:region', arguments);\r\n      });\r\n    }","code-length":254,"reference":"Internal method to set up the region manager","result":"Create a new instance of the class.","score":[0.14,0.0633]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      this.channelName = _.result(this, 'channelName') || 'global';\r\n      this.channel = _.result(this, 'channel') || Backbone.Wreqr.radio.channel(this.channelName);\r\n      this.vent = _.result(this, 'vent') || this.channel.vent;\r\n      this.commands = _.result(this, 'commands') || this.channel.commands;\r\n      this.reqres = _.result(this, 'reqres') || this.channel.reqres;\r\n    }","code-length":138,"reference":"Internal method to setup the Wreqr.radio channel","result":"Create a new radio.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n      if (!this._isInitialized) { return; }\r\n      this._isInitialized = false;\r\n        this.triggerMethod('before:stop');\r\n        _.invoke(this.submodules, 'stop');\r\n        this._finalizerCallbacks.run(undefined, this);\r\n        this._initializerCallbacks.reset();\r\n      this._finalizerCallbacks.reset();\r\n        this.triggerMethod('stop');\r\n    }","code-length":112,"reference":"Stop this module by running its finalizers and then stop all of the sub-modules for this module","result":"Initialize the module.","score":[0.0038,0.0321]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(app, moduleNames, moduleDefinition) {\r\n      var module = app;\r\n        var customArgs = _.drop(arguments, 3);\r\n        moduleNames = moduleNames.split('.');\r\n      var length = moduleNames.length;\r\n        var moduleDefinitions = [];\r\n      moduleDefinitions[length - 1] = moduleDefinition;\r\n        _.each(moduleNames, function(moduleName, i) {\r\n        var parentModule = module;\r\n        module = this._getModule(parentModule, moduleName, app, moduleDefinition);\r\n        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);\r\n      }, this);\r\n        return module;\r\n    }","code-length":173,"reference":"Create a module, hanging off the app parameter as the parent object.","result":"Create a module.","score":[0.0287,0.1689]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(parentModule, module, def, args) {\r\n      var fn = this._getDefine(def);\r\n      var startWithParent = this._getStartWithParent(def, module);\r\n        if (fn) {\r\n        module.addDefinition(fn, args);\r\n      }\r\n        this._addStartWithParent(parentModule, module, startWithParent);\r\n    }","code-length":100,"reference":"Add the module definition and add a startWithParent initializer function. This is complicated because module definitions are heavily overloaded and support an anonymous function, module class, or options object","result":"Define a module.","score":[0.0001,0.0189]}
{"code":"\/*is used to<extra_id_0>\r\nfunction _sigName(src) {\r\n  if (!_.isFunction(src)) return ''\r\n  let ret = _.trim(_.replace(src.toString(), 'function', ''))\r\n  ret = ret.substr(0, ret.indexOf('('))\r\n  return ret || ''\r\n}","code-length":78,"reference":"returns function signature name","result":"Generate sigName .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n                var components = this.path.split('\/');\r\n                for (var i = components.length - 1; i >= 0; --i) {\r\n                    if (components[i].length > 0) {\r\n                        return components[i];\r\n                    }\r\n                }\r\n                return '\/';\r\n            }","code-length":88,"reference":"Returns the name of the entry, excluding the path leading to it.\n\n","result":"Create a new path.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                if (config.parent == null) {\r\n                    Ext.Logger.error('Ext.device.filesystem.Entry#moveTo: You must specify a new `parent` of the entry.');\r\n                    return null;\r\n                }\r\n                var me = this;\r\n                this.getEntry(\r\n                    {\r\n                        options: config.options || {},\r\n                        success: function(sourceEntry) {\r\n                            config.parent.getEntry(\r\n                                {\r\n                                    options: config.options || {},\r\n                                    success: function(destinationEntry) {\r\n                                        if (config.copy) {\r\n                                            sourceEntry.copyTo(destinationEntry, config.newName, function(entry) {\r\n                                                config.success.call(\r\n                                                    config.scope || me,\r\n                                                    entry.isDirectory ? Ext.create('Ext.device.filesystem.DirectoryEntry', entry.fullPath, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', entry.fullPath, me.fileSystem)\r\n                                                );\r\n                                            }, config.failure);\r\n                                        } else {\r\n                                            sourceEntry.moveTo(destinationEntry, config.newName, function(entry) {\r\n                                                config.success.call(\r\n                                                    config.scope || me,\r\n                                                    entry.isDirectory ? Ext.create('Ext.device.filesystem.DirectoryEntry', entry.fullPath, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', entry.fullPath, me.fileSystem)\r\n                                                );\r\n                                            }, config.failure);\r\n                                        }\r\n                                    },\r\n                                    failure: config.failure\r\n                                }\r\n                            );\r\n                        },\r\n                        failure: config.failure\r\n                    }\r\n                );\r\n            }","code-length":440,"reference":"Moves the entry to a different location on the file system.\n\n","result":"Move a file or directory.","score":[0.0861,0.1442]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                if (!config.success) {\r\n                    Ext.Logger.error('Ext.device.filesystem.Entry#getParent: You must specify a `success` callback.');\r\n                    return null;\r\n                }\r\n                var me = this;\r\n                this.getEntry(\r\n                    {\r\n                        options: config.options || {},\r\n                        success: function(entry) {\r\n                            entry.getParent(\r\n                                function(parentEntry) {\r\n                                    config.success.call(\r\n                                        config.scope || me,\r\n                                        parentEntry.isDirectory\r\n                                            ? Ext.create('Ext.device.filesystem.DirectoryEntry', parentEntry.fullPath, me.fileSystem)\r\n                                            : Ext.create('Ext.device.filesystem.FileEntry', parentEntry.fullPath, me.fileSystem)\r\n                                    )\r\n                                },\r\n                                config.failure\r\n                            )\r\n                        },\r\n                        failure: config.failure\r\n                    }\r\n                )\r\n            }","code-length":250,"reference":"Looks up the parent directory containing the entry.\n\n","result":"Create a new function to create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                var me = this;\r\n                var callback = config.success;\r\n                if ((config.options && config.options.create) && this.path) {\r\n                    var folders = this.path.split(\"\/\");\r\n                    if (folders[0] == '.' || folders[0] == '') {\r\n                        folders = folders.slice(1);\r\n                    }\r\n                    var recursiveCreation = function(dirEntry) {\r\n                        if (folders.length) {\r\n                            dirEntry.getDirectory(folders.shift(), config.options, recursiveCreation, config.failure);\r\n                        } else {\r\n                            callback(dirEntry);\r\n                        }\r\n                    };\r\n                    recursiveCreation(this.fileSystem.fs.root);\r\n                } else {\r\n                    this.fileSystem.fs.root.getDirectory(this.path, config.options,\r\n                        function(directory) {\r\n                            config.success.call(config.scope || me, directory);\r\n                        },\r\n                        config.failure\r\n                    );\r\n                }\r\n            }","code-length":262,"reference":"Requests a Directory from the Local File System\n\n","result":"Create a directory.","score":[0.0771,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                var me = this;\r\n                var originalConfig = Ext.applyIf({}, config);\r\n                if (this.fileSystem) {\r\n                    var failure = function(evt) {\r\n                        if ((config.options && config.options.create) && Ext.isString(this.path)) {\r\n                            var folders = this.path.split(\"\/\");\r\n                            if (folders[0] == '.' || folders[0] == '') {\r\n                                folders = folders.slice(1);\r\n                            }\r\n                            if (folders.length > 1 && !config.recursive === true) {\r\n                                folders.pop();\r\n                                var dirEntry = Ext.create('Ext.device.filesystem.DirectoryEntry', folders.join(\"\/\"), me.fileSystem);\r\n                                dirEntry.getEntry(\r\n                                    {\r\n                                        options: config.options,\r\n                                        success: function() {\r\n                                            originalConfig.recursive = true;\r\n                                            me.getEntry(originalConfig);\r\n                                        },\r\n                                        failure: config.failure\r\n                                    }\r\n                                );\r\n                            } else {\r\n                                if (config.failure) {\r\n                                    config.failure.call(config.scope || me, evt);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (config.failure) {\r\n                                config.failure.call(config.scope || me, evt);\r\n                            }\r\n                        }\r\n                    };\r\n                    this.fileSystem.fs.root.getFile(this.path, config.options || null,\r\n                        function(fileEntry) {\r\n                            fileEntry.file(\r\n                                function(file) {\r\n                                    me.length = file.size;\r\n                                    originalConfig.success.call(config.scope || me, fileEntry);\r\n                                },\r\n                                function(error) {\r\n                                    failure.call(config.scope || me, error);\r\n                                }\r\n                            );\r\n                        },\r\n                        function(error) {\r\n                            failure.call(config.scope || me, error);\r\n                        }\r\n                    );\r\n                } else {\r\n                    config.failure({code: -1, message: \"FileSystem not Initialized\"});\r\n                }\r\n            }","code-length":545,"reference":"Requests a File Handle from the Local File System\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                if (config.size == null) {\r\n                    Ext.Logger.error('Ext.device.filesystem.FileEntry#write: You must specify a `size` of the file.');\r\n                    return null;\r\n                }\r\n                var me = this;\r\n                this.getEntry(\r\n                    {\r\n                        success: function(fileEntry) {\r\n                            fileEntry.createWriter(\r\n                                function(writer) {\r\n                                    writer.truncate(config.size);\r\n                                    config.success.call(config.scope || me, me);\r\n                                },\r\n                                function(error) {\r\n                                    config.failure.call(config.scope || me, error)\r\n                                }\r\n                            )\r\n                        },\r\n                        failure: function(error) {\r\n                            config.failure.call(config.scope || me, error)\r\n                        }\r\n                    }\r\n                )\r\n            }","code-length":230,"reference":"Truncates or extends the file to the specified size in bytes.\nIf the file is extended, the added bytes are null bytes.\n\n","result":"Write a file.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (obj) {\r\n    const keys = _.sortBy(_.keys(obj), function (key) {\r\n      return key;\r\n    });\r\n    return _.zipObject(keys, _.map(keys, function (key) {\r\n      return obj[key];\r\n    }));\r\n  }","code-length":81,"reference":"sorts keys for better readablity","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(err) {\r\n      if (err) return done(err);\r\n      var ret;\r\n      if (typeof leave == 'function') {\r\n        try {\r\n          ret = leave.call(this, child, parent);\r\n        } catch (err) {\r\n          return done(err);\r\n        }\r\n      }\r\n      done(null, ret);\r\n    }","code-length":102,"reference":"all dependencies done","result":"Call the leave function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction MultiKeyCache(options) {\r\n  options = options || {};\r\n  var self = this;\r\n  var dispose = options.dispose;\r\n  options.dispose = function (key, value) {\r\n    self._dispose(key);\r\n    if (dispose) { dispose(key, value); }\r\n  };\r\n  this.cache = new LRU(options);\r\n  this._keyMap = {};\r\n}","code-length":117,"reference":"Multi-Key LRU cache.\n","result":"Create a cache.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction pipe() {\r\n    for (var _len6 = arguments.length, fs = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\r\n      fs[_key6] = arguments[_key6];\r\n    }\r\n    return function () {\r\n      var _this3 = this;\r\n      var first = fs.shift();\r\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\r\n        args[_key7] = arguments[_key7];\r\n      }\r\n      return fs.reduce(function (acc, f) {\r\n        return f.call(_this3, acc);\r\n      }, first.apply(this, args));\r\n    };\r\n  }","code-length":209,"reference":"pipe Forward function composition.","result":"Create a pipe function.","score":[0.3195,0.125]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createRawHtml( createTemplateFn, templateLanguage, elCommentConfig, dataAttributes ) {\r\n    var comment = elCommentConfig.noComment ? \"\" : \"<!-- \" + elCommentConfig.createContent( dataAttributes ) + \" -->\",\r\n        insertion = elCommentConfig.among ? comment : \"\",\r\n        isLeading = ! elCommentConfig.trailing && !elCommentConfig.among,\r\n        isTrailing = elCommentConfig.trailing,\r\n        baseTemplate = createTemplateFn( templateLanguage, insertion );\r\n    return isLeading ? comment + baseTemplate : isTrailing ? baseTemplate + comment : baseTemplate;\r\n}","code-length":152,"reference":"Creates a raw HTML string for a template. A comment containing the el configuration can be inserted into it.\n\nBy default, the comment is inserted at the beginning of the HTML string.\n\n","result":"Create the raw html .","score":[0.0013,0.0683]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createComplexTemplate ( templateLanguage, options ) {\r\n    var t = getTemplateLanguageConstructs( templateLanguage ),\r\n        indent = options && options.indentation || \"\",\r\n        insert = options && options.insertion || \"\",\r\n        lines = [\r\n            '<!-- top-level comment (single line) -->',\r\n            '<!--',\r\n            '  top-level',\r\n            '  comment',\r\n            '  (multi-line)',\r\n            '-->',\r\n            t.if,\r\n            '<p>This is a %%paragraph',\r\n            'Some random %%text&& with different line breaks.<br><br\/><br \/>',\r\n            t.else,\r\n            '<h1 class=\"header\">This is a %%header&&<\/h1>    ',\r\n            t.endIf,\r\n            t.if,\r\n            '<\/p>',\r\n            t.endIf,\r\n            insert,\r\n            'Some top-level %%text&&, not wrapped in a tag.<br><br\/><br \/>',\r\n            '<!-- comment containing a <div> tag -->',\r\n            \"<\" + \"script>alert( 'foo' );<\/\" + \"script>\",\r\n            '<p class=\"significantWhitespaceExpected\">',\r\n            '  some text  <\/p>',\r\n            '<%%tagName&& %%attrs&&>lorem ipsum<\/%%tagName&&>',\r\n            '<p><h1>Invalid nesting<\/h1><\/p>',\r\n            t.partial,\r\n            '<dl class=\"%%dl_class&&\">',\r\n            '  ' + t.loop,\r\n            '  <dt class=\"dtclass\">%%dd_name&&<\/dt>',\r\n            '  <dd class=\"ddclass\">%%dd_content&&<\/dd>',\r\n            '  ' + t.endLoop,\r\n            '<\/dl>'\r\n        ],\r\n        innerContent = _.map( lines, function ( line ) {\r\n            return indent + line;\r\n        } ).join( \"\\n\" );\r\n    return innerContent.replace( \/%%\/g, t.startDelimiter ).replace( \/&&\/g, t.endDelimiter );\r\n}","code-length":532,"reference":"Creates the content of a complex template. It should contain as many pitfalls for correct processing as possible.\n\nFeatures:\n\n- has a top-level comment (single line)\n- has a top-level comment (multi-line)\n- has a comment containing a tag\n- has numerous top-level tags\n- has text at top level, not enclosed in another tag\n- has tags nested in invalid ways, creating invalid HTML (<h1> inside <p>)\n- has significant whitespace which must be preserved\n- has template vars inside a tag itself (defining attributes)\n- has a template var define the tag type\n- has templating instructions (if\/else)\n- has a script tag inside the template, containing Javascript\n- has a reference to a partial template\n\nNB For ES6 templates, only the start and end delimiters used for a variable are supported, other constructs (if, loop,\npartial) are omitted here.\n\n","result":"Code too long,keep in 512.","score":[0.0,0.0039]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getTemplateLanguageConstructs ( templateLanguage ) {\r\n    var constructs;\r\n    switch ( templateLanguage.toLowerCase() ) {\r\n        case \"handlebars\":\r\n            constructs = {\r\n                startDelimiter: \"{{\",\r\n                endDelimiter: \"}}\",\r\n                if: \"{{#if isActive}}\",\r\n                else: \"{{else}}\",\r\n                endIf: \"{{\/if}}\",\r\n                loop: \"{{#each looped as |value index|}}\",\r\n                endLoop: \"{{\/each}}\",\r\n                partial: '{{> userMessage tagName=\"h2\" }}'\r\n            };\r\n            break;\r\n        case \"ejs\":\r\n            constructs = {\r\n                startDelimiter: \"<%= \",\r\n                endDelimiter: \" %>\",\r\n                if: \"<% if (isActive) { %>\",\r\n                else: \"<% } else { %>\",\r\n                endIf: \"<% } %>\",\r\n                loop: \"<% looped.forEach(function(item) { %>\",\r\n                endLoop: \"<% }); %>\",\r\n                partial: \"<%- include('user\/show', {user: user}); %>\"\r\n            };\r\n            break;\r\n        case \"es6\":\r\n            constructs = {\r\n                startDelimiter: \"${\",\r\n                endDelimiter: \"}\",\r\n                if: \"\",\r\n                else: \"\",\r\n                endIf: \"\",\r\n                loop: \"\",\r\n                endLoop: \"\",\r\n                partial: \"\"\r\n            };\r\n            break;\r\n        default:\r\n            throw new Error( 'Unsupported template language \"' + templateLanguage + '\"' );\r\n    }\r\n    return constructs;\r\n}","code-length":405,"reference":"Returns the language constructs for a given template language, for use in template creation.\n\nNB For ES6 templates, only the start and end delimiters used for a variable are supported, other constructs (if, loop,\npartial) are omitted here. Empty strings are returned for the instead.\n\n","result":"Generate the template language constructs.","score":[0.0001,0.0366]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineModel(modelType, options) {\r\n  var primaryAttributes;\r\n  var attributes;\r\n  var prototype;\r\n  var staticProto;\r\n  var ModelConstructor;\r\n  var typeName;\r\n  var namespace;\r\n  if (types.isValidType(modelType).indexes) {\r\n    throw ModelException('Model type cannot be an array `{{type}}`', null, null, { type: String(modelType) });\r\n  } else if (models[modelType]) {\r\n    throw ModelException('Model already defined `{{type}}`', null, null, { type: String(modelType) });\r\n  }\r\n  options = options || {};\r\n  primaryAttributes = [];\r\n  namespace = _getNamespace(modelType);\r\n  typeName = _getTypeName(modelType);\r\n  attributes = _prepareAttributes(options.attributes || {}, primaryAttributes);\r\n  prototype = _preparePrototype(options.methods || {}, primaryAttributes, modelType, namespace, typeName);\r\n  staticProto = _prepareStaticProto(options.staticMethods || {}, primaryAttributes, options.attributes, prototype._type);\r\n  ModelConstructor = Function('Model, events, attributes',\r\n    'return function ' + typeName + 'Model(data) { ' +\r\n      'if (!(this instanceof ' + typeName + 'Model)){' +\r\n        'return new ' + typeName + 'Model(data);' +\r\n      '}' +\r\n      (attributes ? 'Object.defineProperties(this, attributes);' : '') +\r\n      'events.emit(\"create\", data);' +\r\n      'Model.call(this, data);' +\r\n    ' }'\r\n  )(Model, events, attributes);\r\n  util.inherits(ModelConstructor, Model);\r\n  Object.defineProperties(ModelConstructor.prototype, prototype);\r\n  Object.defineProperties(ModelConstructor, staticProto);\r\n  if (!types.isDefined(modelType)) {\r\n    types.define(modelType, options.typeValidator || _modelTypeValidator(ModelConstructor));\r\n  }\r\n  models[modelType] = ModelConstructor;\r\n  events.emit('define', {\r\n    modelType: modelType,\r\n    namespace: namespace,\r\n    typeName: typeName,\r\n    attributes: attributes,\r\n    constructor: ModelConstructor,\r\n    options: options\r\n  });\r\n  for (var attr in attributes) {\r\n    Object.freeze(attributes[attr]);\r\n  }\r\n  if (options.attributes) {\r\n    Object.freeze(options.attributes);\r\n  }\r\n  if (attributes) {\r\n    Object.freeze(attributes);\r\n  }\r\n  Object.freeze(primaryAttributes);\r\n","code-length":637,"reference":"Define a new model prototype.\n\nThis will define a new model\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Model(data) {\r\n  var attributes = this.__proto__.constructor.attributes;\r\n  var i, ilen;\r\n  var dirty = false;\r\n  Object.defineProperties(this, {\r\n    _id: {\r\n      configurable: false,\r\n      enumerable: true,\r\n      writable: false,\r\n      value: ++uniqueId\r\n    },\r\n    _isDirty: {\r\n      configurable: false,\r\n      enumerable: true,\r\n      get: function isDirty() {\r\n        return dirty;\r\n      },\r\n      set: function isDirty(d) {\r\n        dirty = d;\r\n        if (!d && this._previousData) {\r\n          this._previousData = undefined;\r\n        }\r\n      }\r\n    },\r\n    _isNew: {\r\n      configurable: false,\r\n      enumerable: true,\r\n      get: function isNewModel() {\r\n        var newModel = false;\r\n        var attrValue;\r\n        if (this._primaryAttributes) {\r\n          for (i = 0, ilen = this._primaryAttributes.length; i < ilen && !newModel; ++i) {\r\n            attrValue = this[this._primaryAttributes[i]];\r\n            if ((attrValue === undefined) || (attrValue === null)) {\r\n              newModel = true;\r\n            }\r\n          }\r\n        }\r\n        return newModel;\r\n      }\r\n    }\r\n  });\r\n  if (attributes) {\r\n    Object.defineProperties(this, attributes);\r\n    Object.defineProperty(this, '_data', {\r\n      configurable: false,\r\n      enumerable: false,\r\n      writable: false,\r\n      value: _defaultData(attributes)\r\n    });\r\n  }\r\n  if (Array.isArray(data)) {\r\n    for (i = 0, ilen = data.length; i < ilen; ++i) {\r\n      if (this._primaryAttributes[i]) {\r\n        this[this._primaryAttributes[i]] = data[i];\r\n      }\r\n    }\r\n  } else if (data) {\r\n    this.fromJSON(data);\r\n  }\r\n  this._isDirty = false;\r\n}","code-length":540,"reference":"Base Model function constructor\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Point(masterApikey, feedID, streamID) {\r\n  this.masterApiKey  = masterApikey;\r\n  this.feedID   = feedID.toString();\r\n  this.streamID = streamID.toString();\r\n}","code-length":66,"reference":"Create an instance of Point\n\n","result":"Create a Point object.","score":[0.2959,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(tabBar, newTab) {\r\n        var oldActiveItem = this.getActiveItem(),\r\n            newActiveItem;\r\n        this.setActiveItem(tabBar.indexOf(newTab));\r\n        newActiveItem = this.getActiveItem();\r\n        return this.forcedChange || oldActiveItem !== newActiveItem;\r\n    }","code-length":90,"reference":"Updates this container with the new active item.\n","result":"Set the active item of a tab.","score":[0.1665,0.1266]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(point1, point2) {\r\n        var Point = Ext.util.Point;\r\n        this.point1 = Point.from(point1);\r\n        this.point2 = Point.from(point2);\r\n    }","code-length":64,"reference":"Creates new LineSegment out of two points.\n","result":"Create a new point.","score":[0.1509,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(lineSegment) {\r\n        var point1 = this.point1,\r\n            point2 = this.point2,\r\n            point3 = lineSegment.point1,\r\n            point4 = lineSegment.point2,\r\n            x1 = point1.x,\r\n            x2 = point2.x,\r\n            x3 = point3.x,\r\n            x4 = point4.x,\r\n            y1 = point1.y,\r\n            y2 = point2.y,\r\n            y3 = point3.y,\r\n            y4 = point4.y,\r\n            d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4),\r\n            xi, yi;\r\n        if (d == 0) {\r\n            return null;\r\n        }\r\n        xi = ((x3 - x4) * (x1 * y2 - y1 * x2) - (x1 - x2) * (x3 * y4 - y3 * x4)) \/ d;\r\n        yi = ((y3 - y4) * (x1 * y2 - y1 * x2) - (y1 - y2) * (x3 * y4 - y3 * x4)) \/ d;\r\n        if (xi < Math.min(x1, x2) || xi > Math.max(x1, x2)\r\n            || xi < Math.min(x3, x4) || xi > Math.max(x3, x4)\r\n            || yi < Math.min(y1, y2) || yi > Math.max(y1, y2)\r\n            || yi < Math.min(y3, y4) || yi > Math.max(y3, y4)) {\r\n            return null;\r\n        }\r\n        return new Ext.util.Point(xi, yi);\r\n    }","code-length":462,"reference":"Returns the point where two lines intersect.\n","result":"Create a line segment .","score":[0,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction SteroidsSocket(options) {\r\n    var finalTarget;\r\n    if (options.target && net.isIPv6(options.target)) {\r\n        finalTarget = normalize6(options.target);\r\n    } else {\r\n        finalTarget = options.target;\r\n    }\r\n    this.target = finalTarget;\r\n    this.port = options.port || 80;\r\n    this.transport = options.transport || 'TCP';\r\n    this.lport = options.lport || null;\r\n    this.timeout = options.timeout || 8000;\r\n    this.allowHalfOpen = options.allowHalfOpen || null;\r\n    this.wsProto = options.wsProto || 'sip';\r\n    this.wsPath = options.wsPath || null;\r\n}","code-length":195,"reference":"Public stuff Constructor","result":"Create a socket.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction timeoutCb() {\r\n        if (!received) {\r\n            self.emit('error', {\r\n\t\t\t\ttype: 'socket: timeout',\r\n\t\t\t\tdata: 'Connection problem: No response'\r\n\t\t\t});\r\n        }\r\n\t\t\r\n\t\t","code-length":71,"reference":"The libraries don't support any close function, so we need this to emulate it.","result":"Check if the socket is still alive.","score":[0,0.0376]}
{"code":"\/*is used to<extra_id_0>\r\nfunction realWidth(str) {\r\n    if (str == null)\r\n        return 0;\r\n    str = stripANSI(str);\r\n    return str.length + (stripEmoji(str).match(\/[^\\x00-\\xff]\/g) || []).length;\r\n}","code-length":75,"reference":"String real width\n\n","result":"Calculate real width.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (source, destination)\r\n    {\r\n      gulp.src(source)\r\n        .pipe(conflict(destination))\r\n        .pipe(gulp.dest(destination));\r\n    }","code-length":55,"reference":"Recursivley copy a folder to a given destination, if there are conflicts prompt the user.\n","result":"Create a new file.","score":[0.0204,0.036]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (source, destination)\r\n    {\r\n      if (!fs.existsSync(destination))\r\n        mkdir('-p', destination);\r\n      cp('-R', source, destination);\r\n    }","code-length":57,"reference":"Shortcut for copying a folder and it's contents recursively to a given destination,\nif the source does not exist, it will do nothing.\n","result":"Copy files.","score":[0,0.0239]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (tracker, propList) {\r\n  var trackingData = tracker[trackingKeyName];\r\n  propList.forEach(function (name) {\r\n    Object.defineProperty(tracker, name, {\r\n      enumerable: true,\r\n      configurable: true,\r\n      get: function () {\r\n        return trackingData.object[name];\r\n      },\r\n      set: function (x) {\r\n        trackingData.actions.push({\r\n          key: name,\r\n          set: x,\r\n        });\r\n        trackingData.object[name] = x;\r\n      },\r\n    });\r\n  });\r\n}","code-length":159,"reference":"Add assignable properties for tracking.","result":"Track the object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (tracker, methodList) {\r\n  var trackingData = tracker[trackingKeyName];\r\n  methodList.forEach(function (name) {\r\n    tracker[name] = function () {\r\n      var context = this;\r\n      var argsArray = Array.prototype.slice.call(arguments);\r\n      if (this === tracker) {\r\n        context = trackingData.object;\r\n        trackingData.actions.push({\r\n          key: name,\r\n          arguments: argsArray,\r\n        });\r\n      }\r\n      return trackingData.object[name].apply(context, argsArray);\r\n    };\r\n  });\r\n}","code-length":162,"reference":"Add callable methods for tracking.","result":"Track the object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (object) {\r\n  var propList = [];\r\n  var methodList = [];\r\n  for (var k in object) {\r\n    if (typeof object[k] === \"function\") {\r\n      methodList.push(k);\r\n    } else {\r\n      propList.push(k);\r\n    }\r\n  }\r\n  return {\r\n    propList: propList,\r\n    methodList: methodList,\r\n  };\r\n}","code-length":123,"reference":"Find all existing properties and methods in the object.","result":"Create a new object.","score":[0.0915,0.0588]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config,callback,scope) {\r\n\t\t\r\n\t\tExt.data.utilities.check('SyncProxy', 'constructor', 'config', config, ['store','database_name','key']);\r\n\t\t\r\n\t\tExt.data.SyncProxy.superclass.constructor.call(this, config);\r\n\t\tthis.store= config.store;\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tthis.store.readValue('Sencha.Sync.system_name',function(system_name){\r\n\t\t\tconfig.system_name= system_name || Ext.data.UUIDGenerator.generate();\r\n\t\t\tthis.store.writeValue('Sencha.Sync.system_name',config.system_name,function(){\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tExt.data.utilities.apply(this,[\r\n\t\t\t\t\t'readConfig_DatabaseDefinition',\r\n\t\t\t\t\t'readConfig_CSV',\r\n\t\t\t\t\t'readConfig_Generator'],[config],function(){\r\n\t\t\t\t\tif (this.definition.system_name===undefined) {\r\n\t\t\t\t\t\tthis.definition.set({system_name:Ext.data.UUIDGenerator.generate()});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"SyncProxy - Opened database '\"+config.key+\"\/\"+config.database_name+\"\/\"+config.datastore_name+\"'\")\r\n\t\t\t\t\tif (callback) { callback.call(scope,this) }\r\n\t\t\t\t},this);\r\n\t\t\t},this);\r\n\t\t},this);\r\n  }","code-length":370,"reference":"JCM constructor should not be async, delay until first operation","result":"Create a new instance of the SyncProxy class.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (content) {\r\n            content = trim(content);\r\n            if (this.mounted) {\r\n                invoke(this, [ Constants.BLOCK, 'setMountedContent' ], content);\r\n            } else {\r\n                dom.contentNode(this).innerHTML = content;\r\n                this.upgrade();\r\n            }\r\n        }","code-length":92,"reference":"Installing a new content.\n","result":"Set the content of a block.","score":[0.193,0.119]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n            const props = dom.attrs.toObject(this);\r\n            const xprops = this.xprops;\r\n            const eprops = get(xtag, [ 'tags', this[ Constants.TAGNAME ], 'accessors' ], {});\r\n            for (let prop in eprops) {\r\n                if (xprops.hasOwnProperty(prop) &&\r\n                    eprops.hasOwnProperty(prop) &&\r\n                    !BLOCK_COMMON_ACCESSORS.hasOwnProperty(prop)) {\r\n                    props[ prop ] = this[ prop ];\r\n                }\r\n            }\r\n            dom.attrs.typeConversion(props, xprops);\r\n            return props;\r\n        }","code-length":173,"reference":"Getting object properties.\n","result":"Create a function to create a tag .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (deep) {\r\n        const node = dom.cloneNode(this, false);\r\n        dom.upgrade(node);\r\n        node[ Constants.TMPL ] = this[ Constants.TMPL ];\r\n        node[ Constants.INSERTED ] = false;\r\n        if (deep) {\r\n            node.content = this.content;\r\n        }\r\n        return node;\r\n    }","code-length":104,"reference":"Cloning a node.\n","result":"Return node.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction blockInit(node) {\r\n    if (!node[ Constants.TAGNAME ]) {\r\n        node[ Constants.INSERTED ] = false;\r\n        node[ Constants.TAGNAME ] = node.tagName.toLowerCase();\r\n        node[ Constants.TMPL ] = {};\r\n        node[ Constants.UID ] = uniqueId();\r\n        return true;\r\n    }\r\n    return false;\r\n}","code-length":107,"reference":"Initialization of the element.\n","result":"Initialize the block .","score":[0.3195,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction blockCreate(node) {\r\n    if (node.hasChildNodes()) {\r\n        Array.prototype.forEach.call(\r\n            node.querySelectorAll('script[type=\"text\/x-template\"][ref],template[ref]'),\r\n            tmplCompileIterator,\r\n            node\r\n        );\r\n    }\r\n    node[ Constants.BLOCK ] = new XBElement(node);\r\n}","code-length":105,"reference":"Creating an item.\n","result":"Create a block.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction accessorsCustomizer(objValue, srcValue) {\r\n    const objSetter = get(objValue, 'set');\r\n    const srcSetter = get(srcValue, 'set');\r\n    return merge({}, objValue, srcValue, {\r\n        set: wrap(objSetter, wrap(srcSetter, wrapperFunction))\r\n    });\r\n}","code-length":90,"reference":"Inheritance events \"set\" property changes.\n","result":"Customize the accessors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapperEvents(srcFunc, objFunc, ...args) {\r\n    const event = (args[ 0 ] instanceof Event) && args[ 0 ];\r\n    const isStopped = event ? () => event.immediatePropagationStopped : stubFalse;\r\n    if (!isStopped() && isFunction(objFunc)) {\r\n        objFunc.apply(this, args);\r\n    }\r\n    if (!isStopped() && isFunction(srcFunc)) {\r\n        srcFunc.apply(this, args);\r\n    }\r\n}","code-length":129,"reference":"Implementation of inherited event.\n","result":"Wrap events .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction accessorsIterator(options, name, accessors) {\r\n    const optionsSetter = get(options, 'set');\r\n    const updateSetter = wrap(name, wrapperAccessorsSetUpdate);\r\n    accessors[ name ] = merge({}, options, {\r\n        set: wrap(optionsSetter, wrap(updateSetter, wrapperFunction))\r\n    });\r\n}","code-length":90,"reference":"The assignment of parameters accessors.\n","result":"Iterate over the accessors.","score":[0.2488,0.2041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapperAccessorsSetUpdate(accessorName, nextValue, prevValue) {\r\n    if (nextValue !== prevValue && this.xprops.hasOwnProperty(accessorName) && this.mounted) {\r\n        this[ Constants.BLOCK ].update();\r\n    }\r\n}","code-length":76,"reference":"Update element when a property is changed.\n","result":"Update wrapper accessors.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction lifecycleRemoved() {\r\n    this[ Constants.INSERTED ] = false;\r\n    const block = this[ Constants.BLOCK ];\r\n    if (block) {\r\n        block.destroy();\r\n        this[ Constants.BLOCK ] = undefined;\r\n    }\r\n}","code-length":75,"reference":"The callback of the remote in DOM.\n","result":"Remove the lifecycle.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction lifecycleInserted() {\r\n    if (this[ Constants.INSERTED ]) {\r\n        return;\r\n    }\r\n    blockInit(this);\r\n    this[ Constants.INSERTED ] = true;\r\n    const isScriptContent = Boolean(this.querySelector('script'));\r\n    if (isScriptContent) {\r\n        lazy(blockCreateLazy, this);\r\n    } else {\r\n        blockCreate(this);\r\n    }\r\n}","code-length":120,"reference":"The callback of the insert in DOM.\n","result":"Detect if a DOM element is inserted.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (obj, removeProp) {\r\n        var newObj = {};\r\n        for (var prop in obj) {\r\n            if (!obj.hasOwnProperty(prop) || prop === removeProp) {\r\n                continue;\r\n            }\r\n            newObj[prop] = obj[prop];\r\n        }\r\n        return newObj;\r\n    }","code-length":90,"reference":"Returns copy of `obj` without `removeProp` field.\n","result":"Remove properties from an object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toDashedProperties ( hash ) {\r\n    var transformed = {};\r\n    _.each( hash, function ( value, key ) {\r\n        transformed[toDashed( key )] = value;\r\n    } );\r\n    return transformed;\r\n}","code-length":70,"reference":"Returns a transformed hash in which all camelCased property names have been replaced by dashed property names. The\ninput hash remains untouched.\n\nProperty values are not modified.\n\nSimple implementation, but good enough for the attribute names we deal with here.\n\nExample: { fooBar: \"whatEver\" } => { \"foo-bar\": \"whatEver\" }\n\n","result":"Transform hash to dashed properties.","score":[0.0,0.033]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toCamelCasedProperties ( hash ) {\r\n    var transformed = {};\r\n    _.each( hash, function ( value, key ) {\r\n        transformed[toCamelCase( key )] = value;\r\n    } );\r\n    return transformed;\r\n}","code-length":69,"reference":"Returns a transformed hash in which all dashed property names have been replaced by camelCased property names. The\ninput hash remains untouched.\n\nProperty values are not modified.\n\nSimple implementation, but good enough for the attribute names we deal with here.\n\nExample: { \"foo-bar\": \"what-ever\" } => { fooBar: \"what-ever\" }\n\n","result":"Transform hash to properties in camelCase.","score":[0.0002,0.0439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction dashedKeyAlternatives ( hash ) {\r\n    var keys = _.keys( toDashedProperties( hash ) );\r\n    return _.filter( keys, function ( key ) {\r\n            return key.search(\/[^-]-[a-z]\/) !== -1;\r\n        } );\r\n}","code-length":79,"reference":"Returns an array of dashed key names, which are the alternative names for all camel-cased key names in a hash.\n\nSimple key names (not camel-cased) are ignored and don't show up in the array.\n\nE.g., dashedKeyAlternatives( { foo: \"whatever\", barBaz: \"whatever\" } ) returns [ \"bar-baz\" ].\n\n","result":"Filter out dashed key alternatives.","score":[0.0001,0.0234]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(selector, root) {\r\n            var selectors = selector.split(','),\r\n                length = selectors.length,\r\n                i = 0,\r\n                results = [],\r\n                noDupResults = [],\r\n                dupMatcher = {},\r\n                query, resultsLn, cmp;\r\n            for (; i < length; i++) {\r\n                selector = Ext.String.trim(selectors[i]);\r\n                query = this.parse(selector);\r\n                results = results.concat(query.execute(root));\r\n            }\r\n            if (length > 1) {\r\n                resultsLn = results.length;\r\n                for (i = 0; i < resultsLn; i++) {\r\n                    cmp = results[i];\r\n                    if (!dupMatcher[cmp.id]) {\r\n                        noDupResults.push(cmp);\r\n                        dupMatcher[cmp.id] = true;\r\n                    }\r\n                }\r\n                results = noDupResults;\r\n            }\r\n            return results;\r\n        }","code-length":249,"reference":"Returns an array of matched Components from within the passed root object.\n\nThis method filters returned Components in a similar way to how CSS selector based DOM\nqueries work using a textual selector string.\n\nSee class summary for details.\n\n","result":"Create a new function to be used to create a new object.","score":[0.0133,0.0826]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(component, selector) {\r\n            if (!selector) {\r\n                return true;\r\n            }\r\n            var query = this.cache[selector];\r\n            if (!query) {\r\n                this.cache[selector] = query = this.parse(selector);\r\n            }\r\n            return query.is(component);\r\n        }","code-length":90,"reference":"Tests whether the passed Component matches the selector string.\n","result":"Return true.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction RouterDecorator (Router) {\r\n  function TelemetryRouter (options) {\r\n    if (!(this instanceof TelemetryRouter)) {\r\n      return new TelemetryRouter(options)\r\n    }\r\n    Router.call(this, options)\r\n  }\r\n  inherits(TelemetryRouter, Router)\r\n    TelemetryRouter.prototype.getNearestContacts = function (key, limit, id, cb) {\r\n    var self = this\r\n    var callback = function (err, shortlist) {\r\n      if (!err) {\r\n        self._log.debug('sorting shortlist based on telemetry score')\r\n        var profiles = {}\r\n        each(shortlist, function (contact, iteratorCallback) {\r\n          var profileCallback = function (err, profile) {\r\n            profiles[contact.nodeID] = profile\r\n            iteratorCallback(err)\r\n          }\r\n          self._rpc.telemetry.getProfile(contact, profileCallback)\r\n        }, function (err) {\r\n          if (err) {\r\n            cb(null, shortlist)\r\n          } else {\r\n            shortlist.sort(self._compare.bind(self, profiles))\r\n            cb(null, shortlist)\r\n          }\r\n        })\r\n      } else {\r\n        cb(err, null)\r\n      }\r\n    }\r\n    Router.prototype.getNearestContacts.call(this, key, limit, id, callback)\r\n  }\r\n    TelemetryRouter.prototype._compare = function (profiles, cA, cB) {\r\n    var profileA = profiles[cA.nodeID]\r\n    var profileB = profiles[cB.nodeID]\r\n    var scoresA = {}\r\n    var scoresB = {}\r\n    this._rpc._telopts.metrics.forEach(function (Metric) {\r\n      var m = new Metric()\r\n      scoresA[m.key] = Metric.score(m.getMetric(profileA))\r\n      scoresB[m.key] = Metric.score(m.getMetric(profileB))\r\n    })\r\n    var resultA = TelemetryRouter.getSuccessProbability(scoresA)\r\n    var resultB = TelemetryRouter.getSuccessProbability(scoresB)\r\n    this._log.debug(\r\n      'success probability is %d% vs %d%',\r\n      (resultA * 100).toFixed(3),\r\n      (resultB * 100).toFixed(3)\r\n    )\r\n    if (Math.abs(resultB - resultA) <= 0.005) {\r\n      this._log.debug(\r\n        'score difference is within threshold, selecting based on throughput'\r\n      )\r\n      return scoresB.throughput - scoresA.throughput\r\n    }\r\n    return resultB - resultA\r\n  }\r\n    TelemetryRouter.getSuccessProbability = function (score) {\r\n    return (score.reliability + score.availability + score.latency) \/ 3\r\n  }\r\n  return TelemetryRouter\r\n}","code-length":724,"reference":"Returns a decorated router that wraps node selection\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                if (!this.active) {\r\n                    Ext.Logger.error('Ext.device.sqlite.SQLTransaction#executeSql: An attempt was made to use a SQLTransaction that is no longer usable.');\r\n                    return null;\r\n                }\r\n                if (config.sqlStatement == null) {\r\n                    Ext.Logger.error('Ext.device.sqlite.SQLTransaction#executeSql: You must specify a `sqlStatement` for the transaction.');\r\n                    return null;\r\n                }\r\n                this.statements.push({\r\n                    sqlStatement: config.sqlStatement,\r\n                    arguments: config.arguments,\r\n                    callback: config.callback,\r\n                    failure: config.failure,\r\n                    scope: config.scope\r\n                });\r\n            }","code-length":191,"reference":"Executes an SQL statement.\n\n","result":"Create a new function to execute the statement .","score":[0,0.1111]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index) {\r\n                        if (index < this.getLength()) {\r\n                            var item = {};\r\n                            var row = this.rows[index];\r\n                            this.names.forEach(function(name, index) {\r\n                                item[name] = row[index];\r\n                            });\r\n                            return item;\r\n                        }\r\n                        return null;\r\n                    }","code-length":100,"reference":"Returns a row at specified index returned by the SQL statement.\nIf there is no such row, returns null.\n\n","result":"Return null.","score":[0.0001,0.1084]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createPayload(name, level, data) {\r\n  return {\r\n    date: getDate(),\r\n    level: level,\r\n    name: name,\r\n    data: data\r\n  };\r\n}","code-length":60,"reference":"Function that create a JSON structure to be logged\n\n","result":"Create the payload.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction __ENFORCETYPE(a, ...types) {\r\n     if (env.application_env !== \"development\") return;\r\n     let hasError = false;\r\n     let expecting;\r\n     let got;\r\n     let i = 0;\r\n     types.map( (t, index) => {\r\n         if (a[index] === null) {\r\n             hasError = true;\r\n             expecting = t;\r\n             got = \"null\";\r\n             i = index;\r\n             return;\r\n         }\r\n         switch (t) {\r\n             case \"mixed\":\r\n             break;\r\n             case \"jsx\":\r\n             if (!React.isValidElement(a[index])) {\r\n                 hasError = true;\r\n                 expecting = \"jsx\";\r\n                 got = typeof a[index];\r\n                 i = index;\r\n             }\r\n             case \"array\":\r\n             if (!Array.isArray(a[index])) {\r\n                 hasError = true;\r\n                 expecting = \"array\";\r\n                 got = typeof a[index];\r\n                 i = index;\r\n             }\r\n             break;\r\n             case \"object\":\r\n                 if (typeof a[index] !== 'object' || Array.isArray(a[index]) || a[index] === null) {\r\n                     hasError = true;\r\n                     expecting = \"object\";\r\n                     i = index;\r\n                     if (a[index] === null) {\r\n                         got = 'null';\r\n                     } else {\r\n                         got = Array.isArray(a[index]) ? \"array\" : typeof a[index];\r\n                     }\r\n                 }\r\n             default:\r\n             if (typeof a[index] !== t) {\r\n                 hasError = true;{\r\n                 expecting = t;\r\n                 got = typeof a[index];}\r\n                 i = index;\r\n             }\r\n         }\r\n     });\r\n     if (hasError) {\r\n         let err = new Error();\r\n         console.error(`ENFORCETYPE: param ${i + 1} is expecting ${expecting} got ${got} instead.`, err.stack);\r\n     }\r\n }","code-length":518,"reference":"Takes the arguments of a function ensures that the type provided is the type\nbeing bassed.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction assign(parent, val, keyOpts) {\r\n  var target   = parent,\r\n      keyParts = keyOpts.val.toString().split('.');\r\n     keyParts.forEach(function(keyPart, idx) {\r\n    if (keyParts.length === idx + 1) {\r\n      if (val !== undefined) {\r\n        if (Array.isArray(val) && Array.isArray(target[keyPart])) {\r\n          val = target[keyPart].concat(val);\r\n        }\r\n                if (!((Array.isArray(val) && !val.length) \r\n          || (typeof val === 'object' && !Object.keys(val || {}).length))) {        \r\n            target[keyPart] = val;        \r\n        }\r\n      }\r\n    } else if (!(keyPart in target)) {      \r\n      target[keyPart] = {};\r\n    }    \r\n  });  \r\n}","code-length":233,"reference":"Ensure object tree exists as dictated by the key","result":"Assign values to parent.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node1, node2) {\r\n        if (node1.parentNode === node2.parentNode) {\r\n            return (node1.data.index < node2.data.index) ? -1 : 1;\r\n        }\r\n        var weight1 = 0,\r\n            weight2 = 0,\r\n            parent1 = node1,\r\n            parent2 = node2;\r\n        while (parent1) {\r\n            weight1 += (Math.pow(10, (parent1.data.depth+1) * -4) * (parent1.data.index+1));\r\n            parent1 = parent1.parentNode;\r\n        }\r\n        while (parent2) {\r\n            weight2 += (Math.pow(10, (parent2.data.depth+1) * -4) * (parent2.data.index+1));\r\n            parent2 = parent2.parentNode;\r\n        }\r\n        if (weight1 > weight2) {\r\n            return 1;\r\n        } else if (weight1 < weight2) {\r\n            return -1;\r\n        }\r\n        return (node1.data.index > node2.data.index) ? 1 : -1;\r\n    }","code-length":298,"reference":"This is a custom tree sorting algorithm. It uses the index property on each node to determine\nhow to sort siblings. It uses the depth property plus the index to create a weight for each node.\nThis weight algorithm has the limitation of not being able to go more then 80 levels in depth, or\nmore then 10k nodes per parent. The end result is a flat collection being correctly sorted based\non this one single sort function.\n","result":"Sort nodes by their weight.","score":[0.0,0.0141]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(root) {\r\n        var node = this.getNode(),\r\n            recursive = this.getRecursive(),\r\n            added = [],\r\n            child = root;\r\n        if (!root.childNodes.length || (!recursive && root !== node)) {\r\n            return added;\r\n        }\r\n        if (!recursive) {\r\n            return root.childNodes;\r\n        }\r\n        while (child) {\r\n            if (child._added) {\r\n                delete child._added;\r\n                if (child === root) {\r\n                    break;\r\n                } else {\r\n                    child = child.nextSibling || child.parentNode;\r\n                }\r\n            } else {\r\n                if (child !== root) {\r\n                    added.push(child);\r\n                }\r\n                if (child.firstChild) {\r\n                    child._added = true;\r\n                    child = child.firstChild;\r\n                } else {\r\n                    child = child.nextSibling || child.parentNode;\r\n                }\r\n            }\r\n        }\r\n        return added;\r\n    }","code-length":268,"reference":"Private method used to deeply retrieve the children of a record without recursion.\n","result":"Create a new DOM tree.","score":[0.0485,0.041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        var me = this;\r\n        config = Ext.device.filesystem.Abstract.prototype.requestFileSystem(config);\r\n        var successCallback = function(fs) {\r\n            var fileSystem = Ext.create('Ext.device.filesystem.FileSystem', fs);\r\n            config.success.call(config.scope || me, fileSystem);\r\n        };\r\n        if (config.type == window.PERSISTENT) {\r\n            if(navigator.webkitPersistentStorage) {\r\n                navigator.webkitPersistentStorage.requestQuota(config.size, function(grantedBytes) {\r\n                    window.webkitRequestFileSystem(\r\n                        config.type,\r\n                        grantedBytes,\r\n                        successCallback,\r\n                        config.failure\r\n                    );\r\n                })\r\n            }else {\r\n                window.webkitStorageInfo.requestQuota(window.PERSISTENT, config.size, function(grantedBytes) {\r\n                    window.webkitRequestFileSystem(\r\n                        config.type,\r\n                        grantedBytes,\r\n                        successCallback,\r\n                        config.failure\r\n                    );\r\n                })\r\n            }\r\n        } else {\r\n            window.webkitRequestFileSystem(\r\n                config.type,\r\n                config.size,\r\n                successCallback,\r\n                config.failure\r\n            );\r\n        }\r\n    }","code-length":324,"reference":"Requests access to the Local File System\n\nvar me = this;\nvar fs = Ext.create(\"Ext.device.File\", {});\nfs.requestFileSystem({\ntype: window.PERSISTENT,\nsize: 1024 * 1024,\nsuccess: function(fileSystem) {\nme.fs = fileSystem;\n},\nfailure: function(err) {\nconsole.log(\"FileSystem Failure: \" + err.code);\n}\n});\n\n\n","result":"Create a new file system .","score":[0,0.0512]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(operation, callback, scope) {\r\n        var me = this,\r\n            writer  = me.getWriter(),\r\n            request = me.buildRequest(operation);\r\n        request.setConfig({\r\n            headers: me.getHeaders(),\r\n            timeout: me.getTimeout(),\r\n            method: me.getMethod(request),\r\n            callback: me.createRequestCallback(request, operation, callback, scope),\r\n            scope: me,\r\n            proxy: me,\r\n            useDefaultXhrHeader: me.getUseDefaultXhrHeader()\r\n        });\r\n        if (operation.getWithCredentials() || me.getWithCredentials()) {\r\n            request.setWithCredentials(true);\r\n            request.setUsername(me.getUsername());\r\n            request.setPassword(me.getPassword());\r\n        }\r\n        request = writer.write(request);\r\n        Ext.Ajax.request(request.getCurrentConfig());\r\n        return request;\r\n    }","code-length":240,"reference":"Performs Ajax request.\n","result":"Create a request object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(err) {\r\n\tvar output;\r\n\ttry {\r\n\t\tvar fieldName = err.err.substring(err.err.lastIndexOf('.$') + 2, err.err.lastIndexOf('_1'));\r\n\t\toutput = fieldName.charAt(0).toUpperCase() + fieldName.slice(1) + ' already exists';\r\n\t} catch (ex) {\r\n\t\toutput = 'Unique field already exists';\r\n\t}\r\n\treturn output;\r\n}","code-length":123,"reference":"Get unique error field name","result":"Create a new error object.","score":[0.2403,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( project ) {\r\n        var current = process.cwd();\r\n        console.log( '\\nCreating folder \"' + project + '\"...' );\r\n        fs.mkdirSync( path.join( current, project ) );\r\n        console.log( '\\nCopying the files in \"' + project + '\"...' );\r\n        wrench.copyDirSyncRecursive(\r\n            path.join( __dirname, 'default', 'project' ),\r\n            path.join( current, project )\r\n        );\r\n        console.log( '\\nCreating the package.json file...' );\r\n        var packagePath = path.join( current, project, 'package.json' );\r\n        var pack = JSON.parse( fs.readFileSync( packagePath ));\r\n        pack.name = project;\r\n        pack.version = '0.0.1';\r\n        pack.dependencies = {\r\n            'tartempion': '0.0.x'\r\n        };\r\n        fs.writeFileSync( packagePath, JSON.stringify( pack, null, 4 ) );\r\n        console.log( '\\nProject \"' + project + '\" created.\\n' );\r\n    }","code-length":278,"reference":"Create a project with the default files and folders.","result":"Create a project.","score":[0.0781,0.2232]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prewatch(theOptions) {\r\n\t\t\tif (config.watch) {\r\n\t\t\t\treturn _.defaults(theOptions, watchify.args);\r\n\t\t\t}\r\n\t\t\treturn theOptions;\r\n\t\t}","code-length":62,"reference":"Add watchify args","result":"Watch files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index, filters) {\r\n        if (!Ext.isArray(filters)) {\r\n            filters = [filters];\r\n        }\r\n        var ln = filters.length,\r\n            filterRoot = this.getFilterRoot(),\r\n            currentFilters = this.getFilters(),\r\n            newFilters = [],\r\n            filterConfig, i, filter;\r\n        if (!currentFilters) {\r\n            currentFilters = this.createFiltersCollection();\r\n        }\r\n        for (i = 0; i < ln; i++) {\r\n            filter = filters[i];\r\n            filterConfig = {\r\n                root: filterRoot\r\n            };\r\n            if (Ext.isFunction(filter)) {\r\n                filterConfig.filterFn = filter;\r\n            }\r\n            else if (Ext.isObject(filter)) {\r\n                if (!filter.isFilter) {\r\n                    if (filter.fn) {\r\n                        filter.filterFn = filter.fn;\r\n                        delete filter.fn;\r\n                    }\r\n                    filterConfig = Ext.apply(filterConfig, filter);\r\n                }\r\n                else {\r\n                    newFilters.push(filter);\r\n                    if (!filter.getRoot()) {\r\n                        filter.setRoot(filterRoot);\r\n                    }\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                Ext.Logger.warn('Invalid filter specified:', filter);\r\n            }\r\n            filter = Ext.create('Ext.util.Filter', filterConfig);\r\n            newFilters.push(filter);\r\n        }\r\n        for (i = 0, ln = newFilters.length; i < ln; i++) {\r\n            currentFilters.insert(index + i, newFilters[i]);\r\n        }\r\n        this.dirtyFilterFn = true;\r\n        if (currentFilters.length) {\r\n            this.filtered = true;\r\n        }\r\n        return currentFilters;\r\n    }","code-length":468,"reference":"This method inserts all the filters in the passed array at the given index.\n","result":"Create a filter function for the view.","score":[0.0594,0.0752]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(filters) {\r\n        if (!Ext.isArray(filters)) {\r\n            filters = [filters];\r\n        }\r\n        var ln = filters.length,\r\n            currentFilters = this.getFilters(),\r\n            i, filter;\r\n        for (i = 0; i < ln; i++) {\r\n            filter = filters[i];\r\n            if (typeof filter === 'string') {\r\n                currentFilters.each(function(item) {\r\n                    if (item.getProperty() === filter) {\r\n                        currentFilters.remove(item);\r\n                    }\r\n                });\r\n            }\r\n            else if (typeof filter === 'function') {\r\n                currentFilters.each(function(item) {\r\n                    if (item.getFilterFn() === filter) {\r\n                        currentFilters.remove(item);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                if (filter.isFilter) {\r\n                    currentFilters.remove(filter);\r\n                }\r\n                else if (filter.property !== undefined && filter.value !== undefined) {\r\n                    currentFilters.each(function(item) {\r\n                        if (item.getProperty() === filter.property && item.getValue() === filter.value) {\r\n                            currentFilters.remove(item);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (!currentFilters.length) {\r\n            this.filtered = false;\r\n        }\r\n    }","code-length":361,"reference":"This method removes all the filters in a passed array.\n","result":"Filter the object.","score":[0.0396,0.1075]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapperMergeResult(srcFunc, objFunc, ...args) {\r\n    let resultObjFunction = {};\r\n    let resultSrcFunction = {};\r\n    if (isFunction(objFunc)) {\r\n        resultObjFunction = objFunc.apply(this, args);\r\n    }\r\n    if (isFunction(srcFunc)) {\r\n        resultSrcFunction = srcFunc.apply(this, args);\r\n    }\r\n    return merge({}, resultObjFunction, resultSrcFunction);\r\n}","code-length":126,"reference":"The implementation of the merger result.\n","result":"Wrap the merge result function.","score":[0.1967,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction wrapperOrResult(srcFunc, objFunc, ...args) {\r\n    let resultObjFunction = false;\r\n    let resultSrcFunction = false;\r\n    if (isFunction(objFunc)) {\r\n        resultObjFunction = objFunc.apply(this, args);\r\n    }\r\n    if (isFunction(srcFunc)) {\r\n        resultSrcFunction = srcFunc.apply(this, args);\r\n    }\r\n    return resultObjFunction || resultSrcFunction;\r\n}","code-length":123,"reference":"Merging the result of the logical \"or\".\n","result":"Wrap functions or objects in a wrapper.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(instance) {\r\n\tthis._model = instance._model;\r\n\tthis._instance = instance;\r\n\tthis.id = instance.id;\r\n\tthis.eachAttribute = function(cb) { return this._model.eachAttribute(cb); };\r\n\tthis.eachRelationship = function (cb) { return this._model.eachRelationship(cb); }\r\n\tthis.attr = function(name) { return this._instance[name]; };\r\n\tthis.belongsTo = function(name, opts) {\r\n\t\treturn (opts.id ? this._instance[name].id : new Snapshot(this._instance[name]));\r\n\t};\r\n}","code-length":165,"reference":"A mock of the ember Snapshot object","result":"Create a snapshot .","score":[0,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(val) {\r\n\t\tvar trimmed = val.trim();\r\n\t\tif(trimmed.indexOf(\"'\") === 0 && trimmed.lastIndexOf(\"'\") === (trimmed.length - 1))\r\n\t\t\treturn '\"' + trimmed.substring(1, trimmed.length - 1) + '\"';\r\n\t\treturn val;\r\n\t}","code-length":90,"reference":"Normalises a json string to a valid deserialisable json string","result":"Convert string values to strings.","score":[0.1051,0.1053]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(typeName, obj) {\r\n\t\tthis.type = typeName;\r\n\t\tif(typeof obj !== 'undefined')\r\n\t\t\tfor(var key in obj) \r\n\t\t\t\tthis[key] = obj[key];\r\n\t}","code-length":67,"reference":"A mock of the salesforce SObject object","result":"Create a new object.","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\t\tvar idStr = '' + sforce.db.id++;\r\n\t\t\treturn sforce.db._idTemplate.substring(0, 18 - idStr.length) + idStr;\r\n\t\t}","code-length":63,"reference":"Generates a new fake salesforce id","result":"Generate the database id.","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(select) {\r\n\t\t\tvar chars = new antlr4.InputStream(input);\r\n\t\t\tvar lexer = new SelectLexer(chars);\r\n\t\t\tvar tokens  = new antlr4.CommonTokenStream(lexer);\r\n\t\t\tvar parser = new SelectParser(tokens);\r\n\t\t\tparser.buildParseTrees = true;\r\n\t\t\treturn parser.select();\r\n\t\t}","code-length":103,"reference":"Returns an antlr4 parse tree for a select query string","result":"Create a select object.","score":[0.1008,0.1995]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj) {\r\n\t\t\tvar schema = sforce.db.schema;\r\n\t\t\tvar objDesc = schema[obj.type];\r\n\t\t\tif(typeof objDesc === 'undefined')\r\n\t\t\t\tthrow 'No type exists by the name: ' + obj.type;\r\n\t\t\tfor(var key in obj) {\r\n\t\t\t\tif({ Id:false, type:true }[key])\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tvar fieldDesc = null;\r\n\t\t\t\tfor(var i = 0; i < objDesc.fields.length; i++) {\r\n\t\t\t\t\tvar fd = objDesc.fields[i];\r\n\t\t\t\t\tif(fd.name === key) {\r\n\t\t\t\t\t\tfieldDesc = fd;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(fieldDesc == null)\r\n\t\t\t\t\tthrow 'No field exists by the name: ' + key + 'in the type: ' + obj.type;\r\n\t\t\t}\r\n\t\t}","code-length":243,"reference":"Validates a given objects against the schema","result":"Validate the object.","score":[0.1076,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, fields) {\r\n\t\t\tfor(var i = 0; i < fields.length; i++)\r\n\t\t\t\tsforce.db.validateField(type, fields[i]);\r\n\t\t}","code-length":58,"reference":"Validates a list of field names against a type in the schema","result":"Validate the fields of a type.","score":[0.0935,0.2193]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, field) {\r\n\t\t\tvar objDesc = sforce.db.schema[type];\r\n\t\t\tfor(var i = 0; i < objDesc.fields.length; i++)\r\n\t\t\t\tif(objDesc.fields[i].name === field)\r\n\t\t\t\t\treturn;\r\n\t\t\tthrow 'No field exists by the name: ' + field + 'in the type: ' + type;\r\n\t\t}","code-length":109,"reference":"Validates a field name against a type in the schema","result":"Check if a field exists by the name.","score":[0.1693,0.1531]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type, rel) {\r\n\t\t\tvar objDesc = sforce.db.schema[type];\r\n\t\t\tfor(var i = 0; i < objDesc.childRelationships.length; i++)\r\n\t\t\t\tif(objDesc.childRelationships[i].relationshipName === rel)\r\n\t\t\t\t\treturn;\r\n\t\t\tthrow 'No child relationship exists by the name: ' + rel + 'in the type: ' + type;\r\n\t\t}","code-length":113,"reference":"Validates a relationship name against a type in the schema","result":"Create a child relationship.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(type) {\r\n\t\t\tvar sos = sforce.db.sobjects;\r\n\t\t\tif(typeof sos[type] !== 'object')\r\n\t\t\t\tsos[type] = {};\r\n\t\t\treturn sos[type];\r\n\t\t}","code-length":70,"reference":"Get all SObjects of the given type","result":"Create a new object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(resultAry, isRoot) {\r\n\t\t\tif(resultAry.length == 0) {\r\n\t\t\t\tif(isRoot)\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone : 'true',\r\n\t\t\t\t\t\tqueryLocator : null,\r\n\t\t\t\t\t\tsize : 0,\r\n\t\t\t\t\t};\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tvar records = null;\r\n\t\t\tif(resultAry.length == 1)\r\n\t\t\t\trecords = resultAry[0];\r\n\t\t\telse\r\n\t\t\t\trecords = resultAry;\r\n\t\t\treturn {\r\n\t\t\t\tdone : 'true',\r\n\t\t\t\tqueryLocator : null,\r\n\t\t\t\trecords : records,\r\n\t\t\t\tsize : resultAry.length,\r\n\t\t\t};\r\n\t\t}","code-length":195,"reference":"Creates a wrapped result in the form that you would expect the salesforce soap api to return a result","result":"Create a query locator .","score":[0.0146,0.0568]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(obj) {\r\n\t\tvar matches = this.sequence[0].matches(obj);\r\n\t\tfor(var i = 1; i < this.sequence.length; i += 2) {\r\n\t\t\tif(this.sequence[i] === '&')\r\n\t\t\t\tmatches = matches && this.sequence[i+1].matches(obj);\r\n\t\t\telse\r\n\t\t\t\tmatches = matches || this.sequence[i+1].matches(obj);\r\n\t\t}\r\n\t\treturn matches;\r\n\t}","code-length":131,"reference":"Runs the conditions in the condition set and returns a boolean as a result","result":"Match a sequence of objects.","score":[0.0397,0.0382]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addContents($, contents) {\r\n    console.log('addContents', contents);\r\n    var body = document.getElementsByTagName('BODY');\r\n    if (!body) return;\r\n    var $body = $(body[0]),\r\n      contentsStyle = [\r\n        'position:fixed;right:1em;top:1em;',\r\n        'padding:0.5em;min-width:120px;',\r\n        'font-size:90%;line-height:18px;',\r\n        'border:1px solid #aaa;background: #F9F9F9;'\r\n      ].join(''),\r\n      html = [],\r\n      order = [],\r\n      hash = [];\r\n    for (var i = 0; i < contents.length; ++i) {\r\n      order[i] = 0;\r\n      hash[i] = '';\r\n    }\r\n    function indexOf(tag) {\r\n      for (var i = 0; i < contents.length && contents[i].toLowerCase() !== tag; ++i);\r\n      return i;\r\n    }\r\n    $(contents.join(',')).each(function (i, obj) {\r\n      var index = indexOf(obj.tagName.toLowerCase());\r\n      order[index]++;\r\n      hash[index] = $(obj).text();\r\n      for (var j = index + 1; j < contents.length; ++j) {\r\n        order[j] = 0;\r\n        hash[j] = '';\r\n      }\r\n      var anchor = hash.slice(0, index + 1).join('-');\r\n      $(obj).append(fm('<a name=\"{0}\" style=\"color:#333;\"><\/a>', anchor));\r\n      html.push(fm('<div style=\"padding-left:{0}em;\"><a href=\"#{2}\" style=\"text-decoration:none;\">{1}<\/a><\/div>',\r\n        index * 1.5, order.slice(0, index + 1).join('.') + ' ' + hash[index], anchor));\r\n    });\r\n    var $contentsWrap = $(fm(['<div style=\"{0}\">',\r\n        '<div style=\"text-align: center;height:22px;line-height:22px;\">',\r\n        '<b>Contents<\/b> <a href=\"javascript:;\">hide<\/a>',\r\n        '<\/div>',\r\n        '<div>{1}<\/div>',\r\n        '<\/div>'].join(''), contentsStyle, html.join(''))).prependTo($body),\r\n      $toggle = $contentsWrap.find('> :first').find('> :last'),\r\n      $contents = $contentsWrap.find('> :last');\r\n    console.log($contentsWrap, $toggle, $contents);\r\n    $toggle.click(function () {\r\n      $contents.slideToggle();\r\n      $toggle.html($toggle.html() === 'show' ? 'hide' : 'show');\r\n    });\r\n  }","code-length":723,"reference":"Add Contents for page","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addTop($, top) {\r\n    console.log('addTop', top);\r\n    $(top.join(',')).each(function (i, obj) {\r\n      $(obj).prepend(['<div style=\"position: relative;width: 1px;\">',\r\n        '<a href=\"javascript:;\" style=\"position:absolute;width:1.2em;left:-1.2em;font-size:0.8em;display:inline-block;visibility:hidden;color:#333;text-align:left;text-decoration: none;\">',\r\n        '&#10022;<\/a>',\r\n        '<\/div>'].join(''));\r\n      var $prefix = $(this).find(':first').find(':first');\r\n      var rawCol = $(obj).css('background-color');\r\n      $(obj).mouseover(\r\n        function () {\r\n          $prefix.css('height', $(this).css('height'));\r\n          $prefix.css('line-height', $(this).css('line-height'));\r\n          $prefix.css('visibility', 'visible');\r\n          $(this).css('background-color', '#FFF8D7');\r\n        }).mouseout(function () {\r\n          $prefix.css('visibility', 'hidden');\r\n          $(this).css('background-color', rawCol);\r\n        });\r\n    });\r\n  }","code-length":338,"reference":"Add \"to Top\" link for mark h","result":"Add top elements to the DOM.","score":[0.1634,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var actions = this.getActions(),\r\n            namespace = this.getNamespace(),\r\n            action, cls, methods,\r\n            i, ln, method;\r\n        for (action in actions) {\r\n            if (actions.hasOwnProperty(action)) {\r\n                cls = namespace[action];\r\n                if (!cls) {\r\n                    cls = namespace[action] = {};\r\n                }\r\n                methods = actions[action];\r\n                for (i = 0, ln = methods.length; i < ln; ++i) {\r\n                    method = Ext.create('Ext.direct.RemotingMethod', methods[i]);\r\n                    cls[method.getName()] = this.createHandler(action, method);\r\n                }\r\n            }\r\n        }\r\n    }","code-length":196,"reference":"Initialize the API\n","result":"Create the handler functions.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(transaction, event) {\r\n        var success = !!event.getStatus(),\r\n            functionName = success ? 'success' : 'failure',\r\n            callback = transaction && transaction.getCallback(),\r\n            result;\r\n        if (callback) {\r\n            result = event.getResult();\r\n            if (Ext.isFunction(callback)) {\r\n                callback(result, event, success);\r\n            } else {\r\n                Ext.callback(callback[functionName], callback.scope, [result, event, success]);\r\n                Ext.callback(callback.callback, callback.scope, [result, event, success]);\r\n            }\r\n        }\r\n    }","code-length":165,"reference":"Run any callbacks related to the transaction.\n","result":"Call the callback function .","score":[0.1611,0.2206]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options, success, response) {\r\n        var me = this,\r\n            i = 0,\r\n            ln, events, event,\r\n            transaction, transactions;\r\n        if (success) {\r\n            events = me.createEvents(response);\r\n            for (ln = events.length; i < ln; ++i) {\r\n                event = events[i];\r\n                transaction = me.getTransaction(event);\r\n                me.fireEvent('data', me, event);\r\n                if (transaction) {\r\n                    me.runCallback(transaction, event, true);\r\n                    Ext.direct.Manager.removeTransaction(transaction);\r\n                }\r\n            }\r\n        } else {\r\n            transactions = [].concat(options.transaction);\r\n            for (ln = transactions.length; i < ln; ++i) {\r\n                transaction = me.getTransaction(transactions[i]);\r\n                if (transaction && transaction.getRetryCount() < me.getMaxRetries()) {\r\n                    transaction.retry();\r\n                } else {\r\n                    event = Ext.create('Ext.direct.ExceptionEvent', {\r\n                        data: null,\r\n                        transaction: transaction,\r\n                        code: Ext.direct.Manager.exceptions.TRANSPORT,\r\n                        message: 'Unable to connect to the server.',\r\n                        xhr: response\r\n                    });\r\n                    me.fireEvent('data', me, event);\r\n                    if (transaction) {\r\n                        me.runCallback(transaction, event, false);\r\n                        Ext.direct.Manager.removeTransaction(transaction);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }","code-length":394,"reference":"React to the AJAX request being completed.\n","result":"Create a new instance of the class .","score":[0.1389,0.0704]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(options) {\r\n        return options && options.getTid ? Ext.direct.Manager.getTransaction(options.getTid()) : null;\r\n    }","code-length":48,"reference":"Get transaction from XHR options.\n","result":"Create a transaction.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(action, method, args) {\r\n        var me = this,\r\n            callData = method.getCallData(args),\r\n            data = callData.data,\r\n            callback = callData.callback,\r\n            scope = callData.scope,\r\n            transaction;\r\n        transaction = Ext.create('Ext.direct.Transaction', {\r\n            provider: me,\r\n            args: args,\r\n            action: action,\r\n            method: method.getName(),\r\n            data: data,\r\n            callback: scope && Ext.isFunction(callback) ? Ext.Function.bind(callback, scope) : callback\r\n        });\r\n        if (me.fireEvent('beforecall', me, transaction, method) !== false) {\r\n            Ext.direct.Manager.addTransaction(transaction);\r\n            me.queueTransaction(transaction);\r\n            me.fireEvent('call', me, transaction, method);\r\n        }\r\n    }","code-length":230,"reference":"Configure a direct request.\n","result":"Create a new function to be called by the user.","score":[0.1086,0.1087]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(transaction) {\r\n        return {\r\n            action: transaction.getAction(),\r\n            method: transaction.getMethod(),\r\n            data: transaction.getData(),\r\n            type: 'rpc',\r\n            tid: transaction.getId()\r\n        };\r\n    }","code-length":75,"reference":"Gets the AJAX call info for a transaction.\n","result":"Create a transaction.","score":[0.109,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(transaction) {\r\n        var me = this,\r\n            enableBuffer = me.getEnableBuffer();\r\n        if (transaction.getForm()) {\r\n            me.sendFormRequest(transaction);\r\n            return;\r\n        }\r\n        me.callBuffer.push(transaction);\r\n        if (enableBuffer) {\r\n            if (!me.callTask) {\r\n                me.callTask = Ext.create('Ext.util.DelayedTask', me.combineAndSend, me);\r\n            }\r\n            me.callTask.delay(Ext.isNumber(enableBuffer) ? enableBuffer : 10);\r\n        } else {\r\n            me.combineAndSend();\r\n        }\r\n    }","code-length":175,"reference":"Add a new transaction to the queue.\n","result":"Send a request to the server.","score":[0.2558,0.3704]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var buffer = this.callBuffer,\r\n            ln = buffer.length;\r\n        if (ln > 0) {\r\n            this.sendRequest(ln == 1 ? buffer[0] : buffer);\r\n            this.callBuffer = [];\r\n        }\r\n    }","code-length":79,"reference":"Combine any buffered requests and send them off.\n","result":"Send calls to the server.","score":[0,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(action, method, form, callback, scope) {\r\n        var me = this,\r\n            transaction, isUpload, params;\r\n        transaction = new Ext.direct.Transaction({\r\n            provider: me,\r\n            action: action,\r\n            method: method.getName(),\r\n            args: [form, callback, scope],\r\n            callback: scope && Ext.isFunction(callback) ? Ext.Function.bind(callback, scope) : callback,\r\n            isForm: true\r\n        });\r\n        if (me.fireEvent('beforecall', me, transaction, method) !== false) {\r\n            Ext.direct.Manager.addTransaction(transaction);\r\n            isUpload = String(form.getAttribute('enctype')).toLowerCase() == 'multipart\/form-data';\r\n            params = {\r\n                extTID: transaction.id,\r\n                extAction: action,\r\n                extMethod: method.getName(),\r\n                extType: 'rpc',\r\n                extUpload: String(isUpload)\r\n            };\r\n            Ext.apply(transaction, {\r\n                form: Ext.getDom(form),\r\n                isUpload: isUpload,\r\n                params: callback && Ext.isObject(callback.params) ? Ext.apply(params, callback.params) : params\r\n            });\r\n            me.fireEvent('call', me, transaction, method);\r\n            me.sendFormRequest(transaction);\r\n        }\r\n    }","code-length":350,"reference":"Configure a form submission request\n\n","result":"Create a new form .","score":[0.2857,0.2]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(transaction) {\r\n        var me = this;\r\n        Ext.Ajax.request({\r\n            url: me.getUrl(),\r\n            params: transaction.params,\r\n            callback: me.onData,\r\n            scope: me,\r\n            form: transaction.form,\r\n            isUpload: transaction.isUpload,\r\n            transaction: transaction\r\n        });\r\n    }","code-length":101,"reference":"Sends a form request\n\n","result":"Create a transaction.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction inlineBlockFix(decl){\r\n    \tvar origRule = decl.parent;\r\n    \torigRule.append(\r\n\t    \t{\r\n\t    \t\tprop:'*display',\r\n\t    \t\tvalue:'inline'\r\n\t    \t},\r\n\t    \t{\r\n\t    \t\tprop:'*zoom',\r\n\t    \t\tvalue:'1'\r\n\t    \t}\r\n    \t);\r\n    }","code-length":112,"reference":"Work with options here","result":"Fix inline block.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction stubPlainTextFiles(resourceRoots, destination) {\r\n  _.forEach(resourceRoots, function (resource) {\r\n('file:\r\n    filePath = filePath.replace('.idea\/', '');\r\n    var location = filePath.replace(\/[^\\\/]*$\/, '');\r\n    if (!fs.existsSync(location))\r\n      mkdir('-p', location);\r\n    if (!fs.existsSync(filePath))\r\n      fs.writeFileSync(filePath, ' ', 'utf8');\r\n  });\r\n}","code-length":130,"reference":"When generating the .idea project WebStorm will remove any plain text files specified\non first open if they do not exist.\nFor example this lets files from a build be marked as plain text before they exist\nby stubbing an empty file at their expected position.\n","result":"Stub files.","score":[0,0.012]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveJetbrainsExe(jetbrainsDirectory) {\r\n  var exists = false;\r\n  var webstormInstallPaths = io.resolveDirMatches(jetbrainsDirectory, \/^WebStorm\\s*[.\\d]+$\/);\r\n  for (var j = 0; j < webstormInstallPaths.length; j++) {\r\n    var webstormPath = [jetbrainsDirectory, webstormInstallPaths[j], 'bin'];\r\n    var resolvedWebstorm = resolveMaxedPath(webstormPath);\r\n    if(resolvedWebstorm === null) break;\r\n    exists = path.resolve(resolvedWebstorm.join(path.sep), 'Webstorm.exe');\r\n    if(fs.existsSync(exists)) {\r\n      return exists;\r\n    }\r\n  }\r\n  return exists;\r\n}","code-length":206,"reference":"Check if a Webstorm.exe exists in a given windows program files directory.\n","result":"Resolve JetbrainsExe.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Route (method, path, callback, options) {\r\n  this.path = path;\r\n  this.method = method;\r\n  this.callback = callback;\r\n  this.regexp = utils.pathRegexp(path, this.keys = [], options.sensitive, options.strict);\r\n}","code-length":79,"reference":"Mostly from Express' router `Route`.\n\nInitialize `Route` with the given HTTP `method`, `path`,\nand an array of `callbacks` and `options`.\n\nOptions:\n\n- `sensitive`    enable case-sensitive routes\n- `strict`       enable strict matching for trailing slashes\n\n","result":"Route the request.","score":[0.0,0.0324]}
{"code":"\/*is used to<extra_id_0>\r\nfunction TransportDecorator (Transport) {\r\n  function TelemetryTransport (contact, options) {\r\n    if (!(this instanceof TelemetryTransport)) {\r\n      return new TelemetryTransport(contact, options)\r\n    }\r\n    assert.ok(options, 'Missing required options parameter')\r\n    this._telopts = options.telemetry\r\n    this.telemetry = new Persistence(this._telopts.storage)\r\n    Transport.call(this, contact, options)\r\n  }\r\n  inherits(TelemetryTransport, Transport)\r\n  TelemetryTransport.DEFAULT_METRICS = [\r\n    metrics.Latency,\r\n    metrics.Availability,\r\n    metrics.Reliability,\r\n    metrics.Throughput\r\n  ]\r\n    TelemetryTransport.prototype._open = function (callback) {\r\n    var self = this\r\n    var metrics = this._telopts.metrics\r\n    if (!metrics || metrics.length === 0) {\r\n      this._telopts.metrics = TelemetryTransport.DEFAULT_METRICS\r\n    }\r\n    this._telopts.metrics.forEach(function (Metric) {\r\n      var metric = new Metric()\r\n      metric.hooks.forEach(function (hook) {\r\n        self[hook.trigger](\r\n          hook.event,\r\n          hook.handler(metric, self.telemetry)\r\n        )\r\n      })\r\n    })\r\n    return Transport.prototype._open.call(this, callback)\r\n  }\r\n  return TelemetryTransport\r\n}","code-length":363,"reference":"Returns a decorated transport adapter that writes telemetry data\n","result":"Function Persistence .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getRandomArrValue(arr, min = 0, max = arr.length - 1) {\r\n  return arr[getRandomInt(min, max)];\r\n}","code-length":47,"reference":"Get a random value from an array\n","result":"Generate code.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction random(number = 1) {\r\n  if (1 > number) {\r\n    throw Error(`Can't use numbers bellow 1, ${number} passed`);\r\n  }\r\n  if (number === 1) {\r\n    return getRandomArrValue(dinosaurs);\r\n  } else {\r\n    const l = dinosaurs.length - 1;\r\n    return new Array(number).fill().map(() => getRandomArrValue(dinosaurs, 0, l));\r\n  }\r\n}","code-length":131,"reference":"Returns a random dinosaur or more random dinosaurs if number is set\n","result":"Generate random numbers.","score":[0.0203,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Response (ghosttrain, callback) {\r\n  this.charset = '';\r\n  this.headers = {};\r\n  this.statusCode = 200;\r\n  this.app = ghosttrain;\r\n  this._callback = callback;\r\n}","code-length":68,"reference":"Shims features of Express's `response` object in routes.\nAccepts a `callback` function to be called with the data to send.\n\n","result":"Create a response object.","score":[0.0059,0.0272]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    var body;\r\n    var app = this.app;\r\n    if (typeof arguments[0] === 'number') {\r\n      this.status(arguments[0]);\r\n      body = arguments[1];\r\n    } else {\r\n      body = arguments[0];\r\n    }\r\n    var type = this.get('Content-Type');\r\n    if (!body && type !== 'application\/json') {\r\n      body = utils.STATUS_CODES[this.statusCode];\r\n      if (!type)\r\n        this.type('txt');\r\n    }\r\n    else if (typeof body === 'string') {\r\n      if (!type) {\r\n        this.charset = this.charset || 'utf-8';\r\n        this.type('html');\r\n      }\r\n    }\r\n    else if (typeof body === 'object') {\r\n      if (body === null)\r\n        body = '';\r\n      else if (!type || type === 'application\/json') {\r\n        this.contentType('application\/json');\r\n        var replacer = app.get('json replacer');\r\n        var spaces = app.get('json spaces');\r\n        body = JSON.stringify(body, replacer, spaces);\r\n      }\r\n    }\r\n    this.end(body);\r\n    return this;\r\n  }","code-length":323,"reference":"Sends a response\n\nExamples:\nres.send({})\nres.send('text')\nres.send(404, 'Message')\nres.send(200)\n\n","result":"Wrap the response in a browser.","score":[0.1392,0.1149]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n    var data;\r\n    if (arguments.length === 2) {\r\n      this.status(arguments[0]);\r\n      data = arguments[1];\r\n    } else {\r\n      data = arguments[0];\r\n    }\r\n    if (!this.get('Content-Type'))\r\n      this.contentType('application\/json');\r\n    return this.send(data);\r\n  }","code-length":107,"reference":"Sends a JSON response\n\nExamples:\nres.json(null);\nres.json({});\nres.json(200, 'text');\nres.json(404, 'woops');\n\n","result":"Send data to the client.","score":[0,0.0481]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (field, value) {\r\n    if (arguments.length === 2)\r\n      this.headers[field] = value;\r\n    else {\r\n      for (var prop in field)\r\n        this.headers[prop] = field[prop];\r\n    }\r\n    return this;\r\n  }","code-length":82,"reference":"Sets `field` header to `value`, or accepts an object and applies\nthose key value pairs to the Response object's headers.\n\n","result":"Set the header values.","score":[0.007,0.0815]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (body) {\r\n    var type = this.get('Content-Type');\r\n    if (type === 'application\/json')\r\n      this._callback(JSON.parse(body || '{}'));\r\n    else\r\n      this._callback(body);\r\n  }","code-length":72,"reference":"Formats response and calls initial callback\n\n","result":"Parse the body.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (args) {\r\n   var expected = Array.prototype.slice.call(arguments, 1);\r\n   var minimum = expected.length\r\n   var hasOptionalTypes = false;\r\n      for (var i = 0; i < expected.length; i++) {\r\n      if (!isValidType(expected[i])) {\r\n         throw Error('Expected argument ' + i + ' is not a valid type.');\r\n      }\r\n      if (isOptionalType(expected[i])) {\r\n         minimum--;\r\n         hasOptionalTypes = true;\r\n      }\r\n   };\r\n   if (isDisabled && !hasOptionalTypes) {\r\n      return [];\r\n   }\r\n   if (minimum == expected.length && args.length != expected.length) {\r\n      throw Error(getExpectedVsRecieved_(expected, args));\r\n   }\r\n   if (args.length < minimum || args.length > expected.length) {\r\n      throw Error(getExpectedVsRecieved_(expected, args));\r\n   }\r\n   if (args.length === expected.length) {\r\n      for (var i = 0; i < expected.length; i++) {\r\n         if (!isOfType(args[i], expected[i])) {\r\n            throw Error(getExpectedVsRecieved_(expected, args));\r\n         }\r\n      };\r\n      return args;\r\n   }\r\n   return shiftArguments_(expected, args, minimum);\r\n}","code-length":357,"reference":"Asserts that the arguments supplied are what's expected. If an argument can be multiples\ntypes, use an array of acceptable types.\n","result":"Test the arguments .","score":[0.0064,0.0972]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expected, args, minimum) {\r\n   var shiftedArgs = [];\r\n   var curArg = args.length - 1;\r\n   var remainingOptionalArgs = expected.length - minimum;\r\n   var optionalIndiceSegments = [];\r\n   var optionalIndiceSegment = [];\r\n   var availableArgsSegments = [];\r\n   var availableArgsSegment = [];\r\n   for (var i = 0; i < expected.length; i++) shiftedArgs[i] = null;\r\n   var advanceArg = function () {\r\n      availableArgsSegment.unshift(curArg);\r\n      curArg--;\r\n      remainingOptionalArgs--;\r\n      if (curArg < 0 || remainingOptionalArgs < 0) {\r\n         throw Error(getExpectedVsRecieved_(expected, args));\r\n      }\r\n   };\r\n   for (i = expected.length - 1; i >= 0; i--) {\r\n      var type = expected[i];\r\n      if (isOptionalType(type)) {\r\n         optionalIndiceSegment.unshift(i);\r\n         continue;\r\n      }\r\n      while (!isOfType(args[curArg], type)) {\r\n         advanceArg();\r\n      }\r\n      if (checkIfShouldLeaveArgument_(expected, i, args, curArg)) {\r\n         advanceArg();\r\n         i++;\r\n         continue;\r\n      }\r\n      optionalIndiceSegments.unshift(optionalIndiceSegment);\r\n      optionalIndiceSegment = [];\r\n      availableArgsSegments.unshift(availableArgsSegment);\r\n      availableArgsSegment = []\r\n      shiftedArgs[i] = args[curArg--];\r\n   }\r\n   while (curArg >= 0) availableArgsSegment.unshift(curArg--);\r\n   availableArgsSegments.unshift(availableArgsSegment);\r\n   optionalIndiceSegments.unshift(optionalIndiceSegment);\r\n   if (availableArgsSegments.length != optionalIndiceSegments.length) {\r\n      throw Error(getExpectedVsRecieved_(expected, args));\r\n   }\r\n   optionalIndiceSegments.forEach(function (optionalIndices, index) {\r\n      availableArgsSegment = availableArgsSegments[index];\r\n      i = 0;\r\n      availableArgsSegment.forEach(function (argIndex) {\r\n         arg = args[argIndex]\r\n         while (!isOfType(arg, expected[optionalIndices[i]]) && i < optionalIndices.length) {\r\n            i++;\r\n         }\r\n         if (i >= optionalIndices.length) {\r\n            throw Error(getExpectedVsRecieved_(expected, args));\r\n         }\r\n         shiftedArgs[optionalIndices[i++]] = arg;\r\n      });\r\n   });\r\n   return shiftedArgs;\r\n}","code-length":660,"reference":"Returns an array of all of the arguments shifted into the correct place.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n      availableArgsSegment.unshift(curArg);\r\n      curArg--;\r\n      remainingOptionalArgs--;\r\n      if (curArg < 0 || remainingOptionalArgs < 0) {\r\n         throw Error(getExpectedVsRecieved_(expected, args));\r\n      }\r\n   }","code-length":82,"reference":"Capture groups of available arguments separated by ones that have been used.","result":"Test the function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expected, expectedIndex, actual, actualIndex) {\r\n   var consecutiveOptionals = countTrailingOptionals_(expected, expectedIndex, actual[actualIndex]);\r\n   var matchingRequires = countLeadingMatchingRequires_(expected, expectedIndex,\r\n         actual[actualIndex]);\r\n   var matchesRequired = 1 + matchingRequires;\r\n   var availableDistance = matchingRequires + consecutiveOptionals;\r\n   var i = actualIndex - 1;\r\n   var type = expected[expectedIndex];\r\n   while (i >= 0 && availableDistance > 0 && matchesRequired > 0) {\r\n      if (isOfType(actual[i], type)) {\r\n         matchesRequired--;\r\n      }\r\n      availableDistance--;\r\n      i--;\r\n   }\r\n   return matchesRequired <= 0;\r\n}","code-length":195,"reference":"Checks if the current argument should be left for an optional argument.\n","result":"Test for equality .","score":[0.0432,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expected, expectedIndex, value) {\r\n   var i = expectedIndex + 1;\r\n   var matchingOptionals = 0;\r\n   var inBetweenOptionals = 0;\r\n   var tmpInBetween = 0;\r\n   while (i < expected.length && isOptionalType(expected[i])) {\r\n      if (isOfType(value, expected[i])) {\r\n         matchingOptionals++;\r\n         inBetweenOptionals += tmpInBetween;\r\n         tmpInBetween = 0;\r\n      } else {\r\n         tmpInBetween++;\r\n      }\r\n      i++;\r\n   }\r\n   return matchingOptionals + inBetweenOptionals;\r\n}","code-length":168,"reference":"Counts the number of trailing, consecutive optional arguments.\n","result":"Test the type of a value .","score":[0.1665,0.1266]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expected, expectedIndex, value) {\r\n   var i = expectedIndex - 1;\r\n   var matchingRequires = 0\r\n   while (i >= 0) {\r\n      if (!isOptionalType(expected[i]) && isOfType(value, expected[i])) {\r\n         matchingRequires++;\r\n      }\r\n      i--;\r\n   }\r\n   return matchingRequires;\r\n}","code-length":103,"reference":"Counts the number of leading required arguments.\n","result":"Test the type of a value.","score":[0.1943,0.1449]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (expected, actual) {\r\n   var argNames = [];\r\n   var expectedNames = [];\r\n   for (var i = 0; i < actual.length; i++) {\r\n      argNames.push(getNameForValue(actual[i]));\r\n   };\r\n   for (var i = 0; i < expected.length; i++) {\r\n      expectedNames.push(getNameForType(expected[i]));\r\n   };\r\n   return 'Expected arguments to be (' + expectedNames.join(', ') + ') but received (' +\r\n         argNames.join(', ') + ') instead.';\r\n}","code-length":157,"reference":"Returns a string of expected arguments vs actual.\n","result":"Describe the arguments.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (value, type) {\r\n   if (!isValidType(type)) {\r\n      throw Error('Invalid type supplied.');   \r\n   }  \r\n   if (!isOfType(value, type)) {\r\n      argName = getNameForValue(value);\r\n      typeName = getNameForType(type);\r\n      throw Error('Expected ' + argName + ' to be an instance of ' + typeName + '.');\r\n   }\r\n}","code-length":108,"reference":"Asserts that the supplied value is of the supplied type.\n","result":"Validate a value.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (type) {\r\n   if (type === null) return true;\r\n   if (type === undefined) return true;\r\n   if (type instanceof AnyType) return true;\r\n   if (type instanceof Array) {\r\n      if (!type.length) return false;\r\n      for (var i = 0; i < type.length; i++) {\r\n          if (!isValidType(type[i])) return false;\r\n      };\r\n      return true;\r\n   }\r\n   if (type instanceof ArrayOf) return isValidType(type.type);\r\n   if (type instanceof EnumType) return (type.enumerable instanceof Object);\r\n   return (type instanceof Object);\r\n}","code-length":171,"reference":"Determines if the argument is a valid type.\n","result":"Validate the type.","score":[0.0917,0.2]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (value) {\r\n   if (value === undefined) return 'undefined';\r\n   if (value === null) return 'null';\r\n   if (value instanceof Array) {\r\n      if (!value.length) return 'Array(empty)';\r\n      var innerType = undefined;\r\n      for (var i = 0; i < value.length; i++) {\r\n         type = getNameForValue(value[i]);\r\n         if (innerType !== undefined && innerType !== type) {\r\n            return 'Array(mixed)';\r\n         }\r\n         innerType = type;\r\n      };\r\n      return 'Array<' + innerType + '>';\r\n   }\r\n   if (value instanceof Function) {\r\n      if (value.name) return value.name;\r\n      return 'Anonymous function';\r\n   }\r\n   if (value instanceof Object) {\r\n      if (value.constructor) return value.constructor.name;\r\n      return 'Object';\r\n   }\r\n   name = typeof value;\r\n   return name[0].toUpperCase() + name.substring(1);\r\n}","code-length":270,"reference":"Gets the pretty name for the type of the value.\n","result":"Create a function to get the name of a value.","score":[0.1535,0.25]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (type) {\r\n   if (type === undefined) return 'undefined';\r\n   if (type === null) return 'null';\r\n   if (type instanceof Array) {\r\n      if (!type.length) return 'None';\r\n      var possibleTypes = [];\r\n      for (var i = 0; i < type.length; i++) {\r\n         possibleTypes.push(getNameForType(type[i]));\r\n      };\r\n      return possibleTypes.join(' or ');\r\n   }\r\n   if (type instanceof ArrayOf) {\r\n      return 'Array<' + getNameForType(type.type) + '>';\r\n   }\r\n   if (type instanceof Function) return type.name \r\n   return 'Invalid type';\r\n}","code-length":185,"reference":"Gets the pretty name for the type.\n","result":"Create a type name .","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(request) {\r\n        var me      = this,\r\n            url     = me.callParent(arguments),\r\n            params  = Ext.apply({}, request.getParams()),\r\n            filters = params.filters,\r\n            filter, i, value;\r\n        delete params.filters;\r\n        if (me.getAutoAppendParams()) {\r\n            url = Ext.urlAppend(url, Ext.Object.toQueryString(params));\r\n        }\r\n        if (filters && filters.length) {\r\n            for (i = 0; i < filters.length; i++) {\r\n                filter = filters[i];\r\n                value = filter.getValue();\r\n                if (value) {\r\n                    url = Ext.urlAppend(url, filter.getProperty() + \"=\" + value);\r\n                }\r\n            }\r\n        }\r\n        return url;\r\n    }","code-length":217,"reference":"Generates a url based on a given Ext.data.Request object. Adds the params and callback function name to the url\n","result":"Create a new request object.","score":[0.0174,0.0568]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getStateFromOptions (options, propertyName) {\r\n  propertyName = propertyName || 'state';\r\n  const stateName = options[propertyName] || options.resource.defaultState;\r\n  let stateObj = options.resource.states[stateName] || {validate: false};\r\n  stateObj.name = stateName;\r\n  return stateObj;\r\n}","code-length":92,"reference":"Retreive the state object descriptor from its name\n","result":"Get the state from the options.","score":[0.2165,0.1923]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validate (resource, doc, doValidate) {\r\n  return new Promise((resolve, reject) => {\r\n    if (doValidate !== true) {\r\n      return resolve();\r\n    }\r\n    if (resource.validate(doc)) {\r\n      return resolve();\r\n    } else {\r\n      debug('model have %d error(s)', resource.validate.errors.length);\r\n      return reject(resource.validate.errors);\r\n    }\r\n  });\r\n}","code-length":123,"reference":"Validate a document against its resource\n","result":"Validate the model.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction prune(str, max, nice, suf) {\r\n  max = max || 140\r\n  nice = _.isBoolean(nice) ? nice : false\r\n  if (!str || max <= 0 || str.length <= max) return str\r\n  suf = suf || \"...\"\r\n  str = str.substr(0, max)\r\n  return nice ? str.substr(0, Math.min(str.length, str.lastIndexOf(\" \"))) + suf : str\r\n}","code-length":123,"reference":"trims end of string, can trimmed back to next clean word, or add suffix to end of trimmed string","result":"Prune strings.","score":[0,0.0289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction attemptRender(reporter, filename, src, resolve, reject, globals) {\r\n\tglobals = globals || {};\r\n\tless.render(src, {\r\n\t\t\r\n\t\tpaths : [\r\n\t\t\t\"public\/static\/less\"\r\n\t\t],\r\n\t\t\r\n\t\tfilename : filename,\r\n\t\tmodifyVars : globals,\r\n\t\tcompress : false\r\n\t}, function(e, css) {\r\n\t\tif (e) {\r\n\t\t\tif ((\/^variable @(.+?) is undefined$\/).test(e.message)) {\r\n\t\t\t\t\r\n\t\t\t\tglobals[(\/^variable @(.+?) is undefined$\/).exec(e.message)[1]] = \"1\";\r\n\t\t\t\tattemptRender(reporter, filename, src, resolve, reject, globals);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\treporter(\"LESS\", filename, e.line, e.message);\r\n\t\t\treject();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresolve({\r\n\t\t\tfilename : filename,\r\n\t\t\tsrc : css.css || css\r\n\t\t});\r\n\t});\r\n}","code-length":277,"reference":"Attempt to validate the less file\n","result":"Render less files.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateArray(indexes) {\r\n  var valid = false;\r\n  if (typeof indexes === 'string') {\r\n    if (indexes.match(TYPE_ARRAY_REGEX)) {\r\n      valid = true;\r\n    }\r\n  }\r\n  return valid;\r\n}","code-length":76,"reference":"Validate the given value and make sure it is valid array indexes. The value must\nbe a valid String\n\n","result":"Validate array.","score":[0.0001,0.0289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addRoutes( pies, pie, routes, app ) {\r\n    if ( 'get' in routes ) {\r\n        routes.get.forEach( function( route ) {\r\n            Object.keys( route ).forEach( function( r ) {\r\n                var middlewares = true;\r\n                if ( typeof route[ r ] === 'string' ) {\r\n                    middlewares = false;\r\n                }\r\n                loadRoute( app, 'get', r, pies[ pie ].path, route[ r ], middlewares );\r\n            });\r\n        });\r\n    }\r\n    if ( 'post' in routes ) {\r\n        routes.post.forEach( function( route ) {\r\n            Object.keys( route ).forEach( function( r ) {\r\n                var middlewares = true;\r\n                if ( typeof route[ r ] === 'string' ) {\r\n                    middlewares = false;\r\n                }\r\n                loadRoute( app, 'post', r, pies[ pie ].path, route[ r ], middlewares );\r\n            });\r\n        });\r\n    }\r\n}","code-length":269,"reference":"Add ALL the routes!","result":"Add routes to the app.","score":[0.2857,0.2439]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateUUID() {\r\n    let dat = new Date().getTime();\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\/[xy]\/g, (cha) => {\r\n        const ran = (dat + (Math.random() * 16)) % 16 | 0;\r\n        dat = Math.floor(dat \/ 16);\r\n        return (cha === 'x' ? ran : ran & 0x3 | 0x8).toString(16);\r\n    });\r\n}","code-length":128,"reference":"Generates a unique 36 character hyphenated GUID\n","result":"Generate a random UUID.","score":[0.1509,0.2799]}
{"code":"\/*is used to<extra_id_0>\r\nfunction randomString(length, charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789') {\r\n    let str = '',\r\n        isAllNumeric = false,\r\n        isNegative = false,\r\n        useCharSet = charSet;\r\n    if (+length) {\r\n        if (!isString(charSet)) {\r\n            if (isNumber(charSet)) {\r\n                if (+charSet) {\r\n                    isAllNumeric = true;\r\n                    isNegative = +charSet < 0;\r\n                    useCharSet = `${Math.abs(+charSet)}`;\r\n                } else {\r\n                    useCharSet = ALPHANUMERIC_CHARS;\r\n                }\r\n            } else {\r\n                useCharSet = ALPHANUMERIC_CHARS;\r\n            }\r\n        }\r\n              const generateChar = function gc(len) {\r\n            return Math.round(Math.random() * (len - 1));\r\n        }.bind(null, useCharSet.length);\r\n              str = Array(+length).fill().map((v, index) => {\r\n            const newChar = generateChar();\r\n                        if (!index && isAllNumeric && !newChar) {\r\n                return useCharSet.charAt(newChar + 1);\r\n            }\r\n            return useCharSet.charAt(newChar);\r\n        }).join('');\r\n    }\r\n    if (isAllNumeric) {\r\n        return isNegative ? -+str : +str;\r\n    }\r\n    return str;\r\n}","code-length":385,"reference":"Generates a random string of text of a given length.\nWill generate an alpha-numeric string unless you specify a different character set as the second argument\n","result":"Generate random strings.","score":[0.0002,0.0422]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toUint(str) {\r\n    const string = window.btoa(unescape(encodeURIComponent(str))),\r\n        chars = string.split(''),\r\n        len = chars.length,\r\n        uintArray = [];\r\n    Array(len).fill().forEach((val, i) => uintArray.push(chars[i].charCodeAt(0)));\r\n    return new Uint8Array(uintArray);\r\n}","code-length":111,"reference":"Converts a string value to `Uint8array`\n","result":"Convert string to Uint.","score":[0.2304,0.2586]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toArrayBuffer(str) {\r\n        const len = isString(str) ? str.length : 0,\r\n        buf = new ArrayBuffer(len),\r\n        view = new Uint8Array(buf);\r\n    Array(len).fill().forEach((val, i) => (view[i] = str.charCodeAt(i) & 0xFF));\r\n    return view;\r\n}","code-length":100,"reference":"Converts a string value to an `ArrayBuffer`\n","result":"Create a new ArrayBuffer.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        if (!this.$backButtonContainer) {\r\n            return;\r\n        }\r\n        var i = 0,\r\n            backButtonContainer = this.$backButtonContainer,\r\n            items = backButtonContainer.items,\r\n            item;\r\n        for(;i < items.length; i++) {\r\n            item = items.get(i);\r\n            if(!item.isHidden()) {\r\n                this.$backButtonContainer.show();\r\n                return;\r\n            }\r\n        }\r\n        this.$backButtonContainer.hide();\r\n    }","code-length":147,"reference":"This is used for Blackberry SplitNavigation to monitor the state of child items in the bottom toolbar.\nif no visible children exist the toolbar will be hidden\n","result":"Hide the back button container.","score":[0.003,0.0202]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(message, priority, callerId) {\r\n        if (!this.getEnabled()) {\r\n            return this;\r\n        }\r\n        var statics = Logger,\r\n            priorities = statics.priorities,\r\n            priorityValue = priorities[priority],\r\n            caller = this.log.caller,\r\n            callerDisplayName = '',\r\n            writers = this.getWriters(),\r\n            event, i, originalCaller;\r\n        if (!priority) {\r\n            priority = 'info';\r\n        }\r\n        if (priorities[this.getMinPriority()] > priorityValue) {\r\n            return this;\r\n        }\r\n        if (!callerId) {\r\n            callerId = 1;\r\n        }\r\n        if (Ext.isArray(message)) {\r\n            message = message.join(\" \");\r\n        }\r\n        else {\r\n            message = String(message);\r\n        }\r\n        if (typeof callerId == 'number') {\r\n            i = callerId;\r\n            do {\r\n                i--;\r\n                caller = caller.caller;\r\n                if (!caller) {\r\n                    break;\r\n                }\r\n                if (!originalCaller) {\r\n                    originalCaller = caller.caller;\r\n                }\r\n                if (i <= 0 && caller.displayName) {\r\n                    break;\r\n                }\r\n            }\r\n            while (caller !== originalCaller);\r\n            callerDisplayName = Ext.getDisplayName(caller);\r\n        }\r\n        else {\r\n            caller = caller.caller;\r\n            callerDisplayName = Ext.getDisplayName(callerId) + '#' + caller.$name;\r\n        }\r\n        event = {\r\n            time: Ext.Date.now(),\r\n            priority: priorityValue,\r\n            priorityName: priority,\r\n            message: message,\r\n            caller: caller,\r\n            callerDisplayName: callerDisplayName\r\n        };\r\n        for (i in writers) {\r\n            if (writers.hasOwnProperty(i)) {\r\n                writers[i].write(Ext.merge({}, event));\r\n            }\r\n        }\r\n        return this;\r\n    }","code-length":518,"reference":"Logs a message to help with debugging.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyFileSync(source, destination) {\r\n  if (validateFileSync(source)) {\r\n    fs.writeFileSync(destination, fs.readFileSync(source));\r\n  }\r\n}","code-length":56,"reference":"Shortcut to copy a file Synchronously\n","result":"Copy files.","score":[0,0.0893]}
{"code":"\/*is used to<extra_id_0>\r\nfunction copyFilesMatchSync(match, source, destination) {\r\n  fs.readdirSync(source).forEach(function eachTemplate(filename) {\r\n    var sourceFile = path.join(source, filename);\r\n    var destinationFile = path.join(destination, filename);\r\n    if (match.test(path.basename(filename))) {\r\n      fs.writeFileSync(destinationFile, fs.readFileSync(sourceFile));\r\n    }\r\n  });\r\n}","code-length":120,"reference":"If there are any files in the source folder that are a match copy them to the destination.\n","result":"Copy files from source to destination.","score":[0.0369,0.1488]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceMatchFilesSync(match, source, destination) {\r\n  unlinkFilesMatchSync(match, destination);\r\n  copyFilesMatchSync(match, source, destination);\r\n}","code-length":51,"reference":"Copy any number files that are a match to a regex to a given destination.\nIf there are any files in the destination that are also a match replace them.\n","result":"Replace match files.","score":[0.0001,0.0366]}
{"code":"\/*is used to<extra_id_0>\r\nfunction unlinkFilesMatchSync(match, location) {\r\n  fs.readdirSync(location).forEach(function eachTemplate(filename) {\r\n    if (match.test(path.basename(filename))) {\r\n      var filePath = path.join(location, filename);\r\n      if (validateFileSync(filePath)) {\r\n        fs.unlinkSync(filePath);\r\n      }\r\n    }\r\n  });\r\n}","code-length":109,"reference":"If there are any files in the location folder that are a match remove them.\n","result":"Remove files from a template.","score":[0.0387,0.1071]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateDirectorySync(path, errorMessage) {\r\n  errorMessage = errorMessage || 'Error validateDirectorySync() the directory path is not valid ' + path;\r\n  var isValid = existsDirectorySync(path);\r\n  if (!isValid) {\r\n    console.error(errorMessage);\r\n  }\r\n  return isValid;\r\n}","code-length":85,"reference":"Validate if a given path has a valid directory, is it doesn't console.error with an optional custom message.\n","result":"Validate the directory path.","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction validateFileSync(path, errorMessage) {\r\n  errorMessage = errorMessage || 'Error validateFileSync() the file path is not valid ' + path;\r\n  var isValid = existsFileSync(path);\r\n  if (!isValid) {\r\n    console.error(errorMessage);\r\n  }\r\n  return isValid;\r\n}","code-length":85,"reference":"Validate if a given path has a valid file, is it doesn't console.error with an optional custom message.\n","result":"Validate the file path.","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction subDirectoriesWithFile(base, filename) {\r\n  var result = [];\r\n  if (fs.existsSync(base) && fs.statSync(base).isDirectory()) {\r\n    if (fs.existsSync(path.join(base, filename))) {\r\n      result.push(base);\r\n    }\r\n    fs.readdirSync(base)\r\n      .forEach(function (subdir) {\r\n        result.push.apply(result, subDirectoriesWithFile(path.join(base, subdir), filename));\r\n      });\r\n  }\r\n  return result;\r\n}","code-length":151,"reference":"Find all subdirectories of the base, recursively.\n","result":"Return a list of sub directories with file.","score":[0.1389,0.0704]}
{"code":"\/*is used to<extra_id_0>\r\nfunction maximisePath() {\r\n  var elements = Array.prototype.slice.call(arguments);\r\n  for (var i = 1; i < elements.length; i++) {\r\n    var directory = path.resolve(path.join.apply(path, elements.slice(0, i)));\r\n    if (!fs.existsSync(directory)) {\r\n      return null;\r\n    }\r\n    else if ((typeof elements[i] !== 'string') && ('test' in elements[i])) {\r\n      var matches = resolveDirMatches(directory, elements[i]);\r\n      if (matches.length === 0) {\r\n        return null;\r\n      } else {\r\n        elements[i] = matches[0];\r\n      }\r\n    }\r\n    else {\r\n      elements[i] = String(elements[i]);\r\n    }\r\n  }\r\n  var result = path.resolve(elements.join(path.sep));\r\n  return fs.existsSync(result) && result;\r\n}","code-length":247,"reference":"Match the path defined by path elements, where some may be RegExp.\nWhen there is more than one candidate, prefer the one with greatest interger value.\n","result":"Maximise the path.","score":[0.0002,0.0211]}
{"code":"\/*is used to<extra_id_0>\r\nfunction resolveDirMatches(directory, match) {\r\n  if (validateDirectorySync(directory)) {\r\n    return fs.readdirSync(directory)\r\n      .filter(function eachDirectoryItem(item) {\r\n        var resolved = path.resolve(path.join(directory, item));\r\n        return match.test(item) && fs.statSync(resolved).isDirectory();\r\n      })\r\n      .sort(compareHigher);\r\n  } else {\r\n    return [];\r\n  }\r\n}","code-length":130,"reference":"For a given directory find all files that match, the result will be sorted with highest numeric index first.\n","result":"Resolve files in a directory.","score":[0.0174,0.0568]}
{"code":"\/*is used to<extra_id_0>\r\nfunction compareHigher(a, b) {\r\n  var numA = parseFloat(\/[\\d\\.]+$\/.exec(a)[0]);\r\n  var numB = parseFloat(\/[\\d\\.]+$\/.exec(b)[0]);\r\n  if (isNaN(numA) || (numB > numA)) {\r\n    return +1;\r\n  } else if (isNaN(numB) || (numA > numB)) {\r\n    return -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}","code-length":136,"reference":"Rank a vs b based on any numeric component in their string.","result":"Compare two numbers .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reduceDirectories() {\r\n  return Array.prototype.slice.call(arguments)\r\n    .map(function (candidate) {\r\n      return path.normalize(candidate);\r\n    })\r\n    .filter(function (candidate) {\r\n      return fs.existsSync(candidate) && fs.statSync(candidate).isDirectory();\r\n    })\r\n    .shift();\r\n}","code-length":101,"reference":"Pick the first existing directory from any of the given arguments.\n","result":"Reduce directories.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(side) {\r\n        var menus = this.getMenus() || {},\r\n            menu = menus[side];\r\n        if(menu) this.hideMenu(side);\r\n        delete menus[side];\r\n        this.setMenus(menus);\r\n    }","code-length":72,"reference":"Removes a menu from a specified side.\n","result":"Hide a menu.","score":[0.1076,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(side) {\r\n        var menus = this.getMenus(),\r\n            menu = menus[side],\r\n            before, after,\r\n            viewportBefore, viewportAfter;\r\n        if (!menu || menu.isAnimating) {\r\n            return;\r\n        }\r\n        this.hideOtherMenus(side);\r\n        before = {\r\n            translateX: 0,\r\n            translateY: 0\r\n        };\r\n        after = {\r\n            translateX: 0,\r\n            translateY: 0\r\n        };\r\n        viewportBefore = {\r\n            translateX: 0,\r\n            translateY: 0\r\n        };\r\n        viewportAfter = {\r\n            translateX: 0,\r\n            translateY: 0\r\n        };\r\n        if (menu.$reveal) {\r\n            Ext.getBody().insertFirst(menu.element);\r\n        }\r\n        else {\r\n            Ext.Viewport.add(menu);\r\n        }\r\n        menu.show();\r\n        menu.addCls('x-' + side);\r\n        var size = (side == 'left' || side == 'right') ? menu.element.getWidth() : menu.element.getHeight();\r\n        if (side == 'left') {\r\n            before.translateX = -size;\r\n            viewportAfter.translateX = size;\r\n        }\r\n        else if (side == 'right') {\r\n            before.translateX = size;\r\n            viewportAfter.translateX = -size;\r\n        }\r\n        else if (side == 'top') {\r\n            before.translateY = -size;\r\n            viewportAfter.translateY = size;\r\n        }\r\n        else if (side == 'bottom') {\r\n            before.translateY = size;\r\n            viewportAfter.translateY = -size;\r\n        }\r\n        if (menu.$reveal) {\r\n            if (Ext.browser.getPreferredTranslationMethod() != 'scrollposition') {\r\n                menu.translate(0, 0);\r\n            }\r\n        }\r\n        else {\r\n            menu.translate(before.translateX, before.translateY);\r\n        }\r\n        if (menu.$cover) {\r\n            menu.getTranslatable().on('animationend', function() {\r\n                menu.isAnimating = false;\r\n            }, this, {\r\n                single: true\r\n            });\r\n            menu.translate(after.translateX, after.translateY, {\r\n                preserveEndState: true,\r\n                duration: 200\r\n            });\r\n        }\r\n        else {\r\n            this.translate(viewportBefore.translateX, viewportBefore.translateY);\r\n            this.getTranslatable().on('animationend', function() {\r\n                menu.isAnimating = false;\r\n            }, this, {\r\n                single: true\r\n            });\r\n            this.translate(viewportAfter.translateX, viewportAfter.translateY, {\r\n                preserveEndState: true,\r\n                duration: 200\r\n            });\r\n        }\r\n        menu.isAnimating = true;\r\n    }","code-length":742,"reference":"Shows a menu specified by the menu's side.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(side, animate) {\r\n        var menus = this.getMenus(),\r\n            menu = menus[side],\r\n            after, viewportAfter,\r\n            size;\r\n        animate = (animate === false) ? false : true;\r\n        if (!menu || (menu.isHidden() || menu.isAnimating)) {\r\n            return;\r\n        }\r\n        after = {\r\n            translateX: 0,\r\n            translateY: 0\r\n        };\r\n        viewportAfter = {\r\n            translateX: 0,\r\n            translateY: 0\r\n        };\r\n        size = (side == 'left' || side == 'right') ? menu.element.getWidth() : menu.element.getHeight();\r\n        if (side == 'left') {\r\n            after.translateX = -size;\r\n        }\r\n        else if (side == 'right') {\r\n            after.translateX = size;\r\n        }\r\n        else if (side == 'top') {\r\n            after.translateY = -size;\r\n        }\r\n        else if (side == 'bottom') {\r\n            after.translateY = size;\r\n        }\r\n        if (menu.$cover) {\r\n            if (animate) {\r\n                menu.getTranslatable().on('animationend', function() {\r\n                    menu.isAnimating = false;\r\n                    menu.hide();\r\n                }, this, {\r\n                    single: true\r\n                });\r\n                menu.translate(after.translateX, after.translateY, {\r\n                    preserveEndState: true,\r\n                    duration: 200\r\n                });\r\n            }\r\n            else {\r\n                menu.translate(after.translateX, after.translateY);\r\n                menu.hide()\r\n            }\r\n        }\r\n        else {\r\n            if (animate) {\r\n                this.getTranslatable().on('animationend', function() {\r\n                    menu.isAnimating = false;\r\n                    menu.hide();\r\n                }, this, {\r\n                    single: true\r\n                });\r\n                this.translate(viewportAfter.translateX, viewportAfter.translateY, {\r\n                    preserveEndState: true,\r\n                    duration: 200\r\n                });\r\n            }\r\n            else {\r\n                this.translate(viewportAfter.translateX, viewportAfter.translateY);\r\n                menu.hide();\r\n            }\r\n        }\r\n    }","code-length":585,"reference":"Hides a menu specified by the menu's side.\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(side, animation){\r\n        var menus = this.getMenus();\r\n        for (var menu in menus) {\r\n            if (side != menu) {\r\n                this.hideMenu(menu, animation);\r\n            }\r\n        }\r\n    }","code-length":71,"reference":"Hides all menus except for the side specified\n","result":"Hide menus.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(side) {\r\n        var menus = this.getMenus(), menu;\r\n        if (menus[side]) {\r\n            menu = menus[side];\r\n            if (menu.isHidden()) {\r\n                this.showMenu(side);\r\n            } else {\r\n                this.hideMenu(side);\r\n            }\r\n        }\r\n    }","code-length":95,"reference":"Toggles the menu specified by side\n","result":"Show menus.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction init(adapter, config) {\r\n  if (!fs) {\r\n    var Adapter = require('.\/adapters\/' + adapter);\r\n    fs = new Adapter(config);\r\n  }\r\n}","code-length":58,"reference":"Initializes the Hiera module.\n\n","result":"Initialize the filesystem.","score":[0.2925,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getHierarchy(cb) {\r\n  getConfig(function (err, config) {\r\n    if (err) {\r\n      cb(err);\r\n      return;\r\n    }\r\n    cb(null, config[':hierarchy']);\r\n  });\r\n}","code-length":72,"reference":"Gets the Hiera hierarchy.\n\n","result":"Get the hierarchy of the config.","score":[0.193,0.2381]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBackends(cb) {\r\n  getConfig(function (err, config) {\r\n    if (err) {\r\n      cb(err);\r\n      return;\r\n    }\r\n    cb(null, config[':backends']);\r\n  });\r\n}","code-length":74,"reference":"Retrieves all Hiera backend configurations.\n\n","result":"Get backends from the backend.","score":[0,0.1]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getBackendConfig(backend, cb) {\r\n  getConfig(function (err, config) {\r\n    if (err) {\r\n      cb(err);\r\n      return;\r\n    }\r\n    cb(null, config[':' + backend]);\r\n  });\r\n}","code-length":75,"reference":"Gets configuration for a specific backend.\n\n","result":"Get backend configuration.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFile(backend, file, cb) {\r\n  getBackendConfig(backend, function (err, config) {\r\n    file = [ config[':datadir'], '\/', file ].join('');\r\n    fs.readFile(file, cb);\r\n  });\r\n}","code-length":75,"reference":"Retrieves data from a Hiera file.\n\n","result":"Get the file from the backend.","score":[0.193,0.0833]}
{"code":"\/*is used to<extra_id_0>\r\nfunction saveFile(backend, file, data, cb) {\r\n  cb = typeof(cb) === 'function' ? cb : function () {};\r\n  getBackendConfig(backend, function (err, config) {\r\n    var datadir = config[':datadir'];\r\n    file = path.join(datadir, file);\r\n    fs.writeFile(file, data, cb);\r\n  });\r\n}","code-length":109,"reference":"Saves data to a Hiera file.\n\n","result":"Save file.","score":[0.0677,0.1786]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getOverrides(backend, file, cb) {\r\n  async.parallel([\r\n    function hierarchy(cb) {\r\n      getHierarchy(cb);\r\n    },\r\n    function backendConfig(cb) {\r\n      getBackendConfig(backend, cb);\r\n    }\r\n  ], function (err, results) {\r\n    var hierarchy, datadir, filename, tasks,\r\n        pos, searchHierarchy, tasks;\r\n    hierarchy = results[0];\r\n    datadir   = results[1][':datadir'];\r\n    filename  = file.remove('.' + backend);\r\n    tasks     = [];\r\n    pos = hierarchy.findIndex(filename);\r\n    searchHierarchy = hierarchy.to(pos);\r\n    getFile(backend, file, function (err, data) {\r\n      var sourceData;\r\n      if (err) {\r\n        cb(err);\r\n        return;\r\n      }\r\n      sourceData = yaml.safeLoad(data);\r\n      _.each(searchHierarchy, function (hierarchy) {\r\n        tasks.push(hierarchy + '.' + backend);\r\n      });\r\n      async.map(tasks, function (f, cb) {\r\n        getFile(backend, f, function (err, data) {\r\n          cb(null, {\r\n            file : f,\r\n            data : yaml.safeLoad(data)\r\n          });\r\n        });\r\n      }, function (err, comparisonData) {\r\n        var list = {};\r\n        if (err) {\r\n          cb(err);\r\n          return;\r\n        }\r\n        _.each(sourceData, function (key, value) {\r\n          _.each(comparisonData, function (set) {\r\n            _.each(set.data, function (cKey, cValue) {\r\n              if (cKey === key) {\r\n                list[cKey] = {\r\n                  file  : set.file,\r\n                  value : cValue\r\n                };\r\n              }\r\n            });\r\n            if (list[key]) {\r\n              return false;\r\n            }\r\n          });\r\n        });\r\n        cb(null, list);\r\n      });\r\n    });\r\n  });\r\n}","code-length":534,"reference":"Check for hierarchy overrides for a given file.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction done(result, callback) {\r\n  if (!_.isFunction(callback)) return\r\n  process.nextTick(function () { callback(null, result) })\r\n}","code-length":51,"reference":"wrap async success callback","result":"Create a new function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction fail(err, callback) {\r\n  if (!_.isFunction(callback)) return\r\n  let uError = new Error('Unknown Error')\r\n  err = err ? _.isError(err) ? err : _.isString(err) ? new Error(err) : uError : uError\r\n  process.nextTick(function () { callback(err) })\r\n}","code-length":96,"reference":"wrap async error callback","result":"Fail the promise.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data) {\r\n        var fieldsCollection = this.getModel().getFields();\r\n                if (fieldsCollection.isDirty) {\r\n            this.buildExtractors(true);\r\n            delete fieldsCollection.isDirty;\r\n        }\r\n        if (this.rootAccessor) {\r\n            return this.rootAccessor.call(this, data);\r\n        } else {\r\n            return data;\r\n        }\r\n    }","code-length":112,"reference":"We create this method because `root` is now a config so `getRoot` is already defined, but in the old\ndata package `getRoot` was passed a data argument and it would return the data inside of the `root`\nproperty. This method handles both cases.\n","result":"Build extractors.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction arrIncludes (arr, values) {\r\n  if (!Array.isArray(values)) { return inArray(arr, values) }\r\n  var len = values.length;\r\n  var i = -1;\r\n  while (i++ < len) {\r\n    var j = inArray(arr, values[i]);\r\n    if (j) {\r\n      return j\r\n    }\r\n  }\r\n  return false\r\n}","code-length":112,"reference":"> Check any of `values` exists on `arr`.\n\n**Example**\n\n```js\nvar arrIncludes = require('arr-includes')\n\nconsole.log(arrIncludes([1, 'bar', 55], 2)) \/\/ => false\nconsole.log(arrIncludes([1, 'bar', 3], 3)) \/\/ => 2\n\nconsole.log(arrIncludes([1, 'bar', 3, true], false)) \/\/ => false\nconsole.log(arrIncludes([1, 'bar', 44, true], true)) \/\/ => 3\n\nconsole.log(arrIncludes(['foo', 'bar'], 'baz')) \/\/ => false\nconsole.log(arrIncludes(['foo', 'bar'], 'foo')) \/\/ => true\nconsole.log(arrIncludes(['qux', 'foo', 'bar'], 'foo')) \/\/ => 1\nconsole.log(arrIncludes([true, 'qqq', 'bar'], true)) \/\/ => true\nconsole.log(arrIncludes(['true', 'qqq', 'bar'], true)) \/\/ => false\nconsole.log(arrIncludes(['qqq', 'bar', true], true)) \/\/ => 2\nconsole.log(arrIncludes(['qqq', 'true', 'bar'], true)) \/\/ => false\nconsole.log(arrIncludes([false, 'foo', null, 'bar'], null)) \/\/ => 2\n\nconsole.log(arrIncludes(['foo', 'bar', 'qux'], ['a', 'b', 'c'])) \/\/ => false\nconsole.log(arrIncludes(['b', 'a', 'c'], ['a', 'b', 'c'])) \/\/ => 1\nconsole.log(arrIncludes(['foo', 'bb', 'b'], ['a', 'b'])) \/\/ => 2\nconsole.log(arrIncludes(['foo', 'bar', 'qux'], ['a', 'b', 'foo'])) \/\/ => true\nconsole.log(arrIncludes(['bar', 123, 'foo', 'qux'], ['a', 'b', 'foo'])) \/\/ => 2\n```\n\n","result":"Check if an array includes a value.","score":[0.0,0.0038]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clean(src) {\r\n  let pidx = src.indexOf('http')\r\n  if(pidx > 0) src = src.substr(pidx)\r\n  return src ? pidx >= 0 || src.indexOf('\r\n}","code-length":65,"reference":"cleans url to be properly formatted","result":"Clean up the source.","score":[0,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction jquery(src) {\r\n  src = clean(src);\r\n  let params = {}\r\n  let match = null\r\n  if (!url || !_.isString(src)) return params\r\n  while (match = REGX_QUERY_OBJECT.exec(src)) { params[match[1]] = match[2] }\r\n  return params\r\n}","code-length":93,"reference":"return json query object","result":"Create a jquery object.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (el, options) {\r\n\tevents.EventEmitter.call(this);\r\n\tthis.el = el;\r\n\tthis.options = extend({}, this.options);\r\n\textend(this.options, options);\r\n\tthis.showTab = this._show;\r\n\tthis._init();\r\n}","code-length":84,"reference":"A module that represents a componentTabs object, a componentTab is a page composition tool.\n","result":"Create a tab.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toParam(obj, dontEncode) {\r\n    const arr = [];\r\n    let vals;\r\n    if (isObject(obj) && !isArray(obj)) {\r\n        Object.keys(obj).forEach((val) => {\r\n            if (isArray(obj[val])) {\r\n                vals = `[${\r\n                    obj[val].map(v => (isNaN(v) ? `\"${v}\"` : v)).join(',')\r\n                }]`;\r\n            } else {\r\n                vals = isNaN(obj[val]) ? `\"${obj[val]}\"` : obj[val];\r\n            }\r\n            arr.push(`${val}:${vals}`);\r\n        });\r\n        if (dontEncode) {\r\n            return `{${arr.join(',')}}`;\r\n        }\r\n        return encodeURIComponent(`{${arr.join(',')}}`);\r\n    }\r\n    return '';\r\n}","code-length":238,"reference":"Serializes an object's properties into JSON string then URI encoded\n","result":"Convert object to string.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(anchor, local, size) {\r\n        Ext.Logger.deprecate(\"getAnchorXY() is no longer available for Ext.Element. Please see Ext.Component#showBy() \" +\r\n            \"to do anchoring at Component level instead\", this);\r\n        anchor = (anchor || \"tl\").toLowerCase();\r\n        size = size || {};\r\n        var me = this,\r\n            vp = me.dom == document.body || me.dom == document,\r\n            width = size.width || vp ? window.innerWidth: me.getWidth(),\r\n            height = size.height || vp ? window.innerHeight: me.getHeight(),\r\n            xy,\r\n            rnd = Math.round,\r\n            myXY = me.getXY(),\r\n            extraX = vp ? 0: !local ? myXY[0] : 0,\r\n            extraY = vp ? 0: !local ? myXY[1] : 0,\r\n            hash = {\r\n                c: [rnd(width * 0.5), rnd(height * 0.5)],\r\n                t: [rnd(width * 0.5), 0],\r\n                l: [0, rnd(height * 0.5)],\r\n                r: [width, rnd(height * 0.5)],\r\n                b: [rnd(width * 0.5), height],\r\n                tl: [0, 0],\r\n                bl: [0, height],\r\n                br: [width, height],\r\n                tr: [width, 0]\r\n            };\r\n        xy = hash[anchor];\r\n        return [xy[0] + extraX, xy[1] + extraY];\r\n    }","code-length":403,"reference":"Gets the x,y coordinates specified by the anchor position on the element.\n\n","result":"Get anchor coordinates.","score":[0.0203,0.0901]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn, scope){\r\n        var items = [].concat(this.items),\r\n            i = 0,\r\n            len = items.length,\r\n            item;\r\n        for (; i < len; i++) {\r\n            item = items[i];\r\n            if (fn.call(scope || item, item, i, len) === false) {\r\n                break;\r\n            }\r\n        }\r\n    }","code-length":112,"reference":"Executes the specified function once for every item in the collection.\n\n","result":"Filter items.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n                if (config.path == null) {\r\n                    Ext.Logger.error('Ext.device.filesystem.DirectoryEntry#getFile: You must specify a `path` of the file.');\r\n                    return null;\r\n                }\r\n                if (config.options == null) {\r\n                    config.options = {};\r\n                }\r\n                var me = this;\r\n                Ext.device.Communicator.send({\r\n                    command: 'FileSystem#getEntry',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    newPath: config.path,\r\n                    directory: config.directory,\r\n                    create: config.options.create,\r\n                    exclusive: config.options.exclusive,\r\n                    callbacks: {\r\n                        success: function(path) {\r\n                            if (config.success) {\r\n                                var entry = config.directory\r\n                                    ? Ext.create('Ext.device.filesystem.DirectoryEntry', path, me.fileSystem)\r\n                                    : Ext.create('Ext.device.filesystem.FileEntry', path, me.fileSystem);\r\n                                config.success.call(config.scope || this, entry);\r\n                            }\r\n                        },\r\n                        failure: function(error) {\r\n                            if (config.failure) {\r\n                                config.failure.call(config.scope || this, error);\r\n                            }\r\n                        }\r\n                    },\r\n                    scope: config.scope || this\r\n                });\r\n            }","code-length":363,"reference":"Creates or looks up a file.\n\n","result":"Create a new file.","score":[0.2304,0.2586]}
{"code":"\/*is used to<extra_id_0>\r\nfunction toHaveText() {\r\n      return {\r\n        compare: function compare(element, text) {\r\n          var regexp = text instanceof RegExp ? text : new RegExp(text, 'ig');\r\n          var pass = element.getDOMNode().textContent.match(regexp);\r\n          var message = pass ? 'Text \"' + text + '\" is found within an element' : 'Text \"' + text + '\" is not found within an element';\r\n          return { pass: pass, message: message };\r\n        }\r\n      };\r\n    }","code-length":135,"reference":"Validate if element's DOM node has text","result":"Test if elements have text.","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            container = me.container,\r\n            baseCls = me.getBaseCls(),\r\n            scrollable, scrollViewElement, pinnedHeader;\r\n        Ext.apply(me, {\r\n            listItems: [],\r\n            headerItems: [],\r\n            updatedItems: [],\r\n            headerMap: [],\r\n            scrollDockItems: {\r\n                top: [],\r\n                bottom: []\r\n            }\r\n        });\r\n        this.translationMethod = Ext.browser.is.AndroidStock2 ? 'cssposition' : 'csstransform';\r\n        if (!container) {\r\n            container = me.container = Ext.factory({\r\n                xtype: 'container',\r\n                scrollable: {\r\n                    scroller: {\r\n                        autoRefresh: !me.getInfinite(),\r\n                        direction: 'vertical'\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        me.add(container);\r\n        scrollable = container.getScrollable();\r\n        scrollViewElement = me.scrollViewElement = scrollable.getElement();\r\n        me.scrollElement = scrollable.getScroller().getElement();\r\n        me.setScrollable(scrollable);\r\n        me.scrollableBehavior = container.getScrollableBehavior();\r\n        pinnedHeader = me.pinnedHeader = Ext.factory({\r\n            xtype: 'listitemheader',\r\n            html: '&nbsp;',\r\n            translatable: {\r\n                translationMethod: this.translationMethod\r\n            },\r\n            cls: [baseCls + '-header', baseCls + '-header-swap']\r\n        });\r\n        pinnedHeader.translate(0, -10000);\r\n        pinnedHeader.$position = -10000;\r\n        scrollViewElement.insertFirst(pinnedHeader.renderElement);\r\n        me.bind(scrollable.getScroller().getTranslatable(), 'doTranslate', 'onTranslate');\r\n    }","code-length":470,"reference":"We create complex instance arrays and objects in beforeInitialize so that we can use these inside of the initConfig process.","result":"Create a new list item.","score":[0,0.027]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            container = me.container,\r\n            scrollViewElement = me.scrollViewElement,\r\n            indexBar = me.getIndexBar(),\r\n            triggerEvent = me.getTriggerEvent(),\r\n            triggerCtEvent = me.getTriggerCtEvent();\r\n        if (indexBar) {\r\n            scrollViewElement.appendChild(indexBar.renderElement);\r\n        }\r\n        if (triggerEvent) {\r\n            me.on(triggerEvent, me.onItemTrigger, me);\r\n        }\r\n        if (triggerCtEvent) {\r\n            me.on(triggerCtEvent, me.onContainerTrigger, me);\r\n        }\r\n        container.element.on({\r\n            delegate: '.' + me.getBaseCls() + '-disclosure',\r\n            tap: 'handleItemDisclosure',\r\n            scope: me\r\n        });\r\n        container.element.on({\r\n            resize: 'onContainerResize',\r\n            scope: me\r\n        });\r\n        container.innerElement.on({\r\n            touchstart: 'onItemTouchStart',\r\n            touchend: 'onItemTouchEnd',\r\n            tap: 'onItemTap',\r\n            taphold: 'onItemTapHold',\r\n            singletap: 'onItemSingleTap',\r\n            doubletap: 'onItemDoubleTap',\r\n            swipe: 'onItemSwipe',\r\n            delegate: '.' + Ext.baseCSSPrefix + 'list-item',\r\n            scope: me\r\n        });\r\n        if (me.getStore()) {\r\n            me.refresh();\r\n        }\r\n    }","code-length":401,"reference":"We override DataView's initialize method with an empty function","result":"Create a new instance of the class .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index) {\r\n        var listItems = this.listItems,\r\n            ln = listItems.length,\r\n            i, listItem;\r\n        for (i = 0; i < ln; i++) {\r\n            listItem = listItems[i];\r\n            if (listItem.$dataIndex == index) {\r\n                return listItem;\r\n            }\r\n        }\r\n    }","code-length":101,"reference":"Returns an item at the specified index.\n","result":"Find the corresponding list item.","score":[0.1611,0.0735]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(url, onLoad, onError, scope, charset) {\r\n            var script = document.createElement('script'),\r\n                me = this,\r\n                onLoadFn = function() {\r\n                    me.cleanupScriptElement(script);\r\n                    onLoad.call(scope);\r\n                },\r\n                onErrorFn = function() {\r\n                    me.cleanupScriptElement(script);\r\n                    onError.call(scope);\r\n                };\r\n            script.type = 'text\/javascript';\r\n            script.src = url;\r\n            script.onload = onLoadFn;\r\n            script.onerror = onErrorFn;\r\n            script.onreadystatechange = function() {\r\n                if (this.readyState === 'loaded' || this.readyState === 'complete') {\r\n                    onLoadFn();\r\n                }\r\n            };\r\n            if (charset) {\r\n                script.charset = charset;\r\n            }\r\n                        this.documentHead.appendChild(script);\r\n            return script;\r\n        }","code-length":253,"reference":"Inject a script element to document's head, call onLoad and onError accordingly\n","result":"Load a script .","score":[0.0611,0.1674]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(url, onLoad, onError, scope, synchronous) {\r\n            var me = this,\r\n                isFileLoaded = this.isFileLoaded,\r\n                scriptElements = this.scriptElements,\r\n                noCacheUrl = url + (this.getConfig('disableCaching') ? ('?' + this.getConfig('disableCachingParam') + '=' + Ext.Date.now()) : ''),\r\n                xhr, status, content, onScriptError;\r\n            if (isFileLoaded[url]) {\r\n                return this;\r\n            }\r\n            scope = scope || this;\r\n            this.isLoading = true;\r\n            if (!synchronous) {\r\n                onScriptError = function() {\r\n                    onError.call(scope, \"Failed loading '\" + url + \"', please verify that the file exists\", synchronous);\r\n                };\r\n                if (!Ext.isReady && Ext.onDocumentReady) {\r\n                    Ext.onDocumentReady(function() {\r\n                        if (!isFileLoaded[url]) {\r\n                            scriptElements[url] = me.injectScriptElement(noCacheUrl, onLoad, onScriptError, scope);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    scriptElements[url] = this.injectScriptElement(noCacheUrl, onLoad, onScriptError, scope);\r\n                }\r\n            }\r\n            else {\r\n                if (typeof XMLHttpRequest != 'undefined') {\r\n                    xhr = new XMLHttpRequest();\r\n                } else {\r\n                    xhr = new ActiveXObject('Microsoft.XMLHTTP');\r\n                }\r\n                try {\r\n                    xhr.open('GET', noCacheUrl, false);\r\n                    xhr.send(null);\r\n                }\r\n                catch (e) {\r\n                    onError.call(this, \"Failed loading synchronously via XHR: '\" + url + \"'; It's likely that the file is either \" +\r\n                                       \"being loaded from a different domain or from the local file system whereby cross origin \" +\r\n                                       \"requests are not allowed due to security reasons. Use asynchronous loading with \" +\r\n                                       \"Ext.require instead.\", synchronous);\r\n                }\r\n                status = (xhr.status == 1223) ? 204 : xhr.status;\r\n                content = xhr.responseText;\r\n                if ((status >= 200 && status < 300) || status == 304 || (status == 0 && content.length > 0)) {\r\n                    Ext.globalEval(content + \"\\n\r\n                    onLoad.call(scope);\r\n                }\r\n                else {\r\n                    onError.call(this, \"Failed loading synchronously via XHR: '\" + url + \"'; please \" +\r\n                                       \"verify that the file exists. \" +\r\n                                       \"XHR status code: \" + status, synchronous);\r\n                }\r\n                xhr = null;\r\n            }\r\n        }","code-length":673,"reference":"Load a script file, supports both asynchronous and synchronous approaches\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nasync function (fname, attrs) {\r\n                let partialDirs;\r\n        if (typeof module.exports.configuration.partialDirs === 'undefined'\r\n         || !module.exports.configuration.partialDirs\r\n         || module.exports.configuration.partialDirs.length <= 0) {\r\n            partialDirs = [ __dirname ];\r\n         } else {\r\n            partialDirs = module.exports.configuration.partialDirs;\r\n         }\r\n        var partialFound = await globfs.findAsync(partialDirs, fname);\r\n        if (!partialFound) throw new Error(`No partial found for ${fname} in ${util.inspect(partialDirs)}`);\r\n        partialFound = partialFound[0];\r\n        if (!partialFound) throw new Error(`No partial found for ${fname} in ${util.inspect(partialDirs)}`);\r\n            var partialFname = path.join(partialFound.basedir, partialFound.path);\r\n        var stats = await fs.stat(partialFname);\r\n        if (!stats.isFile()) {\r\n            throw new Error(`doPartialAsync non-file found for ${fname} - ${partialFname}`);\r\n        }\r\n        var partialText = await fs.readFile(partialFname, 'utf8');\r\n        if (\/\\.ejs$\/i.test(partialFname)) {\r\n            try { return ejs.render(partialText, attrs); } catch (e) {\r\n                throw new Error(`EJS rendering of ${fname} failed because of ${e}`);\r\n            }\r\n        }  else if (\/\\.html$\/i.test(partialFname)) {\r\n            return partialText;\r\n        } else {\r\n            throw new Error(\"No rendering support for ${fname}\");\r\n        }\r\n    }","code-length":423,"reference":"Replaceable function to handle rendering","result":"Render a partial file.","score":[0,0.102]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (record) {\r\n        var me = this,\r\n            fields = record.getFields(),\r\n            idProperty = record.getIdProperty(),\r\n            uniqueIdStrategy = me.getUniqueIdStrategy(),\r\n            data = {},\r\n            name, value;\r\n        fields.each(function (field) {\r\n            if (field.getPersist()) {\r\n                name = field.getName();\r\n                if (name === idProperty && !uniqueIdStrategy) {\r\n                    return;\r\n                }\r\n                value = record.get(name);\r\n                if (field.getType().type == 'date') {\r\n                    value = me.writeDate(field, value);\r\n                }\r\n                data[name] = value;\r\n            }\r\n        }, me);\r\n        return data;\r\n    }","code-length":200,"reference":"Formats the data for each record before sending it to the server. This\nmethod should be overridden to format the data in a way that differs from the default.\n","result":"Store data in a record.","score":[0.0041,0.1107]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(provider) {\r\n        var me = this,\r\n            args = Ext.toArray(arguments),\r\n            i = 0, ln;\r\n        if (args.length > 1) {\r\n            for (ln = args.length; i < ln; ++i) {\r\n                me.addProvider(args[i]);\r\n            }\r\n            return;\r\n        }\r\n        if (!provider.isProvider) {\r\n            provider = Ext.create('direct.' + provider.type + 'provider', provider);\r\n        }\r\n        me.providers.add(provider);\r\n        provider.on('data', me.onProviderData, me);\r\n        if (!provider.isConnected()) {\r\n            provider.connect();\r\n        }\r\n        return provider;\r\n    }","code-length":194,"reference":"Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods. If the provider\nis not already connected, it will auto-connect.\n\nExt.direct.Manager.addProvider({\ntype: \"remoting\",       \/\/ create a {","result":"Create a direct provider.","score":[0.0003,0.0642]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(provider) {\r\n        var me = this,\r\n            providers = me.providers;\r\n        provider = provider.isProvider ? provider : providers.get(provider);\r\n        if (provider) {\r\n            provider.un('data', me.onProviderData, me);\r\n            providers.remove(provider);\r\n            return provider;\r\n        }\r\n        return null;\r\n    }","code-length":103,"reference":"Removes the provider.\n","result":"Remove a provider.","score":[0.4082,0.3333]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        config = config || {};\r\n        Ext.applyIf(config, {\r\n            application: this\r\n        });\r\n        this.initConfig(config);\r\n        for (var key in config) {\r\n            this[key] = config[key];\r\n        }\r\n        if (config.autoCreateViewport) {\r\n            Ext.Logger.deprecate(\r\n                '[Ext.app.Application] autoCreateViewport has been deprecated in Sencha Touch 2. Please implement a ' +\r\n                'launch function on your Application instead and use Ext.create(\"MyApp.view.Main\") to create your initial UI.'\r\n            );\r\n        }\r\n        Ext.Loader.setConfig({ enabled: true });\r\n        Ext.require(this.getRequires(), function() {\r\n            if (this.getEnableLoader() !== false) {\r\n                Ext.require(this.getProfiles(), this.onProfilesLoaded, this);\r\n            }\r\n        }, this);\r\n    }","code-length":246,"reference":"Constructs a new Application instance.","result":"Create a new application.","score":[0.3519,0.3827]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(name, profileName) {\r\n        var instances = this.getControllerInstances(),\r\n            appName   = this.getName(),\r\n            format    = Ext.String.format,\r\n            topLevelName;\r\n        if (name instanceof Ext.app.Controller) {\r\n            return name;\r\n        }\r\n        if (instances[name]) {\r\n            return instances[name];\r\n        } else {\r\n            topLevelName = format(\"{0}.controller.{1}\", appName, name);\r\n            profileName  = format(\"{0}.controller.{1}.{2}\", appName, profileName, name);\r\n            return instances[profileName] || instances[topLevelName];\r\n        }\r\n    }","code-length":175,"reference":"Returns the Controller instance for the given controller name.\n","result":"Create a new controller instance.","score":[0.108,0.0581]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        delete this.onItemAdd;\r\n        if (this.innerHtmlElement && !this.getHtml()) {\r\n            this.innerHtmlElement.destroy();\r\n            delete this.innerHtmlElement;\r\n        }\r\n        this.on('innerstatechange', 'onItemInnerStateChange', this, {\r\n            delegate: '> component'\r\n        });\r\n        return this.onItemAdd.apply(this, arguments);\r\n    }","code-length":117,"reference":"Initialize layout and event listeners the very first time an item is added\n","result":"Create a new item.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(item, destroy) {\r\n        var me = this,\r\n            index = me.indexOf(item),\r\n            innerItems = me.getInnerItems();\r\n        if (destroy === undefined) {\r\n            destroy = me.getAutoDestroy();\r\n        }\r\n        if (index !== -1) {\r\n            if (!me.removingAll && innerItems.length > 1 && item === me.getActiveItem()) {\r\n                me.on({\r\n                    activeitemchange: 'doRemove',\r\n                    scope: me,\r\n                    single: true,\r\n                    order: 'after',\r\n                    args: [item, index, destroy]\r\n                });\r\n                me.doResetActiveItem(innerItems.indexOf(item));\r\n            }\r\n            else {\r\n                me.doRemove(item, index, destroy);\r\n                if (innerItems.length === 0) {\r\n                    me.setActiveItem(null);\r\n                }\r\n            }\r\n        }\r\n        return me;\r\n    }","code-length":252,"reference":"Removes an item from this Container, optionally destroying it.\n","result":"Return item.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(destroy, everything) {\r\n        var items = this.items,\r\n            ln = items.length,\r\n            i = 0,\r\n            item;\r\n        if (typeof destroy != 'boolean') {\r\n            destroy = this.getAutoDestroy();\r\n        }\r\n        everything = Boolean(everything);\r\n        this.removingAll = true;\r\n        for (; i < ln; i++) {\r\n            item = items.getAt(i);\r\n            if (item && (everything || item.isInnerItem())) {\r\n                this.doRemove(item, i, destroy);\r\n                i--;\r\n                ln--;\r\n            }\r\n        }\r\n        this.setActiveItem(null);\r\n        this.removingAll = false;\r\n        return this;\r\n    }","code-length":205,"reference":"Removes all items currently in the Container, optionally destroying them all.\n","result":"Return this.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(activeItem, animation) {\r\n        var layout = this.getLayout(),\r\n            defaultAnimation;\r\n        if (this.activeItemAnimation) {\r\n            this.activeItemAnimation.destroy();\r\n        }\r\n        this.activeItemAnimation = animation = new Ext.fx.layout.Card(animation);\r\n        if (animation && layout.isCard) {\r\n            animation.setLayout(layout);\r\n            defaultAnimation = layout.getAnimation();\r\n            if (defaultAnimation) {\r\n                defaultAnimation.disable();\r\n            }\r\n            animation.on('animationend', function() {\r\n                if (defaultAnimation) {\r\n                    defaultAnimation.enable();\r\n                }\r\n                animation.destroy();\r\n            }, this);\r\n        }\r\n        return this.setActiveItem(activeItem);\r\n    }","code-length":206,"reference":"Animates to the supplied `activeItem` with a specified animation. Currently this only works\nwith a Card layout.  This passed animation will override any default animations on the\ncontainer, for a single card switch. The animation will be destroyed when complete.\n","result":"Animate the active item.","score":[0.0,0.0275]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(deep) {\r\n        var items = this.getItems().items.slice(),\r\n            ln = items.length,\r\n            i, item;\r\n        if (deep) {\r\n            for (i = 0; i < ln; i++) {\r\n                item = items[i];\r\n                if (item.getRefItems) {\r\n                    items = items.concat(item.getRefItems(true));\r\n                }\r\n            }\r\n        }\r\n        return items;\r\n    }","code-length":129,"reference":"Used by ComponentQuery to retrieve all of the items which can potentially be considered a child of this Container. This should be overridden by components which have child items that are not contained in items. For example `dockedItems`, `menu`, etc ","result":"Get the items of the collection.","score":[0.0012,0.0546]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(e) {\r\n            var srcElement = e.srcElement.nodeName.toUpperCase(),\r\n                selectableElements = ['INPUT', 'TEXTAREA'];\r\n            if (selectableElements.indexOf(srcElement) == -1) {\r\n                return false;\r\n            }\r\n        }","code-length":79,"reference":"There is -ms-user-select CSS property for IE10, but it seems it works only in desktop browser. So we need to prevent selection event.","result":"Prevent IE from firing events.","score":[0,0.0236]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(number, min, max) {\r\n        number = parseFloat(number);\r\n        if (!isNaN(min)) {\r\n            number = Math.max(number, min);\r\n        }\r\n        if (!isNaN(max)) {\r\n            number = Math.min(number, max);\r\n        }\r\n        return number;\r\n    }","code-length":93,"reference":"Checks whether or not the passed number is within a desired range.  If the number is already within the\nrange it is returned, otherwise the min or max value is returned depending on which side of the range is\nexceeded. Note that this method returns the constrained value but does not change the current number.\n","result":"Calculate the number.","score":[0.0,0.0201]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(value, increment, minValue, maxValue) {\r\n        var newValue = value,\r\n            m;\r\n        if (!(increment && value)) {\r\n            return value;\r\n        }\r\n        m = value % increment;\r\n        if (m !== 0) {\r\n            newValue -= m;\r\n            if (m * 2 >= increment) {\r\n                newValue += increment;\r\n            } else if (m * 2 < -increment) {\r\n                newValue -= increment;\r\n            }\r\n        }\r\n        return Ext.Number.constrain(newValue, minValue,  maxValue);\r\n    }","code-length":152,"reference":"Snaps the passed number between stopping points based upon a passed increment value.\n","result":"Constrain a number to a given range.","score":[0.0815,0.2061]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(value, precision) {\r\n        if (isToFixedBroken) {\r\n            precision = precision || 0;\r\n            var pow = Math.pow(10, precision);\r\n            return (Math.round(value * pow) \/ pow).toFixed(precision);\r\n        }\r\n        return value.toFixed(precision);\r\n    }","code-length":90,"reference":"Formats a number using fixed-point notation\n","result":"Return value.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction logger(req, res, next) {\r\n  if (req.url.substr(0, 2) === \"\/r\") {\r\n    console.log(req.method, decodeURIComponent(req.url), req.body ? JSON.stringify(req.body) : \"\");\r\n  }\r\n  next();\r\n}","code-length":84,"reference":"simple logger middleware","result":"Log requests.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction typeConvert(obj, onlyDate) {\r\n  var i, res;\r\n  if (typeof obj === \"object\") {\r\n    for (i in obj) {\r\n      if (obj.hasOwnProperty(i)) {\r\n        obj[i] = typeConvert(obj[i], onlyDate);\r\n      }\r\n    }\r\n  } else if (typeof obj === \"string\") {\r\n    if (!onlyDate && obj.match(\/^([0-9.]+|true|false|undefined|null)$\/)) {\r\n      obj = eval(obj);\r\n    } else {\r\n      res = obj.match(\/^\"?(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z)\"?$\/);\r\n      if (res) {\r\n        obj = new Date(res[1]);\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}","code-length":242,"reference":"simple string to native-type conversion middleware","result":"Convert object to date.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction typeConvertMiddleware(req, res, next) {\r\n  typeConvert(req.params);\r\n  typeConvert(req.body, true);\r\n  next();\r\n}","code-length":51,"reference":"middleware that executes typeconvert on the query and the body","result":"Prevent type conversion.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction defineRoute(method, route, handler) {\r\n    server[method](route, function (req, res) {\r\n      var store = stores.get(req.params.resource);\r\n      delete req.params.resource;\r\n      handler(req, store, function (error, docs) {\r\n        if (error) {\r\n          res.status(500);\r\n          res.end(error);\r\n        } else if (!docs) {\r\n          res.status(404);\r\n          res.end(\"Not found\");\r\n        } else {\r\n          res.json(docs);\r\n        }\r\n      });\r\n    });\r\n  }","code-length":164,"reference":"convenience method to define a restify route","result":"Define routes.","score":[0,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction routeURL() {\r\n    var prefix = options.prefix || \"\",\r\n      args = [\"\/\" + prefix, \":resource\"].concat(Array.prototype.slice.call(arguments));\r\n    return path.join.apply(path, args);\r\n  }","code-length":69,"reference":"convenience method to create a routing URL","result":"Generate the route URL.","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction createPasswordHash(object) {\r\n    if (!object) return object;\r\n    var password = object.password;\r\n    if (password) {\r\n      delete object.password;\r\n      object.passwordSalt = sha1(Math.random().toString());\r\n      object.passwordHash = sha1(\"restify-magic\" + object.passwordSalt + password);\r\n    }\r\n    return object;\r\n  }","code-length":108,"reference":"create password salt and hash","result":"Create password hashes.","score":[0.2096,0.3906]}
{"code":"\/*is used to<extra_id_0>\r\nfunction( json, typeSpecification, array ) {\r\n      var keys,\r\n          current = json,\r\n          nested = [],\r\n          nestedKeys = [],\r\n          levels = [],\r\n          query = 'COLUMN_CREATE(',\r\n          root = true,\r\n          curNest = '',\r\n          curItem,\r\n          item = 0,\r\n          level = 0;\r\n    while( current ) {\r\n      keys = Object.keys( current );\r\n      var len = keys.length;\r\n      var _l;\r\n      var deepestLevel = 1;\r\n      for( var i = 0; i < len; ++i ) {\r\n        if( ( _l = current[ keys[ i ] ] ) === null || _l === undefined ) {\r\n          continue;\r\n        }\r\n        if( typeof( _l ) === 'object' ) {\r\n          if( !Object.keys( _l ).length ) {\r\n            _l = null;\r\n            if( !typeSpecification ) {\r\n              query += '\\'' + keys[ i ].replace(\/\\\\\/g, '\\\\\\\\')\r\n                .replace(\/\\u0008\/g, '\\\\b')\r\n                .replace(\/'\/g, '\\\\\\'')\r\n                .replace(\/\\u0000\/g, '\\\\0') + '\\', NULL, ';\r\n            }\r\n            else {\r\n              query += '?, NULL, ';\r\n              array.push( keys[ i ] );\r\n            }\r\n            continue;\r\n          }\r\n          nested.push( _l );\r\n          nestedKeys.push( keys[ i ] );\r\n          if ( curItem !== item ) {\r\n              curItem = item;\r\n              ++level;\r\n              levels.push( { level: level - 1, nestSep: curNest + ')' } );\r\n          }\r\n          else {\r\n            levels.push( { level: level - 1, nestSep: ')' } );\r\n          }\r\n        }\r\n        else {\r\n          var queryType = typeof( _l );\r\n          if( !typeSpecification ) {\r\n            query += '\\'' + keys[ i ].replace(\/\\\\\/g, '\\\\\\\\')\r\n              .replace(\/\\u0008\/g, '\\\\b')\r\n              .replace(\/'\/g, '\\\\\\'')\r\n              .replace(\/\\u0000\/g, '\\\\0') + '\\', ';\r\n          }\r\n          else {\r\n            query += '?, ';\r\n            array.push( keys[ i ] );\r\n          }\r\n          switch( queryType ) {\r\n            case 'boolean':\r\n              query += ( ( _l === true ) ? 1 : 0 ) + ' AS unsigned integer, ';\r\n              break;\r\n            case 'number':\r\n              query += _l + ' AS double, ';\r\n              break;\r\n            default:\r\n              if( !typeSpecification ) {\r\n                query += '\\'' + _l.replace(\/\\\\\/g, '\\\\\\\\')\r\n                .replace(\/\\u0008\/g, '\\\\b')\r\n                .replace(\/'\/g, '\\\\\\'')\r\n                .replace(\/\\u0000\/g, '\\\\0') + '\\', ';\r\n              }\r\n              else {\r\n                query += '?, ';\r\n                array.push( _l );\r\n              }\r\n              break;\r\n          }\r\n        }\r\n      }\r\n      if( root ) {\r\n        root = false;\r\n      }\r\n      else {\r\n        if( level === 0 )\r\n          query = query.substring( 0, query.length - 2 ) + curNest + ', ';\r\n      }\r\n      if( nested.length !== 0 ) {\r\n        if( !typeSpecification ) {\r\n          query += '\\'' + nestedKeys.pop().replace(\/\\\\\/g, '\\\\\\\\')\r\n            .replace(\/\\u0008\/g, '\\\\b')\r\n            .replace(\/'\/g, '\\\\\\'')\r\n            .replace(\/\\u0000\/g, '\\\\0') + '\\', COLUMN_CREATE(';\r\n        }\r\n        else {\r\n          query += '?, COLUMN_CREATE(';\r\n          array.push( nestedKeys.pop() );\r\n        }\r\n      }\r\n      else {\r\n        query = query.substring( 0, query.length - 2 );\r\n      }\r\n      current = nested.pop();\r\n      ++item;\r\n      level = levels.pop() || 0;\r\n      if ( level ) {\r\n        curNest = level.nestSep;\r\n        level = level.level;\r\n      }\r\n      deepestLevel = level + 1;\r\n    }\r\n    query += ')';\r\n    return query;\r\n  }","code-length":1119,"reference":"A non recursive way to resolve our json schema to the create query.\n\nWe handle Numbers by default as double, booleans as unsigned integer\nand everything else as string.\n\nIf you need or want to specify the types, you can set the second parameter\nto call the type defined variant instead.\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node) {\r\n                    if (Ext.isObject(node) && !node.isModel) {\r\n                        node = Ext.data.ModelManager.create(node, this.modelName);\r\n                    }\r\n                    return Ext.data.NodeInterface.decorate(node);\r\n                }","code-length":79,"reference":"Ensures that the passed object is an instance of a Record with the NodeInterface applied\n","result":"Create a node interface .","score":[0.0325,0.0357]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(silent) {\r\n                    var me = this,\r\n                        parentNode = me.parentNode,\r\n                        isFirst = (!parentNode ? true : parentNode.firstChild == me),\r\n                        isLast = (!parentNode ? true : parentNode.lastChild == me),\r\n                        depth = 0,\r\n                        parent = me,\r\n                        children = me.childNodes,\r\n                        ln = children.length,\r\n                        i;\r\n                    while (parent.parentNode) {\r\n                        ++depth;\r\n                        parent = parent.parentNode;\r\n                    }\r\n                    me.beginEdit();\r\n                    me.set({\r\n                        isFirst: isFirst,\r\n                        isLast: isLast,\r\n                        depth: depth,\r\n                        index: parentNode ? parentNode.indexOf(me) : 0,\r\n                        parentId: parentNode ? parentNode.getId() : null\r\n                    });\r\n                    me.endEdit(silent);\r\n                    if (silent) {\r\n                        me.commit(silent);\r\n                    }\r\n                    for (i = 0; i < ln; i++) {\r\n                        children[i].updateInfo(silent);\r\n                    }\r\n                }","code-length":273,"reference":"Updates general data of this node like isFirst, isLast, depth. This\nmethod is internally called after a node is moved. This shouldn't\nhave to be called by the developer unless they are creating custom\nTree plugins.\n","result":"Create a new function to update the info of a node.","score":[0.0143,0.0896]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node, destroy, suppressEvents, suppressNodeUpdate) {\r\n                    var me = this,\r\n                        index = me.indexOf(node);\r\n                    if (index == -1 || (suppressEvents !== true && me.fireEvent(\"beforeremove\", me, node) === false)) {\r\n                        return false;\r\n                    }\r\n                    Ext.Array.erase(me.childNodes, index, 1);\r\n                    if (me.firstChild == node) {\r\n                        me.setFirstChild(node.nextSibling);\r\n                    }\r\n                    if (me.lastChild == node) {\r\n                        me.setLastChild(node.previousSibling);\r\n                    }\r\n                    if (suppressEvents !== true) {\r\n                        me.fireEvent(\"remove\", me, node);\r\n                    }\r\n                    if (node.previousSibling) {\r\n                        node.previousSibling.nextSibling = node.nextSibling;\r\n                        node.previousSibling.updateInfo(suppressNodeUpdate);\r\n                    }\r\n                    if (node.nextSibling) {\r\n                        node.nextSibling.previousSibling = node.previousSibling;\r\n                        node.nextSibling.updateInfo(suppressNodeUpdate);\r\n                    }\r\n                    if (!me.childNodes.length) {\r\n                        me.set('loaded', me.isLoaded());\r\n                    }\r\n                    if (destroy) {\r\n                        node.destroy(true);\r\n                    } else {\r\n                        node.clear();\r\n                    }\r\n                    return node;\r\n                }","code-length":364,"reference":"Removes a child node from this node.\n","result":"Create a new function to be used to create a new object.","score":[0.0891,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(destroy) {\r\n                    var me = this;\r\n                    me.parentNode = me.previousSibling = me.nextSibling = null;\r\n                    if (destroy) {\r\n                        me.firstChild = me.lastChild = null;\r\n                    }\r\n                }","code-length":73,"reference":"Clear the node.\n","result":"No valid comments generated.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(silent) {\r\n                                        var me = this,\r\n                        options = me.destroyOptions;\r\n                    if (silent === true) {\r\n                        me.clear(true);\r\n                        Ext.each(me.childNodes, function(n) {\r\n                            n.destroy(true);\r\n                        });\r\n                        me.childNodes = null;\r\n                        delete me.destroyOptions;\r\n                        me.callOverridden([options]);\r\n                    } else {\r\n                        me.destroyOptions = silent;\r\n                        me.remove(true);\r\n                    }\r\n                }","code-length":145,"reference":"Destroys the node.","result":"Destroy a node .","score":[0,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node, refNode, suppressEvents) {\r\n                    var me = this,\r\n                        index     = me.indexOf(refNode),\r\n                        oldParent = node.parentNode,\r\n                        refIndex  = index,\r\n                        ps;\r\n                    if (!refNode) {\r\n                        return me.appendChild(node);\r\n                    }\r\n                    if (node == refNode) {\r\n                        return false;\r\n                    }\r\n                    node = me.createNode(node);\r\n                    if (suppressEvents !== true && me.fireEvent(\"beforeinsert\", me, node, refNode) === false) {\r\n                        return false;\r\n                    }\r\n                    if (oldParent == me && me.indexOf(node) < index) {\r\n                        refIndex--;\r\n                    }\r\n                    if (oldParent) {\r\n                        if (suppressEvents !== true && node.fireEvent(\"beforemove\", node, oldParent, me, index, refNode) === false) {\r\n                            return false;\r\n                        }\r\n                        oldParent.removeChild(node);\r\n                    }\r\n                    if (refIndex === 0) {\r\n                        me.setFirstChild(node);\r\n                    }\r\n                    Ext.Array.splice(me.childNodes, refIndex, 0, node);\r\n                    node.parentNode = me;\r\n                    node.nextSibling = refNode;\r\n                    refNode.previousSibling = node;\r\n                    ps = me.childNodes[refIndex - 1];\r\n                    if (ps) {\r\n                        node.previousSibling = ps;\r\n                        ps.nextSibling = node;\r\n                        ps.updateInfo();\r\n                    } else {\r\n                        node.previousSibling = null;\r\n                    }\r\n                    node.updateInfo();\r\n                    if (!me.isLoaded()) {\r\n                        me.set('loaded', true);\r\n                    }\r\n                    else if (me.childNodes.length === 1) {\r\n                        me.set('loaded', me.isLoaded());\r\n                    }\r\n                    if (suppressEvents !== true) {\r\n                        me.fireEvent(\"insert\", me, node, refNode);\r\n                        if (oldParent) {\r\n                            node.fireEvent(\"move\", node, oldParent, me, refIndex, refNode);\r\n                        }\r\n                    }\r\n                    return node;\r\n                }","code-length":557,"reference":"Inserts the first node before the second node in this nodes `childNodes` collection.\n","result":"Code too long,keep in 512.","score":[0.0485,0.041]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(destroy, suppressEvents) {\r\n                    var parentNode = this.parentNode;\r\n                    if (parentNode) {\r\n                        parentNode.removeChild(this, destroy, suppressEvents, true);\r\n                    }\r\n                    return this;\r\n                }","code-length":68,"reference":"Removes this node from its parent.\n","result":"Remove a node.","score":[0,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(destroy, suppressEvents) {\r\n                    var cn = this.childNodes,\r\n                        n;\r\n                    while ((n = cn[0])) {\r\n                        this.removeChild(n, destroy, suppressEvents);\r\n                    }\r\n                    return this;\r\n                }","code-length":74,"reference":"Removes all child nodes from this node.\n","result":"This.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sortFn, recursive, suppressEvent) {\r\n                    var cs  = this.childNodes,\r\n                        ln = cs.length,\r\n                        i, n;\r\n                    if (ln > 0) {\r\n                        Ext.Array.sort(cs, sortFn);\r\n                        for (i = 0; i < ln; i++) {\r\n                            n = cs[i];\r\n                            n.previousSibling = cs[i-1];\r\n                            n.nextSibling = cs[i+1];\r\n                            if (i === 0) {\r\n                                this.setFirstChild(n);\r\n                            }\r\n                            if (i == ln - 1) {\r\n                                this.setLastChild(n);\r\n                            }\r\n                            n.updateInfo(suppressEvent);\r\n                            if (recursive && !n.isLeaf()) {\r\n                                n.sort(sortFn, true, true);\r\n                            }\r\n                        }\r\n                        this.notifyStores('afterEdit', ['sorted'], {sorted: 'sorted'});\r\n                        if (suppressEvent !== true) {\r\n                            this.fireEvent('sort', this, cs);\r\n                        }\r\n                    }\r\n                }","code-length":282,"reference":"Sorts this nodes children using the supplied sort function.\n","result":"Sort a tree by its children.","score":[0,0.0575]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(recursive, callback, scope) {\r\n                    var me = this;\r\n                    if (!me.isLeaf()) {\r\n                        if (me.isLoading()) {\r\n                            me.on('expand', function() {\r\n                                me.expand(recursive, callback, scope);\r\n                            }, me, {single: true});\r\n                        }\r\n                        else {\r\n                            if (!me.isExpanded()) {\r\n                                me.fireAction('expand', [this], function() {\r\n                                    me.set('expanded', true);\r\n                                    Ext.callback(callback, scope || me, [me.childNodes]);\r\n                                });\r\n                            }\r\n                            else {\r\n                                Ext.callback(callback, scope || me, [me.childNodes]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        Ext.callback(callback, scope || me);\r\n                    }\r\n                }","code-length":219,"reference":"Expand this node.\n","result":"Create a new function to expand a node.","score":[0.1389,0.2857]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(recursive, callback, scope) {\r\n                    var me = this;\r\n                    if (!me.isLeaf() && me.isExpanded()) {\r\n                        this.fireAction('collapse', [me], function() {\r\n                            me.set('expanded', false);\r\n                            Ext.callback(callback, scope || me, [me.childNodes]);\r\n                        });\r\n                    } else {\r\n                        Ext.callback(callback, scope || me, [me.childNodes]);\r\n                    }\r\n                }","code-length":126,"reference":"Collapse this node.\n","result":"Collapse a node recursively .","score":[0.2403,0.1562]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (nextTargetFn, fnOpt) {\r\n      tail.next = {\r\n        fns: [nextTargetFn],\r\n        opts: [fnOpt]\r\n      };\r\n      tail = tail.next;\r\n      dispatch();\r\n      return controller;\r\n    }","code-length":75,"reference":"set the next fn, allowing the tail to advance","result":"Create a new function to be called on the next targetFn.","score":[0.1532,0.163]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var mask = Ext.getBody().createChild({\r\n            cls: Ext.baseCSSPrefix + 'mask ' + Ext.baseCSSPrefix + 'mask-transparent'\r\n        });\r\n        setTimeout(function() {\r\n            mask.destroy();\r\n        }, 0);\r\n    }","code-length":81,"reference":"Repaints the whole page. This fixes frequently encountered painting issues in mobile Safari.","result":"Create a mask .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(el, prefix) {\r\n        if (el && el.id) {\r\n            return el.id;\r\n        }\r\n        el = Ext.getDom(el) || {};\r\n        if (el === document || el === document.documentElement) {\r\n            el.id = 'ext-app';\r\n        }\r\n        else if (el === document.body) {\r\n            el.id = 'ext-body';\r\n        }\r\n        else if (el === window) {\r\n            el.id = 'ext-window';\r\n        }\r\n        el.id = el.id || ((prefix || 'ext-') + (++Ext.idSeed));\r\n        return el.id;\r\n    }","code-length":182,"reference":"Generates unique ids. If the element is passes and it already has an `id`, it is unchanged.\n","result":"Generate unique ids for the given element.","score":[0.046,0.1973]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(dest, source, names, usePrototypeKeys) {\r\n        if (typeof names == 'string') {\r\n            names = names.split(\/[,;\\s]\/);\r\n        }\r\n        Ext.each (names, function(name) {\r\n            if (usePrototypeKeys || source.hasOwnProperty(name)) {\r\n                dest[name] = source[name];\r\n            }\r\n        }, this);\r\n        return dest;\r\n    }","code-length":116,"reference":"Copies a set of named properties from the source object to the destination object.\n\nExample:\n\nImageComponent = Ext.extend(Ext.Component, {\ninitComponent: function() {\nthis.autoEl = { tag: 'img' };\nMyComponent.superclass.initComponent.apply(this, arguments);\nthis.initialBox = Ext.copyTo({}, this.initialConfig, 'x,y,width,height');\n}\n});\n\nImportant note: To borrow class prototype methods, use {","result":"Copy properties from source to dest.","score":[0.0004,0.0886]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(node) {\r\n        if (node && node.parentNode && node.tagName != 'BODY') {\r\n            Ext.get(node).clearListeners();\r\n            node.parentNode.removeChild(node);\r\n            delete Ext.cache[node.id];\r\n        }\r\n    }","code-length":80,"reference":"Removes this element from the document, removes all DOM event listeners, and deletes the cache reference.\nAll DOM event listeners are removed from this element.\n","result":"Remove a node from the document.","score":[0.0115,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction addAction(name, fn) {\r\n\tif (typeof name === \"object\" && fn == null) {\r\n\t\t_.each(name, function(fn, n) { this.addAction(n, fn); }, this);\r\n\t\treturn this;\r\n\t}\r\n\tif (typeof name !== \"string\" || name === \"\") throw new Error(\"Expecting non-empty string for action name.\");\r\n\tif (typeof fn !== \"function\") throw new Error(\"Expecting function for action.\");\r\n\tif (this._actions == null) this._actions = {};\r\n\tif (this._actions[name] == null) this._actions[name] = [];\r\n\tif (!~this._actions[name].indexOf(fn)) this._actions[name].push(fn);\r\n\t\r\n\treturn this;\r\n}","code-length":202,"reference":"Msutache Instance Methods","result":"Add actions to the action list.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(property, obj, newProperty) {\r\n                if (config.hasOwnProperty(property)) {\r\n                    if (obj) {\r\n                        config[obj] = config[obj] || {};\r\n                        config[obj][(newProperty) ? newProperty : property] = config[obj][(newProperty) ? newProperty : property] || config[property];\r\n                    } else {\r\n                        config[newProperty] = config[property];\r\n                    }\r\n                    delete config[property];\r\n                    Ext.Logger.deprecate(\"'\" + property + \"' config is deprecated, use the '\" + ((obj) ? obj + \".\" : \"\") + ((newProperty) ? newProperty : property) + \"' config instead\", 2);\r\n                }\r\n            }","code-length":182,"reference":"helper method for deprecating a property","result":"Remove the deprecated config properties.","score":[0,0.0847]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Store(name, items) {\r\n    if (!name) {\r\n      throw new Error('Please give the store a name!');\r\n    }\r\n    this.name = name;\r\n    this.items = items || {};\r\n    this.type = 'object';\r\n    this.setType();\r\n    return this;\r\n  }","code-length":92,"reference":"Version 0.1.0 Create Store Objects","result":"Create a store.","score":[0.2096,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction node(content, type, name, indent){\r\n      this.type = type;\r\n      if(name) this.name = name;\r\n      this.content = content;\r\n      if(indent) {\r\n        this.indent = indent;\r\n        if(~eol.indexOf(indent[0])){\r\n          delete this.indent;\r\n        }\r\n      }\r\n      var loc = location();\r\n      var bol = loc.start.column == 1;\r\n      if(bol) this.bol = true;\r\n      this.line = loc.start.line;\r\n      this.column = loc.start.column;\r\n    }","code-length":164,"reference":"join an array","result":"Create a node.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction f(arr) {\r\n     if(arr){\r\n      var merged = [];\r\n      return merged.concat.apply(merged, arr).join(\"\")\r\n      }\r\n    }","code-length":55,"reference":"flatten an array and join it","result":"Create a function to return a function .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction configureStore(onComplete) {\r\n  var middlewares = [thunk];\r\n  events.emit('middlewaresWillApply', middlewares);\r\n  if (__DEV__ && !!window.navigator.userAgent) {\r\n    middlewares.push(createLogger({\r\n      collapsed: true,\r\n      duration: true,\r\n    }));\r\n  }\r\n  var storeCreator = applyMiddleware.apply(null, middlewares)(createStore);\r\n  var result = {};\r\n  events.emit('storeWillCreate', storeCreator, reducers, onComplete, result);\r\n  if (result.store === undefined) {\r\n    result.store = storeCreator(reducers);\r\n    setTimeout(onComplete, 0);\r\n  }\r\n  global.reduxStore = result.store;\r\n  return reduxStore;\r\n}","code-length":206,"reference":"configureStore - create redux-store\n\n","result":"Create the store.","score":[0,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(el, config) {\r\n        var me = this;\r\n        config = config || {};\r\n        Ext.apply(me, config);\r\n                                                me.el = Ext.get(el);\r\n        me.callParent();\r\n        me.mixins.observable.constructor.call(me);\r\n        if (!me.disabled) {\r\n            me.enable();\r\n        }\r\n        me.el.addCls(me.baseCls);\r\n    }","code-length":123,"reference":"Creates new Droppable.\n","result":"Create a new instance of the class.","score":[0.1615,0.2941]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        if (!this.mgr) {\r\n            this.mgr = Ext.util.Observable.observe(Ext.util.Draggable);\r\n        }\r\n        this.mgr.on({\r\n            dragstart: this.onDragStart,\r\n            scope: this\r\n        });\r\n        this.disabled = false;\r\n    }","code-length":93,"reference":"Enable the Droppable target.","result":"Create a draggable instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rel(root, src, sep) {\r\n  if(!root || !_.isString(root) || !src || !_.isString(src)) return\r\n  let root_split = root.split(path.sep),\r\n    src_split = src.split(path.sep)\r\n  return _.join(_.difference(src_split, root_split), sep || '\/')\r\n}","code-length":102,"reference":"returns rel path of src from root","result":"Create a relative path.","score":[0,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction rebase(root, src, dest) {\r\n  let relp = rel(root, src)\r\n  return relp ? path.join(dest, relp) : ''\r\n}","code-length":54,"reference":"returns rel appended to dest root","result":"Rebase files.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction lookupLevel(level) {\r\n\t    if (typeof level === 'string') {\r\n\t      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());\r\n\t      if (levelMap >= 0) {\r\n\t        level = levelMap;\r\n\t      } else {\r\n\t        level = parseInt(level, 10);\r\n\t      }\r\n\t    }\r\n\t    return level;\r\n\t  }","code-length":114,"reference":"Maps a given level value to the `methodMap` indexes above.","result":"Lookup the level of the logger.","score":[0.1179,0.1042]}
{"code":"\/*is used to<extra_id_0>\r\nfunction log(level) {\r\n\t    level = logger.lookupLevel(level);\r\n\t    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\r\n\t      var method = logger.methodMap[level];\r\n\t      if (!console[method]) {\r\n\t\r\n\t        method = 'log';\r\n\t      }\r\n\t      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\r\n\t        message[_key - 1] = arguments[_key];\r\n\t      }\r\n\t      console[method].apply(console, message);\r\n\t    }\r\n\t  }","code-length":186,"reference":"Can be overridden in the host environment","result":"Log to the console.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction simpleId(path) {\r\n\t      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;\r\n\t    }","code-length":50,"reference":"an ID is simple if it only has one part, and that part is not `..` or `this`.","result":"Generate a simple id.","score":[0.0096,0.0301]}
{"code":"\/*is used to<extra_id_0>\r\nfunction acceptKey(node, name) {\r\n\t    var value = this.accept(node[name]);\r\n\t    if (this.mutating) {\r\n\t\r\n\t\r\n\t      if (value && !Visitor.prototype[value.type]) {\r\n\t        throw new _exception2['default']('Unexpected node type \"' + value.type + '\" found when accepting ' + name + ' on ' + node.type);\r\n\t      }\r\n\t      node[name] = value;\r\n\t    }\r\n\t  }","code-length":133,"reference":"Visits a given value. If mutating, will replace the value if necessary.","result":"Value pairs .","score":[0,0.045]}
{"code":"\/*is used to<extra_id_0>\r\nfunction acceptRequired(node, name) {\r\n\t    this.acceptKey(node, name);\r\n\t    if (!node[name]) {\r\n\t      throw new _exception2['default'](node.type + ' requires ' + name);\r\n\t    }\r\n\t  }","code-length":75,"reference":"Performs an accept operation with added sanity check to ensure required keys are not removed.","result":"Accept required keys.","score":[0.0075,0.0725]}
{"code":"\/*is used to<extra_id_0>\r\nfunction acceptArray(array) {\r\n\t    for (var i = 0, l = array.length; i < l; i++) {\r\n\t      this.acceptKey(array, i);\r\n\t      if (!array[i]) {\r\n\t        array.splice(i, 1);\r\n\t        i--;\r\n\t        l--;\r\n\t      }\r\n\t    }\r\n\t  }","code-length":105,"reference":"Traverses a given array. If mutating, empty respnses will be removed for child elements.","result":"Accept arrays.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ret(context, execOptions) {\r\n\t    if (!compiled) {\r\n\t      compiled = compileInput();\r\n\t    }\r\n\t    return compiled.call(this, context, execOptions);\r\n\t  }","code-length":62,"reference":"Template is only compiled on first use and cached after that point.","result":"Return the result of the input .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction reduceChildListMutation(mutationContent, record) {\r\n    const isAdded = Boolean(record.addedNodes.length);\r\n    const isNext = Boolean(record.nextSibling);\r\n    const isPrev = Boolean(record.previousSibling);\r\n    const isRemoved = Boolean(record.removedNodes.length);\r\n    if (isAdded && (isRemoved || (!isRemoved && !isNext && !isPrev))) {\r\n        while (mutationContent.firstChild) {\r\n            mutationContent.removeChild(mutationContent.firstChild);\r\n        }\r\n        forEach(record.addedNodes, function (node) {\r\n            mutationContent.appendChild(node);\r\n        });\r\n    } else if (isAdded && !isRemoved && !isNext && isPrev) {\r\n        forEach(record.addedNodes, function (node) {\r\n            mutationContent.appendChild(node);\r\n        });\r\n    } else if (isAdded && !isRemoved && isNext && !isPrev) {\r\n        forEach(record.addedNodes, function (node) {\r\n            mutationContent.insertBefore(node, mutationContent.firstChild);\r\n        });\r\n    }\r\n    return mutationContent;\r\n}","code-length":291,"reference":"The allocation of the changed nodes.\n","result":"Reduce child list mutations.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Node (options) {\r\n  if (!(this instanceof Node)) {\r\n    return new Node(options)\r\n  }\r\n  events.EventEmitter.call(this)\r\n  this._setStorageAdapter(options.storage)\r\n  this._log = options.logger\r\n  this._rpc = options.transport\r\n  this._self = this._rpc._contact\r\n  this._validator = options.validator\r\n  this._router = options.router || new Router({\r\n    logger: this._log,\r\n    transport: this._rpc,\r\n    validator: this._validateKeyValuePair.bind(this)\r\n  })\r\n  this._bindRouterEventHandlers()\r\n  this._bindRPCMessageHandlers()\r\n  this._startReplicationInterval()\r\n  this._startExpirationInterval()\r\n  this._log.info('node created', {\r\n    nodeID: this._self.nodeID\r\n  })\r\n}","code-length":228,"reference":"Represents a Kademlia node\n","result":"Create a node.","score":[0.2925,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n          var deferred;\r\n          deferred = Q.defer();\r\n          if (running.length < limit) {\r\n            running.push(deferred);\r\n            deferred.resolve();\r\n          } else {\r\n            queue.push(deferred);\r\n          }\r\n          return deferred.promise;\r\n        }","code-length":86,"reference":"Gets a promise from the queue that will resolve when there is a slot available\n\n","result":"Run the code.","score":[0.0075,0.0362]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n          var next;\r\n          running.pop();\r\n          if (queue.length > 0 && running.length < limit) {\r\n            switch (type) {\r\n              case \"lifo\":\r\n                next = queue.pop();\r\n                break;\r\n              default:\r\n                next = queue.shift();\r\n            }\r\n            running.push(next);\r\n            return next.resolve();\r\n          }\r\n        }","code-length":116,"reference":"Signals the queue an item is done running\n\n","result":"Resolve the promise in the browser.","score":[0.1383,0.0641]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n          var promise;\r\n          while (promise = queue.pop()) {\r\n            promise.reject(\"flush\");\r\n          }\r\n          while (promise = running.pop()) {\r\n            promise.reject(\"flush\");\r\n          }\r\n        }","code-length":72,"reference":"Flushes the queue. Will reject any remaining promises\n\n","result":"Flush functions.","score":[0,0.0676]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(record) {\r\n        var me = this;\r\n        me._record = record;\r\n        if (record && record.data) {\r\n            me.setValues(record.data);\r\n        }\r\n        return this;\r\n    }","code-length":69,"reference":"Loads matching fields from a model instance into this form.\n","result":"Create a new record.","score":[0.0713,0.0532]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var fields = [];\r\n        var getFieldsFrom = function(item) {\r\n            if (item.isField) {\r\n                fields.push(item);\r\n            }\r\n            if (item.isContainer) {\r\n                item.items.each(getFieldsFrom);\r\n            }\r\n        };\r\n        this.items.each(getFieldsFrom);\r\n        return fields;\r\n    }","code-length":112,"reference":"Returns an array of fields in this formpanel.\n","result":"Create a new field.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var fields = this.getFieldsArray(),\r\n            ln = fields.length,\r\n            field, i;\r\n        for (i = 0; i < ln; i++) {\r\n            field = fields[i];\r\n            if (field.isFocused) {\r\n                return field;\r\n            }\r\n        }\r\n        return null;\r\n    }","code-length":100,"reference":"Returns the currently focused field\n","result":"Test the focus of a field.","score":[0.193,0.098]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(point, threshold) {\r\n        if (typeof threshold == 'number') {\r\n            threshold = {x: threshold};\r\n            threshold.y = threshold.x;\r\n        }\r\n        var x = point.x,\r\n            y = point.y,\r\n            thresholdX = threshold.x,\r\n            thresholdY = threshold.y;\r\n        return (this.x <= x + thresholdX && this.x >= x - thresholdX &&\r\n                this.y <= y + thresholdY && this.y >= y - thresholdY);\r\n    }","code-length":140,"reference":"Whether the given point is not away from this point within the given threshold amount.\n","result":"Test if a point is inside a threshold.","score":[0.0819,0.0699]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sshCommandSequence(connection, commands, fnOutput) {\r\n  var allResults = [];\r\n  var successHandler = function(nextPromise){\r\n    return function(result) {\r\n      if( result !== true) {\r\n        allResults.push(result);\r\n      }\r\n      return nextPromise();\r\n    };\r\n  };\r\n  var errorHandler = function(nextPromise) {\r\n    return function(error) {\r\n      allResults.push(error);\r\n      return nextPromise();\r\n    };\r\n  };\r\n  var result = Q(true);\r\n  commands.map(function(command){\r\n    return function() {\r\n\t\t\treturn sshExecSingleCommand(connection, command, fnOutput);\r\n\t\t};\r\n  }).forEach(function (f) {\r\n    result = result.then(\r\n      successHandler(f),\r\n      errorHandler(f)\r\n    );\r\n  });\r\n  return result.then(\r\n  \tfunction(finalResult){\r\n      allResults.push(finalResult);\r\n      return allResults;\r\n    },\r\n    function(error) {\r\n      allResults.push(error);\r\n      return allResults;\r\n  });\r\n}","code-length":307,"reference":"Sequentially execute a list of Promised based SSH command and\nreturns a Promise whose value is resvoled as an array. This array\ncontains objects that holds the SSH command success or error.\n\n","result":"Execute multiple commands in parallel.","score":[0,0.0341]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceRefs(parsed, options) {\r\n  var topLevel = topLevelDeclsAndRefs(parsed),\r\n      refsToReplace = topLevel.refs.filter(ref => shouldRefBeCaptured(ref, topLevel, options)),\r\n      locallyIgnored = [];\r\n  const replaced = ReplaceVisitor.run(parsed, (node, path) => {\r\n    if (node.type === \"Property\"\r\n     && refsToReplace.includes(node.key)\r\n     && node.shorthand)\r\n       return prop(id(node.key.name), node.value);\r\n    if (node.type === \"ExportNamedDeclaration\") {\r\n      var { declaration, specifiers } = node;\r\n      if (declaration) {\r\n        if (declaration.id) locallyIgnored.push(declaration.id)\r\n        else if (declaration.declarations)\r\n          locallyIgnored.push(...declaration.declarations.map(({id}) => id))\r\n      }\r\n      specifiers && specifiers.forEach(({local}) => locallyIgnored.push(local));\r\n      return node;\r\n    }\r\n    if (node.type === \"AssignmentExpression\"\r\n     && refsToReplace.includes(node.left)\r\n     && options.declarationWrapper)\r\n       return {\r\n         ...node,\r\n         right: declarationWrapperCall(\r\n                  options.declarationWrapper,\r\n                  null,\r\n                  literal(node.left.name),\r\n                  literal(\"assignment\"),\r\n                  node.right,\r\n                  options.captureObj,\r\n                  options)};\r\n     return node\r\n  });\r\n  return ReplaceVisitor.run(replaced, (node, path, parent) =>\r\n    refsToReplace.includes(node) && !locallyIgnored.includes(node) ?\r\n      member(options.captureObj, node) : node);\r\n}","code-length":442,"reference":"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- replacement helpers","result":"Replace references in the AST.","score":[0,0.1562]}
{"code":"\/*is used to<extra_id_0>\r\nfunction generateUniqueName(declaredNames, hint) {\r\n  var unique = hint, n = 1;\r\n  while (declaredNames.indexOf(unique) > -1) {\r\n    if (n > 1000) throw new Error(\"Endless loop searching for unique variable \" + unique);\r\n    unique = unique.replace(\/_[0-9]+$|$\/, \"_\" + (++n));\r\n  }\r\n  return unique;\r\n}","code-length":111,"reference":"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- naming -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-","result":"Generate unique names.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction replaceClassDecls(parsed, options) {\r\n  if (options.classToFunction)\r\n    return classToFunctionTransform(parsed, options.classToFunction);\r\n  var topLevel = topLevelDeclsAndRefs(parsed);\r\n  if (!topLevel.classDecls.length) return parsed;\r\n  for (var i = parsed.body.length - 1; i >= 0; i--) {\r\n    var stmt = parsed.body[i];\r\n    if (stmt.id && topLevel.classDecls.includes(stmt))\r\n      parsed.body.splice(i+1, 0, assignExpr(options.captureObj, stmt.id, stmt.id, false));\r\n  }\r\n  return parsed;\r\n}","code-length":180,"reference":"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- capturing specific code -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-","result":"Replace class declarations.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction varDeclOrAssignment(parsed, declarator, kind) {\r\n  var topLevel = topLevelDeclsAndRefs(parsed),\r\n      name = declarator.id.name\r\n  return topLevel.declaredNames.indexOf(name) > -1 ?\r\n    exprStmt(assign(declarator.id, declarator.init)) :\r\n    {\r\n     declarations: [declarator],\r\n     kind: kind || \"var\", type: \"VariableDeclaration\"\r\n    }\r\n}","code-length":119,"reference":"-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- code generation helpers -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-","result":"Create a varDeclOrAssignment function.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Item (key, value, publisher, timestamp) {\r\n  if (!(this instanceof Item)) {\r\n    return new Item(key, value, publisher, timestamp)\r\n  }\r\n  assert(typeof key === 'string', 'Invalid key supplied')\r\n  assert(utils.isValidKey(publisher), 'Invalid publisher nodeID supplied')\r\n  if (timestamp) {\r\n    assert(typeof timestamp === 'number', 'Invalid timestamp supplied')\r\n    assert(Date.now() >= timestamp, 'Timestamp cannot be in the future')\r\n  }\r\n  this.key = key\r\n  this.value = value\r\n  this.publisher = publisher\r\n  this.timestamp = timestamp || Date.now()\r\n}","code-length":173,"reference":"Storage model for DHT items, which is serialized to JSON before being passed\nto the storage adapter\n","result":"Create a new item.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction on(top) {\r\n  top = typeof top === 'string' ? document.querySelector(top) : top;\r\n  var h = handle.bind(this, top);\r\n  h.once = once.bind(this, top);\r\n  return h;\r\n}","code-length":75,"reference":"Get a handle function for a given top\n\n","result":"Bind events.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleElements(elements, type, fn, capture) {\r\n  if (!elements || typeof elements.length !== 'number') throw new TypeError('Cannot bind event ' + inspect(type) + ' to ' + inspect(elements));\r\n  if (typeof type !== 'string') throw new TypeError('Event type must be a string, e.g. \"click\", not ' + inspect(type));\r\n  if (typeof fn !== 'function') throw new TypeError('`fn` (the function to call when the event is triggered) must be a function, not ' + inspect(fn));\r\n  if (capture !== undefined && capture !== false && capture !== true) {\r\n    throw new TypeError('`capture` must be `undefined` (defaults to `false`), `false` or `true`, not ' + inspect(capture));\r\n  }\r\n  var handles = [];\r\n  for (var i = 0; i < elements.length; i++) {\r\n    handles.push(handleElement(elements[i], type, fn, capture));\r\n  }\r\n  return function dispose() {\r\n    for (var i = 0; i < handles.length; i++) {\r\n      handles[i]();\r\n    }\r\n  };\r\n}","code-length":292,"reference":"Bind `elements` event `type` to `fn`.\n\n","result":"Define the event handlers.","score":[0.1938,0.0862]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(opt) {\r\n\t\t\t\r\n            this.disable();\r\n\t\t\t\r\n            if (opt) this.set(opt);\r\n\t\t\t\r\n            var jNode = new JSYG(this.node),\r\n            dim = jNode.getDim(),\r\n            color = jNode.fill(),\r\n            svg = jNode.offsetParent(),\r\n            id = 'idpattern'+JSYG.rand(0,5000),\r\n            g,rect,selection;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n            if (!color || color == 'transparent' || color == 'none') color = 'white';\r\n                        if (dim.width < this.boxInit.width) this.boxInit.width = dim.width;\r\n            if (dim.height < this.boxInit.height) this.boxInit.height= dim.height;\r\n\t\t\t\r\n            rect = new JSYG('<rect>').fill(color);\r\n            g = new JSYG('<g>').append(rect);\r\n\t\t\t\r\n            new JSYG(this.pattern)\r\n                .attr({id:id,patternUnits:'userSpaceOnUse'})\r\n                .append(g).appendTo(svg);\r\n\t\t\t\t\t\t\r\n            new JSYG(this.mask)\r\n                .css('fill-opacity',0.5)\r\n                .appendTo(svg);\r\n\t\t\t\r\n            if (this.keepRatio) this.boxInit.height = dim.height * this.boxInit.width \/ dim.width;\r\n\t\t\t\r\n            selection = new JSYG(this.selection)\r\n                .attr(this.boxInit)\r\n                .attr('fill',\"url(#\"+id+\")\")\r\n                .appendTo(svg);\r\n\t\t\t\t\t\t\t\t\t\r\n            this.editor.target(selection);\r\n            this.editor.displayShadow = false;\r\n\t\t\t\t\t\t\r\n            new JSYG(this.editor.pathBox).css('fill-opacity',0);\r\n\t\t\t\r\n            this.editor.ctrlsDrag.enable({\r\n                bounds:0\r\n            });\r\n\t\t\t\r\n            this.editor.ctrlsResize.enable({\r\n                keepRatio : this.keepRatio,\r\n                bounds : 0\r\n            });\r\n\t\t\t\r\n            this.editor.show();\r\n\t\t\t\t\t\t\r\n            this.enabled = true;\r\n\t\t\t\r\n            this.update();\r\n\t\t\t\r\n            return this;\r\n        }","code-length":574,"reference":"Active le recadrage\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction without (toRemove) {\r\n  return function (prev, curr) {\r\n    if (!Array.isArray(prev)) {\r\n      prev = !testValue(prev, toRemove)\r\n        ? [ prev ]\r\n        : []\r\n    }\r\n    if (!testValue(curr, toRemove)) prev.push(curr)\r\n    return prev\r\n  }\r\n}","code-length":99,"reference":"Returns a new array with the same content as the input minus the specified values.\n\n","result":"Remove items from an array.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction initDhtmlxToolbar (container) {\r\n\tvar impl = null;\r\n\tif (Util.isNode(container)) {\r\n\t\timpl = new dhtmlXToolbarObject(container, SKIN);\r\n\t\t\r\n\t} else if (container.type === OBJECT_TYPE.LAYOUT_CELL\r\n                || container.type === OBJECT_TYPE.ACCORDION_CELL\r\n\t\t|| container.type === OBJECT_TYPE.LAYOUT\r\n\t\t|| container.type === OBJECT_TYPE.WINDOW\r\n                || container.type === OBJECT_TYPE.TAB) {\r\n\t\t\r\n\t\timpl = container.impl.attachToolbar();\r\n\t\timpl.setSkin(SKIN);\r\n\t} else {\r\n\t\tthrow new Error('initDhtmlxToolbar: container is not valid.');\r\n\t}\r\n\treturn impl;\r\n}","code-length":208,"reference":"Creates the dhtmlXToolbarObject inside its container.","result":"Initialize the toolbar.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(data, track) {\r\n\t\tif (track !== false) data = $track(data, track);\r\n\t\tthis.data = data;\r\n\t\tthis._dep.changed();\r\n\t\treturn this;\r\n\t}","code-length":66,"reference":"sets the data on the model","result":"\t\treturn this.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n\t\tvar models = [ this ],\r\n\t\t\tmodel = this;\r\n\t\twhile (model.parent) {\r\n\t\t\tmodels.unshift(model = model.parent);\r\n\t\t}\r\n\t\treturn models\r\n\t}","code-length":71,"reference":"an array of models in the current stack, with the root as the first","result":"Create the model tree.","score":[0.0262,0.0769]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(index) {\r\n\t\tif (!_.isNumber(index) || isNaN(index)) index = 0;\r\n\t\tif (index < 0) return this.getAllModels()[~index];\r\n\t\tvar model = this;\r\n\t\t\r\n\t\twhile (index && model) {\r\n\t\t\tmodel = model.parent;\r\n\t\t\tindex--;\r\n\t\t}\r\n\t\t\r\n\t\treturn model;\r\n\t}","code-length":115,"reference":"gets the model in the stack at the index negative values start at root","result":"Get the model by index.","score":[0.0562,0.1145]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(fn) {\r\n\t\tvar index = 0,\r\n\t\t\tmodel = this;\r\n\t\twhile (model != null) {\r\n\t\t\tif (fn.call(this, model, index++)) return model;\r\n\t\t\tmodel = model.parent;\r\n\t\t}\r\n\t}","code-length":81,"reference":"returns the first model which passes the function","result":"Filter the model by a function.","score":[0.1645,0.1282]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(path) {\r\n\t\tif (typeof path === \"string\") path = parse(path, { startRule: \"path\" });\r\n\t\tif (!_.isObject(path)) throw new Error(\"Expecting string or object for path.\");\r\n\t\tvar self = this;\r\n\t\tthis._dep.depend();\r\n\t\treturn _.reduce(path.parts, function(target, part) {\r\n\t\t\ttarget = self._get(target, part.key);\r\n\t\t\t_.each(part.children, function(k) {\r\n\t\t\t\tif (_.isObject(k)) k = self.get(k);\r\n\t\t\t\ttarget = self._get(target, k);\r\n\t\t\t});\r\n\t\t\treturn target;\r\n\t\t}, this.data);\r\n\t}","code-length":193,"reference":"returns the value at path, but only looks in the data on this model","result":"Create a path.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(paths) {\r\n\t\tvar self = this;\r\n\t\tif (typeof paths === \"string\") paths = parse(paths, { startRule: \"pathQuery\" });\r\n\t\tif (!_.isArray(paths)) paths = paths != null ? [ paths ] : [];\r\n\t\t\r\n\t\tif (!paths.length) {\r\n\t\t\tvar model = this.findModel(function(m) { return !_.isUndefined(m.data); });\r\n\t\t\tif (model == null) return;\r\n\t\t\tvar val = model.data;\r\n\t\t\tif (_.isFunction(val)) val = val.call(this, null);\r\n\t\t\treturn val;\r\n\t\t}\r\n\t\treturn _.reduce(paths, function(result, path, index) {\r\n\t\t\tvar model = self,\r\n\t\t\t\tscope = true,\r\n\t\t\t\tval;\r\n\t\t\tif (path.type === \"root\") {\r\n\t\t\t\tmodel = self.getRootModel();\r\n\t\t\t} else if (path.type === \"parent\") {\r\n\t\t\t\tmodel = self.getModelAtOffset(path.distance);\r\n\t\t\t\tscope = false;\r\n\t\t\t} else if (path.type === \"all\") {\r\n\t\t\t\tscope = false;\r\n\t\t\t}\r\n\t\t\tif (model == null) return;\r\n\t\t\twhile (_.isUndefined(val) && model != null) {\r\n\t\t\t\tval = model.getLocal(path);\r\n\t\t\t\tmodel = model.parent;\r\n\t\t\t\tif (scope) break;\r\n\t\t\t}\r\n\t\t\tif (_.isFunction(val)) {\r\n\t\t\t\tval = val.call(self, index === 0 ? null : result);\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t}, void 0);\r\n\t}","code-length":436,"reference":"retrieves value with path query","result":"Get data from a model.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(done) {\r\n\t\t\tcrypto.randomBytes(20, function(err, buffer) {\r\n\t\t\t\tvar token = buffer.toString('hex');\r\n\t\t\t\tdone(err, token);\r\n\t\t\t});\r\n\t\t}","code-length":65,"reference":"Generate random token","result":"Generate a token.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(token, done) {\r\n\t\t\tif (req.body.username) {\r\n\t\t\t\tUser.findOne({\r\n\t\t\t\t\tusername: req.body.username\r\n\t\t\t\t}, '-salt -password', function(err, user) {\r\n\t\t\t\t\tif (!user) {\r\n\t\t\t\t\t\treturn res.status(400).send({\r\n\t\t\t\t\t\t\tmessage: 'No account with that username has been found'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else if (user.provider !== 'local') {\r\n\t\t\t\t\t\treturn res.status(400).send({\r\n\t\t\t\t\t\t\tmessage: 'It seems like you signed up using your ' + user.provider + ' account'\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tuser.resetPasswordToken = token;\r\n\t\t\t\t\t\tuser.resetPasswordExpires = Date.now() + 3600000;\r\n\t\t\t\t\t\tuser.save(function(err) {\r\n\t\t\t\t\t\t\tdone(err, token, user);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\treturn res.status(400).send({\r\n\t\t\t\t\tmessage: 'Username field must not be blank'\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}","code-length":296,"reference":"Lookup user by username","result":"Generate a token.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(emailHTML, user, done) {\r\n\t\t\tvar smtpTransport = nodemailer.createTransport(config.mailer.options);\r\n\t\t\tvar mailOptions = {\r\n\t\t\t\tto: user.email,\r\n\t\t\t\tfrom: config.mailer.from,\r\n\t\t\t\tsubject: 'Your password has been changed',\r\n\t\t\t\thtml: emailHTML\r\n\t\t\t};\r\n\t\t\tsmtpTransport.sendMail(mailOptions, function(err) {\r\n\t\t\t\tdone(err, 'done');\r\n\t\t\t});\r\n\t\t}","code-length":135,"reference":"If valid email, send reset email using service","result":"Change the password.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction sortIssues(issues) {\r\n    var sorted;\r\n    if (Object.keys(issues).indexOf('supers') > -1) {\r\n        issues.supers = _.sortBy(issues.supers, function(issue) {\r\n            return new Date(issue.updated_at);\r\n        }).reverse();\r\n        issues.singletons = _.sortBy(issues.singletons, function(issue) {\r\n            return new Date(issue.updated_at);\r\n        }).reverse();\r\n        sorted = issues;\r\n    } else {\r\n        sorted = _.sortBy(issues, function(issue) {\r\n            return new Date(issue.updated_at);\r\n        }).reverse();\r\n    }\r\n    return sorted;\r\n}","code-length":189,"reference":"Sorts array of issue objects by last updated date.","result":"Sort the issues.","score":[0,0.0595]}
{"code":"\/*is used to<extra_id_0>\r\nfunction deduplicateCollaborators(collaborators) {\r\n    var foundLogins = [];\r\n    return _.filter(collaborators, function (collaborator) {\r\n        var duplicate = false\r\n          , login = collaborator.login;\r\n        if (foundLogins.indexOf(login) > -1) {\r\n            duplicate = true;\r\n        } else {\r\n            foundLogins.push(login);\r\n        }\r\n        return ! duplicate;\r\n    });\r\n}","code-length":126,"reference":"Removes duplicate collaborators.\n","result":"Deduplicate collaborators.","score":[0.3033,0.1724]}
{"code":"\/*is used to<extra_id_0>\r\nfunction extractSuperIssueSubTaskNumbers(superIssue) {\r\n    var matches = superIssue.body.match(markdownTasksRegex)\r\n      , subTaskIds = [];\r\n    _.each(matches, function(line) {\r\n        var match = line.match(subtaskRegex);\r\n        if (match) {\r\n            subTaskIds.push(parseInt(match[3]));\r\n        }\r\n    });\r\n    return subTaskIds;\r\n}","code-length":119,"reference":"Using regex, finds subtasks within a super issue's body string and returns\nthem in an array of issue numbers.\n","result":"Extract subtask numbers from super issues.","score":[0.0221,0.0565]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatIssues(format, issues) {\r\n    var formattedIssues\r\n      , partition\r\n      , superIssues\r\n      , singletonIssues\r\n      , removedSubtasks = [];\r\n    if (format == 'network') {\r\n        formattedIssues = {\r\n            supers: []\r\n          , singletons: []\r\n          , all: issues\r\n        };\r\n        partition = _.partition(issues, function(issue) {\r\n            return _.find(issue.labels, function(label) {\r\n                return label.name == 'super';\r\n            });\r\n        });\r\n        superIssues = partition.shift();\r\n        singletonIssues = partition.shift();\r\n        _.each(superIssues, function(superIssue) {\r\n            var subTaskNumbers = extractSuperIssueSubTaskNumbers(superIssue);\r\n            superIssue.subtasks = _.filter(singletonIssues, function(issue) {\r\n                var isSubtask = _.contains(subTaskNumbers, issue.number);\r\n                if (isSubtask) {\r\n                    removedSubtasks.push(issue.number);\r\n                }\r\n                return isSubtask;\r\n            });\r\n        });\r\n        formattedIssues.supers = superIssues;\r\n        _.each(singletonIssues, function(issue) {\r\n            if (! _.contains(removedSubtasks, issue.number)) {\r\n                formattedIssues.singletons.push(issue);\r\n            }\r\n        });\r\n    } else {\r\n        formattedIssues = issues;\r\n    }\r\n    return formattedIssues;\r\n}","code-length":371,"reference":"Takes an array of issue objects and presents them differently depending on\n'format'. The only valid option now is \"network\", which groups super issue\nsubtasks into a \"subtasks\" array on the super issue object.\n","result":"Format the issues in the network format.","score":[0.0034,0.0479]}
{"code":"\/*is used to<extra_id_0>\r\nfunction mergeIssuesAndPrs(issues, prs) {\r\n    _.each(issues, function(issue) {\r\n        var targetPr\r\n          , targetPrIndex = _.findIndex(prs, function(pr) {\r\n              return pr && pr.number == issue.number;\r\n          });\r\n        if (targetPrIndex > -1) {\r\n            targetPr = prs[targetPrIndex];\r\n            prs[targetPrIndex] = _.merge(targetPr, issue);\r\n        }\r\n    });\r\n    return prs;\r\n}","code-length":142,"reference":"Given a list of issues and pull requests, populate the additional properties\nthat exist within any issues into the PR objects so they contain as much info\nas possible.\n","result":"Merge issues and prs.","score":[0.0009,0.0377]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Sprinter(username, password, repoSlugs, cache) {\r\n    if (! username) {\r\n        throw new Error('Missing username.');\r\n    }\r\n    if (! password) {\r\n        throw new Error('Missing password.');\r\n    }\r\n    if (! repoSlugs) {\r\n        throw new Error('Missing repositories.');\r\n    }\r\n    this.username = username;\r\n    this.password = password;\r\n    this.repos = convertSlugsToObjects(repoSlugs);\r\n    this.gh = new GitHubApi({\r\n        version: '3.0.0'\r\n      , timeout: 5000\r\n    });\r\n    this.gh.authenticate({\r\n        type: 'basic'\r\n      , username: this.username\r\n      , password: this.password\r\n    });\r\n    this._CACHE = {};\r\n    this.setCacheDuration(cache);\r\n    this._setupCaching();\r\n}","code-length":234,"reference":"Wrapper class around the GitHub API client, providing some authentication\nconvenience and additional utility functions for executing operations across\nthe issue trackers of several repositories at once.\n","result":"Create a new Sprinter instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getFetchByStateCallback(callback) {\r\n            return function(err, data) {\r\n                if (err) {\r\n                    asyncErrors.push(err);\r\n                }\r\n                callback(null, data);\r\n            };\r\n        }","code-length":70,"reference":"This exists so we can populate an errors object from the async calls. Otherwise if there is an error passed to the async callback, the async module will stop executing remaining functions.","result":"No valid comments generated.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction listAvailables(forceRefresh) {\r\n\tforceRefresh && (adaptersCache = []);\r\n\tif( adaptersCache.length ){\r\n\t\treturn adaptersCache;\r\n\t}\r\n\tadaptersCache = fs.readdirSync(__dirname).filter(function(fileOrDirName){\r\n\t\treturn isDir(__dirname + '\/' + fileOrDirName);\r\n\t});\r\n\treturn adaptersCache;\r\n}","code-length":109,"reference":"return a cached list of availables adapter unless forceRefresh is true\n","result":"List all available adapters.","score":[0,0.0971]}
{"code":"\/*is used to<extra_id_0>\r\nfunction readConfig(adapterName, path){\r\n\tvar adapter = getAdapterInstance(adapterName);\r\n\treturn adapter.configLoader(normalizeAdapterConfigPath(adapter, path));\r\n}","code-length":50,"reference":"read a config for given adapter at path\n","result":"Read the config.","score":[0,0.0667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction writeConfig(adapterName, path, config){\r\n\tvar adapter = getAdapterInstance(adapterName);\r\n\treturn adapter.configWriter(normalizeAdapterConfigPath(adapter, path), config);\r\n}","code-length":54,"reference":"write a config for given adapter in given path\n","result":"Write config.","score":[0,0.0602]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleFiles(files) {\r\n      files.forEach(function(f) {\r\n        f.src.filter(srcExists).map(function(filepath) {\r\n          var pathInfo = getPathInfo(filepath, f.dest),\r\n              context = getContext(f.context, pathInfo);\r\n          renderFile(pathInfo.outfile, filepath, context);\r\n        });\r\n      });\r\n    }","code-length":102,"reference":"Handle non-i18n files","result":"Handle the files.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction handleI18nFiles(files) {\r\n      options.locales.forEach(function(locale) {\r\n        grunt.registerTask('swigtemplatesSubtask-' + locale, function() {\r\n          var done = this.async();\r\n          var translatorFactory = options.translateFunction(locale);\r\n          Q.when(translatorFactory, function(translator) { doTranslations(files, locale, translator) }).done(done);\r\n        });\r\n        grunt.task.run('swigtemplatesSubtask-' + locale);\r\n      });\r\n    }","code-length":138,"reference":"Handle i18n files","result":"Handle the i.","score":[0.4082,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getContext(context, pathInfo) {\r\n      var globalContext,\r\n          templateContext;\r\n      try {\r\n        globalContext = grunt.file.readJSON(path.join(options.templatesDir, \"global.json\"));\r\n      } catch(err) {\r\n        globalContext = {};\r\n      }\r\n      try {\r\n        templateContext = grunt.file.readJSON(path.join(pathInfo.dirName, pathInfo.outfileName) + \".json\");\r\n      } catch(err) {\r\n        templateContext = {};\r\n      }\r\n      return _.extend({}, globalContext, templateContext, options.defaultContext, context);\r\n    }","code-length":167,"reference":"Get swig context","result":"Create a context object.","score":[0.3195,0.1613]}
{"code":"\/*is used to<extra_id_0>\r\nfunction render(url) {\r\n  return async page => {\r\n    try {\r\n      const template = `${page.template || 'schedule'}.hbs`;\r\n      const filePath = path.join(\r\n        process.cwd(),\r\n        config.theme || 'theme',\r\n        config.template || 'templates',\r\n        template,\r\n      );\r\n      const output = Handlebars.compile(await fs.readFile(filePath, 'utf-8'))(page);\r\n      await fs.ensureDir(outputDir);\r\n      const dir = url !== 'index' ? path.join(outputDir, url) : outputDir;\r\n      await fs.ensureDir(dir);\r\n      await fs.writeFile(path.join(dir, 'index.html'), output, 'utf8');\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  };\r\n}","code-length":221,"reference":"Render pages with handle bar template\n","result":"Render the schedule.","score":[0.1502,0.0877]}
{"code":"\/*is used to<extra_id_0>\r\nfunction isNamedFunction(node)\r\n    {\r\n        if (node.id)\r\n            return true;\r\n        const { parent } = node;\r\n        const { type } = parent;\r\n        const namedFunction =\r\n        type === 'MethodDefinition' ||\r\n        type === 'Property' && (parent.kind === 'get' || parent.kind === 'set' || parent.method);\r\n        return namedFunction;\r\n    }","code-length":113,"reference":"Determines whether a function has a name.\n","result":"Detect if a node is a named function.","score":[0.1652,0.1408]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getConfigForFunction(node)\r\n    {\r\n        if (isNamedFunction(node))\r\n            return 'never';\r\n        if (node.type === 'ArrowFunctionExpression')\r\n        {\r\n            if\r\n            (\r\n                !node.async ||\r\n                !astUtils.isOpeningParenToken(sourceCode.getFirstToken(node, { skip: 1 }))\r\n            )\r\n                return 'ignore';\r\n        }\r\n        return 'always';\r\n    }","code-length":126,"reference":"Gets the config for a given function.\n","result":"Detect config for function .","score":[0.2278,0.2757]}
{"code":"\/*is used to<extra_id_0>\r\nfunction checkFunction(node)\r\n    {\r\n        const functionConfig = getConfigForFunction(node);\r\n        if (functionConfig === 'ignore')\r\n            return;\r\n        const rightToken = sourceCode.getFirstToken(node, astUtils.isOpeningParenToken);\r\n        const leftToken = sourceCode.getTokenBefore(rightToken);\r\n        const text =\r\n        sourceCode\r\n        .text\r\n        .slice(leftToken.range[1], rightToken.range[0])\r\n        .replace(\/\\\/\\*[^]*?\\*\\\r\n        if (astUtils.LINEBREAK_MATCHER.test(text))\r\n            return;\r\n        const hasSpacing = \/\\s\/.test(text);\r\n        if (hasSpacing && functionConfig === 'never')\r\n        {\r\n            const report =\r\n            {\r\n                node,\r\n                loc: leftToken.loc.end,\r\n                message: 'Unexpected space before function parentheses.',\r\n                fix: fixer => fixer.removeRange([leftToken.range[1], rightToken.range[0]]),\r\n            };\r\n            context.report(report);\r\n        }\r\n        else if (!hasSpacing && functionConfig === 'always')\r\n        {\r\n            const report =\r\n            {\r\n                node,\r\n                loc: leftToken.loc.end,\r\n                message: 'Missing space before function parentheses.',\r\n                fix: fixer => fixer.insertTextAfter(leftToken, ' '),\r\n            };\r\n            context.report(report);\r\n        }\r\n    }","code-length":376,"reference":"Checks the parens of a function node.\n","result":"Check function configuration.","score":[0.1076,0.1515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        var me = this;\r\n        for (var configName in config) {\r\n            if (me.self.prototype.config && !(configName in me.self.prototype.config)) {\r\n                me[configName] = config[configName];\r\n                Ext.Logger.warn('Applied config as instance property: \"' + configName + '\"', me);\r\n            }\r\n        }\r\n        me.initConfig(config);\r\n    }","code-length":119,"reference":"Creates new TapRepeater.\n","result":"Initialize the instance.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction bindEventMap(eventMap, eventEmitter) {\r\n\tvar eventNames = Object.keys(eventMap);\r\n\teventNames.map(function (eventName) {\r\n\t\teventEmitter.on(eventName, eventMap[eventName]);\r\n\t});\r\n}","code-length":74,"reference":"Bind to user supplied event map, where key is event name\n","result":"Bind event map to event emitter.","score":[0.1187,0.1905]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(delay, newFn, newScope, newArgs) {\r\n        var me = this;\r\n        me.cancel();\r\n        if (Ext.isNumber(delay)) {\r\n            me.setDelay(delay);\r\n        }\r\n        if (Ext.isFunction(newFn)) {\r\n            me.setFn(newFn);\r\n        }\r\n        if (newScope) {\r\n            me.setScope(newScope);\r\n        }\r\n        if (newScope) {\r\n            me.setArgs(newArgs);\r\n        }\r\n        var call = function() {\r\n            me.getFn().apply(me.getScope(), me.getArgs() || []);\r\n            me.cancel();\r\n        };\r\n        me.setInterval(setInterval(call, me.getDelay()));\r\n    }","code-length":209,"reference":"Cancels any pending timeout and queues a new one.\n","result":"Create an interval .","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(success, operation, request, response, callback, scope) {\r\n        var me = this,\r\n            action = operation.getAction(),\r\n            reader, resultSet;\r\n        if (success === true) {\r\n            reader = me.getReader();\r\n            try {\r\n                resultSet = reader.process(me.getResponseResult(response));\r\n            } catch(e) {\r\n                operation.setException(e.message);\r\n                me.fireEvent('exception', me, response, operation);\r\n                return;\r\n            }\r\n            if (!operation.getModel()) {\r\n                operation.setModel(this.getModel());\r\n            }\r\n            if (operation.process(action, resultSet, request, response) === false) {\r\n                me.setException(operation, response);\r\n                me.fireEvent('exception', me, response, operation);\r\n            }\r\n        } else {\r\n            me.setException(operation, response);\r\n                        me.fireEvent('exception', this, response, operation);\r\n        }\r\n        if (typeof callback == 'function') {\r\n            callback.call(scope || me, operation);\r\n        }\r\n        me.afterRequest(request, success);\r\n    }","code-length":301,"reference":"This method handles the processing of the response and is usually overridden by subclasses to\ndo additional processing.\n","result":"Create a new function to be called by the client.","score":[0.0642,0.0872]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(operation, response) {\r\n        if (Ext.isObject(response)) {\r\n            operation.setException({\r\n                status: response.status,\r\n                statusText: response.statusText\r\n            });\r\n        }\r\n    }","code-length":67,"reference":"Sets up an exception on the operation\n","result":"Set the exception on the operation.","score":[0.3366,0.5435]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(request) {\r\n        var me = this,\r\n            url = me.getUrl(request);\r\n        if (!url) {\r\n            Ext.Logger.error(\"You are using a ServerProxy but have not supplied it with a url.\");\r\n        }\r\n        if (me.getNoCache()) {\r\n            url = Ext.urlAppend(url, Ext.String.format(\"{0}={1}\", me.getCacheString(), Ext.Date.now()));\r\n        }\r\n        return url;\r\n    }","code-length":135,"reference":"Generates a url based on a given Ext.data.Request object. By default, ServerProxy's buildUrl will add the\ncache-buster param to the end of the url. Subclasses may need to perform additional modifications to the url.\n","result":"Create a proxy.","score":[0.0,0.0162]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(newDateFormat, oldDateFormat) {\r\n        var value = this.getValue();\r\n        if (newDateFormat != oldDateFormat && Ext.isDate(value)) {\r\n            this.getComponent().setValue(Ext.Date.format(value, newDateFormat || Ext.util.Format.defaultDateFormat));\r\n        }\r\n    }","code-length":86,"reference":"Updates the date format in the field.\n","result":"Change the date format.","score":[0.2134,0.1493]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(picker, value) {\r\n        var me = this,\r\n            oldValue = me.getValue();\r\n        me.setValue(value);\r\n        me.fireEvent('select', me, value);\r\n        me.onChange(me, value, oldValue);\r\n    }","code-length":75,"reference":"Called when the picker changes its value.\n","result":"Create a picker.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction clone (obj) {\r\n  var newObj = {};\r\n  if (!obj || typeof obj !== 'object' || Array.isArray(obj))\r\n    return newObj;\r\n  for (var prop in obj)\r\n    newObj[prop] = obj[prop];\r\n  return newObj;\r\n}","code-length":81,"reference":"Clones an object properties onto a new object\n\n","result":"Return newObj.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction ImpulseBin() {\r\n  this.settings = {\r\n    adapter: 'commander',\r\n    quietOption: 'quiet',\r\n    requiredOptionTmpl: '--%s is required',\r\n    verboseOption: 'verbose',\r\n    verboseLogName: '[verbose]',\r\n    stdoutLogName: '[stdout]',\r\n    stderrLogName: '[stderr]'\r\n  };\r\n  this.console = require('long-con').create();\r\n  this.adapter = null;\r\n  this.options = null;\r\n  this.provider = null;\r\n}","code-length":146,"reference":"ImpulseBin constructor.\n\nconst bin = require('impulse-bin').create();\n\nExample configuration:\n\nbin\n.set('adapter', 'optimist')\n.set('quietOption', 'silent');\n\nConfiguration:\n\n- `{string} [adapter='commander]` Valid name of adapter in `.\/lib\/adapter\/`\n- `{string} [quietOption='quiet']` Silence all loggers on `--quiet`\n- `{string} [requiredOptionTmpl='--%s is required']` `exitOnMissingOption()` message template\n- `{string} [verboseOption='verbose']` Enable verbose logger on `--verbose`\n- `{string} [verboseLogName='[verbose]']` Prepended to each message\n- `{string} [stdoutLogName='[stdout]']` Prepended to each message\n- `{string} [stderrLogName='[stderr]']` Prepended to each message\n\nProperties:\n\n- `{object} adapter` Ex. `require('.\/lib\/adapter\/commander')`\n- `{object} console` `LongCon` instance\n- `{object} options` CLI options extracted by adapter\n- `{object} provider` commander.js, optimist, etc.\n\n","result":"Create the ImpulseBin.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        var me = this,\r\n            currentConfig = me.config,\r\n            id;\r\n        me.onInitializedListeners = [];\r\n        me.initialConfig = config;\r\n        if (config !== undefined && 'id' in config) {\r\n            id = config.id;\r\n        }\r\n        else if ('id' in currentConfig) {\r\n            id = currentConfig.id;\r\n        }\r\n        else {\r\n            id = me.getId();\r\n        }\r\n        me.id = id;\r\n        me.setId(id);\r\n        Ext.ComponentManager.register(me);\r\n        me.initElement();\r\n        me.initConfig(me.initialConfig);\r\n        me.refreshSizeState = me.doRefreshSizeState;\r\n        me.refreshFloating = me.doRefreshFloating;\r\n        if (me.refreshSizeStateOnInitialized) {\r\n            me.refreshSizeState();\r\n        }\r\n        if (me.refreshFloatingOnInitialized) {\r\n            me.refreshFloating();\r\n        }\r\n        me.initialize();\r\n        me.triggerInitialized();\r\n                if (me.config.fullscreen) {\r\n            me.fireEvent('fullscreen', me);\r\n        }\r\n        me.fireEvent('initialize', me);\r\n    }","code-length":327,"reference":"Creates new Component.\n","result":"Initialize the component.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(className,  force) {\r\n        var oldCls = this.getCls(),\r\n            newCls = (oldCls) ? oldCls.slice() : [];\r\n        if (force || newCls.indexOf(className) == -1) {\r\n            newCls.push(className);\r\n        } else {\r\n            Ext.Array.remove(newCls, className);\r\n        }\r\n        this.setCls(newCls);\r\n        return this;\r\n    }","code-length":122,"reference":"Add or removes a class based on if the class is already added to the Component.\n\n","result":"Set the class of the element to the given class name.","score":[0.1223,0.24]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(animation) {\r\n        this.setCurrentAlignmentInfo(null);\r\n                if (!this.getHidden()) {\r\n            if (animation === undefined || (animation && animation.isComponent)) {\r\n                animation = this.getHideAnimation();\r\n            }\r\n            if (animation) {\r\n                if (animation === true) {\r\n                    animation = 'fadeOut';\r\n                }\r\n                this.onBefore({\r\n                    hiddenchange: 'animateFn',\r\n                    scope: this,\r\n                    single: true,\r\n                    args: [animation]\r\n                });\r\n            }\r\n            this.setHidden(true);\r\n        }\r\n        return this;\r\n    }","code-length":175,"reference":"Hides this Component optionally using an animation.\n","result":"Hide the component.","score":[0,0.0758]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(animation) {\r\n        if(this.activeAnimation) {\r\n            this.activeAnimation.on({\r\n                animationend: function(){\r\n                    this.show(animation);\r\n                },\r\n                scope: this,\r\n                single: true\r\n            });\r\n            return this;\r\n        }\r\n        var hidden = this.getHidden();\r\n        if (hidden || hidden === null) {\r\n            if (animation === true) {\r\n                animation = 'fadeIn';\r\n            }\r\n            else if (animation === undefined || (animation && animation.isComponent)) {\r\n                animation = this.getShowAnimation();\r\n            }\r\n            if (animation) {\r\n                this.beforeShowAnimation();\r\n                this.onBefore({\r\n                    hiddenchange: 'animateFn',\r\n                    scope: this,\r\n                    single: true,\r\n                    args: [animation]\r\n                });\r\n            }\r\n            this.setHidden(false);\r\n        }\r\n        return this;\r\n    }","code-length":255,"reference":"Shows this component optionally using an animation.\n","result":"Animate the component .","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(width, height) {\r\n        if (width != undefined) {\r\n            this.setWidth(width);\r\n        }\r\n        if (height != undefined) {\r\n            this.setHeight(height);\r\n        }\r\n    }","code-length":68,"reference":"Sets the size of the Component.\n","result":"Set the width and height of the window.","score":[0.2174,0.6048]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(component, alignment) {\r\n        var me = this,\r\n            viewport = Ext.Viewport,\r\n            parent = me.getParent();\r\n        me.setVisibility(false);\r\n        if (parent !== viewport) {\r\n            viewport.add(me);\r\n        }\r\n        me.show();\r\n        me.on({\r\n            hide: 'onShowByErased',\r\n            destroy: 'onShowByErased',\r\n            single: true,\r\n            scope: me\r\n        });\r\n        viewport.on('resize', 'alignTo', me, { args: [component, alignment] });\r\n        me.alignTo(component, alignment);\r\n        me.setVisibility(true);\r\n    }","code-length":181,"reference":"Shows this component by another component. If you specify no alignment, it will automatically\nposition this component relative to the reference component.\n\nFor example, say we are aligning a Panel next to a Button, the alignment string would look like this:\n\n[panel-vertical (t\/b\/c)][panel-horizontal (l\/r\/c)]-[button-vertical (t\/b\/c)][button-horizontal (l\/r\/c)]\n\nwhere t = top, b = bottom, c = center, l = left, r = right.\n\n## Examples\n\n- `tl-tr` means top-left corner of the Panel to the top-right corner of the Button\n- `tc-bc` means top-center of the Panel to the bottom-center of the Button\n\nYou can put a '?' at the end of the alignment string to constrain the floating element to the\n{","result":"Align a component to another component.","score":[0.0,0.0296]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (component, alignment){\r\n        var alignToElement = component.isComponent ? component.renderElement : component,\r\n            alignToBox = alignToElement.getPageBox(),\r\n            element = this.renderElement,\r\n            box = element.getPageBox(),\r\n            stats = {\r\n                alignToBox: alignToBox,\r\n                alignment: alignment,\r\n                top: alignToBox.top,\r\n                left: alignToBox.left,\r\n                alignToWidth: alignToBox.width,\r\n                alignToHeight: alignToBox.height,\r\n                width: box.width,\r\n                height: box.height\r\n            },\r\n            currentAlignmentInfo = this.getCurrentAlignmentInfo(),\r\n            isAligned = true;\r\n        if (!Ext.isEmpty(currentAlignmentInfo)) {\r\n            Ext.Object.each(stats, function(key, value) {\r\n                if (!Ext.isObject(value) && currentAlignmentInfo[key] != value) {\r\n                    isAligned = false;\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        } else {\r\n            isAligned = false;\r\n        }\r\n        return {isAligned: isAligned, stats: stats};\r\n    }","code-length":307,"reference":"Prepares information on aligning this to component using alignment.\nAlso checks to see if this is already aligned to component according to alignment.\n","result":"Determine if an alignment is currently being used.","score":[0.0253,0.0698]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(alignmentInfo) {\r\n        this.$currentAlignmentInfo = Ext.isEmpty(alignmentInfo) ? null : Ext.merge({}, alignmentInfo.stats ? alignmentInfo.stats : alignmentInfo);\r\n    }","code-length":57,"reference":"Sets the current Alignment information, called by alignTo\n","result":"Create a new alignment .","score":[0,0.0649]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(selector) {\r\n        var result = this.parent;\r\n        if (selector) {\r\n            for (; result; result = result.parent) {\r\n                if (Ext.ComponentQuery.is(result, selector)) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }","code-length":92,"reference":"Walks up the `ownerCt` axis looking for an ancestor Container which matches\nthe passed simple selector.\n\nExample:\n\nvar owningTabPanel = grid.up('tabpanel');\n\n","result":"Find the first matching component.","score":[0.0098,0.0515]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        this.destroy = Ext.emptyFn;\r\n        var parent = this.getParent(),\r\n            referenceList = this.referenceList,\r\n            i, ln, reference;\r\n        this.isDestroying = true;\r\n        Ext.destroy(this.getTranslatable(), this.getPlugins());\r\n        if (parent) {\r\n            parent.remove(this, false);\r\n        }\r\n        for (i = 0, ln = referenceList.length; i < ln; i++) {\r\n            reference = referenceList[i];\r\n            this[reference].destroy();\r\n            delete this[reference];\r\n        }\r\n        Ext.destroy(this.innerHtmlElement);\r\n        this.setRecord(null);\r\n        this.callSuper();\r\n        Ext.ComponentManager.unregister(this);\r\n    }","code-length":208,"reference":"Destroys this Component.","result":"Destroy the record.","score":[0,0.1667]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (list, index, target, record, e) {\r\n        var me = this,\r\n            store = list.getStore(),\r\n            node = store.getAt(index);\r\n        me.fireEvent('itemtap', this, list, index, target, record, e);\r\n        if (node.isLeaf()) {\r\n            me.fireEvent('leafitemtap', this, list, index, target, record, e);\r\n            me.goToLeaf(node);\r\n        }\r\n        else {\r\n            this.goToNode(node);\r\n        }\r\n    }","code-length":148,"reference":"Called when an list item has been tapped.\n","result":"Trigger the itemtap event.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction () {\r\n        var me = this,\r\n            node = me.getLastNode(),\r\n            detailCard = me.getDetailCard(),\r\n            detailCardActive = detailCard && me.getActiveItem() == detailCard,\r\n            lastActiveList = me.getLastActiveList();\r\n        this.fireAction('back', [this, node, lastActiveList, detailCardActive], 'doBack');\r\n    }","code-length":108,"reference":"Called when the backButton has been tapped.","result":"Create the back action.","score":[0.1509,0.0746]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (node) {\r\n        if (!node.isLeaf()) {\r\n            throw new Error('goToLeaf: passed a node which is not a leaf.');\r\n        }\r\n        var me = this,\r\n            card = me.getDetailCard(node),\r\n            container = me.getDetailContainer(),\r\n            sharedContainer = container == this,\r\n            layout = me.getLayout(),\r\n            animation = (layout) ? layout.getAnimation() : false;\r\n        if (card) {\r\n            if (container.getItems().indexOf(card) === -1) {\r\n                container.add(card);\r\n            }\r\n            if (sharedContainer) {\r\n                if (me.getActiveItem() instanceof Ext.dataview.List) {\r\n                    me.setLastActiveList(me.getActiveItem());\r\n                }\r\n                me.setLastNode(node);\r\n            }\r\n            if (animation) {\r\n                animation.setReverse(false);\r\n            }\r\n            container.setActiveItem(card);\r\n            me.syncToolbar();\r\n        }\r\n    }","code-length":272,"reference":"The leaf you want to navigate to. You should pass a node instance.\n","result":"Go to leaf nodes.","score":[0.04,0.124]}
{"code":"\/*is used to<extra_id_0>\r\nfunction hoistFunctions(program) {\r\n\tvar functions = [];\r\n\tvar body = [];\r\n\tfor (let line of program.body) {\r\n\t\tif (line.type === 'ExportDefaultDeclaration') {\r\n\t\t\tif (line.declaration.type === 'FunctionDeclaration') {\r\n\t\t\t\tfunctions.push(line);\r\n\t\t\t} else {\r\n\t\t\t\tbody.push(line);\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (line.type === 'ExportNamedDeclaration') {\r\n\t\t\tif (!!line.declaration &&\r\n\t\t\t\tline.declaration.type === 'FunctionDeclaration') {\r\n\t\t\t\tfunctions.push(line);\r\n\t\t\t} else {\r\n\t\t\t\tbody.push(line);\r\n\t\t\t}\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (line.type === 'FunctionDeclaration') {\r\n\t\t\tfunctions.push(line);\r\n\t\t} else {\r\n\t\t\tbody.push(line);\r\n\t\t}\r\n\t}\r\n\treturn makeProgram([...functions, ...body]);\r\n}","code-length":274,"reference":"bring all function declarations and exports containing them to top of the program","result":"Hoist export default and export named functions.","score":[0.0685,0.1512]}
{"code":"\/*is used to<extra_id_0>\r\nfunction parseVehicleID($, item) {\r\n  let fields = $(item).find('td');\r\n  let id = $(fields[1]).find('a').attr('href').replace('Detail.aspx?id=', '');\r\n  return id;\r\n}","code-length":73,"reference":"Parse vehicle ID from the search results table","result":"Parse vehicle id .","score":[0.1662,0.3874]}
{"code":"\/*is used to<extra_id_0>\r\nfunction formatDetails(details) {\r\n  let result = {\r\n    results: details,\r\n    count: details.length,\r\n    time: new Date().toISOString()\r\n  };\r\n  return result;\r\n}","code-length":65,"reference":"Add current timestamp and results count to the output object","result":"Format the details.","score":[0.0396,0.0538]}
{"code":"\/*is used to<extra_id_0>\r\nfunction getByID(id) {\r\n  var url = `${APP_BASE_URL}Detail.aspx?id=${id}`;\r\n  return request(url)\r\n    .then(function(body) {\r\n      let $ = cheerio.load(body);\r\n      let info = {\r\n        url: url,\r\n        id: id\r\n      };\r\n      $('table#searchTableResults tr').each((i, item) => {\r\n        let span = $(item).find('span');\r\n        let key = $(span).attr('id').replace('ctl00_Application_lbl', '').toLowerCase();\r\n        let value = $(span).text().trim();\r\n        info[translations[key] || key] = value;\r\n      });\r\n      info.stolendate = getStandardizedDateStr(info.stolendate);\r\n      return info;\r\n    });\r\n}","code-length":227,"reference":"Read all possible information about desired vehicle. Loads vehicle details page","result":"Return info for a specific application.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        if (!config.callback) {\r\n            Ext.Logger.error('You must specify a `callback` for `#canMakePayments` to work.');\r\n            return false;\r\n        }\r\n        Ext.device.Communicator.send({\r\n            command: 'Purchase#canMakePayments',\r\n            callbacks: {\r\n                callback: function(flag) {\r\n                    config.callback.call(config.scope || this, flag);\r\n                }\r\n            },\r\n            scope: config.scope || this\r\n        });\r\n    }","code-length":145,"reference":"Checks if the current user is able to make payments.\n\n## Example\n\nExt.device.Purchases.canMakePayments({\ncallback: function(flag) {\nconsole.log(flag ? 'Yup! :)' : 'Nope! :(');\n}\n});\n\n","result":"Create a new payment.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n            if (!config.success) {\r\n                Ext.Logger.error('You must specify a `success` callback for `#purchase` to work.');\r\n                return false;\r\n            }\r\n            if (!config.failure) {\r\n                Ext.Logger.error('You must specify a `failure` callback for `#purchase` to work.');\r\n                return false;\r\n            }\r\n            Ext.device.Communicator.send({\r\n                command: 'Purchase#purchase',\r\n                identifier: this.get('productIdentifier'),\r\n                callbacks: {\r\n                    success: config.success,\r\n                    failure: config.failure\r\n                },\r\n                scope: config.scope || this\r\n            });\r\n        }","code-length":189,"reference":"Will attempt to purchase this product.\n\n## Example\n\nproduct.purchase({\nsuccess: function() {\nconsole.log(product.get('localizedTitle') + ' purchased!');\n},\nfailure: function() {\nconsole.log('Something went wrong while trying to purchase ' + product.get('localizedTitle'));\n}\n});\n\n","result":"Create a new instance of this class.","score":[0.0045,0.0169]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n            var me = this;\r\n            if (!config.success) {\r\n                Ext.Logger.error('You must specify a `success` callback for `#complete` to work.');\r\n                return false;\r\n            }\r\n            if (!config.failure) {\r\n                Ext.Logger.error('You must specify a `failure` callback for `#complete` to work.');\r\n                return false;\r\n            }\r\n            if (this.get('state') != 'charged') {\r\n                config.failure.call(config.scope || this, 'purchase is not charged');\r\n            }\r\n            Ext.device.Communicator.send({\r\n                command: 'Purchase#complete',\r\n                identifier: me.get('transactionIdentifier'),\r\n                callbacks: {\r\n                    success: function() {\r\n                        me.set('state', 'completed');\r\n                        config.success.call(config.scope || this);\r\n                    },\r\n                    failure: function() {\r\n                        me.set('state', 'charged');\r\n                        config.failure.call(config.scope || this);\r\n                    }\r\n                },\r\n                scope: config.scope || this\r\n            });\r\n        }","code-length":300,"reference":"Attempts to mark this purchase as complete\n","result":"Create a new function to be called by the user.","score":[0.1086,0.0685]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (key) {\r\r\n  this.key = key;\r\r\n  this.keyType = key.split(\" \")[0];\r\r\n  this.rawkey = key.split(\" \")[1];\r\r\n  try{\r\r\n    this.keyComment = key.split(\" \")[2];\r\r\n  } catch(err){\r\r\n    this.keyComment = null;\r\r\n  }\r\r\n\r\r\n  this.byteArray = this._stringToBytes(atob(this.rawkey));\r\r\n  this.slicedArray = [];\r\r\n\r\r\n  this.wordLength = 4;\r\r\n  this._load();\r\r\n}","code-length":169,"reference":"Simple, fast parsing of OpenSSH RSA and DSA keys to programmatically access key type, length, and and multiple key formats\n\n","result":"Create a new key.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(sourceFunc, boundFunc, context, callingContext, args) {\r\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\r\n    Ctor.prototype = sourceFunc.prototype;\r\n    var self = new Ctor;\r\n    Ctor.prototype = null;\r\n    var result = sourceFunc.apply(self, args);\r\n    if (_.isObject(result)) return result;\r\n    return self;\r\n  }","code-length":119,"reference":"Determines whether to execute a function as a constructor or a normal function with the provided arguments","result":"Create a bound function.","score":[0.0124,0.0318]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(e) {\r\n        var me = this,\r\n            oldChecked = me._checked,\r\n            newChecked = me.getChecked();\r\n        if (oldChecked != newChecked) {\r\n            if (newChecked) {\r\n                me.fireEvent('check', me, e);\r\n            } else {\r\n                me.fireEvent('uncheck', me, e);\r\n            }\r\n            me.fireEvent('change', me, newChecked, oldChecked);\r\n        }\r\n    }","code-length":129,"reference":"Fires the `check` or `uncheck` event when the checked value of this component changes.\n","result":"Trigger the event.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var values = [];\r\n        this.getSameGroupFields().forEach(function(field) {\r\n            if (field.getChecked()) {\r\n                values.push(field.getValue());\r\n            }\r\n        });\r\n        return values;\r\n    }","code-length":78,"reference":"Returns an array of values from the checkboxes in the group that are checked.\n","result":"Create the same group fields.","score":[0.0472,0.0763]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(values) {\r\n        this.getSameGroupFields().forEach(function(field) {\r\n            field.setChecked((values.indexOf(field.getValue()) !== -1));\r\n        });\r\n        return this;\r\n    }","code-length":66,"reference":"Set the status of all matched checkboxes in the same group to checked.\n","result":"Set the checked state of the fields.","score":[0.1153,0.3]}
{"code":"\/*is used to<extra_id_0>\r\nfunction() {\r\n        var me = this,\r\n            container = me.container;\r\n        if (!me.getStore()) {\r\n            if (!me.hasLoadedStore && !me.getDeferEmptyText()) {\r\n                me.showEmptyText();\r\n            }\r\n            return;\r\n        }\r\n        if (container) {\r\n            me.fireAction('refresh', [me], 'doRefresh');\r\n        }\r\n    }","code-length":116,"reference":"Refreshes the view by reloading the data from the store and re-rendering the template.","result":"Create the store.","score":[0.0104,0.0388]}
{"code":"\/*is used to<extra_id_0>\r\nfunction processParams(paramsString) {\r\n  var individualParams = paramsString.split(\"&\"),\r\n      resultObject = {};\r\n  individualParams.forEach(function(item) {\r\n    var itemParts = item.split(\"=\"),\r\n        paramName = itemParts[0],\r\n        paramValue = decodeURIComponent(itemParts[1] || \"\");\r\n    var paramObject = {};\r\n    paramObject[paramName] = paramValue;\r\n    $.extend(resultObject, paramObject);\r\n  });\r\n  return resultObject;\r\n}","code-length":141,"reference":"Utility method to process a params string in a snippet invocationand corretly parse out the various parameters in it.","result":"Process params.","score":[0,0.0289]}
{"code":"\/*is used to<extra_id_0>\r\nfunction(config) {\r\n        if (!this._store) {\r\n            this._store = [\r\n                {\r\n                    first: 'Robert',\r\n                    last: 'Dougan',\r\n                    emails: {\r\n                        work: 'rob@sencha.com'\r\n                    }\r\n                },\r\n                {\r\n                    first: 'Jamie',\r\n                    last: 'Avins',\r\n                    emails: {\r\n                        work: 'jamie@sencha.com'\r\n                    }\r\n                }\r\n            ];\r\n        }\r\n        config.success.call(config.scope || this, this._store);\r\n    }","code-length":169,"reference":"Returns an Array of contact objects.\n","result":"Initialize the store.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction Collection(options) {\r\n  if (!(this instanceof Collection)){\r\n    return new Collection(options);\r\n  }\r\n  options = options || {};\r\n  if (options instanceof Array) {\r\n    this.modelType = undefined;\r\n    this.items = options;\r\n  } else {\r\n    this.modelType = options.modelType;\r\n    this.items = options.items || [];\r\n    if (!(this.items instanceof Array)) {\r\n      throw new CollectionException('Items must be an array');\r\n    }\r\n  }\r\n}","code-length":147,"reference":"Create a new collection\n\n","result":"Create a collection.","score":[0.4137,0.4808]}
{"code":"\/*is used to<extra_id_0>\r\nfunction find(filter) {\r\n  var item;\r\n  var i;\r\n  var ilen;\r\n  var keys;\r\n  var key;\r\n  var k;\r\n  var klen;\r\n  var found;\r\n  if (filter instanceof Function) {\r\n    for (i = 0, ilen = this.items.length; i < ilen; ++i) {\r\n      item = this.items[i];\r\n      if (filter(item, i)) {\r\n        return item;\r\n      }\r\n    }\r\n  } else if (filter !== null && filter !== undefined) {\r\n    if (typeof filter === 'object') {\r\n      keys = Object.keys(filter);\r\n      klen = keys.length;\r\n      for (i = 0, ilen = this.items.length; i < ilen; ++i) {\r\n        item = this.items[i];\r\n        found = true;\r\n        for (k = 0; k < klen && found; ++k) {\r\n          key = keys[k];\r\n          if (filter[key] !== item[key]) {\r\n            found = false;\r\n          }\r\n        }\r\n        if (found) {\r\n          return item;\r\n        }\r\n      }\r\n    } else if (this.modelType) {\r\n      keys = Object.keys(this.modelType.attributes);\r\n      klen = keys.length;\r\n      for (i = 0, ilen = this.items.length; i < ilen; ++i) {\r\n        item = this.items[i];\r\n        found = false;\r\n        for (k = 0; k < klen && !found; ++k) {\r\n          key = keys[k];\r\n          if (filter === item[key]) {\r\n            found = true;\r\n          }\r\n        }\r\n        if (found) {\r\n          return item;\r\n        }\r\n      }\r\n    } else {\r\n      for (i = 0, ilen = this.items.length; i < ilen; ++i) {\r\n        item = this.items[i];\r\n        found = false;\r\n        keys = Object.keys(item);\r\n        for (k = 0, klen = keys.length; k < klen && !found; ++k) {\r\n          key = keys[k];\r\n          if (filter === item[key]) {\r\n            found = true;\r\n          }\r\n        }\r\n        if (found) {\r\n          return item;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return undefined;\r\n}","code-length":642,"reference":"Find the first item matching filter\n\n","result":"Code too long,keep in 512.","score":[0,0.0]}
{"code":"\/*is used to<extra_id_0>\r\nfunction (context, grunt) {\r\n  this.context = context;\r\n  this.grunt = grunt;\r\n  this.options = context.options(defaultOptions);\r\n}","code-length":52,"reference":"Creates a new task.\n\n","result":"Create a new instance of the plugin.","score":[0.2284,0.6848]}
